
example.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	1f00106f          	j	11f0 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	12ba                	slli	t0,t0,0x2e
   a:	0000                	unimp
   c:	1262                	slli	tp,tp,0x38
	...
  2e:	0000                	unimp
  30:	1c34                	addi	a3,sp,568
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	1262                	slli	tp,tp,0x38
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	1262                	slli	tp,tp,0x38
  42:	0000                	unimp
  44:	1262                	slli	tp,tp,0x38
  46:	0000                	unimp
  48:	1262                	slli	tp,tp,0x38
  4a:	0000                	unimp
  4c:	1262                	slli	tp,tp,0x38
  4e:	0000                	unimp
  50:	1262                	slli	tp,tp,0x38
  52:	0000                	unimp
  54:	1262                	slli	tp,tp,0x38
  56:	0000                	unimp
  58:	1262                	slli	tp,tp,0x38
  5a:	0000                	unimp
  5c:	1262                	slli	tp,tp,0x38
  5e:	0000                	unimp
  60:	1262                	slli	tp,tp,0x38
  62:	0000                	unimp
  64:	1262                	slli	tp,tp,0x38
  66:	0000                	unimp
  68:	1262                	slli	tp,tp,0x38
  6a:	0000                	unimp
  6c:	1262                	slli	tp,tp,0x38
  6e:	0000                	unimp
  70:	1262                	slli	tp,tp,0x38
  72:	0000                	unimp
  74:	1262                	slli	tp,tp,0x38
  76:	0000                	unimp
  78:	1262                	slli	tp,tp,0x38
  7a:	0000                	unimp
  7c:	1262                	slli	tp,tp,0x38
  7e:	0000                	unimp
  80:	1262                	slli	tp,tp,0x38
  82:	0000                	unimp
  84:	1262                	slli	tp,tp,0x38
  86:	0000                	unimp
  88:	1262                	slli	tp,tp,0x38
  8a:	0000                	unimp
  8c:	1262                	slli	tp,tp,0x38
  8e:	0000                	unimp
  90:	1262                	slli	tp,tp,0x38
  92:	0000                	unimp
  94:	1262                	slli	tp,tp,0x38
  96:	0000                	unimp
  98:	1262                	slli	tp,tp,0x38
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divdf3>:
      a0:	fc410113          	addi	sp,sp,-60
      a4:	d826                	sw	s1,48(sp)
      a6:	84ae                	mv	s1,a1
      a8:	00c59713          	slli	a4,a1,0xc
      ac:	01f4d793          	srli	a5,s1,0x1f
      b0:	81d1                	srli	a1,a1,0x14
      b2:	da22                	sw	s0,52(sp)
      b4:	832a                	mv	t1,a0
      b6:	842a                	mv	s0,a0
      b8:	dc06                	sw	ra,56(sp)
      ba:	7ff5f513          	andi	a0,a1,2047
      be:	c03e                	sw	a5,0(sp)
      c0:	8331                	srli	a4,a4,0xc
      c2:	c541                	beqz	a0,14a <__divdf3+0xaa>
      c4:	7ff00793          	li	a5,2047
      c8:	0ef50863          	beq	a0,a5,1b8 <__divdf3+0x118>
      cc:	070e                	slli	a4,a4,0x3
      ce:	01d35793          	srli	a5,t1,0x1d
      d2:	8fd9                	or	a5,a5,a4
      d4:	00800737          	lui	a4,0x800
      d8:	8fd9                	or	a5,a5,a4
      da:	00331413          	slli	s0,t1,0x3
      de:	c0150593          	addi	a1,a0,-1023
      e2:	4481                	li	s1,0
      e4:	00c69713          	slli	a4,a3,0xc
      e8:	00c75393          	srli	t2,a4,0xc
      ec:	0146d713          	srli	a4,a3,0x14
      f0:	82fd                	srli	a3,a3,0x1f
      f2:	7ff77713          	andi	a4,a4,2047
      f6:	c236                	sw	a3,4(sp)
      f8:	c36d                	beqz	a4,1da <__divdf3+0x13a>
      fa:	7ff00693          	li	a3,2047
      fe:	14d70863          	beq	a4,a3,24e <__divdf3+0x1ae>
     102:	00339513          	slli	a0,t2,0x3
     106:	01d65693          	srli	a3,a2,0x1d
     10a:	8ec9                	or	a3,a3,a0
     10c:	00800537          	lui	a0,0x800
     110:	00a6e3b3          	or	t2,a3,a0
     114:	00361693          	slli	a3,a2,0x3
     118:	c0170613          	addi	a2,a4,-1023 # 7ffc01 <lib_i2c.c.bdeb3654+0x7fa3b8>
     11c:	4501                	li	a0,0
     11e:	4702                	lw	a4,0(sp)
     120:	4312                	lw	t1,4(sp)
     122:	00674733          	xor	a4,a4,t1
     126:	c63a                	sw	a4,12(sp)
     128:	40c58733          	sub	a4,a1,a2
     12c:	c43a                	sw	a4,8(sp)
     12e:	00249713          	slli	a4,s1,0x2
     132:	8f49                	or	a4,a4,a0
     134:	177d                	addi	a4,a4,-1
     136:	4639                	li	a2,14
     138:	14e66c63          	bltu	a2,a4,290 <__divdf3+0x1f0>
     13c:	6609                	lui	a2,0x2
     13e:	070a                	slli	a4,a4,0x2
     140:	c6860613          	addi	a2,a2,-920 # 1c68 <SysTick_Handler+0x34>
     144:	9732                	add	a4,a4,a2
     146:	4318                	lw	a4,0(a4)
     148:	8702                	jr	a4
     14a:	006767b3          	or	a5,a4,t1
     14e:	cfad                	beqz	a5,1c8 <__divdf3+0x128>
     150:	c836                	sw	a3,16(sp)
     152:	c632                	sw	a2,12(sp)
     154:	cf15                	beqz	a4,190 <__divdf3+0xf0>
     156:	853a                	mv	a0,a4
     158:	c41a                	sw	t1,8(sp)
     15a:	c23a                	sw	a4,4(sp)
     15c:	2d9d                	jal	7d2 <__clzsi2>
     15e:	4712                	lw	a4,4(sp)
     160:	4322                	lw	t1,8(sp)
     162:	4632                	lw	a2,12(sp)
     164:	46c2                	lw	a3,16(sp)
     166:	82aa                	mv	t0,a0
     168:	ff550393          	addi	t2,a0,-11 # 7ffff5 <lib_i2c.c.bdeb3654+0x7fa7ac>
     16c:	47f5                	li	a5,29
     16e:	ff828593          	addi	a1,t0,-8
     172:	407787b3          	sub	a5,a5,t2
     176:	00b71733          	sll	a4,a4,a1
     17a:	00f357b3          	srl	a5,t1,a5
     17e:	8fd9                	or	a5,a5,a4
     180:	00b31733          	sll	a4,t1,a1
     184:	c0d00593          	li	a1,-1011
     188:	405585b3          	sub	a1,a1,t0
     18c:	843a                	mv	s0,a4
     18e:	bf91                	j	e2 <__divdf3+0x42>
     190:	851a                	mv	a0,t1
     192:	c43a                	sw	a4,8(sp)
     194:	c21a                	sw	t1,4(sp)
     196:	2d35                	jal	7d2 <__clzsi2>
     198:	01550393          	addi	t2,a0,21
     19c:	47f1                	li	a5,28
     19e:	4312                	lw	t1,4(sp)
     1a0:	4722                	lw	a4,8(sp)
     1a2:	4632                	lw	a2,12(sp)
     1a4:	46c2                	lw	a3,16(sp)
     1a6:	02050293          	addi	t0,a0,32
     1aa:	fc77d1e3          	bge	a5,t2,16c <__divdf3+0xcc>
     1ae:	ff850793          	addi	a5,a0,-8
     1b2:	00f317b3          	sll	a5,t1,a5
     1b6:	b7f9                	j	184 <__divdf3+0xe4>
     1b8:	006767b3          	or	a5,a4,t1
     1bc:	cb91                	beqz	a5,1d0 <__divdf3+0x130>
     1be:	87ba                	mv	a5,a4
     1c0:	7ff00593          	li	a1,2047
     1c4:	448d                	li	s1,3
     1c6:	bf39                	j	e4 <__divdf3+0x44>
     1c8:	4401                	li	s0,0
     1ca:	4581                	li	a1,0
     1cc:	4485                	li	s1,1
     1ce:	bf19                	j	e4 <__divdf3+0x44>
     1d0:	4401                	li	s0,0
     1d2:	7ff00593          	li	a1,2047
     1d6:	4489                	li	s1,2
     1d8:	b731                	j	e4 <__divdf3+0x44>
     1da:	00c3e6b3          	or	a3,t2,a2
     1de:	c2c1                	beqz	a3,25e <__divdf3+0x1be>
     1e0:	04038263          	beqz	t2,224 <__divdf3+0x184>
     1e4:	851e                	mv	a0,t2
     1e6:	ca32                	sw	a2,20(sp)
     1e8:	c82e                	sw	a1,16(sp)
     1ea:	c63e                	sw	a5,12(sp)
     1ec:	c41e                	sw	t2,8(sp)
     1ee:	23d5                	jal	7d2 <__clzsi2>
     1f0:	43a2                	lw	t2,8(sp)
     1f2:	47b2                	lw	a5,12(sp)
     1f4:	45c2                	lw	a1,16(sp)
     1f6:	4652                	lw	a2,20(sp)
     1f8:	86aa                	mv	a3,a0
     1fa:	ff550293          	addi	t0,a0,-11
     1fe:	4775                	li	a4,29
     200:	ff868513          	addi	a0,a3,-8
     204:	40570733          	sub	a4,a4,t0
     208:	00a393b3          	sll	t2,t2,a0
     20c:	00e65733          	srl	a4,a2,a4
     210:	00776733          	or	a4,a4,t2
     214:	00a613b3          	sll	t2,a2,a0
     218:	c0d00613          	li	a2,-1011
     21c:	8e15                	sub	a2,a2,a3
     21e:	869e                	mv	a3,t2
     220:	83ba                	mv	t2,a4
     222:	bded                	j	11c <__divdf3+0x7c>
     224:	8532                	mv	a0,a2
     226:	ca1e                	sw	t2,20(sp)
     228:	c82e                	sw	a1,16(sp)
     22a:	c63e                	sw	a5,12(sp)
     22c:	c432                	sw	a2,8(sp)
     22e:	2355                	jal	7d2 <__clzsi2>
     230:	01550293          	addi	t0,a0,21
     234:	4771                	li	a4,28
     236:	4622                	lw	a2,8(sp)
     238:	47b2                	lw	a5,12(sp)
     23a:	45c2                	lw	a1,16(sp)
     23c:	43d2                	lw	t2,20(sp)
     23e:	02050693          	addi	a3,a0,32
     242:	fa575ee3          	bge	a4,t0,1fe <__divdf3+0x15e>
     246:	1561                	addi	a0,a0,-8
     248:	00a61733          	sll	a4,a2,a0
     24c:	b7f1                	j	218 <__divdf3+0x178>
     24e:	00c3e6b3          	or	a3,t2,a2
     252:	ca91                	beqz	a3,266 <__divdf3+0x1c6>
     254:	86b2                	mv	a3,a2
     256:	450d                	li	a0,3
     258:	7ff00613          	li	a2,2047
     25c:	b5c9                	j	11e <__divdf3+0x7e>
     25e:	4381                	li	t2,0
     260:	4601                	li	a2,0
     262:	4505                	li	a0,1
     264:	bd6d                	j	11e <__divdf3+0x7e>
     266:	4381                	li	t2,0
     268:	7ff00613          	li	a2,2047
     26c:	4509                	li	a0,2
     26e:	bd45                	j	11e <__divdf3+0x7e>
     270:	4702                	lw	a4,0(sp)
     272:	83be                	mv	t2,a5
     274:	86a2                	mv	a3,s0
     276:	c63a                	sw	a4,12(sp)
     278:	4789                	li	a5,2
     27a:	40f48363          	beq	s1,a5,680 <__divdf3+0x5e0>
     27e:	478d                	li	a5,3
     280:	3ef48963          	beq	s1,a5,672 <__divdf3+0x5d2>
     284:	4785                	li	a5,1
     286:	2cf49763          	bne	s1,a5,554 <__divdf3+0x4b4>
     28a:	4381                	li	t2,0
     28c:	4681                	li	a3,0
     28e:	ae5d                	j	644 <__divdf3+0x5a4>
     290:	00f3e663          	bltu	t2,a5,29c <__divdf3+0x1fc>
     294:	32779d63          	bne	a5,t2,5ce <__divdf3+0x52e>
     298:	32d46b63          	bltu	s0,a3,5ce <__divdf3+0x52e>
     29c:	01f79593          	slli	a1,a5,0x1f
     2a0:	00145613          	srli	a2,s0,0x1
     2a4:	01f41713          	slli	a4,s0,0x1f
     2a8:	8385                	srli	a5,a5,0x1
     2aa:	00c5e433          	or	s0,a1,a2
     2ae:	00839613          	slli	a2,t2,0x8
     2b2:	d03a                	sw	a4,32(sp)
     2b4:	00869713          	slli	a4,a3,0x8
     2b8:	c03a                	sw	a4,0(sp)
     2ba:	01065713          	srli	a4,a2,0x10
     2be:	0186d593          	srli	a1,a3,0x18
     2c2:	c23a                	sw	a4,4(sp)
     2c4:	00c5e333          	or	t1,a1,a2
     2c8:	4592                	lw	a1,4(sp)
     2ca:	01031713          	slli	a4,t1,0x10
     2ce:	8341                	srli	a4,a4,0x10
     2d0:	853e                	mv	a0,a5
     2d2:	ce1a                	sw	t1,28(sp)
     2d4:	cc3a                	sw	a4,24(sp)
     2d6:	ca3e                	sw	a5,20(sp)
     2d8:	2151                	jal	75c <__hidden___udivsi3>
     2da:	85aa                	mv	a1,a0
     2dc:	c82a                	sw	a0,16(sp)
     2de:	4562                	lw	a0,24(sp)
     2e0:	29b1                	jal	73c <__mulsi3>
     2e2:	47d2                	lw	a5,20(sp)
     2e4:	4592                	lw	a1,4(sp)
     2e6:	84aa                	mv	s1,a0
     2e8:	853e                	mv	a0,a5
     2ea:	2979                	jal	788 <__umodsi3>
     2ec:	46c2                	lw	a3,16(sp)
     2ee:	0542                	slli	a0,a0,0x10
     2f0:	01045613          	srli	a2,s0,0x10
     2f4:	8e49                	or	a2,a2,a0
     2f6:	4372                	lw	t1,28(sp)
     2f8:	5702                	lw	a4,32(sp)
     2fa:	87b6                	mv	a5,a3
     2fc:	00967c63          	bgeu	a2,s1,314 <__divdf3+0x274>
     300:	961a                	add	a2,a2,t1
     302:	fff68793          	addi	a5,a3,-1
     306:	00666763          	bltu	a2,t1,314 <__divdf3+0x274>
     30a:	00967563          	bgeu	a2,s1,314 <__divdf3+0x274>
     30e:	ffe68793          	addi	a5,a3,-2
     312:	961a                	add	a2,a2,t1
     314:	4592                	lw	a1,4(sp)
     316:	d03e                	sw	a5,32(sp)
     318:	409607b3          	sub	a5,a2,s1
     31c:	853e                	mv	a0,a5
     31e:	d21a                	sw	t1,36(sp)
     320:	ce3a                	sw	a4,28(sp)
     322:	c83e                	sw	a5,16(sp)
     324:	2925                	jal	75c <__hidden___udivsi3>
     326:	85aa                	mv	a1,a0
     328:	ca2a                	sw	a0,20(sp)
     32a:	4562                	lw	a0,24(sp)
     32c:	0442                	slli	s0,s0,0x10
     32e:	8041                	srli	s0,s0,0x10
     330:	2131                	jal	73c <__mulsi3>
     332:	4592                	lw	a1,4(sp)
     334:	84aa                	mv	s1,a0
     336:	4542                	lw	a0,16(sp)
     338:	2981                	jal	788 <__umodsi3>
     33a:	4652                	lw	a2,20(sp)
     33c:	0542                	slli	a0,a0,0x10
     33e:	8c49                	or	s0,s0,a0
     340:	4772                	lw	a4,28(sp)
     342:	5782                	lw	a5,32(sp)
     344:	5312                	lw	t1,36(sp)
     346:	85b2                	mv	a1,a2
     348:	00947c63          	bgeu	s0,s1,360 <__divdf3+0x2c0>
     34c:	941a                	add	s0,s0,t1
     34e:	fff60593          	addi	a1,a2,-1
     352:	00646763          	bltu	s0,t1,360 <__divdf3+0x2c0>
     356:	00947563          	bgeu	s0,s1,360 <__divdf3+0x2c0>
     35a:	ffe60593          	addi	a1,a2,-2
     35e:	941a                	add	s0,s0,t1
     360:	07c2                	slli	a5,a5,0x10
     362:	00b7e2b3          	or	t0,a5,a1
     366:	4782                	lw	a5,0(sp)
     368:	4602                	lw	a2,0(sp)
     36a:	63c1                	lui	t2,0x10
     36c:	fff38693          	addi	a3,t2,-1 # ffff <lib_i2c.c.bdeb3654+0xa7b6>
     370:	83c1                	srli	a5,a5,0x10
     372:	c83e                	sw	a5,16(sp)
     374:	00d2f7b3          	and	a5,t0,a3
     378:	8ef1                	and	a3,a3,a2
     37a:	8c05                	sub	s0,s0,s1
     37c:	853e                	mv	a0,a5
     37e:	ca36                	sw	a3,20(sp)
     380:	85b6                	mv	a1,a3
     382:	2e6d                	jal	73c <__mulsi3>
     384:	84aa                	mv	s1,a0
     386:	45c2                	lw	a1,16(sp)
     388:	853e                	mv	a0,a5
     38a:	2e4d                	jal	73c <__mulsi3>
     38c:	87aa                	mv	a5,a0
     38e:	45d2                	lw	a1,20(sp)
     390:	0102d513          	srli	a0,t0,0x10
     394:	2665                	jal	73c <__mulsi3>
     396:	ce2a                	sw	a0,28(sp)
     398:	45c2                	lw	a1,16(sp)
     39a:	0102d513          	srli	a0,t0,0x10
     39e:	2e79                	jal	73c <__mulsi3>
     3a0:	4672                	lw	a2,28(sp)
     3a2:	0104d693          	srli	a3,s1,0x10
     3a6:	97b2                	add	a5,a5,a2
     3a8:	97b6                	add	a5,a5,a3
     3aa:	00c7f363          	bgeu	a5,a2,3b0 <__divdf3+0x310>
     3ae:	951e                	add	a0,a0,t2
     3b0:	0107d693          	srli	a3,a5,0x10
     3b4:	9536                	add	a0,a0,a3
     3b6:	66c1                	lui	a3,0x10
     3b8:	16fd                	addi	a3,a3,-1
     3ba:	8ff5                	and	a5,a5,a3
     3bc:	07c2                	slli	a5,a5,0x10
     3be:	8cf5                	and	s1,s1,a3
     3c0:	94be                	add	s1,s1,a5
     3c2:	00a46763          	bltu	s0,a0,3d0 <__divdf3+0x330>
     3c6:	8396                	mv	t2,t0
     3c8:	04a41363          	bne	s0,a0,40e <__divdf3+0x36e>
     3cc:	04977163          	bgeu	a4,s1,40e <__divdf3+0x36e>
     3d0:	4782                	lw	a5,0(sp)
     3d2:	fff28393          	addi	t2,t0,-1
     3d6:	97ba                	add	a5,a5,a4
     3d8:	00e7b6b3          	sltu	a3,a5,a4
     3dc:	00668633          	add	a2,a3,t1
     3e0:	9432                	add	s0,s0,a2
     3e2:	873e                	mv	a4,a5
     3e4:	00836563          	bltu	t1,s0,3ee <__divdf3+0x34e>
     3e8:	02831363          	bne	t1,s0,40e <__divdf3+0x36e>
     3ec:	e28d                	bnez	a3,40e <__divdf3+0x36e>
     3ee:	00a46663          	bltu	s0,a0,3fa <__divdf3+0x35a>
     3f2:	00851e63          	bne	a0,s0,40e <__divdf3+0x36e>
     3f6:	0097fc63          	bgeu	a5,s1,40e <__divdf3+0x36e>
     3fa:	4702                	lw	a4,0(sp)
     3fc:	ffe28393          	addi	t2,t0,-2
     400:	97ba                	add	a5,a5,a4
     402:	873e                	mv	a4,a5
     404:	4782                	lw	a5,0(sp)
     406:	00f737b3          	sltu	a5,a4,a5
     40a:	979a                	add	a5,a5,t1
     40c:	943e                	add	s0,s0,a5
     40e:	409704b3          	sub	s1,a4,s1
     412:	8c09                	sub	s0,s0,a0
     414:	00973733          	sltu	a4,a4,s1
     418:	8c19                	sub	s0,s0,a4
     41a:	d41a                	sw	t1,40(sp)
     41c:	56fd                	li	a3,-1
     41e:	12830b63          	beq	t1,s0,554 <__divdf3+0x4b4>
     422:	4592                	lw	a1,4(sp)
     424:	8522                	mv	a0,s0
     426:	d21e                	sw	t2,36(sp)
     428:	2e15                	jal	75c <__hidden___udivsi3>
     42a:	85aa                	mv	a1,a0
     42c:	d02a                	sw	a0,32(sp)
     42e:	4562                	lw	a0,24(sp)
     430:	2631                	jal	73c <__mulsi3>
     432:	4592                	lw	a1,4(sp)
     434:	ce2a                	sw	a0,28(sp)
     436:	8522                	mv	a0,s0
     438:	2e81                	jal	788 <__umodsi3>
     43a:	5682                	lw	a3,32(sp)
     43c:	47f2                	lw	a5,28(sp)
     43e:	0542                	slli	a0,a0,0x10
     440:	0104d413          	srli	s0,s1,0x10
     444:	8c49                	or	s0,s0,a0
     446:	5392                	lw	t2,36(sp)
     448:	5322                	lw	t1,40(sp)
     44a:	8736                	mv	a4,a3
     44c:	00f47c63          	bgeu	s0,a5,464 <__divdf3+0x3c4>
     450:	941a                	add	s0,s0,t1
     452:	fff68713          	addi	a4,a3,-1 # ffff <lib_i2c.c.bdeb3654+0xa7b6>
     456:	00646763          	bltu	s0,t1,464 <__divdf3+0x3c4>
     45a:	00f47563          	bgeu	s0,a5,464 <__divdf3+0x3c4>
     45e:	ffe68713          	addi	a4,a3,-2
     462:	941a                	add	s0,s0,t1
     464:	4592                	lw	a1,4(sp)
     466:	40f407b3          	sub	a5,s0,a5
     46a:	853e                	mv	a0,a5
     46c:	d61a                	sw	t1,44(sp)
     46e:	d43a                	sw	a4,40(sp)
     470:	d21e                	sw	t2,36(sp)
     472:	ce3e                	sw	a5,28(sp)
     474:	24e5                	jal	75c <__hidden___udivsi3>
     476:	85aa                	mv	a1,a0
     478:	d02a                	sw	a0,32(sp)
     47a:	4562                	lw	a0,24(sp)
     47c:	24c1                	jal	73c <__mulsi3>
     47e:	4592                	lw	a1,4(sp)
     480:	842a                	mv	s0,a0
     482:	4572                	lw	a0,28(sp)
     484:	2611                	jal	788 <__umodsi3>
     486:	5602                	lw	a2,32(sp)
     488:	01049793          	slli	a5,s1,0x10
     48c:	0542                	slli	a0,a0,0x10
     48e:	83c1                	srli	a5,a5,0x10
     490:	8fc9                	or	a5,a5,a0
     492:	5392                	lw	t2,36(sp)
     494:	5722                	lw	a4,40(sp)
     496:	5332                	lw	t1,44(sp)
     498:	85b2                	mv	a1,a2
     49a:	0087fc63          	bgeu	a5,s0,4b2 <__divdf3+0x412>
     49e:	979a                	add	a5,a5,t1
     4a0:	fff60593          	addi	a1,a2,-1
     4a4:	0067e763          	bltu	a5,t1,4b2 <__divdf3+0x412>
     4a8:	0087f563          	bgeu	a5,s0,4b2 <__divdf3+0x412>
     4ac:	ffe60593          	addi	a1,a2,-2
     4b0:	979a                	add	a5,a5,t1
     4b2:	0742                	slli	a4,a4,0x10
     4b4:	8f4d                	or	a4,a4,a1
     4b6:	01071293          	slli	t0,a4,0x10
     4ba:	0102d293          	srli	t0,t0,0x10
     4be:	45d2                	lw	a1,20(sp)
     4c0:	8f81                	sub	a5,a5,s0
     4c2:	8516                	mv	a0,t0
     4c4:	2ca5                	jal	73c <__mulsi3>
     4c6:	84aa                	mv	s1,a0
     4c8:	45c2                	lw	a1,16(sp)
     4ca:	8516                	mv	a0,t0
     4cc:	2c85                	jal	73c <__mulsi3>
     4ce:	82aa                	mv	t0,a0
     4d0:	45d2                	lw	a1,20(sp)
     4d2:	01075513          	srli	a0,a4,0x10
     4d6:	249d                	jal	73c <__mulsi3>
     4d8:	842a                	mv	s0,a0
     4da:	45c2                	lw	a1,16(sp)
     4dc:	01075513          	srli	a0,a4,0x10
     4e0:	2cb1                	jal	73c <__mulsi3>
     4e2:	0104d613          	srli	a2,s1,0x10
     4e6:	008286b3          	add	a3,t0,s0
     4ea:	00d602b3          	add	t0,a2,a3
     4ee:	0082f463          	bgeu	t0,s0,4f6 <__divdf3+0x456>
     4f2:	66c1                	lui	a3,0x10
     4f4:	9536                	add	a0,a0,a3
     4f6:	0102d693          	srli	a3,t0,0x10
     4fa:	9536                	add	a0,a0,a3
     4fc:	66c1                	lui	a3,0x10
     4fe:	16fd                	addi	a3,a3,-1
     500:	00d2f2b3          	and	t0,t0,a3
     504:	02c2                	slli	t0,t0,0x10
     506:	8ee5                	and	a3,a3,s1
     508:	92b6                	add	t0,t0,a3
     50a:	00a7e763          	bltu	a5,a0,518 <__divdf3+0x478>
     50e:	86ba                	mv	a3,a4
     510:	04a79063          	bne	a5,a0,550 <__divdf3+0x4b0>
     514:	04028063          	beqz	t0,554 <__divdf3+0x4b4>
     518:	979a                	add	a5,a5,t1
     51a:	fff70693          	addi	a3,a4,-1
     51e:	863e                	mv	a2,a5
     520:	0267e363          	bltu	a5,t1,546 <__divdf3+0x4a6>
     524:	00a7e763          	bltu	a5,a0,532 <__divdf3+0x492>
     528:	02a79463          	bne	a5,a0,550 <__divdf3+0x4b0>
     52c:	4602                	lw	a2,0(sp)
     52e:	00567e63          	bgeu	a2,t0,54a <__divdf3+0x4aa>
     532:	ffe70693          	addi	a3,a4,-2
     536:	4702                	lw	a4,0(sp)
     538:	4602                	lw	a2,0(sp)
     53a:	0706                	slli	a4,a4,0x1
     53c:	00c73633          	sltu	a2,a4,a2
     540:	961a                	add	a2,a2,t1
     542:	963e                	add	a2,a2,a5
     544:	c03a                	sw	a4,0(sp)
     546:	00a61563          	bne	a2,a0,550 <__divdf3+0x4b0>
     54a:	4782                	lw	a5,0(sp)
     54c:	00f28463          	beq	t0,a5,554 <__divdf3+0x4b4>
     550:	0016e693          	ori	a3,a3,1
     554:	47a2                	lw	a5,8(sp)
     556:	3ff78793          	addi	a5,a5,1023
     55a:	08f05363          	blez	a5,5e0 <__divdf3+0x540>
     55e:	0076f713          	andi	a4,a3,7
     562:	cf01                	beqz	a4,57a <__divdf3+0x4da>
     564:	00f6f713          	andi	a4,a3,15
     568:	4611                	li	a2,4
     56a:	00c70863          	beq	a4,a2,57a <__divdf3+0x4da>
     56e:	00468713          	addi	a4,a3,4 # 10004 <lib_i2c.c.bdeb3654+0xa7bb>
     572:	00d73633          	sltu	a2,a4,a3
     576:	93b2                	add	t2,t2,a2
     578:	86ba                	mv	a3,a4
     57a:	01000737          	lui	a4,0x1000
     57e:	00e3f733          	and	a4,t2,a4
     582:	cb09                	beqz	a4,594 <__divdf3+0x4f4>
     584:	ff0007b7          	lui	a5,0xff000
     588:	17fd                	addi	a5,a5,-1
     58a:	00f3f3b3          	and	t2,t2,a5
     58e:	47a2                	lw	a5,8(sp)
     590:	40078793          	addi	a5,a5,1024 # ff000400 <_eusrstack+0xdefffc00>
     594:	7fe00713          	li	a4,2046
     598:	0ef74463          	blt	a4,a5,680 <__divdf3+0x5e0>
     59c:	0036d713          	srli	a4,a3,0x3
     5a0:	01d39693          	slli	a3,t2,0x1d
     5a4:	8ed9                	or	a3,a3,a4
     5a6:	0033d393          	srli	t2,t2,0x3
     5aa:	4732                	lw	a4,12(sp)
     5ac:	03b2                	slli	t2,t2,0xc
     5ae:	50e2                	lw	ra,56(sp)
     5b0:	5452                	lw	s0,52(sp)
     5b2:	07d2                	slli	a5,a5,0x14
     5b4:	00c3d393          	srli	t2,t2,0xc
     5b8:	0077e7b3          	or	a5,a5,t2
     5bc:	077e                	slli	a4,a4,0x1f
     5be:	00e7e633          	or	a2,a5,a4
     5c2:	54c2                	lw	s1,48(sp)
     5c4:	8536                	mv	a0,a3
     5c6:	85b2                	mv	a1,a2
     5c8:	03c10113          	addi	sp,sp,60
     5cc:	8082                	ret
     5ce:	4722                	lw	a4,8(sp)
     5d0:	177d                	addi	a4,a4,-1
     5d2:	c43a                	sw	a4,8(sp)
     5d4:	4701                	li	a4,0
     5d6:	b9e1                	j	2ae <__divdf3+0x20e>
     5d8:	4792                	lw	a5,4(sp)
     5da:	84aa                	mv	s1,a0
     5dc:	c63e                	sw	a5,12(sp)
     5de:	b969                	j	278 <__divdf3+0x1d8>
     5e0:	4605                	li	a2,1
     5e2:	cb89                	beqz	a5,5f4 <__divdf3+0x554>
     5e4:	8e1d                	sub	a2,a2,a5
     5e6:	03800713          	li	a4,56
     5ea:	cac740e3          	blt	a4,a2,28a <__divdf3+0x1ea>
     5ee:	477d                	li	a4,31
     5f0:	04c74c63          	blt	a4,a2,648 <__divdf3+0x5a8>
     5f4:	47a2                	lw	a5,8(sp)
     5f6:	41e78713          	addi	a4,a5,1054
     5fa:	00c6d7b3          	srl	a5,a3,a2
     5fe:	00e696b3          	sll	a3,a3,a4
     602:	00d036b3          	snez	a3,a3
     606:	00e39733          	sll	a4,t2,a4
     60a:	8ed9                	or	a3,a3,a4
     60c:	8fd5                	or	a5,a5,a3
     60e:	00c3d3b3          	srl	t2,t2,a2
     612:	0077f713          	andi	a4,a5,7
     616:	cf01                	beqz	a4,62e <__divdf3+0x58e>
     618:	00f7f713          	andi	a4,a5,15
     61c:	4691                	li	a3,4
     61e:	00d70863          	beq	a4,a3,62e <__divdf3+0x58e>
     622:	00478713          	addi	a4,a5,4
     626:	00f736b3          	sltu	a3,a4,a5
     62a:	93b6                	add	t2,t2,a3
     62c:	87ba                	mv	a5,a4
     62e:	00800737          	lui	a4,0x800
     632:	00e3f733          	and	a4,t2,a4
     636:	eb31                	bnez	a4,68a <__divdf3+0x5ea>
     638:	01d39693          	slli	a3,t2,0x1d
     63c:	838d                	srli	a5,a5,0x3
     63e:	8edd                	or	a3,a3,a5
     640:	0033d393          	srli	t2,t2,0x3
     644:	4781                	li	a5,0
     646:	b795                	j	5aa <__divdf3+0x50a>
     648:	5705                	li	a4,-31
     64a:	40f707b3          	sub	a5,a4,a5
     64e:	02000593          	li	a1,32
     652:	00f3d7b3          	srl	a5,t2,a5
     656:	4701                	li	a4,0
     658:	00b60763          	beq	a2,a1,666 <__divdf3+0x5c6>
     65c:	4722                	lw	a4,8(sp)
     65e:	43e70713          	addi	a4,a4,1086 # 80043e <lib_i2c.c.bdeb3654+0x7fabf5>
     662:	00e39733          	sll	a4,t2,a4
     666:	8f55                	or	a4,a4,a3
     668:	00e03733          	snez	a4,a4
     66c:	8fd9                	or	a5,a5,a4
     66e:	4381                	li	t2,0
     670:	b74d                	j	612 <__divdf3+0x572>
     672:	000803b7          	lui	t2,0x80
     676:	4681                	li	a3,0
     678:	7ff00793          	li	a5,2047
     67c:	c602                	sw	zero,12(sp)
     67e:	b735                	j	5aa <__divdf3+0x50a>
     680:	4381                	li	t2,0
     682:	4681                	li	a3,0
     684:	7ff00793          	li	a5,2047
     688:	b70d                	j	5aa <__divdf3+0x50a>
     68a:	4381                	li	t2,0
     68c:	4681                	li	a3,0
     68e:	4785                	li	a5,1
     690:	bf29                	j	5aa <__divdf3+0x50a>

00000692 <__fixunsdfsi>:
     692:	0145d713          	srli	a4,a1,0x14
     696:	00100637          	lui	a2,0x100
     69a:	86aa                	mv	a3,a0
     69c:	fff60793          	addi	a5,a2,-1 # fffff <lib_i2c.c.bdeb3654+0xfa7b6>
     6a0:	7ff77713          	andi	a4,a4,2047
     6a4:	3fe00513          	li	a0,1022
     6a8:	8fed                	and	a5,a5,a1
     6aa:	81fd                	srli	a1,a1,0x1f
     6ac:	02e55f63          	bge	a0,a4,6ea <__fixunsdfsi+0x58>
     6b0:	4501                	li	a0,0
     6b2:	ed8d                	bnez	a1,6ec <__fixunsdfsi+0x5a>
     6b4:	41e00593          	li	a1,1054
     6b8:	557d                	li	a0,-1
     6ba:	02e5c963          	blt	a1,a4,6ec <__fixunsdfsi+0x5a>
     6be:	8fd1                	or	a5,a5,a2
     6c0:	43300613          	li	a2,1075
     6c4:	8e19                	sub	a2,a2,a4
     6c6:	45fd                	li	a1,31
     6c8:	00c5ca63          	blt	a1,a2,6dc <__fixunsdfsi+0x4a>
     6cc:	bed70713          	addi	a4,a4,-1043
     6d0:	00e79533          	sll	a0,a5,a4
     6d4:	00c6d6b3          	srl	a3,a3,a2
     6d8:	8d55                	or	a0,a0,a3
     6da:	8082                	ret
     6dc:	41300693          	li	a3,1043
     6e0:	40e68733          	sub	a4,a3,a4
     6e4:	00e7d533          	srl	a0,a5,a4
     6e8:	8082                	ret
     6ea:	4501                	li	a0,0
     6ec:	8082                	ret

000006ee <__floatunsidf>:
     6ee:	1151                	addi	sp,sp,-12
     6f0:	c222                	sw	s0,4(sp)
     6f2:	c406                	sw	ra,8(sp)
     6f4:	842a                	mv	s0,a0
     6f6:	cd1d                	beqz	a0,734 <__floatunsidf+0x46>
     6f8:	28e9                	jal	7d2 <__clzsi2>
     6fa:	41e00713          	li	a4,1054
     6fe:	47a9                	li	a5,10
     700:	8f09                	sub	a4,a4,a0
     702:	02a7c463          	blt	a5,a0,72a <__floatunsidf+0x3c>
     706:	47ad                	li	a5,11
     708:	8f89                	sub	a5,a5,a0
     70a:	0555                	addi	a0,a0,21
     70c:	00f457b3          	srl	a5,s0,a5
     710:	00a41433          	sll	s0,s0,a0
     714:	40a2                	lw	ra,8(sp)
     716:	8522                	mv	a0,s0
     718:	07b2                	slli	a5,a5,0xc
     71a:	4412                	lw	s0,4(sp)
     71c:	0752                	slli	a4,a4,0x14
     71e:	83b1                	srli	a5,a5,0xc
     720:	00f766b3          	or	a3,a4,a5
     724:	85b6                	mv	a1,a3
     726:	0131                	addi	sp,sp,12
     728:	8082                	ret
     72a:	1555                	addi	a0,a0,-11
     72c:	00a417b3          	sll	a5,s0,a0
     730:	4401                	li	s0,0
     732:	b7cd                	j	714 <__floatunsidf+0x26>
     734:	4781                	li	a5,0
     736:	4701                	li	a4,0
     738:	bff1                	j	714 <__floatunsidf+0x26>
	...

0000073c <__mulsi3>:
     73c:	862a                	mv	a2,a0
     73e:	4501                	li	a0,0
     740:	0015f693          	andi	a3,a1,1
     744:	c291                	beqz	a3,748 <__mulsi3+0xc>
     746:	9532                	add	a0,a0,a2
     748:	8185                	srli	a1,a1,0x1
     74a:	0606                	slli	a2,a2,0x1
     74c:	f9f5                	bnez	a1,740 <__mulsi3+0x4>
     74e:	8082                	ret
     750:	0000                	unimp
	...

00000754 <__divsi3>:
     754:	02054e63          	bltz	a0,790 <__umodsi3+0x8>
     758:	0405c363          	bltz	a1,79e <__umodsi3+0x16>

0000075c <__hidden___udivsi3>:
     75c:	862e                	mv	a2,a1
     75e:	85aa                	mv	a1,a0
     760:	557d                	li	a0,-1
     762:	c215                	beqz	a2,786 <__hidden___udivsi3+0x2a>
     764:	4685                	li	a3,1
     766:	00b67863          	bgeu	a2,a1,776 <__hidden___udivsi3+0x1a>
     76a:	00c05663          	blez	a2,776 <__hidden___udivsi3+0x1a>
     76e:	0606                	slli	a2,a2,0x1
     770:	0686                	slli	a3,a3,0x1
     772:	feb66ce3          	bltu	a2,a1,76a <__hidden___udivsi3+0xe>
     776:	4501                	li	a0,0
     778:	00c5e463          	bltu	a1,a2,780 <__hidden___udivsi3+0x24>
     77c:	8d91                	sub	a1,a1,a2
     77e:	8d55                	or	a0,a0,a3
     780:	8285                	srli	a3,a3,0x1
     782:	8205                	srli	a2,a2,0x1
     784:	faf5                	bnez	a3,778 <__hidden___udivsi3+0x1c>
     786:	8082                	ret

00000788 <__umodsi3>:
     788:	8286                	mv	t0,ra
     78a:	3fc9                	jal	75c <__hidden___udivsi3>
     78c:	852e                	mv	a0,a1
     78e:	8282                	jr	t0
     790:	40a00533          	neg	a0,a0
     794:	00b04763          	bgtz	a1,7a2 <__umodsi3+0x1a>
     798:	40b005b3          	neg	a1,a1
     79c:	b7c1                	j	75c <__hidden___udivsi3>
     79e:	40b005b3          	neg	a1,a1
     7a2:	8286                	mv	t0,ra
     7a4:	3f65                	jal	75c <__hidden___udivsi3>
     7a6:	40a00533          	neg	a0,a0
     7aa:	8282                	jr	t0

000007ac <__modsi3>:
     7ac:	8286                	mv	t0,ra
     7ae:	0005c763          	bltz	a1,7bc <__modsi3+0x10>
     7b2:	00054963          	bltz	a0,7c4 <__modsi3+0x18>
     7b6:	375d                	jal	75c <__hidden___udivsi3>
     7b8:	852e                	mv	a0,a1
     7ba:	8282                	jr	t0
     7bc:	40b005b3          	neg	a1,a1
     7c0:	fe055be3          	bgez	a0,7b6 <__modsi3+0xa>
     7c4:	40a00533          	neg	a0,a0
     7c8:	3f51                	jal	75c <__hidden___udivsi3>
     7ca:	40b00533          	neg	a0,a1
     7ce:	8282                	jr	t0
	...

000007d2 <__clzsi2>:
     7d2:	67c1                	lui	a5,0x10
     7d4:	02f57563          	bgeu	a0,a5,7fe <__clzsi2+0x2c>
     7d8:	10053793          	sltiu	a5,a0,256
     7dc:	0017c793          	xori	a5,a5,1
     7e0:	078e                	slli	a5,a5,0x3
     7e2:	6709                	lui	a4,0x2
     7e4:	02000693          	li	a3,32
     7e8:	8e9d                	sub	a3,a3,a5
     7ea:	00f55533          	srl	a0,a0,a5
     7ee:	ca470793          	addi	a5,a4,-860 # 1ca4 <__clz_tab>
     7f2:	97aa                	add	a5,a5,a0
     7f4:	0007c503          	lbu	a0,0(a5) # 10000 <lib_i2c.c.bdeb3654+0xa7b7>
     7f8:	40a68533          	sub	a0,a3,a0
     7fc:	8082                	ret
     7fe:	01000737          	lui	a4,0x1000
     802:	47c1                	li	a5,16
     804:	fce56fe3          	bltu	a0,a4,7e2 <__clzsi2+0x10>
     808:	47e1                	li	a5,24
     80a:	bfe1                	j	7e2 <__clzsi2+0x10>

0000080c <mini_pad>:
{
     80c:	1131                	addi	sp,sp,-20
     80e:	c426                	sw	s1,8(sp)
     810:	c806                	sw	ra,16(sp)
     812:	c622                	sw	s0,12(sp)
     814:	84ae                	mv	s1,a1
     816:	87aa                	mv	a5,a0
     818:	85b2                	mv	a1,a2
	int overflow = 0;
     81a:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     81c:	cab5                	beqz	a3,890 <mini_pad+0x84>
	if(len > pad_to) {
     81e:	0096d463          	bge	a3,s1,826 <mini_pad+0x1a>
     822:	84b6                	mv	s1,a3
		overflow = 1;
     824:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     826:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     82a:	00045363          	bgez	s0,830 <mini_pad+0x24>
     82e:	4401                	li	s0,0
     830:	8622                	mv	a2,s0
     832:	853a                	mv	a0,a4
     834:	c23e                	sw	a5,4(sp)
     836:	c01a                	sw	t1,0(sp)
     838:	4d3000ef          	jal	ra,150a <memset>
     83c:	4302                	lw	t1,0(sp)
     83e:	4792                	lw	a5,4(sp)
     840:	872a                	mv	a4,a0
     842:	008506b3          	add	a3,a0,s0
     846:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     848:	40c485b3          	sub	a1,s1,a2
     84c:	04b04463          	bgtz	a1,894 <mini_pad+0x88>
     850:	0004d363          	bgez	s1,856 <mini_pad+0x4a>
     854:	4481                	li	s1,0
     856:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     85a:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     85e:	02030463          	beqz	t1,886 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     862:	02c77263          	bgeu	a4,a2,886 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     866:	02a00793          	li	a5,42
     86a:	fef60fa3          	sb	a5,-1(a2)
     86e:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     872:	00d77a63          	bgeu	a4,a3,886 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     876:	fef60f23          	sb	a5,-2(a2)
     87a:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     87e:	00d77463          	bgeu	a4,a3,886 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     882:	fef60ea3          	sb	a5,-3(a2)
}
     886:	40c2                	lw	ra,16(sp)
     888:	4432                	lw	s0,12(sp)
     88a:	44a2                	lw	s1,8(sp)
     88c:	0151                	addi	sp,sp,20
     88e:	8082                	ret
	if(pad_to == 0) pad_to = len;
     890:	86a6                	mv	a3,s1
     892:	bf51                	j	826 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     894:	00c785b3          	add	a1,a5,a2
     898:	0005c503          	lbu	a0,0(a1)
     89c:	00c685b3          	add	a1,a3,a2
     8a0:	0605                	addi	a2,a2,1
     8a2:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     8a6:	b74d                	j	848 <mini_pad+0x3c>

000008a8 <_puts>:
{
     8a8:	832a                	mv	t1,a0
     8aa:	852e                	mv	a0,a1
	if(!buf) return len;
     8ac:	ce01                	beqz	a2,8c4 <_puts+0x1c>
	char * p0 = b->buffer;
     8ae:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     8b2:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     8b4:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     8b6:	00a74863          	blt	a4,a0,8c6 <_puts+0x1e>
	*(b->pbuffer) = 0;
     8ba:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     8be:	4248                	lw	a0,4(a2)
     8c0:	40550533          	sub	a0,a0,t0
}
     8c4:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     8c6:	4614                	lw	a3,8(a2)
     8c8:	fff68593          	addi	a1,a3,-1
     8cc:	4214                	lw	a3,0(a2)
     8ce:	96ae                	add	a3,a3,a1
     8d0:	fed785e3          	beq	a5,a3,8ba <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     8d4:	00178693          	addi	a3,a5,1
     8d8:	c254                	sw	a3,4(a2)
     8da:	00e306b3          	add	a3,t1,a4
     8de:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     8e2:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     8e4:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     8e8:	b7f1                	j	8b4 <_puts+0xc>

000008ea <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     8ea:	e0000737          	lui	a4,0xe0000
     8ee:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     8f2:	0f470693          	addi	a3,a4,244
     8f6:	0807f793          	andi	a5,a5,128
     8fa:	fbf5                	bnez	a5,8ee <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     8fc:	783027b7          	lui	a5,0x78302
     900:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     904:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     906:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     908:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     90c:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     90e:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     910:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     914:	0807f793          	andi	a5,a5,128
     918:	ffe5                	bnez	a5,910 <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     91a:	00e557b3          	srl	a5,a0,a4
     91e:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     922:	03000793          	li	a5,48
     926:	00d35463          	bge	t1,a3,92e <PrintHex+0x44>
     92a:	05700793          	li	a5,87
     92e:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     930:	07a2                	slli	a5,a5,0x8
     932:	0857e793          	ori	a5,a5,133
     936:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     93a:	1771                	addi	a4,a4,-4
     93c:	fcb71ae3          	bne	a4,a1,910 <PrintHex+0x26>
}
     940:	8082                	ret

00000942 <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     942:	e000f7b7          	lui	a5,0xe000f
     946:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     948:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     94c:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     94e:	471c                	lw	a5,8(a4)
     950:	8f89                	sub	a5,a5,a0
     952:	fe07cee3          	bltz	a5,94e <DelaySysTick+0xc>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     956:	8082                	ret

00000958 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     958:	1101                	addi	sp,sp,-32
     95a:	ce06                	sw	ra,28(sp)
     95c:	cc22                	sw	s0,24(sp)
     95e:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     960:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     962:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     964:	00055763          	bgez	a0,972 <mini_itoa.part.0+0x1a>
     968:	e689                	bnez	a3,972 <mini_itoa.part.0+0x1a>
		negative = 1;
     96a:	4785                	li	a5,1
		value = -value;
     96c:	40a00333          	neg	t1,a0
		negative = 1;
     970:	c03e                	sw	a5,0(sp)
     972:	06100413          	li	s0,97
     976:	c219                	beqz	a2,97c <mini_itoa.part.0+0x24>
     978:	04100413          	li	s0,65
	int	negative = 0;
     97c:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     97e:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     980:	851a                	mv	a0,t1
     982:	c83a                	sw	a4,16(sp)
     984:	c21a                	sw	t1,4(sp)
     986:	c62e                	sw	a1,12(sp)
     988:	c41a                	sw	t1,8(sp)
     98a:	3bfd                	jal	788 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     98c:	47a5                	li	a5,9
     98e:	4322                	lw	t1,8(sp)
     990:	45b2                	lw	a1,12(sp)
     992:	4742                	lw	a4,16(sp)
     994:	0ff57693          	andi	a3,a0,255
     998:	06a7e163          	bltu	a5,a0,9fa <mini_itoa.part.0+0xa2>
     99c:	03068693          	addi	a3,a3,48
     9a0:	0ff6f693          	andi	a3,a3,255
     9a4:	00148793          	addi	a5,s1,1
     9a8:	00d48023          	sb	a3,0(s1)
		value /= radix;
     9ac:	851a                	mv	a0,t1
     9ae:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     9b0:	c63e                	sw	a5,12(sp)
		value /= radix;
     9b2:	c42e                	sw	a1,8(sp)
     9b4:	3365                	jal	75c <__hidden___udivsi3>
	} while (value > 0);
     9b6:	4692                	lw	a3,4(sp)
     9b8:	45a2                	lw	a1,8(sp)
     9ba:	47b2                	lw	a5,12(sp)
     9bc:	4742                	lw	a4,16(sp)
		value /= radix;
     9be:	832a                	mv	t1,a0
	} while (value > 0);
     9c0:	02b6fb63          	bgeu	a3,a1,9f6 <mini_itoa.part.0+0x9e>
	if (negative)
     9c4:	4682                	lw	a3,0(sp)
     9c6:	c699                	beqz	a3,9d4 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     9c8:	02d00693          	li	a3,45
     9cc:	00d78023          	sb	a3,0(a5) # e000f000 <_eusrstack+0xc000e800>
     9d0:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     9d4:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     9d8:	01f55693          	srli	a3,a0,0x1f
     9dc:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     9de:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     9e2:	8685                	srai	a3,a3,0x1
     9e4:	4601                	li	a2,0
     9e6:	17fd                	addi	a5,a5,-1
     9e8:	00d64b63          	blt	a2,a3,9fe <mini_itoa.part.0+0xa6>
}
     9ec:	40f2                	lw	ra,28(sp)
     9ee:	4462                	lw	s0,24(sp)
     9f0:	44d2                	lw	s1,20(sp)
     9f2:	6105                	addi	sp,sp,32
     9f4:	8082                	ret
	} while (value > 0);
     9f6:	84be                	mv	s1,a5
     9f8:	b761                	j	980 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     9fa:	96a2                	add	a3,a3,s0
     9fc:	b755                	j	9a0 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     9fe:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     a02:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     a06:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     a0a:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     a0c:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     a10:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     a14:	bfc9                	j	9e6 <mini_itoa.part.0+0x8e>

00000a16 <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     a16:	400057b7          	lui	a5,0x40005
     a1a:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     a1e:	40078793          	addi	a5,a5,1024
     a22:	10077713          	andi	a4,a4,256
     a26:	cf09                	beqz	a4,a40 <i2c_error+0x2a>
     a28:	0147d703          	lhu	a4,20(a5)
     a2c:	4505                	li	a0,1
     a2e:	0742                	slli	a4,a4,0x10
     a30:	8341                	srli	a4,a4,0x10
     a32:	eff77713          	andi	a4,a4,-257
     a36:	0742                	slli	a4,a4,0x10
     a38:	8341                	srli	a4,a4,0x10
     a3a:	00e79a23          	sh	a4,20(a5)
     a3e:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     a40:	0147d703          	lhu	a4,20(a5)
     a44:	40077713          	andi	a4,a4,1024
     a48:	cf09                	beqz	a4,a62 <i2c_error+0x4c>
     a4a:	0147d703          	lhu	a4,20(a5)
     a4e:	4509                	li	a0,2
     a50:	0742                	slli	a4,a4,0x10
     a52:	8341                	srli	a4,a4,0x10
     a54:	bff77713          	andi	a4,a4,-1025
     a58:	0742                	slli	a4,a4,0x10
     a5a:	8341                	srli	a4,a4,0x10
     a5c:	00e79a23          	sh	a4,20(a5)
     a60:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     a62:	0147d703          	lhu	a4,20(a5)
     a66:	20077713          	andi	a4,a4,512
     a6a:	cf09                	beqz	a4,a84 <i2c_error+0x6e>
     a6c:	0147d703          	lhu	a4,20(a5)
     a70:	450d                	li	a0,3
     a72:	0742                	slli	a4,a4,0x10
     a74:	8341                	srli	a4,a4,0x10
     a76:	dff77713          	andi	a4,a4,-513
     a7a:	0742                	slli	a4,a4,0x10
     a7c:	8341                	srli	a4,a4,0x10
     a7e:	00e79a23          	sh	a4,20(a5)
     a82:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     a84:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     a88:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     a8a:	832d                	srli	a4,a4,0xb
     a8c:	8b05                	andi	a4,a4,1
     a8e:	cf01                	beqz	a4,aa6 <i2c_error+0x90>
     a90:	0147d703          	lhu	a4,20(a5)
     a94:	76fd                	lui	a3,0xfffff
     a96:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     a9a:	0742                	slli	a4,a4,0x10
     a9c:	8341                	srli	a4,a4,0x10
     a9e:	8f75                	and	a4,a4,a3
     aa0:	00e79a23          	sh	a4,20(a5)
     aa4:	4511                	li	a0,4
}
     aa6:	8082                	ret

00000aa8 <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     aa8:	415c                	lw	a5,4(a0)
     aaa:	e7b1                	bnez	a5,af6 <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     aac:	00855783          	lhu	a5,8(a0)
     ab0:	40005737          	lui	a4,0x40005
     ab4:	0786                	slli	a5,a5,0x1
     ab6:	0fe7f793          	andi	a5,a5,254
     aba:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     abe:	6789                	lui	a5,0x2
     ac0:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
	return (status & status_mask) == status_mask; 
     ac4:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     ac8:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
     acc:	4501                	li	a0,0
     ace:	c2c18693          	addi	a3,gp,-980 # 20000028 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     ad2:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     ad6:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.bdeb3654+0x6a839>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     ada:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     ade:	01071593          	slli	a1,a4,0x10
     ae2:	41835703          	lhu	a4,1048(t1)
     ae6:	81c1                	srli	a1,a1,0x10
     ae8:	0742                	slli	a4,a4,0x10
     aea:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     aec:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     aee:	00c71663          	bne	a4,a2,afa <i2c_send_addr_write+0x52>
     af2:	c111                	beqz	a0,af6 <i2c_send_addr_write+0x4e>
     af4:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     af6:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     af8:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     afa:	17fd                	addi	a5,a5,-1
     afc:	4505                	li	a0,1
     afe:	fff1                	bnez	a5,ada <i2c_send_addr_write+0x32>
{
     b00:	1151                	addi	sp,sp,-12
     b02:	c406                	sw	ra,8(sp)
     b04:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     b08:	3739                	jal	a16 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     b0a:	e111                	bnez	a0,b0e <i2c_send_addr_write+0x66>
     b0c:	4515                	li	a0,5
}
     b0e:	40a2                	lw	ra,8(sp)
     b10:	0131                	addi	sp,sp,12
     b12:	8082                	ret

00000b14 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     b14:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     b16:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     b18:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     b1a:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
     b1e:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
{
     b22:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     b24:	c002                	sw	zero,0(sp)
     b26:	c202                	sw	zero,4(sp)
     b28:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     b2c:	4601                	li	a2,0
     b2e:	c2c18713          	addi	a4,gp,-980 # 20000028 <_i2c_timeout>
     b32:	400055b7          	lui	a1,0x40005
     b36:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     b3a:	8a89                	andi	a3,a3,2
     b3c:	e689                	bnez	a3,b46 <i2c_ping+0x32>
     b3e:	c211                	beqz	a2,b42 <i2c_ping+0x2e>
     b40:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
     b42:	4501                	li	a0,0
     b44:	a809                	j	b56 <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     b46:	17fd                	addi	a5,a5,-1
     b48:	4605                	li	a2,1
     b4a:	f7f5                	bnez	a5,b36 <i2c_ping+0x22>
     b4c:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
     b50:	35d9                	jal	a16 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     b52:	e111                	bnez	a0,b56 <i2c_ping+0x42>
     b54:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     b56:	40005737          	lui	a4,0x40005
     b5a:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     b5e:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     b62:	07c2                	slli	a5,a5,0x10
     b64:	83c1                	srli	a5,a5,0x10
     b66:	1007e793          	ori	a5,a5,256
     b6a:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     b6e:	00030737          	lui	a4,0x30
     b72:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     b74:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     b78:	01079693          	slli	a3,a5,0x10
     b7c:	4185d783          	lhu	a5,1048(a1)
     b80:	82c1                	srli	a3,a3,0x10
     b82:	07c2                	slli	a5,a5,0x10
     b84:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     b86:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     b88:	fee796e3          	bne	a5,a4,b74 <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     b8c:	e119                	bnez	a0,b92 <i2c_ping+0x7e>
     b8e:	850a                	mv	a0,sp
     b90:	3f21                	jal	aa8 <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     b92:	40005737          	lui	a4,0x40005
     b96:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     b9a:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     b9c:	07c2                	slli	a5,a5,0x10
     b9e:	83c1                	srli	a5,a5,0x10
     ba0:	2007e793          	ori	a5,a5,512
     ba4:	40f71023          	sh	a5,1024(a4)
}
     ba8:	0161                	addi	sp,sp,24
     baa:	8082                	ret

00000bac <i2c_write_raw>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     bac:	6789                	lui	a5,0x2
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
                                                    const size_t len)
{
     bae:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     bb0:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
{
     bb4:	c626                	sw	s1,12(sp)
     bb6:	c02e                	sw	a1,0(sp)
     bb8:	c232                	sw	a2,4(sp)
     bba:	ca06                	sw	ra,20(sp)
     bbc:	c822                	sw	s0,16(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     bbe:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
     bc2:	4601                	li	a2,0
     bc4:	c2c18493          	addi	s1,gp,-980 # 20000028 <_i2c_timeout>
     bc8:	400055b7          	lui	a1,0x40005
     bcc:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     bd0:	8a89                	andi	a3,a3,2
     bd2:	e6ad                	bnez	a3,c3c <i2c_write_raw+0x90>
     bd4:	c211                	beqz	a2,bd8 <i2c_write_raw+0x2c>
     bd6:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     bd8:	400056b7          	lui	a3,0x40005
     bdc:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     be0:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     be4:	07c2                	slli	a5,a5,0x10
     be6:	83c1                	srli	a5,a5,0x10
     be8:	1007e793          	ori	a5,a5,256
     bec:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     bf0:	000306b7          	lui	a3,0x30
     bf4:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     bf6:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     bfa:	01079613          	slli	a2,a5,0x10
     bfe:	4185d783          	lhu	a5,1048(a1)
     c02:	8241                	srli	a2,a2,0x10
     c04:	07c2                	slli	a5,a5,0x10
     c06:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     c08:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     c0a:	fed796e3          	bne	a5,a3,bf6 <i2c_write_raw+0x4a>
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     c0e:	3d69                	jal	aa8 <i2c_send_addr_write>
     c10:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     c12:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
     c14:	e91d                	bnez	a0,c4a <i2c_write_raw+0x9e>
		while(cbyte < len)
     c16:	4792                	lw	a5,4(sp)
     c18:	02f67963          	bgeu	a2,a5,c4a <i2c_write_raw+0x9e>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     c1c:	6689                	lui	a3,0x2
     c1e:	71068693          	addi	a3,a3,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
     c22:	c094                	sw	a3,0(s1)
     c24:	4501                	li	a0,0
     c26:	40005337          	lui	t1,0x40005
     c2a:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     c2e:	0805f593          	andi	a1,a1,128
     c32:	c5b9                	beqz	a1,c80 <i2c_write_raw+0xd4>
     c34:	c111                	beqz	a0,c38 <i2c_write_raw+0x8c>
     c36:	c094                	sw	a3,0(s1)
     c38:	4501                	li	a0,0
     c3a:	a8a9                	j	c94 <i2c_write_raw+0xe8>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     c3c:	17fd                	addi	a5,a5,-1
     c3e:	4605                	li	a2,1
     c40:	f7d1                	bnez	a5,bcc <i2c_write_raw+0x20>
	i2c_err_t i2c_err = i2c_error();
     c42:	3bd1                	jal	a16 <i2c_error>
     c44:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     c46:	e111                	bnez	a0,c4a <i2c_write_raw+0x9e>
     c48:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     c4a:	6689                	lui	a3,0x2
     c4c:	71068693          	addi	a3,a3,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
	return (status & status_mask) == status_mask; 
     c50:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     c54:	c094                	sw	a3,0(s1)
     c56:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     c58:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     c5c:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.bdeb3654+0x6a83b>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     c60:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     c64:	01061513          	slli	a0,a2,0x10
     c68:	4182d603          	lhu	a2,1048(t0)
     c6c:	8141                	srli	a0,a0,0x10
     c6e:	0642                	slli	a2,a2,0x10
     c70:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     c72:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     c74:	04b61363          	bne	a2,a1,cba <i2c_write_raw+0x10e>
     c78:	04030a63          	beqz	t1,ccc <i2c_write_raw+0x120>
     c7c:	c094                	sw	a3,0(s1)
     c7e:	a0b9                	j	ccc <i2c_write_raw+0x120>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     c80:	16fd                	addi	a3,a3,-1
     c82:	4505                	li	a0,1
     c84:	f2dd                	bnez	a3,c2a <i2c_write_raw+0x7e>
     c86:	c432                	sw	a2,8(sp)
     c88:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     c8c:	3369                	jal	a16 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     c8e:	4622                	lw	a2,8(sp)
     c90:	e111                	bnez	a0,c94 <i2c_write_raw+0xe8>
     c92:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     c94:	4782                	lw	a5,0(sp)
     c96:	00c786b3          	add	a3,a5,a2
     c9a:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     c9e:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     ca0:	400056b7          	lui	a3,0x40005
     ca4:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     ca8:	0ff67613          	andi	a2,a2,255
     cac:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     cae:	e501                	bnez	a0,cb6 <i2c_write_raw+0x10a>
     cb0:	339d                	jal	a16 <i2c_error>
     cb2:	4622                	lw	a2,8(sp)
     cb4:	d12d                	beqz	a0,c16 <i2c_write_raw+0x6a>
     cb6:	842a                	mv	s0,a0
     cb8:	bf49                	j	c4a <i2c_write_raw+0x9e>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     cba:	16fd                	addi	a3,a3,-1
     cbc:	4305                	li	t1,1
     cbe:	f2cd                	bnez	a3,c60 <i2c_write_raw+0xb4>
     cc0:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     cc4:	3b89                	jal	a16 <i2c_error>
     cc6:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     cc8:	e111                	bnez	a0,ccc <i2c_write_raw+0x120>
     cca:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     ccc:	400056b7          	lui	a3,0x40005
     cd0:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     cd4:	40d2                	lw	ra,20(sp)
     cd6:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     cd8:	0742                	slli	a4,a4,0x10
}
     cda:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     cdc:	8341                	srli	a4,a4,0x10
     cde:	20076713          	ori	a4,a4,512
     ce2:	40e69023          	sh	a4,1024(a3)
}
     ce6:	44b2                	lw	s1,12(sp)
     ce8:	0161                	addi	sp,sp,24
     cea:	8082                	ret

00000cec <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     cec:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     cee:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     cf2:	858a                	mv	a1,sp
     cf4:	4609                	li	a2,2
     cf6:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
uint8_t ssd1306_cmd(uint8_t cmd) {
     cfa:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     cfc:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     d00:	3575                	jal	bac <i2c_write_raw>
}
     d02:	40b2                	lw	ra,12(sp)
     d04:	0ff57513          	andi	a0,a0,255
     d08:	0141                	addi	sp,sp,16
     d0a:	8082                	ret

00000d0c <i2c_write_reg.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     d0c:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_reg(const i2c_device_t *dev,    const uint32_t reg,
     d0e:	1101                	addi	sp,sp,-32
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     d10:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
i2c_err_t i2c_write_reg(const i2c_device_t *dev,    const uint32_t reg,
     d14:	ca26                	sw	s1,20(sp)
     d16:	c22e                	sw	a1,4(sp)
     d18:	c432                	sw	a2,8(sp)
     d1a:	ce06                	sw	ra,28(sp)
     d1c:	cc22                	sw	s0,24(sp)
     d1e:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     d20:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
     d24:	4601                	li	a2,0
     d26:	c2c18493          	addi	s1,gp,-980 # 20000028 <_i2c_timeout>
     d2a:	400055b7          	lui	a1,0x40005
     d2e:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     d32:	8a89                	andi	a3,a3,2
     d34:	e2d1                	bnez	a3,db8 <i2c_write_reg.constprop.0+0xac>
     d36:	c211                	beqz	a2,d3a <i2c_write_reg.constprop.0+0x2e>
     d38:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     d3a:	400056b7          	lui	a3,0x40005
     d3e:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     d42:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     d46:	07c2                	slli	a5,a5,0x10
     d48:	83c1                	srli	a5,a5,0x10
     d4a:	1007e793          	ori	a5,a5,256
     d4e:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     d52:	000306b7          	lui	a3,0x30
     d56:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     d58:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     d5c:	01079613          	slli	a2,a5,0x10
     d60:	4185d783          	lhu	a5,1048(a1)
     d64:	8241                	srli	a2,a2,0x10
     d66:	07c2                	slli	a5,a5,0x10
     d68:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     d6a:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     d6c:	fed796e3          	bne	a5,a3,d58 <i2c_write_reg.constprop.0+0x4c>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     d70:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
     d74:	3b15                	jal	aa8 <i2c_send_addr_write>
     d76:	842a                	mv	s0,a0

	// Send the register byte/s - MSBFirst
	if(i2c_ret == I2C_OK)
     d78:	e929                	bnez	a0,dca <i2c_write_reg.constprop.0+0xbe>
	{
		for(int8_t b = dev->regb - 1; b >= 0; b--)
     d7a:	c0418693          	addi	a3,gp,-1020 # 20000000 <dev_sensor>
     d7e:	00a6c683          	lbu	a3,10(a3) # 3000a <lib_i2c.c.bdeb3654+0x2a7c1>
     d82:	16fd                	addi	a3,a3,-1
     d84:	06e2                	slli	a3,a3,0x18
     d86:	86e1                	srai	a3,a3,0x18
     d88:	00369593          	slli	a1,a3,0x3
     d8c:	0606da63          	bgez	a3,e00 <i2c_write_reg.constprop.0+0xf4>
	}

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     d90:	4601                	li	a2,0
		while(cbyte < len)
     d92:	47a2                	lw	a5,8(sp)
     d94:	02f67b63          	bgeu	a2,a5,dca <i2c_write_reg.constprop.0+0xbe>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     d98:	6689                	lui	a3,0x2
     d9a:	71068693          	addi	a3,a3,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
     d9e:	c094                	sw	a3,0(s1)
     da0:	4501                	li	a0,0
     da2:	40005337          	lui	t1,0x40005
     da6:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     daa:	0805f593          	andi	a1,a1,128
     dae:	c1c5                	beqz	a1,e4e <i2c_write_reg.constprop.0+0x142>
     db0:	c111                	beqz	a0,db4 <i2c_write_reg.constprop.0+0xa8>
     db2:	c094                	sw	a3,0(s1)
     db4:	4501                	li	a0,0
     db6:	a075                	j	e62 <i2c_write_reg.constprop.0+0x156>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     db8:	17fd                	addi	a5,a5,-1
     dba:	4605                	li	a2,1
     dbc:	fbad                	bnez	a5,d2e <i2c_write_reg.constprop.0+0x22>
     dbe:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     dc2:	3991                	jal	a16 <i2c_error>
     dc4:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     dc6:	e111                	bnez	a0,dca <i2c_write_reg.constprop.0+0xbe>
     dc8:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     dca:	6689                	lui	a3,0x2
     dcc:	71068693          	addi	a3,a3,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
	return (status & status_mask) == status_mask; 
     dd0:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     dd4:	c094                	sw	a3,0(s1)
     dd6:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     dd8:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     ddc:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.bdeb3654+0x6a83b>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     de0:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     de4:	01061513          	slli	a0,a2,0x10
     de8:	4182d603          	lhu	a2,1048(t0)
     dec:	8141                	srli	a0,a0,0x10
     dee:	0642                	slli	a2,a2,0x10
     df0:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     df2:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     df4:	08b61b63          	bne	a2,a1,e8a <i2c_write_reg.constprop.0+0x17e>
     df8:	0a030263          	beqz	t1,e9c <i2c_write_reg.constprop.0+0x190>
     dfc:	c094                	sw	a3,0(s1)
     dfe:	a879                	j	e9c <i2c_write_reg.constprop.0+0x190>
			uint8_t reg_byte = (reg >> (8 * b)) & 0xFF;
     e00:	4782                	lw	a5,0(sp)
			I2C1->DATAR = reg_byte;
     e02:	40005637          	lui	a2,0x40005
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     e06:	4301                	li	t1,0
			uint8_t reg_byte = (reg >> (8 * b)) & 0xFF;
     e08:	00b7d533          	srl	a0,a5,a1
			I2C1->DATAR = reg_byte;
     e0c:	0ff57513          	andi	a0,a0,255
     e10:	40a61823          	sh	a0,1040(a2) # 40005410 <_eusrstack+0x20004c10>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     e14:	6609                	lui	a2,0x2
     e16:	71060613          	addi	a2,a2,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
     e1a:	c090                	sw	a2,0(s1)
     e1c:	400052b7          	lui	t0,0x40005
     e20:	4142d503          	lhu	a0,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     e24:	08057513          	andi	a0,a0,128
     e28:	cd19                	beqz	a0,e46 <i2c_write_reg.constprop.0+0x13a>
     e2a:	00030363          	beqz	t1,e30 <i2c_write_reg.constprop.0+0x124>
     e2e:	c090                	sw	a2,0(s1)
     e30:	c82e                	sw	a1,16(sp)
     e32:	c636                	sw	a3,12(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     e34:	36cd                	jal	a16 <i2c_error>
     e36:	45c2                	lw	a1,16(sp)
     e38:	46b2                	lw	a3,12(sp)
     e3a:	15e1                	addi	a1,a1,-8
     e3c:	e529                	bnez	a0,e86 <i2c_write_reg.constprop.0+0x17a>
     e3e:	16fd                	addi	a3,a3,-1
     e40:	06e2                	slli	a3,a3,0x18
     e42:	86e1                	srai	a3,a3,0x18
     e44:	b7a1                	j	d8c <i2c_write_reg.constprop.0+0x80>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     e46:	167d                	addi	a2,a2,-1
     e48:	4305                	li	t1,1
     e4a:	fa79                	bnez	a2,e20 <i2c_write_reg.constprop.0+0x114>
     e4c:	bf8d                	j	dbe <i2c_write_reg.constprop.0+0xb2>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     e4e:	16fd                	addi	a3,a3,-1
     e50:	4505                	li	a0,1
     e52:	fab1                	bnez	a3,da6 <i2c_write_reg.constprop.0+0x9a>
     e54:	c032                	sw	a2,0(sp)
     e56:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     e5a:	3e75                	jal	a16 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     e5c:	4602                	lw	a2,0(sp)
     e5e:	e111                	bnez	a0,e62 <i2c_write_reg.constprop.0+0x156>
     e60:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     e62:	4792                	lw	a5,4(sp)
     e64:	00c786b3          	add	a3,a5,a2
     e68:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     e6c:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     e6e:	400056b7          	lui	a3,0x40005
     e72:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     e76:	0ff67613          	andi	a2,a2,255
     e7a:	c032                	sw	a2,0(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     e7c:	e509                	bnez	a0,e86 <i2c_write_reg.constprop.0+0x17a>
     e7e:	3e61                	jal	a16 <i2c_error>
     e80:	4602                	lw	a2,0(sp)
     e82:	f00508e3          	beqz	a0,d92 <i2c_write_reg.constprop.0+0x86>
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     e86:	842a                	mv	s0,a0
     e88:	b789                	j	dca <i2c_write_reg.constprop.0+0xbe>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     e8a:	16fd                	addi	a3,a3,-1
     e8c:	4305                	li	t1,1
     e8e:	faa9                	bnez	a3,de0 <i2c_write_reg.constprop.0+0xd4>
     e90:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     e94:	3649                	jal	a16 <i2c_error>
     e96:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     e98:	e111                	bnez	a0,e9c <i2c_write_reg.constprop.0+0x190>
     e9a:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     e9c:	400056b7          	lui	a3,0x40005
     ea0:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	// Signal a STOP
	i2c_stop();

	return i2c_ret;
     ea4:	40f2                	lw	ra,28(sp)
     ea6:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     ea8:	0742                	slli	a4,a4,0x10
     eaa:	4462                	lw	s0,24(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     eac:	8341                	srli	a4,a4,0x10
     eae:	20076713          	ori	a4,a4,512
     eb2:	40e69023          	sh	a4,1024(a3)
     eb6:	44d2                	lw	s1,20(sp)
     eb8:	6105                	addi	sp,sp,32
     eba:	8082                	ret

00000ebc <i2c_send_addr_read.constprop.0>:
	if(dev->type == I2C_ADDR_7BIT)
     ebc:	c0418793          	addi	a5,gp,-1020 # 20000000 <dev_sensor>
     ec0:	43d8                	lw	a4,4(a5)
     ec2:	e739                	bnez	a4,f10 <i2c_send_addr_read.constprop.0+0x54>
		I2C1->DATAR = (dev->addr << 1) | 0x01;
     ec4:	0087d783          	lhu	a5,8(a5)
     ec8:	40005737          	lui	a4,0x40005
     ecc:	0786                	slli	a5,a5,0x1
     ece:	0017e793          	ori	a5,a5,1
     ed2:	07c2                	slli	a5,a5,0x10
     ed4:	83c1                	srli	a5,a5,0x10
     ed6:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
     eda:	6789                	lui	a5,0x2
     edc:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
	return (status & status_mask) == status_mask; 
     ee0:	00030637          	lui	a2,0x30
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
     ee4:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
     ee8:	4501                	li	a0,0
     eea:	c2c18693          	addi	a3,gp,-980 # 20000028 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     eee:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     ef2:	0609                	addi	a2,a2,2
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     ef4:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     ef8:	01071593          	slli	a1,a4,0x10
     efc:	41835703          	lhu	a4,1048(t1)
     f00:	81c1                	srli	a1,a1,0x10
     f02:	0742                	slli	a4,a4,0x10
     f04:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     f06:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
     f08:	00c71663          	bne	a4,a2,f14 <i2c_send_addr_read.constprop.0+0x58>
     f0c:	c111                	beqz	a0,f10 <i2c_send_addr_read.constprop.0+0x54>
     f0e:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     f10:	4501                	li	a0,0
}
     f12:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
     f14:	17fd                	addi	a5,a5,-1
     f16:	4505                	li	a0,1
     f18:	fff1                	bnez	a5,ef4 <i2c_send_addr_read.constprop.0+0x38>
static inline i2c_err_t i2c_send_addr_read(const i2c_device_t *dev)
     f1a:	1151                	addi	sp,sp,-12
     f1c:	c406                	sw	ra,8(sp)
     f1e:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     f22:	3cd5                	jal	a16 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     f24:	e111                	bnez	a0,f28 <i2c_send_addr_read.constprop.0+0x6c>
     f26:	4515                	li	a0,5
}
     f28:	40a2                	lw	ra,8(sp)
     f2a:	0131                	addi	sp,sp,12
     f2c:	8082                	ret

00000f2e <i2c_read_reg.constprop.0>:
i2c_err_t i2c_read_reg(const i2c_device_t *dev,     const uint32_t reg,
     f2e:	1131                	addi	sp,sp,-20
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     f30:	6789                	lui	a5,0x2
i2c_err_t i2c_read_reg(const i2c_device_t *dev,     const uint32_t reg,
     f32:	c622                	sw	s0,12(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     f34:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
i2c_err_t i2c_read_reg(const i2c_device_t *dev,     const uint32_t reg,
     f38:	c426                	sw	s1,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     f3a:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
i2c_err_t i2c_read_reg(const i2c_device_t *dev,     const uint32_t reg,
     f3e:	c806                	sw	ra,16(sp)
     f40:	84aa                	mv	s1,a0
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     f42:	4681                	li	a3,0
     f44:	c2c18413          	addi	s0,gp,-980 # 20000028 <_i2c_timeout>
     f48:	40005637          	lui	a2,0x40005
     f4c:	41865703          	lhu	a4,1048(a2) # 40005418 <_eusrstack+0x20004c18>
     f50:	8b09                	andi	a4,a4,2
     f52:	e769                	bnez	a4,101c <i2c_read_reg.constprop.0+0xee>
     f54:	c291                	beqz	a3,f58 <i2c_read_reg.constprop.0+0x2a>
     f56:	c01c                	sw	a5,0(s0)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     f58:	40005737          	lui	a4,0x40005
     f5c:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     f60:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     f64:	07c2                	slli	a5,a5,0x10
     f66:	83c1                	srli	a5,a5,0x10
     f68:	1007e793          	ori	a5,a5,256
     f6c:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     f70:	00030737          	lui	a4,0x30
     f74:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     f76:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     f7a:	01079693          	slli	a3,a5,0x10
     f7e:	4185d783          	lhu	a5,1048(a1)
     f82:	82c1                	srli	a3,a3,0x10
     f84:	07c2                	slli	a5,a5,0x10
     f86:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     f88:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     f8a:	fee796e3          	bne	a5,a4,f76 <i2c_read_reg.constprop.0+0x48>
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     f8e:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
     f92:	3e19                	jal	aa8 <i2c_send_addr_write>
	if(i2c_ret == I2C_OK)
     f94:	ed41                	bnez	a0,102c <i2c_read_reg.constprop.0+0xfe>
		for(int8_t b = dev->regb - 1; b >= 0; b--)
     f96:	c0418793          	addi	a5,gp,-1020 # 20000000 <dev_sensor>
     f9a:	00a7c703          	lbu	a4,10(a5)
     f9e:	177d                	addi	a4,a4,-1
     fa0:	0762                	slli	a4,a4,0x18
     fa2:	8761                	srai	a4,a4,0x18
     fa4:	00371693          	slli	a3,a4,0x3
     fa8:	0a075163          	bgez	a4,104a <i2c_read_reg.constprop.0+0x11c>
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
     fac:	40005737          	lui	a4,0x40005
     fb0:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     fb4:	400055b7          	lui	a1,0x40005
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
     fb8:	07c2                	slli	a5,a5,0x10
     fba:	83c1                	srli	a5,a5,0x10
     fbc:	4007e793          	ori	a5,a5,1024
     fc0:	40f71023          	sh	a5,1024(a4)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     fc4:	40075783          	lhu	a5,1024(a4)
     fc8:	07c2                	slli	a5,a5,0x10
     fca:	83c1                	srli	a5,a5,0x10
     fcc:	1007e793          	ori	a5,a5,256
     fd0:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     fd4:	00030737          	lui	a4,0x30
     fd8:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     fda:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     fde:	01079693          	slli	a3,a5,0x10
     fe2:	4185d783          	lhu	a5,1048(a1)
     fe6:	82c1                	srli	a3,a3,0x10
     fe8:	07c2                	slli	a5,a5,0x10
     fea:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     fec:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     fee:	fee796e3          	bne	a5,a4,fda <i2c_read_reg.constprop.0+0xac>
		i2c_ret = i2c_send_addr_read(dev);
     ff2:	35e9                	jal	ebc <i2c_send_addr_read.constprop.0>
	if(i2c_ret == I2C_OK)
     ff4:	4701                	li	a4,0
     ff6:	e91d                	bnez	a0,102c <i2c_read_reg.constprop.0+0xfe>
			buf[cbyte] = I2C1->DATAR;
     ff8:	c3018493          	addi	s1,gp,-976 # 2000002c <buff>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
     ffc:	6789                	lui	a5,0x2
     ffe:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
    1002:	c01c                	sw	a5,0(s0)
    1004:	4601                	li	a2,0
    1006:	400055b7          	lui	a1,0x40005
    100a:	4145d683          	lhu	a3,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    100e:	0406f693          	andi	a3,a3,64
    1012:	c2c9                	beqz	a3,1094 <i2c_read_reg.constprop.0+0x166>
    1014:	c211                	beqz	a2,1018 <i2c_read_reg.constprop.0+0xea>
    1016:	c01c                	sw	a5,0(s0)
    1018:	4501                	li	a0,0
    101a:	a079                	j	10a8 <i2c_read_reg.constprop.0+0x17a>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    101c:	17fd                	addi	a5,a5,-1
    101e:	4685                	li	a3,1
    1020:	f795                	bnez	a5,f4c <i2c_read_reg.constprop.0+0x1e>
    1022:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    1026:	3ac5                	jal	a16 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    1028:	e111                	bnez	a0,102c <i2c_read_reg.constprop.0+0xfe>
    102a:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    102c:	40005737          	lui	a4,0x40005
    1030:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
}
    1034:	40c2                	lw	ra,16(sp)
    1036:	4432                	lw	s0,12(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    1038:	07c2                	slli	a5,a5,0x10
    103a:	83c1                	srli	a5,a5,0x10
    103c:	2007e793          	ori	a5,a5,512
    1040:	40f71023          	sh	a5,1024(a4)
}
    1044:	44a2                	lw	s1,8(sp)
    1046:	0151                	addi	sp,sp,20
    1048:	8082                	ret
			uint8_t reg_byte = (reg >> (8 * b)) & 0xFF;
    104a:	00d4d633          	srl	a2,s1,a3
			I2C1->DATAR = reg_byte;
    104e:	400057b7          	lui	a5,0x40005
    1052:	0ff67613          	andi	a2,a2,255
    1056:	40c79823          	sh	a2,1040(a5) # 40005410 <_eusrstack+0x20004c10>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    105a:	6789                	lui	a5,0x2
    105c:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
    1060:	c01c                	sw	a5,0(s0)
    1062:	4581                	li	a1,0
    1064:	40005537          	lui	a0,0x40005
    1068:	41455603          	lhu	a2,1044(a0) # 40005414 <_eusrstack+0x20004c14>
    106c:	08067613          	andi	a2,a2,128
    1070:	ce11                	beqz	a2,108c <i2c_read_reg.constprop.0+0x15e>
    1072:	c191                	beqz	a1,1076 <i2c_read_reg.constprop.0+0x148>
    1074:	c01c                	sw	a5,0(s0)
    1076:	c23a                	sw	a4,4(sp)
    1078:	c036                	sw	a3,0(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    107a:	3a71                	jal	a16 <i2c_error>
    107c:	4682                	lw	a3,0(sp)
    107e:	4712                	lw	a4,4(sp)
    1080:	16e1                	addi	a3,a3,-8
    1082:	f54d                	bnez	a0,102c <i2c_read_reg.constprop.0+0xfe>
    1084:	177d                	addi	a4,a4,-1
    1086:	0762                	slli	a4,a4,0x18
    1088:	8761                	srai	a4,a4,0x18
    108a:	bf39                	j	fa8 <i2c_read_reg.constprop.0+0x7a>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    108c:	17fd                	addi	a5,a5,-1
    108e:	4585                	li	a1,1
    1090:	ffe1                	bnez	a5,1068 <i2c_read_reg.constprop.0+0x13a>
    1092:	bf41                	j	1022 <i2c_read_reg.constprop.0+0xf4>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
    1094:	17fd                	addi	a5,a5,-1
    1096:	4605                	li	a2,1
    1098:	fbad                	bnez	a5,100a <i2c_read_reg.constprop.0+0xdc>
    109a:	c03a                	sw	a4,0(sp)
    109c:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    10a0:	3a9d                	jal	a16 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    10a2:	4702                	lw	a4,0(sp)
    10a4:	e111                	bnez	a0,10a8 <i2c_read_reg.constprop.0+0x17a>
    10a6:	4515                	li	a0,5
			buf[cbyte] = I2C1->DATAR;
    10a8:	400056b7          	lui	a3,0x40005
    10ac:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    10b0:	00e487b3          	add	a5,s1,a4
    10b4:	c03a                	sw	a4,0(sp)
    10b6:	00c78023          	sb	a2,0(a5)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    10ba:	f92d                	bnez	a0,102c <i2c_read_reg.constprop.0+0xfe>
    10bc:	3aa9                	jal	a16 <i2c_error>
    10be:	f53d                	bnez	a0,102c <i2c_read_reg.constprop.0+0xfe>
		while(cbyte < len)
    10c0:	4702                	lw	a4,0(sp)
    10c2:	400056b7          	lui	a3,0x40005
    10c6:	f33d                	bnez	a4,102c <i2c_read_reg.constprop.0+0xfe>
			if(cbyte == len - 1) I2C1->CTLR1 &= ~I2C_CTLR1_ACK;
    10c8:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
    10cc:	4705                	li	a4,1
    10ce:	07c2                	slli	a5,a5,0x10
    10d0:	83c1                	srli	a5,a5,0x10
    10d2:	bff7f793          	andi	a5,a5,-1025
    10d6:	07c2                	slli	a5,a5,0x10
    10d8:	83c1                	srli	a5,a5,0x10
    10da:	40f69023          	sh	a5,1024(a3)
    10de:	bf39                	j	ffc <i2c_read_reg.constprop.0+0xce>

000010e0 <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
    10e0:	e00007b7          	lui	a5,0xe0000
    10e4:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
}
    10e8:	8082                	ret

000010ea <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    10ea:	e0000737          	lui	a4,0xe0000
    10ee:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
    10f2:	1111                	addi	sp,sp,-28
    10f4:	cc06                	sw	ra,24(sp)
    10f6:	ca22                	sw	s0,20(sp)
    10f8:	c826                	sw	s1,16(sp)
    10fa:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    10fc:	0c07f793          	andi	a5,a5,192
    1100:	0c000693          	li	a3,192
    1104:	0cd78863          	beq	a5,a3,11d4 <_write.constprop.0+0xea>
	char buffer[4] = { 0 };
    1108:	c602                	sw	zero,12(sp)
    110a:	842e                	mv	s0,a1
	if( size == 0 )
    110c:	e5f1                	bnez	a1,11d8 <_write.constprop.0+0xee>
		lastdmd = (*DMDATA0);
    110e:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
    1112:	c789                	beqz	a5,111c <_write.constprop.0+0x32>
    1114:	0807f793          	andi	a5,a5,128
    1118:	e391                	bnez	a5,111c <_write.constprop.0+0x32>
    111a:	37d9                	jal	10e0 <internal_handle_input.constprop.0>
}
    111c:	40e2                	lw	ra,24(sp)
    111e:	8522                	mv	a0,s0
    1120:	4452                	lw	s0,20(sp)
    1122:	44c2                	lw	s1,16(sp)
    1124:	0171                	addi	sp,sp,28
    1126:	8082                	ret
		int tosend = size - place;
    1128:	409405b3          	sub	a1,s0,s1
    112c:	469d                	li	a3,7
    112e:	872e                	mv	a4,a1
    1130:	00b6d363          	bge	a3,a1,1136 <_write.constprop.0+0x4c>
    1134:	471d                	li	a4,7
    1136:	001006b7          	lui	a3,0x100
    113a:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
    113c:	e0000537          	lui	a0,0xe0000
    1140:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
    1144:	0f450313          	addi	t1,a0,244
    1148:	08067293          	andi	t0,a2,128
    114c:	06029c63          	bnez	t0,11c4 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
    1150:	c611                	beqz	a2,115c <_write.constprop.0+0x72>
    1152:	c43a                	sw	a4,8(sp)
    1154:	c22e                	sw	a1,4(sp)
    1156:	3769                	jal	10e0 <internal_handle_input.constprop.0>
    1158:	4722                	lw	a4,8(sp)
    115a:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
    115c:	4689                	li	a3,2
    115e:	4601                	li	a2,0
    1160:	00b6d463          	bge	a3,a1,1168 <_write.constprop.0+0x7e>
    1164:	ffd70613          	addi	a2,a4,-3
    1168:	4782                	lw	a5,0(sp)
    116a:	00348593          	addi	a1,s1,3
    116e:	0068                	addi	a0,sp,12
    1170:	95be                	add	a1,a1,a5
    1172:	c23a                	sw	a4,4(sp)
    1174:	2e75                	jal	1530 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
    1176:	4632                	lw	a2,12(sp)
    1178:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
    117a:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
    117c:	e00006b7          	lui	a3,0xe0000
    1180:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
    1184:	458d                	li	a1,3
    1186:	00978633          	add	a2,a5,s1
		t = 0;
    118a:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
    118c:	00064303          	lbu	t1,0(a2)
    1190:	0685                	addi	a3,a3,1
    1192:	007c                	addi	a5,sp,12
    1194:	00d78533          	add	a0,a5,a3
    1198:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
    119c:	00d70563          	beq	a4,a3,11a6 <_write.constprop.0+0xbc>
    11a0:	0605                	addi	a2,a2,1
    11a2:	feb695e3          	bne	a3,a1,118c <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
    11a6:	00470693          	addi	a3,a4,4
    11aa:	f806e693          	ori	a3,a3,-128
    11ae:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
    11b2:	4632                	lw	a2,12(sp)
    11b4:	e00006b7          	lui	a3,0xe0000
		place += tosend;
    11b8:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
    11ba:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
    11be:	f684c5e3          	blt	s1,s0,1128 <_write.constprop.0+0x3e>
    11c2:	bfa9                	j	111c <_write.constprop.0+0x32>
			if( timeout-- == 0 )
    11c4:	16fd                	addi	a3,a3,-1
    11c6:	fead                	bnez	a3,1140 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
    11c8:	00032783          	lw	a5,0(t1)
    11cc:	0c07e793          	ori	a5,a5,192
    11d0:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    11d4:	4401                	li	s0,0
    11d6:	b799                	j	111c <_write.constprop.0+0x32>
	if( size == 0 )
    11d8:	4481                	li	s1,0
    11da:	b7d5                	j	11be <_write.constprop.0+0xd4>

000011dc <__puts_uart>:
{
    11dc:	1151                	addi	sp,sp,-12
    11de:	c222                	sw	s0,4(sp)
    11e0:	c406                	sw	ra,8(sp)
    11e2:	842e                	mv	s0,a1
	_write( 0, s, len );
    11e4:	3719                	jal	10ea <_write.constprop.0>
}
    11e6:	40a2                	lw	ra,8(sp)
    11e8:	8522                	mv	a0,s0
    11ea:	4412                	lw	s0,4(sp)
    11ec:	0131                	addi	sp,sp,12
    11ee:	8082                	ret

000011f0 <handle_reset>:
	asm volatile( "\n\
    11f0:	1ffff197          	auipc	gp,0x1ffff
    11f4:	20c18193          	addi	gp,gp,524 # 200003fc <__global_pointer$>
    11f8:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
    11fc:	6509                	lui	a0,0x2
    11fe:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x1bc>
    1202:	30051073          	csrw	mstatus,a0
    1206:	468d                	li	a3,3
    1208:	fffff517          	auipc	a0,0xfffff
    120c:	df850513          	addi	a0,a0,-520 # 0 <InterruptVector>
    1210:	8d55                	or	a0,a0,a3
    1212:	30551073          	csrw	mtvec,a0
asm volatile(
    1216:	c2c18513          	addi	a0,gp,-980 # 20000028 <_i2c_timeout>
    121a:	05c18593          	addi	a1,gp,92 # 20000458 <_ebss>
    121e:	4601                	li	a2,0
    1220:	00b55663          	bge	a0,a1,122c <handle_reset+0x3c>
    1224:	c110                	sw	a2,0(a0)
    1226:	0511                	addi	a0,a0,4
    1228:	feb54ee3          	blt	a0,a1,1224 <handle_reset+0x34>
    122c:	00001517          	auipc	a0,0x1
    1230:	e7050513          	addi	a0,a0,-400 # 209c <_data_lma>
    1234:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_sensor>
    1238:	c2c18613          	addi	a2,gp,-980 # 20000028 <_i2c_timeout>
    123c:	00c58863          	beq	a1,a2,124c <handle_reset+0x5c>
    1240:	4114                	lw	a3,0(a0)
    1242:	c194                	sw	a3,0(a1)
    1244:	0511                	addi	a0,a0,4
    1246:	0591                	addi	a1,a1,4
    1248:	fec59ae3          	bne	a1,a2,123c <handle_reset+0x4c>
	SysTick->CTLR = 5;
    124c:	e000f7b7          	lui	a5,0xe000f
    1250:	4715                	li	a4,5
    1252:	c398                	sw	a4,0(a5)
asm volatile(
    1254:	6785                	lui	a5,0x1
    1256:	6c478793          	addi	a5,a5,1732 # 16c4 <main>
    125a:	34179073          	csrw	mepc,a5
    125e:	30200073          	mret

00001262 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
    1262:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
    1266:	e84ff0ef          	jal	ra,8ea <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
    126a:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
    126e:	e7cff0ef          	jal	ra,8ea <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
    1272:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
    1276:	e74ff0ef          	jal	ra,8ea <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
    127a:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
    127e:	e6cff0ef          	jal	ra,8ea <PrintHex>
	while( (*DMDATA0) & 0x80 );
    1282:	e0000737          	lui	a4,0xe0000
    1286:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
    128a:	0f470693          	addi	a3,a4,244
    128e:	0807f793          	andi	a5,a5,128
    1292:	fbf5                	bnez	a5,1286 <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
    1294:	6785                	lui	a5,0x1
    1296:	a8578793          	addi	a5,a5,-1403 # a85 <i2c_error+0x6f>
    129a:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
    129c:	e0000737          	lui	a4,0xe0000
    12a0:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
    12a4:	0f470693          	addi	a3,a4,244
    12a8:	0807f793          	andi	a5,a5,128
    12ac:	fbf5                	bnez	a5,12a0 <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
    12ae:	aaaab7b7          	lui	a5,0xaaaab
    12b2:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
    12b6:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
    12b8:	a001                	j	12b8 <ADC1_2_IRQHandler+0x56>

000012ba <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
    12ba:	40021737          	lui	a4,0x40021
    12be:	471c                	lw	a5,8(a4)
    12c0:	008006b7          	lui	a3,0x800
    12c4:	8fd5                	or	a5,a5,a3
    12c6:	c71c                	sw	a5,8(a4)

000012c8 <strlen>:
{
    12c8:	87aa                	mv	a5,a0
	for (; *s; s++);
    12ca:	0007c703          	lbu	a4,0(a5)
    12ce:	e701                	bnez	a4,12d6 <strlen+0xe>
}
    12d0:	40a78533          	sub	a0,a5,a0
    12d4:	8082                	ret
	for (; *s; s++);
    12d6:	0785                	addi	a5,a5,1
    12d8:	bfcd                	j	12ca <strlen+0x2>

000012da <mini_vpprintf>:
{
    12da:	fa410113          	addi	sp,sp,-92
    12de:	c8a6                	sw	s1,80(sp)
    12e0:	cc86                	sw	ra,88(sp)
    12e2:	caa2                	sw	s0,84(sp)
    12e4:	c02a                	sw	a0,0(sp)
    12e6:	c22e                	sw	a1,4(sp)
    12e8:	84b2                	mv	s1,a2
    12ea:	87b6                	mv	a5,a3
	int n = 0;
    12ec:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
    12ee:	0004c703          	lbu	a4,0(s1)
    12f2:	00148413          	addi	s0,s1,1
    12f6:	00e10fa3          	sb	a4,31(sp)
    12fa:	eb01                	bnez	a4,130a <mini_vpprintf+0x30>
}
    12fc:	40e6                	lw	ra,88(sp)
    12fe:	4456                	lw	s0,84(sp)
    1300:	4542                	lw	a0,16(sp)
    1302:	44c6                	lw	s1,80(sp)
    1304:	05c10113          	addi	sp,sp,92
    1308:	8082                	ret
		if (ch!='%') {
    130a:	02500693          	li	a3,37
    130e:	00d70f63          	beq	a4,a3,132c <mini_vpprintf+0x52>
    1312:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
    1314:	4612                	lw	a2,4(sp)
    1316:	4782                	lw	a5,0(sp)
    1318:	4585                	li	a1,1
    131a:	01f10513          	addi	a0,sp,31
    131e:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
    1320:	84a2                	mv	s1,s0
		n = n + len;
    1322:	47c2                	lw	a5,16(sp)
    1324:	97aa                	add	a5,a5,a0
    1326:	c83e                	sw	a5,16(sp)
    1328:	47a2                	lw	a5,8(sp)
    132a:	b7d1                	j	12ee <mini_vpprintf+0x14>
			ch=*(fmt++);
    132c:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
    1330:	03000613          	li	a2,48
			ch=*(fmt++);
    1334:	00248713          	addi	a4,s1,2
    1338:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
    133c:	03000413          	li	s0,48
    1340:	08c69063          	bne	a3,a2,13c0 <mini_vpprintf+0xe6>
				ch=*(fmt++);
    1344:	84ba                	mv	s1,a4
    1346:	4601                	li	a2,0
    1348:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
    134a:	4525                	li	a0,9
    134c:	a811                	j	1360 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
    134e:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
    1352:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
    1354:	9736                	add	a4,a4,a3
				ch=*(fmt++);
    1356:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
    135a:	0706                	slli	a4,a4,0x1
    135c:	972e                	add	a4,a4,a1
				ch=*(fmt++);
    135e:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
    1360:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.bdeb3654+0x7fa787>
    1364:	0ff5f313          	andi	t1,a1,255
    1368:	fe6573e3          	bgeu	a0,t1,134e <mini_vpprintf+0x74>
    136c:	c219                	beqz	a2,1372 <mini_vpprintf+0x98>
    136e:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
    1372:	c63a                	sw	a4,12(sp)
    1374:	4661                	li	a2,24
    1376:	00e65363          	bge	a2,a4,137c <mini_vpprintf+0xa2>
    137a:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
    137c:	06c00593          	li	a1,108
			char l = 0;
    1380:	4601                	li	a2,0
			if (ch == 'l') {
    1382:	00b69863          	bne	a3,a1,1392 <mini_vpprintf+0xb8>
				ch=*(fmt++);
    1386:	0004c683          	lbu	a3,0(s1)
				l = 1;
    138a:	4605                	li	a2,1
				ch=*(fmt++);
    138c:	0485                	addi	s1,s1,1
    138e:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
    1392:	01f14683          	lbu	a3,31(sp)
    1396:	06400593          	li	a1,100
    139a:	06b68363          	beq	a3,a1,1400 <mini_vpprintf+0x126>
    139e:	02d5e463          	bltu	a1,a3,13c6 <mini_vpprintf+0xec>
    13a2:	05800713          	li	a4,88
    13a6:	0ae68263          	beq	a3,a4,144a <mini_vpprintf+0x170>
    13aa:	06300713          	li	a4,99
    13ae:	0ce68063          	beq	a3,a4,146e <mini_vpprintf+0x194>
    13b2:	d6a9                	beqz	a3,12fc <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
    13b4:	4612                	lw	a2,4(sp)
    13b6:	c43e                	sw	a5,8(sp)
    13b8:	4585                	li	a1,1
    13ba:	01f10513          	addi	a0,sp,31
    13be:	a88d                	j	1430 <mini_vpprintf+0x156>
			char pad_char = ' ';
    13c0:	02000413          	li	s0,32
    13c4:	b741                	j	1344 <mini_vpprintf+0x6a>
			switch (ch) {
    13c6:	07500593          	li	a1,117
    13ca:	02b68b63          	beq	a3,a1,1400 <mini_vpprintf+0x126>
    13ce:	07800613          	li	a2,120
    13d2:	06c68c63          	beq	a3,a2,144a <mini_vpprintf+0x170>
    13d6:	07300613          	li	a2,115
    13da:	fcc69de3          	bne	a3,a2,13b4 <mini_vpprintf+0xda>
    13de:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
    13e0:	00478713          	addi	a4,a5,4
    13e4:	439c                	lw	a5,0(a5)
    13e6:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
    13e8:	853e                	mv	a0,a5
    13ea:	ca3e                	sw	a5,20(sp)
    13ec:	3df1                	jal	12c8 <strlen>
					if (pad_to > 0) {
    13ee:	4762                	lw	a4,24(sp)
    13f0:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
    13f2:	85aa                	mv	a1,a0
					if (pad_to > 0) {
    13f4:	cb51                	beqz	a4,1488 <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
    13f6:	46b2                	lw	a3,12(sp)
    13f8:	1838                	addi	a4,sp,56
    13fa:	8622                	mv	a2,s0
    13fc:	853e                	mv	a0,a5
    13fe:	a025                	j	1426 <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1400:	00478713          	addi	a4,a5,4
    1404:	c43a                	sw	a4,8(sp)
					if(l) {
    1406:	ca05                	beqz	a2,1436 <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1408:	f8b68693          	addi	a3,a3,-117
    140c:	1018                	addi	a4,sp,32
    140e:	0016b693          	seqz	a3,a3
    1412:	4388                	lw	a0,0(a5)
    1414:	4601                	li	a2,0
    1416:	45a9                	li	a1,10
    1418:	d40ff0ef          	jal	ra,958 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    141c:	46b2                	lw	a3,12(sp)
    141e:	1838                	addi	a4,sp,56
    1420:	8622                	mv	a2,s0
    1422:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    1424:	1008                	addi	a0,sp,32
    1426:	be6ff0ef          	jal	ra,80c <mini_pad>
					len = puts(bf, len, buf);
    142a:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    142c:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
    142e:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
    1430:	4782                	lw	a5,0(sp)
    1432:	9782                	jalr	a5
					break;
    1434:	b5fd                	j	1322 <mini_vpprintf+0x48>
						if(ch == 'u') {
    1436:	07500713          	li	a4,117
    143a:	00e69563          	bne	a3,a4,1444 <mini_vpprintf+0x16a>
	if (radix > 16)
    143e:	1018                	addi	a4,sp,32
    1440:	4685                	li	a3,1
    1442:	bfc1                	j	1412 <mini_vpprintf+0x138>
    1444:	1018                	addi	a4,sp,32
    1446:	4681                	li	a3,0
    1448:	b7e9                	j	1412 <mini_vpprintf+0x138>
					if(l) {
    144a:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    144c:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
    1450:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1454:	c43a                	sw	a4,8(sp)
	if (radix > 16)
    1456:	4685                	li	a3,1
    1458:	1018                	addi	a4,sp,32
    145a:	00163613          	seqz	a2,a2
    145e:	45c1                	li	a1,16
    1460:	cf8ff0ef          	jal	ra,958 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    1464:	46b2                	lw	a3,12(sp)
    1466:	85aa                	mv	a1,a0
    1468:	1838                	addi	a4,sp,56
    146a:	8622                	mv	a2,s0
    146c:	bf65                	j	1424 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
    146e:	00478713          	addi	a4,a5,4
    1472:	439c                	lw	a5,0(a5)
    1474:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
    1476:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
    1478:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
    147c:	1838                	addi	a4,sp,56
    147e:	8622                	mv	a2,s0
    1480:	4585                	li	a1,1
    1482:	01f10513          	addi	a0,sp,31
    1486:	b745                	j	1426 <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
    1488:	4612                	lw	a2,4(sp)
    148a:	853e                	mv	a0,a5
    148c:	b755                	j	1430 <mini_vpprintf+0x156>

0000148e <printf>:
{
    148e:	fdc10113          	addi	sp,sp,-36
    1492:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1494:	862a                	mv	a2,a0
    1496:	6505                	lui	a0,0x1
{
    1498:	c82e                	sw	a1,16(sp)
    149a:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    149c:	4581                	li	a1,0
	va_start( args, format );
    149e:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    14a0:	1dc50513          	addi	a0,a0,476 # 11dc <__puts_uart>
{
    14a4:	c606                	sw	ra,12(sp)
    14a6:	ce3a                	sw	a4,28(sp)
    14a8:	d03e                	sw	a5,32(sp)
	va_start( args, format );
    14aa:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    14ac:	353d                	jal	12da <mini_vpprintf>
}
    14ae:	40b2                	lw	ra,12(sp)
    14b0:	02410113          	addi	sp,sp,36
    14b4:	8082                	ret

000014b6 <mini_vsnprintf>:
{
    14b6:	1121                	addi	sp,sp,-24
    14b8:	ca06                	sw	ra,20(sp)
    14ba:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
    14bc:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
    14be:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
    14c0:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
    14c2:	c18d                	beqz	a1,14e4 <mini_vsnprintf+0x2e>
    14c4:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
    14c6:	858a                	mv	a1,sp
    14c8:	e111                	bnez	a0,14cc <mini_vsnprintf+0x16>
    14ca:	4581                	li	a1,0
    14cc:	6505                	lui	a0,0x1
    14ce:	8a850513          	addi	a0,a0,-1880 # 8a8 <_puts>
    14d2:	3521                	jal	12da <mini_vpprintf>
	if(buffer == (void*) 0) {
    14d4:	c401                	beqz	s0,14dc <mini_vsnprintf+0x26>
	return b.pbuffer - b.buffer;
    14d6:	4512                	lw	a0,4(sp)
    14d8:	4782                	lw	a5,0(sp)
    14da:	8d1d                	sub	a0,a0,a5
}
    14dc:	40d2                	lw	ra,20(sp)
    14de:	4442                	lw	s0,16(sp)
    14e0:	0161                	addi	sp,sp,24
    14e2:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
    14e4:	4401                	li	s0,0
    14e6:	b7d5                	j	14ca <mini_vsnprintf+0x14>

000014e8 <sprintf>:
{
    14e8:	1101                	addi	sp,sp,-32
    14ea:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    14ec:	862e                	mv	a2,a1
    14ee:	800005b7          	lui	a1,0x80000
{
    14f2:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    14f4:	fff5c593          	not	a1,a1
	va_start( args, format );
    14f8:	0814                	addi	a3,sp,16
{
    14fa:	c606                	sw	ra,12(sp)
    14fc:	cc3a                	sw	a4,24(sp)
    14fe:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
    1500:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1502:	3f55                	jal	14b6 <mini_vsnprintf>
}
    1504:	40b2                	lw	ra,12(sp)
    1506:	6105                	addi	sp,sp,32
    1508:	8082                	ret

0000150a <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
    150a:	962a                	add	a2,a2,a0
    150c:	87aa                	mv	a5,a0
    150e:	00c79363          	bne	a5,a2,1514 <memset+0xa>
    1512:	8082                	ret
    1514:	00b78023          	sb	a1,0(a5)
    1518:	0785                	addi	a5,a5,1
    151a:	bfd5                	j	150e <memset+0x4>

0000151c <strcpy>:
{
    151c:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
    151e:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
    1522:	00e78023          	sb	a4,0(a5)
    1526:	e311                	bnez	a4,152a <strcpy+0xe>
}
    1528:	8082                	ret
	for (; (*d=*s); s++, d++);
    152a:	0585                	addi	a1,a1,1
    152c:	0785                	addi	a5,a5,1
    152e:	bfc5                	j	151e <strcpy+0x2>

00001530 <memcpy>:
{
    1530:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
    1532:	00f61363          	bne	a2,a5,1538 <memcpy+0x8>
}
    1536:	8082                	ret
	for (; n; n--) *d++ = *s++;
    1538:	00f58733          	add	a4,a1,a5
    153c:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
    1540:	00f50733          	add	a4,a0,a5
    1544:	0785                	addi	a5,a5,1
    1546:	00d70023          	sb	a3,0(a4)
    154a:	b7e5                	j	1532 <memcpy+0x2>

0000154c <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
    154c:	7179                	addi	sp,sp,-48
    154e:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
    1550:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1554:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
    1556:	862e                	mv	a2,a1
    1558:	85aa                	mv	a1,a0
    155a:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
    155e:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    1560:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    1564:	37f1                	jal	1530 <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    1566:	00140613          	addi	a2,s0,1
    156a:	858a                	mv	a1,sp
    156c:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
    1570:	e3cff0ef          	jal	ra,bac <i2c_write_raw>
}
    1574:	50b2                	lw	ra,44(sp)
    1576:	5422                	lw	s0,40(sp)
    1578:	6145                	addi	sp,sp,48
    157a:	8082                	ret

0000157c <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
    157c:	1151                	addi	sp,sp,-12
    157e:	c222                	sw	s0,4(sp)
    1580:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1582:	02100513          	li	a0,33
void ssd1306_print_str_at(
    1586:	c406                	sw	ra,8(sp)
    1588:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    158a:	f62ff0ef          	jal	ra,cec <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    158e:	4501                	li	a0,0
    1590:	f5cff0ef          	jal	ra,cec <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1594:	07f00513          	li	a0,127
    1598:	f54ff0ef          	jal	ra,cec <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    159c:	02200513          	li	a0,34
    15a0:	f4cff0ef          	jal	ra,cec <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    15a4:	8522                	mv	a0,s0
    15a6:	f46ff0ef          	jal	ra,cec <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    15aa:	8522                	mv	a0,s0
    15ac:	f40ff0ef          	jal	ra,cec <ssd1306_cmd>
    15b0:	4465                	li	s0,25
    15b2:	04018493          	addi	s1,gp,64 # 2000043c <str_output>
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i < SSD1306_STR_SIZE; i++) {
		if (*str) {
    15b6:	0004c783          	lbu	a5,0(s1)
    15ba:	c78d                	beqz	a5,15e4 <ssd1306_print_str_at.constprop.0+0x68>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    15bc:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    15be:	0ff7f793          	andi	a5,a5,255
    15c2:	6709                	lui	a4,0x2
    15c4:	00279693          	slli	a3,a5,0x2
    15c8:	ea470513          	addi	a0,a4,-348 # 1ea4 <FONT_7x5>
    15cc:	97b6                	add	a5,a5,a3
    15ce:	4595                	li	a1,5
    15d0:	953e                	add	a0,a0,a5
    15d2:	3fad                	jal	154c <ssd1306_data.isra.0>
			str++;
    15d4:	0485                	addi	s1,s1,1
	for (int i=0; i < SSD1306_STR_SIZE; i++) {
    15d6:	147d                	addi	s0,s0,-1
    15d8:	fc79                	bnez	s0,15b6 <ssd1306_print_str_at.constprop.0+0x3a>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
    15da:	40a2                	lw	ra,8(sp)
    15dc:	4412                	lw	s0,4(sp)
    15de:	4482                	lw	s1,0(sp)
    15e0:	0131                	addi	sp,sp,12
    15e2:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    15e4:	6789                	lui	a5,0x2
    15e6:	4595                	li	a1,5
    15e8:	ea478513          	addi	a0,a5,-348 # 1ea4 <FONT_7x5>
    15ec:	3785                	jal	154c <ssd1306_data.isra.0>
    15ee:	b7e5                	j	15d6 <ssd1306_print_str_at.constprop.0+0x5a>

000015f0 <puts>:
{
    15f0:	1151                	addi	sp,sp,-12
    15f2:	c406                	sw	ra,8(sp)
    15f4:	c222                	sw	s0,4(sp)
    15f6:	c026                	sw	s1,0(sp)
    15f8:	84aa                	mv	s1,a0
	int sl = strlen( s );
    15fa:	31f9                	jal	12c8 <strlen>
    15fc:	842a                	mv	s0,a0
	_write(0, s, sl );
    15fe:	85aa                	mv	a1,a0
    1600:	8526                	mv	a0,s1
    1602:	34e5                	jal	10ea <_write.constprop.0>
	_write(0, "\n", 1 );
    1604:	6509                	lui	a0,0x2
    1606:	4585                	li	a1,1
    1608:	ea050513          	addi	a0,a0,-352 # 1ea0 <__clz_tab+0x1fc>
    160c:	3cf9                	jal	10ea <_write.constprop.0>
}
    160e:	40a2                	lw	ra,8(sp)
    1610:	00140513          	addi	a0,s0,1
    1614:	4412                	lw	s0,4(sp)
    1616:	4482                	lw	s1,0(sp)
    1618:	0131                	addi	sp,sp,12
    161a:	8082                	ret

0000161c <i2c_scan_callback>:
}

char str_output[SSD1306_STR_SIZE];

void i2c_scan_callback(const uint8_t addr) {
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    161c:	c539                	beqz	a0,166a <i2c_scan_callback+0x4e>
    161e:	07f00793          	li	a5,127
    1622:	862a                	mv	a2,a0
    1624:	04f50363          	beq	a0,a5,166a <i2c_scan_callback+0x4e>
void i2c_scan_callback(const uint8_t addr) {
    1628:	1151                	addi	sp,sp,-12
    162a:	c222                	sw	s0,4(sp)
	
	static int line = 1;
	sprintf(str_output, "I2C: 0x%02X", addr);
    162c:	6589                	lui	a1,0x2
    162e:	da458593          	addi	a1,a1,-604 # 1da4 <__clz_tab+0x100>
    1632:	04018513          	addi	a0,gp,64 # 2000043c <str_output>
void i2c_scan_callback(const uint8_t addr) {
    1636:	c406                	sw	ra,8(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    1638:	3d45                	jal	14e8 <sprintf>
	printf("%s\n", str_output);
    163a:	04018513          	addi	a0,gp,64 # 2000043c <str_output>
    163e:	3f4d                	jal	15f0 <puts>
	modI2C_display(str_output, line++);
    1640:	c1c18793          	addi	a5,gp,-996 # 20000018 <line.0>
    1644:	4380                	lw	s0,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1646:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
    164a:	00140713          	addi	a4,s0,1
    164e:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1650:	cc4ff0ef          	jal	ra,b14 <i2c_ping>
    1654:	e519                	bnez	a0,1662 <i2c_scan_callback+0x46>
	ssd1306_print_str_at(str, line, 0);
    1656:	0ff47513          	andi	a0,s0,255
}
    165a:	4412                	lw	s0,4(sp)
    165c:	40a2                	lw	ra,8(sp)
    165e:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    1660:	bf31                	j	157c <ssd1306_print_str_at.constprop.0>
}
    1662:	40a2                	lw	ra,8(sp)
    1664:	4412                	lw	s0,4(sp)
    1666:	0131                	addi	sp,sp,12
    1668:	8082                	ret
    166a:	8082                	ret

0000166c <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    166c:	400227b7          	lui	a5,0x40022
    1670:	4705                	li	a4,1
    1672:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    1674:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1678:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    167c:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1680:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.bdeb3654+0x107a838>
    1684:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    1686:	009f0737          	lui	a4,0x9f0
    168a:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    168c:	020006b7          	lui	a3,0x2000
    1690:	40021737          	lui	a4,0x40021
    1694:	431c                	lw	a5,0(a4)
    1696:	8ff5                	and	a5,a5,a3
    1698:	dff5                	beqz	a5,1694 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    169a:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    169c:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    16a0:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    16a2:	0027e793          	ori	a5,a5,2
    16a6:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    16a8:	4721                	li	a4,8
    16aa:	42dc                	lw	a5,4(a3)
    16ac:	8bb1                	andi	a5,a5,12
    16ae:	fee79ee3          	bne	a5,a4,16aa <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    16b2:	e00007b7          	lui	a5,0xe0000
    16b6:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    16ba:	08000713          	li	a4,128
    16be:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    16c2:	8082                	ret

000016c4 <main>:
    test_bh1750();
	test_sht3x();
}


int main() {
    16c4:	1111                	addi	sp,sp,-28
    16c6:	cc06                	sw	ra,24(sp)
    16c8:	ca22                	sw	s0,20(sp)
    16ca:	c826                	sw	s1,16(sp)
    SystemInit();
    16cc:	3745                	jal	166c <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    16ce:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    16d2:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    16d4:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    16d8:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.bdeb3654+0x6336>
    16dc:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    16de:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    16e2:	c201ae23          	sw	zero,-964(gp) # 20000038 <systick_millis>
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    16e6:	4398                	lw	a4,0(a5)
    systick_init();			//! required for millis()

    funGpioInitAll();
    Delay_Ms(100);
    16e8:	00494537          	lui	a0,0x494
    16ec:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48e5b7>
    16f0:	00776713          	ori	a4,a4,7
    16f4:	c398                	sw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    16f6:	e000e7b7          	lui	a5,0xe000e
    16fa:	6705                	lui	a4,0x1
    16fc:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>
    funGpioInitAll();
    1700:	40021737          	lui	a4,0x40021
    1704:	4f1c                	lw	a5,24(a4)
    1706:	0357e793          	ori	a5,a5,53
    170a:	cf1c                	sw	a5,24(a4)
    Delay_Ms(100);
    170c:	a36ff0ef          	jal	ra,942 <DelaySysTick>
	if(dev->regb == 0) dev->regb = 1;
    1710:	c1018793          	addi	a5,gp,-1008 # 2000000c <dev_ssd1306>
    1714:	00a7c683          	lbu	a3,10(a5)
    1718:	c1018713          	addi	a4,gp,-1008 # 2000000c <dev_ssd1306>
    171c:	4785                	li	a5,1
    171e:	c681                	beqz	a3,1726 <main+0x62>
	if(dev->regb  > 4) dev->regb = 4;
    1720:	4791                	li	a5,4
    1722:	00d7f463          	bgeu	a5,a3,172a <main+0x66>
    1726:	00f70523          	sb	a5,10(a4) # 4002100a <_eusrstack+0x2002080a>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    172a:	400217b7          	lui	a5,0x40021
    172e:	4b90                	lw	a2,16(a5)
    1730:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1734:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1738:	8e49                	or	a2,a2,a0
    173a:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    173c:	4b90                	lw	a2,16(a5)
    173e:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1740:	6405                	lui	s0,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1742:	8e6d                	and	a2,a2,a1
    1744:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1746:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    1748:	fbc00637          	lui	a2,0xfbc00
    174c:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    174e:	8ec9                	or	a3,a3,a0
    1750:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    1752:	4f94                	lw	a3,24(a5)
    1754:	0116e693          	ori	a3,a3,17
    1758:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    175a:	400107b7          	lui	a5,0x40010
    175e:	43d4                	lw	a3,4(a5)
    1760:	8ef1                	and	a3,a3,a2
    1762:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1764:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1766:	767d                	lui	a2,0xfffff
    1768:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    176c:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    176e:	400117b7          	lui	a5,0x40011
    1772:	4394                	lw	a3,0(a5)
    1774:	f0f6f693          	andi	a3,a3,-241
    1778:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    177a:	4394                	lw	a3,0(a5)
    177c:	0d06e693          	ori	a3,a3,208
    1780:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1782:	4394                	lw	a3,0(a5)
    1784:	8ef1                	and	a3,a3,a2
    1786:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1788:	4394                	lw	a3,0(a5)
    178a:	d0040613          	addi	a2,s0,-768 # d00 <ssd1306_cmd+0x14>
    178e:	8ed1                	or	a3,a3,a2
    1790:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    1792:	400056b7          	lui	a3,0x40005
    1796:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
    179a:	07c2                	slli	a5,a5,0x10
    179c:	83c1                	srli	a5,a5,0x10
    179e:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    17a2:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    17a6:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
    17aa:	431c                	lw	a5,0(a4)
    17ac:	6761                	lui	a4,0x18
    17ae:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.bdeb3654+0x12e57>
    17b2:	00179593          	slli	a1,a5,0x1
    17b6:	0af76463          	bltu	a4,a5,185e <main+0x19a>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    17ba:	02dc7537          	lui	a0,0x2dc7
    17be:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bdeb3654+0x2dc13b7>
    17c2:	f9bfe0ef          	jal	ra,75c <__hidden___udivsi3>
    17c6:	147d                	addi	s0,s0,-1
    17c8:	8d61                	and	a0,a0,s0
    17ca:	0542                	slli	a0,a0,0x10
    17cc:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    17ce:	40005737          	lui	a4,0x40005
    17d2:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    17d6:	40075783          	lhu	a5,1024(a4)
    17da:	07c2                	slli	a5,a5,0x10
    17dc:	83c1                	srli	a5,a5,0x10
    17de:	0017e793          	ori	a5,a5,1
    17e2:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    17e6:	a30ff0ef          	jal	ra,a16 <i2c_error>

	if(i2c_init(&dev_ssd1306) != I2C_OK) {
    17ea:	c941                	beqz	a0,187a <main+0x1b6>
		printf("Failed to init I2C\n");
    17ec:	6509                	lui	a0,0x2
    17ee:	db050513          	addi	a0,a0,-592 # 1db0 <__clz_tab+0x10c>
    17f2:	3bfd                	jal	15f0 <puts>
		i2c_scan(i2c_scan_callback);
		printf("----Done Scanning----\n\n");
	}

    while(1) {
        Delay_Ms(1000);
    17f4:	02dc7537          	lui	a0,0x2dc7
    17f8:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bdeb3654+0x2dc13b7>
    17fc:	946ff0ef          	jal	ra,942 <DelaySysTick>
    dev_sensor.addr = 0x40;
    1800:	c0418793          	addi	a5,gp,-1020 # 20000000 <dev_sensor>
    1804:	04000713          	li	a4,64
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1808:	04000513          	li	a0,64
    dev_sensor.addr = 0x40;
    180c:	00e79423          	sh	a4,8(a5) # 40011008 <_eusrstack+0x20010808>
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1810:	b04ff0ef          	jal	ra,b14 <i2c_ping>
    1814:	c0418413          	addi	s0,gp,-1020 # 20000000 <dev_sensor>
    1818:	16050663          	beqz	a0,1984 <main+0x2c0>
		printf("INA219 not found\n");
    181c:	6509                	lui	a0,0x2
    181e:	e0c50513          	addi	a0,a0,-500 # 1e0c <__clz_tab+0x168>
    1822:	33f9                	jal	15f0 <puts>
    dev_sensor.addr = 0x23;
    1824:	02300793          	li	a5,35
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1828:	02300513          	li	a0,35
    dev_sensor.addr = 0x23;
    182c:	00f41423          	sh	a5,8(s0)
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1830:	ae4ff0ef          	jal	ra,b14 <i2c_ping>
    1834:	1c050363          	beqz	a0,19fa <main+0x336>
		printf("BH1750 not found\n");
    1838:	6509                	lui	a0,0x2
    183a:	e5050513          	addi	a0,a0,-432 # 1e50 <__clz_tab+0x1ac>
    183e:	3b4d                	jal	15f0 <puts>
    dev_sensor.addr = 0x44;
    1840:	04400793          	li	a5,68
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1844:	04400513          	li	a0,68
    dev_sensor.addr = 0x44;
    1848:	00f41423          	sh	a5,8(s0)
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    184c:	ac8ff0ef          	jal	ra,b14 <i2c_ping>
    1850:	1e050c63          	beqz	a0,1a48 <main+0x384>
		printf("SHT3X not found\n");
    1854:	6509                	lui	a0,0x2
    1856:	e7850513          	addi	a0,a0,-392 # 1e78 <__clz_tab+0x1d4>
    185a:	3b59                	jal	15f0 <puts>
		return;
    185c:	bf61                	j	17f4 <main+0x130>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    185e:	02dc7537          	lui	a0,0x2dc7
    1862:	95be                	add	a1,a1,a5
    1864:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bdeb3654+0x2dc13b7>
    1868:	ef5fe0ef          	jal	ra,75c <__hidden___udivsi3>
    186c:	147d                	addi	s0,s0,-1
    186e:	8d61                	and	a0,a0,s0
    1870:	0542                	slli	a0,a0,0x10
    1872:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    1874:	67a1                	lui	a5,0x8
    1876:	8d5d                	or	a0,a0,a5
    1878:	bf99                	j	17ce <main+0x10a>
		if (i2c_ping(0x3C) == I2C_OK) {
    187a:	03c00513          	li	a0,60
    187e:	a96ff0ef          	jal	ra,b14 <i2c_ping>
    1882:	0c051b63          	bnez	a0,1958 <main+0x294>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1886:	6409                	lui	s0,0x2
    1888:	c2018c23          	sb	zero,-968(gp) # 20000034 <ssd1306_buffer>
    188c:	08040413          	addi	s0,s0,128 # 2080 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    1890:	00044503          	lbu	a0,0(s0)
    1894:	0ff00793          	li	a5,255
    1898:	02f51d63          	bne	a0,a5,18d2 <main+0x20e>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    189c:	02100513          	li	a0,33
    18a0:	c4cff0ef          	jal	ra,cec <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    18a4:	4501                	li	a0,0
    18a6:	c46ff0ef          	jal	ra,cec <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    18aa:	07f00513          	li	a0,127
    18ae:	c3eff0ef          	jal	ra,cec <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    18b2:	02200513          	li	a0,34
    18b6:	c36ff0ef          	jal	ra,cec <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    18ba:	4501                	li	a0,0
    18bc:	c30ff0ef          	jal	ra,cec <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    18c0:	451d                	li	a0,7
    18c2:	c2aff0ef          	jal	ra,cec <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    18c6:	02000593          	li	a1,32
    18ca:	c3818513          	addi	a0,gp,-968 # 20000034 <ssd1306_buffer>
    18ce:	39bd                	jal	154c <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    18d0:	a029                	j	18da <main+0x216>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    18d2:	0405                	addi	s0,s0,1
    18d4:	c18ff0ef          	jal	ra,cec <ssd1306_cmd>
    18d8:	dd45                	beqz	a0,1890 <main+0x1cc>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    18da:	40000613          	li	a2,1024
    18de:	4581                	li	a1,0
    18e0:	c4018513          	addi	a0,gp,-960 # 2000003c <frame_buffer>
    18e4:	311d                	jal	150a <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    18e6:	02100513          	li	a0,33
    18ea:	c02ff0ef          	jal	ra,cec <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    18ee:	4501                	li	a0,0
    18f0:	bfcff0ef          	jal	ra,cec <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    18f4:	07f00513          	li	a0,127
    18f8:	bf4ff0ef          	jal	ra,cec <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    18fc:	02200513          	li	a0,34
    1900:	becff0ef          	jal	ra,cec <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1904:	4501                	li	a0,0
    1906:	be6ff0ef          	jal	ra,cec <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    190a:	451d                	li	a0,7
    190c:	be0ff0ef          	jal	ra,cec <ssd1306_cmd>
    1910:	4401                	li	s0,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    1912:	c4018793          	addi	a5,gp,-960 # 2000003c <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1916:	4501                	li	a0,0
    1918:	97a2                	add	a5,a5,s0
    191a:	02050713          	addi	a4,a0,32
    191e:	01071593          	slli	a1,a4,0x10
    1922:	81c1                	srli	a1,a1,0x10
    1924:	8d89                	sub	a1,a1,a0
    1926:	953e                	add	a0,a0,a5
    1928:	c23a                	sw	a4,4(sp)
    192a:	c03e                	sw	a5,0(sp)
    192c:	3105                	jal	154c <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    192e:	4712                	lw	a4,4(sp)
    1930:	4782                	lw	a5,0(sp)
    1932:	853a                	mv	a0,a4
    1934:	08000713          	li	a4,128
    1938:	fee511e3          	bne	a0,a4,191a <main+0x256>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    193c:	08040413          	addi	s0,s0,128
    1940:	40000793          	li	a5,1024
    1944:	fcf417e3          	bne	s0,a5,1912 <main+0x24e>
			sprintf(str_output, "Hello Bee2!");
    1948:	6589                	lui	a1,0x2
    194a:	dc458593          	addi	a1,a1,-572 # 1dc4 <__clz_tab+0x120>
    194e:	04018513          	addi	a0,gp,64 # 2000043c <str_output>
    1952:	36e9                	jal	151c <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    1954:	4501                	li	a0,0
    1956:	311d                	jal	157c <ssd1306_print_str_at.constprop.0>
		printf("----Scanning I2C Bus for Devices---\n");
    1958:	6509                	lui	a0,0x2
    195a:	dd050513          	addi	a0,a0,-560 # 1dd0 <__clz_tab+0x12c>
    195e:	3949                	jal	15f0 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1960:	4401                	li	s0,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    1962:	8522                	mv	a0,s0
    1964:	9b0ff0ef          	jal	ra,b14 <i2c_ping>
    1968:	e119                	bnez	a0,196e <main+0x2aa>
    196a:	8522                	mv	a0,s0
    196c:	3945                	jal	161c <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    196e:	0405                	addi	s0,s0,1
    1970:	0ff47413          	andi	s0,s0,255
    1974:	07f00793          	li	a5,127
    1978:	fef415e3          	bne	s0,a5,1962 <main+0x29e>
		printf("----Done Scanning----\n\n");
    197c:	6509                	lui	a0,0x2
    197e:	df450513          	addi	a0,a0,-524 # 1df4 <__clz_tab+0x150>
    1982:	bd85                	j	17f2 <main+0x12e>
	ret = i2c_write_reg(&dev_sensor, 0x00, (uint8_t[]){0x39, 0x9F}, 2);		// Configure INA219 32V 1A Range
    1984:	77e9                	lui	a5,0xffffa
    1986:	f3978793          	addi	a5,a5,-199 # ffff9f39 <_eusrstack+0xdfff9739>
    198a:	006c                	addi	a1,sp,12
    198c:	4609                	li	a2,2
    198e:	00f11623          	sh	a5,12(sp)
    1992:	b7aff0ef          	jal	ra,d0c <i2c_write_reg.constprop.0>
	i2c_write_reg(&dev_sensor, 0x05, cal_bytes, 2);
    1996:	002c                	addi	a1,sp,8
    1998:	4609                	li	a2,2
	uint8_t cal_bytes[2] = {cal >> 8, cal & 0xFF};
    199a:	47c1                	li	a5,16
	i2c_write_reg(&dev_sensor, 0x05, cal_bytes, 2);
    199c:	4515                	li	a0,5
	uint8_t cal_bytes[2] = {cal >> 8, cal & 0xFF};
    199e:	00f11423          	sh	a5,8(sp)
	i2c_write_reg(&dev_sensor, 0x05, cal_bytes, 2);
    19a2:	b6aff0ef          	jal	ra,d0c <i2c_write_reg.constprop.0>
	ret = i2c_read_reg(&dev_sensor, 0x01, buff, 2);		// Read shunt voltage
    19a6:	4505                	li	a0,1
    19a8:	d86ff0ef          	jal	ra,f2e <i2c_read_reg.constprop.0>
	uint16_t shunt_raw = (buff[1] << 8) | buff[0];
    19ac:	c3018793          	addi	a5,gp,-976 # 2000002c <buff>
    19b0:	0007d703          	lhu	a4,0(a5)
	ret = i2c_read_reg(&dev_sensor, 0x02, buff, 2);		// Read bus voltage
    19b4:	4509                	li	a0,2
    19b6:	c03a                	sw	a4,0(sp)
    19b8:	d76ff0ef          	jal	ra,f2e <i2c_read_reg.constprop.0>
	ret = i2c_read_reg(&dev_sensor, 0x03, buff, 2);		// Read power
    19bc:	450d                	li	a0,3
    19be:	d70ff0ef          	jal	ra,f2e <i2c_read_reg.constprop.0>
	ret = i2c_read_reg(&dev_sensor, 0x04, buff, 2);		// Read current
    19c2:	4511                	li	a0,4
    19c4:	d6aff0ef          	jal	ra,f2e <i2c_read_reg.constprop.0>
	uint16_t bus = (shunt_raw >> 3) * 4;				// in mV
    19c8:	4702                	lw	a4,0(sp)
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    19ca:	c3018793          	addi	a5,gp,-976 # 2000002c <buff>
    19ce:	0007d683          	lhu	a3,0(a5)
	uint16_t bus = (shunt_raw >> 3) * 4;				// in mV
    19d2:	00375613          	srli	a2,a4,0x3
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    19d6:	060a                	slli	a2,a2,0x2
	uint16_t shunt = shunt_raw / 100;					// in mV
    19d8:	06400593          	li	a1,100
    19dc:	853a                	mv	a0,a4
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    19de:	c236                	sw	a3,4(sp)
    19e0:	c032                	sw	a2,0(sp)
	uint16_t shunt = shunt_raw / 100;					// in mV
    19e2:	d7bfe0ef          	jal	ra,75c <__hidden___udivsi3>
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    19e6:	4692                	lw	a3,4(sp)
    19e8:	4602                	lw	a2,0(sp)
    19ea:	01051593          	slli	a1,a0,0x10
    19ee:	6509                	lui	a0,0x2
    19f0:	81c1                	srli	a1,a1,0x10
    19f2:	e2050513          	addi	a0,a0,-480 # 1e20 <__clz_tab+0x17c>
    19f6:	3c61                	jal	148e <printf>
    19f8:	b535                	j	1824 <main+0x160>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x01}, 1);
    19fa:	4785                	li	a5,1
    19fc:	4605                	li	a2,1
    19fe:	006c                	addi	a1,sp,12
    1a00:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    1a04:	00f10623          	sb	a5,12(sp)
    1a08:	9a4ff0ef          	jal	ra,bac <i2c_write_raw>
	ret = i2c_read_reg(&dev_sensor, 0x20, buff, 2);
    1a0c:	02000513          	li	a0,32
    1a10:	d1eff0ef          	jal	ra,f2e <i2c_read_reg.constprop.0>
	uint32_t lux = (lux_raw / 1.2);
    1a14:	c301d783          	lhu	a5,-976(gp) # 2000002c <buff>
    1a18:	00879513          	slli	a0,a5,0x8
    1a1c:	07c2                	slli	a5,a5,0x10
    1a1e:	83c1                	srli	a5,a5,0x10
    1a20:	83a1                	srli	a5,a5,0x8
    1a22:	8d5d                	or	a0,a0,a5
    1a24:	0542                	slli	a0,a0,0x10
    1a26:	8141                	srli	a0,a0,0x10
    1a28:	cc7fe0ef          	jal	ra,6ee <__floatunsidf>
    1a2c:	c241a603          	lw	a2,-988(gp) # 20000020 <line.0+0x8>
    1a30:	c281a683          	lw	a3,-984(gp) # 20000024 <line.0+0xc>
    1a34:	e6cfe0ef          	jal	ra,a0 <__divdf3>
    1a38:	c5bfe0ef          	jal	ra,692 <__fixunsdfsi>
    1a3c:	85aa                	mv	a1,a0
	printf("BH1750: %lu lx\n\n", lux);
    1a3e:	6509                	lui	a0,0x2
    1a40:	e6450513          	addi	a0,a0,-412 # 1e64 <__clz_tab+0x1c0>
    1a44:	34a9                	jal	148e <printf>
    1a46:	bbed                	j	1840 <main+0x17c>
	ret = i2c_write_reg(&dev_sensor, 0x30, (uint8_t[]){0xA2}, 1);
    1a48:	fa200793          	li	a5,-94
    1a4c:	4605                	li	a2,1
    1a4e:	002c                	addi	a1,sp,8
    1a50:	03000513          	li	a0,48
    1a54:	00f10423          	sb	a5,8(sp)
	Delay_Ms(20);	//! REQUIRED
    1a58:	000ea437          	lui	s0,0xea
	ret = i2c_write_reg(&dev_sensor, 0x30, (uint8_t[]){0xA2}, 1);
    1a5c:	ab0ff0ef          	jal	ra,d0c <i2c_write_reg.constprop.0>
	Delay_Ms(20);	//! REQUIRED
    1a60:	60040513          	addi	a0,s0,1536 # ea600 <lib_i2c.c.bdeb3654+0xe4db7>
    1a64:	edffe0ef          	jal	ra,942 <DelaySysTick>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x21, 0x30}, 2);
    1a68:	678d                	lui	a5,0x3
    1a6a:	02178793          	addi	a5,a5,33 # 3021 <ch32fun.c.6a6b5a13+0xc48>
    1a6e:	4609                	li	a2,2
    1a70:	006c                	addi	a1,sp,12
    1a72:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    1a76:	00f11623          	sh	a5,12(sp)
    1a7a:	932ff0ef          	jal	ra,bac <i2c_write_raw>
	Delay_Ms(20);	//! REQUIRED
    1a7e:	60040513          	addi	a0,s0,1536
    1a82:	ec1fe0ef          	jal	ra,942 <DelaySysTick>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1a86:	6789                	lui	a5,0x2
    1a88:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
    1a8c:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
    1a90:	4681                	li	a3,0
    1a92:	c2c18413          	addi	s0,gp,-980 # 20000028 <_i2c_timeout>
    1a96:	40005637          	lui	a2,0x40005
    1a9a:	41865703          	lhu	a4,1048(a2) # 40005418 <_eusrstack+0x20004c18>
    1a9e:	8b09                	andi	a4,a4,2
    1aa0:	ef5d                	bnez	a4,1b5e <main+0x49a>
    1aa2:	c291                	beqz	a3,1aa6 <main+0x3e2>
    1aa4:	c01c                	sw	a5,0(s0)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1aa6:	40005737          	lui	a4,0x40005
    1aaa:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
    1aae:	000306b7          	lui	a3,0x30
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1ab2:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1ab6:	07c2                	slli	a5,a5,0x10
    1ab8:	83c1                	srli	a5,a5,0x10
    1aba:	1007e793          	ori	a5,a5,256
    1abe:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
    1ac2:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1ac4:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    1ac8:	01079613          	slli	a2,a5,0x10
    1acc:	4185d783          	lhu	a5,1048(a1)
    1ad0:	8241                	srli	a2,a2,0x10
    1ad2:	07c2                	slli	a5,a5,0x10
    1ad4:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
    1ad6:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    1ad8:	fed796e3          	bne	a5,a3,1ac4 <main+0x400>
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
    1adc:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    1ae0:	fc9fe0ef          	jal	ra,aa8 <i2c_send_addr_write>
	if(i2c_ret == I2C_OK)
    1ae4:	e541                	bnez	a0,1b6c <main+0x4a8>
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
    1ae6:	400057b7          	lui	a5,0x40005
    1aea:	40078713          	addi	a4,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    1aee:	4007d783          	lhu	a5,1024(a5)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1af2:	400055b7          	lui	a1,0x40005
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
    1af6:	07c2                	slli	a5,a5,0x10
    1af8:	83c1                	srli	a5,a5,0x10
    1afa:	4007e793          	ori	a5,a5,1024
    1afe:	00f71023          	sh	a5,0(a4)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1b02:	00075783          	lhu	a5,0(a4)
    1b06:	07c2                	slli	a5,a5,0x10
    1b08:	83c1                	srli	a5,a5,0x10
    1b0a:	1007e793          	ori	a5,a5,256
    1b0e:	00f71023          	sh	a5,0(a4)
	return (status & status_mask) == status_mask; 
    1b12:	00030737          	lui	a4,0x30
    1b16:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1b18:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    1b1c:	01079693          	slli	a3,a5,0x10
    1b20:	4185d783          	lhu	a5,1048(a1)
    1b24:	82c1                	srli	a3,a3,0x10
    1b26:	07c2                	slli	a5,a5,0x10
    1b28:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
    1b2a:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    1b2c:	fee796e3          	bne	a5,a4,1b18 <main+0x454>
		i2c_ret = i2c_send_addr_read(dev);
    1b30:	b8cff0ef          	jal	ra,ebc <i2c_send_addr_read.constprop.0>
	if(i2c_ret == I2C_OK)
    1b34:	4701                	li	a4,0
    1b36:	e91d                	bnez	a0,1b6c <main+0x4a8>
			buf[cbyte] = I2C1->DATAR;
    1b38:	c3018793          	addi	a5,gp,-976 # 2000002c <buff>
    1b3c:	c03e                	sw	a5,0(sp)
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
    1b3e:	6789                	lui	a5,0x2
    1b40:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.6a6b5a13+0x337>
    1b44:	c01c                	sw	a5,0(s0)
    1b46:	4601                	li	a2,0
    1b48:	400055b7          	lui	a1,0x40005
    1b4c:	4145d683          	lhu	a3,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    1b50:	0406f693          	andi	a3,a3,64
    1b54:	c2d9                	beqz	a3,1bda <main+0x516>
    1b56:	c211                	beqz	a2,1b5a <main+0x496>
    1b58:	c01c                	sw	a5,0(s0)
    1b5a:	4501                	li	a0,0
    1b5c:	a851                	j	1bf0 <main+0x52c>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1b5e:	17fd                	addi	a5,a5,-1
    1b60:	4685                	li	a3,1
    1b62:	ff85                	bnez	a5,1a9a <main+0x3d6>
    1b64:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    1b68:	eaffe0ef          	jal	ra,a16 <i2c_error>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    1b6c:	40005737          	lui	a4,0x40005
    1b70:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	printf("SHT3X temp: %d, hum: %d\n\n", temp, hum);
    1b74:	6509                	lui	a0,0x2
    1b76:	e8850513          	addi	a0,a0,-376 # 1e88 <__clz_tab+0x1e4>
    1b7a:	07c2                	slli	a5,a5,0x10
    1b7c:	83c1                	srli	a5,a5,0x10
    1b7e:	2007e793          	ori	a5,a5,512
    1b82:	40f71023          	sh	a5,1024(a4)
	uint16_t hum = (100 * hum_raw) >> 16;			// >> 16 is equivalent to / 65536
    1b86:	c3018713          	addi	a4,gp,-976 # 2000002c <buff>
    1b8a:	00474783          	lbu	a5,4(a4)
    1b8e:	00374683          	lbu	a3,3(a4)
    1b92:	07a2                	slli	a5,a5,0x8
    1b94:	8fd5                	or	a5,a5,a3
    1b96:	00879613          	slli	a2,a5,0x8
    1b9a:	83a1                	srli	a5,a5,0x8
    1b9c:	8fd1                	or	a5,a5,a2
    1b9e:	07c2                	slli	a5,a5,0x10
    1ba0:	83c1                	srli	a5,a5,0x10
    1ba2:	00179613          	slli	a2,a5,0x1
    1ba6:	963e                	add	a2,a2,a5
    1ba8:	060e                	slli	a2,a2,0x3
    1baa:	963e                	add	a2,a2,a5
	uint16_t temp = (175 * temp_raw) >> 16;			// >> 16 is equivalent to / 65536
    1bac:	00075783          	lhu	a5,0(a4)
	printf("SHT3X temp: %d, hum: %d\n\n", temp, hum);
    1bb0:	8239                	srli	a2,a2,0xe
	uint16_t temp = (175 * temp_raw) >> 16;			// >> 16 is equivalent to / 65536
    1bb2:	00879593          	slli	a1,a5,0x8
    1bb6:	07c2                	slli	a5,a5,0x10
    1bb8:	83c1                	srli	a5,a5,0x10
    1bba:	83a1                	srli	a5,a5,0x8
    1bbc:	8ddd                	or	a1,a1,a5
    1bbe:	01059793          	slli	a5,a1,0x10
    1bc2:	83c1                	srli	a5,a5,0x10
    1bc4:	00179593          	slli	a1,a5,0x1
    1bc8:	95be                	add	a1,a1,a5
    1bca:	058a                	slli	a1,a1,0x2
    1bcc:	8d9d                	sub	a1,a1,a5
    1bce:	0592                	slli	a1,a1,0x4
    1bd0:	8d9d                	sub	a1,a1,a5
	printf("SHT3X temp: %d, hum: %d\n\n", temp, hum);
    1bd2:	81c1                	srli	a1,a1,0x10
    1bd4:	8bbff0ef          	jal	ra,148e <printf>
    1bd8:	b931                	j	17f4 <main+0x130>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
    1bda:	17fd                	addi	a5,a5,-1
    1bdc:	4605                	li	a2,1
    1bde:	f7bd                	bnez	a5,1b4c <main+0x488>
    1be0:	c23a                	sw	a4,4(sp)
    1be2:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    1be6:	e31fe0ef          	jal	ra,a16 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    1bea:	4712                	lw	a4,4(sp)
    1bec:	e111                	bnez	a0,1bf0 <main+0x52c>
    1bee:	4515                	li	a0,5
			buf[cbyte] = I2C1->DATAR;
    1bf0:	4782                	lw	a5,0(sp)
    1bf2:	400056b7          	lui	a3,0x40005
    1bf6:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1bfa:	97ba                	add	a5,a5,a4
    1bfc:	c23a                	sw	a4,4(sp)
    1bfe:	00c78023          	sb	a2,0(a5)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    1c02:	f52d                	bnez	a0,1b6c <main+0x4a8>
    1c04:	e13fe0ef          	jal	ra,a16 <i2c_error>
    1c08:	4712                	lw	a4,4(sp)
    1c0a:	0705                	addi	a4,a4,1
    1c0c:	f125                	bnez	a0,1b6c <main+0x4a8>
		while(cbyte < len)
    1c0e:	4799                	li	a5,6
    1c10:	400056b7          	lui	a3,0x40005
    1c14:	f4f70ce3          	beq	a4,a5,1b6c <main+0x4a8>
			if(cbyte == len - 1) I2C1->CTLR1 &= ~I2C_CTLR1_ACK;
    1c18:	4795                	li	a5,5
    1c1a:	f2f712e3          	bne	a4,a5,1b3e <main+0x47a>
    1c1e:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
    1c22:	07c2                	slli	a5,a5,0x10
    1c24:	83c1                	srli	a5,a5,0x10
    1c26:	bff7f793          	andi	a5,a5,-1025
    1c2a:	07c2                	slli	a5,a5,0x10
    1c2c:	83c1                	srli	a5,a5,0x10
    1c2e:	40f69023          	sh	a5,1024(a3)
    1c32:	b731                	j	1b3e <main+0x47a>

00001c34 <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
    1c34:	1151                	addi	sp,sp,-12
    1c36:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1c38:	e000f7b7          	lui	a5,0xe000f
{
    1c3c:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1c3e:	4b98                	lw	a4,16(a5)
{
    1c40:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1c42:	66b1                	lui	a3,0xc
    1c44:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.bdeb3654+0x6337>
    1c48:	9736                	add	a4,a4,a3
    1c4a:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
    1c4c:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
    1c50:	c3c18793          	addi	a5,gp,-964 # 20000038 <systick_millis>
    1c54:	4398                	lw	a4,0(a5)
}
    1c56:	46a2                	lw	a3,8(sp)
	systick_millis++;
    1c58:	0705                	addi	a4,a4,1
    1c5a:	c398                	sw	a4,0(a5)
}
    1c5c:	4712                	lw	a4,4(sp)
    1c5e:	4782                	lw	a5,0(sp)
    1c60:	0131                	addi	sp,sp,12
    1c62:	30200073          	mret
    1c66:	0000                	unimp
    1c68:	0680                	addi	s0,sp,832
    1c6a:	0000                	unimp
    1c6c:	028a                	slli	t0,t0,0x2
    1c6e:	0000                	unimp
    1c70:	05d8                	addi	a4,sp,708
    1c72:	0000                	unimp
    1c74:	028a                	slli	t0,t0,0x2
    1c76:	0000                	unimp
    1c78:	0672                	slli	a2,a2,0x1c
    1c7a:	0000                	unimp
    1c7c:	028a                	slli	t0,t0,0x2
    1c7e:	0000                	unimp
    1c80:	05d8                	addi	a4,sp,708
    1c82:	0000                	unimp
    1c84:	0680                	addi	s0,sp,832
    1c86:	0000                	unimp
    1c88:	0680                	addi	s0,sp,832
    1c8a:	0000                	unimp
    1c8c:	0672                	slli	a2,a2,0x1c
    1c8e:	0000                	unimp
    1c90:	05d8                	addi	a4,sp,708
    1c92:	0000                	unimp
    1c94:	0270                	addi	a2,sp,268
    1c96:	0000                	unimp
    1c98:	0270                	addi	a2,sp,268
    1c9a:	0000                	unimp
    1c9c:	0270                	addi	a2,sp,268
    1c9e:	0000                	unimp
    1ca0:	0672                	slli	a2,a2,0x1c
	...

00001ca4 <__clz_tab>:
    1ca4:	0100 0202 0303 0303 0404 0404 0404 0404     ................
    1cb4:	0505 0505 0505 0505 0505 0505 0505 0505     ................
    1cc4:	0606 0606 0606 0606 0606 0606 0606 0606     ................
    1cd4:	0606 0606 0606 0606 0606 0606 0606 0606     ................
    1ce4:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    1cf4:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    1d04:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    1d14:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    1d24:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    1d34:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    1d44:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    1d54:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    1d64:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    1d74:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    1d84:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    1d94:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    1da4:	3249 3a43 3020 2578 3230 0058 6146 6c69     I2C: 0x%02X.Fail
    1db4:	6465 7420 206f 6e69 7469 4920 4332 0000     ed to init I2C..
    1dc4:	6548 6c6c 206f 6542 3265 0021 2d2d 2d2d     Hello Bee2!.----
    1dd4:	6353 6e61 696e 676e 4920 4332 4220 7375     Scanning I2C Bus
    1de4:	6620 726f 4420 7665 6369 7365 2d2d 002d      for Devices---.
    1df4:	2d2d 2d2d 6f44 656e 5320 6163 6e6e 6e69     ----Done Scannin
    1e04:	2d67 2d2d 0a2d 0000 4e49 3241 3931 6e20     g----...INA219 n
    1e14:	746f 6620 756f 646e 0000 0000 4e49 3241     ot found....INA2
    1e24:	3931 5320 7568 746e 203a 6425 5675 202c     19 Shunt: %duV, 
    1e34:	7542 3a73 2520 7564 2c56 4320 7275 6572     Bus: %duV, Curre
    1e44:	746e 203a 6425 4175 0a0a 0000 4842 3731     nt: %duA....BH17
    1e54:	3035 6e20 746f 6620 756f 646e 0000 0000     50 not found....
    1e64:	4842 3731 3035 203a 6c25 2075 786c 0a0a     BH1750: %lu lx..
    1e74:	0000 0000 4853 3354 2058 6f6e 2074 6f66     ....SHT3X not fo
    1e84:	6e75 0064 4853 3354 2058 6574 706d 203a     und.SHT3X temp: 
    1e94:	6425 202c 7568 3a6d 2520 0a64 000a 0000     %d, hum: %d.....

00001ea4 <FONT_7x5>:
    1ea4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    1eb4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    1ec4:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    1ed4:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    1ee4:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    1ef4:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    1f04:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    1f14:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    1f24:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    1f34:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    1f44:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    1f54:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    1f64:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    1f74:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    1f84:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    1f94:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    1fa4:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    1fb4:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    1fc4:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    1fd4:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    1fe4:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    1ff4:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    2004:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    2014:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    2024:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    2034:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    2044:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    2054:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    2064:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    2074:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

00002080 <ssd1306_init_array>:
    2080:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    2090:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......
