
example.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	13d0106f          	j	193c <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	1a06                	slli	s4,s4,0x21
   a:	0000                	unimp
   c:	19ae                	slli	s3,s3,0x2b
	...
  2e:	0000                	unimp
  30:	3236                	fld	ft4,360(sp)
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	19ae                	slli	s3,s3,0x2b
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	19ae                	slli	s3,s3,0x2b
  42:	0000                	unimp
  44:	19ae                	slli	s3,s3,0x2b
  46:	0000                	unimp
  48:	19ae                	slli	s3,s3,0x2b
  4a:	0000                	unimp
  4c:	19ae                	slli	s3,s3,0x2b
  4e:	0000                	unimp
  50:	19ae                	slli	s3,s3,0x2b
  52:	0000                	unimp
  54:	19ae                	slli	s3,s3,0x2b
  56:	0000                	unimp
  58:	19ae                	slli	s3,s3,0x2b
  5a:	0000                	unimp
  5c:	19ae                	slli	s3,s3,0x2b
  5e:	0000                	unimp
  60:	19ae                	slli	s3,s3,0x2b
  62:	0000                	unimp
  64:	19ae                	slli	s3,s3,0x2b
  66:	0000                	unimp
  68:	19ae                	slli	s3,s3,0x2b
  6a:	0000                	unimp
  6c:	19ae                	slli	s3,s3,0x2b
  6e:	0000                	unimp
  70:	19ae                	slli	s3,s3,0x2b
  72:	0000                	unimp
  74:	19ae                	slli	s3,s3,0x2b
  76:	0000                	unimp
  78:	19ae                	slli	s3,s3,0x2b
  7a:	0000                	unimp
  7c:	19ae                	slli	s3,s3,0x2b
  7e:	0000                	unimp
  80:	19ae                	slli	s3,s3,0x2b
  82:	0000                	unimp
  84:	19ae                	slli	s3,s3,0x2b
  86:	0000                	unimp
  88:	19ae                	slli	s3,s3,0x2b
  8a:	0000                	unimp
  8c:	19ae                	slli	s3,s3,0x2b
  8e:	0000                	unimp
  90:	19ae                	slli	s3,s3,0x2b
  92:	0000                	unimp
  94:	19ae                	slli	s3,s3,0x2b
  96:	0000                	unimp
  98:	19ae                	slli	s3,s3,0x2b
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divdf3>:
      a0:	fc410113          	addi	sp,sp,-60
      a4:	d826                	sw	s1,48(sp)
      a6:	84ae                	mv	s1,a1
      a8:	00c59713          	slli	a4,a1,0xc
      ac:	01f4d793          	srli	a5,s1,0x1f
      b0:	81d1                	srli	a1,a1,0x14
      b2:	da22                	sw	s0,52(sp)
      b4:	832a                	mv	t1,a0
      b6:	842a                	mv	s0,a0
      b8:	dc06                	sw	ra,56(sp)
      ba:	7ff5f513          	andi	a0,a1,2047
      be:	c03e                	sw	a5,0(sp)
      c0:	8331                	srli	a4,a4,0xc
      c2:	c541                	beqz	a0,14a <__divdf3+0xaa>
      c4:	7ff00793          	li	a5,2047
      c8:	0ef50a63          	beq	a0,a5,1bc <__divdf3+0x11c>
      cc:	070e                	slli	a4,a4,0x3
      ce:	01d35793          	srli	a5,t1,0x1d
      d2:	8fd9                	or	a5,a5,a4
      d4:	00800737          	lui	a4,0x800
      d8:	8fd9                	or	a5,a5,a4
      da:	00331413          	slli	s0,t1,0x3
      de:	c0150593          	addi	a1,a0,-1023
      e2:	4481                	li	s1,0
      e4:	00c69713          	slli	a4,a3,0xc
      e8:	00c75393          	srli	t2,a4,0xc
      ec:	0146d713          	srli	a4,a3,0x14
      f0:	82fd                	srli	a3,a3,0x1f
      f2:	7ff77713          	andi	a4,a4,2047
      f6:	c236                	sw	a3,4(sp)
      f8:	c37d                	beqz	a4,1de <__divdf3+0x13e>
      fa:	7ff00693          	li	a3,2047
      fe:	14d70c63          	beq	a4,a3,256 <__divdf3+0x1b6>
     102:	00339513          	slli	a0,t2,0x3
     106:	01d65693          	srli	a3,a2,0x1d
     10a:	8ec9                	or	a3,a3,a0
     10c:	00800537          	lui	a0,0x800
     110:	00a6e3b3          	or	t2,a3,a0
     114:	00361693          	slli	a3,a2,0x3
     118:	c0170613          	addi	a2,a4,-1023 # 7ffc01 <lib_i2c.c.bdeb3654+0x7f83d6>
     11c:	4501                	li	a0,0
     11e:	4702                	lw	a4,0(sp)
     120:	4312                	lw	t1,4(sp)
     122:	00674733          	xor	a4,a4,t1
     126:	c63a                	sw	a4,12(sp)
     128:	40c58733          	sub	a4,a1,a2
     12c:	c43a                	sw	a4,8(sp)
     12e:	00249713          	slli	a4,s1,0x2
     132:	8f49                	or	a4,a4,a0
     134:	177d                	addi	a4,a4,-1
     136:	4639                	li	a2,14
     138:	16e66063          	bltu	a2,a4,298 <__divdf3+0x1f8>
     13c:	660d                	lui	a2,0x3
     13e:	070a                	slli	a4,a4,0x2
     140:	26860613          	addi	a2,a2,616 # 3268 <SysTick_Handler+0x32>
     144:	9732                	add	a4,a4,a2
     146:	4318                	lw	a4,0(a4)
     148:	8702                	jr	a4
     14a:	006767b3          	or	a5,a4,t1
     14e:	cfbd                	beqz	a5,1cc <__divdf3+0x12c>
     150:	c836                	sw	a3,16(sp)
     152:	c632                	sw	a2,12(sp)
     154:	cf1d                	beqz	a4,192 <__divdf3+0xf2>
     156:	853a                	mv	a0,a4
     158:	c41a                	sw	t1,8(sp)
     15a:	c23a                	sw	a4,4(sp)
     15c:	3f3000ef          	jal	ra,d4e <__clzsi2>
     160:	4712                	lw	a4,4(sp)
     162:	4322                	lw	t1,8(sp)
     164:	4632                	lw	a2,12(sp)
     166:	46c2                	lw	a3,16(sp)
     168:	82aa                	mv	t0,a0
     16a:	ff550393          	addi	t2,a0,-11 # 7ffff5 <lib_i2c.c.bdeb3654+0x7f87ca>
     16e:	47f5                	li	a5,29
     170:	ff828593          	addi	a1,t0,-8
     174:	407787b3          	sub	a5,a5,t2
     178:	00b71733          	sll	a4,a4,a1
     17c:	00f357b3          	srl	a5,t1,a5
     180:	8fd9                	or	a5,a5,a4
     182:	00b31733          	sll	a4,t1,a1
     186:	c0d00593          	li	a1,-1011
     18a:	405585b3          	sub	a1,a1,t0
     18e:	843a                	mv	s0,a4
     190:	bf89                	j	e2 <__divdf3+0x42>
     192:	851a                	mv	a0,t1
     194:	c43a                	sw	a4,8(sp)
     196:	c21a                	sw	t1,4(sp)
     198:	3b7000ef          	jal	ra,d4e <__clzsi2>
     19c:	01550393          	addi	t2,a0,21
     1a0:	47f1                	li	a5,28
     1a2:	4312                	lw	t1,4(sp)
     1a4:	4722                	lw	a4,8(sp)
     1a6:	4632                	lw	a2,12(sp)
     1a8:	46c2                	lw	a3,16(sp)
     1aa:	02050293          	addi	t0,a0,32
     1ae:	fc77d0e3          	bge	a5,t2,16e <__divdf3+0xce>
     1b2:	ff850793          	addi	a5,a0,-8
     1b6:	00f317b3          	sll	a5,t1,a5
     1ba:	b7f1                	j	186 <__divdf3+0xe6>
     1bc:	006767b3          	or	a5,a4,t1
     1c0:	cb91                	beqz	a5,1d4 <__divdf3+0x134>
     1c2:	87ba                	mv	a5,a4
     1c4:	7ff00593          	li	a1,2047
     1c8:	448d                	li	s1,3
     1ca:	bf29                	j	e4 <__divdf3+0x44>
     1cc:	4401                	li	s0,0
     1ce:	4581                	li	a1,0
     1d0:	4485                	li	s1,1
     1d2:	bf09                	j	e4 <__divdf3+0x44>
     1d4:	4401                	li	s0,0
     1d6:	7ff00593          	li	a1,2047
     1da:	4489                	li	s1,2
     1dc:	b721                	j	e4 <__divdf3+0x44>
     1de:	00c3e6b3          	or	a3,t2,a2
     1e2:	c2d1                	beqz	a3,266 <__divdf3+0x1c6>
     1e4:	04038363          	beqz	t2,22a <__divdf3+0x18a>
     1e8:	851e                	mv	a0,t2
     1ea:	ca32                	sw	a2,20(sp)
     1ec:	c82e                	sw	a1,16(sp)
     1ee:	c63e                	sw	a5,12(sp)
     1f0:	c41e                	sw	t2,8(sp)
     1f2:	35d000ef          	jal	ra,d4e <__clzsi2>
     1f6:	43a2                	lw	t2,8(sp)
     1f8:	47b2                	lw	a5,12(sp)
     1fa:	45c2                	lw	a1,16(sp)
     1fc:	4652                	lw	a2,20(sp)
     1fe:	86aa                	mv	a3,a0
     200:	ff550293          	addi	t0,a0,-11
     204:	4775                	li	a4,29
     206:	ff868513          	addi	a0,a3,-8
     20a:	40570733          	sub	a4,a4,t0
     20e:	00a393b3          	sll	t2,t2,a0
     212:	00e65733          	srl	a4,a2,a4
     216:	00776733          	or	a4,a4,t2
     21a:	00a613b3          	sll	t2,a2,a0
     21e:	c0d00613          	li	a2,-1011
     222:	8e15                	sub	a2,a2,a3
     224:	869e                	mv	a3,t2
     226:	83ba                	mv	t2,a4
     228:	bdd5                	j	11c <__divdf3+0x7c>
     22a:	8532                	mv	a0,a2
     22c:	ca1e                	sw	t2,20(sp)
     22e:	c82e                	sw	a1,16(sp)
     230:	c63e                	sw	a5,12(sp)
     232:	c432                	sw	a2,8(sp)
     234:	31b000ef          	jal	ra,d4e <__clzsi2>
     238:	01550293          	addi	t0,a0,21
     23c:	4771                	li	a4,28
     23e:	4622                	lw	a2,8(sp)
     240:	47b2                	lw	a5,12(sp)
     242:	45c2                	lw	a1,16(sp)
     244:	43d2                	lw	t2,20(sp)
     246:	02050693          	addi	a3,a0,32
     24a:	fa575de3          	bge	a4,t0,204 <__divdf3+0x164>
     24e:	1561                	addi	a0,a0,-8
     250:	00a61733          	sll	a4,a2,a0
     254:	b7e9                	j	21e <__divdf3+0x17e>
     256:	00c3e6b3          	or	a3,t2,a2
     25a:	ca91                	beqz	a3,26e <__divdf3+0x1ce>
     25c:	86b2                	mv	a3,a2
     25e:	450d                	li	a0,3
     260:	7ff00613          	li	a2,2047
     264:	bd6d                	j	11e <__divdf3+0x7e>
     266:	4381                	li	t2,0
     268:	4601                	li	a2,0
     26a:	4505                	li	a0,1
     26c:	bd4d                	j	11e <__divdf3+0x7e>
     26e:	4381                	li	t2,0
     270:	7ff00613          	li	a2,2047
     274:	4509                	li	a0,2
     276:	b565                	j	11e <__divdf3+0x7e>
     278:	4702                	lw	a4,0(sp)
     27a:	83be                	mv	t2,a5
     27c:	86a2                	mv	a3,s0
     27e:	c63a                	sw	a4,12(sp)
     280:	4789                	li	a5,2
     282:	42f48763          	beq	s1,a5,6b0 <__divdf3+0x610>
     286:	478d                	li	a5,3
     288:	40f48d63          	beq	s1,a5,6a2 <__divdf3+0x602>
     28c:	4785                	li	a5,1
     28e:	2ef49b63          	bne	s1,a5,584 <__divdf3+0x4e4>
     292:	4381                	li	t2,0
     294:	4681                	li	a3,0
     296:	aef9                	j	674 <__divdf3+0x5d4>
     298:	00f3e663          	bltu	t2,a5,2a4 <__divdf3+0x204>
     29c:	36779163          	bne	a5,t2,5fe <__divdf3+0x55e>
     2a0:	34d46f63          	bltu	s0,a3,5fe <__divdf3+0x55e>
     2a4:	01f79593          	slli	a1,a5,0x1f
     2a8:	00145613          	srli	a2,s0,0x1
     2ac:	01f41713          	slli	a4,s0,0x1f
     2b0:	8385                	srli	a5,a5,0x1
     2b2:	00c5e433          	or	s0,a1,a2
     2b6:	00839613          	slli	a2,t2,0x8
     2ba:	d03a                	sw	a4,32(sp)
     2bc:	00869713          	slli	a4,a3,0x8
     2c0:	c03a                	sw	a4,0(sp)
     2c2:	01065713          	srli	a4,a2,0x10
     2c6:	0186d593          	srli	a1,a3,0x18
     2ca:	c23a                	sw	a4,4(sp)
     2cc:	00c5e333          	or	t1,a1,a2
     2d0:	4592                	lw	a1,4(sp)
     2d2:	01031713          	slli	a4,t1,0x10
     2d6:	8341                	srli	a4,a4,0x10
     2d8:	853e                	mv	a0,a5
     2da:	ce1a                	sw	t1,28(sp)
     2dc:	cc3a                	sw	a4,24(sp)
     2de:	ca3e                	sw	a5,20(sp)
     2e0:	1f9000ef          	jal	ra,cd8 <__hidden___udivsi3>
     2e4:	85aa                	mv	a1,a0
     2e6:	c82a                	sw	a0,16(sp)
     2e8:	4562                	lw	a0,24(sp)
     2ea:	1cf000ef          	jal	ra,cb8 <__mulsi3>
     2ee:	47d2                	lw	a5,20(sp)
     2f0:	4592                	lw	a1,4(sp)
     2f2:	84aa                	mv	s1,a0
     2f4:	853e                	mv	a0,a5
     2f6:	20f000ef          	jal	ra,d04 <__umodsi3>
     2fa:	46c2                	lw	a3,16(sp)
     2fc:	0542                	slli	a0,a0,0x10
     2fe:	01045613          	srli	a2,s0,0x10
     302:	8e49                	or	a2,a2,a0
     304:	4372                	lw	t1,28(sp)
     306:	5702                	lw	a4,32(sp)
     308:	87b6                	mv	a5,a3
     30a:	00967c63          	bgeu	a2,s1,322 <__divdf3+0x282>
     30e:	961a                	add	a2,a2,t1
     310:	fff68793          	addi	a5,a3,-1
     314:	00666763          	bltu	a2,t1,322 <__divdf3+0x282>
     318:	00967563          	bgeu	a2,s1,322 <__divdf3+0x282>
     31c:	ffe68793          	addi	a5,a3,-2
     320:	961a                	add	a2,a2,t1
     322:	4592                	lw	a1,4(sp)
     324:	d03e                	sw	a5,32(sp)
     326:	409607b3          	sub	a5,a2,s1
     32a:	853e                	mv	a0,a5
     32c:	d21a                	sw	t1,36(sp)
     32e:	ce3a                	sw	a4,28(sp)
     330:	c83e                	sw	a5,16(sp)
     332:	1a7000ef          	jal	ra,cd8 <__hidden___udivsi3>
     336:	85aa                	mv	a1,a0
     338:	ca2a                	sw	a0,20(sp)
     33a:	4562                	lw	a0,24(sp)
     33c:	0442                	slli	s0,s0,0x10
     33e:	8041                	srli	s0,s0,0x10
     340:	179000ef          	jal	ra,cb8 <__mulsi3>
     344:	4592                	lw	a1,4(sp)
     346:	84aa                	mv	s1,a0
     348:	4542                	lw	a0,16(sp)
     34a:	1bb000ef          	jal	ra,d04 <__umodsi3>
     34e:	4652                	lw	a2,20(sp)
     350:	0542                	slli	a0,a0,0x10
     352:	8c49                	or	s0,s0,a0
     354:	4772                	lw	a4,28(sp)
     356:	5782                	lw	a5,32(sp)
     358:	5312                	lw	t1,36(sp)
     35a:	85b2                	mv	a1,a2
     35c:	00947c63          	bgeu	s0,s1,374 <__divdf3+0x2d4>
     360:	941a                	add	s0,s0,t1
     362:	fff60593          	addi	a1,a2,-1
     366:	00646763          	bltu	s0,t1,374 <__divdf3+0x2d4>
     36a:	00947563          	bgeu	s0,s1,374 <__divdf3+0x2d4>
     36e:	ffe60593          	addi	a1,a2,-2
     372:	941a                	add	s0,s0,t1
     374:	07c2                	slli	a5,a5,0x10
     376:	00b7e2b3          	or	t0,a5,a1
     37a:	4782                	lw	a5,0(sp)
     37c:	4602                	lw	a2,0(sp)
     37e:	63c1                	lui	t2,0x10
     380:	fff38693          	addi	a3,t2,-1 # ffff <lib_i2c.c.bdeb3654+0x87d4>
     384:	83c1                	srli	a5,a5,0x10
     386:	c83e                	sw	a5,16(sp)
     388:	00d2f7b3          	and	a5,t0,a3
     38c:	8ef1                	and	a3,a3,a2
     38e:	8c05                	sub	s0,s0,s1
     390:	853e                	mv	a0,a5
     392:	ca36                	sw	a3,20(sp)
     394:	85b6                	mv	a1,a3
     396:	123000ef          	jal	ra,cb8 <__mulsi3>
     39a:	84aa                	mv	s1,a0
     39c:	45c2                	lw	a1,16(sp)
     39e:	853e                	mv	a0,a5
     3a0:	119000ef          	jal	ra,cb8 <__mulsi3>
     3a4:	87aa                	mv	a5,a0
     3a6:	45d2                	lw	a1,20(sp)
     3a8:	0102d513          	srli	a0,t0,0x10
     3ac:	10d000ef          	jal	ra,cb8 <__mulsi3>
     3b0:	ce2a                	sw	a0,28(sp)
     3b2:	45c2                	lw	a1,16(sp)
     3b4:	0102d513          	srli	a0,t0,0x10
     3b8:	101000ef          	jal	ra,cb8 <__mulsi3>
     3bc:	4672                	lw	a2,28(sp)
     3be:	0104d693          	srli	a3,s1,0x10
     3c2:	97b2                	add	a5,a5,a2
     3c4:	97b6                	add	a5,a5,a3
     3c6:	00c7f363          	bgeu	a5,a2,3cc <__divdf3+0x32c>
     3ca:	951e                	add	a0,a0,t2
     3cc:	0107d693          	srli	a3,a5,0x10
     3d0:	9536                	add	a0,a0,a3
     3d2:	66c1                	lui	a3,0x10
     3d4:	16fd                	addi	a3,a3,-1
     3d6:	8ff5                	and	a5,a5,a3
     3d8:	07c2                	slli	a5,a5,0x10
     3da:	8cf5                	and	s1,s1,a3
     3dc:	94be                	add	s1,s1,a5
     3de:	00a46763          	bltu	s0,a0,3ec <__divdf3+0x34c>
     3e2:	8396                	mv	t2,t0
     3e4:	04a41363          	bne	s0,a0,42a <__divdf3+0x38a>
     3e8:	04977163          	bgeu	a4,s1,42a <__divdf3+0x38a>
     3ec:	4782                	lw	a5,0(sp)
     3ee:	fff28393          	addi	t2,t0,-1
     3f2:	97ba                	add	a5,a5,a4
     3f4:	00e7b6b3          	sltu	a3,a5,a4
     3f8:	00668633          	add	a2,a3,t1
     3fc:	9432                	add	s0,s0,a2
     3fe:	873e                	mv	a4,a5
     400:	00836563          	bltu	t1,s0,40a <__divdf3+0x36a>
     404:	02831363          	bne	t1,s0,42a <__divdf3+0x38a>
     408:	e28d                	bnez	a3,42a <__divdf3+0x38a>
     40a:	00a46663          	bltu	s0,a0,416 <__divdf3+0x376>
     40e:	00851e63          	bne	a0,s0,42a <__divdf3+0x38a>
     412:	0097fc63          	bgeu	a5,s1,42a <__divdf3+0x38a>
     416:	4702                	lw	a4,0(sp)
     418:	ffe28393          	addi	t2,t0,-2
     41c:	97ba                	add	a5,a5,a4
     41e:	873e                	mv	a4,a5
     420:	4782                	lw	a5,0(sp)
     422:	00f737b3          	sltu	a5,a4,a5
     426:	979a                	add	a5,a5,t1
     428:	943e                	add	s0,s0,a5
     42a:	409704b3          	sub	s1,a4,s1
     42e:	8c09                	sub	s0,s0,a0
     430:	00973733          	sltu	a4,a4,s1
     434:	8c19                	sub	s0,s0,a4
     436:	d41a                	sw	t1,40(sp)
     438:	56fd                	li	a3,-1
     43a:	14830563          	beq	t1,s0,584 <__divdf3+0x4e4>
     43e:	4592                	lw	a1,4(sp)
     440:	8522                	mv	a0,s0
     442:	d21e                	sw	t2,36(sp)
     444:	095000ef          	jal	ra,cd8 <__hidden___udivsi3>
     448:	85aa                	mv	a1,a0
     44a:	d02a                	sw	a0,32(sp)
     44c:	4562                	lw	a0,24(sp)
     44e:	06b000ef          	jal	ra,cb8 <__mulsi3>
     452:	4592                	lw	a1,4(sp)
     454:	ce2a                	sw	a0,28(sp)
     456:	8522                	mv	a0,s0
     458:	0ad000ef          	jal	ra,d04 <__umodsi3>
     45c:	5682                	lw	a3,32(sp)
     45e:	47f2                	lw	a5,28(sp)
     460:	0542                	slli	a0,a0,0x10
     462:	0104d413          	srli	s0,s1,0x10
     466:	8c49                	or	s0,s0,a0
     468:	5392                	lw	t2,36(sp)
     46a:	5322                	lw	t1,40(sp)
     46c:	8736                	mv	a4,a3
     46e:	00f47c63          	bgeu	s0,a5,486 <__divdf3+0x3e6>
     472:	941a                	add	s0,s0,t1
     474:	fff68713          	addi	a4,a3,-1 # ffff <lib_i2c.c.bdeb3654+0x87d4>
     478:	00646763          	bltu	s0,t1,486 <__divdf3+0x3e6>
     47c:	00f47563          	bgeu	s0,a5,486 <__divdf3+0x3e6>
     480:	ffe68713          	addi	a4,a3,-2
     484:	941a                	add	s0,s0,t1
     486:	4592                	lw	a1,4(sp)
     488:	40f407b3          	sub	a5,s0,a5
     48c:	853e                	mv	a0,a5
     48e:	d61a                	sw	t1,44(sp)
     490:	d43a                	sw	a4,40(sp)
     492:	d21e                	sw	t2,36(sp)
     494:	ce3e                	sw	a5,28(sp)
     496:	043000ef          	jal	ra,cd8 <__hidden___udivsi3>
     49a:	85aa                	mv	a1,a0
     49c:	d02a                	sw	a0,32(sp)
     49e:	4562                	lw	a0,24(sp)
     4a0:	019000ef          	jal	ra,cb8 <__mulsi3>
     4a4:	4592                	lw	a1,4(sp)
     4a6:	842a                	mv	s0,a0
     4a8:	4572                	lw	a0,28(sp)
     4aa:	05b000ef          	jal	ra,d04 <__umodsi3>
     4ae:	5602                	lw	a2,32(sp)
     4b0:	01049793          	slli	a5,s1,0x10
     4b4:	0542                	slli	a0,a0,0x10
     4b6:	83c1                	srli	a5,a5,0x10
     4b8:	8fc9                	or	a5,a5,a0
     4ba:	5392                	lw	t2,36(sp)
     4bc:	5722                	lw	a4,40(sp)
     4be:	5332                	lw	t1,44(sp)
     4c0:	85b2                	mv	a1,a2
     4c2:	0087fc63          	bgeu	a5,s0,4da <__divdf3+0x43a>
     4c6:	979a                	add	a5,a5,t1
     4c8:	fff60593          	addi	a1,a2,-1
     4cc:	0067e763          	bltu	a5,t1,4da <__divdf3+0x43a>
     4d0:	0087f563          	bgeu	a5,s0,4da <__divdf3+0x43a>
     4d4:	ffe60593          	addi	a1,a2,-2
     4d8:	979a                	add	a5,a5,t1
     4da:	0742                	slli	a4,a4,0x10
     4dc:	8f4d                	or	a4,a4,a1
     4de:	01071293          	slli	t0,a4,0x10
     4e2:	0102d293          	srli	t0,t0,0x10
     4e6:	45d2                	lw	a1,20(sp)
     4e8:	8f81                	sub	a5,a5,s0
     4ea:	8516                	mv	a0,t0
     4ec:	7cc000ef          	jal	ra,cb8 <__mulsi3>
     4f0:	84aa                	mv	s1,a0
     4f2:	45c2                	lw	a1,16(sp)
     4f4:	8516                	mv	a0,t0
     4f6:	7c2000ef          	jal	ra,cb8 <__mulsi3>
     4fa:	82aa                	mv	t0,a0
     4fc:	45d2                	lw	a1,20(sp)
     4fe:	01075513          	srli	a0,a4,0x10
     502:	7b6000ef          	jal	ra,cb8 <__mulsi3>
     506:	842a                	mv	s0,a0
     508:	45c2                	lw	a1,16(sp)
     50a:	01075513          	srli	a0,a4,0x10
     50e:	7aa000ef          	jal	ra,cb8 <__mulsi3>
     512:	0104d613          	srli	a2,s1,0x10
     516:	008286b3          	add	a3,t0,s0
     51a:	00d602b3          	add	t0,a2,a3
     51e:	0082f463          	bgeu	t0,s0,526 <__divdf3+0x486>
     522:	66c1                	lui	a3,0x10
     524:	9536                	add	a0,a0,a3
     526:	0102d693          	srli	a3,t0,0x10
     52a:	9536                	add	a0,a0,a3
     52c:	66c1                	lui	a3,0x10
     52e:	16fd                	addi	a3,a3,-1
     530:	00d2f2b3          	and	t0,t0,a3
     534:	02c2                	slli	t0,t0,0x10
     536:	8ee5                	and	a3,a3,s1
     538:	92b6                	add	t0,t0,a3
     53a:	00a7e763          	bltu	a5,a0,548 <__divdf3+0x4a8>
     53e:	86ba                	mv	a3,a4
     540:	04a79063          	bne	a5,a0,580 <__divdf3+0x4e0>
     544:	04028063          	beqz	t0,584 <__divdf3+0x4e4>
     548:	979a                	add	a5,a5,t1
     54a:	fff70693          	addi	a3,a4,-1
     54e:	863e                	mv	a2,a5
     550:	0267e363          	bltu	a5,t1,576 <__divdf3+0x4d6>
     554:	00a7e763          	bltu	a5,a0,562 <__divdf3+0x4c2>
     558:	02a79463          	bne	a5,a0,580 <__divdf3+0x4e0>
     55c:	4602                	lw	a2,0(sp)
     55e:	00567e63          	bgeu	a2,t0,57a <__divdf3+0x4da>
     562:	ffe70693          	addi	a3,a4,-2
     566:	4702                	lw	a4,0(sp)
     568:	4602                	lw	a2,0(sp)
     56a:	0706                	slli	a4,a4,0x1
     56c:	00c73633          	sltu	a2,a4,a2
     570:	961a                	add	a2,a2,t1
     572:	963e                	add	a2,a2,a5
     574:	c03a                	sw	a4,0(sp)
     576:	00a61563          	bne	a2,a0,580 <__divdf3+0x4e0>
     57a:	4782                	lw	a5,0(sp)
     57c:	00f28463          	beq	t0,a5,584 <__divdf3+0x4e4>
     580:	0016e693          	ori	a3,a3,1
     584:	47a2                	lw	a5,8(sp)
     586:	3ff78793          	addi	a5,a5,1023
     58a:	08f05363          	blez	a5,610 <__divdf3+0x570>
     58e:	0076f713          	andi	a4,a3,7
     592:	cf01                	beqz	a4,5aa <__divdf3+0x50a>
     594:	00f6f713          	andi	a4,a3,15
     598:	4611                	li	a2,4
     59a:	00c70863          	beq	a4,a2,5aa <__divdf3+0x50a>
     59e:	00468713          	addi	a4,a3,4 # 10004 <lib_i2c.c.bdeb3654+0x87d9>
     5a2:	00d73633          	sltu	a2,a4,a3
     5a6:	93b2                	add	t2,t2,a2
     5a8:	86ba                	mv	a3,a4
     5aa:	01000737          	lui	a4,0x1000
     5ae:	00e3f733          	and	a4,t2,a4
     5b2:	cb09                	beqz	a4,5c4 <__divdf3+0x524>
     5b4:	ff0007b7          	lui	a5,0xff000
     5b8:	17fd                	addi	a5,a5,-1
     5ba:	00f3f3b3          	and	t2,t2,a5
     5be:	47a2                	lw	a5,8(sp)
     5c0:	40078793          	addi	a5,a5,1024 # ff000400 <_eusrstack+0xdefffc00>
     5c4:	7fe00713          	li	a4,2046
     5c8:	0ef74463          	blt	a4,a5,6b0 <__divdf3+0x610>
     5cc:	0036d713          	srli	a4,a3,0x3
     5d0:	01d39693          	slli	a3,t2,0x1d
     5d4:	8ed9                	or	a3,a3,a4
     5d6:	0033d393          	srli	t2,t2,0x3
     5da:	4732                	lw	a4,12(sp)
     5dc:	03b2                	slli	t2,t2,0xc
     5de:	50e2                	lw	ra,56(sp)
     5e0:	5452                	lw	s0,52(sp)
     5e2:	07d2                	slli	a5,a5,0x14
     5e4:	00c3d393          	srli	t2,t2,0xc
     5e8:	0077e7b3          	or	a5,a5,t2
     5ec:	077e                	slli	a4,a4,0x1f
     5ee:	00e7e633          	or	a2,a5,a4
     5f2:	54c2                	lw	s1,48(sp)
     5f4:	8536                	mv	a0,a3
     5f6:	85b2                	mv	a1,a2
     5f8:	03c10113          	addi	sp,sp,60
     5fc:	8082                	ret
     5fe:	4722                	lw	a4,8(sp)
     600:	177d                	addi	a4,a4,-1
     602:	c43a                	sw	a4,8(sp)
     604:	4701                	li	a4,0
     606:	b945                	j	2b6 <__divdf3+0x216>
     608:	4792                	lw	a5,4(sp)
     60a:	84aa                	mv	s1,a0
     60c:	c63e                	sw	a5,12(sp)
     60e:	b98d                	j	280 <__divdf3+0x1e0>
     610:	4605                	li	a2,1
     612:	cb89                	beqz	a5,624 <__divdf3+0x584>
     614:	8e1d                	sub	a2,a2,a5
     616:	03800713          	li	a4,56
     61a:	c6c74ce3          	blt	a4,a2,292 <__divdf3+0x1f2>
     61e:	477d                	li	a4,31
     620:	04c74c63          	blt	a4,a2,678 <__divdf3+0x5d8>
     624:	47a2                	lw	a5,8(sp)
     626:	41e78713          	addi	a4,a5,1054
     62a:	00c6d7b3          	srl	a5,a3,a2
     62e:	00e696b3          	sll	a3,a3,a4
     632:	00d036b3          	snez	a3,a3
     636:	00e39733          	sll	a4,t2,a4
     63a:	8ed9                	or	a3,a3,a4
     63c:	8fd5                	or	a5,a5,a3
     63e:	00c3d3b3          	srl	t2,t2,a2
     642:	0077f713          	andi	a4,a5,7
     646:	cf01                	beqz	a4,65e <__divdf3+0x5be>
     648:	00f7f713          	andi	a4,a5,15
     64c:	4691                	li	a3,4
     64e:	00d70863          	beq	a4,a3,65e <__divdf3+0x5be>
     652:	00478713          	addi	a4,a5,4
     656:	00f736b3          	sltu	a3,a4,a5
     65a:	93b6                	add	t2,t2,a3
     65c:	87ba                	mv	a5,a4
     65e:	00800737          	lui	a4,0x800
     662:	00e3f733          	and	a4,t2,a4
     666:	eb31                	bnez	a4,6ba <__divdf3+0x61a>
     668:	01d39693          	slli	a3,t2,0x1d
     66c:	838d                	srli	a5,a5,0x3
     66e:	8edd                	or	a3,a3,a5
     670:	0033d393          	srli	t2,t2,0x3
     674:	4781                	li	a5,0
     676:	b795                	j	5da <__divdf3+0x53a>
     678:	5705                	li	a4,-31
     67a:	40f707b3          	sub	a5,a4,a5
     67e:	02000593          	li	a1,32
     682:	00f3d7b3          	srl	a5,t2,a5
     686:	4701                	li	a4,0
     688:	00b60763          	beq	a2,a1,696 <__divdf3+0x5f6>
     68c:	4722                	lw	a4,8(sp)
     68e:	43e70713          	addi	a4,a4,1086 # 80043e <lib_i2c.c.bdeb3654+0x7f8c13>
     692:	00e39733          	sll	a4,t2,a4
     696:	8f55                	or	a4,a4,a3
     698:	00e03733          	snez	a4,a4
     69c:	8fd9                	or	a5,a5,a4
     69e:	4381                	li	t2,0
     6a0:	b74d                	j	642 <__divdf3+0x5a2>
     6a2:	000803b7          	lui	t2,0x80
     6a6:	4681                	li	a3,0
     6a8:	7ff00793          	li	a5,2047
     6ac:	c602                	sw	zero,12(sp)
     6ae:	b735                	j	5da <__divdf3+0x53a>
     6b0:	4381                	li	t2,0
     6b2:	4681                	li	a3,0
     6b4:	7ff00793          	li	a5,2047
     6b8:	b70d                	j	5da <__divdf3+0x53a>
     6ba:	4381                	li	t2,0
     6bc:	4681                	li	a3,0
     6be:	4785                	li	a5,1
     6c0:	bf29                	j	5da <__divdf3+0x53a>

000006c2 <__muldf3>:
     6c2:	fc410113          	addi	sp,sp,-60
     6c6:	00c59793          	slli	a5,a1,0xc
     6ca:	d826                	sw	s1,48(sp)
     6cc:	0145d313          	srli	t1,a1,0x14
     6d0:	00c7d493          	srli	s1,a5,0xc
     6d4:	01f5d793          	srli	a5,a1,0x1f
     6d8:	da22                	sw	s0,52(sp)
     6da:	dc06                	sw	ra,56(sp)
     6dc:	7ff37313          	andi	t1,t1,2047
     6e0:	c43e                	sw	a5,8(sp)
     6e2:	8436                	mv	s0,a3
     6e4:	2a030363          	beqz	t1,98a <__muldf3+0x2c8>
     6e8:	7ff00793          	li	a5,2047
     6ec:	2ef30e63          	beq	t1,a5,9e8 <__muldf3+0x326>
     6f0:	00349693          	slli	a3,s1,0x3
     6f4:	01d55793          	srli	a5,a0,0x1d
     6f8:	8fd5                	or	a5,a5,a3
     6fa:	008006b7          	lui	a3,0x800
     6fe:	00d7e4b3          	or	s1,a5,a3
     702:	00351593          	slli	a1,a0,0x3
     706:	c0130313          	addi	t1,t1,-1023
     70a:	4281                	li	t0,0
     70c:	01445713          	srli	a4,s0,0x14
     710:	00c41793          	slli	a5,s0,0xc
     714:	7ff77713          	andi	a4,a4,2047
     718:	83b1                	srli	a5,a5,0xc
     71a:	807d                	srli	s0,s0,0x1f
     71c:	2e070763          	beqz	a4,a0a <__muldf3+0x348>
     720:	7ff00693          	li	a3,2047
     724:	34d70e63          	beq	a4,a3,a80 <__muldf3+0x3be>
     728:	01d65693          	srli	a3,a2,0x1d
     72c:	078e                	slli	a5,a5,0x3
     72e:	8edd                	or	a3,a3,a5
     730:	008007b7          	lui	a5,0x800
     734:	8fd5                	or	a5,a5,a3
     736:	00361693          	slli	a3,a2,0x3
     73a:	c0170613          	addi	a2,a4,-1023
     73e:	4701                	li	a4,0
     740:	4522                	lw	a0,8(sp)
     742:	961a                	add	a2,a2,t1
     744:	d232                	sw	a2,36(sp)
     746:	0605                	addi	a2,a2,1
     748:	8d21                	xor	a0,a0,s0
     74a:	c232                	sw	a2,4(sp)
     74c:	00229613          	slli	a2,t0,0x2
     750:	c02a                	sw	a0,0(sp)
     752:	8e59                	or	a2,a2,a4
     754:	4529                	li	a0,10
     756:	38c54163          	blt	a0,a2,ad8 <__muldf3+0x416>
     75a:	4509                	li	a0,2
     75c:	34c54363          	blt	a0,a2,aa2 <__muldf3+0x3e0>
     760:	167d                	addi	a2,a2,-1
     762:	4505                	li	a0,1
     764:	34c57e63          	bgeu	a0,a2,ac0 <__muldf3+0x3fe>
     768:	0105d713          	srli	a4,a1,0x10
     76c:	c43a                	sw	a4,8(sp)
     76e:	62c1                	lui	t0,0x10
     770:	0106d713          	srli	a4,a3,0x10
     774:	c63a                	sw	a4,12(sp)
     776:	fff28713          	addi	a4,t0,-1 # ffff <lib_i2c.c.bdeb3654+0x87d4>
     77a:	00e5f633          	and	a2,a1,a4
     77e:	8ef9                	and	a3,a3,a4
     780:	ca32                	sw	a2,20(sp)
     782:	8532                	mv	a0,a2
     784:	cc36                	sw	a3,24(sp)
     786:	85b6                	mv	a1,a3
     788:	2b05                	jal	cb8 <__mulsi3>
     78a:	83aa                	mv	t2,a0
     78c:	45b2                	lw	a1,12(sp)
     78e:	4552                	lw	a0,20(sp)
     790:	2325                	jal	cb8 <__mulsi3>
     792:	832a                	mv	t1,a0
     794:	45e2                	lw	a1,24(sp)
     796:	4522                	lw	a0,8(sp)
     798:	2305                	jal	cb8 <__mulsi3>
     79a:	842a                	mv	s0,a0
     79c:	45b2                	lw	a1,12(sp)
     79e:	4522                	lw	a0,8(sp)
     7a0:	2b21                	jal	cb8 <__mulsi3>
     7a2:	0103d693          	srli	a3,t2,0x10
     7a6:	9322                	add	t1,t1,s0
     7a8:	d02a                	sw	a0,32(sp)
     7aa:	9336                	add	t1,t1,a3
     7ac:	00837563          	bgeu	t1,s0,7b6 <__muldf3+0xf4>
     7b0:	005506b3          	add	a3,a0,t0
     7b4:	d036                	sw	a3,32(sp)
     7b6:	01035293          	srli	t0,t1,0x10
     7ba:	00e37333          	and	t1,t1,a4
     7be:	0342                	slli	t1,t1,0x10
     7c0:	00e3f6b3          	and	a3,t2,a4
     7c4:	969a                	add	a3,a3,t1
     7c6:	d436                	sw	a3,40(sp)
     7c8:	0107d693          	srli	a3,a5,0x10
     7cc:	8ff9                	and	a5,a5,a4
     7ce:	4552                	lw	a0,20(sp)
     7d0:	c836                	sw	a3,16(sp)
     7d2:	ce3e                	sw	a5,28(sp)
     7d4:	85be                	mv	a1,a5
     7d6:	21cd                	jal	cb8 <__mulsi3>
     7d8:	872a                	mv	a4,a0
     7da:	45c2                	lw	a1,16(sp)
     7dc:	4552                	lw	a0,20(sp)
     7de:	29e9                	jal	cb8 <__mulsi3>
     7e0:	87aa                	mv	a5,a0
     7e2:	45f2                	lw	a1,28(sp)
     7e4:	4522                	lw	a0,8(sp)
     7e6:	29c9                	jal	cb8 <__mulsi3>
     7e8:	832a                	mv	t1,a0
     7ea:	45c2                	lw	a1,16(sp)
     7ec:	4522                	lw	a0,8(sp)
     7ee:	21e9                	jal	cb8 <__mulsi3>
     7f0:	01075693          	srli	a3,a4,0x10
     7f4:	979a                	add	a5,a5,t1
     7f6:	96be                	add	a3,a3,a5
     7f8:	0066f463          	bgeu	a3,t1,800 <__muldf3+0x13e>
     7fc:	67c1                	lui	a5,0x10
     7fe:	953e                	add	a0,a0,a5
     800:	0106d793          	srli	a5,a3,0x10
     804:	97aa                	add	a5,a5,a0
     806:	6341                	lui	t1,0x10
     808:	d63e                	sw	a5,44(sp)
     80a:	fff30793          	addi	a5,t1,-1 # ffff <lib_i2c.c.bdeb3654+0x87d4>
     80e:	8efd                	and	a3,a3,a5
     810:	06c2                	slli	a3,a3,0x10
     812:	8f7d                	and	a4,a4,a5
     814:	9736                	add	a4,a4,a3
     816:	ca3a                	sw	a4,20(sp)
     818:	92ba                	add	t0,t0,a4
     81a:	8fe5                	and	a5,a5,s1
     81c:	0104d713          	srli	a4,s1,0x10
     820:	45e2                	lw	a1,24(sp)
     822:	c43a                	sw	a4,8(sp)
     824:	853e                	mv	a0,a5
     826:	2949                	jal	cb8 <__mulsi3>
     828:	872a                	mv	a4,a0
     82a:	45b2                	lw	a1,12(sp)
     82c:	853e                	mv	a0,a5
     82e:	2169                	jal	cb8 <__mulsi3>
     830:	83aa                	mv	t2,a0
     832:	45e2                	lw	a1,24(sp)
     834:	4522                	lw	a0,8(sp)
     836:	2149                	jal	cb8 <__mulsi3>
     838:	842a                	mv	s0,a0
     83a:	45b2                	lw	a1,12(sp)
     83c:	4522                	lw	a0,8(sp)
     83e:	29ad                	jal	cb8 <__mulsi3>
     840:	01075693          	srli	a3,a4,0x10
     844:	93a2                	add	t2,t2,s0
     846:	93b6                	add	t2,t2,a3
     848:	0083f363          	bgeu	t2,s0,84e <__muldf3+0x18c>
     84c:	951a                	add	a0,a0,t1
     84e:	6441                	lui	s0,0x10
     850:	fff40313          	addi	t1,s0,-1 # ffff <lib_i2c.c.bdeb3654+0x87d4>
     854:	0103d693          	srli	a3,t2,0x10
     858:	0063f3b3          	and	t2,t2,t1
     85c:	03c2                	slli	t2,t2,0x10
     85e:	00677733          	and	a4,a4,t1
     862:	971e                	add	a4,a4,t2
     864:	00a684b3          	add	s1,a3,a0
     868:	45f2                	lw	a1,28(sp)
     86a:	c63a                	sw	a4,12(sp)
     86c:	853e                	mv	a0,a5
     86e:	21a9                	jal	cb8 <__mulsi3>
     870:	872a                	mv	a4,a0
     872:	45c2                	lw	a1,16(sp)
     874:	853e                	mv	a0,a5
     876:	2189                	jal	cb8 <__mulsi3>
     878:	87aa                	mv	a5,a0
     87a:	45f2                	lw	a1,28(sp)
     87c:	4522                	lw	a0,8(sp)
     87e:	292d                	jal	cb8 <__mulsi3>
     880:	83aa                	mv	t2,a0
     882:	45c2                	lw	a1,16(sp)
     884:	4522                	lw	a0,8(sp)
     886:	290d                	jal	cb8 <__mulsi3>
     888:	01075693          	srli	a3,a4,0x10
     88c:	979e                	add	a5,a5,t2
     88e:	97b6                	add	a5,a5,a3
     890:	0077f363          	bgeu	a5,t2,896 <__muldf3+0x1d4>
     894:	9522                	add	a0,a0,s0
     896:	0067f633          	and	a2,a5,t1
     89a:	0642                	slli	a2,a2,0x10
     89c:	00677733          	and	a4,a4,t1
     8a0:	5682                	lw	a3,32(sp)
     8a2:	9732                	add	a4,a4,a2
     8a4:	45d2                	lw	a1,20(sp)
     8a6:	5632                	lw	a2,44(sp)
     8a8:	9696                	add	a3,a3,t0
     8aa:	00b6b5b3          	sltu	a1,a3,a1
     8ae:	963a                	add	a2,a2,a4
     8b0:	95b2                	add	a1,a1,a2
     8b2:	00e63733          	sltu	a4,a2,a4
     8b6:	00c5b633          	sltu	a2,a1,a2
     8ba:	8e59                	or	a2,a2,a4
     8bc:	83c1                	srli	a5,a5,0x10
     8be:	963e                	add	a2,a2,a5
     8c0:	47b2                	lw	a5,12(sp)
     8c2:	009582b3          	add	t0,a1,s1
     8c6:	00f68733          	add	a4,a3,a5
     8ca:	00d736b3          	sltu	a3,a4,a3
     8ce:	00d28333          	add	t1,t0,a3
     8d2:	00b2b7b3          	sltu	a5,t0,a1
     8d6:	005332b3          	sltu	t0,t1,t0
     8da:	0057e7b3          	or	a5,a5,t0
     8de:	97b2                	add	a5,a5,a2
     8e0:	97aa                	add	a5,a5,a0
     8e2:	5622                	lw	a2,40(sp)
     8e4:	01735693          	srli	a3,t1,0x17
     8e8:	07a6                	slli	a5,a5,0x9
     8ea:	8fd5                	or	a5,a5,a3
     8ec:	00971693          	slli	a3,a4,0x9
     8f0:	8ed1                	or	a3,a3,a2
     8f2:	835d                	srli	a4,a4,0x17
     8f4:	00d036b3          	snez	a3,a3
     8f8:	8ed9                	or	a3,a3,a4
     8fa:	01000737          	lui	a4,0x1000
     8fe:	0326                	slli	t1,t1,0x9
     900:	8f7d                	and	a4,a4,a5
     902:	0066e6b3          	or	a3,a3,t1
     906:	1e070563          	beqz	a4,af0 <__muldf3+0x42e>
     90a:	0016d713          	srli	a4,a3,0x1
     90e:	8a85                	andi	a3,a3,1
     910:	8f55                	or	a4,a4,a3
     912:	01f79693          	slli	a3,a5,0x1f
     916:	8ed9                	or	a3,a3,a4
     918:	8385                	srli	a5,a5,0x1
     91a:	4712                	lw	a4,4(sp)
     91c:	3ff70513          	addi	a0,a4,1023 # 10003ff <lib_i2c.c.bdeb3654+0xff8bd4>
     920:	1ca05b63          	blez	a0,af6 <__muldf3+0x434>
     924:	0076f713          	andi	a4,a3,7
     928:	cf01                	beqz	a4,940 <__muldf3+0x27e>
     92a:	00f6f713          	andi	a4,a3,15
     92e:	4611                	li	a2,4
     930:	00c70863          	beq	a4,a2,940 <__muldf3+0x27e>
     934:	00468713          	addi	a4,a3,4 # 800004 <lib_i2c.c.bdeb3654+0x7f87d9>
     938:	00d73633          	sltu	a2,a4,a3
     93c:	97b2                	add	a5,a5,a2
     93e:	86ba                	mv	a3,a4
     940:	01000737          	lui	a4,0x1000
     944:	8f7d                	and	a4,a4,a5
     946:	cb01                	beqz	a4,956 <__muldf3+0x294>
     948:	ff000737          	lui	a4,0xff000
     94c:	177d                	addi	a4,a4,-1
     94e:	8ff9                	and	a5,a5,a4
     950:	4712                	lw	a4,4(sp)
     952:	40070513          	addi	a0,a4,1024 # ff000400 <_eusrstack+0xdefffc00>
     956:	7fe00713          	li	a4,2046
     95a:	22a74e63          	blt	a4,a0,b96 <__muldf3+0x4d4>
     95e:	01d79613          	slli	a2,a5,0x1d
     962:	828d                	srli	a3,a3,0x3
     964:	8e55                	or	a2,a2,a3
     966:	838d                	srli	a5,a5,0x3
     968:	07b2                	slli	a5,a5,0xc
     96a:	01451713          	slli	a4,a0,0x14
     96e:	83b1                	srli	a5,a5,0xc
     970:	8fd9                	or	a5,a5,a4
     972:	4702                	lw	a4,0(sp)
     974:	50e2                	lw	ra,56(sp)
     976:	5452                	lw	s0,52(sp)
     978:	077e                	slli	a4,a4,0x1f
     97a:	00e7e6b3          	or	a3,a5,a4
     97e:	54c2                	lw	s1,48(sp)
     980:	8532                	mv	a0,a2
     982:	85b6                	mv	a1,a3
     984:	03c10113          	addi	sp,sp,60
     988:	8082                	ret
     98a:	00a4e5b3          	or	a1,s1,a0
     98e:	c5ad                	beqz	a1,9f8 <__muldf3+0x336>
     990:	c232                	sw	a2,4(sp)
     992:	c89d                	beqz	s1,9c8 <__muldf3+0x306>
     994:	c02a                	sw	a0,0(sp)
     996:	8526                	mv	a0,s1
     998:	2e5d                	jal	d4e <__clzsi2>
     99a:	4702                	lw	a4,0(sp)
     99c:	4612                	lw	a2,4(sp)
     99e:	ff550593          	addi	a1,a0,-11
     9a2:	47f5                	li	a5,29
     9a4:	ff850693          	addi	a3,a0,-8
     9a8:	8f8d                	sub	a5,a5,a1
     9aa:	00d49333          	sll	t1,s1,a3
     9ae:	00f757b3          	srl	a5,a4,a5
     9b2:	0067e7b3          	or	a5,a5,t1
     9b6:	00d714b3          	sll	s1,a4,a3
     9ba:	c0d00313          	li	t1,-1011
     9be:	85a6                	mv	a1,s1
     9c0:	40a30333          	sub	t1,t1,a0
     9c4:	84be                	mv	s1,a5
     9c6:	b391                	j	70a <__muldf3+0x48>
     9c8:	c02a                	sw	a0,0(sp)
     9ca:	2651                	jal	d4e <__clzsi2>
     9cc:	87aa                	mv	a5,a0
     9ce:	01578593          	addi	a1,a5,21 # 10015 <lib_i2c.c.bdeb3654+0x87ea>
     9d2:	46f1                	li	a3,28
     9d4:	4702                	lw	a4,0(sp)
     9d6:	4612                	lw	a2,4(sp)
     9d8:	02050513          	addi	a0,a0,32
     9dc:	fcb6d3e3          	bge	a3,a1,9a2 <__muldf3+0x2e0>
     9e0:	17e1                	addi	a5,a5,-8
     9e2:	00f717b3          	sll	a5,a4,a5
     9e6:	bfd1                	j	9ba <__muldf3+0x2f8>
     9e8:	00a4e5b3          	or	a1,s1,a0
     9ec:	c991                	beqz	a1,a00 <__muldf3+0x33e>
     9ee:	85aa                	mv	a1,a0
     9f0:	7ff00313          	li	t1,2047
     9f4:	428d                	li	t0,3
     9f6:	bb19                	j	70c <__muldf3+0x4a>
     9f8:	4481                	li	s1,0
     9fa:	4301                	li	t1,0
     9fc:	4285                	li	t0,1
     9fe:	b339                	j	70c <__muldf3+0x4a>
     a00:	4481                	li	s1,0
     a02:	7ff00313          	li	t1,2047
     a06:	4289                	li	t0,2
     a08:	b311                	j	70c <__muldf3+0x4a>
     a0a:	00c7e6b3          	or	a3,a5,a2
     a0e:	c2c9                	beqz	a3,a90 <__muldf3+0x3ce>
     a10:	c3a1                	beqz	a5,a50 <__muldf3+0x38e>
     a12:	853e                	mv	a0,a5
     a14:	ca32                	sw	a2,20(sp)
     a16:	c82e                	sw	a1,16(sp)
     a18:	c61a                	sw	t1,12(sp)
     a1a:	c216                	sw	t0,4(sp)
     a1c:	c03e                	sw	a5,0(sp)
     a1e:	2e05                	jal	d4e <__clzsi2>
     a20:	4782                	lw	a5,0(sp)
     a22:	4292                	lw	t0,4(sp)
     a24:	4332                	lw	t1,12(sp)
     a26:	45c2                	lw	a1,16(sp)
     a28:	4652                	lw	a2,20(sp)
     a2a:	ff550693          	addi	a3,a0,-11
     a2e:	4775                	li	a4,29
     a30:	ff850393          	addi	t2,a0,-8
     a34:	8f15                	sub	a4,a4,a3
     a36:	007797b3          	sll	a5,a5,t2
     a3a:	00e65733          	srl	a4,a2,a4
     a3e:	8f5d                	or	a4,a4,a5
     a40:	007617b3          	sll	a5,a2,t2
     a44:	c0d00613          	li	a2,-1011
     a48:	86be                	mv	a3,a5
     a4a:	8e09                	sub	a2,a2,a0
     a4c:	87ba                	mv	a5,a4
     a4e:	b9c5                	j	73e <__muldf3+0x7c>
     a50:	8532                	mv	a0,a2
     a52:	ca3e                	sw	a5,20(sp)
     a54:	c82e                	sw	a1,16(sp)
     a56:	c61a                	sw	t1,12(sp)
     a58:	c216                	sw	t0,4(sp)
     a5a:	c032                	sw	a2,0(sp)
     a5c:	2ccd                	jal	d4e <__clzsi2>
     a5e:	872a                	mv	a4,a0
     a60:	01570693          	addi	a3,a4,21
     a64:	43f1                	li	t2,28
     a66:	4602                	lw	a2,0(sp)
     a68:	4292                	lw	t0,4(sp)
     a6a:	4332                	lw	t1,12(sp)
     a6c:	45c2                	lw	a1,16(sp)
     a6e:	47d2                	lw	a5,20(sp)
     a70:	02050513          	addi	a0,a0,32
     a74:	fad3dde3          	bge	t2,a3,a2e <__muldf3+0x36c>
     a78:	1761                	addi	a4,a4,-8
     a7a:	00e61733          	sll	a4,a2,a4
     a7e:	b7d9                	j	a44 <__muldf3+0x382>
     a80:	00c7e6b3          	or	a3,a5,a2
     a84:	ca91                	beqz	a3,a98 <__muldf3+0x3d6>
     a86:	86b2                	mv	a3,a2
     a88:	470d                	li	a4,3
     a8a:	7ff00613          	li	a2,2047
     a8e:	b94d                	j	740 <__muldf3+0x7e>
     a90:	4781                	li	a5,0
     a92:	4601                	li	a2,0
     a94:	4705                	li	a4,1
     a96:	b16d                	j	740 <__muldf3+0x7e>
     a98:	4781                	li	a5,0
     a9a:	7ff00613          	li	a2,2047
     a9e:	4709                	li	a4,2
     aa0:	b145                	j	740 <__muldf3+0x7e>
     aa2:	4505                	li	a0,1
     aa4:	00c51533          	sll	a0,a0,a2
     aa8:	53057613          	andi	a2,a0,1328
     aac:	ee15                	bnez	a2,ae8 <__muldf3+0x426>
     aae:	24057313          	andi	t1,a0,576
     ab2:	0c031863          	bnez	t1,b82 <__muldf3+0x4c0>
     ab6:	08857513          	andi	a0,a0,136
     aba:	ca0507e3          	beqz	a0,768 <__muldf3+0xa6>
     abe:	c022                	sw	s0,0(sp)
     ac0:	4609                	li	a2,2
     ac2:	0cc70a63          	beq	a4,a2,b96 <__muldf3+0x4d4>
     ac6:	460d                	li	a2,3
     ac8:	0cc70363          	beq	a4,a2,b8e <__muldf3+0x4cc>
     acc:	4605                	li	a2,1
     ace:	e4c716e3          	bne	a4,a2,91a <__muldf3+0x258>
     ad2:	4781                	li	a5,0
     ad4:	4601                	li	a2,0
     ad6:	a041                	j	b56 <__muldf3+0x494>
     ad8:	453d                	li	a0,15
     ada:	0aa60a63          	beq	a2,a0,b8e <__muldf3+0x4cc>
     ade:	452d                	li	a0,11
     ae0:	fca60fe3          	beq	a2,a0,abe <__muldf3+0x3fc>
     ae4:	47a2                	lw	a5,8(sp)
     ae6:	c03e                	sw	a5,0(sp)
     ae8:	87a6                	mv	a5,s1
     aea:	86ae                	mv	a3,a1
     aec:	8716                	mv	a4,t0
     aee:	bfc9                	j	ac0 <__muldf3+0x3fe>
     af0:	5712                	lw	a4,36(sp)
     af2:	c23a                	sw	a4,4(sp)
     af4:	b51d                	j	91a <__muldf3+0x258>
     af6:	4585                	li	a1,1
     af8:	c909                	beqz	a0,b0a <__muldf3+0x448>
     afa:	8d89                	sub	a1,a1,a0
     afc:	03800713          	li	a4,56
     b00:	fcb749e3          	blt	a4,a1,ad2 <__muldf3+0x410>
     b04:	477d                	li	a4,31
     b06:	04b74a63          	blt	a4,a1,b5a <__muldf3+0x498>
     b0a:	4712                	lw	a4,4(sp)
     b0c:	00b6d533          	srl	a0,a3,a1
     b10:	41e70613          	addi	a2,a4,1054
     b14:	00c69733          	sll	a4,a3,a2
     b18:	00e03733          	snez	a4,a4
     b1c:	00c79633          	sll	a2,a5,a2
     b20:	8f51                	or	a4,a4,a2
     b22:	8f49                	or	a4,a4,a0
     b24:	00b7d7b3          	srl	a5,a5,a1
     b28:	00777693          	andi	a3,a4,7
     b2c:	ce81                	beqz	a3,b44 <__muldf3+0x482>
     b2e:	00f77693          	andi	a3,a4,15
     b32:	4611                	li	a2,4
     b34:	00c68863          	beq	a3,a2,b44 <__muldf3+0x482>
     b38:	00470693          	addi	a3,a4,4
     b3c:	00e6b633          	sltu	a2,a3,a4
     b40:	97b2                	add	a5,a5,a2
     b42:	8736                	mv	a4,a3
     b44:	008006b7          	lui	a3,0x800
     b48:	8efd                	and	a3,a3,a5
     b4a:	eab9                	bnez	a3,ba0 <__muldf3+0x4de>
     b4c:	01d79613          	slli	a2,a5,0x1d
     b50:	830d                	srli	a4,a4,0x3
     b52:	8e59                	or	a2,a2,a4
     b54:	838d                	srli	a5,a5,0x3
     b56:	4501                	li	a0,0
     b58:	bd01                	j	968 <__muldf3+0x2a6>
     b5a:	5705                	li	a4,-31
     b5c:	8f09                	sub	a4,a4,a0
     b5e:	02000513          	li	a0,32
     b62:	00e7d733          	srl	a4,a5,a4
     b66:	4601                	li	a2,0
     b68:	00a58763          	beq	a1,a0,b76 <__muldf3+0x4b4>
     b6c:	4612                	lw	a2,4(sp)
     b6e:	43e60613          	addi	a2,a2,1086
     b72:	00c79633          	sll	a2,a5,a2
     b76:	8e55                	or	a2,a2,a3
     b78:	00c03633          	snez	a2,a2
     b7c:	8f51                	or	a4,a4,a2
     b7e:	4781                	li	a5,0
     b80:	b765                	j	b28 <__muldf3+0x466>
     b82:	000807b7          	lui	a5,0x80
     b86:	7ff00513          	li	a0,2047
     b8a:	c002                	sw	zero,0(sp)
     b8c:	bbf1                	j	968 <__muldf3+0x2a6>
     b8e:	000807b7          	lui	a5,0x80
     b92:	4601                	li	a2,0
     b94:	bfcd                	j	b86 <__muldf3+0x4c4>
     b96:	4781                	li	a5,0
     b98:	4601                	li	a2,0
     b9a:	7ff00513          	li	a0,2047
     b9e:	b3e9                	j	968 <__muldf3+0x2a6>
     ba0:	4781                	li	a5,0
     ba2:	4601                	li	a2,0
     ba4:	4505                	li	a0,1
     ba6:	b3c9                	j	968 <__muldf3+0x2a6>

00000ba8 <__fixunsdfsi>:
     ba8:	0145d713          	srli	a4,a1,0x14
     bac:	00100637          	lui	a2,0x100
     bb0:	86aa                	mv	a3,a0
     bb2:	fff60793          	addi	a5,a2,-1 # fffff <lib_i2c.c.bdeb3654+0xf87d4>
     bb6:	7ff77713          	andi	a4,a4,2047
     bba:	3fe00513          	li	a0,1022
     bbe:	8fed                	and	a5,a5,a1
     bc0:	81fd                	srli	a1,a1,0x1f
     bc2:	02e55f63          	bge	a0,a4,c00 <__fixunsdfsi+0x58>
     bc6:	4501                	li	a0,0
     bc8:	ed8d                	bnez	a1,c02 <__fixunsdfsi+0x5a>
     bca:	41e00593          	li	a1,1054
     bce:	557d                	li	a0,-1
     bd0:	02e5c963          	blt	a1,a4,c02 <__fixunsdfsi+0x5a>
     bd4:	8fd1                	or	a5,a5,a2
     bd6:	43300613          	li	a2,1075
     bda:	8e19                	sub	a2,a2,a4
     bdc:	45fd                	li	a1,31
     bde:	00c5ca63          	blt	a1,a2,bf2 <__fixunsdfsi+0x4a>
     be2:	bed70713          	addi	a4,a4,-1043
     be6:	00e79533          	sll	a0,a5,a4
     bea:	00c6d6b3          	srl	a3,a3,a2
     bee:	8d55                	or	a0,a0,a3
     bf0:	8082                	ret
     bf2:	41300693          	li	a3,1043
     bf6:	40e68733          	sub	a4,a3,a4
     bfa:	00e7d533          	srl	a0,a5,a4
     bfe:	8082                	ret
     c00:	4501                	li	a0,0
     c02:	8082                	ret

00000c04 <__floatsidf>:
     c04:	1151                	addi	sp,sp,-12
     c06:	c406                	sw	ra,8(sp)
     c08:	c222                	sw	s0,4(sp)
     c0a:	c026                	sw	s1,0(sp)
     c0c:	cd21                	beqz	a0,c64 <__floatsidf+0x60>
     c0e:	41f55793          	srai	a5,a0,0x1f
     c12:	00a7c433          	xor	s0,a5,a0
     c16:	8c1d                	sub	s0,s0,a5
     c18:	01f55493          	srli	s1,a0,0x1f
     c1c:	8522                	mv	a0,s0
     c1e:	2a05                	jal	d4e <__clzsi2>
     c20:	41e00693          	li	a3,1054
     c24:	47a9                	li	a5,10
     c26:	8e89                	sub	a3,a3,a0
     c28:	02a7c863          	blt	a5,a0,c58 <__floatsidf+0x54>
     c2c:	47ad                	li	a5,11
     c2e:	8f89                	sub	a5,a5,a0
     c30:	0555                	addi	a0,a0,21
     c32:	00a41733          	sll	a4,s0,a0
     c36:	00f457b3          	srl	a5,s0,a5
     c3a:	8526                	mv	a0,s1
     c3c:	07b2                	slli	a5,a5,0xc
     c3e:	40a2                	lw	ra,8(sp)
     c40:	4412                	lw	s0,4(sp)
     c42:	83b1                	srli	a5,a5,0xc
     c44:	06d2                	slli	a3,a3,0x14
     c46:	057e                	slli	a0,a0,0x1f
     c48:	8edd                	or	a3,a3,a5
     c4a:	00a6e7b3          	or	a5,a3,a0
     c4e:	4482                	lw	s1,0(sp)
     c50:	853a                	mv	a0,a4
     c52:	85be                	mv	a1,a5
     c54:	0131                	addi	sp,sp,12
     c56:	8082                	ret
     c58:	1555                	addi	a0,a0,-11
     c5a:	00a417b3          	sll	a5,s0,a0
     c5e:	8526                	mv	a0,s1
     c60:	4701                	li	a4,0
     c62:	bfe9                	j	c3c <__floatsidf+0x38>
     c64:	4681                	li	a3,0
     c66:	4781                	li	a5,0
     c68:	bfe5                	j	c60 <__floatsidf+0x5c>

00000c6a <__floatunsidf>:
     c6a:	1151                	addi	sp,sp,-12
     c6c:	c222                	sw	s0,4(sp)
     c6e:	c406                	sw	ra,8(sp)
     c70:	842a                	mv	s0,a0
     c72:	cd1d                	beqz	a0,cb0 <__floatunsidf+0x46>
     c74:	28e9                	jal	d4e <__clzsi2>
     c76:	41e00713          	li	a4,1054
     c7a:	47a9                	li	a5,10
     c7c:	8f09                	sub	a4,a4,a0
     c7e:	02a7c463          	blt	a5,a0,ca6 <__floatunsidf+0x3c>
     c82:	47ad                	li	a5,11
     c84:	8f89                	sub	a5,a5,a0
     c86:	0555                	addi	a0,a0,21
     c88:	00f457b3          	srl	a5,s0,a5
     c8c:	00a41433          	sll	s0,s0,a0
     c90:	40a2                	lw	ra,8(sp)
     c92:	8522                	mv	a0,s0
     c94:	07b2                	slli	a5,a5,0xc
     c96:	4412                	lw	s0,4(sp)
     c98:	0752                	slli	a4,a4,0x14
     c9a:	83b1                	srli	a5,a5,0xc
     c9c:	00f766b3          	or	a3,a4,a5
     ca0:	85b6                	mv	a1,a3
     ca2:	0131                	addi	sp,sp,12
     ca4:	8082                	ret
     ca6:	1555                	addi	a0,a0,-11
     ca8:	00a417b3          	sll	a5,s0,a0
     cac:	4401                	li	s0,0
     cae:	b7cd                	j	c90 <__floatunsidf+0x26>
     cb0:	4781                	li	a5,0
     cb2:	4701                	li	a4,0
     cb4:	bff1                	j	c90 <__floatunsidf+0x26>
	...

00000cb8 <__mulsi3>:
     cb8:	862a                	mv	a2,a0
     cba:	4501                	li	a0,0
     cbc:	0015f693          	andi	a3,a1,1
     cc0:	c291                	beqz	a3,cc4 <__mulsi3+0xc>
     cc2:	9532                	add	a0,a0,a2
     cc4:	8185                	srli	a1,a1,0x1
     cc6:	0606                	slli	a2,a2,0x1
     cc8:	f9f5                	bnez	a1,cbc <__mulsi3+0x4>
     cca:	8082                	ret
     ccc:	0000                	unimp
	...

00000cd0 <__divsi3>:
     cd0:	02054e63          	bltz	a0,d0c <__umodsi3+0x8>
     cd4:	0405c363          	bltz	a1,d1a <__umodsi3+0x16>

00000cd8 <__hidden___udivsi3>:
     cd8:	862e                	mv	a2,a1
     cda:	85aa                	mv	a1,a0
     cdc:	557d                	li	a0,-1
     cde:	c215                	beqz	a2,d02 <__hidden___udivsi3+0x2a>
     ce0:	4685                	li	a3,1
     ce2:	00b67863          	bgeu	a2,a1,cf2 <__hidden___udivsi3+0x1a>
     ce6:	00c05663          	blez	a2,cf2 <__hidden___udivsi3+0x1a>
     cea:	0606                	slli	a2,a2,0x1
     cec:	0686                	slli	a3,a3,0x1
     cee:	feb66ce3          	bltu	a2,a1,ce6 <__hidden___udivsi3+0xe>
     cf2:	4501                	li	a0,0
     cf4:	00c5e463          	bltu	a1,a2,cfc <__hidden___udivsi3+0x24>
     cf8:	8d91                	sub	a1,a1,a2
     cfa:	8d55                	or	a0,a0,a3
     cfc:	8285                	srli	a3,a3,0x1
     cfe:	8205                	srli	a2,a2,0x1
     d00:	faf5                	bnez	a3,cf4 <__hidden___udivsi3+0x1c>
     d02:	8082                	ret

00000d04 <__umodsi3>:
     d04:	8286                	mv	t0,ra
     d06:	3fc9                	jal	cd8 <__hidden___udivsi3>
     d08:	852e                	mv	a0,a1
     d0a:	8282                	jr	t0
     d0c:	40a00533          	neg	a0,a0
     d10:	00b04763          	bgtz	a1,d1e <__umodsi3+0x1a>
     d14:	40b005b3          	neg	a1,a1
     d18:	b7c1                	j	cd8 <__hidden___udivsi3>
     d1a:	40b005b3          	neg	a1,a1
     d1e:	8286                	mv	t0,ra
     d20:	3f65                	jal	cd8 <__hidden___udivsi3>
     d22:	40a00533          	neg	a0,a0
     d26:	8282                	jr	t0

00000d28 <__modsi3>:
     d28:	8286                	mv	t0,ra
     d2a:	0005c763          	bltz	a1,d38 <__modsi3+0x10>
     d2e:	00054963          	bltz	a0,d40 <__modsi3+0x18>
     d32:	375d                	jal	cd8 <__hidden___udivsi3>
     d34:	852e                	mv	a0,a1
     d36:	8282                	jr	t0
     d38:	40b005b3          	neg	a1,a1
     d3c:	fe055be3          	bgez	a0,d32 <__modsi3+0xa>
     d40:	40a00533          	neg	a0,a0
     d44:	3f51                	jal	cd8 <__hidden___udivsi3>
     d46:	40b00533          	neg	a0,a1
     d4a:	8282                	jr	t0
	...

00000d4e <__clzsi2>:
     d4e:	67c1                	lui	a5,0x10
     d50:	02f57563          	bgeu	a0,a5,d7a <__clzsi2+0x2c>
     d54:	10053793          	sltiu	a5,a0,256
     d58:	0017c793          	xori	a5,a5,1
     d5c:	078e                	slli	a5,a5,0x3
     d5e:	670d                	lui	a4,0x3
     d60:	02000693          	li	a3,32
     d64:	8e9d                	sub	a3,a3,a5
     d66:	00f55533          	srl	a0,a0,a5
     d6a:	2a470793          	addi	a5,a4,676 # 32a4 <__clz_tab>
     d6e:	97aa                	add	a5,a5,a0
     d70:	0007c503          	lbu	a0,0(a5) # 10000 <lib_i2c.c.bdeb3654+0x87d5>
     d74:	40a68533          	sub	a0,a3,a0
     d78:	8082                	ret
     d7a:	01000737          	lui	a4,0x1000
     d7e:	47c1                	li	a5,16
     d80:	fce56fe3          	bltu	a0,a4,d5e <__clzsi2+0x10>
     d84:	47e1                	li	a5,24
     d86:	bfe1                	j	d5e <__clzsi2+0x10>

00000d88 <mini_pad>:
{
     d88:	1131                	addi	sp,sp,-20
     d8a:	c426                	sw	s1,8(sp)
     d8c:	c806                	sw	ra,16(sp)
     d8e:	c622                	sw	s0,12(sp)
     d90:	84ae                	mv	s1,a1
     d92:	87aa                	mv	a5,a0
     d94:	85b2                	mv	a1,a2
	int overflow = 0;
     d96:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     d98:	cab5                	beqz	a3,e0c <mini_pad+0x84>
	if(len > pad_to) {
     d9a:	0096d463          	bge	a3,s1,da2 <mini_pad+0x1a>
     d9e:	84b6                	mv	s1,a3
		overflow = 1;
     da0:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     da2:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     da6:	00045363          	bgez	s0,dac <mini_pad+0x24>
     daa:	4401                	li	s0,0
     dac:	8622                	mv	a2,s0
     dae:	853a                	mv	a0,a4
     db0:	c23e                	sw	a5,4(sp)
     db2:	c01a                	sw	t1,0(sp)
     db4:	6a3000ef          	jal	ra,1c56 <memset>
     db8:	4302                	lw	t1,0(sp)
     dba:	4792                	lw	a5,4(sp)
     dbc:	872a                	mv	a4,a0
     dbe:	008506b3          	add	a3,a0,s0
     dc2:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     dc4:	40c485b3          	sub	a1,s1,a2
     dc8:	04b04463          	bgtz	a1,e10 <mini_pad+0x88>
     dcc:	0004d363          	bgez	s1,dd2 <mini_pad+0x4a>
     dd0:	4481                	li	s1,0
     dd2:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     dd6:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     dda:	02030463          	beqz	t1,e02 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     dde:	02c77263          	bgeu	a4,a2,e02 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     de2:	02a00793          	li	a5,42
     de6:	fef60fa3          	sb	a5,-1(a2)
     dea:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     dee:	00d77a63          	bgeu	a4,a3,e02 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     df2:	fef60f23          	sb	a5,-2(a2)
     df6:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     dfa:	00d77463          	bgeu	a4,a3,e02 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     dfe:	fef60ea3          	sb	a5,-3(a2)
}
     e02:	40c2                	lw	ra,16(sp)
     e04:	4432                	lw	s0,12(sp)
     e06:	44a2                	lw	s1,8(sp)
     e08:	0151                	addi	sp,sp,20
     e0a:	8082                	ret
	if(pad_to == 0) pad_to = len;
     e0c:	86a6                	mv	a3,s1
     e0e:	bf51                	j	da2 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     e10:	00c785b3          	add	a1,a5,a2
     e14:	0005c503          	lbu	a0,0(a1)
     e18:	00c685b3          	add	a1,a3,a2
     e1c:	0605                	addi	a2,a2,1
     e1e:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     e22:	b74d                	j	dc4 <mini_pad+0x3c>

00000e24 <_puts>:
{
     e24:	832a                	mv	t1,a0
     e26:	852e                	mv	a0,a1
	if(!buf) return len;
     e28:	ce01                	beqz	a2,e40 <_puts+0x1c>
	char * p0 = b->buffer;
     e2a:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     e2e:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     e30:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     e32:	00a74863          	blt	a4,a0,e42 <_puts+0x1e>
	*(b->pbuffer) = 0;
     e36:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     e3a:	4248                	lw	a0,4(a2)
     e3c:	40550533          	sub	a0,a0,t0
}
     e40:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     e42:	4614                	lw	a3,8(a2)
     e44:	fff68593          	addi	a1,a3,-1 # 7fffff <lib_i2c.c.bdeb3654+0x7f87d4>
     e48:	4214                	lw	a3,0(a2)
     e4a:	96ae                	add	a3,a3,a1
     e4c:	fed785e3          	beq	a5,a3,e36 <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     e50:	00178693          	addi	a3,a5,1
     e54:	c254                	sw	a3,4(a2)
     e56:	00e306b3          	add	a3,t1,a4
     e5a:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     e5e:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     e60:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     e64:	b7f1                	j	e30 <_puts+0xc>

00000e66 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     e66:	e0000737          	lui	a4,0xe0000
     e6a:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     e6e:	0f470693          	addi	a3,a4,244
     e72:	0807f793          	andi	a5,a5,128
     e76:	fbf5                	bnez	a5,e6a <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     e78:	783027b7          	lui	a5,0x78302
     e7c:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     e80:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     e82:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     e84:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     e88:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     e8a:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     e8c:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     e90:	0807f793          	andi	a5,a5,128
     e94:	ffe5                	bnez	a5,e8c <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     e96:	00e557b3          	srl	a5,a0,a4
     e9a:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     e9e:	03000793          	li	a5,48
     ea2:	00d35463          	bge	t1,a3,eaa <PrintHex+0x44>
     ea6:	05700793          	li	a5,87
     eaa:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     eac:	07a2                	slli	a5,a5,0x8
     eae:	0857e793          	ori	a5,a5,133
     eb2:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     eb6:	1771                	addi	a4,a4,-4
     eb8:	fcb71ae3          	bne	a4,a1,e8c <PrintHex+0x26>
}
     ebc:	8082                	ret

00000ebe <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     ebe:	e000f7b7          	lui	a5,0xe000f
     ec2:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     ec4:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     ec8:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     eca:	471c                	lw	a5,8(a4)
     ecc:	8f89                	sub	a5,a5,a0
     ece:	fe07cee3          	bltz	a5,eca <DelaySysTick+0xc>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     ed2:	8082                	ret

00000ed4 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     ed4:	1101                	addi	sp,sp,-32
     ed6:	ce06                	sw	ra,28(sp)
     ed8:	cc22                	sw	s0,24(sp)
     eda:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     edc:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     ede:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     ee0:	00055763          	bgez	a0,eee <mini_itoa.part.0+0x1a>
     ee4:	e689                	bnez	a3,eee <mini_itoa.part.0+0x1a>
		negative = 1;
     ee6:	4785                	li	a5,1
		value = -value;
     ee8:	40a00333          	neg	t1,a0
		negative = 1;
     eec:	c03e                	sw	a5,0(sp)
     eee:	06100413          	li	s0,97
     ef2:	c219                	beqz	a2,ef8 <mini_itoa.part.0+0x24>
     ef4:	04100413          	li	s0,65
	int	negative = 0;
     ef8:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     efa:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     efc:	851a                	mv	a0,t1
     efe:	c83a                	sw	a4,16(sp)
     f00:	c21a                	sw	t1,4(sp)
     f02:	c62e                	sw	a1,12(sp)
     f04:	c41a                	sw	t1,8(sp)
     f06:	3bfd                	jal	d04 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     f08:	47a5                	li	a5,9
     f0a:	4322                	lw	t1,8(sp)
     f0c:	45b2                	lw	a1,12(sp)
     f0e:	4742                	lw	a4,16(sp)
     f10:	0ff57693          	andi	a3,a0,255
     f14:	06a7e163          	bltu	a5,a0,f76 <mini_itoa.part.0+0xa2>
     f18:	03068693          	addi	a3,a3,48
     f1c:	0ff6f693          	andi	a3,a3,255
     f20:	00148793          	addi	a5,s1,1
     f24:	00d48023          	sb	a3,0(s1)
		value /= radix;
     f28:	851a                	mv	a0,t1
     f2a:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     f2c:	c63e                	sw	a5,12(sp)
		value /= radix;
     f2e:	c42e                	sw	a1,8(sp)
     f30:	3365                	jal	cd8 <__hidden___udivsi3>
	} while (value > 0);
     f32:	4692                	lw	a3,4(sp)
     f34:	45a2                	lw	a1,8(sp)
     f36:	47b2                	lw	a5,12(sp)
     f38:	4742                	lw	a4,16(sp)
		value /= radix;
     f3a:	832a                	mv	t1,a0
	} while (value > 0);
     f3c:	02b6fb63          	bgeu	a3,a1,f72 <mini_itoa.part.0+0x9e>
	if (negative)
     f40:	4682                	lw	a3,0(sp)
     f42:	c699                	beqz	a3,f50 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     f44:	02d00693          	li	a3,45
     f48:	00d78023          	sb	a3,0(a5) # e000f000 <_eusrstack+0xc000e800>
     f4c:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     f50:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     f54:	01f55693          	srli	a3,a0,0x1f
     f58:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     f5a:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     f5e:	8685                	srai	a3,a3,0x1
     f60:	4601                	li	a2,0
     f62:	17fd                	addi	a5,a5,-1
     f64:	00d64b63          	blt	a2,a3,f7a <mini_itoa.part.0+0xa6>
}
     f68:	40f2                	lw	ra,28(sp)
     f6a:	4462                	lw	s0,24(sp)
     f6c:	44d2                	lw	s1,20(sp)
     f6e:	6105                	addi	sp,sp,32
     f70:	8082                	ret
	} while (value > 0);
     f72:	84be                	mv	s1,a5
     f74:	b761                	j	efc <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     f76:	96a2                	add	a3,a3,s0
     f78:	b755                	j	f1c <mini_itoa.part.0+0x48>
		char j = buffer[i];
     f7a:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     f7e:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     f82:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     f86:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     f88:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     f8c:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     f90:	bfc9                	j	f62 <mini_itoa.part.0+0x8e>

00000f92 <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     f92:	400057b7          	lui	a5,0x40005
     f96:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     f9a:	40078793          	addi	a5,a5,1024
     f9e:	10077713          	andi	a4,a4,256
     fa2:	cf09                	beqz	a4,fbc <i2c_error+0x2a>
     fa4:	0147d703          	lhu	a4,20(a5)
     fa8:	4505                	li	a0,1
     faa:	0742                	slli	a4,a4,0x10
     fac:	8341                	srli	a4,a4,0x10
     fae:	eff77713          	andi	a4,a4,-257
     fb2:	0742                	slli	a4,a4,0x10
     fb4:	8341                	srli	a4,a4,0x10
     fb6:	00e79a23          	sh	a4,20(a5)
     fba:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     fbc:	0147d703          	lhu	a4,20(a5)
     fc0:	40077713          	andi	a4,a4,1024
     fc4:	cf09                	beqz	a4,fde <i2c_error+0x4c>
     fc6:	0147d703          	lhu	a4,20(a5)
     fca:	4509                	li	a0,2
     fcc:	0742                	slli	a4,a4,0x10
     fce:	8341                	srli	a4,a4,0x10
     fd0:	bff77713          	andi	a4,a4,-1025
     fd4:	0742                	slli	a4,a4,0x10
     fd6:	8341                	srli	a4,a4,0x10
     fd8:	00e79a23          	sh	a4,20(a5)
     fdc:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     fde:	0147d703          	lhu	a4,20(a5)
     fe2:	20077713          	andi	a4,a4,512
     fe6:	cf09                	beqz	a4,1000 <i2c_error+0x6e>
     fe8:	0147d703          	lhu	a4,20(a5)
     fec:	450d                	li	a0,3
     fee:	0742                	slli	a4,a4,0x10
     ff0:	8341                	srli	a4,a4,0x10
     ff2:	dff77713          	andi	a4,a4,-513
     ff6:	0742                	slli	a4,a4,0x10
     ff8:	8341                	srli	a4,a4,0x10
     ffa:	00e79a23          	sh	a4,20(a5)
     ffe:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
    1000:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
    1004:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
    1006:	832d                	srli	a4,a4,0xb
    1008:	8b05                	andi	a4,a4,1
    100a:	cf01                	beqz	a4,1022 <i2c_error+0x90>
    100c:	0147d703          	lhu	a4,20(a5)
    1010:	76fd                	lui	a3,0xfffff
    1012:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
    1016:	0742                	slli	a4,a4,0x10
    1018:	8341                	srli	a4,a4,0x10
    101a:	8f75                	and	a4,a4,a3
    101c:	00e79a23          	sh	a4,20(a5)
    1020:	4511                	li	a0,4
}
    1022:	8082                	ret

00001024 <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
    1024:	415c                	lw	a5,4(a0)
    1026:	e7b1                	bnez	a5,1072 <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
    1028:	00855783          	lhu	a5,8(a0)
    102c:	40005737          	lui	a4,0x40005
    1030:	0786                	slli	a5,a5,0x1
    1032:	0fe7f793          	andi	a5,a5,254
    1036:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
    103a:	6789                	lui	a5,0x2
    103c:	71078793          	addi	a5,a5,1808 # 2710 <main+0x900>
	return (status & status_mask) == status_mask; 
    1040:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
    1044:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
    1048:	4501                	li	a0,0
    104a:	c2c18693          	addi	a3,gp,-980 # 20000028 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    104e:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
    1052:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.bdeb3654+0x68857>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1056:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
    105a:	01071593          	slli	a1,a4,0x10
    105e:	41835703          	lhu	a4,1048(t1)
    1062:	81c1                	srli	a1,a1,0x10
    1064:	0742                	slli	a4,a4,0x10
    1066:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
    1068:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
    106a:	00c71663          	bne	a4,a2,1076 <i2c_send_addr_write+0x52>
    106e:	c111                	beqz	a0,1072 <i2c_send_addr_write+0x4e>
    1070:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
    1072:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
    1074:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
    1076:	17fd                	addi	a5,a5,-1
    1078:	4505                	li	a0,1
    107a:	fff1                	bnez	a5,1056 <i2c_send_addr_write+0x32>
{
    107c:	1151                	addi	sp,sp,-12
    107e:	c406                	sw	ra,8(sp)
    1080:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
    1084:	3739                	jal	f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    1086:	e111                	bnez	a0,108a <i2c_send_addr_write+0x66>
    1088:	4515                	li	a0,5
}
    108a:	40a2                	lw	ra,8(sp)
    108c:	0131                	addi	sp,sp,12
    108e:	8082                	ret

00001090 <i2c_send_addr_read>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_read(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;

	if(dev->type == I2C_ADDR_7BIT)
    1090:	415c                	lw	a5,4(a0)
    1092:	e7b9                	bnez	a5,10e0 <i2c_send_addr_read+0x50>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) | 0x01;
    1094:	00855783          	lhu	a5,8(a0)
    1098:	40005737          	lui	a4,0x40005
    109c:	0786                	slli	a5,a5,0x1
    109e:	0017e793          	ori	a5,a5,1
    10a2:	07c2                	slli	a5,a5,0x10
    10a4:	83c1                	srli	a5,a5,0x10
    10a6:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
    10aa:	6789                	lui	a5,0x2
    10ac:	71078793          	addi	a5,a5,1808 # 2710 <main+0x900>
	return (status & status_mask) == status_mask; 
    10b0:	00030637          	lui	a2,0x30
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
    10b4:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
    10b8:	4501                	li	a0,0
    10ba:	c2c18693          	addi	a3,gp,-980 # 20000028 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    10be:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
    10c2:	0609                	addi	a2,a2,2
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    10c4:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
    10c8:	01071593          	slli	a1,a4,0x10
    10cc:	41835703          	lhu	a4,1048(t1)
    10d0:	81c1                	srli	a1,a1,0x10
    10d2:	0742                	slli	a4,a4,0x10
    10d4:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
    10d6:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
    10d8:	00c71663          	bne	a4,a2,10e4 <i2c_send_addr_read+0x54>
    10dc:	c111                	beqz	a0,10e0 <i2c_send_addr_read+0x50>
    10de:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
    10e0:	4501                	li	a0,0
	}
	return i2c_ret;
}
    10e2:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
    10e4:	17fd                	addi	a5,a5,-1
    10e6:	4505                	li	a0,1
    10e8:	fff1                	bnez	a5,10c4 <i2c_send_addr_read+0x34>
{
    10ea:	1151                	addi	sp,sp,-12
    10ec:	c406                	sw	ra,8(sp)
    10ee:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
    10f2:	3545                	jal	f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    10f4:	e111                	bnez	a0,10f8 <i2c_send_addr_read+0x68>
    10f6:	4515                	li	a0,5
}
    10f8:	40a2                	lw	ra,8(sp)
    10fa:	0131                	addi	sp,sp,12
    10fc:	8082                	ret

000010fe <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
    10fe:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1100:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
    1102:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1104:	71078793          	addi	a5,a5,1808 # 2710 <main+0x900>
    1108:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
{
    110c:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
    110e:	c002                	sw	zero,0(sp)
    1110:	c202                	sw	zero,4(sp)
    1112:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1116:	4601                	li	a2,0
    1118:	c2c18713          	addi	a4,gp,-980 # 20000028 <_i2c_timeout>
    111c:	400055b7          	lui	a1,0x40005
    1120:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
    1124:	8a89                	andi	a3,a3,2
    1126:	e689                	bnez	a3,1130 <i2c_ping+0x32>
    1128:	c211                	beqz	a2,112c <i2c_ping+0x2e>
    112a:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
    112c:	4501                	li	a0,0
    112e:	a809                	j	1140 <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1130:	17fd                	addi	a5,a5,-1
    1132:	4605                	li	a2,1
    1134:	f7f5                	bnez	a5,1120 <i2c_ping+0x22>
    1136:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
    113a:	3da1                	jal	f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    113c:	e111                	bnez	a0,1140 <i2c_ping+0x42>
    113e:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1140:	40005737          	lui	a4,0x40005
    1144:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1148:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    114c:	07c2                	slli	a5,a5,0x10
    114e:	83c1                	srli	a5,a5,0x10
    1150:	1007e793          	ori	a5,a5,256
    1154:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
    1158:	00030737          	lui	a4,0x30
    115c:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    115e:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    1162:	01079693          	slli	a3,a5,0x10
    1166:	4185d783          	lhu	a5,1048(a1)
    116a:	82c1                	srli	a3,a3,0x10
    116c:	07c2                	slli	a5,a5,0x10
    116e:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
    1170:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    1172:	fee796e3          	bne	a5,a4,115e <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
    1176:	e119                	bnez	a0,117c <i2c_ping+0x7e>
    1178:	850a                	mv	a0,sp
    117a:	356d                	jal	1024 <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    117c:	40005737          	lui	a4,0x40005
    1180:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
    1184:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    1186:	07c2                	slli	a5,a5,0x10
    1188:	83c1                	srli	a5,a5,0x10
    118a:	2007e793          	ori	a5,a5,512
    118e:	40f71023          	sh	a5,1024(a4)
}
    1192:	0161                	addi	sp,sp,24
    1194:	8082                	ret

00001196 <i2c_write_raw>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1196:	6789                	lui	a5,0x2
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
                                                    const size_t len)
{
    1198:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    119a:	71078793          	addi	a5,a5,1808 # 2710 <main+0x900>
{
    119e:	c626                	sw	s1,12(sp)
    11a0:	c02e                	sw	a1,0(sp)
    11a2:	c232                	sw	a2,4(sp)
    11a4:	ca06                	sw	ra,20(sp)
    11a6:	c822                	sw	s0,16(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    11a8:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
    11ac:	4601                	li	a2,0
    11ae:	c2c18493          	addi	s1,gp,-980 # 20000028 <_i2c_timeout>
    11b2:	400055b7          	lui	a1,0x40005
    11b6:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
    11ba:	8a89                	andi	a3,a3,2
    11bc:	e6ad                	bnez	a3,1226 <i2c_write_raw+0x90>
    11be:	c211                	beqz	a2,11c2 <i2c_write_raw+0x2c>
    11c0:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    11c2:	400056b7          	lui	a3,0x40005
    11c6:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    11ca:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    11ce:	07c2                	slli	a5,a5,0x10
    11d0:	83c1                	srli	a5,a5,0x10
    11d2:	1007e793          	ori	a5,a5,256
    11d6:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
    11da:	000306b7          	lui	a3,0x30
    11de:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    11e0:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    11e4:	01079613          	slli	a2,a5,0x10
    11e8:	4185d783          	lhu	a5,1048(a1)
    11ec:	8241                	srli	a2,a2,0x10
    11ee:	07c2                	slli	a5,a5,0x10
    11f0:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
    11f2:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    11f4:	fed796e3          	bne	a5,a3,11e0 <i2c_write_raw+0x4a>
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
    11f8:	3535                	jal	1024 <i2c_send_addr_write>
    11fa:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
    11fc:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
    11fe:	e91d                	bnez	a0,1234 <i2c_write_raw+0x9e>
		while(cbyte < len)
    1200:	4792                	lw	a5,4(sp)
    1202:	02f67963          	bgeu	a2,a5,1234 <i2c_write_raw+0x9e>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    1206:	6689                	lui	a3,0x2
    1208:	71068693          	addi	a3,a3,1808 # 2710 <main+0x900>
    120c:	c094                	sw	a3,0(s1)
    120e:	4501                	li	a0,0
    1210:	40005337          	lui	t1,0x40005
    1214:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
    1218:	0805f593          	andi	a1,a1,128
    121c:	c5b9                	beqz	a1,126a <i2c_write_raw+0xd4>
    121e:	c111                	beqz	a0,1222 <i2c_write_raw+0x8c>
    1220:	c094                	sw	a3,0(s1)
    1222:	4501                	li	a0,0
    1224:	a8a9                	j	127e <i2c_write_raw+0xe8>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1226:	17fd                	addi	a5,a5,-1
    1228:	4605                	li	a2,1
    122a:	f7d1                	bnez	a5,11b6 <i2c_write_raw+0x20>
	i2c_err_t i2c_err = i2c_error();
    122c:	339d                	jal	f92 <i2c_error>
    122e:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    1230:	e111                	bnez	a0,1234 <i2c_write_raw+0x9e>
    1232:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    1234:	6689                	lui	a3,0x2
    1236:	71068693          	addi	a3,a3,1808 # 2710 <main+0x900>
	return (status & status_mask) == status_mask; 
    123a:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    123e:	c094                	sw	a3,0(s1)
    1240:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1242:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
    1246:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.bdeb3654+0x68859>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    124a:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
    124e:	01061513          	slli	a0,a2,0x10
    1252:	4182d603          	lhu	a2,1048(t0)
    1256:	8141                	srli	a0,a0,0x10
    1258:	0642                	slli	a2,a2,0x10
    125a:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
    125c:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    125e:	04b61363          	bne	a2,a1,12a4 <i2c_write_raw+0x10e>
    1262:	04030a63          	beqz	t1,12b6 <i2c_write_raw+0x120>
    1266:	c094                	sw	a3,0(s1)
    1268:	a0b9                	j	12b6 <i2c_write_raw+0x120>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    126a:	16fd                	addi	a3,a3,-1
    126c:	4505                	li	a0,1
    126e:	f2dd                	bnez	a3,1214 <i2c_write_raw+0x7e>
    1270:	c432                	sw	a2,8(sp)
    1272:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
    1276:	3b31                	jal	f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    1278:	4622                	lw	a2,8(sp)
    127a:	e111                	bnez	a0,127e <i2c_write_raw+0xe8>
    127c:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
    127e:	4782                	lw	a5,0(sp)
    1280:	00c786b3          	add	a3,a5,a2
    1284:	0006c583          	lbu	a1,0(a3)
			++cbyte;
    1288:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
    128a:	400056b7          	lui	a3,0x40005
    128e:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
    1292:	0ff67613          	andi	a2,a2,255
    1296:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    1298:	e501                	bnez	a0,12a0 <i2c_write_raw+0x10a>
    129a:	39e5                	jal	f92 <i2c_error>
    129c:	4622                	lw	a2,8(sp)
    129e:	d12d                	beqz	a0,1200 <i2c_write_raw+0x6a>
    12a0:	842a                	mv	s0,a0
    12a2:	bf49                	j	1234 <i2c_write_raw+0x9e>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    12a4:	16fd                	addi	a3,a3,-1
    12a6:	4305                	li	t1,1
    12a8:	f2cd                	bnez	a3,124a <i2c_write_raw+0xb4>
    12aa:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
    12ae:	31d5                	jal	f92 <i2c_error>
    12b0:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    12b2:	e111                	bnez	a0,12b6 <i2c_write_raw+0x120>
    12b4:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    12b6:	400056b7          	lui	a3,0x40005
    12ba:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
    12be:	40d2                	lw	ra,20(sp)
    12c0:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    12c2:	0742                	slli	a4,a4,0x10
}
    12c4:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    12c6:	8341                	srli	a4,a4,0x10
    12c8:	20076713          	ori	a4,a4,512
    12cc:	40e69023          	sh	a4,1024(a3)
}
    12d0:	44b2                	lw	s1,12(sp)
    12d2:	0161                	addi	sp,sp,24
    12d4:	8082                	ret

000012d6 <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
    12d6:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
    12d8:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
    12dc:	858a                	mv	a1,sp
    12de:	4609                	li	a2,2
    12e0:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_ssd1306>
uint8_t ssd1306_cmd(uint8_t cmd) {
    12e4:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
    12e6:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
    12ea:	3575                	jal	1196 <i2c_write_raw>
}
    12ec:	40b2                	lw	ra,12(sp)
    12ee:	0ff57513          	andi	a0,a0,255
    12f2:	0141                	addi	sp,sp,16
    12f4:	8082                	ret

000012f6 <i2c_read_reg>:


i2c_err_t i2c_read_reg(const i2c_device_t *dev,     const uint32_t reg,
                                                    uint8_t *buf,
                                                    const size_t len)
{
    12f6:	1101                	addi	sp,sp,-32
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    12f8:	6789                	lui	a5,0x2
{
    12fa:	cc22                	sw	s0,24(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    12fc:	71078793          	addi	a5,a5,1808 # 2710 <main+0x900>
{
    1300:	ca26                	sw	s1,20(sp)
    1302:	c232                	sw	a2,4(sp)
    1304:	84b6                	mv	s1,a3
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1306:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
{
    130a:	ce06                	sw	ra,28(sp)
    130c:	832a                	mv	t1,a0
    130e:	c02e                	sw	a1,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1310:	4681                	li	a3,0
    1312:	c2c18413          	addi	s0,gp,-980 # 20000028 <_i2c_timeout>
    1316:	40005637          	lui	a2,0x40005
    131a:	41865703          	lhu	a4,1048(a2) # 40005418 <_eusrstack+0x20004c18>
    131e:	8b09                	andi	a4,a4,2
    1320:	0e071f63          	bnez	a4,141e <i2c_read_reg+0x128>
    1324:	c291                	beqz	a3,1328 <i2c_read_reg+0x32>
    1326:	c01c                	sw	a5,0(s0)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1328:	40005737          	lui	a4,0x40005
    132c:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1330:	40005637          	lui	a2,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1334:	07c2                	slli	a5,a5,0x10
    1336:	83c1                	srli	a5,a5,0x10
    1338:	1007e793          	ori	a5,a5,256
    133c:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
    1340:	00030737          	lui	a4,0x30
    1344:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1346:	41465783          	lhu	a5,1044(a2) # 40005414 <_eusrstack+0x20004c14>
    134a:	01079693          	slli	a3,a5,0x10
    134e:	41865783          	lhu	a5,1048(a2)
    1352:	82c1                	srli	a3,a3,0x10
    1354:	07c2                	slli	a5,a5,0x10
    1356:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
    1358:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    135a:	fee796e3          	bne	a5,a4,1346 <i2c_read_reg+0x50>
	// Wait for the I2C Bus to be Available
	i2c_err_t i2c_ret = i2c_wait();
	
	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
    135e:	851a                	mv	a0,t1
    1360:	c41a                	sw	t1,8(sp)
    1362:	31c9                	jal	1024 <i2c_send_addr_write>
    1364:	87aa                	mv	a5,a0

	// Send the register byte/s - MSBFirst
	if(i2c_ret == I2C_OK)
    1366:	e571                	bnez	a0,1432 <i2c_read_reg+0x13c>
	{
		for(int8_t b = dev->regb - 1; b >= 0; b--)
    1368:	4322                	lw	t1,8(sp)
    136a:	00a34703          	lbu	a4,10(t1)
    136e:	177d                	addi	a4,a4,-1
    1370:	0762                	slli	a4,a4,0x18
    1372:	8761                	srai	a4,a4,0x18
    1374:	00371693          	slli	a3,a4,0x3
    1378:	0c075d63          	bgez	a4,1452 <i2c_read_reg+0x15c>

	// Enter Read Mode
	if(i2c_ret == I2C_OK)
	{
		// If the message is long enough, enable ACK messages
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
    137c:	4785                	li	a5,1
    137e:	00f48c63          	beq	s1,a5,1396 <i2c_read_reg+0xa0>
    1382:	40005737          	lui	a4,0x40005
    1386:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    138a:	07c2                	slli	a5,a5,0x10
    138c:	83c1                	srli	a5,a5,0x10
    138e:	4007e793          	ori	a5,a5,1024
    1392:	40f71023          	sh	a5,1024(a4)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1396:	40005737          	lui	a4,0x40005
    139a:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    139e:	40005637          	lui	a2,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    13a2:	07c2                	slli	a5,a5,0x10
    13a4:	83c1                	srli	a5,a5,0x10
    13a6:	1007e793          	ori	a5,a5,256
    13aa:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
    13ae:	00030737          	lui	a4,0x30
    13b2:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    13b4:	41465783          	lhu	a5,1044(a2) # 40005414 <_eusrstack+0x20004c14>
    13b8:	01079693          	slli	a3,a5,0x10
    13bc:	41865783          	lhu	a5,1048(a2)
    13c0:	82c1                	srli	a3,a3,0x10
    13c2:	07c2                	slli	a5,a5,0x10
    13c4:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
    13c6:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    13c8:	fee796e3          	bne	a5,a4,13b4 <i2c_read_reg+0xbe>

		// Send a Repeated START and send the Read Address
		i2c_start();
		i2c_ret = i2c_send_addr_read(dev);
    13cc:	851a                	mv	a0,t1
    13ce:	31c9                	jal	1090 <i2c_send_addr_read>
	{
		uint8_t cbyte = 0;
		while(cbyte < len)
		{
			// If this is the last byte, send the NACK Bit
			if(cbyte == len - 1) I2C1->CTLR1 &= ~I2C_CTLR1_ACK;
    13d0:	fff48713          	addi	a4,s1,-1
    13d4:	c03a                	sw	a4,0(sp)
		i2c_ret = i2c_send_addr_read(dev);
    13d6:	87aa                	mv	a5,a0
		uint8_t cbyte = 0;
    13d8:	4681                	li	a3,0
	if(i2c_ret == I2C_OK)
    13da:	ed21                	bnez	a0,1432 <i2c_read_reg+0x13c>
		while(cbyte < len)
    13dc:	0496fb63          	bgeu	a3,s1,1432 <i2c_read_reg+0x13c>
			if(cbyte == len - 1) I2C1->CTLR1 &= ~I2C_CTLR1_ACK;
    13e0:	4702                	lw	a4,0(sp)
    13e2:	00d71e63          	bne	a4,a3,13fe <i2c_read_reg+0x108>
    13e6:	40005637          	lui	a2,0x40005
    13ea:	40065703          	lhu	a4,1024(a2) # 40005400 <_eusrstack+0x20004c00>
    13ee:	0742                	slli	a4,a4,0x10
    13f0:	8341                	srli	a4,a4,0x10
    13f2:	bff77713          	andi	a4,a4,-1025
    13f6:	0742                	slli	a4,a4,0x10
    13f8:	8341                	srli	a4,a4,0x10
    13fa:	40e61023          	sh	a4,1024(a2)

			// Wait until there is data (Read Register Not Empty)
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
    13fe:	6709                	lui	a4,0x2
    1400:	71070713          	addi	a4,a4,1808 # 2710 <main+0x900>
    1404:	c018                	sw	a4,0(s0)
    1406:	4581                	li	a1,0
    1408:	40005537          	lui	a0,0x40005
    140c:	41455603          	lhu	a2,1044(a0) # 40005414 <_eusrstack+0x20004c14>
    1410:	04067613          	andi	a2,a2,64
    1414:	ca41                	beqz	a2,14a4 <i2c_read_reg+0x1ae>
    1416:	c191                	beqz	a1,141a <i2c_read_reg+0x124>
    1418:	c018                	sw	a4,0(s0)
    141a:	4501                	li	a0,0
    141c:	a045                	j	14bc <i2c_read_reg+0x1c6>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    141e:	17fd                	addi	a5,a5,-1
    1420:	4685                	li	a3,1
    1422:	ee079ce3          	bnez	a5,131a <i2c_read_reg+0x24>
    1426:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    142a:	36a5                	jal	f92 <i2c_error>
    142c:	87aa                	mv	a5,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    142e:	e111                	bnez	a0,1432 <i2c_read_reg+0x13c>
    1430:	4795                	li	a5,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    1432:	400056b7          	lui	a3,0x40005
    1436:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
    143a:	40f2                	lw	ra,28(sp)
    143c:	4462                	lw	s0,24(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    143e:	0742                	slli	a4,a4,0x10
    1440:	8341                	srli	a4,a4,0x10
    1442:	20076713          	ori	a4,a4,512
    1446:	40e69023          	sh	a4,1024(a3)
}
    144a:	44d2                	lw	s1,20(sp)
    144c:	853e                	mv	a0,a5
    144e:	6105                	addi	sp,sp,32
    1450:	8082                	ret
			uint8_t reg_byte = (reg >> (8 * b)) & 0xFF;
    1452:	4782                	lw	a5,0(sp)
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    1454:	4581                	li	a1,0
    1456:	40005537          	lui	a0,0x40005
			uint8_t reg_byte = (reg >> (8 * b)) & 0xFF;
    145a:	00d7d633          	srl	a2,a5,a3
			I2C1->DATAR = reg_byte;
    145e:	0ff67613          	andi	a2,a2,255
    1462:	400057b7          	lui	a5,0x40005
    1466:	40c79823          	sh	a2,1040(a5) # 40005410 <_eusrstack+0x20004c10>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    146a:	6789                	lui	a5,0x2
    146c:	71078793          	addi	a5,a5,1808 # 2710 <main+0x900>
    1470:	c01c                	sw	a5,0(s0)
    1472:	41455603          	lhu	a2,1044(a0) # 40005414 <_eusrstack+0x20004c14>
    1476:	08067613          	andi	a2,a2,128
    147a:	c20d                	beqz	a2,149c <i2c_read_reg+0x1a6>
    147c:	c191                	beqz	a1,1480 <i2c_read_reg+0x18a>
    147e:	c01c                	sw	a5,0(s0)
    1480:	c81a                	sw	t1,16(sp)
    1482:	c636                	sw	a3,12(sp)
    1484:	c43a                	sw	a4,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    1486:	3631                	jal	f92 <i2c_error>
    1488:	46b2                	lw	a3,12(sp)
    148a:	4722                	lw	a4,8(sp)
    148c:	4342                	lw	t1,16(sp)
    148e:	87aa                	mv	a5,a0
    1490:	16e1                	addi	a3,a3,-8
    1492:	f145                	bnez	a0,1432 <i2c_read_reg+0x13c>
		for(int8_t b = dev->regb - 1; b >= 0; b--)
    1494:	177d                	addi	a4,a4,-1
    1496:	0762                	slli	a4,a4,0x18
    1498:	8761                	srai	a4,a4,0x18
    149a:	bdf9                	j	1378 <i2c_read_reg+0x82>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    149c:	17fd                	addi	a5,a5,-1
    149e:	4585                	li	a1,1
    14a0:	fbe9                	bnez	a5,1472 <i2c_read_reg+0x17c>
    14a2:	b751                	j	1426 <i2c_read_reg+0x130>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
    14a4:	177d                	addi	a4,a4,-1
    14a6:	4585                	li	a1,1
    14a8:	f335                	bnez	a4,140c <i2c_read_reg+0x116>
    14aa:	c63e                	sw	a5,12(sp)
    14ac:	c436                	sw	a3,8(sp)
    14ae:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    14b2:	34c5                	jal	f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    14b4:	46a2                	lw	a3,8(sp)
    14b6:	47b2                	lw	a5,12(sp)
    14b8:	e111                	bnez	a0,14bc <i2c_read_reg+0x1c6>
    14ba:	4515                	li	a0,5
    14bc:	c63e                	sw	a5,12(sp)
			buf[cbyte] = I2C1->DATAR;
    14be:	4792                	lw	a5,4(sp)
    14c0:	40005737          	lui	a4,0x40005
    14c4:	41075603          	lhu	a2,1040(a4) # 40005410 <_eusrstack+0x20004c10>
    14c8:	00d78733          	add	a4,a5,a3
			++cbyte;
    14cc:	0685                	addi	a3,a3,1
    14ce:	0ff6f693          	andi	a3,a3,255
			buf[cbyte] = I2C1->DATAR;
    14d2:	00c70023          	sb	a2,0(a4)
			++cbyte;
    14d6:	c436                	sw	a3,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    14d8:	e511                	bnez	a0,14e4 <i2c_read_reg+0x1ee>
    14da:	3c65                	jal	f92 <i2c_error>
    14dc:	46a2                	lw	a3,8(sp)
    14de:	47b2                	lw	a5,12(sp)
    14e0:	ee050ee3          	beqz	a0,13dc <i2c_read_reg+0xe6>
    14e4:	87aa                	mv	a5,a0
    14e6:	b7b1                	j	1432 <i2c_read_reg+0x13c>

000014e8 <i2c_write_reg>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    14e8:	6789                	lui	a5,0x2


i2c_err_t i2c_write_reg(const i2c_device_t *dev,    const uint32_t reg,
                                                    const uint8_t *buf,
                                                    const size_t len)
{
    14ea:	1101                	addi	sp,sp,-32
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    14ec:	71078793          	addi	a5,a5,1808 # 2710 <main+0x900>
{
    14f0:	ca26                	sw	s1,20(sp)
    14f2:	c02e                	sw	a1,0(sp)
    14f4:	c232                	sw	a2,4(sp)
    14f6:	ce06                	sw	ra,28(sp)
    14f8:	cc22                	sw	s0,24(sp)
    14fa:	832a                	mv	t1,a0
    14fc:	c436                	sw	a3,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    14fe:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
    1502:	4601                	li	a2,0
    1504:	c2c18493          	addi	s1,gp,-980 # 20000028 <_i2c_timeout>
    1508:	400055b7          	lui	a1,0x40005
    150c:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
    1510:	8a89                	andi	a3,a3,2
    1512:	e2c9                	bnez	a3,1594 <i2c_write_reg+0xac>
    1514:	c211                	beqz	a2,1518 <i2c_write_reg+0x30>
    1516:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1518:	400056b7          	lui	a3,0x40005
    151c:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1520:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1524:	07c2                	slli	a5,a5,0x10
    1526:	83c1                	srli	a5,a5,0x10
    1528:	1007e793          	ori	a5,a5,256
    152c:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
    1530:	000306b7          	lui	a3,0x30
    1534:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1536:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    153a:	01079613          	slli	a2,a5,0x10
    153e:	4185d783          	lhu	a5,1048(a1)
    1542:	8241                	srli	a2,a2,0x10
    1544:	07c2                	slli	a5,a5,0x10
    1546:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
    1548:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    154a:	fed796e3          	bne	a5,a3,1536 <i2c_write_reg+0x4e>
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
    154e:	851a                	mv	a0,t1
    1550:	c61a                	sw	t1,12(sp)
    1552:	3cc9                	jal	1024 <i2c_send_addr_write>
    1554:	842a                	mv	s0,a0

	// Send the register byte/s - MSBFirst
	if(i2c_ret == I2C_OK)
    1556:	e921                	bnez	a0,15a6 <i2c_write_reg+0xbe>
	{
		for(int8_t b = dev->regb - 1; b >= 0; b--)
    1558:	4332                	lw	t1,12(sp)
    155a:	00a34683          	lbu	a3,10(t1)
    155e:	16fd                	addi	a3,a3,-1
    1560:	06e2                	slli	a3,a3,0x18
    1562:	86e1                	srai	a3,a3,0x18
    1564:	00369593          	slli	a1,a3,0x3
    1568:	0606da63          	bgez	a3,15dc <i2c_write_reg+0xf4>
	}

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
    156c:	4601                	li	a2,0
		while(cbyte < len)
    156e:	47a2                	lw	a5,8(sp)
    1570:	02f67b63          	bgeu	a2,a5,15a6 <i2c_write_reg+0xbe>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    1574:	6689                	lui	a3,0x2
    1576:	71068693          	addi	a3,a3,1808 # 2710 <main+0x900>
    157a:	c094                	sw	a3,0(s1)
    157c:	4501                	li	a0,0
    157e:	40005337          	lui	t1,0x40005
    1582:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
    1586:	0805f593          	andi	a1,a1,128
    158a:	c1c5                	beqz	a1,162a <i2c_write_reg+0x142>
    158c:	c111                	beqz	a0,1590 <i2c_write_reg+0xa8>
    158e:	c094                	sw	a3,0(s1)
    1590:	4501                	li	a0,0
    1592:	a07d                	j	1640 <i2c_write_reg+0x158>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1594:	17fd                	addi	a5,a5,-1
    1596:	4605                	li	a2,1
    1598:	fbb5                	bnez	a5,150c <i2c_write_reg+0x24>
    159a:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
    159e:	3ad5                	jal	f92 <i2c_error>
    15a0:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    15a2:	e111                	bnez	a0,15a6 <i2c_write_reg+0xbe>
    15a4:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    15a6:	6689                	lui	a3,0x2
    15a8:	71068693          	addi	a3,a3,1808 # 2710 <main+0x900>
	return (status & status_mask) == status_mask; 
    15ac:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    15b0:	c094                	sw	a3,0(s1)
    15b2:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    15b4:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
    15b8:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.bdeb3654+0x68859>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    15bc:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
    15c0:	01061513          	slli	a0,a2,0x10
    15c4:	4182d603          	lhu	a2,1048(t0)
    15c8:	8141                	srli	a0,a0,0x10
    15ca:	0642                	slli	a2,a2,0x10
    15cc:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
    15ce:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    15d0:	08b61d63          	bne	a2,a1,166a <i2c_write_reg+0x182>
    15d4:	0a030563          	beqz	t1,167e <i2c_write_reg+0x196>
    15d8:	c094                	sw	a3,0(s1)
    15da:	a055                	j	167e <i2c_write_reg+0x196>
			uint8_t reg_byte = (reg >> (8 * b)) & 0xFF;
    15dc:	4782                	lw	a5,0(sp)
			I2C1->DATAR = reg_byte;
    15de:	40005637          	lui	a2,0x40005
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    15e2:	4301                	li	t1,0
			uint8_t reg_byte = (reg >> (8 * b)) & 0xFF;
    15e4:	00b7d533          	srl	a0,a5,a1
			I2C1->DATAR = reg_byte;
    15e8:	0ff57513          	andi	a0,a0,255
    15ec:	40a61823          	sh	a0,1040(a2) # 40005410 <_eusrstack+0x20004c10>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    15f0:	6609                	lui	a2,0x2
    15f2:	71060613          	addi	a2,a2,1808 # 2710 <main+0x900>
    15f6:	c090                	sw	a2,0(s1)
    15f8:	400052b7          	lui	t0,0x40005
    15fc:	4142d503          	lhu	a0,1044(t0) # 40005414 <_eusrstack+0x20004c14>
    1600:	08057513          	andi	a0,a0,128
    1604:	cd19                	beqz	a0,1622 <i2c_write_reg+0x13a>
    1606:	00030363          	beqz	t1,160c <i2c_write_reg+0x124>
    160a:	c090                	sw	a2,0(s1)
    160c:	c836                	sw	a3,16(sp)
    160e:	c62e                	sw	a1,12(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    1610:	3249                	jal	f92 <i2c_error>
    1612:	45b2                	lw	a1,12(sp)
    1614:	46c2                	lw	a3,16(sp)
    1616:	15e1                	addi	a1,a1,-8
    1618:	e539                	bnez	a0,1666 <i2c_write_reg+0x17e>
		for(int8_t b = dev->regb - 1; b >= 0; b--)
    161a:	16fd                	addi	a3,a3,-1
    161c:	06e2                	slli	a3,a3,0x18
    161e:	86e1                	srai	a3,a3,0x18
    1620:	b7a1                	j	1568 <i2c_write_reg+0x80>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    1622:	167d                	addi	a2,a2,-1
    1624:	4305                	li	t1,1
    1626:	fa79                	bnez	a2,15fc <i2c_write_reg+0x114>
    1628:	bf8d                	j	159a <i2c_write_reg+0xb2>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    162a:	16fd                	addi	a3,a3,-1
    162c:	4505                	li	a0,1
    162e:	fab1                	bnez	a3,1582 <i2c_write_reg+0x9a>
    1630:	c032                	sw	a2,0(sp)
    1632:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
    1636:	95dff0ef          	jal	ra,f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    163a:	4602                	lw	a2,0(sp)
    163c:	e111                	bnez	a0,1640 <i2c_write_reg+0x158>
    163e:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
    1640:	4792                	lw	a5,4(sp)
    1642:	00c786b3          	add	a3,a5,a2
    1646:	0006c583          	lbu	a1,0(a3)
			++cbyte;
    164a:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
    164c:	400056b7          	lui	a3,0x40005
    1650:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
    1654:	0ff67613          	andi	a2,a2,255
    1658:	c032                	sw	a2,0(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    165a:	e511                	bnez	a0,1666 <i2c_write_reg+0x17e>
    165c:	937ff0ef          	jal	ra,f92 <i2c_error>
    1660:	4602                	lw	a2,0(sp)
    1662:	f00506e3          	beqz	a0,156e <i2c_write_reg+0x86>
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    1666:	842a                	mv	s0,a0
    1668:	bf3d                	j	15a6 <i2c_write_reg+0xbe>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    166a:	16fd                	addi	a3,a3,-1
    166c:	4305                	li	t1,1
    166e:	f6b9                	bnez	a3,15bc <i2c_write_reg+0xd4>
    1670:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
    1674:	91fff0ef          	jal	ra,f92 <i2c_error>
    1678:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    167a:	e111                	bnez	a0,167e <i2c_write_reg+0x196>
    167c:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    167e:	400056b7          	lui	a3,0x40005
    1682:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	// Signal a STOP
	i2c_stop();

	return i2c_ret;
    1686:	40f2                	lw	ra,28(sp)
    1688:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    168a:	0742                	slli	a4,a4,0x10
    168c:	4462                	lw	s0,24(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    168e:	8341                	srli	a4,a4,0x10
    1690:	20076713          	ori	a4,a4,512
    1694:	40e69023          	sh	a4,1024(a3)
    1698:	44d2                	lw	s1,20(sp)
    169a:	6105                	addi	sp,sp,32
    169c:	8082                	ret

0000169e <i2c_read_raw.constprop.0>:
i2c_err_t i2c_read_raw(const i2c_device_t *dev,     uint8_t *buf,
    169e:	1131                	addi	sp,sp,-20
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    16a0:	6789                	lui	a5,0x2
i2c_err_t i2c_read_raw(const i2c_device_t *dev,     uint8_t *buf,
    16a2:	c622                	sw	s0,12(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    16a4:	71078793          	addi	a5,a5,1808 # 2710 <main+0x900>
i2c_err_t i2c_read_raw(const i2c_device_t *dev,     uint8_t *buf,
    16a8:	c426                	sw	s1,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    16aa:	c2f1a623          	sw	a5,-980(gp) # 20000028 <_i2c_timeout>
i2c_err_t i2c_read_raw(const i2c_device_t *dev,     uint8_t *buf,
    16ae:	84ae                	mv	s1,a1
    16b0:	c806                	sw	ra,16(sp)
    16b2:	872a                	mv	a4,a0
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    16b4:	4601                	li	a2,0
    16b6:	c2c18413          	addi	s0,gp,-980 # 20000028 <_i2c_timeout>
    16ba:	400055b7          	lui	a1,0x40005
    16be:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
    16c2:	8a89                	andi	a3,a3,2
    16c4:	e6fd                	bnez	a3,17b2 <i2c_read_raw.constprop.0+0x114>
    16c6:	c211                	beqz	a2,16ca <i2c_read_raw.constprop.0+0x2c>
    16c8:	c01c                	sw	a5,0(s0)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    16ca:	400056b7          	lui	a3,0x40005
    16ce:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
    16d2:	00030637          	lui	a2,0x30
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    16d6:	40005537          	lui	a0,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    16da:	07c2                	slli	a5,a5,0x10
    16dc:	83c1                	srli	a5,a5,0x10
    16de:	1007e793          	ori	a5,a5,256
    16e2:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
    16e6:	0605                	addi	a2,a2,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    16e8:	41455783          	lhu	a5,1044(a0) # 40005414 <_eusrstack+0x20004c14>
    16ec:	01079593          	slli	a1,a5,0x10
    16f0:	41855783          	lhu	a5,1048(a0)
    16f4:	81c1                	srli	a1,a1,0x10
    16f6:	07c2                	slli	a5,a5,0x10
    16f8:	8fcd                	or	a5,a5,a1
	return (status & status_mask) == status_mask; 
    16fa:	8ff1                	and	a5,a5,a2
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    16fc:	fec796e3          	bne	a5,a2,16e8 <i2c_read_raw.constprop.0+0x4a>
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
    1700:	853a                	mv	a0,a4
    1702:	c03a                	sw	a4,0(sp)
    1704:	921ff0ef          	jal	ra,1024 <i2c_send_addr_write>
    1708:	87aa                	mv	a5,a0
	if(i2c_ret == I2C_OK)
    170a:	ed55                	bnez	a0,17c6 <i2c_read_raw.constprop.0+0x128>
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
    170c:	4785                	li	a5,1
    170e:	4702                	lw	a4,0(sp)
    1710:	00f48e63          	beq	s1,a5,172c <i2c_read_raw.constprop.0+0x8e>
    1714:	400057b7          	lui	a5,0x40005
    1718:	40078693          	addi	a3,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    171c:	4007d783          	lhu	a5,1024(a5)
    1720:	07c2                	slli	a5,a5,0x10
    1722:	83c1                	srli	a5,a5,0x10
    1724:	4007e793          	ori	a5,a5,1024
    1728:	00f69023          	sh	a5,0(a3)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    172c:	400056b7          	lui	a3,0x40005
    1730:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1734:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1738:	07c2                	slli	a5,a5,0x10
    173a:	83c1                	srli	a5,a5,0x10
    173c:	1007e793          	ori	a5,a5,256
    1740:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
    1744:	000306b7          	lui	a3,0x30
    1748:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    174a:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    174e:	01079613          	slli	a2,a5,0x10
    1752:	4185d783          	lhu	a5,1048(a1)
    1756:	8241                	srli	a2,a2,0x10
    1758:	07c2                	slli	a5,a5,0x10
    175a:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
    175c:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    175e:	fed796e3          	bne	a5,a3,174a <i2c_read_raw.constprop.0+0xac>
		i2c_ret = i2c_send_addr_read(dev);
    1762:	853a                	mv	a0,a4
    1764:	92dff0ef          	jal	ra,1090 <i2c_send_addr_read>
    1768:	87aa                	mv	a5,a0
		uint8_t cbyte = 0;
    176a:	4681                	li	a3,0
	if(i2c_ret == I2C_OK)
    176c:	ed29                	bnez	a0,17c6 <i2c_read_raw.constprop.0+0x128>
		while(cbyte < len)
    176e:	0496fc63          	bgeu	a3,s1,17c6 <i2c_read_raw.constprop.0+0x128>
			if(cbyte == len - 1) I2C1->CTLR1 &= ~I2C_CTLR1_ACK;
    1772:	fff48713          	addi	a4,s1,-1
    1776:	00d71e63          	bne	a4,a3,1792 <i2c_read_raw.constprop.0+0xf4>
    177a:	40005637          	lui	a2,0x40005
    177e:	40065703          	lhu	a4,1024(a2) # 40005400 <_eusrstack+0x20004c00>
    1782:	0742                	slli	a4,a4,0x10
    1784:	8341                	srli	a4,a4,0x10
    1786:	bff77713          	andi	a4,a4,-1025
    178a:	0742                	slli	a4,a4,0x10
    178c:	8341                	srli	a4,a4,0x10
    178e:	40e61023          	sh	a4,1024(a2)
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
    1792:	6709                	lui	a4,0x2
    1794:	71070713          	addi	a4,a4,1808 # 2710 <main+0x900>
    1798:	c018                	sw	a4,0(s0)
    179a:	4581                	li	a1,0
    179c:	40005537          	lui	a0,0x40005
    17a0:	41455603          	lhu	a2,1044(a0) # 40005414 <_eusrstack+0x20004c14>
    17a4:	04067613          	andi	a2,a2,64
    17a8:	ce1d                	beqz	a2,17e6 <i2c_read_raw.constprop.0+0x148>
    17aa:	c191                	beqz	a1,17ae <i2c_read_raw.constprop.0+0x110>
    17ac:	c018                	sw	a4,0(s0)
    17ae:	4501                	li	a0,0
    17b0:	a881                	j	1800 <i2c_read_raw.constprop.0+0x162>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    17b2:	17fd                	addi	a5,a5,-1
    17b4:	4605                	li	a2,1
    17b6:	f781                	bnez	a5,16be <i2c_read_raw.constprop.0+0x20>
    17b8:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    17bc:	fd6ff0ef          	jal	ra,f92 <i2c_error>
    17c0:	87aa                	mv	a5,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    17c2:	e111                	bnez	a0,17c6 <i2c_read_raw.constprop.0+0x128>
    17c4:	4795                	li	a5,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    17c6:	400056b7          	lui	a3,0x40005
    17ca:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>
}
    17ce:	40c2                	lw	ra,16(sp)
    17d0:	4432                	lw	s0,12(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    17d2:	0742                	slli	a4,a4,0x10
    17d4:	8341                	srli	a4,a4,0x10
    17d6:	20076713          	ori	a4,a4,512
    17da:	40e69023          	sh	a4,1024(a3)
}
    17de:	44a2                	lw	s1,8(sp)
    17e0:	853e                	mv	a0,a5
    17e2:	0151                	addi	sp,sp,20
    17e4:	8082                	ret
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
    17e6:	177d                	addi	a4,a4,-1
    17e8:	4585                	li	a1,1
    17ea:	fb5d                	bnez	a4,17a0 <i2c_read_raw.constprop.0+0x102>
    17ec:	c23e                	sw	a5,4(sp)
    17ee:	c036                	sw	a3,0(sp)
    17f0:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    17f4:	f9eff0ef          	jal	ra,f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    17f8:	4682                	lw	a3,0(sp)
    17fa:	4792                	lw	a5,4(sp)
    17fc:	e111                	bnez	a0,1800 <i2c_read_raw.constprop.0+0x162>
    17fe:	4515                	li	a0,5
			buf[cbyte] = I2C1->DATAR;
    1800:	40005737          	lui	a4,0x40005
    1804:	c23e                	sw	a5,4(sp)
    1806:	41075603          	lhu	a2,1040(a4) # 40005410 <_eusrstack+0x20004c10>
    180a:	c3018713          	addi	a4,gp,-976 # 2000002c <buff>
    180e:	9736                	add	a4,a4,a3
			++cbyte;
    1810:	0685                	addi	a3,a3,1
    1812:	0ff6f693          	andi	a3,a3,255
			buf[cbyte] = I2C1->DATAR;
    1816:	00c70023          	sb	a2,0(a4)
			++cbyte;
    181a:	c036                	sw	a3,0(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    181c:	e511                	bnez	a0,1828 <i2c_read_raw.constprop.0+0x18a>
    181e:	f74ff0ef          	jal	ra,f92 <i2c_error>
    1822:	4682                	lw	a3,0(sp)
    1824:	4792                	lw	a5,4(sp)
    1826:	d521                	beqz	a0,176e <i2c_read_raw.constprop.0+0xd0>
    1828:	87aa                	mv	a5,a0
    182a:	bf71                	j	17c6 <i2c_read_raw.constprop.0+0x128>

0000182c <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
    182c:	e00007b7          	lui	a5,0xe0000
    1830:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
}
    1834:	8082                	ret

00001836 <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1836:	e0000737          	lui	a4,0xe0000
    183a:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
    183e:	1111                	addi	sp,sp,-28
    1840:	cc06                	sw	ra,24(sp)
    1842:	ca22                	sw	s0,20(sp)
    1844:	c826                	sw	s1,16(sp)
    1846:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1848:	0c07f793          	andi	a5,a5,192
    184c:	0c000693          	li	a3,192
    1850:	0cd78863          	beq	a5,a3,1920 <_write.constprop.0+0xea>
	char buffer[4] = { 0 };
    1854:	c602                	sw	zero,12(sp)
    1856:	842e                	mv	s0,a1
	if( size == 0 )
    1858:	e5f1                	bnez	a1,1924 <_write.constprop.0+0xee>
		lastdmd = (*DMDATA0);
    185a:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
    185e:	c789                	beqz	a5,1868 <_write.constprop.0+0x32>
    1860:	0807f793          	andi	a5,a5,128
    1864:	e391                	bnez	a5,1868 <_write.constprop.0+0x32>
    1866:	37d9                	jal	182c <internal_handle_input.constprop.0>
}
    1868:	40e2                	lw	ra,24(sp)
    186a:	8522                	mv	a0,s0
    186c:	4452                	lw	s0,20(sp)
    186e:	44c2                	lw	s1,16(sp)
    1870:	0171                	addi	sp,sp,28
    1872:	8082                	ret
		int tosend = size - place;
    1874:	409405b3          	sub	a1,s0,s1
    1878:	469d                	li	a3,7
    187a:	872e                	mv	a4,a1
    187c:	00b6d363          	bge	a3,a1,1882 <_write.constprop.0+0x4c>
    1880:	471d                	li	a4,7
    1882:	001006b7          	lui	a3,0x100
    1886:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
    1888:	e0000537          	lui	a0,0xe0000
    188c:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
    1890:	0f450313          	addi	t1,a0,244
    1894:	08067293          	andi	t0,a2,128
    1898:	06029c63          	bnez	t0,1910 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
    189c:	c611                	beqz	a2,18a8 <_write.constprop.0+0x72>
    189e:	c43a                	sw	a4,8(sp)
    18a0:	c22e                	sw	a1,4(sp)
    18a2:	3769                	jal	182c <internal_handle_input.constprop.0>
    18a4:	4722                	lw	a4,8(sp)
    18a6:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
    18a8:	4689                	li	a3,2
    18aa:	4601                	li	a2,0
    18ac:	00b6d463          	bge	a3,a1,18b4 <_write.constprop.0+0x7e>
    18b0:	ffd70613          	addi	a2,a4,-3
    18b4:	4782                	lw	a5,0(sp)
    18b6:	00348593          	addi	a1,s1,3
    18ba:	0068                	addi	a0,sp,12
    18bc:	95be                	add	a1,a1,a5
    18be:	c23a                	sw	a4,4(sp)
    18c0:	2e75                	jal	1c7c <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
    18c2:	4632                	lw	a2,12(sp)
    18c4:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
    18c6:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
    18c8:	e00006b7          	lui	a3,0xe0000
    18cc:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
    18d0:	458d                	li	a1,3
    18d2:	00978633          	add	a2,a5,s1
		t = 0;
    18d6:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
    18d8:	00064303          	lbu	t1,0(a2)
    18dc:	0685                	addi	a3,a3,1
    18de:	007c                	addi	a5,sp,12
    18e0:	00d78533          	add	a0,a5,a3
    18e4:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
    18e8:	00d70563          	beq	a4,a3,18f2 <_write.constprop.0+0xbc>
    18ec:	0605                	addi	a2,a2,1
    18ee:	feb695e3          	bne	a3,a1,18d8 <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
    18f2:	00470693          	addi	a3,a4,4
    18f6:	f806e693          	ori	a3,a3,-128
    18fa:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
    18fe:	4632                	lw	a2,12(sp)
    1900:	e00006b7          	lui	a3,0xe0000
		place += tosend;
    1904:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
    1906:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
    190a:	f684c5e3          	blt	s1,s0,1874 <_write.constprop.0+0x3e>
    190e:	bfa9                	j	1868 <_write.constprop.0+0x32>
			if( timeout-- == 0 )
    1910:	16fd                	addi	a3,a3,-1
    1912:	fead                	bnez	a3,188c <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
    1914:	00032783          	lw	a5,0(t1)
    1918:	0c07e793          	ori	a5,a5,192
    191c:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1920:	4401                	li	s0,0
    1922:	b799                	j	1868 <_write.constprop.0+0x32>
	if( size == 0 )
    1924:	4481                	li	s1,0
    1926:	b7d5                	j	190a <_write.constprop.0+0xd4>

00001928 <__puts_uart>:
{
    1928:	1151                	addi	sp,sp,-12
    192a:	c222                	sw	s0,4(sp)
    192c:	c406                	sw	ra,8(sp)
    192e:	842e                	mv	s0,a1
	_write( 0, s, len );
    1930:	3719                	jal	1836 <_write.constprop.0>
}
    1932:	40a2                	lw	ra,8(sp)
    1934:	8522                	mv	a0,s0
    1936:	4412                	lw	s0,4(sp)
    1938:	0131                	addi	sp,sp,12
    193a:	8082                	ret

0000193c <handle_reset>:
	asm volatile( "\n\
    193c:	1ffff197          	auipc	gp,0x1ffff
    1940:	ac018193          	addi	gp,gp,-1344 # 200003fc <__global_pointer$>
    1944:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
    1948:	6509                	lui	a0,0x2
    194a:	88050513          	addi	a0,a0,-1920 # 1880 <_write.constprop.0+0x4a>
    194e:	30051073          	csrw	mstatus,a0
    1952:	468d                	li	a3,3
    1954:	ffffe517          	auipc	a0,0xffffe
    1958:	6ac50513          	addi	a0,a0,1708 # 0 <InterruptVector>
    195c:	8d55                	or	a0,a0,a3
    195e:	30551073          	csrw	mtvec,a0
asm volatile(
    1962:	c2c18513          	addi	a0,gp,-980 # 20000028 <_i2c_timeout>
    1966:	05c18593          	addi	a1,gp,92 # 20000458 <_ebss>
    196a:	4601                	li	a2,0
    196c:	00b55663          	bge	a0,a1,1978 <handle_reset+0x3c>
    1970:	c110                	sw	a2,0(a0)
    1972:	0511                	addi	a0,a0,4
    1974:	feb54ee3          	blt	a0,a1,1970 <handle_reset+0x34>
    1978:	00002517          	auipc	a0,0x2
    197c:	39450513          	addi	a0,a0,916 # 3d0c <_data_lma>
    1980:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_ssd1306>
    1984:	c2c18613          	addi	a2,gp,-980 # 20000028 <_i2c_timeout>
    1988:	00c58863          	beq	a1,a2,1998 <handle_reset+0x5c>
    198c:	4114                	lw	a3,0(a0)
    198e:	c194                	sw	a3,0(a1)
    1990:	0511                	addi	a0,a0,4
    1992:	0591                	addi	a1,a1,4
    1994:	fec59ae3          	bne	a1,a2,1988 <handle_reset+0x4c>
	SysTick->CTLR = 5;
    1998:	e000f7b7          	lui	a5,0xe000f
    199c:	4715                	li	a4,5
    199e:	c398                	sw	a4,0(a5)
asm volatile(
    19a0:	6789                	lui	a5,0x2
    19a2:	e1078793          	addi	a5,a5,-496 # 1e10 <main>
    19a6:	34179073          	csrw	mepc,a5
    19aa:	30200073          	mret

000019ae <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
    19ae:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
    19b2:	cb4ff0ef          	jal	ra,e66 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
    19b6:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
    19ba:	cacff0ef          	jal	ra,e66 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
    19be:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
    19c2:	ca4ff0ef          	jal	ra,e66 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
    19c6:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
    19ca:	c9cff0ef          	jal	ra,e66 <PrintHex>
	while( (*DMDATA0) & 0x80 );
    19ce:	e0000737          	lui	a4,0xe0000
    19d2:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
    19d6:	0f470693          	addi	a3,a4,244
    19da:	0807f793          	andi	a5,a5,128
    19de:	fbf5                	bnez	a5,19d2 <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
    19e0:	6785                	lui	a5,0x1
    19e2:	a8578793          	addi	a5,a5,-1403 # a85 <__muldf3+0x3c3>
    19e6:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
    19e8:	e0000737          	lui	a4,0xe0000
    19ec:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
    19f0:	0f470693          	addi	a3,a4,244
    19f4:	0807f793          	andi	a5,a5,128
    19f8:	fbf5                	bnez	a5,19ec <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
    19fa:	aaaab7b7          	lui	a5,0xaaaab
    19fe:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
    1a02:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
    1a04:	a001                	j	1a04 <ADC1_2_IRQHandler+0x56>

00001a06 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
    1a06:	40021737          	lui	a4,0x40021
    1a0a:	471c                	lw	a5,8(a4)
    1a0c:	008006b7          	lui	a3,0x800
    1a10:	8fd5                	or	a5,a5,a3
    1a12:	c71c                	sw	a5,8(a4)

00001a14 <strlen>:
{
    1a14:	87aa                	mv	a5,a0
	for (; *s; s++);
    1a16:	0007c703          	lbu	a4,0(a5)
    1a1a:	e701                	bnez	a4,1a22 <strlen+0xe>
}
    1a1c:	40a78533          	sub	a0,a5,a0
    1a20:	8082                	ret
	for (; *s; s++);
    1a22:	0785                	addi	a5,a5,1
    1a24:	bfcd                	j	1a16 <strlen+0x2>

00001a26 <mini_vpprintf>:
{
    1a26:	fa410113          	addi	sp,sp,-92
    1a2a:	c8a6                	sw	s1,80(sp)
    1a2c:	cc86                	sw	ra,88(sp)
    1a2e:	caa2                	sw	s0,84(sp)
    1a30:	c02a                	sw	a0,0(sp)
    1a32:	c22e                	sw	a1,4(sp)
    1a34:	84b2                	mv	s1,a2
    1a36:	87b6                	mv	a5,a3
	int n = 0;
    1a38:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
    1a3a:	0004c703          	lbu	a4,0(s1)
    1a3e:	00148413          	addi	s0,s1,1
    1a42:	00e10fa3          	sb	a4,31(sp)
    1a46:	eb01                	bnez	a4,1a56 <mini_vpprintf+0x30>
}
    1a48:	40e6                	lw	ra,88(sp)
    1a4a:	4456                	lw	s0,84(sp)
    1a4c:	4542                	lw	a0,16(sp)
    1a4e:	44c6                	lw	s1,80(sp)
    1a50:	05c10113          	addi	sp,sp,92
    1a54:	8082                	ret
		if (ch!='%') {
    1a56:	02500693          	li	a3,37
    1a5a:	00d70f63          	beq	a4,a3,1a78 <mini_vpprintf+0x52>
    1a5e:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
    1a60:	4612                	lw	a2,4(sp)
    1a62:	4782                	lw	a5,0(sp)
    1a64:	4585                	li	a1,1
    1a66:	01f10513          	addi	a0,sp,31
    1a6a:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
    1a6c:	84a2                	mv	s1,s0
		n = n + len;
    1a6e:	47c2                	lw	a5,16(sp)
    1a70:	97aa                	add	a5,a5,a0
    1a72:	c83e                	sw	a5,16(sp)
    1a74:	47a2                	lw	a5,8(sp)
    1a76:	b7d1                	j	1a3a <mini_vpprintf+0x14>
			ch=*(fmt++);
    1a78:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
    1a7c:	03000613          	li	a2,48
			ch=*(fmt++);
    1a80:	00248713          	addi	a4,s1,2
    1a84:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
    1a88:	03000413          	li	s0,48
    1a8c:	08c69063          	bne	a3,a2,1b0c <mini_vpprintf+0xe6>
				ch=*(fmt++);
    1a90:	84ba                	mv	s1,a4
    1a92:	4601                	li	a2,0
    1a94:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
    1a96:	4525                	li	a0,9
    1a98:	a811                	j	1aac <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
    1a9a:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
    1a9e:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
    1aa0:	9736                	add	a4,a4,a3
				ch=*(fmt++);
    1aa2:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
    1aa6:	0706                	slli	a4,a4,0x1
    1aa8:	972e                	add	a4,a4,a1
				ch=*(fmt++);
    1aaa:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
    1aac:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.bdeb3654+0x7f87a5>
    1ab0:	0ff5f313          	andi	t1,a1,255
    1ab4:	fe6573e3          	bgeu	a0,t1,1a9a <mini_vpprintf+0x74>
    1ab8:	c219                	beqz	a2,1abe <mini_vpprintf+0x98>
    1aba:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
    1abe:	c63a                	sw	a4,12(sp)
    1ac0:	4661                	li	a2,24
    1ac2:	00e65363          	bge	a2,a4,1ac8 <mini_vpprintf+0xa2>
    1ac6:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
    1ac8:	06c00593          	li	a1,108
			char l = 0;
    1acc:	4601                	li	a2,0
			if (ch == 'l') {
    1ace:	00b69863          	bne	a3,a1,1ade <mini_vpprintf+0xb8>
				ch=*(fmt++);
    1ad2:	0004c683          	lbu	a3,0(s1)
				l = 1;
    1ad6:	4605                	li	a2,1
				ch=*(fmt++);
    1ad8:	0485                	addi	s1,s1,1
    1ada:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
    1ade:	01f14683          	lbu	a3,31(sp)
    1ae2:	06400593          	li	a1,100
    1ae6:	06b68363          	beq	a3,a1,1b4c <mini_vpprintf+0x126>
    1aea:	02d5e463          	bltu	a1,a3,1b12 <mini_vpprintf+0xec>
    1aee:	05800713          	li	a4,88
    1af2:	0ae68263          	beq	a3,a4,1b96 <mini_vpprintf+0x170>
    1af6:	06300713          	li	a4,99
    1afa:	0ce68063          	beq	a3,a4,1bba <mini_vpprintf+0x194>
    1afe:	d6a9                	beqz	a3,1a48 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
    1b00:	4612                	lw	a2,4(sp)
    1b02:	c43e                	sw	a5,8(sp)
    1b04:	4585                	li	a1,1
    1b06:	01f10513          	addi	a0,sp,31
    1b0a:	a88d                	j	1b7c <mini_vpprintf+0x156>
			char pad_char = ' ';
    1b0c:	02000413          	li	s0,32
    1b10:	b741                	j	1a90 <mini_vpprintf+0x6a>
			switch (ch) {
    1b12:	07500593          	li	a1,117
    1b16:	02b68b63          	beq	a3,a1,1b4c <mini_vpprintf+0x126>
    1b1a:	07800613          	li	a2,120
    1b1e:	06c68c63          	beq	a3,a2,1b96 <mini_vpprintf+0x170>
    1b22:	07300613          	li	a2,115
    1b26:	fcc69de3          	bne	a3,a2,1b00 <mini_vpprintf+0xda>
    1b2a:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
    1b2c:	00478713          	addi	a4,a5,4
    1b30:	439c                	lw	a5,0(a5)
    1b32:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
    1b34:	853e                	mv	a0,a5
    1b36:	ca3e                	sw	a5,20(sp)
    1b38:	3df1                	jal	1a14 <strlen>
					if (pad_to > 0) {
    1b3a:	4762                	lw	a4,24(sp)
    1b3c:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
    1b3e:	85aa                	mv	a1,a0
					if (pad_to > 0) {
    1b40:	cb51                	beqz	a4,1bd4 <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
    1b42:	46b2                	lw	a3,12(sp)
    1b44:	1838                	addi	a4,sp,56
    1b46:	8622                	mv	a2,s0
    1b48:	853e                	mv	a0,a5
    1b4a:	a025                	j	1b72 <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1b4c:	00478713          	addi	a4,a5,4
    1b50:	c43a                	sw	a4,8(sp)
					if(l) {
    1b52:	ca05                	beqz	a2,1b82 <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1b54:	f8b68693          	addi	a3,a3,-117
    1b58:	1018                	addi	a4,sp,32
    1b5a:	0016b693          	seqz	a3,a3
    1b5e:	4388                	lw	a0,0(a5)
    1b60:	4601                	li	a2,0
    1b62:	45a9                	li	a1,10
    1b64:	b70ff0ef          	jal	ra,ed4 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    1b68:	46b2                	lw	a3,12(sp)
    1b6a:	1838                	addi	a4,sp,56
    1b6c:	8622                	mv	a2,s0
    1b6e:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    1b70:	1008                	addi	a0,sp,32
    1b72:	a16ff0ef          	jal	ra,d88 <mini_pad>
					len = puts(bf, len, buf);
    1b76:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    1b78:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
    1b7a:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
    1b7c:	4782                	lw	a5,0(sp)
    1b7e:	9782                	jalr	a5
					break;
    1b80:	b5fd                	j	1a6e <mini_vpprintf+0x48>
						if(ch == 'u') {
    1b82:	07500713          	li	a4,117
    1b86:	00e69563          	bne	a3,a4,1b90 <mini_vpprintf+0x16a>
	if (radix > 16)
    1b8a:	1018                	addi	a4,sp,32
    1b8c:	4685                	li	a3,1
    1b8e:	bfc1                	j	1b5e <mini_vpprintf+0x138>
    1b90:	1018                	addi	a4,sp,32
    1b92:	4681                	li	a3,0
    1b94:	b7e9                	j	1b5e <mini_vpprintf+0x138>
					if(l) {
    1b96:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1b98:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
    1b9c:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1ba0:	c43a                	sw	a4,8(sp)
	if (radix > 16)
    1ba2:	4685                	li	a3,1
    1ba4:	1018                	addi	a4,sp,32
    1ba6:	00163613          	seqz	a2,a2
    1baa:	45c1                	li	a1,16
    1bac:	b28ff0ef          	jal	ra,ed4 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    1bb0:	46b2                	lw	a3,12(sp)
    1bb2:	85aa                	mv	a1,a0
    1bb4:	1838                	addi	a4,sp,56
    1bb6:	8622                	mv	a2,s0
    1bb8:	bf65                	j	1b70 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
    1bba:	00478713          	addi	a4,a5,4
    1bbe:	439c                	lw	a5,0(a5)
    1bc0:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
    1bc2:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
    1bc4:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
    1bc8:	1838                	addi	a4,sp,56
    1bca:	8622                	mv	a2,s0
    1bcc:	4585                	li	a1,1
    1bce:	01f10513          	addi	a0,sp,31
    1bd2:	b745                	j	1b72 <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
    1bd4:	4612                	lw	a2,4(sp)
    1bd6:	853e                	mv	a0,a5
    1bd8:	b755                	j	1b7c <mini_vpprintf+0x156>

00001bda <printf>:
{
    1bda:	fdc10113          	addi	sp,sp,-36
    1bde:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1be0:	862a                	mv	a2,a0
    1be2:	6509                	lui	a0,0x2
{
    1be4:	c82e                	sw	a1,16(sp)
    1be6:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1be8:	4581                	li	a1,0
	va_start( args, format );
    1bea:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1bec:	92850513          	addi	a0,a0,-1752 # 1928 <__puts_uart>
{
    1bf0:	c606                	sw	ra,12(sp)
    1bf2:	ce3a                	sw	a4,28(sp)
    1bf4:	d03e                	sw	a5,32(sp)
	va_start( args, format );
    1bf6:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1bf8:	353d                	jal	1a26 <mini_vpprintf>
}
    1bfa:	40b2                	lw	ra,12(sp)
    1bfc:	02410113          	addi	sp,sp,36
    1c00:	8082                	ret

00001c02 <mini_vsnprintf>:
{
    1c02:	1121                	addi	sp,sp,-24
    1c04:	ca06                	sw	ra,20(sp)
    1c06:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
    1c08:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
    1c0a:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
    1c0c:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
    1c0e:	c18d                	beqz	a1,1c30 <mini_vsnprintf+0x2e>
    1c10:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
    1c12:	858a                	mv	a1,sp
    1c14:	e111                	bnez	a0,1c18 <mini_vsnprintf+0x16>
    1c16:	4581                	li	a1,0
    1c18:	6505                	lui	a0,0x1
    1c1a:	e2450513          	addi	a0,a0,-476 # e24 <_puts>
    1c1e:	3521                	jal	1a26 <mini_vpprintf>
	if(buffer == (void*) 0) {
    1c20:	c401                	beqz	s0,1c28 <mini_vsnprintf+0x26>
	return b.pbuffer - b.buffer;
    1c22:	4512                	lw	a0,4(sp)
    1c24:	4782                	lw	a5,0(sp)
    1c26:	8d1d                	sub	a0,a0,a5
}
    1c28:	40d2                	lw	ra,20(sp)
    1c2a:	4442                	lw	s0,16(sp)
    1c2c:	0161                	addi	sp,sp,24
    1c2e:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
    1c30:	4401                	li	s0,0
    1c32:	b7d5                	j	1c16 <mini_vsnprintf+0x14>

00001c34 <sprintf>:
{
    1c34:	1101                	addi	sp,sp,-32
    1c36:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1c38:	862e                	mv	a2,a1
    1c3a:	800005b7          	lui	a1,0x80000
{
    1c3e:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1c40:	fff5c593          	not	a1,a1
	va_start( args, format );
    1c44:	0814                	addi	a3,sp,16
{
    1c46:	c606                	sw	ra,12(sp)
    1c48:	cc3a                	sw	a4,24(sp)
    1c4a:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
    1c4c:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1c4e:	3f55                	jal	1c02 <mini_vsnprintf>
}
    1c50:	40b2                	lw	ra,12(sp)
    1c52:	6105                	addi	sp,sp,32
    1c54:	8082                	ret

00001c56 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
    1c56:	962a                	add	a2,a2,a0
    1c58:	87aa                	mv	a5,a0
    1c5a:	00c79363          	bne	a5,a2,1c60 <memset+0xa>
    1c5e:	8082                	ret
    1c60:	00b78023          	sb	a1,0(a5)
    1c64:	0785                	addi	a5,a5,1
    1c66:	bfd5                	j	1c5a <memset+0x4>

00001c68 <strcpy>:
{
    1c68:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
    1c6a:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
    1c6e:	00e78023          	sb	a4,0(a5)
    1c72:	e311                	bnez	a4,1c76 <strcpy+0xe>
}
    1c74:	8082                	ret
	for (; (*d=*s); s++, d++);
    1c76:	0585                	addi	a1,a1,1
    1c78:	0785                	addi	a5,a5,1
    1c7a:	bfc5                	j	1c6a <strcpy+0x2>

00001c7c <memcpy>:
{
    1c7c:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
    1c7e:	00f61363          	bne	a2,a5,1c84 <memcpy+0x8>
}
    1c82:	8082                	ret
	for (; n; n--) *d++ = *s++;
    1c84:	00f58733          	add	a4,a1,a5
    1c88:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
    1c8c:	00f50733          	add	a4,a0,a5
    1c90:	0785                	addi	a5,a5,1
    1c92:	00d70023          	sb	a3,0(a4)
    1c96:	b7e5                	j	1c7e <memcpy+0x2>

00001c98 <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1c98:	7179                	addi	sp,sp,-48
    1c9a:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
    1c9c:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1ca0:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
    1ca2:	862e                	mv	a2,a1
    1ca4:	85aa                	mv	a1,a0
    1ca6:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1caa:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    1cac:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    1cb0:	37f1                	jal	1c7c <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    1cb2:	00140613          	addi	a2,s0,1
    1cb6:	858a                	mv	a1,sp
    1cb8:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_ssd1306>
    1cbc:	cdaff0ef          	jal	ra,1196 <i2c_write_raw>
}
    1cc0:	50b2                	lw	ra,44(sp)
    1cc2:	5422                	lw	s0,40(sp)
    1cc4:	6145                	addi	sp,sp,48
    1cc6:	8082                	ret

00001cc8 <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
    1cc8:	1151                	addi	sp,sp,-12
    1cca:	c222                	sw	s0,4(sp)
    1ccc:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1cce:	02100513          	li	a0,33
void ssd1306_print_str_at(
    1cd2:	c406                	sw	ra,8(sp)
    1cd4:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1cd6:	e00ff0ef          	jal	ra,12d6 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1cda:	4501                	li	a0,0
    1cdc:	dfaff0ef          	jal	ra,12d6 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1ce0:	07f00513          	li	a0,127
    1ce4:	df2ff0ef          	jal	ra,12d6 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1ce8:	02200513          	li	a0,34
    1cec:	deaff0ef          	jal	ra,12d6 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1cf0:	8522                	mv	a0,s0
    1cf2:	de4ff0ef          	jal	ra,12d6 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1cf6:	8522                	mv	a0,s0
    1cf8:	ddeff0ef          	jal	ra,12d6 <ssd1306_cmd>
    1cfc:	4465                	li	s0,25
    1cfe:	04018493          	addi	s1,gp,64 # 2000043c <str_output>
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i < SSD1306_STR_SIZE; i++) {
		if (*str) {
    1d02:	0004c783          	lbu	a5,0(s1)
    1d06:	c78d                	beqz	a5,1d30 <ssd1306_print_str_at.constprop.0+0x68>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    1d08:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    1d0a:	0ff7f793          	andi	a5,a5,255
    1d0e:	6711                	lui	a4,0x4
    1d10:	00279693          	slli	a3,a5,0x2
    1d14:	a0070513          	addi	a0,a4,-1536 # 3a00 <FONT_7x5>
    1d18:	97b6                	add	a5,a5,a3
    1d1a:	4595                	li	a1,5
    1d1c:	953e                	add	a0,a0,a5
    1d1e:	3fad                	jal	1c98 <ssd1306_data.isra.0>
			str++;
    1d20:	0485                	addi	s1,s1,1
	for (int i=0; i < SSD1306_STR_SIZE; i++) {
    1d22:	147d                	addi	s0,s0,-1
    1d24:	fc79                	bnez	s0,1d02 <ssd1306_print_str_at.constprop.0+0x3a>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
    1d26:	40a2                	lw	ra,8(sp)
    1d28:	4412                	lw	s0,4(sp)
    1d2a:	4482                	lw	s1,0(sp)
    1d2c:	0131                	addi	sp,sp,12
    1d2e:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    1d30:	6791                	lui	a5,0x4
    1d32:	4595                	li	a1,5
    1d34:	a0078513          	addi	a0,a5,-1536 # 3a00 <FONT_7x5>
    1d38:	3785                	jal	1c98 <ssd1306_data.isra.0>
    1d3a:	b7e5                	j	1d22 <ssd1306_print_str_at.constprop.0+0x5a>

00001d3c <puts>:
{
    1d3c:	1151                	addi	sp,sp,-12
    1d3e:	c406                	sw	ra,8(sp)
    1d40:	c222                	sw	s0,4(sp)
    1d42:	c026                	sw	s1,0(sp)
    1d44:	84aa                	mv	s1,a0
	int sl = strlen( s );
    1d46:	31f9                	jal	1a14 <strlen>
    1d48:	842a                	mv	s0,a0
	_write(0, s, sl );
    1d4a:	85aa                	mv	a1,a0
    1d4c:	8526                	mv	a0,s1
    1d4e:	34e5                	jal	1836 <_write.constprop.0>
	_write(0, "\n", 1 );
    1d50:	6511                	lui	a0,0x4
    1d52:	4585                	li	a1,1
    1d54:	9b850513          	addi	a0,a0,-1608 # 39b8 <__clz_tab+0x714>
    1d58:	3cf9                	jal	1836 <_write.constprop.0>
}
    1d5a:	40a2                	lw	ra,8(sp)
    1d5c:	00140513          	addi	a0,s0,1
    1d60:	4412                	lw	s0,4(sp)
    1d62:	4482                	lw	s1,0(sp)
    1d64:	0131                	addi	sp,sp,12
    1d66:	8082                	ret

00001d68 <i2c_scan_callback>:
}

char str_output[SSD1306_STR_SIZE];

void i2c_scan_callback(const uint8_t addr) {
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    1d68:	c539                	beqz	a0,1db6 <i2c_scan_callback+0x4e>
    1d6a:	07f00793          	li	a5,127
    1d6e:	862a                	mv	a2,a0
    1d70:	04f50363          	beq	a0,a5,1db6 <i2c_scan_callback+0x4e>
void i2c_scan_callback(const uint8_t addr) {
    1d74:	1151                	addi	sp,sp,-12
    1d76:	c222                	sw	s0,4(sp)
	
	static int line = 1;
	sprintf(str_output, "I2C: 0x%02X", addr);
    1d78:	658d                	lui	a1,0x3
    1d7a:	3a458593          	addi	a1,a1,932 # 33a4 <__clz_tab+0x100>
    1d7e:	04018513          	addi	a0,gp,64 # 2000043c <str_output>
void i2c_scan_callback(const uint8_t addr) {
    1d82:	c406                	sw	ra,8(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    1d84:	3d45                	jal	1c34 <sprintf>
	printf("%s\n", str_output);
    1d86:	04018513          	addi	a0,gp,64 # 2000043c <str_output>
    1d8a:	3f4d                	jal	1d3c <puts>
	modI2C_display(str_output, line++);
    1d8c:	c1418793          	addi	a5,gp,-1004 # 20000010 <line.0>
    1d90:	4380                	lw	s0,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1d92:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
    1d96:	00140713          	addi	a4,s0,1
    1d9a:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1d9c:	b62ff0ef          	jal	ra,10fe <i2c_ping>
    1da0:	e519                	bnez	a0,1dae <i2c_scan_callback+0x46>
	ssd1306_print_str_at(str, line, 0);
    1da2:	0ff47513          	andi	a0,s0,255
}
    1da6:	4412                	lw	s0,4(sp)
    1da8:	40a2                	lw	ra,8(sp)
    1daa:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    1dac:	bf31                	j	1cc8 <ssd1306_print_str_at.constprop.0>
}
    1dae:	40a2                	lw	ra,8(sp)
    1db0:	4412                	lw	s0,4(sp)
    1db2:	0131                	addi	sp,sp,12
    1db4:	8082                	ret
    1db6:	8082                	ret

00001db8 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    1db8:	400227b7          	lui	a5,0x40022
    1dbc:	4705                	li	a4,1
    1dbe:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    1dc0:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1dc4:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    1dc8:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1dcc:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.bdeb3654+0x1078856>
    1dd0:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    1dd2:	009f0737          	lui	a4,0x9f0
    1dd6:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    1dd8:	020006b7          	lui	a3,0x2000
    1ddc:	40021737          	lui	a4,0x40021
    1de0:	431c                	lw	a5,0(a4)
    1de2:	8ff5                	and	a5,a5,a3
    1de4:	dff5                	beqz	a5,1de0 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1de6:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1de8:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1dec:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    1dee:	0027e793          	ori	a5,a5,2
    1df2:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1df4:	4721                	li	a4,8
    1df6:	42dc                	lw	a5,4(a3)
    1df8:	8bb1                	andi	a5,a5,12
    1dfa:	fee79ee3          	bne	a5,a4,1df6 <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    1dfe:	e00007b7          	lui	a5,0xe0000
    1e02:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    1e06:	08000713          	li	a4,128
    1e0a:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    1e0e:	8082                	ret

00001e10 <main>:
	test_apds9960();
	test_ina219();
}


int main() {
    1e10:	f4810113          	addi	sp,sp,-184
    1e14:	db06                	sw	ra,180(sp)
    1e16:	d922                	sw	s0,176(sp)
    1e18:	d726                	sw	s1,172(sp)
    SystemInit();
    1e1a:	3f79                	jal	1db8 <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    1e1c:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1e20:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    1e22:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1e26:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.bdeb3654+0x4354>
    1e2a:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    1e2c:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    1e30:	c201ae23          	sw	zero,-964(gp) # 20000038 <systick_millis>
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    1e34:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1e36:	6485                	lui	s1,0x1
    systick_init();			//! required for millis()

    funGpioInitAll();
    1e38:	40021437          	lui	s0,0x40021
    1e3c:	00776713          	ori	a4,a4,7
    1e40:	c398                	sw	a4,0(a5)
    1e42:	e000e7b7          	lui	a5,0xe000e
    1e46:	1097a023          	sw	s1,256(a5) # e000e100 <_eusrstack+0xc000d900>
    1e4a:	4c1c                	lw	a5,24(s0)
    Delay_Ms(100);
    1e4c:	00494537          	lui	a0,0x494
    1e50:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c5d5>
    funGpioInitAll();
    1e54:	0357e793          	ori	a5,a5,53
    1e58:	cc1c                	sw	a5,24(s0)
    Delay_Ms(100);
    1e5a:	864ff0ef          	jal	ra,ebe <DelaySysTick>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1e5e:	4818                	lw	a4,16(s0)
    1e60:	00200637          	lui	a2,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1e64:	ffe006b7          	lui	a3,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1e68:	8f51                	or	a4,a4,a2
    1e6a:	c818                	sw	a4,16(s0)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1e6c:	4818                	lw	a4,16(s0)
    1e6e:	16fd                	addi	a3,a3,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1e70:	d0048493          	addi	s1,s1,-768 # d00 <__hidden___udivsi3+0x28>
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1e74:	8f75                	and	a4,a4,a3
    1e76:	c818                	sw	a4,16(s0)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1e78:	4c5c                	lw	a5,28(s0)
	AFIO->PCFR1 &= ~(0x04400002);
    1e7a:	fbc006b7          	lui	a3,0xfbc00
    1e7e:	16f5                	addi	a3,a3,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1e80:	8fd1                	or	a5,a5,a2
    1e82:	cc5c                	sw	a5,28(s0)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    1e84:	4c1c                	lw	a5,24(s0)
    1e86:	0117e793          	ori	a5,a5,17
    1e8a:	cc1c                	sw	a5,24(s0)
	AFIO->PCFR1 &= ~(0x04400002);
    1e8c:	400107b7          	lui	a5,0x40010
    1e90:	43d8                	lw	a4,4(a5)
    1e92:	8f75                	and	a4,a4,a3
    1e94:	c3d8                	sw	a4,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1e96:	43d8                	lw	a4,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1e98:	76fd                	lui	a3,0xfffff
    1e9a:	0ff68693          	addi	a3,a3,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1e9e:	c3d8                	sw	a4,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    1ea0:	400117b7          	lui	a5,0x40011
    1ea4:	4398                	lw	a4,0(a5)
    1ea6:	f0f77713          	andi	a4,a4,-241
    1eaa:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    1eac:	4398                	lw	a4,0(a5)
    1eae:	0d076713          	ori	a4,a4,208
    1eb2:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1eb4:	4398                	lw	a4,0(a5)
    1eb6:	8f75                	and	a4,a4,a3
    1eb8:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1eba:	4398                	lw	a4,0(a5)
    1ebc:	8cd9                	or	s1,s1,a4
    1ebe:	c384                	sw	s1,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    1ec0:	40005737          	lui	a4,0x40005
    1ec4:	40475783          	lhu	a5,1028(a4) # 40005404 <_eusrstack+0x20004c04>
    1ec8:	07c2                	slli	a5,a5,0x10
    1eca:	83c1                	srli	a5,a5,0x10
    1ecc:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    1ed0:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    1ed4:	40f71223          	sh	a5,1028(a4)
	I2C1->CKCFGR = i2c_conf;
    1ed8:	77e1                	lui	a5,0xffff8
    1eda:	02878793          	addi	a5,a5,40 # ffff8028 <_eusrstack+0xdfff7828>
    1ede:	40f71e23          	sh	a5,1052(a4)
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    1ee2:	40075783          	lhu	a5,1024(a4)
    1ee6:	07c2                	slli	a5,a5,0x10
    1ee8:	83c1                	srli	a5,a5,0x10
    1eea:	0017e793          	ori	a5,a5,1
    1eee:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    1ef2:	8a0ff0ef          	jal	ra,f92 <i2c_error>

	if(i2c_init(&dev_aht21) != I2C_OK) {
    1ef6:	32050e63          	beqz	a0,2232 <main+0x422>
		printf("Failed to init I2C\n");
    1efa:	650d                	lui	a0,0x3
    1efc:	3b050513          	addi	a0,a0,944 # 33b0 <__clz_tab+0x10c>
		}

		// Scan the I2C Bus, prints any devices that respond
		printf("----Scanning I2C Bus for Devices---\n");
		i2c_scan(i2c_scan_callback);
		printf("----Done Scanning----\n\n");
    1f00:	3d35                	jal	1d3c <puts>
	}

    while(1) {
        Delay_Ms(1000);
    1f02:	02dc7537          	lui	a0,0x2dc7
    1f06:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bdeb3654+0x2dbf3d5>
    1f0a:	fb5fe0ef          	jal	ra,ebe <DelaySysTick>
    if (i2c_ping(dev_htu21.addr) != I2C_OK) {
    1f0e:	04000513          	li	a0,64
    1f12:	9ecff0ef          	jal	ra,10fe <i2c_ping>
    1f16:	c3018493          	addi	s1,gp,-976 # 2000002c <buff>
    1f1a:	42050863          	beqz	a0,234a <main+0x53a>
		printf("HTU21 not found\n");
    1f1e:	650d                	lui	a0,0x3
    1f20:	40c50513          	addi	a0,a0,1036 # 340c <__clz_tab+0x168>
    1f24:	3d21                	jal	1d3c <puts>
    if (i2c_ping(dev_aht21.addr) != I2C_OK) {
    1f26:	03800513          	li	a0,56
    1f2a:	9d4ff0ef          	jal	ra,10fe <i2c_ping>
    1f2e:	52050a63          	beqz	a0,2462 <main+0x652>
		printf("AHT21 not found\n");
    1f32:	650d                	lui	a0,0x3
    1f34:	46c50513          	addi	a0,a0,1132 # 346c <__clz_tab+0x1c8>
    1f38:	3511                	jal	1d3c <puts>
    if (i2c_ping(dev_bmp280.addr) != I2C_OK) {
    1f3a:	07600513          	li	a0,118
    1f3e:	9c0ff0ef          	jal	ra,10fe <i2c_ping>
    1f42:	5e050f63          	beqz	a0,2540 <main+0x730>
		printf("BMP280 not found\n");
    1f46:	650d                	lui	a0,0x3
    1f48:	4d450513          	addi	a0,a0,1236 # 34d4 <__clz_tab+0x230>
    1f4c:	3bc5                	jal	1d3c <puts>
    if (i2c_ping(dev_hdc1080.addr) != I2C_OK) {
    1f4e:	04000513          	li	a0,64
    1f52:	9acff0ef          	jal	ra,10fe <i2c_ping>
    1f56:	70050b63          	beqz	a0,266c <main+0x85c>
		printf("HDC1080 not found\n");
    1f5a:	650d                	lui	a0,0x3
    1f5c:	53450513          	addi	a0,a0,1332 # 3534 <__clz_tab+0x290>
    1f60:	3bf1                	jal	1d3c <puts>
    if (i2c_ping(dev_si7021.addr) != I2C_OK) {
    1f62:	04000513          	li	a0,64
    1f66:	998ff0ef          	jal	ra,10fe <i2c_ping>
    1f6a:	7e050063          	beqz	a0,274a <main+0x93a>
		printf("SI7021 not found\n");
    1f6e:	650d                	lui	a0,0x3
    1f70:	56c50513          	addi	a0,a0,1388 # 356c <__clz_tab+0x2c8>
    1f74:	33e1                	jal	1d3c <puts>
    if (i2c_ping(dev_max44009.addr) != I2C_OK) {
    1f76:	04a00513          	li	a0,74
    1f7a:	984ff0ef          	jal	ra,10fe <i2c_ping>
    1f7e:	060505e3          	beqz	a0,27e8 <main+0x9d8>
		printf("Max44009 not found\n");
    1f82:	650d                	lui	a0,0x3
    1f84:	5a050513          	addi	a0,a0,1440 # 35a0 <__clz_tab+0x2fc>
    1f88:	3b55                	jal	1d3c <puts>
    if (i2c_ping(dev_AP3216.addr) != I2C_OK) {
    1f8a:	4579                	li	a0,30
    1f8c:	972ff0ef          	jal	ra,10fe <i2c_ping>
    1f90:	0c0502e3          	beqz	a0,2854 <main+0xa44>
		printf("AP3216 not found\n");
    1f94:	650d                	lui	a0,0x3
    1f96:	5dc50513          	addi	a0,a0,1500 # 35dc <__clz_tab+0x338>
    1f9a:	334d                	jal	1d3c <puts>
    if (i2c_ping(dev_vl35lox.addr) != I2C_OK) {
    1f9c:	02900513          	li	a0,41
    1fa0:	95eff0ef          	jal	ra,10fe <i2c_ping>
    1fa4:	10050ee3          	beqz	a0,28c0 <main+0xab0>
		printf("VL53L0X not found\n");
    1fa8:	650d                	lui	a0,0x3
    1faa:	60850513          	addi	a0,a0,1544 # 3608 <__clz_tab+0x364>
    1fae:	3379                	jal	1d3c <puts>
    if (i2c_ping(dev_ens160.addr) != I2C_OK) {
    1fb0:	05300513          	li	a0,83
    1fb4:	94aff0ef          	jal	ra,10fe <i2c_ping>
    1fb8:	1e0502e3          	beqz	a0,299c <main+0xb8c>
		printf("ENS160 not found\n");
    1fbc:	650d                	lui	a0,0x3
    1fbe:	67850513          	addi	a0,a0,1656 # 3678 <__clz_tab+0x3d4>
    1fc2:	3bad                	jal	1d3c <puts>
    if (i2c_ping(dev_sgp30.addr) != I2C_OK) {
    1fc4:	05800513          	li	a0,88
    1fc8:	936ff0ef          	jal	ra,10fe <i2c_ping>
    1fcc:	24050ae3          	beqz	a0,2a20 <main+0xc10>
		printf("SGP30 not found\n");
    1fd0:	650d                	lui	a0,0x3
    1fd2:	6d850513          	addi	a0,a0,1752 # 36d8 <__clz_tab+0x434>
    1fd6:	339d                	jal	1d3c <puts>
    if (i2c_ping(dev_scd40.addr) != I2C_OK) {
    1fd8:	06200513          	li	a0,98
    1fdc:	922ff0ef          	jal	ra,10fe <i2c_ping>
    1fe0:	3c0505e3          	beqz	a0,2baa <main+0xd9a>
		printf("SCD40 not found\n");
    1fe4:	650d                	lui	a0,0x3
    1fe6:	73850513          	addi	a0,a0,1848 # 3738 <__clz_tab+0x494>
    1fea:	3b89                	jal	1d3c <puts>
    if (i2c_ping(dev_mpu6050.addr) != I2C_OK) {
    1fec:	06800513          	li	a0,104
    1ff0:	90eff0ef          	jal	ra,10fe <i2c_ping>
    1ff4:	e119                	bnez	a0,1ffa <main+0x1ea>
    1ff6:	4930006f          	j	2c88 <main+0xe78>
		printf("MPU6050 not found\n");
    1ffa:	650d                	lui	a0,0x3
    1ffc:	77050513          	addi	a0,a0,1904 # 3770 <__clz_tab+0x4cc>
    2000:	3b35                	jal	1d3c <puts>
    if (i2c_ping(dev_adxl345.addr) != I2C_OK) {
    2002:	05300513          	li	a0,83
    2006:	8f8ff0ef          	jal	ra,10fe <i2c_ping>
    200a:	e119                	bnez	a0,2010 <main+0x200>
    200c:	5470006f          	j	2d52 <main+0xf42>
		printf("ADXL345 not found\n");
    2010:	650d                	lui	a0,0x3
    2012:	7dc50513          	addi	a0,a0,2012 # 37dc <__clz_tab+0x538>
    2016:	331d                	jal	1d3c <puts>
	ret = i2c_write_reg(&dev_ds3231, 0x00, (uint8_t[]){
    2018:	011167b7          	lui	a5,0x1116
    201c:	80978793          	addi	a5,a5,-2039 # 1115809 <lib_i2c.c.bdeb3654+0x110dfde>
    2020:	6411                	lui	s0,0x4
    2022:	d63e                	sw	a5,44(sp)
    2024:	71500793          	li	a5,1813
    2028:	469d                	li	a3,7
    202a:	1070                	addi	a2,sp,44
    202c:	02f11823          	sh	a5,48(sp)
    2030:	4581                	li	a1,0
    2032:	02500793          	li	a5,37
    2036:	c4840513          	addi	a0,s0,-952 # 3c48 <dev_ds3231>
    203a:	02f10923          	sb	a5,50(sp)
    203e:	caaff0ef          	jal	ra,14e8 <i2c_write_reg>
	printf("Error0: %d\n", ret);
    2042:	678d                	lui	a5,0x3
	ret = i2c_write_reg(&dev_ds3231, 0x00, (uint8_t[]){
    2044:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2046:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    204a:	3e41                	jal	1bda <printf>
	ret = i2c_read_reg(&dev_ds3231, 0x00, buff, 7);
    204c:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2050:	469d                	li	a3,7
    2052:	4581                	li	a1,0
    2054:	c4840513          	addi	a0,s0,-952
    2058:	a9eff0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("Error1: %d\n", ret);
    205c:	668d                	lui	a3,0x3
	ret = i2c_read_reg(&dev_ds3231, 0x00, buff, 7);
    205e:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2060:	49868513          	addi	a0,a3,1176 # 3498 <__clz_tab+0x1f4>
    2064:	3e9d                	jal	1bda <printf>
		bcd_to_decimal(buff[4]), bcd_to_decimal(buff[5]), bcd_to_decimal(buff[6]) + 2000,
    2066:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
		bcd_to_decimal(buff[2]), bcd_to_decimal(buff[1]), bcd_to_decimal(buff[0]));
    206a:	00164703          	lbu	a4,1(a2) # 200001 <lib_i2c.c.bdeb3654+0x1f87d6>
    206e:	00264303          	lbu	t1,2(a2)
		bcd_to_decimal(buff[4]), bcd_to_decimal(buff[5]), bcd_to_decimal(buff[6]) + 2000,
    2072:	00464503          	lbu	a0,4(a2)
uint8_t bcd_to_decimal(uint8_t val) { return ((val/16)*10) + (val%16); }
    2076:	00475693          	srli	a3,a4,0x4
    207a:	00269793          	slli	a5,a3,0x2
    207e:	97b6                	add	a5,a5,a3
		bcd_to_decimal(buff[4]), bcd_to_decimal(buff[5]), bcd_to_decimal(buff[6]) + 2000,
    2080:	00564583          	lbu	a1,5(a2)
    2084:	00664383          	lbu	t2,6(a2)
		bcd_to_decimal(buff[2]), bcd_to_decimal(buff[1]), bcd_to_decimal(buff[0]));
    2088:	00064283          	lbu	t0,0(a2)
uint8_t bcd_to_decimal(uint8_t val) { return ((val/16)*10) + (val%16); }
    208c:	8b3d                	andi	a4,a4,15
    208e:	00435613          	srli	a2,t1,0x4
    2092:	0786                	slli	a5,a5,0x1
    2094:	97ba                	add	a5,a5,a4
    2096:	00261713          	slli	a4,a2,0x2
    209a:	9732                	add	a4,a4,a2
    209c:	00f37313          	andi	t1,t1,15
    20a0:	0706                	slli	a4,a4,0x1
    20a2:	971a                	add	a4,a4,t1
    20a4:	0043d313          	srli	t1,t2,0x4
    20a8:	0045d613          	srli	a2,a1,0x4
    20ac:	00231693          	slli	a3,t1,0x2
    20b0:	969a                	add	a3,a3,t1
    20b2:	00261313          	slli	t1,a2,0x2
    20b6:	961a                	add	a2,a2,t1
    20b8:	89bd                	andi	a1,a1,15
    20ba:	0606                	slli	a2,a2,0x1
    20bc:	962e                	add	a2,a2,a1
    20be:	00455593          	srli	a1,a0,0x4
    20c2:	00259313          	slli	t1,a1,0x2
    20c6:	959a                	add	a1,a1,t1
    20c8:	893d                	andi	a0,a0,15
    20ca:	0586                	slli	a1,a1,0x1
    20cc:	95aa                	add	a1,a1,a0
    20ce:	0042d513          	srli	a0,t0,0x4
    20d2:	00251313          	slli	t1,a0,0x2
    20d6:	951a                	add	a0,a0,t1
    20d8:	00f2f293          	andi	t0,t0,15
    20dc:	0506                	slli	a0,a0,0x1
    20de:	00f3f393          	andi	t2,t2,15
    20e2:	9516                	add	a0,a0,t0
    20e4:	0686                	slli	a3,a3,0x1
    20e6:	969e                	add	a3,a3,t2
	printf("%d/%d/%lu %d:%d:%d\n", 
    20e8:	0ff57513          	andi	a0,a0,255
    20ec:	c02a                	sw	a0,0(sp)
		bcd_to_decimal(buff[4]), bcd_to_decimal(buff[5]), bcd_to_decimal(buff[6]) + 2000,
    20ee:	0ff6f693          	andi	a3,a3,255
	printf("%d/%d/%lu %d:%d:%d\n", 
    20f2:	6511                	lui	a0,0x4
    20f4:	7d068693          	addi	a3,a3,2000
    20f8:	0ff7f793          	andi	a5,a5,255
    20fc:	0ff77713          	andi	a4,a4,255
    2100:	0ff67613          	andi	a2,a2,255
    2104:	0ff5f593          	andi	a1,a1,255
    2108:	81050513          	addi	a0,a0,-2032 # 3810 <__clz_tab+0x56c>
    210c:	34f9                	jal	1bda <printf>
	ret = i2c_write_raw(&dev_at24c, (uint8_t[]){ 0x00, 0x11, 0xDD }, 3);
    210e:	6405                	lui	s0,0x1
    2110:	10040713          	addi	a4,s0,256 # 1100 <i2c_ping+0x2>
    2114:	6411                	lui	s0,0x4
    2116:	fdd00793          	li	a5,-35
    211a:	460d                	li	a2,3
    211c:	106c                	addi	a1,sp,44
    211e:	c2440513          	addi	a0,s0,-988 # 3c24 <dev_at24c>
    2122:	02f10723          	sb	a5,46(sp)
    2126:	02e11623          	sh	a4,44(sp)
    212a:	86cff0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error0: %d\n", ret);
    212e:	670d                	lui	a4,0x3
	ret = i2c_write_raw(&dev_at24c, (uint8_t[]){ 0x00, 0x11, 0xDD }, 3);
    2130:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2132:	41c70513          	addi	a0,a4,1052 # 341c <__clz_tab+0x178>
    2136:	3455                	jal	1bda <printf>
	Delay_Ms(10);
    2138:	00075537          	lui	a0,0x75
    213c:	30050513          	addi	a0,a0,768 # 75300 <lib_i2c.c.bdeb3654+0x6dad5>
    2140:	d7ffe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_write_raw(&dev_at24c, (uint8_t[]){ 0x00, 0x11 }, 2);
    2144:	6785                	lui	a5,0x1
    2146:	10078713          	addi	a4,a5,256 # 1100 <i2c_ping+0x2>
    214a:	4609                	li	a2,2
    214c:	102c                	addi	a1,sp,40
    214e:	c2440513          	addi	a0,s0,-988
    2152:	02e11423          	sh	a4,40(sp)
    2156:	840ff0ef          	jal	ra,1196 <i2c_write_raw>
	ret = i2c_read_raw(&dev_at24c, buff, 1);
    215a:	4585                	li	a1,1
    215c:	c2440513          	addi	a0,s0,-988
    2160:	d3eff0ef          	jal	ra,169e <i2c_read_raw.constprop.0>
	printf("Error1: %d\n", ret);
    2164:	668d                	lui	a3,0x3
	ret = i2c_read_raw(&dev_at24c, buff, 1);
    2166:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2168:	49868513          	addi	a0,a3,1176 # 3498 <__clz_tab+0x1f4>
    216c:	a6fff0ef          	jal	ra,1bda <printf>
	printf("0x%02X\n", buff[0]);
    2170:	c3018793          	addi	a5,gp,-976 # 2000002c <buff>
    2174:	0007c583          	lbu	a1,0(a5)
    2178:	6511                	lui	a0,0x4
    217a:	82450513          	addi	a0,a0,-2012 # 3824 <__clz_tab+0x580>
    217e:	a5dff0ef          	jal	ra,1bda <printf>
    if (i2c_ping(dev_ina3221.addr) != I2C_OK) {
    2182:	04200513          	li	a0,66
    2186:	f79fe0ef          	jal	ra,10fe <i2c_ping>
    218a:	40050ce3          	beqz	a0,2da2 <main+0xf92>
		printf("INA3221 not found\n");
    218e:	6511                	lui	a0,0x4
    2190:	82c50513          	addi	a0,a0,-2004 # 382c <__clz_tab+0x588>
    2194:	3665                	jal	1d3c <puts>
    if (i2c_ping(dev_as5600.addr) != I2C_OK) {
    2196:	03600513          	li	a0,54
    219a:	f65fe0ef          	jal	ra,10fe <i2c_ping>
    219e:	e119                	bnez	a0,21a4 <main+0x394>
    21a0:	4a70006f          	j	2e46 <main+0x1036>
		printf("AS5600 not found\n");
    21a4:	6511                	lui	a0,0x4
    21a6:	86050513          	addi	a0,a0,-1952 # 3860 <__clz_tab+0x5bc>
    21aa:	3e49                	jal	1d3c <puts>
    if (i2c_ping(dev_max30102.addr) != I2C_OK) {
    21ac:	05700513          	li	a0,87
    21b0:	f4ffe0ef          	jal	ra,10fe <i2c_ping>
    21b4:	e119                	bnez	a0,21ba <main+0x3aa>
    21b6:	4e50006f          	j	2e9a <main+0x108a>
		printf("MAX30102 not found\n");
    21ba:	6511                	lui	a0,0x4
    21bc:	89c50513          	addi	a0,a0,-1892 # 389c <__clz_tab+0x5f8>
    21c0:	3eb5                	jal	1d3c <puts>
    if (i2c_ping(dev_amg88xx.addr) != I2C_OK) {
    21c2:	06900513          	li	a0,105
    21c6:	f39fe0ef          	jal	ra,10fe <i2c_ping>
    21ca:	842a                	mv	s0,a0
    21cc:	e119                	bnez	a0,21d2 <main+0x3c2>
    21ce:	5950006f          	j	2f62 <main+0x1152>
		printf("AMG88xx not found\n");
    21d2:	6511                	lui	a0,0x4
    21d4:	8d450513          	addi	a0,a0,-1836 # 38d4 <__clz_tab+0x630>
    21d8:	3695                	jal	1d3c <puts>
	if (i2c_ping(dev_bh1750.addr) != I2C_OK) {
    21da:	02300513          	li	a0,35
    21de:	f21fe0ef          	jal	ra,10fe <i2c_ping>
    21e2:	e119                	bnez	a0,21e8 <main+0x3d8>
    21e4:	6290006f          	j	300c <main+0x11fc>
		printf("BH1750 not found\n");
    21e8:	6511                	lui	a0,0x4
    21ea:	91050513          	addi	a0,a0,-1776 # 3910 <__clz_tab+0x66c>
    21ee:	36b9                	jal	1d3c <puts>
	if (i2c_ping(dev_sht3x.addr) != I2C_OK) {
    21f0:	04400513          	li	a0,68
    21f4:	f0bfe0ef          	jal	ra,10fe <i2c_ping>
    21f8:	e119                	bnez	a0,21fe <main+0x3ee>
    21fa:	6710006f          	j	306a <main+0x125a>
		printf("SHT3X not found\n");
    21fe:	6511                	lui	a0,0x4
    2200:	93850513          	addi	a0,a0,-1736 # 3938 <__clz_tab+0x694>
    2204:	3e25                	jal	1d3c <puts>
	if (i2c_ping(dev_apds9960.addr) != I2C_OK) {
    2206:	03900513          	li	a0,57
    220a:	ef5fe0ef          	jal	ra,10fe <i2c_ping>
    220e:	e119                	bnez	a0,2214 <main+0x404>
    2210:	7050006f          	j	3114 <main+0x1304>
		printf("APDS9960 not found\n");
    2214:	6511                	lui	a0,0x4
    2216:	96450513          	addi	a0,a0,-1692 # 3964 <__clz_tab+0x6c0>
    221a:	360d                	jal	1d3c <puts>
	if (i2c_ping(dev_ina219.addr) != I2C_OK) {
    221c:	04000513          	li	a0,64
    2220:	edffe0ef          	jal	ra,10fe <i2c_ping>
    2224:	e119                	bnez	a0,222a <main+0x41a>
    2226:	76b0006f          	j	3190 <main+0x1380>
		printf("INA219 not found\n");
    222a:	6511                	lui	a0,0x4
    222c:	9bc50513          	addi	a0,a0,-1604 # 39bc <__clz_tab+0x718>
    2230:	b9c1                	j	1f00 <main+0xf0>
		if (i2c_ping(0x3C) == I2C_OK) {
    2232:	03c00513          	li	a0,60
    2236:	ec9fe0ef          	jal	ra,10fe <i2c_ping>
    223a:	0e051063          	bnez	a0,231a <main+0x50a>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    223e:	6411                	lui	s0,0x4
    2240:	c2018c23          	sb	zero,-968(gp) # 20000034 <ssd1306_buffer>
    2244:	cf040413          	addi	s0,s0,-784 # 3cf0 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    2248:	00044503          	lbu	a0,0(s0)
    224c:	0ff00793          	li	a5,255
    2250:	02f51e63          	bne	a0,a5,228c <main+0x47c>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    2254:	02100513          	li	a0,33
    2258:	87eff0ef          	jal	ra,12d6 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    225c:	4501                	li	a0,0
    225e:	878ff0ef          	jal	ra,12d6 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    2262:	07f00513          	li	a0,127
    2266:	870ff0ef          	jal	ra,12d6 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    226a:	02200513          	li	a0,34
    226e:	868ff0ef          	jal	ra,12d6 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    2272:	4501                	li	a0,0
    2274:	862ff0ef          	jal	ra,12d6 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    2278:	451d                	li	a0,7
    227a:	85cff0ef          	jal	ra,12d6 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    227e:	02000593          	li	a1,32
    2282:	c3818513          	addi	a0,gp,-968 # 20000034 <ssd1306_buffer>
    2286:	a13ff0ef          	jal	ra,1c98 <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    228a:	a029                	j	2294 <main+0x484>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    228c:	0405                	addi	s0,s0,1
    228e:	848ff0ef          	jal	ra,12d6 <ssd1306_cmd>
    2292:	d95d                	beqz	a0,2248 <main+0x438>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    2294:	40000613          	li	a2,1024
    2298:	4581                	li	a1,0
    229a:	c4018513          	addi	a0,gp,-960 # 2000003c <frame_buffer>
    229e:	9b9ff0ef          	jal	ra,1c56 <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    22a2:	02100513          	li	a0,33
    22a6:	830ff0ef          	jal	ra,12d6 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    22aa:	4501                	li	a0,0
    22ac:	82aff0ef          	jal	ra,12d6 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    22b0:	07f00513          	li	a0,127
    22b4:	822ff0ef          	jal	ra,12d6 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    22b8:	02200513          	li	a0,34
    22bc:	81aff0ef          	jal	ra,12d6 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    22c0:	4501                	li	a0,0
    22c2:	814ff0ef          	jal	ra,12d6 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    22c6:	451d                	li	a0,7
    22c8:	80eff0ef          	jal	ra,12d6 <ssd1306_cmd>
    22cc:	4401                	li	s0,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    22ce:	c4018793          	addi	a5,gp,-960 # 2000003c <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    22d2:	4501                	li	a0,0
    22d4:	97a2                	add	a5,a5,s0
    22d6:	02050713          	addi	a4,a0,32
    22da:	01071593          	slli	a1,a4,0x10
    22de:	81c1                	srli	a1,a1,0x10
    22e0:	8d89                	sub	a1,a1,a0
    22e2:	953e                	add	a0,a0,a5
    22e4:	ca3a                	sw	a4,20(sp)
    22e6:	c63e                	sw	a5,12(sp)
    22e8:	9b1ff0ef          	jal	ra,1c98 <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    22ec:	4752                	lw	a4,20(sp)
    22ee:	47b2                	lw	a5,12(sp)
    22f0:	853a                	mv	a0,a4
    22f2:	08000713          	li	a4,128
    22f6:	fee510e3          	bne	a0,a4,22d6 <main+0x4c6>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    22fa:	08040413          	addi	s0,s0,128
    22fe:	40000793          	li	a5,1024
    2302:	fcf416e3          	bne	s0,a5,22ce <main+0x4be>
			sprintf(str_output, "Hello Bee2!");
    2306:	658d                	lui	a1,0x3
    2308:	3c458593          	addi	a1,a1,964 # 33c4 <__clz_tab+0x120>
    230c:	04018513          	addi	a0,gp,64 # 2000043c <str_output>
    2310:	959ff0ef          	jal	ra,1c68 <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    2314:	4501                	li	a0,0
    2316:	9b3ff0ef          	jal	ra,1cc8 <ssd1306_print_str_at.constprop.0>
		printf("----Scanning I2C Bus for Devices---\n");
    231a:	650d                	lui	a0,0x3
    231c:	3d050513          	addi	a0,a0,976 # 33d0 <__clz_tab+0x12c>
    2320:	a1dff0ef          	jal	ra,1d3c <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    2324:	4401                	li	s0,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    2326:	8522                	mv	a0,s0
    2328:	dd7fe0ef          	jal	ra,10fe <i2c_ping>
    232c:	e501                	bnez	a0,2334 <main+0x524>
    232e:	8522                	mv	a0,s0
    2330:	a39ff0ef          	jal	ra,1d68 <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    2334:	0405                	addi	s0,s0,1
    2336:	0ff47413          	andi	s0,s0,255
    233a:	07f00793          	li	a5,127
    233e:	fef414e3          	bne	s0,a5,2326 <main+0x516>
		printf("----Done Scanning----\n\n");
    2342:	650d                	lui	a0,0x3
    2344:	3f450513          	addi	a0,a0,1012 # 33f4 <__clz_tab+0x150>
    2348:	be65                	j	1f00 <main+0xf0>
	Delay_Ms(100);
    234a:	00494537          	lui	a0,0x494
    234e:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c5d5>
    2352:	b6dfe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_write_raw(&dev_htu21, (uint8_t[]){0xFE}, 1);		// Soft reset
    2356:	6411                	lui	s0,0x4
    2358:	4605                	li	a2,1
    235a:	57f9                	li	a5,-2
    235c:	104c                	addi	a1,sp,36
    235e:	c6c40513          	addi	a0,s0,-916 # 3c6c <dev_htu21>
    2362:	02f10223          	sb	a5,36(sp)
    2366:	e31fe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error0: %d\n", ret);
    236a:	678d                	lui	a5,0x3
	ret = i2c_write_raw(&dev_htu21, (uint8_t[]){0xFE}, 1);		// Soft reset
    236c:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    236e:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    2372:	869ff0ef          	jal	ra,1bda <printf>
	Delay_Ms(200);
    2376:	009287b7          	lui	a5,0x928
    237a:	c0078513          	addi	a0,a5,-1024 # 927c00 <lib_i2c.c.bdeb3654+0x9203d5>
    237e:	b41fe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_write_raw(&dev_htu21, (uint8_t[]){0xF3}, 1);
    2382:	4605                	li	a2,1
    2384:	57cd                	li	a5,-13
    2386:	102c                	addi	a1,sp,40
    2388:	c6c40513          	addi	a0,s0,-916
    238c:	02f10423          	sb	a5,40(sp)
    2390:	e07fe0ef          	jal	ra,1196 <i2c_write_raw>
    2394:	85aa                	mv	a1,a0
	printf("Error3: %d\n", ret);
    2396:	650d                	lui	a0,0x3
    2398:	42850513          	addi	a0,a0,1064 # 3428 <__clz_tab+0x184>
    239c:	83fff0ef          	jal	ra,1bda <printf>
	Delay_Ms(200);
    23a0:	009287b7          	lui	a5,0x928
    23a4:	c0078513          	addi	a0,a5,-1024 # 927c00 <lib_i2c.c.bdeb3654+0x9203d5>
    23a8:	b17fe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_htu21, buff, 3);				// Read Temperature
    23ac:	458d                	li	a1,3
    23ae:	c6c40513          	addi	a0,s0,-916
    23b2:	aecff0ef          	jal	ra,169e <i2c_read_raw.constprop.0>
	printf("Error4: %d\n", ret);
    23b6:	668d                	lui	a3,0x3
	ret = i2c_read_raw(&dev_htu21, buff, 3);				// Read Temperature
    23b8:	85aa                	mv	a1,a0
	printf("Error4: %d\n", ret);
    23ba:	43468513          	addi	a0,a3,1076 # 3434 <__clz_tab+0x190>
    23be:	81dff0ef          	jal	ra,1bda <printf>
	uint16_t temp = (temp_raw * 17572) >> 16;					// >> 16 is equivalent to / 65536
    23c2:	0004d783          	lhu	a5,0(s1)
    23c6:	6591                	lui	a1,0x4
    23c8:	4a458593          	addi	a1,a1,1188 # 44a4 <ch32fun.c.6a6b5a13+0x218>
    23cc:	00879513          	slli	a0,a5,0x8
    23d0:	07c2                	slli	a5,a5,0x10
    23d2:	83c1                	srli	a5,a5,0x10
    23d4:	83a1                	srli	a5,a5,0x8
    23d6:	8d5d                	or	a0,a0,a5
    23d8:	0542                	slli	a0,a0,0x10
    23da:	8141                	srli	a0,a0,0x10
    23dc:	8ddfe0ef          	jal	ra,cb8 <__mulsi3>
	Delay_Ms(200);
    23e0:	009287b7          	lui	a5,0x928
	uint16_t temp = (temp_raw * 17572) >> 16;					// >> 16 is equivalent to / 65536
    23e4:	c62a                	sw	a0,12(sp)
	Delay_Ms(200);
    23e6:	c0078513          	addi	a0,a5,-1024 # 927c00 <lib_i2c.c.bdeb3654+0x9203d5>
    23ea:	ad5fe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_write_raw(&dev_htu21, (uint8_t[]){0xF5}, 1);
    23ee:	4605                	li	a2,1
    23f0:	57d5                	li	a5,-11
    23f2:	106c                	addi	a1,sp,44
    23f4:	c6c40513          	addi	a0,s0,-916
    23f8:	02f10623          	sb	a5,44(sp)
    23fc:	d9bfe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error4: %d\n", ret);
    2400:	668d                	lui	a3,0x3
	ret = i2c_write_raw(&dev_htu21, (uint8_t[]){0xF5}, 1);
    2402:	85aa                	mv	a1,a0
	printf("Error4: %d\n", ret);
    2404:	43468513          	addi	a0,a3,1076 # 3434 <__clz_tab+0x190>
    2408:	fd2ff0ef          	jal	ra,1bda <printf>
	Delay_Ms(200);
    240c:	009287b7          	lui	a5,0x928
    2410:	c0078513          	addi	a0,a5,-1024 # 927c00 <lib_i2c.c.bdeb3654+0x9203d5>
    2414:	aabfe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_htu21, buff, 3);				// Read Humidity
    2418:	458d                	li	a1,3
    241a:	c6c40513          	addi	a0,s0,-916
    241e:	a80ff0ef          	jal	ra,169e <i2c_read_raw.constprop.0>
    2422:	85aa                	mv	a1,a0
	printf("Error5: %d\n", ret);
    2424:	650d                	lui	a0,0x3
    2426:	44050513          	addi	a0,a0,1088 # 3440 <__clz_tab+0x19c>
    242a:	fb0ff0ef          	jal	ra,1bda <printf>
	uint16_t hum = (hum_raw * 125) >> 16;							// >> 16 is equivalent to / 65536
    242e:	0004d783          	lhu	a5,0(s1)
	printf("HTU21 Temp*100: %d, Hum: %d\n", temp, hum);
    2432:	4732                	lw	a4,12(sp)
    2434:	650d                	lui	a0,0x3
	uint16_t hum = (hum_raw * 125) >> 16;							// >> 16 is equivalent to / 65536
    2436:	00879613          	slli	a2,a5,0x8
    243a:	07c2                	slli	a5,a5,0x10
    243c:	83c1                	srli	a5,a5,0x10
    243e:	83a1                	srli	a5,a5,0x8
    2440:	8e5d                	or	a2,a2,a5
    2442:	01061793          	slli	a5,a2,0x10
    2446:	83c1                	srli	a5,a5,0x10
    2448:	00579613          	slli	a2,a5,0x5
    244c:	8e1d                	sub	a2,a2,a5
    244e:	060a                	slli	a2,a2,0x2
    2450:	963e                	add	a2,a2,a5
	printf("HTU21 Temp*100: %d, Hum: %d\n", temp, hum);
    2452:	8241                	srli	a2,a2,0x10
    2454:	01075593          	srli	a1,a4,0x10
    2458:	44c50513          	addi	a0,a0,1100 # 344c <__clz_tab+0x1a8>
    245c:	f7eff0ef          	jal	ra,1bda <printf>
    2460:	b4d9                	j	1f26 <main+0x116>
	ret = i2c_read_reg(&dev_aht21, 0x71, buff, 1);
    2462:	6411                	lui	s0,0x4
    2464:	4685                	li	a3,1
    2466:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    246a:	07100593          	li	a1,113
    246e:	bf440513          	addi	a0,s0,-1036 # 3bf4 <dev_aht21>
    2472:	e85fe0ef          	jal	ra,12f6 <i2c_read_reg>
	buff[0] = buff[0] & 0x18;
    2476:	0004c783          	lbu	a5,0(s1)
	printf("Error0: %d\n", ret);
    247a:	670d                	lui	a4,0x3
	ret = i2c_read_reg(&dev_aht21, 0x71, buff, 1);
    247c:	85aa                	mv	a1,a0
	buff[0] = buff[0] & 0x18;
    247e:	8be1                	andi	a5,a5,24
	printf("Error0: %d\n", ret);
    2480:	41c70513          	addi	a0,a4,1052 # 341c <__clz_tab+0x178>
	buff[0] = buff[0] & 0x18;
    2484:	00f48023          	sb	a5,0(s1)
	printf("Error0: %d\n", ret);
    2488:	f52ff0ef          	jal	ra,1bda <printf>
	printf("AHT21 Read reg 0x71: %02X\n", buff[0]);		// expect 0x18
    248c:	0004c583          	lbu	a1,0(s1)
    2490:	650d                	lui	a0,0x3
    2492:	47c50513          	addi	a0,a0,1148 # 347c <__clz_tab+0x1d8>
    2496:	f44ff0ef          	jal	ra,1bda <printf>
	buff[0] = 0xAC;
    249a:	678d                	lui	a5,0x3
    249c:	3ac78793          	addi	a5,a5,940 # 33ac <__clz_tab+0x108>
    24a0:	00f49023          	sh	a5,0(s1)
	ret = i2c_write_raw(&dev_aht21, buff, 3);
    24a4:	460d                	li	a2,3
    24a6:	c3018593          	addi	a1,gp,-976 # 2000002c <buff>
    24aa:	bf440513          	addi	a0,s0,-1036
	buff[2] = 0x00;
    24ae:	00048123          	sb	zero,2(s1)
	ret = i2c_write_raw(&dev_aht21, buff, 3);
    24b2:	ce5fe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error1: %d\n", ret);
    24b6:	678d                	lui	a5,0x3
	ret = i2c_write_raw(&dev_aht21, buff, 3);
    24b8:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    24ba:	49878513          	addi	a0,a5,1176 # 3498 <__clz_tab+0x1f4>
    24be:	f1cff0ef          	jal	ra,1bda <printf>
	ret = i2c_read_raw(&dev_aht21, buff, 6);		// Read sensor
    24c2:	4599                	li	a1,6
    24c4:	bf440513          	addi	a0,s0,-1036
    24c8:	9d6ff0ef          	jal	ra,169e <i2c_read_raw.constprop.0>
    24cc:	85aa                	mv	a1,a0
	printf("Error2: %d\n", ret);
    24ce:	650d                	lui	a0,0x3
    24d0:	4a450513          	addi	a0,a0,1188 # 34a4 <__clz_tab+0x200>
    24d4:	f06ff0ef          	jal	ra,1bda <printf>
	uint32_t hum = (buff[1] << 12) | (buff[2] << 4) | (buff[3] >> 4);
    24d8:	0014c583          	lbu	a1,1(s1)
    24dc:	0024c783          	lbu	a5,2(s1)
	printf("Humidity: %lu\n", hum);
    24e0:	650d                	lui	a0,0x3
	uint32_t hum = (buff[1] << 12) | (buff[2] << 4) | (buff[3] >> 4);
    24e2:	05b2                	slli	a1,a1,0xc
    24e4:	0792                	slli	a5,a5,0x4
    24e6:	8ddd                	or	a1,a1,a5
    24e8:	0034c783          	lbu	a5,3(s1)
	printf("Humidity: %lu\n", hum);
    24ec:	4b050513          	addi	a0,a0,1200 # 34b0 <__clz_tab+0x20c>
	uint32_t hum = (buff[1] << 12) | (buff[2] << 4) | (buff[3] >> 4);
    24f0:	8391                	srli	a5,a5,0x4
    24f2:	8ddd                	or	a1,a1,a5
	hum = (hum * 100) / 0x100000;
    24f4:	00159793          	slli	a5,a1,0x1
    24f8:	97ae                	add	a5,a5,a1
    24fa:	078e                	slli	a5,a5,0x3
    24fc:	95be                	add	a1,a1,a5
	printf("Humidity: %lu\n", hum);
    24fe:	81c9                	srli	a1,a1,0x12
    2500:	edaff0ef          	jal	ra,1bda <printf>
	uint32_t temp = ((buff[3] & 0xF) << 16) | (buff[4] << 8) | (buff[5]);
    2504:	0034c583          	lbu	a1,3(s1)
    2508:	000f07b7          	lui	a5,0xf0
	printf("Temperature: %lu\n", temp);
    250c:	650d                	lui	a0,0x3
	uint32_t temp = ((buff[3] & 0xF) << 16) | (buff[4] << 8) | (buff[5]);
    250e:	05c2                	slli	a1,a1,0x10
    2510:	8dfd                	and	a1,a1,a5
    2512:	0044d783          	lhu	a5,4(s1)
	printf("Temperature: %lu\n", temp);
    2516:	4c050513          	addi	a0,a0,1216 # 34c0 <__clz_tab+0x21c>
	uint32_t temp = ((buff[3] & 0xF) << 16) | (buff[4] << 8) | (buff[5]);
    251a:	00879713          	slli	a4,a5,0x8
    251e:	07c2                	slli	a5,a5,0x10
    2520:	83c1                	srli	a5,a5,0x10
    2522:	83a1                	srli	a5,a5,0x8
    2524:	8fd9                	or	a5,a5,a4
    2526:	07c2                	slli	a5,a5,0x10
    2528:	83c1                	srli	a5,a5,0x10
    252a:	8ddd                	or	a1,a1,a5
	temp = (temp * 200) / 0x100000;
    252c:	00159793          	slli	a5,a1,0x1
    2530:	97ae                	add	a5,a5,a1
    2532:	078e                	slli	a5,a5,0x3
    2534:	95be                	add	a1,a1,a5
	printf("Temperature: %lu\n", temp);
    2536:	81c5                	srli	a1,a1,0x11
    2538:	ea2ff0ef          	jal	ra,1bda <printf>
    253c:	9ffff06f          	j	1f3a <main+0x12a>
	ret = i2c_read_reg(&dev_bmp280, 0xD0, buff, 1);
    2540:	6411                	lui	s0,0x4
    2542:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2546:	4685                	li	a3,1
    2548:	0d000593          	li	a1,208
    254c:	c3c40513          	addi	a0,s0,-964 # 3c3c <dev_bmp280>
    2550:	da7fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("Error0: %d\n", ret);
    2554:	670d                	lui	a4,0x3
	ret = i2c_read_reg(&dev_bmp280, 0xD0, buff, 1);
    2556:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2558:	41c70513          	addi	a0,a4,1052 # 341c <__clz_tab+0x178>
    255c:	e7eff0ef          	jal	ra,1bda <printf>
	printf("BMP280 Read reg 0xD0: %02X\n", buff[0]);		// expect 0x58
    2560:	0004c583          	lbu	a1,0(s1)
    2564:	650d                	lui	a0,0x3
    2566:	4e850513          	addi	a0,a0,1256 # 34e8 <__clz_tab+0x244>
    256a:	e70ff0ef          	jal	ra,1bda <printf>
	ret = i2c_read_reg(&dev_bmp280, 0x88, buff, 2);
    256e:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2572:	4689                	li	a3,2
    2574:	08800593          	li	a1,136
    2578:	c3c40513          	addi	a0,s0,-964
    257c:	d7bfe0ef          	jal	ra,12f6 <i2c_read_reg>
	bmp280_calib.dig_T1 =  (int16_t)(buff[1] << 8) | buff[0];
    2580:	00049303          	lh	t1,0(s1)
	ret = i2c_read_reg(&dev_bmp280, 0x8A, buff, 2);
    2584:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2588:	4689                	li	a3,2
    258a:	08a00593          	li	a1,138
    258e:	c3c40513          	addi	a0,s0,-964
	bmp280_calib.dig_T1 =  (int16_t)(buff[1] << 8) | buff[0];
    2592:	cc1a                	sw	t1,24(sp)
	ret = i2c_read_reg(&dev_bmp280, 0x8A, buff, 2);
    2594:	d63fe0ef          	jal	ra,12f6 <i2c_read_reg>
	bmp280_calib.dig_T2 =  (int16_t)(buff[1] << 8) | buff[0];
    2598:	00049703          	lh	a4,0(s1)
	ret = i2c_read_reg(&dev_bmp280, 0x8C, buff, 2);
    259c:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    25a0:	4689                	li	a3,2
    25a2:	08c00593          	li	a1,140
    25a6:	c3c40513          	addi	a0,s0,-964
	bmp280_calib.dig_T2 =  (int16_t)(buff[1] << 8) | buff[0];
    25aa:	c63a                	sw	a4,12(sp)
	ret = i2c_read_reg(&dev_bmp280, 0x8C, buff, 2);
    25ac:	d4bfe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("dig_T1: %lu\n", bmp280_calib.dig_T1);
    25b0:	4362                	lw	t1,24(sp)
	bmp280_calib.dig_T3 =  (int16_t)(buff[1] << 8) | buff[0];
    25b2:	00049703          	lh	a4,0(s1)
	printf("dig_T1: %lu\n", bmp280_calib.dig_T1);
    25b6:	650d                	lui	a0,0x3
    25b8:	859a                	mv	a1,t1
    25ba:	50450513          	addi	a0,a0,1284 # 3504 <__clz_tab+0x260>
	bmp280_calib.dig_T3 =  (int16_t)(buff[1] << 8) | buff[0];
    25be:	ca3a                	sw	a4,20(sp)
	printf("dig_T1: %lu\n", bmp280_calib.dig_T1);
    25c0:	e1aff0ef          	jal	ra,1bda <printf>
	printf("dig_T2: %lu\n", bmp280_calib.dig_T2);
    25c4:	45b2                	lw	a1,12(sp)
    25c6:	650d                	lui	a0,0x3
    25c8:	51450513          	addi	a0,a0,1300 # 3514 <__clz_tab+0x270>
    25cc:	e0eff0ef          	jal	ra,1bda <printf>
	printf("dig_T3: %ld\n", bmp280_calib.dig_T3);
    25d0:	45d2                	lw	a1,20(sp)
    25d2:	650d                	lui	a0,0x3
    25d4:	52450513          	addi	a0,a0,1316 # 3524 <__clz_tab+0x280>
    25d8:	e02ff0ef          	jal	ra,1bda <printf>
	ret = i2c_write_reg(&dev_bmp280, 0xF4, (uint8_t[]){0x5D}, 1);
    25dc:	05d00793          	li	a5,93
    25e0:	1070                	addi	a2,sp,44
    25e2:	4685                	li	a3,1
    25e4:	0f400593          	li	a1,244
    25e8:	c3c40513          	addi	a0,s0,-964
    25ec:	02f10623          	sb	a5,44(sp)
    25f0:	ef9fe0ef          	jal	ra,14e8 <i2c_write_reg>
	printf("Error1: %d\n", ret);
    25f4:	670d                	lui	a4,0x3
	ret = i2c_write_reg(&dev_bmp280, 0xF4, (uint8_t[]){0x5D}, 1);
    25f6:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    25f8:	49870513          	addi	a0,a4,1176 # 3498 <__clz_tab+0x1f4>
    25fc:	ddeff0ef          	jal	ra,1bda <printf>
	ret = i2c_read_reg(&dev_bmp280, 0xF7, buff, 6);			// read sensors
    2600:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2604:	4699                	li	a3,6
    2606:	0f700593          	li	a1,247
    260a:	c3c40513          	addi	a0,s0,-964
    260e:	ce9fe0ef          	jal	ra,12f6 <i2c_read_reg>
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    2612:	4362                	lw	t1,24(sp)
	uint32_t raw_temp = (uint32_t)(buff[3]*4096 + buff[4]*16 + (buff[5]/16));
    2614:	0034c503          	lbu	a0,3(s1)
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    2618:	45b2                	lw	a1,12(sp)
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    261a:	41f35793          	srai	a5,t1,0x1f
    261e:	01379713          	slli	a4,a5,0x13
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    2622:	3ff7f793          	andi	a5,a5,1023
    2626:	979a                	add	a5,a5,t1
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    2628:	834d                	srli	a4,a4,0x13
    262a:	971a                	add	a4,a4,t1
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    262c:	87a9                	srai	a5,a5,0xa
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    262e:	00555413          	srli	s0,a0,0x5
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    2632:	8109                	srli	a0,a0,0x2
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    2634:	8735                	srai	a4,a4,0xd
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    2636:	8d1d                	sub	a0,a0,a5
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    2638:	8c19                	sub	s0,s0,a4
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    263a:	e7efe0ef          	jal	ra,cb8 <__mulsi3>
    263e:	c62a                	sw	a0,12(sp)
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    2640:	85a2                	mv	a1,s0
    2642:	8522                	mv	a0,s0
    2644:	e74fe0ef          	jal	ra,cb8 <__mulsi3>
    2648:	45d2                	lw	a1,20(sp)
    264a:	e6efe0ef          	jal	ra,cb8 <__mulsi3>
	uint32_t temp = t_fine/5120;
    264e:	47b2                	lw	a5,12(sp)
    2650:	6585                	lui	a1,0x1
    2652:	40058593          	addi	a1,a1,1024 # 1400 <i2c_read_reg+0x10a>
    2656:	953e                	add	a0,a0,a5
    2658:	e80fe0ef          	jal	ra,cd8 <__hidden___udivsi3>
    265c:	85aa                	mv	a1,a0
	printf("Temperature: %lu\n", temp);
    265e:	650d                	lui	a0,0x3
    2660:	4c050513          	addi	a0,a0,1216 # 34c0 <__clz_tab+0x21c>
    2664:	d76ff0ef          	jal	ra,1bda <printf>
    2668:	8e7ff06f          	j	1f4e <main+0x13e>
	ret = i2c_write_reg(&dev_hdc1080, 0x02, (uint8_t[]){0x10}, 1);	// Set configuration register
    266c:	6411                	lui	s0,0x4
    266e:	4685                	li	a3,1
    2670:	1030                	addi	a2,sp,40
    2672:	47c1                	li	a5,16
    2674:	4589                	li	a1,2
    2676:	c6040513          	addi	a0,s0,-928 # 3c60 <dev_hdc1080>
    267a:	02f10423          	sb	a5,40(sp)
    267e:	e6bfe0ef          	jal	ra,14e8 <i2c_write_reg>
	printf("Error0: %d\n", ret);
    2682:	678d                	lui	a5,0x3
	ret = i2c_write_reg(&dev_hdc1080, 0x02, (uint8_t[]){0x10}, 1);	// Set configuration register
    2684:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2686:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    268a:	d50ff0ef          	jal	ra,1bda <printf>
	ret = i2c_write_raw(&dev_hdc1080, (uint8_t[]){0x00}, 1);		// Trigger measurement
    268e:	4605                	li	a2,1
    2690:	106c                	addi	a1,sp,44
    2692:	c6040513          	addi	a0,s0,-928
    2696:	02010623          	sb	zero,44(sp)
    269a:	afdfe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error1: %d\n", ret);
    269e:	678d                	lui	a5,0x3
	ret = i2c_write_raw(&dev_hdc1080, (uint8_t[]){0x00}, 1);		// Trigger measurement
    26a0:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    26a2:	49878513          	addi	a0,a5,1176 # 3498 <__clz_tab+0x1f4>
    26a6:	d34ff0ef          	jal	ra,1bda <printf>
	Delay_Ms(100);											//! Wait for measurement to complete
    26aa:	00494537          	lui	a0,0x494
    26ae:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c5d5>
    26b2:	80dfe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_hdc1080, buff, 4);				// Read data register
    26b6:	4591                	li	a1,4
    26b8:	c6040513          	addi	a0,s0,-928
    26bc:	fe3fe0ef          	jal	ra,169e <i2c_read_raw.constprop.0>
    26c0:	85aa                	mv	a1,a0
	printf("Error2: %d\n", ret);
    26c2:	650d                	lui	a0,0x3
    26c4:	4a450513          	addi	a0,a0,1188 # 34a4 <__clz_tab+0x200>
    26c8:	d12ff0ef          	jal	ra,1bda <printf>
	printf("HDC1080 Read: %02X %02X %02X %02X\n", buff[0], buff[1], buff[2], buff[3]);
    26cc:	0034c703          	lbu	a4,3(s1)
    26d0:	0024c683          	lbu	a3,2(s1)
    26d4:	0014c603          	lbu	a2,1(s1)
    26d8:	0004c583          	lbu	a1,0(s1)
    26dc:	650d                	lui	a0,0x3
    26de:	54850513          	addi	a0,a0,1352 # 3548 <__clz_tab+0x2a4>
    26e2:	cf8ff0ef          	jal	ra,1bda <printf>
	uint32_t hum = (raw_hum * 100 / 65536);
    26e6:	0024d783          	lhu	a5,2(s1)
	printf("Temperature: %lu\n", temp);
    26ea:	650d                	lui	a0,0x3
    26ec:	4c050513          	addi	a0,a0,1216 # 34c0 <__clz_tab+0x21c>
	uint32_t hum = (raw_hum * 100 / 65536);
    26f0:	00879413          	slli	s0,a5,0x8
    26f4:	07c2                	slli	a5,a5,0x10
    26f6:	83c1                	srli	a5,a5,0x10
    26f8:	83a1                	srli	a5,a5,0x8
    26fa:	8c5d                	or	s0,s0,a5
    26fc:	01041793          	slli	a5,s0,0x10
    2700:	83c1                	srli	a5,a5,0x10
    2702:	00179413          	slli	s0,a5,0x1
    2706:	943e                	add	s0,s0,a5
    2708:	040e                	slli	s0,s0,0x3
    270a:	943e                	add	s0,s0,a5
	uint32_t temp = (raw_temp * 165 / 65536) - 40;
    270c:	0004d783          	lhu	a5,0(s1)
	uint32_t hum = (raw_hum * 100 / 65536);
    2710:	8039                	srli	s0,s0,0xe
	uint32_t temp = (raw_temp * 165 / 65536) - 40;
    2712:	00879593          	slli	a1,a5,0x8
    2716:	07c2                	slli	a5,a5,0x10
    2718:	83c1                	srli	a5,a5,0x10
    271a:	83a1                	srli	a5,a5,0x8
    271c:	8ddd                	or	a1,a1,a5
    271e:	01059793          	slli	a5,a1,0x10
    2722:	83c1                	srli	a5,a5,0x10
    2724:	00279593          	slli	a1,a5,0x2
    2728:	95be                	add	a1,a1,a5
    272a:	00559793          	slli	a5,a1,0x5
    272e:	95be                	add	a1,a1,a5
    2730:	85c1                	srai	a1,a1,0x10
	printf("Temperature: %lu\n", temp);
    2732:	fd858593          	addi	a1,a1,-40
    2736:	ca4ff0ef          	jal	ra,1bda <printf>
	printf("Humidity: %lu\n", hum);
    273a:	650d                	lui	a0,0x3
    273c:	85a2                	mv	a1,s0
    273e:	4b050513          	addi	a0,a0,1200 # 34b0 <__clz_tab+0x20c>
    2742:	c98ff0ef          	jal	ra,1bda <printf>
    2746:	81dff06f          	j	1f62 <main+0x152>
	ret = i2c_write_raw(&dev_si7021, (uint8_t[]){0xE3}, 1);
    274a:	6411                	lui	s0,0x4
    274c:	4605                	li	a2,1
    274e:	578d                	li	a5,-29
    2750:	106c                	addi	a1,sp,44
    2752:	cd840513          	addi	a0,s0,-808 # 3cd8 <dev_si7021>
    2756:	02f10623          	sb	a5,44(sp)
    275a:	a3dfe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error0: %d\n", ret);
    275e:	678d                	lui	a5,0x3
	ret = i2c_write_raw(&dev_si7021, (uint8_t[]){0xE3}, 1);
    2760:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2762:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    2766:	c74ff0ef          	jal	ra,1bda <printf>
	ret = i2c_read_raw(&dev_si7021, buff, 4);				// Read Temperature and Humidity
    276a:	4591                	li	a1,4
    276c:	cd840513          	addi	a0,s0,-808
    2770:	f2ffe0ef          	jal	ra,169e <i2c_read_raw.constprop.0>
	printf("Error0: %d\n", ret);
    2774:	678d                	lui	a5,0x3
	ret = i2c_read_raw(&dev_si7021, buff, 4);				// Read Temperature and Humidity
    2776:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2778:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    277c:	c5eff0ef          	jal	ra,1bda <printf>
	uint32_t temp = ((raw_temp * 17572) >> 16) - 4685;		// >> 16 is equivalent to / 65536
    2780:	0004d783          	lhu	a5,0(s1)
    2784:	6591                	lui	a1,0x4
    2786:	4a458593          	addi	a1,a1,1188 # 44a4 <ch32fun.c.6a6b5a13+0x218>
    278a:	00879513          	slli	a0,a5,0x8
    278e:	07c2                	slli	a5,a5,0x10
    2790:	83c1                	srli	a5,a5,0x10
    2792:	83a1                	srli	a5,a5,0x8
    2794:	8d5d                	or	a0,a0,a5
    2796:	0542                	slli	a0,a0,0x10
    2798:	8141                	srli	a0,a0,0x10
    279a:	d1efe0ef          	jal	ra,cb8 <__mulsi3>
	printf("Temp*100: %lu\n", temp);
    279e:	77fd                	lui	a5,0xfffff
    27a0:	db378793          	addi	a5,a5,-589 # ffffedb3 <_eusrstack+0xdfffe5b3>
	uint32_t temp = ((raw_temp * 17572) >> 16) - 4685;		// >> 16 is equivalent to / 65536
    27a4:	41055593          	srai	a1,a0,0x10
	printf("Temp*100: %lu\n", temp);
    27a8:	650d                	lui	a0,0x3
    27aa:	95be                	add	a1,a1,a5
    27ac:	58050513          	addi	a0,a0,1408 # 3580 <__clz_tab+0x2dc>
    27b0:	c2aff0ef          	jal	ra,1bda <printf>
	uint32_t hum = ((raw_hum * 12500) >> 16) - 600;
    27b4:	0024d783          	lhu	a5,2(s1)
    27b8:	658d                	lui	a1,0x3
    27ba:	0d458593          	addi	a1,a1,212 # 30d4 <main+0x12c4>
    27be:	00879513          	slli	a0,a5,0x8
    27c2:	07c2                	slli	a5,a5,0x10
    27c4:	83c1                	srli	a5,a5,0x10
    27c6:	83a1                	srli	a5,a5,0x8
    27c8:	8d5d                	or	a0,a0,a5
    27ca:	0542                	slli	a0,a0,0x10
    27cc:	8141                	srli	a0,a0,0x10
    27ce:	ceafe0ef          	jal	ra,cb8 <__mulsi3>
    27d2:	41055593          	srai	a1,a0,0x10
	printf("Hum*100: %lu\n", hum);
    27d6:	650d                	lui	a0,0x3
    27d8:	da858593          	addi	a1,a1,-600
    27dc:	59050513          	addi	a0,a0,1424 # 3590 <__clz_tab+0x2ec>
    27e0:	bfaff0ef          	jal	ra,1bda <printf>
    27e4:	f92ff06f          	j	1f76 <main+0x166>
	ret = i2c_read_reg(&dev_max44009, 0x03, buff, 2);		// Read lux registers
    27e8:	6511                	lui	a0,0x4
    27ea:	4689                	li	a3,2
    27ec:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    27f0:	458d                	li	a1,3
    27f2:	c9c50513          	addi	a0,a0,-868 # 3c9c <dev_max44009>
    27f6:	b01fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("Error0: %d\n", ret);
    27fa:	678d                	lui	a5,0x3
	ret = i2c_read_reg(&dev_max44009, 0x03, buff, 2);		// Read lux registers
    27fc:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    27fe:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    2802:	bd8ff0ef          	jal	ra,1bda <printf>
	int exponent = (buff[0] & 0xF0) >> 4;		// Get exponent from first byte
    2806:	0004c403          	lbu	s0,0(s1)
	int mantissa = ((buff[0] & 0x0F)) << 4 | (buff[1] & 0x0F);	// Get mantissa from both bytes
    280a:	0014c603          	lbu	a2,1(s1)
	printf("Max44009: %02X %02X\n", buff[0], buff[1]);
    280e:	650d                	lui	a0,0x3
    2810:	85a2                	mv	a1,s0
    2812:	5b450513          	addi	a0,a0,1460 # 35b4 <__clz_tab+0x310>
    2816:	c632                	sw	a2,12(sp)
    2818:	bc2ff0ef          	jal	ra,1bda <printf>
	int mantissa = ((buff[0] & 0x0F)) << 4 | (buff[1] & 0x0F);	// Get mantissa from both bytes
    281c:	4632                	lw	a2,12(sp)
    281e:	00441793          	slli	a5,s0,0x4
    2822:	0ff7f793          	andi	a5,a5,255
    2826:	00f67593          	andi	a1,a2,15
    282a:	8fcd                	or	a5,a5,a1
	int exponent = (buff[0] & 0xF0) >> 4;		// Get exponent from first byte
    282c:	00445593          	srli	a1,s0,0x4
	uint16_t lux = (1 << exponent) * mantissa * 45;
    2830:	00b795b3          	sll	a1,a5,a1
    2834:	00159793          	slli	a5,a1,0x1
    2838:	95be                	add	a1,a1,a5
    283a:	00459793          	slli	a5,a1,0x4
    283e:	40b785b3          	sub	a1,a5,a1
	printf("lux*1000: %lu\n", lux);
    2842:	05c2                	slli	a1,a1,0x10
    2844:	650d                	lui	a0,0x3
    2846:	81c1                	srli	a1,a1,0x10
    2848:	5cc50513          	addi	a0,a0,1484 # 35cc <__clz_tab+0x328>
    284c:	b8eff0ef          	jal	ra,1bda <printf>
    2850:	f3aff06f          	j	1f8a <main+0x17a>
	ret = i2c_write_raw(&dev_AP3216, (uint8_t[]){0x00, 0x03}, 2);		// Trigger measurement
    2854:	6411                	lui	s0,0x4
    2856:	30000793          	li	a5,768
    285a:	4609                	li	a2,2
    285c:	106c                	addi	a1,sp,44
    285e:	bdc40513          	addi	a0,s0,-1060 # 3bdc <dev_AP3216>
    2862:	02f11623          	sh	a5,44(sp)
    2866:	931fe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error0: %d\n", ret);
    286a:	678d                	lui	a5,0x3
	ret = i2c_write_raw(&dev_AP3216, (uint8_t[]){0x00, 0x03}, 2);		// Trigger measurement
    286c:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    286e:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    2872:	b68ff0ef          	jal	ra,1bda <printf>
	ret = i2c_read_reg(&dev_AP3216, 0x0C, buff, 4);		// Read data registers
    2876:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    287a:	4691                	li	a3,4
    287c:	45b1                	li	a1,12
    287e:	bdc40513          	addi	a0,s0,-1060
    2882:	a75fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("Error1: %d\n", ret);
    2886:	678d                	lui	a5,0x3
	ret = i2c_read_reg(&dev_AP3216, 0x0C, buff, 4);		// Read data registers
    2888:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    288a:	49878513          	addi	a0,a5,1176 # 3498 <__clz_tab+0x1f4>
    288e:	b4cff0ef          	jal	ra,1bda <printf>
	uint16_t lux = (buff[1] << 8) + buff[0];
    2892:	0014c583          	lbu	a1,1(s1)
	uint8_t high_byte = buff[3] & 0x00111111;		// Get high byte of lux
    2896:	0034c783          	lbu	a5,3(s1)
	uint16_t lux = (buff[1] << 8) + buff[0];
    289a:	0004c703          	lbu	a4,0(s1)
	uint8_t low_byte = buff[2] & 0b00001111;		// Get low byte of lux
    289e:	0024c603          	lbu	a2,2(s1)
	uint16_t lux = (buff[1] << 8) + buff[0];
    28a2:	05a2                	slli	a1,a1,0x8
    28a4:	95ba                	add	a1,a1,a4
	uint8_t high_byte = buff[3] & 0x00111111;		// Get high byte of lux
    28a6:	8bc5                	andi	a5,a5,17
	uint16_t proximity = (high_byte << 4) + low_byte;
    28a8:	0792                	slli	a5,a5,0x4
	uint8_t low_byte = buff[2] & 0b00001111;		// Get low byte of lux
    28aa:	8a3d                	andi	a2,a2,15
	printf("lux: %d, proximity: %d\n", lux, proximity);
    28ac:	05c2                	slli	a1,a1,0x10
    28ae:	650d                	lui	a0,0x3
    28b0:	963e                	add	a2,a2,a5
    28b2:	81c1                	srli	a1,a1,0x10
    28b4:	5f050513          	addi	a0,a0,1520 # 35f0 <__clz_tab+0x34c>
    28b8:	b22ff0ef          	jal	ra,1bda <printf>
    28bc:	ee0ff06f          	j	1f9c <main+0x18c>
	ret = i2c_read_reg(&dev_vl35lox, 0xC0, &status, 1);		// Read system status register
    28c0:	6411                	lui	s0,0x4
    28c2:	1070                	addi	a2,sp,44
    28c4:	4685                	li	a3,1
    28c6:	0c000593          	li	a1,192
    28ca:	ce440513          	addi	a0,s0,-796 # 3ce4 <dev_vl35lox>
    28ce:	a29fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("Error0: %d\n", ret);
    28d2:	678d                	lui	a5,0x3
	ret = i2c_read_reg(&dev_vl35lox, 0xC0, &status, 1);		// Read system status register
    28d4:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    28d6:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    28da:	b00ff0ef          	jal	ra,1bda <printf>
	printf("status: %02X\n", status);						// expect 0xEE
    28de:	02c14583          	lbu	a1,44(sp)
    28e2:	650d                	lui	a0,0x3
    28e4:	61c50513          	addi	a0,a0,1564 # 361c <__clz_tab+0x378>
    28e8:	af2ff0ef          	jal	ra,1bda <printf>
	ret = i2c_write_reg(&dev_vl35lox, 0x00, (uint8_t[]){0x00}, 1);
    28ec:	1030                	addi	a2,sp,40
    28ee:	4685                	li	a3,1
    28f0:	4581                	li	a1,0
    28f2:	ce440513          	addi	a0,s0,-796
    28f6:	02010423          	sb	zero,40(sp)
    28fa:	beffe0ef          	jal	ra,14e8 <i2c_write_reg>
	Delay_Ms(100);											// Wait for measurement to complete
    28fe:	004947b7          	lui	a5,0x494
    2902:	e0078513          	addi	a0,a5,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c5d5>
    2906:	db8fe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_reg(&dev_vl35lox, 0x13, buff, 1);
    290a:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    290e:	4685                	li	a3,1
    2910:	45cd                	li	a1,19
    2912:	ce440513          	addi	a0,s0,-796
    2916:	9e1fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("Error0: %d\n", ret);
    291a:	670d                	lui	a4,0x3
	ret = i2c_read_reg(&dev_vl35lox, 0x13, buff, 1);
    291c:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    291e:	41c70513          	addi	a0,a4,1052 # 341c <__clz_tab+0x178>
    2922:	ab8ff0ef          	jal	ra,1bda <printf>
	printf("VL53L0X Read reg 0x13: %02X\n", buff[0]);
    2926:	c3018713          	addi	a4,gp,-976 # 2000002c <buff>
    292a:	00074583          	lbu	a1,0(a4)
    292e:	650d                	lui	a0,0x3
    2930:	62c50513          	addi	a0,a0,1580 # 362c <__clz_tab+0x388>
    2934:	aa6ff0ef          	jal	ra,1bda <printf>
	Delay_Ms(100);	
    2938:	004947b7          	lui	a5,0x494
    293c:	e0078513          	addi	a0,a5,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c5d5>
    2940:	d7efe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_reg(&dev_vl35lox, 0x14 + 10, buff, 2);				// Read distance register
    2944:	4689                	li	a3,2
    2946:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    294a:	45f9                	li	a1,30
    294c:	ce440513          	addi	a0,s0,-796
    2950:	9a7fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("Error1: %d\n", ret);
    2954:	670d                	lui	a4,0x3
	ret = i2c_read_reg(&dev_vl35lox, 0x14 + 10, buff, 2);				// Read distance register
    2956:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2958:	49870513          	addi	a0,a4,1176 # 3498 <__clz_tab+0x1f4>
    295c:	a7eff0ef          	jal	ra,1bda <printf>
	printf("VL53L0X Read: %02X %02X\n", buff[0], buff[1]);
    2960:	c3018793          	addi	a5,gp,-976 # 2000002c <buff>
    2964:	0017c603          	lbu	a2,1(a5)
    2968:	0007c583          	lbu	a1,0(a5)
    296c:	650d                	lui	a0,0x3
    296e:	64c50513          	addi	a0,a0,1612 # 364c <__clz_tab+0x3a8>
    2972:	a68ff0ef          	jal	ra,1bda <printf>
	uint16_t distance = (buff[1] << 8) + buff[0];
    2976:	c3018713          	addi	a4,gp,-976 # 2000002c <buff>
    297a:	00174583          	lbu	a1,1(a4)
    297e:	c3018793          	addi	a5,gp,-976 # 2000002c <buff>
    2982:	0007c783          	lbu	a5,0(a5)
    2986:	05a2                	slli	a1,a1,0x8
	printf("distance: %d\n", distance);
    2988:	650d                	lui	a0,0x3
	uint16_t distance = (buff[1] << 8) + buff[0];
    298a:	95be                	add	a1,a1,a5
	printf("distance: %d\n", distance);
    298c:	05c2                	slli	a1,a1,0x10
    298e:	81c1                	srli	a1,a1,0x10
    2990:	66850513          	addi	a0,a0,1640 # 3668 <__clz_tab+0x3c4>
    2994:	a46ff0ef          	jal	ra,1bda <printf>
    2998:	e18ff06f          	j	1fb0 <main+0x1a0>
	ret = i2c_read_reg(&dev_ens160, 0x00, buff, 2);		// Read ENS160 ID
    299c:	6411                	lui	s0,0x4
    299e:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    29a2:	4689                	li	a3,2
    29a4:	4581                	li	a1,0
    29a6:	c5440513          	addi	a0,s0,-940 # 3c54 <dev_ens160>
    29aa:	94dfe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("ENS160 ID: %04X\n", ens160_id);
    29ae:	0004d583          	lhu	a1,0(s1)
    29b2:	650d                	lui	a0,0x3
    29b4:	68c50513          	addi	a0,a0,1676 # 368c <__clz_tab+0x3e8>
    29b8:	a22ff0ef          	jal	ra,1bda <printf>
	ret = i2c_write_reg(&dev_ens160, 0x10, (uint8_t[]){0x02}, 1);		// set Mode
    29bc:	4789                	li	a5,2
    29be:	1070                	addi	a2,sp,44
    29c0:	4685                	li	a3,1
    29c2:	45c1                	li	a1,16
    29c4:	c5440513          	addi	a0,s0,-940
    29c8:	02f10623          	sb	a5,44(sp)
    29cc:	b1dfe0ef          	jal	ra,14e8 <i2c_write_reg>
	ret = i2c_read_reg(&dev_ens160, 0x21, buff, 5);		
    29d0:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    29d4:	4695                	li	a3,5
    29d6:	02100593          	li	a1,33
    29da:	c5440513          	addi	a0,s0,-940
    29de:	919fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("ENS160 AQI: %d\n", buff[0]);
    29e2:	0004c583          	lbu	a1,0(s1)
    29e6:	650d                	lui	a0,0x3
    29e8:	6a050513          	addi	a0,a0,1696 # 36a0 <__clz_tab+0x3fc>
    29ec:	9eeff0ef          	jal	ra,1bda <printf>
	printf("ENS160 TVOC: %d\n", tvoc);
    29f0:	0024c783          	lbu	a5,2(s1)
    29f4:	0014c583          	lbu	a1,1(s1)
    29f8:	650d                	lui	a0,0x3
    29fa:	07a2                	slli	a5,a5,0x8
    29fc:	8ddd                	or	a1,a1,a5
    29fe:	6b050513          	addi	a0,a0,1712 # 36b0 <__clz_tab+0x40c>
    2a02:	9d8ff0ef          	jal	ra,1bda <printf>
	printf("ENS160 eCO2: %d\n", eco2);
    2a06:	0044c783          	lbu	a5,4(s1)
    2a0a:	0034c583          	lbu	a1,3(s1)
    2a0e:	650d                	lui	a0,0x3
    2a10:	07a2                	slli	a5,a5,0x8
    2a12:	8ddd                	or	a1,a1,a5
    2a14:	6c450513          	addi	a0,a0,1732 # 36c4 <__clz_tab+0x420>
    2a18:	9c2ff0ef          	jal	ra,1bda <printf>
    2a1c:	da8ff06f          	j	1fc4 <main+0x1b4>
	ret = i2c_write_raw(&dev_sgp30, (uint8_t[]){0x36, 0x82}, 2);
    2a20:	6411                	lui	s0,0x4
    2a22:	77e1                	lui	a5,0xffff8
    2a24:	4609                	li	a2,2
    2a26:	23678793          	addi	a5,a5,566 # ffff8236 <_eusrstack+0xdfff7a36>
    2a2a:	100c                	addi	a1,sp,32
    2a2c:	cc040513          	addi	a0,s0,-832 # 3cc0 <dev_sgp30>
    2a30:	02f11023          	sh	a5,32(sp)
    2a34:	f62fe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error0: %d\n", ret);					// Initialize SGP30
    2a38:	678d                	lui	a5,0x3
	ret = i2c_write_raw(&dev_sgp30, (uint8_t[]){0x36, 0x82}, 2);
    2a3a:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);					// Initialize SGP30
    2a3c:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    2a40:	99aff0ef          	jal	ra,1bda <printf>
	ret = i2c_read_raw(&dev_sgp30, buff, 3);		// Read ID
    2a44:	458d                	li	a1,3
    2a46:	cc040513          	addi	a0,s0,-832
    2a4a:	c55fe0ef          	jal	ra,169e <i2c_read_raw.constprop.0>
	printf("Error1: %d\n", ret);
    2a4e:	670d                	lui	a4,0x3
	ret = i2c_read_raw(&dev_sgp30, buff, 3);		// Read ID
    2a50:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2a52:	49870513          	addi	a0,a4,1176 # 3498 <__clz_tab+0x1f4>
    2a56:	984ff0ef          	jal	ra,1bda <printf>
	uint32_t id = (buff[0] << 16) | (buff[1] << 8) | buff[2];		// Get ID	
    2a5a:	0004c783          	lbu	a5,0(s1)
    2a5e:	0014c583          	lbu	a1,1(s1)
	printf("SGP30 ID: %04X\n", id);
    2a62:	650d                	lui	a0,0x3
	uint32_t id = (buff[0] << 16) | (buff[1] << 8) | buff[2];		// Get ID	
    2a64:	07c2                	slli	a5,a5,0x10
    2a66:	05a2                	slli	a1,a1,0x8
    2a68:	8fcd                	or	a5,a5,a1
    2a6a:	0024c583          	lbu	a1,2(s1)
	printf("SGP30 ID: %04X\n", id);
    2a6e:	6e850513          	addi	a0,a0,1768 # 36e8 <__clz_tab+0x444>
    2a72:	8ddd                	or	a1,a1,a5
    2a74:	966ff0ef          	jal	ra,1bda <printf>
	ret = i2c_write_raw(&dev_sgp30, (uint8_t[]){0x20, 0x03}, 2);
    2a78:	32000793          	li	a5,800
    2a7c:	4609                	li	a2,2
    2a7e:	104c                	addi	a1,sp,36
    2a80:	cc040513          	addi	a0,s0,-832
    2a84:	02f11223          	sh	a5,36(sp)
    2a88:	f0efe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error2: %d\n", ret);		// Initialize SGP30	
    2a8c:	628d                	lui	t0,0x3
	ret = i2c_write_raw(&dev_sgp30, (uint8_t[]){0x20, 0x03}, 2);
    2a8e:	85aa                	mv	a1,a0
	printf("Error2: %d\n", ret);		// Initialize SGP30	
    2a90:	4a428513          	addi	a0,t0,1188 # 34a4 <__clz_tab+0x200>
    2a94:	946ff0ef          	jal	ra,1bda <printf>
	ret = i2c_write_raw(&dev_sgp30, (uint8_t[]){0x20, 0x08}, 2);
    2a98:	6785                	lui	a5,0x1
    2a9a:	4609                	li	a2,2
    2a9c:	82078793          	addi	a5,a5,-2016 # 820 <__muldf3+0x15e>
    2aa0:	102c                	addi	a1,sp,40
    2aa2:	cc040513          	addi	a0,s0,-832
    2aa6:	02f11423          	sh	a5,40(sp)
    2aaa:	eecfe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error0: %d\n", ret);		// Start measurement
    2aae:	678d                	lui	a5,0x3
	ret = i2c_write_raw(&dev_sgp30, (uint8_t[]){0x20, 0x08}, 2);
    2ab0:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);		// Start measurement
    2ab2:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    2ab6:	924ff0ef          	jal	ra,1bda <printf>
	Delay_Ms(100);		// Wait for measurement
    2aba:	00494337          	lui	t1,0x494
    2abe:	e0030513          	addi	a0,t1,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c5d5>
    2ac2:	bfcfe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_sgp30, buff, 6);		// Read sensor data
    2ac6:	4599                	li	a1,6
    2ac8:	cc040513          	addi	a0,s0,-832
    2acc:	bd3fe0ef          	jal	ra,169e <i2c_read_raw.constprop.0>
	printf("Error1: %d\n", ret);
    2ad0:	670d                	lui	a4,0x3
	ret = i2c_read_raw(&dev_sgp30, buff, 6);		// Read sensor data
    2ad2:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2ad4:	49870513          	addi	a0,a4,1176 # 3498 <__clz_tab+0x1f4>
    2ad8:	902ff0ef          	jal	ra,1bda <printf>
	uint16_t co2 = (buff[0] << 8) | buff[1];		// CO2 in ppm
    2adc:	0004d783          	lhu	a5,0(s1)
    2ae0:	0034c683          	lbu	a3,3(s1)
	ret = i2c_write_raw(&dev_sgp30, (uint8_t[]){0x20, 0x50}, 2);
    2ae4:	4609                	li	a2,2
    2ae6:	00879713          	slli	a4,a5,0x8
    2aea:	07c2                	slli	a5,a5,0x10
    2aec:	83c1                	srli	a5,a5,0x10
    2aee:	83a1                	srli	a5,a5,0x8
    2af0:	8fd9                	or	a5,a5,a4
    2af2:	01079713          	slli	a4,a5,0x10
    2af6:	0044c783          	lbu	a5,4(s1)
    2afa:	8341                	srli	a4,a4,0x10
    2afc:	106c                	addi	a1,sp,44
    2afe:	07a2                	slli	a5,a5,0x8
    2b00:	8fd5                	or	a5,a5,a3
    2b02:	00879693          	slli	a3,a5,0x8
    2b06:	83a1                	srli	a5,a5,0x8
    2b08:	8fd5                	or	a5,a5,a3
    2b0a:	01079693          	slli	a3,a5,0x10
    2b0e:	6795                	lui	a5,0x5
    2b10:	82c1                	srli	a3,a3,0x10
    2b12:	02078793          	addi	a5,a5,32 # 5020 <ch32fun.c.6a6b5a13+0xd94>
    2b16:	cc040513          	addi	a0,s0,-832
    2b1a:	cc3a                	sw	a4,24(sp)
	uint16_t tvoc = (buff[3] << 8) | buff[4];		// TVOC in ppb
    2b1c:	ca36                	sw	a3,20(sp)
	ret = i2c_write_raw(&dev_sgp30, (uint8_t[]){0x20, 0x50}, 2);
    2b1e:	02f11623          	sh	a5,44(sp)
    2b22:	e74fe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error2: %d\n", ret);		// Set baseline
    2b26:	628d                	lui	t0,0x3
	ret = i2c_write_raw(&dev_sgp30, (uint8_t[]){0x20, 0x50}, 2);
    2b28:	85aa                	mv	a1,a0
	printf("Error2: %d\n", ret);		// Set baseline
    2b2a:	4a428513          	addi	a0,t0,1188 # 34a4 <__clz_tab+0x200>
    2b2e:	8acff0ef          	jal	ra,1bda <printf>
	Delay_Ms(100);		// Wait for baseline to be
    2b32:	00494337          	lui	t1,0x494
    2b36:	e0030513          	addi	a0,t1,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c5d5>
    2b3a:	b84fe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_sgp30, buff, 6);		// Read baseline data
    2b3e:	4599                	li	a1,6
    2b40:	cc040513          	addi	a0,s0,-832
    2b44:	b5bfe0ef          	jal	ra,169e <i2c_read_raw.constprop.0>
    2b48:	85aa                	mv	a1,a0
	printf("Error3: %d\n", ret);
    2b4a:	650d                	lui	a0,0x3
    2b4c:	42850513          	addi	a0,a0,1064 # 3428 <__clz_tab+0x184>
    2b50:	88aff0ef          	jal	ra,1bda <printf>
	uint16_t h2 = (buff[0] << 8) | buff[1];			// H2 baseline
    2b54:	0004d783          	lhu	a5,0(s1)
    2b58:	0034c603          	lbu	a2,3(s1)
	printf("SGP30 CO2: %d ppm, TVOC: %d ppb\n", co2, tvoc);
    2b5c:	46d2                	lw	a3,20(sp)
    2b5e:	00879413          	slli	s0,a5,0x8
    2b62:	07c2                	slli	a5,a5,0x10
    2b64:	83c1                	srli	a5,a5,0x10
    2b66:	83a1                	srli	a5,a5,0x8
    2b68:	8fc1                	or	a5,a5,s0
    2b6a:	01079413          	slli	s0,a5,0x10
    2b6e:	0044c783          	lbu	a5,4(s1)
    2b72:	4762                	lw	a4,24(sp)
    2b74:	650d                	lui	a0,0x3
    2b76:	07a2                	slli	a5,a5,0x8
    2b78:	8fd1                	or	a5,a5,a2
    2b7a:	00879613          	slli	a2,a5,0x8
    2b7e:	83a1                	srli	a5,a5,0x8
    2b80:	8fd1                	or	a5,a5,a2
    2b82:	07c2                	slli	a5,a5,0x10
    2b84:	83c1                	srli	a5,a5,0x10
    2b86:	8636                	mv	a2,a3
    2b88:	85ba                	mv	a1,a4
    2b8a:	6f850513          	addi	a0,a0,1784 # 36f8 <__clz_tab+0x454>
    2b8e:	c63e                	sw	a5,12(sp)
    2b90:	84aff0ef          	jal	ra,1bda <printf>
	printf("SGP30 H2: %d, Ethanol: %d\n", h2, ethanol);
    2b94:	47b2                	lw	a5,12(sp)
    2b96:	8041                	srli	s0,s0,0x10
    2b98:	650d                	lui	a0,0x3
    2b9a:	863e                	mv	a2,a5
    2b9c:	85a2                	mv	a1,s0
    2b9e:	71c50513          	addi	a0,a0,1820 # 371c <__clz_tab+0x478>
    2ba2:	838ff0ef          	jal	ra,1bda <printf>
    2ba6:	c32ff06f          	j	1fd8 <main+0x1c8>
	ret = i2c_write_raw(&dev_scd40, (uint8_t[]){0x36, 0xF6}, 2); 	// wake up
    2baa:	6411                	lui	s0,0x4
    2bac:	77fd                	lui	a5,0xfffff
    2bae:	63678793          	addi	a5,a5,1590 # fffff636 <_eusrstack+0xdfffee36>
    2bb2:	4609                	li	a2,2
    2bb4:	104c                	addi	a1,sp,36
    2bb6:	cb440513          	addi	a0,s0,-844 # 3cb4 <dev_scd40>
    2bba:	02f11223          	sh	a5,36(sp)
    2bbe:	dd8fe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error0: %d\n", ret);
    2bc2:	678d                	lui	a5,0x3
	ret = i2c_write_raw(&dev_scd40, (uint8_t[]){0x36, 0xF6}, 2); 	// wake up
    2bc4:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2bc6:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    2bca:	810ff0ef          	jal	ra,1bda <printf>
	ret = i2c_write_raw(&dev_scd40, (uint8_t[]){0x21, 0xB1}, 2);	// periodic measurement
    2bce:	77ed                	lui	a5,0xffffb
    2bd0:	12178793          	addi	a5,a5,289 # ffffb121 <_eusrstack+0xdfffa921>
    2bd4:	4609                	li	a2,2
    2bd6:	102c                	addi	a1,sp,40
    2bd8:	cb440513          	addi	a0,s0,-844
    2bdc:	02f11423          	sh	a5,40(sp)
    2be0:	db6fe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error0: %d\n", ret);
    2be4:	678d                	lui	a5,0x3
	ret = i2c_write_raw(&dev_scd40, (uint8_t[]){0x21, 0xB1}, 2);	// periodic measurement
    2be6:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2be8:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    2bec:	feffe0ef          	jal	ra,1bda <printf>
	ret = i2c_write_raw(&dev_scd40, (uint8_t[]){0xEC, 0x05}, 2);	// read measurement
    2bf0:	4609                	li	a2,2
    2bf2:	5ec00793          	li	a5,1516
    2bf6:	106c                	addi	a1,sp,44
    2bf8:	cb440513          	addi	a0,s0,-844
    2bfc:	02f11623          	sh	a5,44(sp)
    2c00:	d96fe0ef          	jal	ra,1196 <i2c_write_raw>
	printf("Error1: %d\n", ret);
    2c04:	678d                	lui	a5,0x3
	ret = i2c_write_raw(&dev_scd40, (uint8_t[]){0xEC, 0x05}, 2);	// read measurement
    2c06:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2c08:	49878513          	addi	a0,a5,1176 # 3498 <__clz_tab+0x1f4>
    2c0c:	fcffe0ef          	jal	ra,1bda <printf>
	ret = i2c_read_raw(&dev_scd40, buff, 8);		// Read sensor data
    2c10:	45a1                	li	a1,8
    2c12:	cb440513          	addi	a0,s0,-844
    2c16:	a89fe0ef          	jal	ra,169e <i2c_read_raw.constprop.0>
    2c1a:	85aa                	mv	a1,a0
	printf("Error2: %d\n", ret);
    2c1c:	650d                	lui	a0,0x3
    2c1e:	4a450513          	addi	a0,a0,1188 # 34a4 <__clz_tab+0x200>
    2c22:	fb9fe0ef          	jal	ra,1bda <printf>
	uint16_t hum_raw = (buff[6] << 8) | buff[6];
    2c26:	0064c783          	lbu	a5,6(s1)
	uint16_t temp = (temp_raw * 175) >> 16;			// >> 16 is equivalent to / 65536
    2c2a:	0034c603          	lbu	a2,3(s1)
	printf("SCD40 CO2: %d ppm, Temp: %d, Hum: %d\n", co2, temp, hum);
    2c2e:	650d                	lui	a0,0x3
	uint16_t hum_raw = (buff[6] << 8) | buff[6];
    2c30:	00879693          	slli	a3,a5,0x8
	uint16_t hum = (hum_raw * 100) >> 16;			// >> 16 is equivalent to / 65536
    2c34:	8fd5                	or	a5,a5,a3
    2c36:	00179693          	slli	a3,a5,0x1
    2c3a:	96be                	add	a3,a3,a5
    2c3c:	068e                	slli	a3,a3,0x3
    2c3e:	96be                	add	a3,a3,a5
	uint16_t temp = (temp_raw * 175) >> 16;			// >> 16 is equivalent to / 65536
    2c40:	0044c783          	lbu	a5,4(s1)
	printf("SCD40 CO2: %d ppm, Temp: %d, Hum: %d\n", co2, temp, hum);
    2c44:	82b9                	srli	a3,a3,0xe
    2c46:	74850513          	addi	a0,a0,1864 # 3748 <__clz_tab+0x4a4>
	uint16_t temp = (temp_raw * 175) >> 16;			// >> 16 is equivalent to / 65536
    2c4a:	07a2                	slli	a5,a5,0x8
    2c4c:	8fd1                	or	a5,a5,a2
    2c4e:	00879613          	slli	a2,a5,0x8
    2c52:	83a1                	srli	a5,a5,0x8
    2c54:	8e5d                	or	a2,a2,a5
    2c56:	01061793          	slli	a5,a2,0x10
    2c5a:	83c1                	srli	a5,a5,0x10
    2c5c:	00179613          	slli	a2,a5,0x1
    2c60:	963e                	add	a2,a2,a5
    2c62:	060a                	slli	a2,a2,0x2
    2c64:	8e1d                	sub	a2,a2,a5
    2c66:	0612                	slli	a2,a2,0x4
    2c68:	8e1d                	sub	a2,a2,a5
	printf("SCD40 CO2: %d ppm, Temp: %d, Hum: %d\n", co2, temp, hum);
    2c6a:	0004d783          	lhu	a5,0(s1)
    2c6e:	8241                	srli	a2,a2,0x10
    2c70:	00879593          	slli	a1,a5,0x8
    2c74:	07c2                	slli	a5,a5,0x10
    2c76:	83c1                	srli	a5,a5,0x10
    2c78:	83a1                	srli	a5,a5,0x8
    2c7a:	8ddd                	or	a1,a1,a5
    2c7c:	05c2                	slli	a1,a1,0x10
    2c7e:	81c1                	srli	a1,a1,0x10
    2c80:	f5bfe0ef          	jal	ra,1bda <printf>
    2c84:	b68ff06f          	j	1fec <main+0x1dc>
	ret = i2c_write_reg(&dev_mpu6050, 0x6B, (uint8_t[]){0x00}, 1);	// Reset MPU6050
    2c88:	6411                	lui	s0,0x4
    2c8a:	1070                	addi	a2,sp,44
    2c8c:	4685                	li	a3,1
    2c8e:	06b00593          	li	a1,107
    2c92:	ca840513          	addi	a0,s0,-856 # 3ca8 <dev_mpu6050>
    2c96:	02010623          	sb	zero,44(sp)
    2c9a:	84ffe0ef          	jal	ra,14e8 <i2c_write_reg>
	ret = i2c_read_reg(&dev_mpu6050, 0x3B, buff, 6);
    2c9e:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2ca2:	4699                	li	a3,6
    2ca4:	03b00593          	li	a1,59
    2ca8:	ca840513          	addi	a0,s0,-856
    2cac:	e4afe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("MPU6050 acc_x: %d, acc_y: %d, acc_z: %d\n", acc_x, acc_y, acc_z);
    2cb0:	0044d783          	lhu	a5,4(s1)
    2cb4:	650d                	lui	a0,0x3
    2cb6:	78450513          	addi	a0,a0,1924 # 3784 <__clz_tab+0x4e0>
    2cba:	00879693          	slli	a3,a5,0x8
    2cbe:	07c2                	slli	a5,a5,0x10
    2cc0:	83c1                	srli	a5,a5,0x10
    2cc2:	83a1                	srli	a5,a5,0x8
    2cc4:	8edd                	or	a3,a3,a5
    2cc6:	0024d783          	lhu	a5,2(s1)
    2cca:	06c2                	slli	a3,a3,0x10
    2ccc:	82c1                	srli	a3,a3,0x10
    2cce:	00879613          	slli	a2,a5,0x8
    2cd2:	07c2                	slli	a5,a5,0x10
    2cd4:	83c1                	srli	a5,a5,0x10
    2cd6:	83a1                	srli	a5,a5,0x8
    2cd8:	8e5d                	or	a2,a2,a5
    2cda:	0004d783          	lhu	a5,0(s1)
    2cde:	0642                	slli	a2,a2,0x10
    2ce0:	8241                	srli	a2,a2,0x10
    2ce2:	00879593          	slli	a1,a5,0x8
    2ce6:	07c2                	slli	a5,a5,0x10
    2ce8:	83c1                	srli	a5,a5,0x10
    2cea:	83a1                	srli	a5,a5,0x8
    2cec:	8ddd                	or	a1,a1,a5
    2cee:	05c2                	slli	a1,a1,0x10
    2cf0:	81c1                	srli	a1,a1,0x10
    2cf2:	ee9fe0ef          	jal	ra,1bda <printf>
	ret = i2c_read_reg(&dev_mpu6050, 0x43, buff, 6);
    2cf6:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2cfa:	4699                	li	a3,6
    2cfc:	04300593          	li	a1,67
    2d00:	ca840513          	addi	a0,s0,-856
    2d04:	df2fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("MPU6050 gyro_x: %d, gyro_y: %d, gyro_z: %d\n", gyro_x, gyro_y, gyro_z);
    2d08:	0044d783          	lhu	a5,4(s1)
    2d0c:	650d                	lui	a0,0x3
    2d0e:	7b050513          	addi	a0,a0,1968 # 37b0 <__clz_tab+0x50c>
    2d12:	00879693          	slli	a3,a5,0x8
    2d16:	07c2                	slli	a5,a5,0x10
    2d18:	83c1                	srli	a5,a5,0x10
    2d1a:	83a1                	srli	a5,a5,0x8
    2d1c:	8edd                	or	a3,a3,a5
    2d1e:	0024d783          	lhu	a5,2(s1)
    2d22:	06c2                	slli	a3,a3,0x10
    2d24:	82c1                	srli	a3,a3,0x10
    2d26:	00879613          	slli	a2,a5,0x8
    2d2a:	07c2                	slli	a5,a5,0x10
    2d2c:	83c1                	srli	a5,a5,0x10
    2d2e:	83a1                	srli	a5,a5,0x8
    2d30:	8e5d                	or	a2,a2,a5
    2d32:	0004d783          	lhu	a5,0(s1)
    2d36:	0642                	slli	a2,a2,0x10
    2d38:	8241                	srli	a2,a2,0x10
    2d3a:	00879593          	slli	a1,a5,0x8
    2d3e:	07c2                	slli	a5,a5,0x10
    2d40:	83c1                	srli	a5,a5,0x10
    2d42:	83a1                	srli	a5,a5,0x8
    2d44:	8ddd                	or	a1,a1,a5
    2d46:	05c2                	slli	a1,a1,0x10
    2d48:	81c1                	srli	a1,a1,0x10
    2d4a:	e91fe0ef          	jal	ra,1bda <printf>
    2d4e:	ab4ff06f          	j	2002 <main+0x1f2>
	ret = i2c_write_reg(&dev_adxl345, 0x2D, (uint8_t[]){0x08}, 1);	// Set power mode to measurement
    2d52:	6411                	lui	s0,0x4
    2d54:	1070                	addi	a2,sp,44
    2d56:	47a1                	li	a5,8
    2d58:	4685                	li	a3,1
    2d5a:	02d00593          	li	a1,45
    2d5e:	be840513          	addi	a0,s0,-1048 # 3be8 <dev_adxl345>
    2d62:	02f10623          	sb	a5,44(sp)
    2d66:	f82fe0ef          	jal	ra,14e8 <i2c_write_reg>
	printf("Error0: %d\n", ret);
    2d6a:	678d                	lui	a5,0x3
	ret = i2c_write_reg(&dev_adxl345, 0x2D, (uint8_t[]){0x08}, 1);	// Set power mode to measurement
    2d6c:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2d6e:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    2d72:	e69fe0ef          	jal	ra,1bda <printf>
	ret = i2c_read_reg(&dev_adxl345, 0x32, buff, 6);
    2d76:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2d7a:	4699                	li	a3,6
    2d7c:	03200593          	li	a1,50
    2d80:	be840513          	addi	a0,s0,-1048
    2d84:	d72fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("ADXL345 x: %d, y: %d, z: %d\n", x, y, z);
    2d88:	0044d683          	lhu	a3,4(s1)
    2d8c:	0024d603          	lhu	a2,2(s1)
    2d90:	0004d583          	lhu	a1,0(s1)
    2d94:	650d                	lui	a0,0x3
    2d96:	7f050513          	addi	a0,a0,2032 # 37f0 <__clz_tab+0x54c>
    2d9a:	e41fe0ef          	jal	ra,1bda <printf>
    2d9e:	a7aff06f          	j	2018 <main+0x208>
	ret = i2c_read_reg(&dev_ina3221, 0x00, buff, 2);
    2da2:	6411                	lui	s0,0x4
    2da4:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2da8:	4689                	li	a3,2
    2daa:	4581                	li	a1,0
    2dac:	c8440513          	addi	a0,s0,-892 # 3c84 <dev_ina3221>
    2db0:	d46fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("Error0: %d\n", ret);
    2db4:	670d                	lui	a4,0x3
	ret = i2c_read_reg(&dev_ina3221, 0x00, buff, 2);
    2db6:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2db8:	41c70513          	addi	a0,a4,1052 # 341c <__clz_tab+0x178>
    2dbc:	e1ffe0ef          	jal	ra,1bda <printf>
	printf("INA3221: %02X %02X\n", buff[0], buff[1]);
    2dc0:	c3018693          	addi	a3,gp,-976 # 2000002c <buff>
    2dc4:	0016c603          	lbu	a2,1(a3)
    2dc8:	0006c583          	lbu	a1,0(a3)
    2dcc:	6711                	lui	a4,0x4
    2dce:	84070513          	addi	a0,a4,-1984 # 3840 <__clz_tab+0x59c>
    2dd2:	e09fe0ef          	jal	ra,1bda <printf>
	ret = i2c_write_raw(&dev_ina3221, (uint8_t[]){0x00, 0xF1, 0x26}, 3); // Reset + 128x avg
    2dd6:	77fd                	lui	a5,0xfffff
    2dd8:	10078793          	addi	a5,a5,256 # fffff100 <_eusrstack+0xdfffe900>
    2ddc:	460d                	li	a2,3
    2dde:	02f11623          	sh	a5,44(sp)
    2de2:	106c                	addi	a1,sp,44
    2de4:	02600793          	li	a5,38
    2de8:	c8440513          	addi	a0,s0,-892
    2dec:	02f10723          	sb	a5,46(sp)
    2df0:	ba6fe0ef          	jal	ra,1196 <i2c_write_raw>
    2df4:	85aa                	mv	a1,a0
	printf("Error: %d\n", ret);
    2df6:	6511                	lui	a0,0x4
    2df8:	85450513          	addi	a0,a0,-1964 # 3854 <__clz_tab+0x5b0>
    2dfc:	ddffe0ef          	jal	ra,1bda <printf>
	Delay_Ms(100);
    2e00:	00494537          	lui	a0,0x494
    2e04:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c5d5>
    2e08:	8b6fe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_reg(&dev_ina3221, 0x00, buff, 2);
    2e0c:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2e10:	4689                	li	a3,2
    2e12:	4581                	li	a1,0
    2e14:	c8440513          	addi	a0,s0,-892
    2e18:	cdefe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("Error0: %d\n", ret);
    2e1c:	670d                	lui	a4,0x3
	ret = i2c_read_reg(&dev_ina3221, 0x00, buff, 2);
    2e1e:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2e20:	41c70513          	addi	a0,a4,1052 # 341c <__clz_tab+0x178>
    2e24:	db7fe0ef          	jal	ra,1bda <printf>
	printf("INA3221: %02X %02X\n", buff[0], buff[1]);
    2e28:	c3018713          	addi	a4,gp,-976 # 2000002c <buff>
    2e2c:	c3018793          	addi	a5,gp,-976 # 2000002c <buff>
    2e30:	00174603          	lbu	a2,1(a4)
    2e34:	0007c583          	lbu	a1,0(a5)
    2e38:	6711                	lui	a4,0x4
    2e3a:	84070513          	addi	a0,a4,-1984 # 3840 <__clz_tab+0x59c>
    2e3e:	d9dfe0ef          	jal	ra,1bda <printf>
    2e42:	b54ff06f          	j	2196 <main+0x386>
	ret = i2c_read_reg(&dev_as5600, 0x0C, buff, 4);
    2e46:	6511                	lui	a0,0x4
    2e48:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2e4c:	4691                	li	a3,4
    2e4e:	45b1                	li	a1,12
    2e50:	c1850513          	addi	a0,a0,-1000 # 3c18 <dev_as5600>
    2e54:	ca2fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("Error0: %d\n", ret);
    2e58:	678d                	lui	a5,0x3
	ret = i2c_read_reg(&dev_as5600, 0x0C, buff, 4);
    2e5a:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2e5c:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    2e60:	d7bfe0ef          	jal	ra,1bda <printf>
	printf("AS5600 angle_raw: %d, angle_value: %d\n", angle_raw, angle_value);
    2e64:	0024d783          	lhu	a5,2(s1)
    2e68:	6511                	lui	a0,0x4
    2e6a:	87450513          	addi	a0,a0,-1932 # 3874 <__clz_tab+0x5d0>
    2e6e:	00879613          	slli	a2,a5,0x8
    2e72:	07c2                	slli	a5,a5,0x10
    2e74:	83c1                	srli	a5,a5,0x10
    2e76:	83a1                	srli	a5,a5,0x8
    2e78:	8e5d                	or	a2,a2,a5
    2e7a:	0004d783          	lhu	a5,0(s1)
    2e7e:	0642                	slli	a2,a2,0x10
    2e80:	8241                	srli	a2,a2,0x10
    2e82:	00879593          	slli	a1,a5,0x8
    2e86:	07c2                	slli	a5,a5,0x10
    2e88:	83c1                	srli	a5,a5,0x10
    2e8a:	83a1                	srli	a5,a5,0x8
    2e8c:	8ddd                	or	a1,a1,a5
    2e8e:	05c2                	slli	a1,a1,0x10
    2e90:	81c1                	srli	a1,a1,0x10
    2e92:	d49fe0ef          	jal	ra,1bda <printf>
    2e96:	b16ff06f          	j	21ac <main+0x39c>
	ret = i2c_read_reg(&dev_max30102, 0xFF, &part_id, 1);
    2e9a:	6411                	lui	s0,0x4
    2e9c:	1070                	addi	a2,sp,44
    2e9e:	4685                	li	a3,1
    2ea0:	0ff00593          	li	a1,255
    2ea4:	c9040513          	addi	a0,s0,-880 # 3c90 <dev_max30102>
    2ea8:	c4efe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("MAX30102: %02X\n", part_id);		// expect 0x15
    2eac:	02c14583          	lbu	a1,44(sp)
    2eb0:	6511                	lui	a0,0x4
    2eb2:	8b050513          	addi	a0,a0,-1872 # 38b0 <__clz_tab+0x60c>
    2eb6:	d25fe0ef          	jal	ra,1bda <printf>
	ret = i2c_write_reg(&dev_max30102, 0x09, (uint8_t[]){0x03}, 1);
    2eba:	478d                	li	a5,3
    2ebc:	0870                	addi	a2,sp,28
    2ebe:	4685                	li	a3,1
    2ec0:	45a5                	li	a1,9
    2ec2:	c9040513          	addi	a0,s0,-880
    2ec6:	00f10e23          	sb	a5,28(sp)
    2eca:	e1efe0ef          	jal	ra,14e8 <i2c_write_reg>
	ret = i2c_write_reg(&dev_max30102, 0x0C, (uint8_t[]){0x24}, 1);
    2ece:	02400793          	li	a5,36
    2ed2:	1010                	addi	a2,sp,32
    2ed4:	4685                	li	a3,1
    2ed6:	45b1                	li	a1,12
    2ed8:	c9040513          	addi	a0,s0,-880
    2edc:	02f10023          	sb	a5,32(sp)
    2ee0:	e08fe0ef          	jal	ra,14e8 <i2c_write_reg>
	ret = i2c_write_reg(&dev_max30102, 0x0D, (uint8_t[]){0x24}, 1);
    2ee4:	02400793          	li	a5,36
    2ee8:	1050                	addi	a2,sp,36
    2eea:	4685                	li	a3,1
    2eec:	45b5                	li	a1,13
    2eee:	c9040513          	addi	a0,s0,-880
    2ef2:	02f10223          	sb	a5,36(sp)
    2ef6:	df2fe0ef          	jal	ra,14e8 <i2c_write_reg>
	ret = i2c_write_reg(&dev_max30102, 0x08, (uint8_t[]){0x40}, 1);
    2efa:	04000793          	li	a5,64
    2efe:	1030                	addi	a2,sp,40
    2f00:	4685                	li	a3,1
    2f02:	45a1                	li	a1,8
    2f04:	c9040513          	addi	a0,s0,-880
    2f08:	02f10423          	sb	a5,40(sp)
    2f0c:	ddcfe0ef          	jal	ra,14e8 <i2c_write_reg>
	Delay_Ms(100);
    2f10:	00494537          	lui	a0,0x494
    2f14:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c5d5>
    2f18:	fa7fd0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_reg(&dev_max30102, 0x07, buff, 6);
    2f1c:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2f20:	4699                	li	a3,6
    2f22:	459d                	li	a1,7
    2f24:	c9040513          	addi	a0,s0,-880
    2f28:	bcefe0ef          	jal	ra,12f6 <i2c_read_reg>
	uint32_t ir_led = (buff[3] << 16) | (buff[4] << 8) | buff[5];
    2f2c:	0034c703          	lbu	a4,3(s1)
    2f30:	0044c603          	lbu	a2,4(s1)
	uint32_t red_led = (buff[0] << 16) | (buff[1] << 8) | buff[2];
    2f34:	0004c783          	lbu	a5,0(s1)
    2f38:	0014c583          	lbu	a1,1(s1)
	uint32_t ir_led = (buff[3] << 16) | (buff[4] << 8) | buff[5];
    2f3c:	0622                	slli	a2,a2,0x8
    2f3e:	0742                	slli	a4,a4,0x10
	uint32_t red_led = (buff[0] << 16) | (buff[1] << 8) | buff[2];
    2f40:	05a2                	slli	a1,a1,0x8
    2f42:	07c2                	slli	a5,a5,0x10
	uint32_t ir_led = (buff[3] << 16) | (buff[4] << 8) | buff[5];
    2f44:	8f51                	or	a4,a4,a2
	uint32_t red_led = (buff[0] << 16) | (buff[1] << 8) | buff[2];
    2f46:	8fcd                	or	a5,a5,a1
	uint32_t ir_led = (buff[3] << 16) | (buff[4] << 8) | buff[5];
    2f48:	0054c603          	lbu	a2,5(s1)
	uint32_t red_led = (buff[0] << 16) | (buff[1] << 8) | buff[2];
    2f4c:	0024c583          	lbu	a1,2(s1)
	printf("MAX30102: %lu, %lu\n", red_led, ir_led);
    2f50:	6511                	lui	a0,0x4
    2f52:	8e59                	or	a2,a2,a4
    2f54:	8ddd                	or	a1,a1,a5
    2f56:	8c050513          	addi	a0,a0,-1856 # 38c0 <__clz_tab+0x61c>
    2f5a:	c81fe0ef          	jal	ra,1bda <printf>
    2f5e:	a64ff06f          	j	21c2 <main+0x3b2>
	ret = i2c_read_reg(&dev_amg88xx, 0x80, buff, 128);
    2f62:	6511                	lui	a0,0x4
    2f64:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    2f68:	08000693          	li	a3,128
    2f6c:	08000593          	li	a1,128
    2f70:	c0050513          	addi	a0,a0,-1024 # 3c00 <dev_amg88xx>
    2f74:	b82fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("Error0: %d\n", ret);
    2f78:	678d                	lui	a5,0x3
	ret = i2c_read_reg(&dev_amg88xx, 0x80, buff, 128);
    2f7a:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2f7c:	41c78513          	addi	a0,a5,1052 # 341c <__clz_tab+0x178>
    2f80:	c5bfe0ef          	jal	ra,1bda <printf>
		pixels[i] = raw * .25;
    2f84:	c1c1a603          	lw	a2,-996(gp) # 20000018 <line.0+0x8>
    2f88:	c201a683          	lw	a3,-992(gp) # 2000001c <line.0+0xc>
    2f8c:	8726                	mv	a4,s1
    2f8e:	c632                	sw	a2,12(sp)
    2f90:	c836                	sw	a3,16(sp)
		uint16_t raw = (buff[i*2] << 8) | buff[i*2+1];
    2f92:	00074683          	lbu	a3,0(a4)
    2f96:	00174503          	lbu	a0,1(a4)
		pixels[i] = raw * .25;
    2f9a:	107c                	addi	a5,sp,44
		uint16_t raw = (buff[i*2] << 8) | buff[i*2+1];
    2f9c:	06a2                	slli	a3,a3,0x8
		pixels[i] = raw * .25;
    2f9e:	00878333          	add	t1,a5,s0
    2fa2:	8d55                	or	a0,a0,a3
    2fa4:	cc1a                	sw	t1,24(sp)
		uint16_t raw = (buff[i*2] << 8) | buff[i*2+1];
    2fa6:	ca3a                	sw	a4,20(sp)
		pixels[i] = raw * .25;
    2fa8:	c5dfd0ef          	jal	ra,c04 <__floatsidf>
    2fac:	4632                	lw	a2,12(sp)
    2fae:	46c2                	lw	a3,16(sp)
	for (int i=0; i<64; i++) {
    2fb0:	0409                	addi	s0,s0,2
		pixels[i] = raw * .25;
    2fb2:	f10fd0ef          	jal	ra,6c2 <__muldf3>
    2fb6:	bf3fd0ef          	jal	ra,ba8 <__fixunsdfsi>
    2fba:	4362                	lw	t1,24(sp)
	for (int i=0; i<64; i++) {
    2fbc:	4752                	lw	a4,20(sp)
    2fbe:	08000793          	li	a5,128
		pixels[i] = raw * .25;
    2fc2:	00a31023          	sh	a0,0(t1)
	for (int i=0; i<64; i++) {
    2fc6:	0709                	addi	a4,a4,2
    2fc8:	fcf415e3          	bne	s0,a5,2f92 <main+0x1182>
    2fcc:	1060                	addi	s0,sp,44
		printf("%lu, %lu, %lu, %lu, %lu, %lu, %lu, %lu\n", 
    2fce:	6311                	lui	t1,0x4
    2fd0:	00e45783          	lhu	a5,14(s0)
    2fd4:	8e830513          	addi	a0,t1,-1816 # 38e8 <__clz_tab+0x644>
	for (int i=0; i<8; i++) {
    2fd8:	0441                	addi	s0,s0,16
		printf("%lu, %lu, %lu, %lu, %lu, %lu, %lu, %lu\n", 
    2fda:	c43e                	sw	a5,8(sp)
    2fdc:	ffc45783          	lhu	a5,-4(s0)
    2fe0:	c23e                	sw	a5,4(sp)
    2fe2:	ffa45783          	lhu	a5,-6(s0)
    2fe6:	c03e                	sw	a5,0(sp)
    2fe8:	ff845783          	lhu	a5,-8(s0)
    2fec:	ff645703          	lhu	a4,-10(s0)
    2ff0:	ff445683          	lhu	a3,-12(s0)
    2ff4:	ff245603          	lhu	a2,-14(s0)
    2ff8:	ff045583          	lhu	a1,-16(s0)
    2ffc:	bdffe0ef          	jal	ra,1bda <printf>
	for (int i=0; i<8; i++) {
    3000:	117c                	addi	a5,sp,172
    3002:	6311                	lui	t1,0x4
    3004:	fcf416e3          	bne	s0,a5,2fd0 <main+0x11c0>
    3008:	9d2ff06f          	j	21da <main+0x3ca>
	ret = i2c_write_raw(&dev_bh1750, (uint8_t[]){0x01}, 1);
    300c:	6411                	lui	s0,0x4
    300e:	4785                	li	a5,1
    3010:	106c                	addi	a1,sp,44
    3012:	4605                	li	a2,1
    3014:	c3040513          	addi	a0,s0,-976 # 3c30 <dev_bh1750>
    3018:	02f10623          	sb	a5,44(sp)
    301c:	97afe0ef          	jal	ra,1196 <i2c_write_raw>
	ret = i2c_read_reg(&dev_bh1750, 0x20, buff, 2);
    3020:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    3024:	4689                	li	a3,2
    3026:	02000593          	li	a1,32
    302a:	c3040513          	addi	a0,s0,-976
    302e:	ac8fe0ef          	jal	ra,12f6 <i2c_read_reg>
	uint32_t lux = (lux_raw / 1.2);
    3032:	0004d783          	lhu	a5,0(s1)
    3036:	00879513          	slli	a0,a5,0x8
    303a:	07c2                	slli	a5,a5,0x10
    303c:	83c1                	srli	a5,a5,0x10
    303e:	83a1                	srli	a5,a5,0x8
    3040:	8d5d                	or	a0,a0,a5
    3042:	0542                	slli	a0,a0,0x10
    3044:	8141                	srli	a0,a0,0x10
    3046:	c25fd0ef          	jal	ra,c6a <__floatunsidf>
    304a:	c241a603          	lw	a2,-988(gp) # 20000020 <line.0+0x10>
    304e:	c281a683          	lw	a3,-984(gp) # 20000024 <line.0+0x14>
    3052:	84efd0ef          	jal	ra,a0 <__divdf3>
    3056:	b53fd0ef          	jal	ra,ba8 <__fixunsdfsi>
    305a:	85aa                	mv	a1,a0
	printf("BH1750: %lu lx\n\n", lux);
    305c:	6511                	lui	a0,0x4
    305e:	92450513          	addi	a0,a0,-1756 # 3924 <__clz_tab+0x680>
    3062:	b79fe0ef          	jal	ra,1bda <printf>
    3066:	98aff06f          	j	21f0 <main+0x3e0>
	ret = i2c_write_reg(&dev_sht3x, 0x30, (uint8_t[]){0xA2}, 1);
    306a:	6411                	lui	s0,0x4
    306c:	4685                	li	a3,1
    306e:	fa200793          	li	a5,-94
    3072:	1030                	addi	a2,sp,40
    3074:	03000593          	li	a1,48
    3078:	ccc40513          	addi	a0,s0,-820 # 3ccc <dev_sht3x>
    307c:	02f10423          	sb	a5,40(sp)
    3080:	c68fe0ef          	jal	ra,14e8 <i2c_write_reg>
	Delay_Ms(20);	//! REQUIRED
    3084:	000ea737          	lui	a4,0xea
    3088:	60070513          	addi	a0,a4,1536 # ea600 <lib_i2c.c.bdeb3654+0xe2dd5>
    308c:	e33fd0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_write_raw(&dev_sht3x, (uint8_t[]){0x21, 0x30}, 2);
    3090:	678d                	lui	a5,0x3
    3092:	02178793          	addi	a5,a5,33 # 3021 <main+0x1211>
    3096:	4609                	li	a2,2
    3098:	106c                	addi	a1,sp,44
    309a:	ccc40513          	addi	a0,s0,-820
    309e:	02f11623          	sh	a5,44(sp)
    30a2:	8f4fe0ef          	jal	ra,1196 <i2c_write_raw>
	Delay_Ms(20);	//! REQUIRED
    30a6:	000ea737          	lui	a4,0xea
    30aa:	60070513          	addi	a0,a4,1536 # ea600 <lib_i2c.c.bdeb3654+0xe2dd5>
    30ae:	e11fd0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_sht3x, buff, 6);
    30b2:	4599                	li	a1,6
    30b4:	ccc40513          	addi	a0,s0,-820
    30b8:	de6fe0ef          	jal	ra,169e <i2c_read_raw.constprop.0>
	uint16_t hum = (100 * hum_raw) >> 16;			// >> 16 is equivalent to / 65536
    30bc:	0044c783          	lbu	a5,4(s1)
    30c0:	0034c703          	lbu	a4,3(s1)
	printf("SHT3X temp: %d, hum: %d\n\n", temp, hum);
    30c4:	6511                	lui	a0,0x4
	uint16_t hum = (100 * hum_raw) >> 16;			// >> 16 is equivalent to / 65536
    30c6:	07a2                	slli	a5,a5,0x8
    30c8:	8fd9                	or	a5,a5,a4
    30ca:	00879613          	slli	a2,a5,0x8
    30ce:	83a1                	srli	a5,a5,0x8
    30d0:	8fd1                	or	a5,a5,a2
    30d2:	07c2                	slli	a5,a5,0x10
    30d4:	83c1                	srli	a5,a5,0x10
    30d6:	00179613          	slli	a2,a5,0x1
    30da:	963e                	add	a2,a2,a5
    30dc:	060e                	slli	a2,a2,0x3
    30de:	963e                	add	a2,a2,a5
	uint16_t temp = (175 * temp_raw) >> 16;			// >> 16 is equivalent to / 65536
    30e0:	0004d783          	lhu	a5,0(s1)
	printf("SHT3X temp: %d, hum: %d\n\n", temp, hum);
    30e4:	8239                	srli	a2,a2,0xe
    30e6:	94850513          	addi	a0,a0,-1720 # 3948 <__clz_tab+0x6a4>
	uint16_t temp = (175 * temp_raw) >> 16;			// >> 16 is equivalent to / 65536
    30ea:	00879593          	slli	a1,a5,0x8
    30ee:	07c2                	slli	a5,a5,0x10
    30f0:	83c1                	srli	a5,a5,0x10
    30f2:	83a1                	srli	a5,a5,0x8
    30f4:	8ddd                	or	a1,a1,a5
    30f6:	01059793          	slli	a5,a1,0x10
    30fa:	83c1                	srli	a5,a5,0x10
    30fc:	00179593          	slli	a1,a5,0x1
    3100:	95be                	add	a1,a1,a5
    3102:	058a                	slli	a1,a1,0x2
    3104:	8d9d                	sub	a1,a1,a5
    3106:	0592                	slli	a1,a1,0x4
    3108:	8d9d                	sub	a1,a1,a5
	printf("SHT3X temp: %d, hum: %d\n\n", temp, hum);
    310a:	81c1                	srli	a1,a1,0x10
    310c:	acffe0ef          	jal	ra,1bda <printf>
    3110:	8f6ff06f          	j	2206 <main+0x3f6>
	uint8_t config[] = {
    3114:	019017b7          	lui	a5,0x1901
    3118:	f8078793          	addi	a5,a5,-128 # 1900f80 <lib_i2c.c.bdeb3654+0x18f9755>
	ret = i2c_write_raw(&dev_apds9960, config, sizeof(config));
    311c:	6411                	lui	s0,0x4
	uint8_t config[] = {
    311e:	d63e                	sw	a5,44(sp)
    3120:	878e27b7          	lui	a5,0x878e2
    3124:	08f78793          	addi	a5,a5,143 # 878e208f <_eusrstack+0x678e188f>
	ret = i2c_write_raw(&dev_apds9960, config, sizeof(config));
    3128:	106c                	addi	a1,sp,44
    312a:	4621                	li	a2,8
    312c:	c0c40513          	addi	a0,s0,-1012 # 3c0c <dev_apds9960>
	uint8_t config[] = {
    3130:	d83e                	sw	a5,48(sp)
	ret = i2c_write_raw(&dev_apds9960, config, sizeof(config));
    3132:	864fe0ef          	jal	ra,1196 <i2c_write_raw>
	Delay_Ms(50);  // Wait for sensor to initialize
    3136:	0024a537          	lui	a0,0x24a
    313a:	f0050513          	addi	a0,a0,-256 # 249f00 <lib_i2c.c.bdeb3654+0x2426d5>
    313e:	d81fd0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_reg(&dev_apds9960, 0x9C, &proximity, 1);		// Read proximity register
    3142:	1030                	addi	a2,sp,40
    3144:	4685                	li	a3,1
    3146:	09c00593          	li	a1,156
    314a:	c0c40513          	addi	a0,s0,-1012
    314e:	9a8fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("APDS9960 Proximity: %d\n", proximity);
    3152:	02814583          	lbu	a1,40(sp)
    3156:	6511                	lui	a0,0x4
    3158:	97850513          	addi	a0,a0,-1672 # 3978 <__clz_tab+0x6d4>
    315c:	a7ffe0ef          	jal	ra,1bda <printf>
	ret = i2c_read_reg(&dev_apds9960, 0x94, buff, 8);			// Read lux registers
    3160:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    3164:	46a1                	li	a3,8
    3166:	09400593          	li	a1,148
    316a:	c0c40513          	addi	a0,s0,-1012
    316e:	988fe0ef          	jal	ra,12f6 <i2c_read_reg>
	printf("APDS9960 clear: %d, R: %d, G: %d, B: %d\n\n", clear, red, green, blue);
    3172:	0064d703          	lhu	a4,6(s1)
    3176:	0044d683          	lhu	a3,4(s1)
    317a:	0024d603          	lhu	a2,2(s1)
    317e:	0004d583          	lhu	a1,0(s1)
    3182:	6511                	lui	a0,0x4
    3184:	99050513          	addi	a0,a0,-1648 # 3990 <__clz_tab+0x6ec>
    3188:	a53fe0ef          	jal	ra,1bda <printf>
    318c:	890ff06f          	j	221c <main+0x40c>
	ret = i2c_write_reg(&dev_ina219, 0x00, (uint8_t[]){0x39, 0x9F}, 2);		// Configure INA219 32V 1A Range
    3190:	6411                	lui	s0,0x4
    3192:	77e9                	lui	a5,0xffffa
    3194:	f3978793          	addi	a5,a5,-199 # ffff9f39 <_eusrstack+0xdfff9739>
    3198:	1070                	addi	a2,sp,44
    319a:	4689                	li	a3,2
    319c:	4581                	li	a1,0
    319e:	c7840513          	addi	a0,s0,-904 # 3c78 <dev_ina219>
    31a2:	02f11623          	sh	a5,44(sp)
    31a6:	b42fe0ef          	jal	ra,14e8 <i2c_write_reg>
	uint8_t cal_bytes[2] = {cal >> 8, cal & 0xFF};
    31aa:	47c1                	li	a5,16
	i2c_write_reg(&dev_ina219, 0x05, cal_bytes, 2);
    31ac:	1030                	addi	a2,sp,40
    31ae:	4689                	li	a3,2
    31b0:	4595                	li	a1,5
    31b2:	c7840513          	addi	a0,s0,-904
	uint8_t cal_bytes[2] = {cal >> 8, cal & 0xFF};
    31b6:	02f11423          	sh	a5,40(sp)
	i2c_write_reg(&dev_ina219, 0x05, cal_bytes, 2);
    31ba:	b2efe0ef          	jal	ra,14e8 <i2c_write_reg>
	ret = i2c_read_reg(&dev_ina219, 0x01, buff, 2);		// Read shunt voltage
    31be:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    31c2:	4689                	li	a3,2
    31c4:	4585                	li	a1,1
    31c6:	c7840513          	addi	a0,s0,-904
    31ca:	92cfe0ef          	jal	ra,12f6 <i2c_read_reg>
	uint16_t shunt_raw = (buff[1] << 8) | buff[0];
    31ce:	0004d783          	lhu	a5,0(s1)
	ret = i2c_read_reg(&dev_ina219, 0x02, buff, 2);		// Read bus voltage
    31d2:	4689                	li	a3,2
    31d4:	4589                	li	a1,2
    31d6:	c63e                	sw	a5,12(sp)
    31d8:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    31dc:	c7840513          	addi	a0,s0,-904
    31e0:	916fe0ef          	jal	ra,12f6 <i2c_read_reg>
	ret = i2c_read_reg(&dev_ina219, 0x03, buff, 2);		// Read power
    31e4:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    31e8:	4689                	li	a3,2
    31ea:	458d                	li	a1,3
    31ec:	c7840513          	addi	a0,s0,-904
    31f0:	906fe0ef          	jal	ra,12f6 <i2c_read_reg>
	ret = i2c_read_reg(&dev_ina219, 0x04, buff, 2);		// Read current
    31f4:	c3018613          	addi	a2,gp,-976 # 2000002c <buff>
    31f8:	4689                	li	a3,2
    31fa:	4591                	li	a1,4
    31fc:	c7840513          	addi	a0,s0,-904
    3200:	8f6fe0ef          	jal	ra,12f6 <i2c_read_reg>
	uint16_t bus = (shunt_raw >> 3) * 4;				// in mV
    3204:	47b2                	lw	a5,12(sp)
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    3206:	0004d683          	lhu	a3,0(s1)
	uint16_t shunt = shunt_raw / 100;					// in mV
    320a:	06400593          	li	a1,100
	uint16_t bus = (shunt_raw >> 3) * 4;				// in mV
    320e:	0037d613          	srli	a2,a5,0x3
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    3212:	060a                	slli	a2,a2,0x2
	uint16_t shunt = shunt_raw / 100;					// in mV
    3214:	853e                	mv	a0,a5
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    3216:	ca36                	sw	a3,20(sp)
    3218:	c632                	sw	a2,12(sp)
	uint16_t shunt = shunt_raw / 100;					// in mV
    321a:	abffd0ef          	jal	ra,cd8 <__hidden___udivsi3>
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    321e:	46d2                	lw	a3,20(sp)
    3220:	4632                	lw	a2,12(sp)
    3222:	01051593          	slli	a1,a0,0x10
    3226:	6511                	lui	a0,0x4
    3228:	81c1                	srli	a1,a1,0x10
    322a:	9d050513          	addi	a0,a0,-1584 # 39d0 <__clz_tab+0x72c>
    322e:	9adfe0ef          	jal	ra,1bda <printf>
    3232:	cd1fe06f          	j	1f02 <main+0xf2>

00003236 <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
    3236:	1151                	addi	sp,sp,-12
    3238:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    323a:	e000f7b7          	lui	a5,0xe000f
{
    323e:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    3240:	4b98                	lw	a4,16(a5)
{
    3242:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    3244:	66b1                	lui	a3,0xc
    3246:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.bdeb3654+0x4355>
    324a:	9736                	add	a4,a4,a3
    324c:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
    324e:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
    3252:	c3c18793          	addi	a5,gp,-964 # 20000038 <systick_millis>
    3256:	4398                	lw	a4,0(a5)
}
    3258:	46a2                	lw	a3,8(sp)
	systick_millis++;
    325a:	0705                	addi	a4,a4,1
    325c:	c398                	sw	a4,0(a5)
}
    325e:	4712                	lw	a4,4(sp)
    3260:	4782                	lw	a5,0(sp)
    3262:	0131                	addi	sp,sp,12
    3264:	30200073          	mret
    3268:	06b0                	addi	a2,sp,840
    326a:	0000                	unimp
    326c:	0292                	slli	t0,t0,0x4
    326e:	0000                	unimp
    3270:	0608                	addi	a0,sp,768
    3272:	0000                	unimp
    3274:	0292                	slli	t0,t0,0x4
    3276:	0000                	unimp
    3278:	06a2                	slli	a3,a3,0x8
    327a:	0000                	unimp
    327c:	0292                	slli	t0,t0,0x4
    327e:	0000                	unimp
    3280:	0608                	addi	a0,sp,768
    3282:	0000                	unimp
    3284:	06b0                	addi	a2,sp,840
    3286:	0000                	unimp
    3288:	06b0                	addi	a2,sp,840
    328a:	0000                	unimp
    328c:	06a2                	slli	a3,a3,0x8
    328e:	0000                	unimp
    3290:	0608                	addi	a0,sp,768
    3292:	0000                	unimp
    3294:	0278                	addi	a4,sp,268
    3296:	0000                	unimp
    3298:	0278                	addi	a4,sp,268
    329a:	0000                	unimp
    329c:	0278                	addi	a4,sp,268
    329e:	0000                	unimp
    32a0:	06a2                	slli	a3,a3,0x8
	...

000032a4 <__clz_tab>:
    32a4:	0100 0202 0303 0303 0404 0404 0404 0404     ................
    32b4:	0505 0505 0505 0505 0505 0505 0505 0505     ................
    32c4:	0606 0606 0606 0606 0606 0606 0606 0606     ................
    32d4:	0606 0606 0606 0606 0606 0606 0606 0606     ................
    32e4:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    32f4:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    3304:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    3314:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    3324:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3334:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3344:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3354:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3364:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3374:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3384:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3394:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    33a4:	3249 3a43 3020 2578 3230 0058 6146 6c69     I2C: 0x%02X.Fail
    33b4:	6465 7420 206f 6e69 7469 4920 4332 0000     ed to init I2C..
    33c4:	6548 6c6c 206f 6542 3265 0021 2d2d 2d2d     Hello Bee2!.----
    33d4:	6353 6e61 696e 676e 4920 4332 4220 7375     Scanning I2C Bus
    33e4:	6620 726f 4420 7665 6369 7365 2d2d 002d      for Devices---.
    33f4:	2d2d 2d2d 6f44 656e 5320 6163 6e6e 6e69     ----Done Scannin
    3404:	2d67 2d2d 0a2d 0000 5448 3255 2031 6f6e     g----...HTU21 no
    3414:	2074 6f66 6e75 0064 7245 6f72 3072 203a     t found.Error0: 
    3424:	6425 000a 7245 6f72 3372 203a 6425 000a     %d..Error3: %d..
    3434:	7245 6f72 3472 203a 6425 000a 7245 6f72     Error4: %d..Erro
    3444:	3572 203a 6425 000a 5448 3255 2031 6554     r5: %d..HTU21 Te
    3454:	706d 312a 3030 203a 6425 202c 7548 3a6d     mp*100: %d, Hum:
    3464:	2520 0a64 0000 0000 4841 3254 2031 6f6e      %d.....AHT21 no
    3474:	2074 6f66 6e75 0064 4841 3254 2031 6552     t found.AHT21 Re
    3484:	6461 7220 6765 3020 3778 3a31 2520 3230     ad reg 0x71: %02
    3494:	0a58 0000 7245 6f72 3172 203a 6425 000a     X...Error1: %d..
    34a4:	7245 6f72 3272 203a 6425 000a 7548 696d     Error2: %d..Humi
    34b4:	6964 7974 203a 6c25 0a75 0000 6554 706d     dity: %lu...Temp
    34c4:	7265 7461 7275 3a65 2520 756c 000a 0000     erature: %lu....
    34d4:	4d42 3250 3038 6e20 746f 6620 756f 646e     BMP280 not found
    34e4:	0000 0000 4d42 3250 3038 5220 6165 2064     ....BMP280 Read 
    34f4:	6572 2067 7830 3044 203a 3025 5832 000a     reg 0xD0: %02X..
    3504:	6964 5f67 3154 203a 6c25 0a75 0000 0000     dig_T1: %lu.....
    3514:	6964 5f67 3254 203a 6c25 0a75 0000 0000     dig_T2: %lu.....
    3524:	6964 5f67 3354 203a 6c25 0a64 0000 0000     dig_T3: %ld.....
    3534:	4448 3143 3830 2030 6f6e 2074 6f66 6e75     HDC1080 not foun
    3544:	0064 0000 4448 3143 3830 2030 6552 6461     d...HDC1080 Read
    3554:	203a 3025 5832 2520 3230 2058 3025 5832     : %02X %02X %02X
    3564:	2520 3230 0a58 0000 4953 3037 3132 6e20      %02X...SI7021 n
    3574:	746f 6620 756f 646e 0000 0000 6554 706d     ot found....Temp
    3584:	312a 3030 203a 6c25 0a75 0000 7548 2a6d     *100: %lu...Hum*
    3594:	3031 3a30 2520 756c 000a 0000 614d 3478     100: %lu....Max4
    35a4:	3034 3930 6e20 746f 6620 756f 646e 0000     4009 not found..
    35b4:	614d 3478 3034 3930 203a 3025 5832 2520     Max44009: %02X %
    35c4:	3230 0a58 0000 0000 756c 2a78 3031 3030     02X.....lux*1000
    35d4:	203a 6c25 0a75 0000 5041 3233 3631 6e20     : %lu...AP3216 n
    35e4:	746f 6620 756f 646e 0000 0000 756c 3a78     ot found....lux:
    35f4:	2520 2c64 7020 6f72 6978 696d 7974 203a      %d, proximity: 
    3604:	6425 000a 4c56 3335 304c 2058 6f6e 2074     %d..VL53L0X not 
    3614:	6f66 6e75 0064 0000 7473 7461 7375 203a     found...status: 
    3624:	3025 5832 000a 0000 4c56 3335 304c 2058     %02X....VL53L0X 
    3634:	6552 6461 7220 6765 3020 3178 3a33 2520     Read reg 0x13: %
    3644:	3230 0a58 0000 0000 4c56 3335 304c 2058     02X.....VL53L0X 
    3654:	6552 6461 203a 3025 5832 2520 3230 0a58     Read: %02X %02X.
    3664:	0000 0000 6964 7473 6e61 6563 203a 6425     ....distance: %d
    3674:	000a 0000 4e45 3153 3036 6e20 746f 6620     ....ENS160 not f
    3684:	756f 646e 0000 0000 4e45 3153 3036 4920     ound....ENS160 I
    3694:	3a44 2520 3430 0a58 0000 0000 4e45 3153     D: %04X.....ENS1
    36a4:	3036 4120 4951 203a 6425 000a 4e45 3153     60 AQI: %d..ENS1
    36b4:	3036 5420 4f56 3a43 2520 0a64 0000 0000     60 TVOC: %d.....
    36c4:	4e45 3153 3036 6520 4f43 3a32 2520 0a64     ENS160 eCO2: %d.
    36d4:	0000 0000 4753 3350 2030 6f6e 2074 6f66     ....SGP30 not fo
    36e4:	6e75 0064 4753 3350 2030 4449 203a 3025     und.SGP30 ID: %0
    36f4:	5834 000a 4753 3350 2030 4f43 3a32 2520     4X..SGP30 CO2: %
    3704:	2064 7070 2c6d 5420 4f56 3a43 2520 2064     d ppm, TVOC: %d 
    3714:	7070 0a62 0000 0000 4753 3350 2030 3248     ppb.....SGP30 H2
    3724:	203a 6425 202c 7445 6168 6f6e 3a6c 2520     : %d, Ethanol: %
    3734:	0a64 0000 4353 3444 2030 6f6e 2074 6f66     d...SCD40 not fo
    3744:	6e75 0064 4353 3444 2030 4f43 3a32 2520     und.SCD40 CO2: %
    3754:	2064 7070 2c6d 5420 6d65 3a70 2520 2c64     d ppm, Temp: %d,
    3764:	4820 6d75 203a 6425 000a 0000 504d 3655      Hum: %d....MPU6
    3774:	3530 2030 6f6e 2074 6f66 6e75 0064 0000     050 not found...
    3784:	504d 3655 3530 2030 6361 5f63 3a78 2520     MPU6050 acc_x: %
    3794:	2c64 6120 6363 795f 203a 6425 202c 6361     d, acc_y: %d, ac
    37a4:	5f63 3a7a 2520 0a64 0000 0000 504d 3655     c_z: %d.....MPU6
    37b4:	3530 2030 7967 6f72 785f 203a 6425 202c     050 gyro_x: %d, 
    37c4:	7967 6f72 795f 203a 6425 202c 7967 6f72     gyro_y: %d, gyro
    37d4:	7a5f 203a 6425 000a 4441 4c58 3433 2035     _z: %d..ADXL345 
    37e4:	6f6e 2074 6f66 6e75 0064 0000 4441 4c58     not found...ADXL
    37f4:	3433 2035 3a78 2520 2c64 7920 203a 6425     345 x: %d, y: %d
    3804:	202c 3a7a 2520 0a64 0000 0000 6425 252f     , z: %d.....%d/%
    3814:	2f64 6c25 2075 6425 253a 3a64 6425 000a     d/%lu %d:%d:%d..
    3824:	7830 3025 5832 000a 4e49 3341 3232 2031     0x%02X..INA3221 
    3834:	6f6e 2074 6f66 6e75 0064 0000 4e49 3341     not found...INA3
    3844:	3232 3a31 2520 3230 2058 3025 5832 000a     221: %02X %02X..
    3854:	7245 6f72 3a72 2520 0a64 0000 5341 3635     Error: %d...AS56
    3864:	3030 6e20 746f 6620 756f 646e 0000 0000     00 not found....
    3874:	5341 3635 3030 6120 676e 656c 725f 7761     AS5600 angle_raw
    3884:	203a 6425 202c 6e61 6c67 5f65 6176 756c     : %d, angle_valu
    3894:	3a65 2520 0a64 0000 414d 3358 3130 3230     e: %d...MAX30102
    38a4:	6e20 746f 6620 756f 646e 0000 414d 3358      not found..MAX3
    38b4:	3130 3230 203a 3025 5832 000a 414d 3358     0102: %02X..MAX3
    38c4:	3130 3230 203a 6c25 2c75 2520 756c 000a     0102: %lu, %lu..
    38d4:	4d41 3847 7838 2078 6f6e 2074 6f66 6e75     AMG88xx not foun
    38e4:	0064 0000 6c25 2c75 2520 756c 202c 6c25     d...%lu, %lu, %l
    38f4:	2c75 2520 756c 202c 6c25 2c75 2520 756c     u, %lu, %lu, %lu
    3904:	202c 6c25 2c75 2520 756c 000a 4842 3731     , %lu, %lu..BH17
    3914:	3035 6e20 746f 6620 756f 646e 0000 0000     50 not found....
    3924:	4842 3731 3035 203a 6c25 2075 786c 0a0a     BH1750: %lu lx..
    3934:	0000 0000 4853 3354 2058 6f6e 2074 6f66     ....SHT3X not fo
    3944:	6e75 0064 4853 3354 2058 6574 706d 203a     und.SHT3X temp: 
    3954:	6425 202c 7568 3a6d 2520 0a64 000a 0000     %d, hum: %d.....
    3964:	5041 5344 3939 3036 6e20 746f 6620 756f     APDS9960 not fou
    3974:	646e 0000 5041 5344 3939 3036 5020 6f72     nd..APDS9960 Pro
    3984:	6978 696d 7974 203a 6425 000a 5041 5344     ximity: %d..APDS
    3994:	3939 3036 6320 656c 7261 203a 6425 202c     9960 clear: %d, 
    39a4:	3a52 2520 2c64 4720 203a 6425 202c 3a42     R: %d, G: %d, B:
    39b4:	2520 0a64 000a 0000 4e49 3241 3931 6e20      %d.....INA219 n
    39c4:	746f 6620 756f 646e 0000 0000 4e49 3241     ot found....INA2
    39d4:	3931 5320 7568 746e 203a 6425 5675 202c     19 Shunt: %duV, 
    39e4:	7542 3a73 2520 7564 2c56 4320 7275 6572     Bus: %duV, Curre
    39f4:	746e 203a 6425 4175 0a0a 0000               nt: %duA....

00003a00 <FONT_7x5>:
    3a00:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    3a10:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    3a20:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    3a30:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    3a40:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    3a50:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    3a60:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    3a70:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    3a80:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    3a90:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    3aa0:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    3ab0:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    3ac0:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    3ad0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    3ae0:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    3af0:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    3b00:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    3b10:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    3b20:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    3b30:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    3b40:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    3b50:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    3b60:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    3b70:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    3b80:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    3b90:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    3ba0:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    3bb0:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    3bc0:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    3bd0:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

00003bdc <dev_AP3216>:
    3bdc:	1a80 0006 0000 0000 001e 0001               ............

00003be8 <dev_adxl345>:
    3be8:	1a80 0006 0000 0000 0053 0001               ........S...

00003bf4 <dev_aht21>:
    3bf4:	1a80 0006 0000 0000 0038 0001               ........8...

00003c00 <dev_amg88xx>:
    3c00:	1a80 0006 0000 0000 0069 0001               ........i...

00003c0c <dev_apds9960>:
    3c0c:	1a80 0006 0000 0000 0039 0001               ........9...

00003c18 <dev_as5600>:
    3c18:	1a80 0006 0000 0000 0036 0001               ........6...

00003c24 <dev_at24c>:
    3c24:	1a80 0006 0000 0000 0057 0001               ........W...

00003c30 <dev_bh1750>:
    3c30:	1a80 0006 0000 0000 0023 0001               ........#...

00003c3c <dev_bmp280>:
    3c3c:	1a80 0006 0000 0000 0076 0001               ........v...

00003c48 <dev_ds3231>:
    3c48:	1a80 0006 0000 0000 0068 0001               ........h...

00003c54 <dev_ens160>:
    3c54:	1a80 0006 0000 0000 0053 0001               ........S...

00003c60 <dev_hdc1080>:
    3c60:	1a80 0006 0000 0000 0040 0001               ........@...

00003c6c <dev_htu21>:
    3c6c:	1a80 0006 0000 0000 0040 0001               ........@...

00003c78 <dev_ina219>:
    3c78:	1a80 0006 0000 0000 0040 0001               ........@...

00003c84 <dev_ina3221>:
    3c84:	1a80 0006 0000 0000 0042 0001               ........B...

00003c90 <dev_max30102>:
    3c90:	1a80 0006 0000 0000 0057 0001               ........W...

00003c9c <dev_max44009>:
    3c9c:	1a80 0006 0000 0000 004a 0001               ........J...

00003ca8 <dev_mpu6050>:
    3ca8:	1a80 0006 0000 0000 0068 0001               ........h...

00003cb4 <dev_scd40>:
    3cb4:	1a80 0006 0000 0000 0062 0001               ........b...

00003cc0 <dev_sgp30>:
    3cc0:	1a80 0006 0000 0000 0058 0001               ........X...

00003ccc <dev_sht3x>:
    3ccc:	1a80 0006 0000 0000 0044 0001               ........D...

00003cd8 <dev_si7021>:
    3cd8:	1a80 0006 0000 0000 0040 0001               ........@...

00003ce4 <dev_vl35lox>:
    3ce4:	1a80 0006 0000 0000 0029 0001               ........)...

00003cf0 <ssd1306_init_array>:
    3cf0:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    3d00:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......
