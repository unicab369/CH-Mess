
example.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	1330106f          	j	1932 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	19fc                	addi	a5,sp,252
   a:	0000                	unimp
   c:	19a4                	addi	s1,sp,248
	...
  2e:	0000                	unimp
  30:	3324                	fld	fs1,96(a4)
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	19a4                	addi	s1,sp,248
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	19a4                	addi	s1,sp,248
  42:	0000                	unimp
  44:	19a4                	addi	s1,sp,248
  46:	0000                	unimp
  48:	19a4                	addi	s1,sp,248
  4a:	0000                	unimp
  4c:	19a4                	addi	s1,sp,248
  4e:	0000                	unimp
  50:	19a4                	addi	s1,sp,248
  52:	0000                	unimp
  54:	19a4                	addi	s1,sp,248
  56:	0000                	unimp
  58:	19a4                	addi	s1,sp,248
  5a:	0000                	unimp
  5c:	19a4                	addi	s1,sp,248
  5e:	0000                	unimp
  60:	19a4                	addi	s1,sp,248
  62:	0000                	unimp
  64:	19a4                	addi	s1,sp,248
  66:	0000                	unimp
  68:	19a4                	addi	s1,sp,248
  6a:	0000                	unimp
  6c:	19a4                	addi	s1,sp,248
  6e:	0000                	unimp
  70:	19a4                	addi	s1,sp,248
  72:	0000                	unimp
  74:	19a4                	addi	s1,sp,248
  76:	0000                	unimp
  78:	19a4                	addi	s1,sp,248
  7a:	0000                	unimp
  7c:	19a4                	addi	s1,sp,248
  7e:	0000                	unimp
  80:	19a4                	addi	s1,sp,248
  82:	0000                	unimp
  84:	19a4                	addi	s1,sp,248
  86:	0000                	unimp
  88:	19a4                	addi	s1,sp,248
  8a:	0000                	unimp
  8c:	19a4                	addi	s1,sp,248
  8e:	0000                	unimp
  90:	19a4                	addi	s1,sp,248
  92:	0000                	unimp
  94:	19a4                	addi	s1,sp,248
  96:	0000                	unimp
  98:	19a4                	addi	s1,sp,248
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divdf3>:
      a0:	fc410113          	addi	sp,sp,-60
      a4:	d826                	sw	s1,48(sp)
      a6:	84ae                	mv	s1,a1
      a8:	00c59713          	slli	a4,a1,0xc
      ac:	01f4d793          	srli	a5,s1,0x1f
      b0:	81d1                	srli	a1,a1,0x14
      b2:	da22                	sw	s0,52(sp)
      b4:	832a                	mv	t1,a0
      b6:	842a                	mv	s0,a0
      b8:	dc06                	sw	ra,56(sp)
      ba:	7ff5f513          	andi	a0,a1,2047
      be:	c03e                	sw	a5,0(sp)
      c0:	8331                	srli	a4,a4,0xc
      c2:	c541                	beqz	a0,14a <__divdf3+0xaa>
      c4:	7ff00793          	li	a5,2047
      c8:	0ef50a63          	beq	a0,a5,1bc <__divdf3+0x11c>
      cc:	070e                	slli	a4,a4,0x3
      ce:	01d35793          	srli	a5,t1,0x1d
      d2:	8fd9                	or	a5,a5,a4
      d4:	00800737          	lui	a4,0x800
      d8:	8fd9                	or	a5,a5,a4
      da:	00331413          	slli	s0,t1,0x3
      de:	c0150593          	addi	a1,a0,-1023
      e2:	4481                	li	s1,0
      e4:	00c69713          	slli	a4,a3,0xc
      e8:	00c75393          	srli	t2,a4,0xc
      ec:	0146d713          	srli	a4,a3,0x14
      f0:	82fd                	srli	a3,a3,0x1f
      f2:	7ff77713          	andi	a4,a4,2047
      f6:	c236                	sw	a3,4(sp)
      f8:	c37d                	beqz	a4,1de <__divdf3+0x13e>
      fa:	7ff00693          	li	a3,2047
      fe:	14d70c63          	beq	a4,a3,256 <__divdf3+0x1b6>
     102:	00339513          	slli	a0,t2,0x3
     106:	01d65693          	srli	a3,a2,0x1d
     10a:	8ec9                	or	a3,a3,a0
     10c:	00800537          	lui	a0,0x800
     110:	00a6e3b3          	or	t2,a3,a0
     114:	00361693          	slli	a3,a2,0x3
     118:	c0170613          	addi	a2,a4,-1023 # 7ffc01 <lib_i2c.c.bdeb3654+0x7f84c4>
     11c:	4501                	li	a0,0
     11e:	4702                	lw	a4,0(sp)
     120:	4312                	lw	t1,4(sp)
     122:	00674733          	xor	a4,a4,t1
     126:	c63a                	sw	a4,12(sp)
     128:	40c58733          	sub	a4,a1,a2
     12c:	c43a                	sw	a4,8(sp)
     12e:	00249713          	slli	a4,s1,0x2
     132:	8f49                	or	a4,a4,a0
     134:	177d                	addi	a4,a4,-1
     136:	4639                	li	a2,14
     138:	16e66063          	bltu	a2,a4,298 <__divdf3+0x1f8>
     13c:	660d                	lui	a2,0x3
     13e:	070a                	slli	a4,a4,0x2
     140:	35860613          	addi	a2,a2,856 # 3358 <SysTick_Handler+0x34>
     144:	9732                	add	a4,a4,a2
     146:	4318                	lw	a4,0(a4)
     148:	8702                	jr	a4
     14a:	006767b3          	or	a5,a4,t1
     14e:	cfbd                	beqz	a5,1cc <__divdf3+0x12c>
     150:	c836                	sw	a3,16(sp)
     152:	c632                	sw	a2,12(sp)
     154:	cf1d                	beqz	a4,192 <__divdf3+0xf2>
     156:	853a                	mv	a0,a4
     158:	c41a                	sw	t1,8(sp)
     15a:	c23a                	sw	a4,4(sp)
     15c:	3f3000ef          	jal	ra,d4e <__clzsi2>
     160:	4712                	lw	a4,4(sp)
     162:	4322                	lw	t1,8(sp)
     164:	4632                	lw	a2,12(sp)
     166:	46c2                	lw	a3,16(sp)
     168:	82aa                	mv	t0,a0
     16a:	ff550393          	addi	t2,a0,-11 # 7ffff5 <lib_i2c.c.bdeb3654+0x7f88b8>
     16e:	47f5                	li	a5,29
     170:	ff828593          	addi	a1,t0,-8
     174:	407787b3          	sub	a5,a5,t2
     178:	00b71733          	sll	a4,a4,a1
     17c:	00f357b3          	srl	a5,t1,a5
     180:	8fd9                	or	a5,a5,a4
     182:	00b31733          	sll	a4,t1,a1
     186:	c0d00593          	li	a1,-1011
     18a:	405585b3          	sub	a1,a1,t0
     18e:	843a                	mv	s0,a4
     190:	bf89                	j	e2 <__divdf3+0x42>
     192:	851a                	mv	a0,t1
     194:	c43a                	sw	a4,8(sp)
     196:	c21a                	sw	t1,4(sp)
     198:	3b7000ef          	jal	ra,d4e <__clzsi2>
     19c:	01550393          	addi	t2,a0,21
     1a0:	47f1                	li	a5,28
     1a2:	4312                	lw	t1,4(sp)
     1a4:	4722                	lw	a4,8(sp)
     1a6:	4632                	lw	a2,12(sp)
     1a8:	46c2                	lw	a3,16(sp)
     1aa:	02050293          	addi	t0,a0,32
     1ae:	fc77d0e3          	bge	a5,t2,16e <__divdf3+0xce>
     1b2:	ff850793          	addi	a5,a0,-8
     1b6:	00f317b3          	sll	a5,t1,a5
     1ba:	b7f1                	j	186 <__divdf3+0xe6>
     1bc:	006767b3          	or	a5,a4,t1
     1c0:	cb91                	beqz	a5,1d4 <__divdf3+0x134>
     1c2:	87ba                	mv	a5,a4
     1c4:	7ff00593          	li	a1,2047
     1c8:	448d                	li	s1,3
     1ca:	bf29                	j	e4 <__divdf3+0x44>
     1cc:	4401                	li	s0,0
     1ce:	4581                	li	a1,0
     1d0:	4485                	li	s1,1
     1d2:	bf09                	j	e4 <__divdf3+0x44>
     1d4:	4401                	li	s0,0
     1d6:	7ff00593          	li	a1,2047
     1da:	4489                	li	s1,2
     1dc:	b721                	j	e4 <__divdf3+0x44>
     1de:	00c3e6b3          	or	a3,t2,a2
     1e2:	c2d1                	beqz	a3,266 <__divdf3+0x1c6>
     1e4:	04038363          	beqz	t2,22a <__divdf3+0x18a>
     1e8:	851e                	mv	a0,t2
     1ea:	ca32                	sw	a2,20(sp)
     1ec:	c82e                	sw	a1,16(sp)
     1ee:	c63e                	sw	a5,12(sp)
     1f0:	c41e                	sw	t2,8(sp)
     1f2:	35d000ef          	jal	ra,d4e <__clzsi2>
     1f6:	43a2                	lw	t2,8(sp)
     1f8:	47b2                	lw	a5,12(sp)
     1fa:	45c2                	lw	a1,16(sp)
     1fc:	4652                	lw	a2,20(sp)
     1fe:	86aa                	mv	a3,a0
     200:	ff550293          	addi	t0,a0,-11
     204:	4775                	li	a4,29
     206:	ff868513          	addi	a0,a3,-8
     20a:	40570733          	sub	a4,a4,t0
     20e:	00a393b3          	sll	t2,t2,a0
     212:	00e65733          	srl	a4,a2,a4
     216:	00776733          	or	a4,a4,t2
     21a:	00a613b3          	sll	t2,a2,a0
     21e:	c0d00613          	li	a2,-1011
     222:	8e15                	sub	a2,a2,a3
     224:	869e                	mv	a3,t2
     226:	83ba                	mv	t2,a4
     228:	bdd5                	j	11c <__divdf3+0x7c>
     22a:	8532                	mv	a0,a2
     22c:	ca1e                	sw	t2,20(sp)
     22e:	c82e                	sw	a1,16(sp)
     230:	c63e                	sw	a5,12(sp)
     232:	c432                	sw	a2,8(sp)
     234:	31b000ef          	jal	ra,d4e <__clzsi2>
     238:	01550293          	addi	t0,a0,21
     23c:	4771                	li	a4,28
     23e:	4622                	lw	a2,8(sp)
     240:	47b2                	lw	a5,12(sp)
     242:	45c2                	lw	a1,16(sp)
     244:	43d2                	lw	t2,20(sp)
     246:	02050693          	addi	a3,a0,32
     24a:	fa575de3          	bge	a4,t0,204 <__divdf3+0x164>
     24e:	1561                	addi	a0,a0,-8
     250:	00a61733          	sll	a4,a2,a0
     254:	b7e9                	j	21e <__divdf3+0x17e>
     256:	00c3e6b3          	or	a3,t2,a2
     25a:	ca91                	beqz	a3,26e <__divdf3+0x1ce>
     25c:	86b2                	mv	a3,a2
     25e:	450d                	li	a0,3
     260:	7ff00613          	li	a2,2047
     264:	bd6d                	j	11e <__divdf3+0x7e>
     266:	4381                	li	t2,0
     268:	4601                	li	a2,0
     26a:	4505                	li	a0,1
     26c:	bd4d                	j	11e <__divdf3+0x7e>
     26e:	4381                	li	t2,0
     270:	7ff00613          	li	a2,2047
     274:	4509                	li	a0,2
     276:	b565                	j	11e <__divdf3+0x7e>
     278:	4702                	lw	a4,0(sp)
     27a:	83be                	mv	t2,a5
     27c:	86a2                	mv	a3,s0
     27e:	c63a                	sw	a4,12(sp)
     280:	4789                	li	a5,2
     282:	42f48763          	beq	s1,a5,6b0 <__divdf3+0x610>
     286:	478d                	li	a5,3
     288:	40f48d63          	beq	s1,a5,6a2 <__divdf3+0x602>
     28c:	4785                	li	a5,1
     28e:	2ef49b63          	bne	s1,a5,584 <__divdf3+0x4e4>
     292:	4381                	li	t2,0
     294:	4681                	li	a3,0
     296:	aef9                	j	674 <__divdf3+0x5d4>
     298:	00f3e663          	bltu	t2,a5,2a4 <__divdf3+0x204>
     29c:	36779163          	bne	a5,t2,5fe <__divdf3+0x55e>
     2a0:	34d46f63          	bltu	s0,a3,5fe <__divdf3+0x55e>
     2a4:	01f79593          	slli	a1,a5,0x1f
     2a8:	00145613          	srli	a2,s0,0x1
     2ac:	01f41713          	slli	a4,s0,0x1f
     2b0:	8385                	srli	a5,a5,0x1
     2b2:	00c5e433          	or	s0,a1,a2
     2b6:	00839613          	slli	a2,t2,0x8
     2ba:	d03a                	sw	a4,32(sp)
     2bc:	00869713          	slli	a4,a3,0x8
     2c0:	c03a                	sw	a4,0(sp)
     2c2:	01065713          	srli	a4,a2,0x10
     2c6:	0186d593          	srli	a1,a3,0x18
     2ca:	c23a                	sw	a4,4(sp)
     2cc:	00c5e333          	or	t1,a1,a2
     2d0:	4592                	lw	a1,4(sp)
     2d2:	01031713          	slli	a4,t1,0x10
     2d6:	8341                	srli	a4,a4,0x10
     2d8:	853e                	mv	a0,a5
     2da:	ce1a                	sw	t1,28(sp)
     2dc:	cc3a                	sw	a4,24(sp)
     2de:	ca3e                	sw	a5,20(sp)
     2e0:	1f9000ef          	jal	ra,cd8 <__hidden___udivsi3>
     2e4:	85aa                	mv	a1,a0
     2e6:	c82a                	sw	a0,16(sp)
     2e8:	4562                	lw	a0,24(sp)
     2ea:	1cf000ef          	jal	ra,cb8 <__mulsi3>
     2ee:	47d2                	lw	a5,20(sp)
     2f0:	4592                	lw	a1,4(sp)
     2f2:	84aa                	mv	s1,a0
     2f4:	853e                	mv	a0,a5
     2f6:	20f000ef          	jal	ra,d04 <__umodsi3>
     2fa:	46c2                	lw	a3,16(sp)
     2fc:	0542                	slli	a0,a0,0x10
     2fe:	01045613          	srli	a2,s0,0x10
     302:	8e49                	or	a2,a2,a0
     304:	4372                	lw	t1,28(sp)
     306:	5702                	lw	a4,32(sp)
     308:	87b6                	mv	a5,a3
     30a:	00967c63          	bgeu	a2,s1,322 <__divdf3+0x282>
     30e:	961a                	add	a2,a2,t1
     310:	fff68793          	addi	a5,a3,-1
     314:	00666763          	bltu	a2,t1,322 <__divdf3+0x282>
     318:	00967563          	bgeu	a2,s1,322 <__divdf3+0x282>
     31c:	ffe68793          	addi	a5,a3,-2
     320:	961a                	add	a2,a2,t1
     322:	4592                	lw	a1,4(sp)
     324:	d03e                	sw	a5,32(sp)
     326:	409607b3          	sub	a5,a2,s1
     32a:	853e                	mv	a0,a5
     32c:	d21a                	sw	t1,36(sp)
     32e:	ce3a                	sw	a4,28(sp)
     330:	c83e                	sw	a5,16(sp)
     332:	1a7000ef          	jal	ra,cd8 <__hidden___udivsi3>
     336:	85aa                	mv	a1,a0
     338:	ca2a                	sw	a0,20(sp)
     33a:	4562                	lw	a0,24(sp)
     33c:	0442                	slli	s0,s0,0x10
     33e:	8041                	srli	s0,s0,0x10
     340:	179000ef          	jal	ra,cb8 <__mulsi3>
     344:	4592                	lw	a1,4(sp)
     346:	84aa                	mv	s1,a0
     348:	4542                	lw	a0,16(sp)
     34a:	1bb000ef          	jal	ra,d04 <__umodsi3>
     34e:	4652                	lw	a2,20(sp)
     350:	0542                	slli	a0,a0,0x10
     352:	8c49                	or	s0,s0,a0
     354:	4772                	lw	a4,28(sp)
     356:	5782                	lw	a5,32(sp)
     358:	5312                	lw	t1,36(sp)
     35a:	85b2                	mv	a1,a2
     35c:	00947c63          	bgeu	s0,s1,374 <__divdf3+0x2d4>
     360:	941a                	add	s0,s0,t1
     362:	fff60593          	addi	a1,a2,-1
     366:	00646763          	bltu	s0,t1,374 <__divdf3+0x2d4>
     36a:	00947563          	bgeu	s0,s1,374 <__divdf3+0x2d4>
     36e:	ffe60593          	addi	a1,a2,-2
     372:	941a                	add	s0,s0,t1
     374:	07c2                	slli	a5,a5,0x10
     376:	00b7e2b3          	or	t0,a5,a1
     37a:	4782                	lw	a5,0(sp)
     37c:	4602                	lw	a2,0(sp)
     37e:	63c1                	lui	t2,0x10
     380:	fff38693          	addi	a3,t2,-1 # ffff <lib_i2c.c.bdeb3654+0x88c2>
     384:	83c1                	srli	a5,a5,0x10
     386:	c83e                	sw	a5,16(sp)
     388:	00d2f7b3          	and	a5,t0,a3
     38c:	8ef1                	and	a3,a3,a2
     38e:	8c05                	sub	s0,s0,s1
     390:	853e                	mv	a0,a5
     392:	ca36                	sw	a3,20(sp)
     394:	85b6                	mv	a1,a3
     396:	123000ef          	jal	ra,cb8 <__mulsi3>
     39a:	84aa                	mv	s1,a0
     39c:	45c2                	lw	a1,16(sp)
     39e:	853e                	mv	a0,a5
     3a0:	119000ef          	jal	ra,cb8 <__mulsi3>
     3a4:	87aa                	mv	a5,a0
     3a6:	45d2                	lw	a1,20(sp)
     3a8:	0102d513          	srli	a0,t0,0x10
     3ac:	10d000ef          	jal	ra,cb8 <__mulsi3>
     3b0:	ce2a                	sw	a0,28(sp)
     3b2:	45c2                	lw	a1,16(sp)
     3b4:	0102d513          	srli	a0,t0,0x10
     3b8:	101000ef          	jal	ra,cb8 <__mulsi3>
     3bc:	4672                	lw	a2,28(sp)
     3be:	0104d693          	srli	a3,s1,0x10
     3c2:	97b2                	add	a5,a5,a2
     3c4:	97b6                	add	a5,a5,a3
     3c6:	00c7f363          	bgeu	a5,a2,3cc <__divdf3+0x32c>
     3ca:	951e                	add	a0,a0,t2
     3cc:	0107d693          	srli	a3,a5,0x10
     3d0:	9536                	add	a0,a0,a3
     3d2:	66c1                	lui	a3,0x10
     3d4:	16fd                	addi	a3,a3,-1
     3d6:	8ff5                	and	a5,a5,a3
     3d8:	07c2                	slli	a5,a5,0x10
     3da:	8cf5                	and	s1,s1,a3
     3dc:	94be                	add	s1,s1,a5
     3de:	00a46763          	bltu	s0,a0,3ec <__divdf3+0x34c>
     3e2:	8396                	mv	t2,t0
     3e4:	04a41363          	bne	s0,a0,42a <__divdf3+0x38a>
     3e8:	04977163          	bgeu	a4,s1,42a <__divdf3+0x38a>
     3ec:	4782                	lw	a5,0(sp)
     3ee:	fff28393          	addi	t2,t0,-1
     3f2:	97ba                	add	a5,a5,a4
     3f4:	00e7b6b3          	sltu	a3,a5,a4
     3f8:	00668633          	add	a2,a3,t1
     3fc:	9432                	add	s0,s0,a2
     3fe:	873e                	mv	a4,a5
     400:	00836563          	bltu	t1,s0,40a <__divdf3+0x36a>
     404:	02831363          	bne	t1,s0,42a <__divdf3+0x38a>
     408:	e28d                	bnez	a3,42a <__divdf3+0x38a>
     40a:	00a46663          	bltu	s0,a0,416 <__divdf3+0x376>
     40e:	00851e63          	bne	a0,s0,42a <__divdf3+0x38a>
     412:	0097fc63          	bgeu	a5,s1,42a <__divdf3+0x38a>
     416:	4702                	lw	a4,0(sp)
     418:	ffe28393          	addi	t2,t0,-2
     41c:	97ba                	add	a5,a5,a4
     41e:	873e                	mv	a4,a5
     420:	4782                	lw	a5,0(sp)
     422:	00f737b3          	sltu	a5,a4,a5
     426:	979a                	add	a5,a5,t1
     428:	943e                	add	s0,s0,a5
     42a:	409704b3          	sub	s1,a4,s1
     42e:	8c09                	sub	s0,s0,a0
     430:	00973733          	sltu	a4,a4,s1
     434:	8c19                	sub	s0,s0,a4
     436:	d41a                	sw	t1,40(sp)
     438:	56fd                	li	a3,-1
     43a:	14830563          	beq	t1,s0,584 <__divdf3+0x4e4>
     43e:	4592                	lw	a1,4(sp)
     440:	8522                	mv	a0,s0
     442:	d21e                	sw	t2,36(sp)
     444:	095000ef          	jal	ra,cd8 <__hidden___udivsi3>
     448:	85aa                	mv	a1,a0
     44a:	d02a                	sw	a0,32(sp)
     44c:	4562                	lw	a0,24(sp)
     44e:	06b000ef          	jal	ra,cb8 <__mulsi3>
     452:	4592                	lw	a1,4(sp)
     454:	ce2a                	sw	a0,28(sp)
     456:	8522                	mv	a0,s0
     458:	0ad000ef          	jal	ra,d04 <__umodsi3>
     45c:	5682                	lw	a3,32(sp)
     45e:	47f2                	lw	a5,28(sp)
     460:	0542                	slli	a0,a0,0x10
     462:	0104d413          	srli	s0,s1,0x10
     466:	8c49                	or	s0,s0,a0
     468:	5392                	lw	t2,36(sp)
     46a:	5322                	lw	t1,40(sp)
     46c:	8736                	mv	a4,a3
     46e:	00f47c63          	bgeu	s0,a5,486 <__divdf3+0x3e6>
     472:	941a                	add	s0,s0,t1
     474:	fff68713          	addi	a4,a3,-1 # ffff <lib_i2c.c.bdeb3654+0x88c2>
     478:	00646763          	bltu	s0,t1,486 <__divdf3+0x3e6>
     47c:	00f47563          	bgeu	s0,a5,486 <__divdf3+0x3e6>
     480:	ffe68713          	addi	a4,a3,-2
     484:	941a                	add	s0,s0,t1
     486:	4592                	lw	a1,4(sp)
     488:	40f407b3          	sub	a5,s0,a5
     48c:	853e                	mv	a0,a5
     48e:	d61a                	sw	t1,44(sp)
     490:	d43a                	sw	a4,40(sp)
     492:	d21e                	sw	t2,36(sp)
     494:	ce3e                	sw	a5,28(sp)
     496:	043000ef          	jal	ra,cd8 <__hidden___udivsi3>
     49a:	85aa                	mv	a1,a0
     49c:	d02a                	sw	a0,32(sp)
     49e:	4562                	lw	a0,24(sp)
     4a0:	019000ef          	jal	ra,cb8 <__mulsi3>
     4a4:	4592                	lw	a1,4(sp)
     4a6:	842a                	mv	s0,a0
     4a8:	4572                	lw	a0,28(sp)
     4aa:	05b000ef          	jal	ra,d04 <__umodsi3>
     4ae:	5602                	lw	a2,32(sp)
     4b0:	01049793          	slli	a5,s1,0x10
     4b4:	0542                	slli	a0,a0,0x10
     4b6:	83c1                	srli	a5,a5,0x10
     4b8:	8fc9                	or	a5,a5,a0
     4ba:	5392                	lw	t2,36(sp)
     4bc:	5722                	lw	a4,40(sp)
     4be:	5332                	lw	t1,44(sp)
     4c0:	85b2                	mv	a1,a2
     4c2:	0087fc63          	bgeu	a5,s0,4da <__divdf3+0x43a>
     4c6:	979a                	add	a5,a5,t1
     4c8:	fff60593          	addi	a1,a2,-1
     4cc:	0067e763          	bltu	a5,t1,4da <__divdf3+0x43a>
     4d0:	0087f563          	bgeu	a5,s0,4da <__divdf3+0x43a>
     4d4:	ffe60593          	addi	a1,a2,-2
     4d8:	979a                	add	a5,a5,t1
     4da:	0742                	slli	a4,a4,0x10
     4dc:	8f4d                	or	a4,a4,a1
     4de:	01071293          	slli	t0,a4,0x10
     4e2:	0102d293          	srli	t0,t0,0x10
     4e6:	45d2                	lw	a1,20(sp)
     4e8:	8f81                	sub	a5,a5,s0
     4ea:	8516                	mv	a0,t0
     4ec:	7cc000ef          	jal	ra,cb8 <__mulsi3>
     4f0:	84aa                	mv	s1,a0
     4f2:	45c2                	lw	a1,16(sp)
     4f4:	8516                	mv	a0,t0
     4f6:	7c2000ef          	jal	ra,cb8 <__mulsi3>
     4fa:	82aa                	mv	t0,a0
     4fc:	45d2                	lw	a1,20(sp)
     4fe:	01075513          	srli	a0,a4,0x10
     502:	7b6000ef          	jal	ra,cb8 <__mulsi3>
     506:	842a                	mv	s0,a0
     508:	45c2                	lw	a1,16(sp)
     50a:	01075513          	srli	a0,a4,0x10
     50e:	7aa000ef          	jal	ra,cb8 <__mulsi3>
     512:	0104d613          	srli	a2,s1,0x10
     516:	008286b3          	add	a3,t0,s0
     51a:	00d602b3          	add	t0,a2,a3
     51e:	0082f463          	bgeu	t0,s0,526 <__divdf3+0x486>
     522:	66c1                	lui	a3,0x10
     524:	9536                	add	a0,a0,a3
     526:	0102d693          	srli	a3,t0,0x10
     52a:	9536                	add	a0,a0,a3
     52c:	66c1                	lui	a3,0x10
     52e:	16fd                	addi	a3,a3,-1
     530:	00d2f2b3          	and	t0,t0,a3
     534:	02c2                	slli	t0,t0,0x10
     536:	8ee5                	and	a3,a3,s1
     538:	92b6                	add	t0,t0,a3
     53a:	00a7e763          	bltu	a5,a0,548 <__divdf3+0x4a8>
     53e:	86ba                	mv	a3,a4
     540:	04a79063          	bne	a5,a0,580 <__divdf3+0x4e0>
     544:	04028063          	beqz	t0,584 <__divdf3+0x4e4>
     548:	979a                	add	a5,a5,t1
     54a:	fff70693          	addi	a3,a4,-1
     54e:	863e                	mv	a2,a5
     550:	0267e363          	bltu	a5,t1,576 <__divdf3+0x4d6>
     554:	00a7e763          	bltu	a5,a0,562 <__divdf3+0x4c2>
     558:	02a79463          	bne	a5,a0,580 <__divdf3+0x4e0>
     55c:	4602                	lw	a2,0(sp)
     55e:	00567e63          	bgeu	a2,t0,57a <__divdf3+0x4da>
     562:	ffe70693          	addi	a3,a4,-2
     566:	4702                	lw	a4,0(sp)
     568:	4602                	lw	a2,0(sp)
     56a:	0706                	slli	a4,a4,0x1
     56c:	00c73633          	sltu	a2,a4,a2
     570:	961a                	add	a2,a2,t1
     572:	963e                	add	a2,a2,a5
     574:	c03a                	sw	a4,0(sp)
     576:	00a61563          	bne	a2,a0,580 <__divdf3+0x4e0>
     57a:	4782                	lw	a5,0(sp)
     57c:	00f28463          	beq	t0,a5,584 <__divdf3+0x4e4>
     580:	0016e693          	ori	a3,a3,1
     584:	47a2                	lw	a5,8(sp)
     586:	3ff78793          	addi	a5,a5,1023
     58a:	08f05363          	blez	a5,610 <__divdf3+0x570>
     58e:	0076f713          	andi	a4,a3,7
     592:	cf01                	beqz	a4,5aa <__divdf3+0x50a>
     594:	00f6f713          	andi	a4,a3,15
     598:	4611                	li	a2,4
     59a:	00c70863          	beq	a4,a2,5aa <__divdf3+0x50a>
     59e:	00468713          	addi	a4,a3,4 # 10004 <lib_i2c.c.bdeb3654+0x88c7>
     5a2:	00d73633          	sltu	a2,a4,a3
     5a6:	93b2                	add	t2,t2,a2
     5a8:	86ba                	mv	a3,a4
     5aa:	01000737          	lui	a4,0x1000
     5ae:	00e3f733          	and	a4,t2,a4
     5b2:	cb09                	beqz	a4,5c4 <__divdf3+0x524>
     5b4:	ff0007b7          	lui	a5,0xff000
     5b8:	17fd                	addi	a5,a5,-1
     5ba:	00f3f3b3          	and	t2,t2,a5
     5be:	47a2                	lw	a5,8(sp)
     5c0:	40078793          	addi	a5,a5,1024 # ff000400 <_eusrstack+0xdefffc00>
     5c4:	7fe00713          	li	a4,2046
     5c8:	0ef74463          	blt	a4,a5,6b0 <__divdf3+0x610>
     5cc:	0036d713          	srli	a4,a3,0x3
     5d0:	01d39693          	slli	a3,t2,0x1d
     5d4:	8ed9                	or	a3,a3,a4
     5d6:	0033d393          	srli	t2,t2,0x3
     5da:	4732                	lw	a4,12(sp)
     5dc:	03b2                	slli	t2,t2,0xc
     5de:	50e2                	lw	ra,56(sp)
     5e0:	5452                	lw	s0,52(sp)
     5e2:	07d2                	slli	a5,a5,0x14
     5e4:	00c3d393          	srli	t2,t2,0xc
     5e8:	0077e7b3          	or	a5,a5,t2
     5ec:	077e                	slli	a4,a4,0x1f
     5ee:	00e7e633          	or	a2,a5,a4
     5f2:	54c2                	lw	s1,48(sp)
     5f4:	8536                	mv	a0,a3
     5f6:	85b2                	mv	a1,a2
     5f8:	03c10113          	addi	sp,sp,60
     5fc:	8082                	ret
     5fe:	4722                	lw	a4,8(sp)
     600:	177d                	addi	a4,a4,-1
     602:	c43a                	sw	a4,8(sp)
     604:	4701                	li	a4,0
     606:	b945                	j	2b6 <__divdf3+0x216>
     608:	4792                	lw	a5,4(sp)
     60a:	84aa                	mv	s1,a0
     60c:	c63e                	sw	a5,12(sp)
     60e:	b98d                	j	280 <__divdf3+0x1e0>
     610:	4605                	li	a2,1
     612:	cb89                	beqz	a5,624 <__divdf3+0x584>
     614:	8e1d                	sub	a2,a2,a5
     616:	03800713          	li	a4,56
     61a:	c6c74ce3          	blt	a4,a2,292 <__divdf3+0x1f2>
     61e:	477d                	li	a4,31
     620:	04c74c63          	blt	a4,a2,678 <__divdf3+0x5d8>
     624:	47a2                	lw	a5,8(sp)
     626:	41e78713          	addi	a4,a5,1054
     62a:	00c6d7b3          	srl	a5,a3,a2
     62e:	00e696b3          	sll	a3,a3,a4
     632:	00d036b3          	snez	a3,a3
     636:	00e39733          	sll	a4,t2,a4
     63a:	8ed9                	or	a3,a3,a4
     63c:	8fd5                	or	a5,a5,a3
     63e:	00c3d3b3          	srl	t2,t2,a2
     642:	0077f713          	andi	a4,a5,7
     646:	cf01                	beqz	a4,65e <__divdf3+0x5be>
     648:	00f7f713          	andi	a4,a5,15
     64c:	4691                	li	a3,4
     64e:	00d70863          	beq	a4,a3,65e <__divdf3+0x5be>
     652:	00478713          	addi	a4,a5,4
     656:	00f736b3          	sltu	a3,a4,a5
     65a:	93b6                	add	t2,t2,a3
     65c:	87ba                	mv	a5,a4
     65e:	00800737          	lui	a4,0x800
     662:	00e3f733          	and	a4,t2,a4
     666:	eb31                	bnez	a4,6ba <__divdf3+0x61a>
     668:	01d39693          	slli	a3,t2,0x1d
     66c:	838d                	srli	a5,a5,0x3
     66e:	8edd                	or	a3,a3,a5
     670:	0033d393          	srli	t2,t2,0x3
     674:	4781                	li	a5,0
     676:	b795                	j	5da <__divdf3+0x53a>
     678:	5705                	li	a4,-31
     67a:	40f707b3          	sub	a5,a4,a5
     67e:	02000593          	li	a1,32
     682:	00f3d7b3          	srl	a5,t2,a5
     686:	4701                	li	a4,0
     688:	00b60763          	beq	a2,a1,696 <__divdf3+0x5f6>
     68c:	4722                	lw	a4,8(sp)
     68e:	43e70713          	addi	a4,a4,1086 # 80043e <lib_i2c.c.bdeb3654+0x7f8d01>
     692:	00e39733          	sll	a4,t2,a4
     696:	8f55                	or	a4,a4,a3
     698:	00e03733          	snez	a4,a4
     69c:	8fd9                	or	a5,a5,a4
     69e:	4381                	li	t2,0
     6a0:	b74d                	j	642 <__divdf3+0x5a2>
     6a2:	000803b7          	lui	t2,0x80
     6a6:	4681                	li	a3,0
     6a8:	7ff00793          	li	a5,2047
     6ac:	c602                	sw	zero,12(sp)
     6ae:	b735                	j	5da <__divdf3+0x53a>
     6b0:	4381                	li	t2,0
     6b2:	4681                	li	a3,0
     6b4:	7ff00793          	li	a5,2047
     6b8:	b70d                	j	5da <__divdf3+0x53a>
     6ba:	4381                	li	t2,0
     6bc:	4681                	li	a3,0
     6be:	4785                	li	a5,1
     6c0:	bf29                	j	5da <__divdf3+0x53a>

000006c2 <__muldf3>:
     6c2:	fc410113          	addi	sp,sp,-60
     6c6:	00c59793          	slli	a5,a1,0xc
     6ca:	d826                	sw	s1,48(sp)
     6cc:	0145d313          	srli	t1,a1,0x14
     6d0:	00c7d493          	srli	s1,a5,0xc
     6d4:	01f5d793          	srli	a5,a1,0x1f
     6d8:	da22                	sw	s0,52(sp)
     6da:	dc06                	sw	ra,56(sp)
     6dc:	7ff37313          	andi	t1,t1,2047
     6e0:	c43e                	sw	a5,8(sp)
     6e2:	8436                	mv	s0,a3
     6e4:	2a030363          	beqz	t1,98a <__muldf3+0x2c8>
     6e8:	7ff00793          	li	a5,2047
     6ec:	2ef30e63          	beq	t1,a5,9e8 <__muldf3+0x326>
     6f0:	00349693          	slli	a3,s1,0x3
     6f4:	01d55793          	srli	a5,a0,0x1d
     6f8:	8fd5                	or	a5,a5,a3
     6fa:	008006b7          	lui	a3,0x800
     6fe:	00d7e4b3          	or	s1,a5,a3
     702:	00351593          	slli	a1,a0,0x3
     706:	c0130313          	addi	t1,t1,-1023
     70a:	4281                	li	t0,0
     70c:	01445713          	srli	a4,s0,0x14
     710:	00c41793          	slli	a5,s0,0xc
     714:	7ff77713          	andi	a4,a4,2047
     718:	83b1                	srli	a5,a5,0xc
     71a:	807d                	srli	s0,s0,0x1f
     71c:	2e070763          	beqz	a4,a0a <__muldf3+0x348>
     720:	7ff00693          	li	a3,2047
     724:	34d70e63          	beq	a4,a3,a80 <__muldf3+0x3be>
     728:	01d65693          	srli	a3,a2,0x1d
     72c:	078e                	slli	a5,a5,0x3
     72e:	8edd                	or	a3,a3,a5
     730:	008007b7          	lui	a5,0x800
     734:	8fd5                	or	a5,a5,a3
     736:	00361693          	slli	a3,a2,0x3
     73a:	c0170613          	addi	a2,a4,-1023
     73e:	4701                	li	a4,0
     740:	4522                	lw	a0,8(sp)
     742:	961a                	add	a2,a2,t1
     744:	d232                	sw	a2,36(sp)
     746:	0605                	addi	a2,a2,1
     748:	8d21                	xor	a0,a0,s0
     74a:	c232                	sw	a2,4(sp)
     74c:	00229613          	slli	a2,t0,0x2
     750:	c02a                	sw	a0,0(sp)
     752:	8e59                	or	a2,a2,a4
     754:	4529                	li	a0,10
     756:	38c54163          	blt	a0,a2,ad8 <__muldf3+0x416>
     75a:	4509                	li	a0,2
     75c:	34c54363          	blt	a0,a2,aa2 <__muldf3+0x3e0>
     760:	167d                	addi	a2,a2,-1
     762:	4505                	li	a0,1
     764:	34c57e63          	bgeu	a0,a2,ac0 <__muldf3+0x3fe>
     768:	0105d713          	srli	a4,a1,0x10
     76c:	c43a                	sw	a4,8(sp)
     76e:	62c1                	lui	t0,0x10
     770:	0106d713          	srli	a4,a3,0x10
     774:	c63a                	sw	a4,12(sp)
     776:	fff28713          	addi	a4,t0,-1 # ffff <lib_i2c.c.bdeb3654+0x88c2>
     77a:	00e5f633          	and	a2,a1,a4
     77e:	8ef9                	and	a3,a3,a4
     780:	ca32                	sw	a2,20(sp)
     782:	8532                	mv	a0,a2
     784:	cc36                	sw	a3,24(sp)
     786:	85b6                	mv	a1,a3
     788:	2b05                	jal	cb8 <__mulsi3>
     78a:	83aa                	mv	t2,a0
     78c:	45b2                	lw	a1,12(sp)
     78e:	4552                	lw	a0,20(sp)
     790:	2325                	jal	cb8 <__mulsi3>
     792:	832a                	mv	t1,a0
     794:	45e2                	lw	a1,24(sp)
     796:	4522                	lw	a0,8(sp)
     798:	2305                	jal	cb8 <__mulsi3>
     79a:	842a                	mv	s0,a0
     79c:	45b2                	lw	a1,12(sp)
     79e:	4522                	lw	a0,8(sp)
     7a0:	2b21                	jal	cb8 <__mulsi3>
     7a2:	0103d693          	srli	a3,t2,0x10
     7a6:	9322                	add	t1,t1,s0
     7a8:	d02a                	sw	a0,32(sp)
     7aa:	9336                	add	t1,t1,a3
     7ac:	00837563          	bgeu	t1,s0,7b6 <__muldf3+0xf4>
     7b0:	005506b3          	add	a3,a0,t0
     7b4:	d036                	sw	a3,32(sp)
     7b6:	01035293          	srli	t0,t1,0x10
     7ba:	00e37333          	and	t1,t1,a4
     7be:	0342                	slli	t1,t1,0x10
     7c0:	00e3f6b3          	and	a3,t2,a4
     7c4:	969a                	add	a3,a3,t1
     7c6:	d436                	sw	a3,40(sp)
     7c8:	0107d693          	srli	a3,a5,0x10
     7cc:	8ff9                	and	a5,a5,a4
     7ce:	4552                	lw	a0,20(sp)
     7d0:	c836                	sw	a3,16(sp)
     7d2:	ce3e                	sw	a5,28(sp)
     7d4:	85be                	mv	a1,a5
     7d6:	21cd                	jal	cb8 <__mulsi3>
     7d8:	872a                	mv	a4,a0
     7da:	45c2                	lw	a1,16(sp)
     7dc:	4552                	lw	a0,20(sp)
     7de:	29e9                	jal	cb8 <__mulsi3>
     7e0:	87aa                	mv	a5,a0
     7e2:	45f2                	lw	a1,28(sp)
     7e4:	4522                	lw	a0,8(sp)
     7e6:	29c9                	jal	cb8 <__mulsi3>
     7e8:	832a                	mv	t1,a0
     7ea:	45c2                	lw	a1,16(sp)
     7ec:	4522                	lw	a0,8(sp)
     7ee:	21e9                	jal	cb8 <__mulsi3>
     7f0:	01075693          	srli	a3,a4,0x10
     7f4:	979a                	add	a5,a5,t1
     7f6:	96be                	add	a3,a3,a5
     7f8:	0066f463          	bgeu	a3,t1,800 <__muldf3+0x13e>
     7fc:	67c1                	lui	a5,0x10
     7fe:	953e                	add	a0,a0,a5
     800:	0106d793          	srli	a5,a3,0x10
     804:	97aa                	add	a5,a5,a0
     806:	6341                	lui	t1,0x10
     808:	d63e                	sw	a5,44(sp)
     80a:	fff30793          	addi	a5,t1,-1 # ffff <lib_i2c.c.bdeb3654+0x88c2>
     80e:	8efd                	and	a3,a3,a5
     810:	06c2                	slli	a3,a3,0x10
     812:	8f7d                	and	a4,a4,a5
     814:	9736                	add	a4,a4,a3
     816:	ca3a                	sw	a4,20(sp)
     818:	92ba                	add	t0,t0,a4
     81a:	8fe5                	and	a5,a5,s1
     81c:	0104d713          	srli	a4,s1,0x10
     820:	45e2                	lw	a1,24(sp)
     822:	c43a                	sw	a4,8(sp)
     824:	853e                	mv	a0,a5
     826:	2949                	jal	cb8 <__mulsi3>
     828:	872a                	mv	a4,a0
     82a:	45b2                	lw	a1,12(sp)
     82c:	853e                	mv	a0,a5
     82e:	2169                	jal	cb8 <__mulsi3>
     830:	83aa                	mv	t2,a0
     832:	45e2                	lw	a1,24(sp)
     834:	4522                	lw	a0,8(sp)
     836:	2149                	jal	cb8 <__mulsi3>
     838:	842a                	mv	s0,a0
     83a:	45b2                	lw	a1,12(sp)
     83c:	4522                	lw	a0,8(sp)
     83e:	29ad                	jal	cb8 <__mulsi3>
     840:	01075693          	srli	a3,a4,0x10
     844:	93a2                	add	t2,t2,s0
     846:	93b6                	add	t2,t2,a3
     848:	0083f363          	bgeu	t2,s0,84e <__muldf3+0x18c>
     84c:	951a                	add	a0,a0,t1
     84e:	6441                	lui	s0,0x10
     850:	fff40313          	addi	t1,s0,-1 # ffff <lib_i2c.c.bdeb3654+0x88c2>
     854:	0103d693          	srli	a3,t2,0x10
     858:	0063f3b3          	and	t2,t2,t1
     85c:	03c2                	slli	t2,t2,0x10
     85e:	00677733          	and	a4,a4,t1
     862:	971e                	add	a4,a4,t2
     864:	00a684b3          	add	s1,a3,a0
     868:	45f2                	lw	a1,28(sp)
     86a:	c63a                	sw	a4,12(sp)
     86c:	853e                	mv	a0,a5
     86e:	21a9                	jal	cb8 <__mulsi3>
     870:	872a                	mv	a4,a0
     872:	45c2                	lw	a1,16(sp)
     874:	853e                	mv	a0,a5
     876:	2189                	jal	cb8 <__mulsi3>
     878:	87aa                	mv	a5,a0
     87a:	45f2                	lw	a1,28(sp)
     87c:	4522                	lw	a0,8(sp)
     87e:	292d                	jal	cb8 <__mulsi3>
     880:	83aa                	mv	t2,a0
     882:	45c2                	lw	a1,16(sp)
     884:	4522                	lw	a0,8(sp)
     886:	290d                	jal	cb8 <__mulsi3>
     888:	01075693          	srli	a3,a4,0x10
     88c:	979e                	add	a5,a5,t2
     88e:	97b6                	add	a5,a5,a3
     890:	0077f363          	bgeu	a5,t2,896 <__muldf3+0x1d4>
     894:	9522                	add	a0,a0,s0
     896:	0067f633          	and	a2,a5,t1
     89a:	0642                	slli	a2,a2,0x10
     89c:	00677733          	and	a4,a4,t1
     8a0:	5682                	lw	a3,32(sp)
     8a2:	9732                	add	a4,a4,a2
     8a4:	45d2                	lw	a1,20(sp)
     8a6:	5632                	lw	a2,44(sp)
     8a8:	9696                	add	a3,a3,t0
     8aa:	00b6b5b3          	sltu	a1,a3,a1
     8ae:	963a                	add	a2,a2,a4
     8b0:	95b2                	add	a1,a1,a2
     8b2:	00e63733          	sltu	a4,a2,a4
     8b6:	00c5b633          	sltu	a2,a1,a2
     8ba:	8e59                	or	a2,a2,a4
     8bc:	83c1                	srli	a5,a5,0x10
     8be:	963e                	add	a2,a2,a5
     8c0:	47b2                	lw	a5,12(sp)
     8c2:	009582b3          	add	t0,a1,s1
     8c6:	00f68733          	add	a4,a3,a5
     8ca:	00d736b3          	sltu	a3,a4,a3
     8ce:	00d28333          	add	t1,t0,a3
     8d2:	00b2b7b3          	sltu	a5,t0,a1
     8d6:	005332b3          	sltu	t0,t1,t0
     8da:	0057e7b3          	or	a5,a5,t0
     8de:	97b2                	add	a5,a5,a2
     8e0:	97aa                	add	a5,a5,a0
     8e2:	5622                	lw	a2,40(sp)
     8e4:	01735693          	srli	a3,t1,0x17
     8e8:	07a6                	slli	a5,a5,0x9
     8ea:	8fd5                	or	a5,a5,a3
     8ec:	00971693          	slli	a3,a4,0x9
     8f0:	8ed1                	or	a3,a3,a2
     8f2:	835d                	srli	a4,a4,0x17
     8f4:	00d036b3          	snez	a3,a3
     8f8:	8ed9                	or	a3,a3,a4
     8fa:	01000737          	lui	a4,0x1000
     8fe:	0326                	slli	t1,t1,0x9
     900:	8f7d                	and	a4,a4,a5
     902:	0066e6b3          	or	a3,a3,t1
     906:	1e070563          	beqz	a4,af0 <__muldf3+0x42e>
     90a:	0016d713          	srli	a4,a3,0x1
     90e:	8a85                	andi	a3,a3,1
     910:	8f55                	or	a4,a4,a3
     912:	01f79693          	slli	a3,a5,0x1f
     916:	8ed9                	or	a3,a3,a4
     918:	8385                	srli	a5,a5,0x1
     91a:	4712                	lw	a4,4(sp)
     91c:	3ff70513          	addi	a0,a4,1023 # 10003ff <lib_i2c.c.bdeb3654+0xff8cc2>
     920:	1ca05b63          	blez	a0,af6 <__muldf3+0x434>
     924:	0076f713          	andi	a4,a3,7
     928:	cf01                	beqz	a4,940 <__muldf3+0x27e>
     92a:	00f6f713          	andi	a4,a3,15
     92e:	4611                	li	a2,4
     930:	00c70863          	beq	a4,a2,940 <__muldf3+0x27e>
     934:	00468713          	addi	a4,a3,4 # 800004 <lib_i2c.c.bdeb3654+0x7f88c7>
     938:	00d73633          	sltu	a2,a4,a3
     93c:	97b2                	add	a5,a5,a2
     93e:	86ba                	mv	a3,a4
     940:	01000737          	lui	a4,0x1000
     944:	8f7d                	and	a4,a4,a5
     946:	cb01                	beqz	a4,956 <__muldf3+0x294>
     948:	ff000737          	lui	a4,0xff000
     94c:	177d                	addi	a4,a4,-1
     94e:	8ff9                	and	a5,a5,a4
     950:	4712                	lw	a4,4(sp)
     952:	40070513          	addi	a0,a4,1024 # ff000400 <_eusrstack+0xdefffc00>
     956:	7fe00713          	li	a4,2046
     95a:	22a74e63          	blt	a4,a0,b96 <__muldf3+0x4d4>
     95e:	01d79613          	slli	a2,a5,0x1d
     962:	828d                	srli	a3,a3,0x3
     964:	8e55                	or	a2,a2,a3
     966:	838d                	srli	a5,a5,0x3
     968:	07b2                	slli	a5,a5,0xc
     96a:	01451713          	slli	a4,a0,0x14
     96e:	83b1                	srli	a5,a5,0xc
     970:	8fd9                	or	a5,a5,a4
     972:	4702                	lw	a4,0(sp)
     974:	50e2                	lw	ra,56(sp)
     976:	5452                	lw	s0,52(sp)
     978:	077e                	slli	a4,a4,0x1f
     97a:	00e7e6b3          	or	a3,a5,a4
     97e:	54c2                	lw	s1,48(sp)
     980:	8532                	mv	a0,a2
     982:	85b6                	mv	a1,a3
     984:	03c10113          	addi	sp,sp,60
     988:	8082                	ret
     98a:	00a4e5b3          	or	a1,s1,a0
     98e:	c5ad                	beqz	a1,9f8 <__muldf3+0x336>
     990:	c232                	sw	a2,4(sp)
     992:	c89d                	beqz	s1,9c8 <__muldf3+0x306>
     994:	c02a                	sw	a0,0(sp)
     996:	8526                	mv	a0,s1
     998:	2e5d                	jal	d4e <__clzsi2>
     99a:	4702                	lw	a4,0(sp)
     99c:	4612                	lw	a2,4(sp)
     99e:	ff550593          	addi	a1,a0,-11
     9a2:	47f5                	li	a5,29
     9a4:	ff850693          	addi	a3,a0,-8
     9a8:	8f8d                	sub	a5,a5,a1
     9aa:	00d49333          	sll	t1,s1,a3
     9ae:	00f757b3          	srl	a5,a4,a5
     9b2:	0067e7b3          	or	a5,a5,t1
     9b6:	00d714b3          	sll	s1,a4,a3
     9ba:	c0d00313          	li	t1,-1011
     9be:	85a6                	mv	a1,s1
     9c0:	40a30333          	sub	t1,t1,a0
     9c4:	84be                	mv	s1,a5
     9c6:	b391                	j	70a <__muldf3+0x48>
     9c8:	c02a                	sw	a0,0(sp)
     9ca:	2651                	jal	d4e <__clzsi2>
     9cc:	87aa                	mv	a5,a0
     9ce:	01578593          	addi	a1,a5,21 # 10015 <lib_i2c.c.bdeb3654+0x88d8>
     9d2:	46f1                	li	a3,28
     9d4:	4702                	lw	a4,0(sp)
     9d6:	4612                	lw	a2,4(sp)
     9d8:	02050513          	addi	a0,a0,32
     9dc:	fcb6d3e3          	bge	a3,a1,9a2 <__muldf3+0x2e0>
     9e0:	17e1                	addi	a5,a5,-8
     9e2:	00f717b3          	sll	a5,a4,a5
     9e6:	bfd1                	j	9ba <__muldf3+0x2f8>
     9e8:	00a4e5b3          	or	a1,s1,a0
     9ec:	c991                	beqz	a1,a00 <__muldf3+0x33e>
     9ee:	85aa                	mv	a1,a0
     9f0:	7ff00313          	li	t1,2047
     9f4:	428d                	li	t0,3
     9f6:	bb19                	j	70c <__muldf3+0x4a>
     9f8:	4481                	li	s1,0
     9fa:	4301                	li	t1,0
     9fc:	4285                	li	t0,1
     9fe:	b339                	j	70c <__muldf3+0x4a>
     a00:	4481                	li	s1,0
     a02:	7ff00313          	li	t1,2047
     a06:	4289                	li	t0,2
     a08:	b311                	j	70c <__muldf3+0x4a>
     a0a:	00c7e6b3          	or	a3,a5,a2
     a0e:	c2c9                	beqz	a3,a90 <__muldf3+0x3ce>
     a10:	c3a1                	beqz	a5,a50 <__muldf3+0x38e>
     a12:	853e                	mv	a0,a5
     a14:	ca32                	sw	a2,20(sp)
     a16:	c82e                	sw	a1,16(sp)
     a18:	c61a                	sw	t1,12(sp)
     a1a:	c216                	sw	t0,4(sp)
     a1c:	c03e                	sw	a5,0(sp)
     a1e:	2e05                	jal	d4e <__clzsi2>
     a20:	4782                	lw	a5,0(sp)
     a22:	4292                	lw	t0,4(sp)
     a24:	4332                	lw	t1,12(sp)
     a26:	45c2                	lw	a1,16(sp)
     a28:	4652                	lw	a2,20(sp)
     a2a:	ff550693          	addi	a3,a0,-11
     a2e:	4775                	li	a4,29
     a30:	ff850393          	addi	t2,a0,-8
     a34:	8f15                	sub	a4,a4,a3
     a36:	007797b3          	sll	a5,a5,t2
     a3a:	00e65733          	srl	a4,a2,a4
     a3e:	8f5d                	or	a4,a4,a5
     a40:	007617b3          	sll	a5,a2,t2
     a44:	c0d00613          	li	a2,-1011
     a48:	86be                	mv	a3,a5
     a4a:	8e09                	sub	a2,a2,a0
     a4c:	87ba                	mv	a5,a4
     a4e:	b9c5                	j	73e <__muldf3+0x7c>
     a50:	8532                	mv	a0,a2
     a52:	ca3e                	sw	a5,20(sp)
     a54:	c82e                	sw	a1,16(sp)
     a56:	c61a                	sw	t1,12(sp)
     a58:	c216                	sw	t0,4(sp)
     a5a:	c032                	sw	a2,0(sp)
     a5c:	2ccd                	jal	d4e <__clzsi2>
     a5e:	872a                	mv	a4,a0
     a60:	01570693          	addi	a3,a4,21
     a64:	43f1                	li	t2,28
     a66:	4602                	lw	a2,0(sp)
     a68:	4292                	lw	t0,4(sp)
     a6a:	4332                	lw	t1,12(sp)
     a6c:	45c2                	lw	a1,16(sp)
     a6e:	47d2                	lw	a5,20(sp)
     a70:	02050513          	addi	a0,a0,32
     a74:	fad3dde3          	bge	t2,a3,a2e <__muldf3+0x36c>
     a78:	1761                	addi	a4,a4,-8
     a7a:	00e61733          	sll	a4,a2,a4
     a7e:	b7d9                	j	a44 <__muldf3+0x382>
     a80:	00c7e6b3          	or	a3,a5,a2
     a84:	ca91                	beqz	a3,a98 <__muldf3+0x3d6>
     a86:	86b2                	mv	a3,a2
     a88:	470d                	li	a4,3
     a8a:	7ff00613          	li	a2,2047
     a8e:	b94d                	j	740 <__muldf3+0x7e>
     a90:	4781                	li	a5,0
     a92:	4601                	li	a2,0
     a94:	4705                	li	a4,1
     a96:	b16d                	j	740 <__muldf3+0x7e>
     a98:	4781                	li	a5,0
     a9a:	7ff00613          	li	a2,2047
     a9e:	4709                	li	a4,2
     aa0:	b145                	j	740 <__muldf3+0x7e>
     aa2:	4505                	li	a0,1
     aa4:	00c51533          	sll	a0,a0,a2
     aa8:	53057613          	andi	a2,a0,1328
     aac:	ee15                	bnez	a2,ae8 <__muldf3+0x426>
     aae:	24057313          	andi	t1,a0,576
     ab2:	0c031863          	bnez	t1,b82 <__muldf3+0x4c0>
     ab6:	08857513          	andi	a0,a0,136
     aba:	ca0507e3          	beqz	a0,768 <__muldf3+0xa6>
     abe:	c022                	sw	s0,0(sp)
     ac0:	4609                	li	a2,2
     ac2:	0cc70a63          	beq	a4,a2,b96 <__muldf3+0x4d4>
     ac6:	460d                	li	a2,3
     ac8:	0cc70363          	beq	a4,a2,b8e <__muldf3+0x4cc>
     acc:	4605                	li	a2,1
     ace:	e4c716e3          	bne	a4,a2,91a <__muldf3+0x258>
     ad2:	4781                	li	a5,0
     ad4:	4601                	li	a2,0
     ad6:	a041                	j	b56 <__muldf3+0x494>
     ad8:	453d                	li	a0,15
     ada:	0aa60a63          	beq	a2,a0,b8e <__muldf3+0x4cc>
     ade:	452d                	li	a0,11
     ae0:	fca60fe3          	beq	a2,a0,abe <__muldf3+0x3fc>
     ae4:	47a2                	lw	a5,8(sp)
     ae6:	c03e                	sw	a5,0(sp)
     ae8:	87a6                	mv	a5,s1
     aea:	86ae                	mv	a3,a1
     aec:	8716                	mv	a4,t0
     aee:	bfc9                	j	ac0 <__muldf3+0x3fe>
     af0:	5712                	lw	a4,36(sp)
     af2:	c23a                	sw	a4,4(sp)
     af4:	b51d                	j	91a <__muldf3+0x258>
     af6:	4585                	li	a1,1
     af8:	c909                	beqz	a0,b0a <__muldf3+0x448>
     afa:	8d89                	sub	a1,a1,a0
     afc:	03800713          	li	a4,56
     b00:	fcb749e3          	blt	a4,a1,ad2 <__muldf3+0x410>
     b04:	477d                	li	a4,31
     b06:	04b74a63          	blt	a4,a1,b5a <__muldf3+0x498>
     b0a:	4712                	lw	a4,4(sp)
     b0c:	00b6d533          	srl	a0,a3,a1
     b10:	41e70613          	addi	a2,a4,1054
     b14:	00c69733          	sll	a4,a3,a2
     b18:	00e03733          	snez	a4,a4
     b1c:	00c79633          	sll	a2,a5,a2
     b20:	8f51                	or	a4,a4,a2
     b22:	8f49                	or	a4,a4,a0
     b24:	00b7d7b3          	srl	a5,a5,a1
     b28:	00777693          	andi	a3,a4,7
     b2c:	ce81                	beqz	a3,b44 <__muldf3+0x482>
     b2e:	00f77693          	andi	a3,a4,15
     b32:	4611                	li	a2,4
     b34:	00c68863          	beq	a3,a2,b44 <__muldf3+0x482>
     b38:	00470693          	addi	a3,a4,4
     b3c:	00e6b633          	sltu	a2,a3,a4
     b40:	97b2                	add	a5,a5,a2
     b42:	8736                	mv	a4,a3
     b44:	008006b7          	lui	a3,0x800
     b48:	8efd                	and	a3,a3,a5
     b4a:	eab9                	bnez	a3,ba0 <__muldf3+0x4de>
     b4c:	01d79613          	slli	a2,a5,0x1d
     b50:	830d                	srli	a4,a4,0x3
     b52:	8e59                	or	a2,a2,a4
     b54:	838d                	srli	a5,a5,0x3
     b56:	4501                	li	a0,0
     b58:	bd01                	j	968 <__muldf3+0x2a6>
     b5a:	5705                	li	a4,-31
     b5c:	8f09                	sub	a4,a4,a0
     b5e:	02000513          	li	a0,32
     b62:	00e7d733          	srl	a4,a5,a4
     b66:	4601                	li	a2,0
     b68:	00a58763          	beq	a1,a0,b76 <__muldf3+0x4b4>
     b6c:	4612                	lw	a2,4(sp)
     b6e:	43e60613          	addi	a2,a2,1086
     b72:	00c79633          	sll	a2,a5,a2
     b76:	8e55                	or	a2,a2,a3
     b78:	00c03633          	snez	a2,a2
     b7c:	8f51                	or	a4,a4,a2
     b7e:	4781                	li	a5,0
     b80:	b765                	j	b28 <__muldf3+0x466>
     b82:	000807b7          	lui	a5,0x80
     b86:	7ff00513          	li	a0,2047
     b8a:	c002                	sw	zero,0(sp)
     b8c:	bbf1                	j	968 <__muldf3+0x2a6>
     b8e:	000807b7          	lui	a5,0x80
     b92:	4601                	li	a2,0
     b94:	bfcd                	j	b86 <__muldf3+0x4c4>
     b96:	4781                	li	a5,0
     b98:	4601                	li	a2,0
     b9a:	7ff00513          	li	a0,2047
     b9e:	b3e9                	j	968 <__muldf3+0x2a6>
     ba0:	4781                	li	a5,0
     ba2:	4601                	li	a2,0
     ba4:	4505                	li	a0,1
     ba6:	b3c9                	j	968 <__muldf3+0x2a6>

00000ba8 <__fixunsdfsi>:
     ba8:	0145d713          	srli	a4,a1,0x14
     bac:	00100637          	lui	a2,0x100
     bb0:	86aa                	mv	a3,a0
     bb2:	fff60793          	addi	a5,a2,-1 # fffff <lib_i2c.c.bdeb3654+0xf88c2>
     bb6:	7ff77713          	andi	a4,a4,2047
     bba:	3fe00513          	li	a0,1022
     bbe:	8fed                	and	a5,a5,a1
     bc0:	81fd                	srli	a1,a1,0x1f
     bc2:	02e55f63          	bge	a0,a4,c00 <__fixunsdfsi+0x58>
     bc6:	4501                	li	a0,0
     bc8:	ed8d                	bnez	a1,c02 <__fixunsdfsi+0x5a>
     bca:	41e00593          	li	a1,1054
     bce:	557d                	li	a0,-1
     bd0:	02e5c963          	blt	a1,a4,c02 <__fixunsdfsi+0x5a>
     bd4:	8fd1                	or	a5,a5,a2
     bd6:	43300613          	li	a2,1075
     bda:	8e19                	sub	a2,a2,a4
     bdc:	45fd                	li	a1,31
     bde:	00c5ca63          	blt	a1,a2,bf2 <__fixunsdfsi+0x4a>
     be2:	bed70713          	addi	a4,a4,-1043
     be6:	00e79533          	sll	a0,a5,a4
     bea:	00c6d6b3          	srl	a3,a3,a2
     bee:	8d55                	or	a0,a0,a3
     bf0:	8082                	ret
     bf2:	41300693          	li	a3,1043
     bf6:	40e68733          	sub	a4,a3,a4
     bfa:	00e7d533          	srl	a0,a5,a4
     bfe:	8082                	ret
     c00:	4501                	li	a0,0
     c02:	8082                	ret

00000c04 <__floatsidf>:
     c04:	1151                	addi	sp,sp,-12
     c06:	c406                	sw	ra,8(sp)
     c08:	c222                	sw	s0,4(sp)
     c0a:	c026                	sw	s1,0(sp)
     c0c:	cd21                	beqz	a0,c64 <__floatsidf+0x60>
     c0e:	41f55793          	srai	a5,a0,0x1f
     c12:	00a7c433          	xor	s0,a5,a0
     c16:	8c1d                	sub	s0,s0,a5
     c18:	01f55493          	srli	s1,a0,0x1f
     c1c:	8522                	mv	a0,s0
     c1e:	2a05                	jal	d4e <__clzsi2>
     c20:	41e00693          	li	a3,1054
     c24:	47a9                	li	a5,10
     c26:	8e89                	sub	a3,a3,a0
     c28:	02a7c863          	blt	a5,a0,c58 <__floatsidf+0x54>
     c2c:	47ad                	li	a5,11
     c2e:	8f89                	sub	a5,a5,a0
     c30:	0555                	addi	a0,a0,21
     c32:	00a41733          	sll	a4,s0,a0
     c36:	00f457b3          	srl	a5,s0,a5
     c3a:	8526                	mv	a0,s1
     c3c:	07b2                	slli	a5,a5,0xc
     c3e:	40a2                	lw	ra,8(sp)
     c40:	4412                	lw	s0,4(sp)
     c42:	83b1                	srli	a5,a5,0xc
     c44:	06d2                	slli	a3,a3,0x14
     c46:	057e                	slli	a0,a0,0x1f
     c48:	8edd                	or	a3,a3,a5
     c4a:	00a6e7b3          	or	a5,a3,a0
     c4e:	4482                	lw	s1,0(sp)
     c50:	853a                	mv	a0,a4
     c52:	85be                	mv	a1,a5
     c54:	0131                	addi	sp,sp,12
     c56:	8082                	ret
     c58:	1555                	addi	a0,a0,-11
     c5a:	00a417b3          	sll	a5,s0,a0
     c5e:	8526                	mv	a0,s1
     c60:	4701                	li	a4,0
     c62:	bfe9                	j	c3c <__floatsidf+0x38>
     c64:	4681                	li	a3,0
     c66:	4781                	li	a5,0
     c68:	bfe5                	j	c60 <__floatsidf+0x5c>

00000c6a <__floatunsidf>:
     c6a:	1151                	addi	sp,sp,-12
     c6c:	c222                	sw	s0,4(sp)
     c6e:	c406                	sw	ra,8(sp)
     c70:	842a                	mv	s0,a0
     c72:	cd1d                	beqz	a0,cb0 <__floatunsidf+0x46>
     c74:	28e9                	jal	d4e <__clzsi2>
     c76:	41e00713          	li	a4,1054
     c7a:	47a9                	li	a5,10
     c7c:	8f09                	sub	a4,a4,a0
     c7e:	02a7c463          	blt	a5,a0,ca6 <__floatunsidf+0x3c>
     c82:	47ad                	li	a5,11
     c84:	8f89                	sub	a5,a5,a0
     c86:	0555                	addi	a0,a0,21
     c88:	00f457b3          	srl	a5,s0,a5
     c8c:	00a41433          	sll	s0,s0,a0
     c90:	40a2                	lw	ra,8(sp)
     c92:	8522                	mv	a0,s0
     c94:	07b2                	slli	a5,a5,0xc
     c96:	4412                	lw	s0,4(sp)
     c98:	0752                	slli	a4,a4,0x14
     c9a:	83b1                	srli	a5,a5,0xc
     c9c:	00f766b3          	or	a3,a4,a5
     ca0:	85b6                	mv	a1,a3
     ca2:	0131                	addi	sp,sp,12
     ca4:	8082                	ret
     ca6:	1555                	addi	a0,a0,-11
     ca8:	00a417b3          	sll	a5,s0,a0
     cac:	4401                	li	s0,0
     cae:	b7cd                	j	c90 <__floatunsidf+0x26>
     cb0:	4781                	li	a5,0
     cb2:	4701                	li	a4,0
     cb4:	bff1                	j	c90 <__floatunsidf+0x26>
	...

00000cb8 <__mulsi3>:
     cb8:	862a                	mv	a2,a0
     cba:	4501                	li	a0,0
     cbc:	0015f693          	andi	a3,a1,1
     cc0:	c291                	beqz	a3,cc4 <__mulsi3+0xc>
     cc2:	9532                	add	a0,a0,a2
     cc4:	8185                	srli	a1,a1,0x1
     cc6:	0606                	slli	a2,a2,0x1
     cc8:	f9f5                	bnez	a1,cbc <__mulsi3+0x4>
     cca:	8082                	ret
     ccc:	0000                	unimp
	...

00000cd0 <__divsi3>:
     cd0:	02054e63          	bltz	a0,d0c <__umodsi3+0x8>
     cd4:	0405c363          	bltz	a1,d1a <__umodsi3+0x16>

00000cd8 <__hidden___udivsi3>:
     cd8:	862e                	mv	a2,a1
     cda:	85aa                	mv	a1,a0
     cdc:	557d                	li	a0,-1
     cde:	c215                	beqz	a2,d02 <__hidden___udivsi3+0x2a>
     ce0:	4685                	li	a3,1
     ce2:	00b67863          	bgeu	a2,a1,cf2 <__hidden___udivsi3+0x1a>
     ce6:	00c05663          	blez	a2,cf2 <__hidden___udivsi3+0x1a>
     cea:	0606                	slli	a2,a2,0x1
     cec:	0686                	slli	a3,a3,0x1
     cee:	feb66ce3          	bltu	a2,a1,ce6 <__hidden___udivsi3+0xe>
     cf2:	4501                	li	a0,0
     cf4:	00c5e463          	bltu	a1,a2,cfc <__hidden___udivsi3+0x24>
     cf8:	8d91                	sub	a1,a1,a2
     cfa:	8d55                	or	a0,a0,a3
     cfc:	8285                	srli	a3,a3,0x1
     cfe:	8205                	srli	a2,a2,0x1
     d00:	faf5                	bnez	a3,cf4 <__hidden___udivsi3+0x1c>
     d02:	8082                	ret

00000d04 <__umodsi3>:
     d04:	8286                	mv	t0,ra
     d06:	3fc9                	jal	cd8 <__hidden___udivsi3>
     d08:	852e                	mv	a0,a1
     d0a:	8282                	jr	t0
     d0c:	40a00533          	neg	a0,a0
     d10:	00b04763          	bgtz	a1,d1e <__umodsi3+0x1a>
     d14:	40b005b3          	neg	a1,a1
     d18:	b7c1                	j	cd8 <__hidden___udivsi3>
     d1a:	40b005b3          	neg	a1,a1
     d1e:	8286                	mv	t0,ra
     d20:	3f65                	jal	cd8 <__hidden___udivsi3>
     d22:	40a00533          	neg	a0,a0
     d26:	8282                	jr	t0

00000d28 <__modsi3>:
     d28:	8286                	mv	t0,ra
     d2a:	0005c763          	bltz	a1,d38 <__modsi3+0x10>
     d2e:	00054963          	bltz	a0,d40 <__modsi3+0x18>
     d32:	375d                	jal	cd8 <__hidden___udivsi3>
     d34:	852e                	mv	a0,a1
     d36:	8282                	jr	t0
     d38:	40b005b3          	neg	a1,a1
     d3c:	fe055be3          	bgez	a0,d32 <__modsi3+0xa>
     d40:	40a00533          	neg	a0,a0
     d44:	3f51                	jal	cd8 <__hidden___udivsi3>
     d46:	40b00533          	neg	a0,a1
     d4a:	8282                	jr	t0
	...

00000d4e <__clzsi2>:
     d4e:	67c1                	lui	a5,0x10
     d50:	02f57563          	bgeu	a0,a5,d7a <__clzsi2+0x2c>
     d54:	10053793          	sltiu	a5,a0,256
     d58:	0017c793          	xori	a5,a5,1
     d5c:	078e                	slli	a5,a5,0x3
     d5e:	670d                	lui	a4,0x3
     d60:	02000693          	li	a3,32
     d64:	8e9d                	sub	a3,a3,a5
     d66:	00f55533          	srl	a0,a0,a5
     d6a:	39470793          	addi	a5,a4,916 # 3394 <__clz_tab>
     d6e:	97aa                	add	a5,a5,a0
     d70:	0007c503          	lbu	a0,0(a5) # 10000 <lib_i2c.c.bdeb3654+0x88c3>
     d74:	40a68533          	sub	a0,a3,a0
     d78:	8082                	ret
     d7a:	01000737          	lui	a4,0x1000
     d7e:	47c1                	li	a5,16
     d80:	fce56fe3          	bltu	a0,a4,d5e <__clzsi2+0x10>
     d84:	47e1                	li	a5,24
     d86:	bfe1                	j	d5e <__clzsi2+0x10>

00000d88 <mini_pad>:
{
     d88:	1131                	addi	sp,sp,-20
     d8a:	c426                	sw	s1,8(sp)
     d8c:	c806                	sw	ra,16(sp)
     d8e:	c622                	sw	s0,12(sp)
     d90:	84ae                	mv	s1,a1
     d92:	87aa                	mv	a5,a0
     d94:	85b2                	mv	a1,a2
	int overflow = 0;
     d96:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     d98:	cab5                	beqz	a3,e0c <mini_pad+0x84>
	if(len > pad_to) {
     d9a:	0096d463          	bge	a3,s1,da2 <mini_pad+0x1a>
     d9e:	84b6                	mv	s1,a3
		overflow = 1;
     da0:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     da2:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     da6:	00045363          	bgez	s0,dac <mini_pad+0x24>
     daa:	4401                	li	s0,0
     dac:	8622                	mv	a2,s0
     dae:	853a                	mv	a0,a4
     db0:	c23e                	sw	a5,4(sp)
     db2:	c01a                	sw	t1,0(sp)
     db4:	699000ef          	jal	ra,1c4c <memset>
     db8:	4302                	lw	t1,0(sp)
     dba:	4792                	lw	a5,4(sp)
     dbc:	872a                	mv	a4,a0
     dbe:	008506b3          	add	a3,a0,s0
     dc2:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     dc4:	40c485b3          	sub	a1,s1,a2
     dc8:	04b04463          	bgtz	a1,e10 <mini_pad+0x88>
     dcc:	0004d363          	bgez	s1,dd2 <mini_pad+0x4a>
     dd0:	4481                	li	s1,0
     dd2:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     dd6:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     dda:	02030463          	beqz	t1,e02 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     dde:	02c77263          	bgeu	a4,a2,e02 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     de2:	02a00793          	li	a5,42
     de6:	fef60fa3          	sb	a5,-1(a2)
     dea:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     dee:	00d77a63          	bgeu	a4,a3,e02 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     df2:	fef60f23          	sb	a5,-2(a2)
     df6:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     dfa:	00d77463          	bgeu	a4,a3,e02 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     dfe:	fef60ea3          	sb	a5,-3(a2)
}
     e02:	40c2                	lw	ra,16(sp)
     e04:	4432                	lw	s0,12(sp)
     e06:	44a2                	lw	s1,8(sp)
     e08:	0151                	addi	sp,sp,20
     e0a:	8082                	ret
	if(pad_to == 0) pad_to = len;
     e0c:	86a6                	mv	a3,s1
     e0e:	bf51                	j	da2 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     e10:	00c785b3          	add	a1,a5,a2
     e14:	0005c503          	lbu	a0,0(a1)
     e18:	00c685b3          	add	a1,a3,a2
     e1c:	0605                	addi	a2,a2,1
     e1e:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     e22:	b74d                	j	dc4 <mini_pad+0x3c>

00000e24 <_puts>:
{
     e24:	832a                	mv	t1,a0
     e26:	852e                	mv	a0,a1
	if(!buf) return len;
     e28:	ce01                	beqz	a2,e40 <_puts+0x1c>
	char * p0 = b->buffer;
     e2a:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     e2e:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     e30:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     e32:	00a74863          	blt	a4,a0,e42 <_puts+0x1e>
	*(b->pbuffer) = 0;
     e36:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     e3a:	4248                	lw	a0,4(a2)
     e3c:	40550533          	sub	a0,a0,t0
}
     e40:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     e42:	4614                	lw	a3,8(a2)
     e44:	fff68593          	addi	a1,a3,-1 # 7fffff <lib_i2c.c.bdeb3654+0x7f88c2>
     e48:	4214                	lw	a3,0(a2)
     e4a:	96ae                	add	a3,a3,a1
     e4c:	fed785e3          	beq	a5,a3,e36 <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     e50:	00178693          	addi	a3,a5,1
     e54:	c254                	sw	a3,4(a2)
     e56:	00e306b3          	add	a3,t1,a4
     e5a:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     e5e:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     e60:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     e64:	b7f1                	j	e30 <_puts+0xc>

00000e66 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     e66:	e0000737          	lui	a4,0xe0000
     e6a:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     e6e:	0f470693          	addi	a3,a4,244
     e72:	0807f793          	andi	a5,a5,128
     e76:	fbf5                	bnez	a5,e6a <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     e78:	783027b7          	lui	a5,0x78302
     e7c:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     e80:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     e82:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     e84:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     e88:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     e8a:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     e8c:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     e90:	0807f793          	andi	a5,a5,128
     e94:	ffe5                	bnez	a5,e8c <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     e96:	00e557b3          	srl	a5,a0,a4
     e9a:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     e9e:	03000793          	li	a5,48
     ea2:	00d35463          	bge	t1,a3,eaa <PrintHex+0x44>
     ea6:	05700793          	li	a5,87
     eaa:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     eac:	07a2                	slli	a5,a5,0x8
     eae:	0857e793          	ori	a5,a5,133
     eb2:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     eb6:	1771                	addi	a4,a4,-4
     eb8:	fcb71ae3          	bne	a4,a1,e8c <PrintHex+0x26>
}
     ebc:	8082                	ret

00000ebe <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     ebe:	e000f7b7          	lui	a5,0xe000f
     ec2:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     ec4:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     ec8:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     eca:	471c                	lw	a5,8(a4)
     ecc:	8f89                	sub	a5,a5,a0
     ece:	fe07cee3          	bltz	a5,eca <DelaySysTick+0xc>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     ed2:	8082                	ret

00000ed4 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     ed4:	1101                	addi	sp,sp,-32
     ed6:	ce06                	sw	ra,28(sp)
     ed8:	cc22                	sw	s0,24(sp)
     eda:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     edc:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     ede:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     ee0:	00055763          	bgez	a0,eee <mini_itoa.part.0+0x1a>
     ee4:	e689                	bnez	a3,eee <mini_itoa.part.0+0x1a>
		negative = 1;
     ee6:	4785                	li	a5,1
		value = -value;
     ee8:	40a00333          	neg	t1,a0
		negative = 1;
     eec:	c03e                	sw	a5,0(sp)
     eee:	06100413          	li	s0,97
     ef2:	c219                	beqz	a2,ef8 <mini_itoa.part.0+0x24>
     ef4:	04100413          	li	s0,65
	int	negative = 0;
     ef8:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     efa:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     efc:	851a                	mv	a0,t1
     efe:	c83a                	sw	a4,16(sp)
     f00:	c21a                	sw	t1,4(sp)
     f02:	c62e                	sw	a1,12(sp)
     f04:	c41a                	sw	t1,8(sp)
     f06:	3bfd                	jal	d04 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     f08:	47a5                	li	a5,9
     f0a:	4322                	lw	t1,8(sp)
     f0c:	45b2                	lw	a1,12(sp)
     f0e:	4742                	lw	a4,16(sp)
     f10:	0ff57693          	andi	a3,a0,255
     f14:	06a7e163          	bltu	a5,a0,f76 <mini_itoa.part.0+0xa2>
     f18:	03068693          	addi	a3,a3,48
     f1c:	0ff6f693          	andi	a3,a3,255
     f20:	00148793          	addi	a5,s1,1
     f24:	00d48023          	sb	a3,0(s1)
		value /= radix;
     f28:	851a                	mv	a0,t1
     f2a:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     f2c:	c63e                	sw	a5,12(sp)
		value /= radix;
     f2e:	c42e                	sw	a1,8(sp)
     f30:	3365                	jal	cd8 <__hidden___udivsi3>
	} while (value > 0);
     f32:	4692                	lw	a3,4(sp)
     f34:	45a2                	lw	a1,8(sp)
     f36:	47b2                	lw	a5,12(sp)
     f38:	4742                	lw	a4,16(sp)
		value /= radix;
     f3a:	832a                	mv	t1,a0
	} while (value > 0);
     f3c:	02b6fb63          	bgeu	a3,a1,f72 <mini_itoa.part.0+0x9e>
	if (negative)
     f40:	4682                	lw	a3,0(sp)
     f42:	c699                	beqz	a3,f50 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     f44:	02d00693          	li	a3,45
     f48:	00d78023          	sb	a3,0(a5) # e000f000 <_eusrstack+0xc000e800>
     f4c:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     f50:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     f54:	01f55693          	srli	a3,a0,0x1f
     f58:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     f5a:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     f5e:	8685                	srai	a3,a3,0x1
     f60:	4601                	li	a2,0
     f62:	17fd                	addi	a5,a5,-1
     f64:	00d64b63          	blt	a2,a3,f7a <mini_itoa.part.0+0xa6>
}
     f68:	40f2                	lw	ra,28(sp)
     f6a:	4462                	lw	s0,24(sp)
     f6c:	44d2                	lw	s1,20(sp)
     f6e:	6105                	addi	sp,sp,32
     f70:	8082                	ret
	} while (value > 0);
     f72:	84be                	mv	s1,a5
     f74:	b761                	j	efc <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     f76:	96a2                	add	a3,a3,s0
     f78:	b755                	j	f1c <mini_itoa.part.0+0x48>
		char j = buffer[i];
     f7a:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     f7e:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     f82:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     f86:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     f88:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     f8c:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     f90:	bfc9                	j	f62 <mini_itoa.part.0+0x8e>

00000f92 <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     f92:	400057b7          	lui	a5,0x40005
     f96:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     f9a:	40078793          	addi	a5,a5,1024
     f9e:	10077713          	andi	a4,a4,256
     fa2:	cf09                	beqz	a4,fbc <i2c_error+0x2a>
     fa4:	0147d703          	lhu	a4,20(a5)
     fa8:	4505                	li	a0,1
     faa:	0742                	slli	a4,a4,0x10
     fac:	8341                	srli	a4,a4,0x10
     fae:	eff77713          	andi	a4,a4,-257
     fb2:	0742                	slli	a4,a4,0x10
     fb4:	8341                	srli	a4,a4,0x10
     fb6:	00e79a23          	sh	a4,20(a5)
     fba:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     fbc:	0147d703          	lhu	a4,20(a5)
     fc0:	40077713          	andi	a4,a4,1024
     fc4:	cf09                	beqz	a4,fde <i2c_error+0x4c>
     fc6:	0147d703          	lhu	a4,20(a5)
     fca:	4509                	li	a0,2
     fcc:	0742                	slli	a4,a4,0x10
     fce:	8341                	srli	a4,a4,0x10
     fd0:	bff77713          	andi	a4,a4,-1025
     fd4:	0742                	slli	a4,a4,0x10
     fd6:	8341                	srli	a4,a4,0x10
     fd8:	00e79a23          	sh	a4,20(a5)
     fdc:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     fde:	0147d703          	lhu	a4,20(a5)
     fe2:	20077713          	andi	a4,a4,512
     fe6:	cf09                	beqz	a4,1000 <i2c_error+0x6e>
     fe8:	0147d703          	lhu	a4,20(a5)
     fec:	450d                	li	a0,3
     fee:	0742                	slli	a4,a4,0x10
     ff0:	8341                	srli	a4,a4,0x10
     ff2:	dff77713          	andi	a4,a4,-513
     ff6:	0742                	slli	a4,a4,0x10
     ff8:	8341                	srli	a4,a4,0x10
     ffa:	00e79a23          	sh	a4,20(a5)
     ffe:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
    1000:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
    1004:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
    1006:	832d                	srli	a4,a4,0xb
    1008:	8b05                	andi	a4,a4,1
    100a:	cf01                	beqz	a4,1022 <i2c_error+0x90>
    100c:	0147d703          	lhu	a4,20(a5)
    1010:	76fd                	lui	a3,0xfffff
    1012:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
    1016:	0742                	slli	a4,a4,0x10
    1018:	8341                	srli	a4,a4,0x10
    101a:	8f75                	and	a4,a4,a3
    101c:	00e79a23          	sh	a4,20(a5)
    1020:	4511                	li	a0,4
}
    1022:	8082                	ret

00001024 <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
    1024:	415c                	lw	a5,4(a0)
    1026:	e7b1                	bnez	a5,1072 <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
    1028:	00855783          	lhu	a5,8(a0)
    102c:	40005737          	lui	a4,0x40005
    1030:	0786                	slli	a5,a5,0x1
    1032:	0fe7f793          	andi	a5,a5,254
    1036:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
    103a:	6789                	lui	a5,0x2
    103c:	71078793          	addi	a5,a5,1808 # 2710 <main+0x90a>
	return (status & status_mask) == status_mask; 
    1040:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
    1044:	c2f1aa23          	sw	a5,-972(gp) # 20000030 <_i2c_timeout>
    1048:	4501                	li	a0,0
    104a:	c3418693          	addi	a3,gp,-972 # 20000030 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    104e:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
    1052:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.bdeb3654+0x68945>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1056:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
    105a:	01071593          	slli	a1,a4,0x10
    105e:	41835703          	lhu	a4,1048(t1)
    1062:	81c1                	srli	a1,a1,0x10
    1064:	0742                	slli	a4,a4,0x10
    1066:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
    1068:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
    106a:	00c71663          	bne	a4,a2,1076 <i2c_send_addr_write+0x52>
    106e:	c111                	beqz	a0,1072 <i2c_send_addr_write+0x4e>
    1070:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
    1072:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
    1074:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
    1076:	17fd                	addi	a5,a5,-1
    1078:	4505                	li	a0,1
    107a:	fff1                	bnez	a5,1056 <i2c_send_addr_write+0x32>
{
    107c:	1151                	addi	sp,sp,-12
    107e:	c406                	sw	ra,8(sp)
    1080:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
    1084:	3739                	jal	f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    1086:	e111                	bnez	a0,108a <i2c_send_addr_write+0x66>
    1088:	4515                	li	a0,5
}
    108a:	40a2                	lw	ra,8(sp)
    108c:	0131                	addi	sp,sp,12
    108e:	8082                	ret

00001090 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
    1090:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1092:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
    1094:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1096:	71078793          	addi	a5,a5,1808 # 2710 <main+0x90a>
    109a:	c2f1aa23          	sw	a5,-972(gp) # 20000030 <_i2c_timeout>
{
    109e:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
    10a0:	c002                	sw	zero,0(sp)
    10a2:	c202                	sw	zero,4(sp)
    10a4:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    10a8:	4601                	li	a2,0
    10aa:	c3418713          	addi	a4,gp,-972 # 20000030 <_i2c_timeout>
    10ae:	400055b7          	lui	a1,0x40005
    10b2:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
    10b6:	8a89                	andi	a3,a3,2
    10b8:	e689                	bnez	a3,10c2 <i2c_ping+0x32>
    10ba:	c211                	beqz	a2,10be <i2c_ping+0x2e>
    10bc:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
    10be:	4501                	li	a0,0
    10c0:	a809                	j	10d2 <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    10c2:	17fd                	addi	a5,a5,-1
    10c4:	4605                	li	a2,1
    10c6:	f7f5                	bnez	a5,10b2 <i2c_ping+0x22>
    10c8:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
    10cc:	35d9                	jal	f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    10ce:	e111                	bnez	a0,10d2 <i2c_ping+0x42>
    10d0:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
    10d2:	40005737          	lui	a4,0x40005
    10d6:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    10da:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    10de:	07c2                	slli	a5,a5,0x10
    10e0:	83c1                	srli	a5,a5,0x10
    10e2:	1007e793          	ori	a5,a5,256
    10e6:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
    10ea:	00030737          	lui	a4,0x30
    10ee:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    10f0:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    10f4:	01079693          	slli	a3,a5,0x10
    10f8:	4185d783          	lhu	a5,1048(a1)
    10fc:	82c1                	srli	a3,a3,0x10
    10fe:	07c2                	slli	a5,a5,0x10
    1100:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
    1102:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    1104:	fee796e3          	bne	a5,a4,10f0 <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
    1108:	e119                	bnez	a0,110e <i2c_ping+0x7e>
    110a:	850a                	mv	a0,sp
    110c:	3f21                	jal	1024 <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    110e:	40005737          	lui	a4,0x40005
    1112:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
    1116:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    1118:	07c2                	slli	a5,a5,0x10
    111a:	83c1                	srli	a5,a5,0x10
    111c:	2007e793          	ori	a5,a5,512
    1120:	40f71023          	sh	a5,1024(a4)
}
    1124:	0161                	addi	sp,sp,24
    1126:	8082                	ret

00001128 <i2c_write_raw>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1128:	6789                	lui	a5,0x2
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
                                                    const size_t len)
{
    112a:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    112c:	71078793          	addi	a5,a5,1808 # 2710 <main+0x90a>
{
    1130:	c626                	sw	s1,12(sp)
    1132:	c02e                	sw	a1,0(sp)
    1134:	c232                	sw	a2,4(sp)
    1136:	ca06                	sw	ra,20(sp)
    1138:	c822                	sw	s0,16(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    113a:	c2f1aa23          	sw	a5,-972(gp) # 20000030 <_i2c_timeout>
    113e:	4601                	li	a2,0
    1140:	c3418493          	addi	s1,gp,-972 # 20000030 <_i2c_timeout>
    1144:	400055b7          	lui	a1,0x40005
    1148:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
    114c:	8a89                	andi	a3,a3,2
    114e:	e6ad                	bnez	a3,11b8 <i2c_write_raw+0x90>
    1150:	c211                	beqz	a2,1154 <i2c_write_raw+0x2c>
    1152:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1154:	400056b7          	lui	a3,0x40005
    1158:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    115c:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1160:	07c2                	slli	a5,a5,0x10
    1162:	83c1                	srli	a5,a5,0x10
    1164:	1007e793          	ori	a5,a5,256
    1168:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
    116c:	000306b7          	lui	a3,0x30
    1170:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1172:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    1176:	01079613          	slli	a2,a5,0x10
    117a:	4185d783          	lhu	a5,1048(a1)
    117e:	8241                	srli	a2,a2,0x10
    1180:	07c2                	slli	a5,a5,0x10
    1182:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
    1184:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    1186:	fed796e3          	bne	a5,a3,1172 <i2c_write_raw+0x4a>
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
    118a:	3d69                	jal	1024 <i2c_send_addr_write>
    118c:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
    118e:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
    1190:	e91d                	bnez	a0,11c6 <i2c_write_raw+0x9e>
		while(cbyte < len)
    1192:	4792                	lw	a5,4(sp)
    1194:	02f67963          	bgeu	a2,a5,11c6 <i2c_write_raw+0x9e>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    1198:	6689                	lui	a3,0x2
    119a:	71068693          	addi	a3,a3,1808 # 2710 <main+0x90a>
    119e:	c094                	sw	a3,0(s1)
    11a0:	4501                	li	a0,0
    11a2:	40005337          	lui	t1,0x40005
    11a6:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
    11aa:	0805f593          	andi	a1,a1,128
    11ae:	c5b9                	beqz	a1,11fc <i2c_write_raw+0xd4>
    11b0:	c111                	beqz	a0,11b4 <i2c_write_raw+0x8c>
    11b2:	c094                	sw	a3,0(s1)
    11b4:	4501                	li	a0,0
    11b6:	a8a9                	j	1210 <i2c_write_raw+0xe8>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    11b8:	17fd                	addi	a5,a5,-1
    11ba:	4605                	li	a2,1
    11bc:	f7d1                	bnez	a5,1148 <i2c_write_raw+0x20>
	i2c_err_t i2c_err = i2c_error();
    11be:	3bd1                	jal	f92 <i2c_error>
    11c0:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    11c2:	e111                	bnez	a0,11c6 <i2c_write_raw+0x9e>
    11c4:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    11c6:	6689                	lui	a3,0x2
    11c8:	71068693          	addi	a3,a3,1808 # 2710 <main+0x90a>
	return (status & status_mask) == status_mask; 
    11cc:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    11d0:	c094                	sw	a3,0(s1)
    11d2:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    11d4:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
    11d8:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.bdeb3654+0x68947>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    11dc:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
    11e0:	01061513          	slli	a0,a2,0x10
    11e4:	4182d603          	lhu	a2,1048(t0)
    11e8:	8141                	srli	a0,a0,0x10
    11ea:	0642                	slli	a2,a2,0x10
    11ec:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
    11ee:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    11f0:	04b61363          	bne	a2,a1,1236 <i2c_write_raw+0x10e>
    11f4:	04030a63          	beqz	t1,1248 <i2c_write_raw+0x120>
    11f8:	c094                	sw	a3,0(s1)
    11fa:	a0b9                	j	1248 <i2c_write_raw+0x120>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    11fc:	16fd                	addi	a3,a3,-1
    11fe:	4505                	li	a0,1
    1200:	f2dd                	bnez	a3,11a6 <i2c_write_raw+0x7e>
    1202:	c432                	sw	a2,8(sp)
    1204:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
    1208:	3369                	jal	f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    120a:	4622                	lw	a2,8(sp)
    120c:	e111                	bnez	a0,1210 <i2c_write_raw+0xe8>
    120e:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
    1210:	4782                	lw	a5,0(sp)
    1212:	00c786b3          	add	a3,a5,a2
    1216:	0006c583          	lbu	a1,0(a3)
			++cbyte;
    121a:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
    121c:	400056b7          	lui	a3,0x40005
    1220:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
    1224:	0ff67613          	andi	a2,a2,255
    1228:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    122a:	e501                	bnez	a0,1232 <i2c_write_raw+0x10a>
    122c:	339d                	jal	f92 <i2c_error>
    122e:	4622                	lw	a2,8(sp)
    1230:	d12d                	beqz	a0,1192 <i2c_write_raw+0x6a>
    1232:	842a                	mv	s0,a0
    1234:	bf49                	j	11c6 <i2c_write_raw+0x9e>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    1236:	16fd                	addi	a3,a3,-1
    1238:	4305                	li	t1,1
    123a:	f2cd                	bnez	a3,11dc <i2c_write_raw+0xb4>
    123c:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
    1240:	3b89                	jal	f92 <i2c_error>
    1242:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    1244:	e111                	bnez	a0,1248 <i2c_write_raw+0x120>
    1246:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    1248:	400056b7          	lui	a3,0x40005
    124c:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
    1250:	40d2                	lw	ra,20(sp)
    1252:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    1254:	0742                	slli	a4,a4,0x10
}
    1256:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    1258:	8341                	srli	a4,a4,0x10
    125a:	20076713          	ori	a4,a4,512
    125e:	40e69023          	sh	a4,1024(a3)
}
    1262:	44b2                	lw	s1,12(sp)
    1264:	0161                	addi	sp,sp,24
    1266:	8082                	ret

00001268 <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
    1268:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
    126a:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
    126e:	858a                	mv	a1,sp
    1270:	4609                	li	a2,2
    1272:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
uint8_t ssd1306_cmd(uint8_t cmd) {
    1276:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
    1278:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
    127c:	3575                	jal	1128 <i2c_write_raw>
}
    127e:	40b2                	lw	ra,12(sp)
    1280:	0ff57513          	andi	a0,a0,255
    1284:	0141                	addi	sp,sp,16
    1286:	8082                	ret

00001288 <i2c_write_reg.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1288:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_reg(const i2c_device_t *dev,    const uint32_t reg,
    128a:	1101                	addi	sp,sp,-32
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    128c:	71078793          	addi	a5,a5,1808 # 2710 <main+0x90a>
i2c_err_t i2c_write_reg(const i2c_device_t *dev,    const uint32_t reg,
    1290:	ca26                	sw	s1,20(sp)
    1292:	c22e                	sw	a1,4(sp)
    1294:	c432                	sw	a2,8(sp)
    1296:	ce06                	sw	ra,28(sp)
    1298:	cc22                	sw	s0,24(sp)
    129a:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    129c:	c2f1aa23          	sw	a5,-972(gp) # 20000030 <_i2c_timeout>
    12a0:	4601                	li	a2,0
    12a2:	c3418493          	addi	s1,gp,-972 # 20000030 <_i2c_timeout>
    12a6:	400055b7          	lui	a1,0x40005
    12aa:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
    12ae:	8a89                	andi	a3,a3,2
    12b0:	e2d1                	bnez	a3,1334 <i2c_write_reg.constprop.0+0xac>
    12b2:	c211                	beqz	a2,12b6 <i2c_write_reg.constprop.0+0x2e>
    12b4:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    12b6:	400056b7          	lui	a3,0x40005
    12ba:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    12be:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    12c2:	07c2                	slli	a5,a5,0x10
    12c4:	83c1                	srli	a5,a5,0x10
    12c6:	1007e793          	ori	a5,a5,256
    12ca:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
    12ce:	000306b7          	lui	a3,0x30
    12d2:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    12d4:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    12d8:	01079613          	slli	a2,a5,0x10
    12dc:	4185d783          	lhu	a5,1048(a1)
    12e0:	8241                	srli	a2,a2,0x10
    12e2:	07c2                	slli	a5,a5,0x10
    12e4:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
    12e6:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    12e8:	fed796e3          	bne	a5,a3,12d4 <i2c_write_reg.constprop.0+0x4c>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
    12ec:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    12f0:	3b15                	jal	1024 <i2c_send_addr_write>
    12f2:	842a                	mv	s0,a0

	// Send the register byte/s - MSBFirst
	if(i2c_ret == I2C_OK)
    12f4:	e929                	bnez	a0,1346 <i2c_write_reg.constprop.0+0xbe>
	{
		for(int8_t b = dev->regb - 1; b >= 0; b--)
    12f6:	c0418693          	addi	a3,gp,-1020 # 20000000 <dev_sensor>
    12fa:	00a6c683          	lbu	a3,10(a3) # 3000a <lib_i2c.c.bdeb3654+0x288cd>
    12fe:	16fd                	addi	a3,a3,-1
    1300:	06e2                	slli	a3,a3,0x18
    1302:	86e1                	srai	a3,a3,0x18
    1304:	00369593          	slli	a1,a3,0x3
    1308:	0606da63          	bgez	a3,137c <i2c_write_reg.constprop.0+0xf4>
	}

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
    130c:	4601                	li	a2,0
		while(cbyte < len)
    130e:	47a2                	lw	a5,8(sp)
    1310:	02f67b63          	bgeu	a2,a5,1346 <i2c_write_reg.constprop.0+0xbe>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    1314:	6689                	lui	a3,0x2
    1316:	71068693          	addi	a3,a3,1808 # 2710 <main+0x90a>
    131a:	c094                	sw	a3,0(s1)
    131c:	4501                	li	a0,0
    131e:	40005337          	lui	t1,0x40005
    1322:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
    1326:	0805f593          	andi	a1,a1,128
    132a:	c1c5                	beqz	a1,13ca <i2c_write_reg.constprop.0+0x142>
    132c:	c111                	beqz	a0,1330 <i2c_write_reg.constprop.0+0xa8>
    132e:	c094                	sw	a3,0(s1)
    1330:	4501                	li	a0,0
    1332:	a075                	j	13de <i2c_write_reg.constprop.0+0x156>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    1334:	17fd                	addi	a5,a5,-1
    1336:	4605                	li	a2,1
    1338:	fbad                	bnez	a5,12aa <i2c_write_reg.constprop.0+0x22>
    133a:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
    133e:	3991                	jal	f92 <i2c_error>
    1340:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    1342:	e111                	bnez	a0,1346 <i2c_write_reg.constprop.0+0xbe>
    1344:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    1346:	6689                	lui	a3,0x2
    1348:	71068693          	addi	a3,a3,1808 # 2710 <main+0x90a>
	return (status & status_mask) == status_mask; 
    134c:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    1350:	c094                	sw	a3,0(s1)
    1352:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1354:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
    1358:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.bdeb3654+0x68947>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    135c:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
    1360:	01061513          	slli	a0,a2,0x10
    1364:	4182d603          	lhu	a2,1048(t0)
    1368:	8141                	srli	a0,a0,0x10
    136a:	0642                	slli	a2,a2,0x10
    136c:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
    136e:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    1370:	08b61b63          	bne	a2,a1,1406 <i2c_write_reg.constprop.0+0x17e>
    1374:	0a030263          	beqz	t1,1418 <i2c_write_reg.constprop.0+0x190>
    1378:	c094                	sw	a3,0(s1)
    137a:	a879                	j	1418 <i2c_write_reg.constprop.0+0x190>
			uint8_t reg_byte = (reg >> (8 * b)) & 0xFF;
    137c:	4782                	lw	a5,0(sp)
			I2C1->DATAR = reg_byte;
    137e:	40005637          	lui	a2,0x40005
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    1382:	4301                	li	t1,0
			uint8_t reg_byte = (reg >> (8 * b)) & 0xFF;
    1384:	00b7d533          	srl	a0,a5,a1
			I2C1->DATAR = reg_byte;
    1388:	0ff57513          	andi	a0,a0,255
    138c:	40a61823          	sh	a0,1040(a2) # 40005410 <_eusrstack+0x20004c10>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    1390:	6609                	lui	a2,0x2
    1392:	71060613          	addi	a2,a2,1808 # 2710 <main+0x90a>
    1396:	c090                	sw	a2,0(s1)
    1398:	400052b7          	lui	t0,0x40005
    139c:	4142d503          	lhu	a0,1044(t0) # 40005414 <_eusrstack+0x20004c14>
    13a0:	08057513          	andi	a0,a0,128
    13a4:	cd19                	beqz	a0,13c2 <i2c_write_reg.constprop.0+0x13a>
    13a6:	00030363          	beqz	t1,13ac <i2c_write_reg.constprop.0+0x124>
    13aa:	c090                	sw	a2,0(s1)
    13ac:	c82e                	sw	a1,16(sp)
    13ae:	c636                	sw	a3,12(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    13b0:	36cd                	jal	f92 <i2c_error>
    13b2:	45c2                	lw	a1,16(sp)
    13b4:	46b2                	lw	a3,12(sp)
    13b6:	15e1                	addi	a1,a1,-8
    13b8:	e529                	bnez	a0,1402 <i2c_write_reg.constprop.0+0x17a>
    13ba:	16fd                	addi	a3,a3,-1
    13bc:	06e2                	slli	a3,a3,0x18
    13be:	86e1                	srai	a3,a3,0x18
    13c0:	b7a1                	j	1308 <i2c_write_reg.constprop.0+0x80>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    13c2:	167d                	addi	a2,a2,-1
    13c4:	4305                	li	t1,1
    13c6:	fa79                	bnez	a2,139c <i2c_write_reg.constprop.0+0x114>
    13c8:	bf8d                	j	133a <i2c_write_reg.constprop.0+0xb2>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    13ca:	16fd                	addi	a3,a3,-1
    13cc:	4505                	li	a0,1
    13ce:	fab1                	bnez	a3,1322 <i2c_write_reg.constprop.0+0x9a>
    13d0:	c032                	sw	a2,0(sp)
    13d2:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
    13d6:	3e75                	jal	f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    13d8:	4602                	lw	a2,0(sp)
    13da:	e111                	bnez	a0,13de <i2c_write_reg.constprop.0+0x156>
    13dc:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
    13de:	4792                	lw	a5,4(sp)
    13e0:	00c786b3          	add	a3,a5,a2
    13e4:	0006c583          	lbu	a1,0(a3)
			++cbyte;
    13e8:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
    13ea:	400056b7          	lui	a3,0x40005
    13ee:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
    13f2:	0ff67613          	andi	a2,a2,255
    13f6:	c032                	sw	a2,0(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    13f8:	e509                	bnez	a0,1402 <i2c_write_reg.constprop.0+0x17a>
    13fa:	3e61                	jal	f92 <i2c_error>
    13fc:	4602                	lw	a2,0(sp)
    13fe:	f00508e3          	beqz	a0,130e <i2c_write_reg.constprop.0+0x86>
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    1402:	842a                	mv	s0,a0
    1404:	b789                	j	1346 <i2c_write_reg.constprop.0+0xbe>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
    1406:	16fd                	addi	a3,a3,-1
    1408:	4305                	li	t1,1
    140a:	faa9                	bnez	a3,135c <i2c_write_reg.constprop.0+0xd4>
    140c:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
    1410:	3649                	jal	f92 <i2c_error>
    1412:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    1414:	e111                	bnez	a0,1418 <i2c_write_reg.constprop.0+0x190>
    1416:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    1418:	400056b7          	lui	a3,0x40005
    141c:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	// Signal a STOP
	i2c_stop();

	return i2c_ret;
    1420:	40f2                	lw	ra,28(sp)
    1422:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    1424:	0742                	slli	a4,a4,0x10
    1426:	4462                	lw	s0,24(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    1428:	8341                	srli	a4,a4,0x10
    142a:	20076713          	ori	a4,a4,512
    142e:	40e69023          	sh	a4,1024(a3)
    1432:	44d2                	lw	s1,20(sp)
    1434:	6105                	addi	sp,sp,32
    1436:	8082                	ret

00001438 <i2c_send_addr_read.constprop.0>:
	if(dev->type == I2C_ADDR_7BIT)
    1438:	c0418793          	addi	a5,gp,-1020 # 20000000 <dev_sensor>
    143c:	43d8                	lw	a4,4(a5)
    143e:	e739                	bnez	a4,148c <i2c_send_addr_read.constprop.0+0x54>
		I2C1->DATAR = (dev->addr << 1) | 0x01;
    1440:	0087d783          	lhu	a5,8(a5)
    1444:	40005737          	lui	a4,0x40005
    1448:	0786                	slli	a5,a5,0x1
    144a:	0017e793          	ori	a5,a5,1
    144e:	07c2                	slli	a5,a5,0x10
    1450:	83c1                	srli	a5,a5,0x10
    1452:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
    1456:	6789                	lui	a5,0x2
    1458:	71078793          	addi	a5,a5,1808 # 2710 <main+0x90a>
	return (status & status_mask) == status_mask; 
    145c:	00030637          	lui	a2,0x30
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
    1460:	c2f1aa23          	sw	a5,-972(gp) # 20000030 <_i2c_timeout>
    1464:	4501                	li	a0,0
    1466:	c3418693          	addi	a3,gp,-972 # 20000030 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    146a:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
    146e:	0609                	addi	a2,a2,2
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1470:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
    1474:	01071593          	slli	a1,a4,0x10
    1478:	41835703          	lhu	a4,1048(t1)
    147c:	81c1                	srli	a1,a1,0x10
    147e:	0742                	slli	a4,a4,0x10
    1480:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
    1482:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
    1484:	00c71663          	bne	a4,a2,1490 <i2c_send_addr_read.constprop.0+0x58>
    1488:	c111                	beqz	a0,148c <i2c_send_addr_read.constprop.0+0x54>
    148a:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
    148c:	4501                	li	a0,0
}
    148e:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED), i2c_ret);
    1490:	17fd                	addi	a5,a5,-1
    1492:	4505                	li	a0,1
    1494:	fff1                	bnez	a5,1470 <i2c_send_addr_read.constprop.0+0x38>
static inline i2c_err_t i2c_send_addr_read(const i2c_device_t *dev)
    1496:	1151                	addi	sp,sp,-12
    1498:	c406                	sw	ra,8(sp)
    149a:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
    149e:	3cd5                	jal	f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    14a0:	e111                	bnez	a0,14a4 <i2c_send_addr_read.constprop.0+0x6c>
    14a2:	4515                	li	a0,5
}
    14a4:	40a2                	lw	ra,8(sp)
    14a6:	0131                	addi	sp,sp,12
    14a8:	8082                	ret

000014aa <i2c_read_reg.constprop.0>:
i2c_err_t i2c_read_reg(const i2c_device_t *dev,     const uint32_t reg,
    14aa:	1111                	addi	sp,sp,-28
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    14ac:	6789                	lui	a5,0x2
i2c_err_t i2c_read_reg(const i2c_device_t *dev,     const uint32_t reg,
    14ae:	ca22                	sw	s0,20(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    14b0:	71078793          	addi	a5,a5,1808 # 2710 <main+0x90a>
i2c_err_t i2c_read_reg(const i2c_device_t *dev,     const uint32_t reg,
    14b4:	c826                	sw	s1,16(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    14b6:	c2f1aa23          	sw	a5,-972(gp) # 20000030 <_i2c_timeout>
i2c_err_t i2c_read_reg(const i2c_device_t *dev,     const uint32_t reg,
    14ba:	84b2                	mv	s1,a2
    14bc:	cc06                	sw	ra,24(sp)
    14be:	c02a                	sw	a0,0(sp)
    14c0:	c22e                	sw	a1,4(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    14c2:	4681                	li	a3,0
    14c4:	c3418413          	addi	s0,gp,-972 # 20000030 <_i2c_timeout>
    14c8:	40005637          	lui	a2,0x40005
    14cc:	41865703          	lhu	a4,1048(a2) # 40005418 <_eusrstack+0x20004c18>
    14d0:	8b09                	andi	a4,a4,2
    14d2:	0e071f63          	bnez	a4,15d0 <i2c_read_reg.constprop.0+0x126>
    14d6:	c291                	beqz	a3,14da <i2c_read_reg.constprop.0+0x30>
    14d8:	c01c                	sw	a5,0(s0)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    14da:	40005737          	lui	a4,0x40005
    14de:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    14e2:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    14e6:	07c2                	slli	a5,a5,0x10
    14e8:	83c1                	srli	a5,a5,0x10
    14ea:	1007e793          	ori	a5,a5,256
    14ee:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
    14f2:	00030737          	lui	a4,0x30
    14f6:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    14f8:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    14fc:	01079693          	slli	a3,a5,0x10
    1500:	4185d783          	lhu	a5,1048(a1)
    1504:	82c1                	srli	a3,a3,0x10
    1506:	07c2                	slli	a5,a5,0x10
    1508:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
    150a:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    150c:	fee796e3          	bne	a5,a4,14f8 <i2c_read_reg.constprop.0+0x4e>
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
    1510:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    1514:	3e01                	jal	1024 <i2c_send_addr_write>
    1516:	87aa                	mv	a5,a0
	if(i2c_ret == I2C_OK)
    1518:	e571                	bnez	a0,15e4 <i2c_read_reg.constprop.0+0x13a>
		for(int8_t b = dev->regb - 1; b >= 0; b--)
    151a:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_sensor>
    151e:	00a74703          	lbu	a4,10(a4) # 3000a <lib_i2c.c.bdeb3654+0x288cd>
    1522:	177d                	addi	a4,a4,-1
    1524:	0762                	slli	a4,a4,0x18
    1526:	8761                	srai	a4,a4,0x18
    1528:	00371693          	slli	a3,a4,0x3
    152c:	0c075c63          	bgez	a4,1604 <i2c_read_reg.constprop.0+0x15a>
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
    1530:	4785                	li	a5,1
    1532:	00f48c63          	beq	s1,a5,154a <i2c_read_reg.constprop.0+0xa0>
    1536:	40005737          	lui	a4,0x40005
    153a:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    153e:	07c2                	slli	a5,a5,0x10
    1540:	83c1                	srli	a5,a5,0x10
    1542:	4007e793          	ori	a5,a5,1024
    1546:	40f71023          	sh	a5,1024(a4)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    154a:	40005737          	lui	a4,0x40005
    154e:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1552:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1556:	07c2                	slli	a5,a5,0x10
    1558:	83c1                	srli	a5,a5,0x10
    155a:	1007e793          	ori	a5,a5,256
    155e:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
    1562:	00030737          	lui	a4,0x30
    1566:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1568:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    156c:	01079693          	slli	a3,a5,0x10
    1570:	4185d783          	lhu	a5,1048(a1)
    1574:	82c1                	srli	a3,a3,0x10
    1576:	07c2                	slli	a5,a5,0x10
    1578:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
    157a:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    157c:	fee796e3          	bne	a5,a4,1568 <i2c_read_reg.constprop.0+0xbe>
		i2c_ret = i2c_send_addr_read(dev);
    1580:	3d65                	jal	1438 <i2c_send_addr_read.constprop.0>
			if(cbyte == len - 1) I2C1->CTLR1 &= ~I2C_CTLR1_ACK;
    1582:	fff48713          	addi	a4,s1,-1
    1586:	c03a                	sw	a4,0(sp)
		i2c_ret = i2c_send_addr_read(dev);
    1588:	87aa                	mv	a5,a0
		uint8_t cbyte = 0;
    158a:	4681                	li	a3,0
	if(i2c_ret == I2C_OK)
    158c:	ed21                	bnez	a0,15e4 <i2c_read_reg.constprop.0+0x13a>
		while(cbyte < len)
    158e:	0496fb63          	bgeu	a3,s1,15e4 <i2c_read_reg.constprop.0+0x13a>
			if(cbyte == len - 1) I2C1->CTLR1 &= ~I2C_CTLR1_ACK;
    1592:	4702                	lw	a4,0(sp)
    1594:	00d71e63          	bne	a4,a3,15b0 <i2c_read_reg.constprop.0+0x106>
    1598:	40005637          	lui	a2,0x40005
    159c:	40065703          	lhu	a4,1024(a2) # 40005400 <_eusrstack+0x20004c00>
    15a0:	0742                	slli	a4,a4,0x10
    15a2:	8341                	srli	a4,a4,0x10
    15a4:	bff77713          	andi	a4,a4,-1025
    15a8:	0742                	slli	a4,a4,0x10
    15aa:	8341                	srli	a4,a4,0x10
    15ac:	40e61023          	sh	a4,1024(a2)
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
    15b0:	6709                	lui	a4,0x2
    15b2:	71070713          	addi	a4,a4,1808 # 2710 <main+0x90a>
    15b6:	c018                	sw	a4,0(s0)
    15b8:	4581                	li	a1,0
    15ba:	40005537          	lui	a0,0x40005
    15be:	41455603          	lhu	a2,1044(a0) # 40005414 <_eusrstack+0x20004c14>
    15c2:	04067613          	andi	a2,a2,64
    15c6:	c659                	beqz	a2,1654 <i2c_read_reg.constprop.0+0x1aa>
    15c8:	c191                	beqz	a1,15cc <i2c_read_reg.constprop.0+0x122>
    15ca:	c018                	sw	a4,0(s0)
    15cc:	4501                	li	a0,0
    15ce:	a045                	j	166e <i2c_read_reg.constprop.0+0x1c4>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    15d0:	17fd                	addi	a5,a5,-1
    15d2:	4685                	li	a3,1
    15d4:	ee079ce3          	bnez	a5,14cc <i2c_read_reg.constprop.0+0x22>
    15d8:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    15dc:	3a5d                	jal	f92 <i2c_error>
    15de:	87aa                	mv	a5,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    15e0:	e111                	bnez	a0,15e4 <i2c_read_reg.constprop.0+0x13a>
    15e2:	4795                	li	a5,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    15e4:	400056b7          	lui	a3,0x40005
    15e8:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>
}
    15ec:	40e2                	lw	ra,24(sp)
    15ee:	4452                	lw	s0,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    15f0:	0742                	slli	a4,a4,0x10
    15f2:	8341                	srli	a4,a4,0x10
    15f4:	20076713          	ori	a4,a4,512
    15f8:	40e69023          	sh	a4,1024(a3)
}
    15fc:	44c2                	lw	s1,16(sp)
    15fe:	853e                	mv	a0,a5
    1600:	0171                	addi	sp,sp,28
    1602:	8082                	ret
			uint8_t reg_byte = (reg >> (8 * b)) & 0xFF;
    1604:	4782                	lw	a5,0(sp)
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    1606:	4581                	li	a1,0
    1608:	40005537          	lui	a0,0x40005
			uint8_t reg_byte = (reg >> (8 * b)) & 0xFF;
    160c:	00d7d633          	srl	a2,a5,a3
			I2C1->DATAR = reg_byte;
    1610:	0ff67613          	andi	a2,a2,255
    1614:	400057b7          	lui	a5,0x40005
    1618:	40c79823          	sh	a2,1040(a5) # 40005410 <_eusrstack+0x20004c10>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    161c:	6789                	lui	a5,0x2
    161e:	71078793          	addi	a5,a5,1808 # 2710 <main+0x90a>
    1622:	c01c                	sw	a5,0(s0)
    1624:	41455603          	lhu	a2,1044(a0) # 40005414 <_eusrstack+0x20004c14>
    1628:	08067613          	andi	a2,a2,128
    162c:	c205                	beqz	a2,164c <i2c_read_reg.constprop.0+0x1a2>
    162e:	c191                	beqz	a1,1632 <i2c_read_reg.constprop.0+0x188>
    1630:	c01c                	sw	a5,0(s0)
    1632:	c636                	sw	a3,12(sp)
    1634:	c43a                	sw	a4,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    1636:	95dff0ef          	jal	ra,f92 <i2c_error>
    163a:	46b2                	lw	a3,12(sp)
    163c:	4722                	lw	a4,8(sp)
    163e:	87aa                	mv	a5,a0
    1640:	16e1                	addi	a3,a3,-8
    1642:	f14d                	bnez	a0,15e4 <i2c_read_reg.constprop.0+0x13a>
    1644:	177d                	addi	a4,a4,-1
    1646:	0762                	slli	a4,a4,0x18
    1648:	8761                	srai	a4,a4,0x18
    164a:	b5cd                	j	152c <i2c_read_reg.constprop.0+0x82>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
    164c:	17fd                	addi	a5,a5,-1
    164e:	4585                	li	a1,1
    1650:	fbf1                	bnez	a5,1624 <i2c_read_reg.constprop.0+0x17a>
    1652:	b759                	j	15d8 <i2c_read_reg.constprop.0+0x12e>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
    1654:	177d                	addi	a4,a4,-1
    1656:	4585                	li	a1,1
    1658:	f33d                	bnez	a4,15be <i2c_read_reg.constprop.0+0x114>
    165a:	c63e                	sw	a5,12(sp)
    165c:	c436                	sw	a3,8(sp)
    165e:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    1662:	931ff0ef          	jal	ra,f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    1666:	46a2                	lw	a3,8(sp)
    1668:	47b2                	lw	a5,12(sp)
    166a:	e111                	bnez	a0,166e <i2c_read_reg.constprop.0+0x1c4>
    166c:	4515                	li	a0,5
    166e:	c63e                	sw	a5,12(sp)
			buf[cbyte] = I2C1->DATAR;
    1670:	4792                	lw	a5,4(sp)
    1672:	40005737          	lui	a4,0x40005
    1676:	41075603          	lhu	a2,1040(a4) # 40005410 <_eusrstack+0x20004c10>
    167a:	00d78733          	add	a4,a5,a3
			++cbyte;
    167e:	0685                	addi	a3,a3,1
    1680:	0ff6f693          	andi	a3,a3,255
			buf[cbyte] = I2C1->DATAR;
    1684:	00c70023          	sb	a2,0(a4)
			++cbyte;
    1688:	c436                	sw	a3,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    168a:	e519                	bnez	a0,1698 <i2c_read_reg.constprop.0+0x1ee>
    168c:	907ff0ef          	jal	ra,f92 <i2c_error>
    1690:	46a2                	lw	a3,8(sp)
    1692:	47b2                	lw	a5,12(sp)
    1694:	ee050de3          	beqz	a0,158e <i2c_read_reg.constprop.0+0xe4>
    1698:	87aa                	mv	a5,a0
    169a:	b7a9                	j	15e4 <i2c_read_reg.constprop.0+0x13a>

0000169c <i2c_read_raw.constprop.0>:
i2c_err_t i2c_read_raw(const i2c_device_t *dev,     uint8_t *buf,
    169c:	1131                	addi	sp,sp,-20
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    169e:	6789                	lui	a5,0x2
i2c_err_t i2c_read_raw(const i2c_device_t *dev,     uint8_t *buf,
    16a0:	c622                	sw	s0,12(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    16a2:	71078793          	addi	a5,a5,1808 # 2710 <main+0x90a>
i2c_err_t i2c_read_raw(const i2c_device_t *dev,     uint8_t *buf,
    16a6:	c426                	sw	s1,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    16a8:	c2f1aa23          	sw	a5,-972(gp) # 20000030 <_i2c_timeout>
i2c_err_t i2c_read_raw(const i2c_device_t *dev,     uint8_t *buf,
    16ac:	c806                	sw	ra,16(sp)
    16ae:	84aa                	mv	s1,a0
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    16b0:	4681                	li	a3,0
    16b2:	c3418413          	addi	s0,gp,-972 # 20000030 <_i2c_timeout>
    16b6:	40005637          	lui	a2,0x40005
    16ba:	41865703          	lhu	a4,1048(a2) # 40005418 <_eusrstack+0x20004c18>
    16be:	8b09                	andi	a4,a4,2
    16c0:	e765                	bnez	a4,17a8 <i2c_read_raw.constprop.0+0x10c>
    16c2:	c291                	beqz	a3,16c6 <i2c_read_raw.constprop.0+0x2a>
    16c4:	c01c                	sw	a5,0(s0)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    16c6:	40005737          	lui	a4,0x40005
    16ca:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
    16ce:	000306b7          	lui	a3,0x30
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    16d2:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    16d6:	07c2                	slli	a5,a5,0x10
    16d8:	83c1                	srli	a5,a5,0x10
    16da:	1007e793          	ori	a5,a5,256
    16de:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
    16e2:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    16e4:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    16e8:	01079613          	slli	a2,a5,0x10
    16ec:	4185d783          	lhu	a5,1048(a1)
    16f0:	8241                	srli	a2,a2,0x10
    16f2:	07c2                	slli	a5,a5,0x10
    16f4:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
    16f6:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    16f8:	fed796e3          	bne	a5,a3,16e4 <i2c_read_raw.constprop.0+0x48>
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
    16fc:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    1700:	925ff0ef          	jal	ra,1024 <i2c_send_addr_write>
    1704:	87aa                	mv	a5,a0
	if(i2c_ret == I2C_OK)
    1706:	e95d                	bnez	a0,17bc <i2c_read_raw.constprop.0+0x120>
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
    1708:	4785                	li	a5,1
    170a:	00f48e63          	beq	s1,a5,1726 <i2c_read_raw.constprop.0+0x8a>
    170e:	400057b7          	lui	a5,0x40005
    1712:	40078713          	addi	a4,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    1716:	4007d783          	lhu	a5,1024(a5)
    171a:	07c2                	slli	a5,a5,0x10
    171c:	83c1                	srli	a5,a5,0x10
    171e:	4007e793          	ori	a5,a5,1024
    1722:	00f71023          	sh	a5,0(a4)
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1726:	40005737          	lui	a4,0x40005
    172a:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    172e:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
    1732:	07c2                	slli	a5,a5,0x10
    1734:	83c1                	srli	a5,a5,0x10
    1736:	1007e793          	ori	a5,a5,256
    173a:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
    173e:	00030737          	lui	a4,0x30
    1742:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
    1744:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
    1748:	01079693          	slli	a3,a5,0x10
    174c:	4185d783          	lhu	a5,1048(a1)
    1750:	82c1                	srli	a3,a3,0x10
    1752:	07c2                	slli	a5,a5,0x10
    1754:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
    1756:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
    1758:	fee796e3          	bne	a5,a4,1744 <i2c_read_raw.constprop.0+0xa8>
		i2c_ret = i2c_send_addr_read(dev);
    175c:	39f1                	jal	1438 <i2c_send_addr_read.constprop.0>
    175e:	87aa                	mv	a5,a0
		uint8_t cbyte = 0;
    1760:	4681                	li	a3,0
	if(i2c_ret == I2C_OK)
    1762:	ed29                	bnez	a0,17bc <i2c_read_raw.constprop.0+0x120>
		while(cbyte < len)
    1764:	0496fc63          	bgeu	a3,s1,17bc <i2c_read_raw.constprop.0+0x120>
			if(cbyte == len - 1) I2C1->CTLR1 &= ~I2C_CTLR1_ACK;
    1768:	fff48713          	addi	a4,s1,-1
    176c:	00d71e63          	bne	a4,a3,1788 <i2c_read_raw.constprop.0+0xec>
    1770:	40005637          	lui	a2,0x40005
    1774:	40065703          	lhu	a4,1024(a2) # 40005400 <_eusrstack+0x20004c00>
    1778:	0742                	slli	a4,a4,0x10
    177a:	8341                	srli	a4,a4,0x10
    177c:	bff77713          	andi	a4,a4,-1025
    1780:	0742                	slli	a4,a4,0x10
    1782:	8341                	srli	a4,a4,0x10
    1784:	40e61023          	sh	a4,1024(a2)
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
    1788:	6709                	lui	a4,0x2
    178a:	71070713          	addi	a4,a4,1808 # 2710 <main+0x90a>
    178e:	c018                	sw	a4,0(s0)
    1790:	4581                	li	a1,0
    1792:	40005537          	lui	a0,0x40005
    1796:	41455603          	lhu	a2,1044(a0) # 40005414 <_eusrstack+0x20004c14>
    179a:	04067613          	andi	a2,a2,64
    179e:	ce1d                	beqz	a2,17dc <i2c_read_raw.constprop.0+0x140>
    17a0:	c191                	beqz	a1,17a4 <i2c_read_raw.constprop.0+0x108>
    17a2:	c018                	sw	a4,0(s0)
    17a4:	4501                	li	a0,0
    17a6:	a881                	j	17f6 <i2c_read_raw.constprop.0+0x15a>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
    17a8:	17fd                	addi	a5,a5,-1
    17aa:	4685                	li	a3,1
    17ac:	f799                	bnez	a5,16ba <i2c_read_raw.constprop.0+0x1e>
    17ae:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    17b2:	fe0ff0ef          	jal	ra,f92 <i2c_error>
    17b6:	87aa                	mv	a5,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    17b8:	e111                	bnez	a0,17bc <i2c_read_raw.constprop.0+0x120>
    17ba:	4795                	li	a5,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    17bc:	400056b7          	lui	a3,0x40005
    17c0:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>
}
    17c4:	40c2                	lw	ra,16(sp)
    17c6:	4432                	lw	s0,12(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
    17c8:	0742                	slli	a4,a4,0x10
    17ca:	8341                	srli	a4,a4,0x10
    17cc:	20076713          	ori	a4,a4,512
    17d0:	40e69023          	sh	a4,1024(a3)
}
    17d4:	44a2                	lw	s1,8(sp)
    17d6:	853e                	mv	a0,a5
    17d8:	0151                	addi	sp,sp,20
    17da:	8082                	ret
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_RXNE), i2c_ret);
    17dc:	177d                	addi	a4,a4,-1
    17de:	4585                	li	a1,1
    17e0:	fb5d                	bnez	a4,1796 <i2c_read_raw.constprop.0+0xfa>
    17e2:	c23e                	sw	a5,4(sp)
    17e4:	c036                	sw	a3,0(sp)
    17e6:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
    17ea:	fa8ff0ef          	jal	ra,f92 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
    17ee:	4682                	lw	a3,0(sp)
    17f0:	4792                	lw	a5,4(sp)
    17f2:	e111                	bnez	a0,17f6 <i2c_read_raw.constprop.0+0x15a>
    17f4:	4515                	li	a0,5
			buf[cbyte] = I2C1->DATAR;
    17f6:	40005737          	lui	a4,0x40005
    17fa:	c23e                	sw	a5,4(sp)
    17fc:	41075603          	lhu	a2,1040(a4) # 40005410 <_eusrstack+0x20004c10>
    1800:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    1804:	9736                	add	a4,a4,a3
			++cbyte;
    1806:	0685                	addi	a3,a3,1
    1808:	0ff6f693          	andi	a3,a3,255
			buf[cbyte] = I2C1->DATAR;
    180c:	00c70023          	sb	a2,0(a4)
			++cbyte;
    1810:	c036                	sw	a3,0(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
    1812:	e511                	bnez	a0,181e <i2c_read_raw.constprop.0+0x182>
    1814:	f7eff0ef          	jal	ra,f92 <i2c_error>
    1818:	4682                	lw	a3,0(sp)
    181a:	4792                	lw	a5,4(sp)
    181c:	d521                	beqz	a0,1764 <i2c_read_raw.constprop.0+0xc8>
    181e:	87aa                	mv	a5,a0
    1820:	bf71                	j	17bc <i2c_read_raw.constprop.0+0x120>

00001822 <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
    1822:	e00007b7          	lui	a5,0xe0000
    1826:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
}
    182a:	8082                	ret

0000182c <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    182c:	e0000737          	lui	a4,0xe0000
    1830:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
    1834:	1111                	addi	sp,sp,-28
    1836:	cc06                	sw	ra,24(sp)
    1838:	ca22                	sw	s0,20(sp)
    183a:	c826                	sw	s1,16(sp)
    183c:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    183e:	0c07f793          	andi	a5,a5,192
    1842:	0c000693          	li	a3,192
    1846:	0cd78863          	beq	a5,a3,1916 <_write.constprop.0+0xea>
	char buffer[4] = { 0 };
    184a:	c602                	sw	zero,12(sp)
    184c:	842e                	mv	s0,a1
	if( size == 0 )
    184e:	e5f1                	bnez	a1,191a <_write.constprop.0+0xee>
		lastdmd = (*DMDATA0);
    1850:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
    1854:	c789                	beqz	a5,185e <_write.constprop.0+0x32>
    1856:	0807f793          	andi	a5,a5,128
    185a:	e391                	bnez	a5,185e <_write.constprop.0+0x32>
    185c:	37d9                	jal	1822 <internal_handle_input.constprop.0>
}
    185e:	40e2                	lw	ra,24(sp)
    1860:	8522                	mv	a0,s0
    1862:	4452                	lw	s0,20(sp)
    1864:	44c2                	lw	s1,16(sp)
    1866:	0171                	addi	sp,sp,28
    1868:	8082                	ret
		int tosend = size - place;
    186a:	409405b3          	sub	a1,s0,s1
    186e:	469d                	li	a3,7
    1870:	872e                	mv	a4,a1
    1872:	00b6d363          	bge	a3,a1,1878 <_write.constprop.0+0x4c>
    1876:	471d                	li	a4,7
    1878:	001006b7          	lui	a3,0x100
    187c:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
    187e:	e0000537          	lui	a0,0xe0000
    1882:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
    1886:	0f450313          	addi	t1,a0,244
    188a:	08067293          	andi	t0,a2,128
    188e:	06029c63          	bnez	t0,1906 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
    1892:	c611                	beqz	a2,189e <_write.constprop.0+0x72>
    1894:	c43a                	sw	a4,8(sp)
    1896:	c22e                	sw	a1,4(sp)
    1898:	3769                	jal	1822 <internal_handle_input.constprop.0>
    189a:	4722                	lw	a4,8(sp)
    189c:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
    189e:	4689                	li	a3,2
    18a0:	4601                	li	a2,0
    18a2:	00b6d463          	bge	a3,a1,18aa <_write.constprop.0+0x7e>
    18a6:	ffd70613          	addi	a2,a4,-3
    18aa:	4782                	lw	a5,0(sp)
    18ac:	00348593          	addi	a1,s1,3
    18b0:	0068                	addi	a0,sp,12
    18b2:	95be                	add	a1,a1,a5
    18b4:	c23a                	sw	a4,4(sp)
    18b6:	2e75                	jal	1c72 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
    18b8:	4632                	lw	a2,12(sp)
    18ba:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
    18bc:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
    18be:	e00006b7          	lui	a3,0xe0000
    18c2:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
    18c6:	458d                	li	a1,3
    18c8:	00978633          	add	a2,a5,s1
		t = 0;
    18cc:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
    18ce:	00064303          	lbu	t1,0(a2)
    18d2:	0685                	addi	a3,a3,1
    18d4:	007c                	addi	a5,sp,12
    18d6:	00d78533          	add	a0,a5,a3
    18da:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
    18de:	00d70563          	beq	a4,a3,18e8 <_write.constprop.0+0xbc>
    18e2:	0605                	addi	a2,a2,1
    18e4:	feb695e3          	bne	a3,a1,18ce <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
    18e8:	00470693          	addi	a3,a4,4
    18ec:	f806e693          	ori	a3,a3,-128
    18f0:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
    18f4:	4632                	lw	a2,12(sp)
    18f6:	e00006b7          	lui	a3,0xe0000
		place += tosend;
    18fa:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
    18fc:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
    1900:	f684c5e3          	blt	s1,s0,186a <_write.constprop.0+0x3e>
    1904:	bfa9                	j	185e <_write.constprop.0+0x32>
			if( timeout-- == 0 )
    1906:	16fd                	addi	a3,a3,-1
    1908:	fead                	bnez	a3,1882 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
    190a:	00032783          	lw	a5,0(t1)
    190e:	0c07e793          	ori	a5,a5,192
    1912:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1916:	4401                	li	s0,0
    1918:	b799                	j	185e <_write.constprop.0+0x32>
	if( size == 0 )
    191a:	4481                	li	s1,0
    191c:	b7d5                	j	1900 <_write.constprop.0+0xd4>

0000191e <__puts_uart>:
{
    191e:	1151                	addi	sp,sp,-12
    1920:	c222                	sw	s0,4(sp)
    1922:	c406                	sw	ra,8(sp)
    1924:	842e                	mv	s0,a1
	_write( 0, s, len );
    1926:	3719                	jal	182c <_write.constprop.0>
}
    1928:	40a2                	lw	ra,8(sp)
    192a:	8522                	mv	a0,s0
    192c:	4412                	lw	s0,4(sp)
    192e:	0131                	addi	sp,sp,12
    1930:	8082                	ret

00001932 <handle_reset>:
	asm volatile( "\n\
    1932:	1ffff197          	auipc	gp,0x1ffff
    1936:	aca18193          	addi	gp,gp,-1334 # 200003fc <__global_pointer$>
    193a:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
    193e:	6509                	lui	a0,0x2
    1940:	88050513          	addi	a0,a0,-1920 # 1880 <_write.constprop.0+0x54>
    1944:	30051073          	csrw	mstatus,a0
    1948:	468d                	li	a3,3
    194a:	ffffe517          	auipc	a0,0xffffe
    194e:	6b650513          	addi	a0,a0,1718 # 0 <InterruptVector>
    1952:	8d55                	or	a0,a0,a3
    1954:	30551073          	csrw	mtvec,a0
asm volatile(
    1958:	c3418513          	addi	a0,gp,-972 # 20000030 <_i2c_timeout>
    195c:	06418593          	addi	a1,gp,100 # 20000460 <_ebss>
    1960:	4601                	li	a2,0
    1962:	00b55663          	bge	a0,a1,196e <handle_reset+0x3c>
    1966:	c110                	sw	a2,0(a0)
    1968:	0511                	addi	a0,a0,4
    196a:	feb54ee3          	blt	a0,a1,1966 <handle_reset+0x34>
    196e:	00002517          	auipc	a0,0x2
    1972:	39e50513          	addi	a0,a0,926 # 3d0c <_data_lma>
    1976:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_sensor>
    197a:	c3418613          	addi	a2,gp,-972 # 20000030 <_i2c_timeout>
    197e:	00c58863          	beq	a1,a2,198e <handle_reset+0x5c>
    1982:	4114                	lw	a3,0(a0)
    1984:	c194                	sw	a3,0(a1)
    1986:	0511                	addi	a0,a0,4
    1988:	0591                	addi	a1,a1,4
    198a:	fec59ae3          	bne	a1,a2,197e <handle_reset+0x4c>
	SysTick->CTLR = 5;
    198e:	e000f7b7          	lui	a5,0xe000f
    1992:	4715                	li	a4,5
    1994:	c398                	sw	a4,0(a5)
asm volatile(
    1996:	6789                	lui	a5,0x2
    1998:	e0678793          	addi	a5,a5,-506 # 1e06 <main>
    199c:	34179073          	csrw	mepc,a5
    19a0:	30200073          	mret

000019a4 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
    19a4:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
    19a8:	cbeff0ef          	jal	ra,e66 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
    19ac:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
    19b0:	cb6ff0ef          	jal	ra,e66 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
    19b4:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
    19b8:	caeff0ef          	jal	ra,e66 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
    19bc:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
    19c0:	ca6ff0ef          	jal	ra,e66 <PrintHex>
	while( (*DMDATA0) & 0x80 );
    19c4:	e0000737          	lui	a4,0xe0000
    19c8:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
    19cc:	0f470693          	addi	a3,a4,244
    19d0:	0807f793          	andi	a5,a5,128
    19d4:	fbf5                	bnez	a5,19c8 <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
    19d6:	6785                	lui	a5,0x1
    19d8:	a8578793          	addi	a5,a5,-1403 # a85 <__muldf3+0x3c3>
    19dc:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
    19de:	e0000737          	lui	a4,0xe0000
    19e2:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
    19e6:	0f470693          	addi	a3,a4,244
    19ea:	0807f793          	andi	a5,a5,128
    19ee:	fbf5                	bnez	a5,19e2 <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
    19f0:	aaaab7b7          	lui	a5,0xaaaab
    19f4:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
    19f8:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
    19fa:	a001                	j	19fa <ADC1_2_IRQHandler+0x56>

000019fc <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
    19fc:	40021737          	lui	a4,0x40021
    1a00:	471c                	lw	a5,8(a4)
    1a02:	008006b7          	lui	a3,0x800
    1a06:	8fd5                	or	a5,a5,a3
    1a08:	c71c                	sw	a5,8(a4)

00001a0a <strlen>:
{
    1a0a:	87aa                	mv	a5,a0
	for (; *s; s++);
    1a0c:	0007c703          	lbu	a4,0(a5)
    1a10:	e701                	bnez	a4,1a18 <strlen+0xe>
}
    1a12:	40a78533          	sub	a0,a5,a0
    1a16:	8082                	ret
	for (; *s; s++);
    1a18:	0785                	addi	a5,a5,1
    1a1a:	bfcd                	j	1a0c <strlen+0x2>

00001a1c <mini_vpprintf>:
{
    1a1c:	fa410113          	addi	sp,sp,-92
    1a20:	c8a6                	sw	s1,80(sp)
    1a22:	cc86                	sw	ra,88(sp)
    1a24:	caa2                	sw	s0,84(sp)
    1a26:	c02a                	sw	a0,0(sp)
    1a28:	c22e                	sw	a1,4(sp)
    1a2a:	84b2                	mv	s1,a2
    1a2c:	87b6                	mv	a5,a3
	int n = 0;
    1a2e:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
    1a30:	0004c703          	lbu	a4,0(s1)
    1a34:	00148413          	addi	s0,s1,1
    1a38:	00e10fa3          	sb	a4,31(sp)
    1a3c:	eb01                	bnez	a4,1a4c <mini_vpprintf+0x30>
}
    1a3e:	40e6                	lw	ra,88(sp)
    1a40:	4456                	lw	s0,84(sp)
    1a42:	4542                	lw	a0,16(sp)
    1a44:	44c6                	lw	s1,80(sp)
    1a46:	05c10113          	addi	sp,sp,92
    1a4a:	8082                	ret
		if (ch!='%') {
    1a4c:	02500693          	li	a3,37
    1a50:	00d70f63          	beq	a4,a3,1a6e <mini_vpprintf+0x52>
    1a54:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
    1a56:	4612                	lw	a2,4(sp)
    1a58:	4782                	lw	a5,0(sp)
    1a5a:	4585                	li	a1,1
    1a5c:	01f10513          	addi	a0,sp,31
    1a60:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
    1a62:	84a2                	mv	s1,s0
		n = n + len;
    1a64:	47c2                	lw	a5,16(sp)
    1a66:	97aa                	add	a5,a5,a0
    1a68:	c83e                	sw	a5,16(sp)
    1a6a:	47a2                	lw	a5,8(sp)
    1a6c:	b7d1                	j	1a30 <mini_vpprintf+0x14>
			ch=*(fmt++);
    1a6e:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
    1a72:	03000613          	li	a2,48
			ch=*(fmt++);
    1a76:	00248713          	addi	a4,s1,2
    1a7a:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
    1a7e:	03000413          	li	s0,48
    1a82:	08c69063          	bne	a3,a2,1b02 <mini_vpprintf+0xe6>
				ch=*(fmt++);
    1a86:	84ba                	mv	s1,a4
    1a88:	4601                	li	a2,0
    1a8a:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
    1a8c:	4525                	li	a0,9
    1a8e:	a811                	j	1aa2 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
    1a90:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
    1a94:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
    1a96:	9736                	add	a4,a4,a3
				ch=*(fmt++);
    1a98:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
    1a9c:	0706                	slli	a4,a4,0x1
    1a9e:	972e                	add	a4,a4,a1
				ch=*(fmt++);
    1aa0:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
    1aa2:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.bdeb3654+0x7f8893>
    1aa6:	0ff5f313          	andi	t1,a1,255
    1aaa:	fe6573e3          	bgeu	a0,t1,1a90 <mini_vpprintf+0x74>
    1aae:	c219                	beqz	a2,1ab4 <mini_vpprintf+0x98>
    1ab0:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
    1ab4:	c63a                	sw	a4,12(sp)
    1ab6:	4661                	li	a2,24
    1ab8:	00e65363          	bge	a2,a4,1abe <mini_vpprintf+0xa2>
    1abc:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
    1abe:	06c00593          	li	a1,108
			char l = 0;
    1ac2:	4601                	li	a2,0
			if (ch == 'l') {
    1ac4:	00b69863          	bne	a3,a1,1ad4 <mini_vpprintf+0xb8>
				ch=*(fmt++);
    1ac8:	0004c683          	lbu	a3,0(s1)
				l = 1;
    1acc:	4605                	li	a2,1
				ch=*(fmt++);
    1ace:	0485                	addi	s1,s1,1
    1ad0:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
    1ad4:	01f14683          	lbu	a3,31(sp)
    1ad8:	06400593          	li	a1,100
    1adc:	06b68363          	beq	a3,a1,1b42 <mini_vpprintf+0x126>
    1ae0:	02d5e463          	bltu	a1,a3,1b08 <mini_vpprintf+0xec>
    1ae4:	05800713          	li	a4,88
    1ae8:	0ae68263          	beq	a3,a4,1b8c <mini_vpprintf+0x170>
    1aec:	06300713          	li	a4,99
    1af0:	0ce68063          	beq	a3,a4,1bb0 <mini_vpprintf+0x194>
    1af4:	d6a9                	beqz	a3,1a3e <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
    1af6:	4612                	lw	a2,4(sp)
    1af8:	c43e                	sw	a5,8(sp)
    1afa:	4585                	li	a1,1
    1afc:	01f10513          	addi	a0,sp,31
    1b00:	a88d                	j	1b72 <mini_vpprintf+0x156>
			char pad_char = ' ';
    1b02:	02000413          	li	s0,32
    1b06:	b741                	j	1a86 <mini_vpprintf+0x6a>
			switch (ch) {
    1b08:	07500593          	li	a1,117
    1b0c:	02b68b63          	beq	a3,a1,1b42 <mini_vpprintf+0x126>
    1b10:	07800613          	li	a2,120
    1b14:	06c68c63          	beq	a3,a2,1b8c <mini_vpprintf+0x170>
    1b18:	07300613          	li	a2,115
    1b1c:	fcc69de3          	bne	a3,a2,1af6 <mini_vpprintf+0xda>
    1b20:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
    1b22:	00478713          	addi	a4,a5,4
    1b26:	439c                	lw	a5,0(a5)
    1b28:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
    1b2a:	853e                	mv	a0,a5
    1b2c:	ca3e                	sw	a5,20(sp)
    1b2e:	3df1                	jal	1a0a <strlen>
					if (pad_to > 0) {
    1b30:	4762                	lw	a4,24(sp)
    1b32:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
    1b34:	85aa                	mv	a1,a0
					if (pad_to > 0) {
    1b36:	cb51                	beqz	a4,1bca <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
    1b38:	46b2                	lw	a3,12(sp)
    1b3a:	1838                	addi	a4,sp,56
    1b3c:	8622                	mv	a2,s0
    1b3e:	853e                	mv	a0,a5
    1b40:	a025                	j	1b68 <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1b42:	00478713          	addi	a4,a5,4
    1b46:	c43a                	sw	a4,8(sp)
					if(l) {
    1b48:	ca05                	beqz	a2,1b78 <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1b4a:	f8b68693          	addi	a3,a3,-117
    1b4e:	1018                	addi	a4,sp,32
    1b50:	0016b693          	seqz	a3,a3
    1b54:	4388                	lw	a0,0(a5)
    1b56:	4601                	li	a2,0
    1b58:	45a9                	li	a1,10
    1b5a:	b7aff0ef          	jal	ra,ed4 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    1b5e:	46b2                	lw	a3,12(sp)
    1b60:	1838                	addi	a4,sp,56
    1b62:	8622                	mv	a2,s0
    1b64:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    1b66:	1008                	addi	a0,sp,32
    1b68:	a20ff0ef          	jal	ra,d88 <mini_pad>
					len = puts(bf, len, buf);
    1b6c:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    1b6e:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
    1b70:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
    1b72:	4782                	lw	a5,0(sp)
    1b74:	9782                	jalr	a5
					break;
    1b76:	b5fd                	j	1a64 <mini_vpprintf+0x48>
						if(ch == 'u') {
    1b78:	07500713          	li	a4,117
    1b7c:	00e69563          	bne	a3,a4,1b86 <mini_vpprintf+0x16a>
	if (radix > 16)
    1b80:	1018                	addi	a4,sp,32
    1b82:	4685                	li	a3,1
    1b84:	bfc1                	j	1b54 <mini_vpprintf+0x138>
    1b86:	1018                	addi	a4,sp,32
    1b88:	4681                	li	a3,0
    1b8a:	b7e9                	j	1b54 <mini_vpprintf+0x138>
					if(l) {
    1b8c:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1b8e:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
    1b92:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1b96:	c43a                	sw	a4,8(sp)
	if (radix > 16)
    1b98:	4685                	li	a3,1
    1b9a:	1018                	addi	a4,sp,32
    1b9c:	00163613          	seqz	a2,a2
    1ba0:	45c1                	li	a1,16
    1ba2:	b32ff0ef          	jal	ra,ed4 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    1ba6:	46b2                	lw	a3,12(sp)
    1ba8:	85aa                	mv	a1,a0
    1baa:	1838                	addi	a4,sp,56
    1bac:	8622                	mv	a2,s0
    1bae:	bf65                	j	1b66 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
    1bb0:	00478713          	addi	a4,a5,4
    1bb4:	439c                	lw	a5,0(a5)
    1bb6:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
    1bb8:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
    1bba:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
    1bbe:	1838                	addi	a4,sp,56
    1bc0:	8622                	mv	a2,s0
    1bc2:	4585                	li	a1,1
    1bc4:	01f10513          	addi	a0,sp,31
    1bc8:	b745                	j	1b68 <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
    1bca:	4612                	lw	a2,4(sp)
    1bcc:	853e                	mv	a0,a5
    1bce:	b755                	j	1b72 <mini_vpprintf+0x156>

00001bd0 <printf>:
{
    1bd0:	fdc10113          	addi	sp,sp,-36
    1bd4:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1bd6:	862a                	mv	a2,a0
    1bd8:	6509                	lui	a0,0x2
{
    1bda:	c82e                	sw	a1,16(sp)
    1bdc:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1bde:	4581                	li	a1,0
	va_start( args, format );
    1be0:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1be2:	91e50513          	addi	a0,a0,-1762 # 191e <__puts_uart>
{
    1be6:	c606                	sw	ra,12(sp)
    1be8:	ce3a                	sw	a4,28(sp)
    1bea:	d03e                	sw	a5,32(sp)
	va_start( args, format );
    1bec:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1bee:	353d                	jal	1a1c <mini_vpprintf>
}
    1bf0:	40b2                	lw	ra,12(sp)
    1bf2:	02410113          	addi	sp,sp,36
    1bf6:	8082                	ret

00001bf8 <mini_vsnprintf>:
{
    1bf8:	1121                	addi	sp,sp,-24
    1bfa:	ca06                	sw	ra,20(sp)
    1bfc:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
    1bfe:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
    1c00:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
    1c02:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
    1c04:	c18d                	beqz	a1,1c26 <mini_vsnprintf+0x2e>
    1c06:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
    1c08:	858a                	mv	a1,sp
    1c0a:	e111                	bnez	a0,1c0e <mini_vsnprintf+0x16>
    1c0c:	4581                	li	a1,0
    1c0e:	6505                	lui	a0,0x1
    1c10:	e2450513          	addi	a0,a0,-476 # e24 <_puts>
    1c14:	3521                	jal	1a1c <mini_vpprintf>
	if(buffer == (void*) 0) {
    1c16:	c401                	beqz	s0,1c1e <mini_vsnprintf+0x26>
	return b.pbuffer - b.buffer;
    1c18:	4512                	lw	a0,4(sp)
    1c1a:	4782                	lw	a5,0(sp)
    1c1c:	8d1d                	sub	a0,a0,a5
}
    1c1e:	40d2                	lw	ra,20(sp)
    1c20:	4442                	lw	s0,16(sp)
    1c22:	0161                	addi	sp,sp,24
    1c24:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
    1c26:	4401                	li	s0,0
    1c28:	b7d5                	j	1c0c <mini_vsnprintf+0x14>

00001c2a <sprintf>:
{
    1c2a:	1101                	addi	sp,sp,-32
    1c2c:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1c2e:	862e                	mv	a2,a1
    1c30:	800005b7          	lui	a1,0x80000
{
    1c34:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1c36:	fff5c593          	not	a1,a1
	va_start( args, format );
    1c3a:	0814                	addi	a3,sp,16
{
    1c3c:	c606                	sw	ra,12(sp)
    1c3e:	cc3a                	sw	a4,24(sp)
    1c40:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
    1c42:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1c44:	3f55                	jal	1bf8 <mini_vsnprintf>
}
    1c46:	40b2                	lw	ra,12(sp)
    1c48:	6105                	addi	sp,sp,32
    1c4a:	8082                	ret

00001c4c <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
    1c4c:	962a                	add	a2,a2,a0
    1c4e:	87aa                	mv	a5,a0
    1c50:	00c79363          	bne	a5,a2,1c56 <memset+0xa>
    1c54:	8082                	ret
    1c56:	00b78023          	sb	a1,0(a5)
    1c5a:	0785                	addi	a5,a5,1
    1c5c:	bfd5                	j	1c50 <memset+0x4>

00001c5e <strcpy>:
{
    1c5e:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
    1c60:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
    1c64:	00e78023          	sb	a4,0(a5)
    1c68:	e311                	bnez	a4,1c6c <strcpy+0xe>
}
    1c6a:	8082                	ret
	for (; (*d=*s); s++, d++);
    1c6c:	0585                	addi	a1,a1,1
    1c6e:	0785                	addi	a5,a5,1
    1c70:	bfc5                	j	1c60 <strcpy+0x2>

00001c72 <memcpy>:
{
    1c72:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
    1c74:	00f61363          	bne	a2,a5,1c7a <memcpy+0x8>
}
    1c78:	8082                	ret
	for (; n; n--) *d++ = *s++;
    1c7a:	00f58733          	add	a4,a1,a5
    1c7e:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
    1c82:	00f50733          	add	a4,a0,a5
    1c86:	0785                	addi	a5,a5,1
    1c88:	00d70023          	sb	a3,0(a4)
    1c8c:	b7e5                	j	1c74 <memcpy+0x2>

00001c8e <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1c8e:	7179                	addi	sp,sp,-48
    1c90:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
    1c92:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1c96:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
    1c98:	862e                	mv	a2,a1
    1c9a:	85aa                	mv	a1,a0
    1c9c:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1ca0:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    1ca2:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    1ca6:	37f1                	jal	1c72 <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    1ca8:	00140613          	addi	a2,s0,1
    1cac:	858a                	mv	a1,sp
    1cae:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
    1cb2:	c76ff0ef          	jal	ra,1128 <i2c_write_raw>
}
    1cb6:	50b2                	lw	ra,44(sp)
    1cb8:	5422                	lw	s0,40(sp)
    1cba:	6145                	addi	sp,sp,48
    1cbc:	8082                	ret

00001cbe <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
    1cbe:	1151                	addi	sp,sp,-12
    1cc0:	c222                	sw	s0,4(sp)
    1cc2:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1cc4:	02100513          	li	a0,33
void ssd1306_print_str_at(
    1cc8:	c406                	sw	ra,8(sp)
    1cca:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1ccc:	d9cff0ef          	jal	ra,1268 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1cd0:	4501                	li	a0,0
    1cd2:	d96ff0ef          	jal	ra,1268 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1cd6:	07f00513          	li	a0,127
    1cda:	d8eff0ef          	jal	ra,1268 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1cde:	02200513          	li	a0,34
    1ce2:	d86ff0ef          	jal	ra,1268 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1ce6:	8522                	mv	a0,s0
    1ce8:	d80ff0ef          	jal	ra,1268 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1cec:	8522                	mv	a0,s0
    1cee:	d7aff0ef          	jal	ra,1268 <ssd1306_cmd>
    1cf2:	4465                	li	s0,25
    1cf4:	04818493          	addi	s1,gp,72 # 20000444 <str_output>
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i < SSD1306_STR_SIZE; i++) {
		if (*str) {
    1cf8:	0004c783          	lbu	a5,0(s1)
    1cfc:	c78d                	beqz	a5,1d26 <ssd1306_print_str_at.constprop.0+0x68>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    1cfe:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    1d00:	0ff7f793          	andi	a5,a5,255
    1d04:	6711                	lui	a4,0x4
    1d06:	00279693          	slli	a3,a5,0x2
    1d0a:	b1470513          	addi	a0,a4,-1260 # 3b14 <FONT_7x5>
    1d0e:	97b6                	add	a5,a5,a3
    1d10:	4595                	li	a1,5
    1d12:	953e                	add	a0,a0,a5
    1d14:	3fad                	jal	1c8e <ssd1306_data.isra.0>
			str++;
    1d16:	0485                	addi	s1,s1,1
	for (int i=0; i < SSD1306_STR_SIZE; i++) {
    1d18:	147d                	addi	s0,s0,-1
    1d1a:	fc79                	bnez	s0,1cf8 <ssd1306_print_str_at.constprop.0+0x3a>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
    1d1c:	40a2                	lw	ra,8(sp)
    1d1e:	4412                	lw	s0,4(sp)
    1d20:	4482                	lw	s1,0(sp)
    1d22:	0131                	addi	sp,sp,12
    1d24:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    1d26:	6791                	lui	a5,0x4
    1d28:	4595                	li	a1,5
    1d2a:	b1478513          	addi	a0,a5,-1260 # 3b14 <FONT_7x5>
    1d2e:	3785                	jal	1c8e <ssd1306_data.isra.0>
    1d30:	b7e5                	j	1d18 <ssd1306_print_str_at.constprop.0+0x5a>

00001d32 <puts>:
{
    1d32:	1151                	addi	sp,sp,-12
    1d34:	c406                	sw	ra,8(sp)
    1d36:	c222                	sw	s0,4(sp)
    1d38:	c026                	sw	s1,0(sp)
    1d3a:	84aa                	mv	s1,a0
	int sl = strlen( s );
    1d3c:	31f9                	jal	1a0a <strlen>
    1d3e:	842a                	mv	s0,a0
	_write(0, s, sl );
    1d40:	85aa                	mv	a1,a0
    1d42:	8526                	mv	a0,s1
    1d44:	34e5                	jal	182c <_write.constprop.0>
	_write(0, "\n", 1 );
    1d46:	6511                	lui	a0,0x4
    1d48:	4585                	li	a1,1
    1d4a:	acc50513          	addi	a0,a0,-1332 # 3acc <__clz_tab+0x738>
    1d4e:	3cf9                	jal	182c <_write.constprop.0>
}
    1d50:	40a2                	lw	ra,8(sp)
    1d52:	00140513          	addi	a0,s0,1
    1d56:	4412                	lw	s0,4(sp)
    1d58:	4482                	lw	s1,0(sp)
    1d5a:	0131                	addi	sp,sp,12
    1d5c:	8082                	ret

00001d5e <i2c_scan_callback>:
}

char str_output[SSD1306_STR_SIZE];

void i2c_scan_callback(const uint8_t addr) {
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    1d5e:	c539                	beqz	a0,1dac <i2c_scan_callback+0x4e>
    1d60:	07f00793          	li	a5,127
    1d64:	862a                	mv	a2,a0
    1d66:	04f50363          	beq	a0,a5,1dac <i2c_scan_callback+0x4e>
void i2c_scan_callback(const uint8_t addr) {
    1d6a:	1151                	addi	sp,sp,-12
    1d6c:	c222                	sw	s0,4(sp)
	
	static int line = 1;
	sprintf(str_output, "I2C: 0x%02X", addr);
    1d6e:	658d                	lui	a1,0x3
    1d70:	49458593          	addi	a1,a1,1172 # 3494 <__clz_tab+0x100>
    1d74:	04818513          	addi	a0,gp,72 # 20000444 <str_output>
void i2c_scan_callback(const uint8_t addr) {
    1d78:	c406                	sw	ra,8(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    1d7a:	3d45                	jal	1c2a <sprintf>
	printf("%s\n", str_output);
    1d7c:	04818513          	addi	a0,gp,72 # 20000444 <str_output>
    1d80:	3f4d                	jal	1d32 <puts>
	modI2C_display(str_output, line++);
    1d82:	c1c18793          	addi	a5,gp,-996 # 20000018 <line.0>
    1d86:	4380                	lw	s0,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1d88:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
    1d8c:	00140713          	addi	a4,s0,1
    1d90:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1d92:	afeff0ef          	jal	ra,1090 <i2c_ping>
    1d96:	e519                	bnez	a0,1da4 <i2c_scan_callback+0x46>
	ssd1306_print_str_at(str, line, 0);
    1d98:	0ff47513          	andi	a0,s0,255
}
    1d9c:	4412                	lw	s0,4(sp)
    1d9e:	40a2                	lw	ra,8(sp)
    1da0:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    1da2:	bf31                	j	1cbe <ssd1306_print_str_at.constprop.0>
}
    1da4:	40a2                	lw	ra,8(sp)
    1da6:	4412                	lw	s0,4(sp)
    1da8:	0131                	addi	sp,sp,12
    1daa:	8082                	ret
    1dac:	8082                	ret

00001dae <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    1dae:	400227b7          	lui	a5,0x40022
    1db2:	4705                	li	a4,1
    1db4:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    1db6:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1dba:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    1dbe:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1dc2:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.bdeb3654+0x1078944>
    1dc6:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    1dc8:	009f0737          	lui	a4,0x9f0
    1dcc:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    1dce:	020006b7          	lui	a3,0x2000
    1dd2:	40021737          	lui	a4,0x40021
    1dd6:	431c                	lw	a5,0(a4)
    1dd8:	8ff5                	and	a5,a5,a3
    1dda:	dff5                	beqz	a5,1dd6 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1ddc:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1dde:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1de2:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    1de4:	0027e793          	ori	a5,a5,2
    1de8:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1dea:	4721                	li	a4,8
    1dec:	42dc                	lw	a5,4(a3)
    1dee:	8bb1                	andi	a5,a5,12
    1df0:	fee79ee3          	bne	a5,a4,1dec <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    1df4:	e00007b7          	lui	a5,0xe0000
    1df8:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    1dfc:	08000713          	li	a4,128
    1e00:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    1e04:	8082                	ret

00001e06 <main>:
	test_apds9960();
	test_ina219();
}


int main() {
    1e06:	f4410113          	addi	sp,sp,-188
    1e0a:	dd06                	sw	ra,184(sp)
    1e0c:	db22                	sw	s0,180(sp)
    1e0e:	d926                	sw	s1,176(sp)
    SystemInit();
    1e10:	3f79                	jal	1dae <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    1e12:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1e16:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    1e18:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1e1c:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.bdeb3654+0x4442>
    1e20:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    1e22:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    1e26:	c401a223          	sw	zero,-956(gp) # 20000040 <systick_millis>
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    1e2a:	4398                	lw	a4,0(a5)
    systick_init();			//! required for millis()

    funGpioInitAll();
    Delay_Ms(100);
    1e2c:	00494537          	lui	a0,0x494
    1e30:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c6c3>
    1e34:	00776713          	ori	a4,a4,7
    1e38:	c398                	sw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1e3a:	e000e7b7          	lui	a5,0xe000e
    1e3e:	6705                	lui	a4,0x1
    1e40:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>
    funGpioInitAll();
    1e44:	40021737          	lui	a4,0x40021
    1e48:	4f1c                	lw	a5,24(a4)
    1e4a:	0357e793          	ori	a5,a5,53
    1e4e:	cf1c                	sw	a5,24(a4)
    Delay_Ms(100);
    1e50:	86eff0ef          	jal	ra,ebe <DelaySysTick>
	if(dev->regb == 0) dev->regb = 1;
    1e54:	c1018793          	addi	a5,gp,-1008 # 2000000c <dev_ssd1306>
    1e58:	00a7c683          	lbu	a3,10(a5)
    1e5c:	c1018713          	addi	a4,gp,-1008 # 2000000c <dev_ssd1306>
    1e60:	4785                	li	a5,1
    1e62:	c681                	beqz	a3,1e6a <main+0x64>
	if(dev->regb  > 4) dev->regb = 4;
    1e64:	4791                	li	a5,4
    1e66:	00d7f463          	bgeu	a5,a3,1e6e <main+0x68>
    1e6a:	00f70523          	sb	a5,10(a4) # 4002100a <_eusrstack+0x2002080a>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1e6e:	400217b7          	lui	a5,0x40021
    1e72:	4b90                	lw	a2,16(a5)
    1e74:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1e78:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1e7c:	8e49                	or	a2,a2,a0
    1e7e:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1e80:	4b90                	lw	a2,16(a5)
    1e82:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1e84:	6405                	lui	s0,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1e86:	8e6d                	and	a2,a2,a1
    1e88:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1e8a:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    1e8c:	fbc00637          	lui	a2,0xfbc00
    1e90:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1e92:	8ec9                	or	a3,a3,a0
    1e94:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    1e96:	4f94                	lw	a3,24(a5)
    1e98:	0116e693          	ori	a3,a3,17
    1e9c:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    1e9e:	400107b7          	lui	a5,0x40010
    1ea2:	43d4                	lw	a3,4(a5)
    1ea4:	8ef1                	and	a3,a3,a2
    1ea6:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1ea8:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1eaa:	767d                	lui	a2,0xfffff
    1eac:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1eb0:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    1eb2:	400117b7          	lui	a5,0x40011
    1eb6:	4394                	lw	a3,0(a5)
    1eb8:	f0f6f693          	andi	a3,a3,-241
    1ebc:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    1ebe:	4394                	lw	a3,0(a5)
    1ec0:	0d06e693          	ori	a3,a3,208
    1ec4:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1ec6:	4394                	lw	a3,0(a5)
    1ec8:	8ef1                	and	a3,a3,a2
    1eca:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1ecc:	4394                	lw	a3,0(a5)
    1ece:	d0040613          	addi	a2,s0,-768 # d00 <__hidden___udivsi3+0x28>
    1ed2:	8ed1                	or	a3,a3,a2
    1ed4:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    1ed6:	400056b7          	lui	a3,0x40005
    1eda:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
    1ede:	07c2                	slli	a5,a5,0x10
    1ee0:	83c1                	srli	a5,a5,0x10
    1ee2:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    1ee6:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    1eea:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
    1eee:	431c                	lw	a5,0(a4)
    1ef0:	6761                	lui	a4,0x18
    1ef2:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.bdeb3654+0x10f63>
    1ef6:	00179593          	slli	a1,a5,0x1
    1efa:	2ef76563          	bltu	a4,a5,21e4 <main+0x3de>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    1efe:	02dc7537          	lui	a0,0x2dc7
    1f02:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bdeb3654+0x2dbf4c3>
    1f06:	dd3fe0ef          	jal	ra,cd8 <__hidden___udivsi3>
    1f0a:	147d                	addi	s0,s0,-1
    1f0c:	8d61                	and	a0,a0,s0
    1f0e:	0542                	slli	a0,a0,0x10
    1f10:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    1f12:	40005737          	lui	a4,0x40005
    1f16:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    1f1a:	40075783          	lhu	a5,1024(a4)
    1f1e:	07c2                	slli	a5,a5,0x10
    1f20:	83c1                	srli	a5,a5,0x10
    1f22:	0017e793          	ori	a5,a5,1
    1f26:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    1f2a:	868ff0ef          	jal	ra,f92 <i2c_error>

	if(i2c_init(&dev_ssd1306) != I2C_OK) {
    1f2e:	2c050963          	beqz	a0,2200 <main+0x3fa>
		printf("Failed to init I2C\n");
    1f32:	650d                	lui	a0,0x3
    1f34:	4a050513          	addi	a0,a0,1184 # 34a0 <__clz_tab+0x10c>
		}

		// Scan the I2C Bus, prints any devices that respond
		printf("----Scanning I2C Bus for Devices---\n");
		i2c_scan(i2c_scan_callback);
		printf("----Done Scanning----\n\n");
    1f38:	3bed                	jal	1d32 <puts>
	}

    while(1) {
        Delay_Ms(1000);
    1f3a:	02dc7537          	lui	a0,0x2dc7
    1f3e:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bdeb3654+0x2dbf4c3>
    1f42:	f7dfe0ef          	jal	ra,ebe <DelaySysTick>
    dev_sensor.addr = 0x40;
    1f46:	c0418793          	addi	a5,gp,-1020 # 20000000 <dev_sensor>
    1f4a:	04000713          	li	a4,64
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1f4e:	04000513          	li	a0,64
    dev_sensor.addr = 0x40;
    1f52:	00e79423          	sh	a4,8(a5) # 40011008 <_eusrstack+0x20010808>
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1f56:	93aff0ef          	jal	ra,1090 <i2c_ping>
    1f5a:	c0418493          	addi	s1,gp,-1020 # 20000000 <dev_sensor>
    1f5e:	3a050d63          	beqz	a0,2318 <main+0x512>
		printf("HTU21 not found\n");
    1f62:	650d                	lui	a0,0x3
    1f64:	4fc50513          	addi	a0,a0,1276 # 34fc <__clz_tab+0x168>
    1f68:	33e9                	jal	1d32 <puts>
    dev_sensor.addr = 0x38;
    1f6a:	03800793          	li	a5,56
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1f6e:	03800513          	li	a0,56
    dev_sensor.addr = 0x38;
    1f72:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1f76:	91aff0ef          	jal	ra,1090 <i2c_ping>
    1f7a:	4a050a63          	beqz	a0,242e <main+0x628>
		printf("AHT21 not found\n");
    1f7e:	650d                	lui	a0,0x3
    1f80:	55c50513          	addi	a0,a0,1372 # 355c <__clz_tab+0x1c8>
    1f84:	337d                	jal	1d32 <puts>
    dev_sensor.addr = 0x76;
    1f86:	07600793          	li	a5,118
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1f8a:	07600513          	li	a0,118
    dev_sensor.addr = 0x76;
    1f8e:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1f92:	8feff0ef          	jal	ra,1090 <i2c_ping>
    1f96:	58050063          	beqz	a0,2516 <main+0x710>
		printf("BMP280 not found\n");
    1f9a:	650d                	lui	a0,0x3
    1f9c:	5c450513          	addi	a0,a0,1476 # 35c4 <__clz_tab+0x230>
    1fa0:	3b49                	jal	1d32 <puts>
    dev_sensor.addr = 0x40;
    1fa2:	04000793          	li	a5,64
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1fa6:	04000513          	li	a0,64
    dev_sensor.addr = 0x40;
    1faa:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1fae:	8e2ff0ef          	jal	ra,1090 <i2c_ping>
    1fb2:	68050f63          	beqz	a0,2650 <main+0x84a>
		printf("HDC1080 not found\n");
    1fb6:	650d                	lui	a0,0x3
    1fb8:	62450513          	addi	a0,a0,1572 # 3624 <__clz_tab+0x290>
    1fbc:	3b9d                	jal	1d32 <puts>
    dev_sensor.addr = 0x40;
    1fbe:	04000793          	li	a5,64
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1fc2:	04000513          	li	a0,64
    dev_sensor.addr = 0x40;
    1fc6:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1fca:	8c6ff0ef          	jal	ra,1090 <i2c_ping>
    1fce:	76050163          	beqz	a0,2730 <main+0x92a>
		printf("SI7021 not found\n");
    1fd2:	650d                	lui	a0,0x3
    1fd4:	65c50513          	addi	a0,a0,1628 # 365c <__clz_tab+0x2c8>
    1fd8:	3ba9                	jal	1d32 <puts>
    dev_sensor.addr = 0x4A;
    1fda:	04a00793          	li	a5,74
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1fde:	04a00513          	li	a0,74
    dev_sensor.addr = 0x4A;
    1fe2:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1fe6:	8aaff0ef          	jal	ra,1090 <i2c_ping>
    1fea:	7e050363          	beqz	a0,27d0 <main+0x9ca>
		printf("Max44009 not found\n");
    1fee:	650d                	lui	a0,0x3
    1ff0:	69050513          	addi	a0,a0,1680 # 3690 <__clz_tab+0x2fc>
    1ff4:	3b3d                	jal	1d32 <puts>
    dev_sensor.addr = 0x1E;
    1ff6:	47f9                	li	a5,30
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1ff8:	4579                	li	a0,30
    dev_sensor.addr = 0x1E;
    1ffa:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    1ffe:	892ff0ef          	jal	ra,1090 <i2c_ping>
    2002:	02050be3          	beqz	a0,2838 <main+0xa32>
		printf("AP3216 not found\n");
    2006:	650d                	lui	a0,0x3
    2008:	6cc50513          	addi	a0,a0,1740 # 36cc <__clz_tab+0x338>
    200c:	331d                	jal	1d32 <puts>
    dev_sensor.addr = 0x29;
    200e:	02900793          	li	a5,41
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2012:	02900513          	li	a0,41
    dev_sensor.addr = 0x29;
    2016:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    201a:	876ff0ef          	jal	ra,1090 <i2c_ping>
    201e:	080502e3          	beqz	a0,28a2 <main+0xa9c>
		printf("VL53L0X not found\n");
    2022:	650d                	lui	a0,0x3
    2024:	6f850513          	addi	a0,a0,1784 # 36f8 <__clz_tab+0x364>
    2028:	3329                	jal	1d32 <puts>
    dev_sensor.addr = 0x53;
    202a:	05300793          	li	a5,83
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    202e:	05300513          	li	a0,83
    dev_sensor.addr = 0x53;
    2032:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2036:	85aff0ef          	jal	ra,1090 <i2c_ping>
    203a:	120507e3          	beqz	a0,2968 <main+0xb62>
		printf("ENS160 not found\n");
    203e:	650d                	lui	a0,0x3
    2040:	76850513          	addi	a0,a0,1896 # 3768 <__clz_tab+0x3d4>
    2044:	31fd                	jal	1d32 <puts>
    dev_sensor.addr = 0x58;
    2046:	05800793          	li	a5,88
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    204a:	05800513          	li	a0,88
    dev_sensor.addr = 0x58;
    204e:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2052:	83eff0ef          	jal	ra,1090 <i2c_ping>
    2056:	18050de3          	beqz	a0,29f0 <main+0xbea>
		printf("SGP30 not found\n");
    205a:	650d                	lui	a0,0x3
    205c:	7c850513          	addi	a0,a0,1992 # 37c8 <__clz_tab+0x434>
    2060:	39c9                	jal	1d32 <puts>
    dev_sensor.addr = 0x62;
    2062:	06200793          	li	a5,98
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2066:	06200513          	li	a0,98
    dev_sensor.addr = 0x62;
    206a:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    206e:	822ff0ef          	jal	ra,1090 <i2c_ping>
    2072:	300509e3          	beqz	a0,2b84 <main+0xd7e>
		printf("SCD40 not found\n");
    2076:	6511                	lui	a0,0x4
    2078:	82850513          	addi	a0,a0,-2008 # 3828 <__clz_tab+0x494>
    207c:	395d                	jal	1d32 <puts>
    dev_sensor.addr = 0x68;
    207e:	06800793          	li	a5,104
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2082:	06800513          	li	a0,104
    dev_sensor.addr = 0x68;
    2086:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    208a:	806ff0ef          	jal	ra,1090 <i2c_ping>
    208e:	3c0509e3          	beqz	a0,2c60 <main+0xe5a>
		printf("MPU6050 not found\n");
    2092:	6511                	lui	a0,0x4
    2094:	86050513          	addi	a0,a0,-1952 # 3860 <__clz_tab+0x4cc>
    2098:	3969                	jal	1d32 <puts>
    dev_sensor.addr = 0x53;
    209a:	05300793          	li	a5,83
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    209e:	05300513          	li	a0,83
    dev_sensor.addr = 0x53;
    20a2:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    20a6:	febfe0ef          	jal	ra,1090 <i2c_ping>
    20aa:	e119                	bnez	a0,20b0 <main+0x2aa>
    20ac:	47b0006f          	j	2d26 <main+0xf20>
		printf("ADXL345 not found\n");
    20b0:	6511                	lui	a0,0x4
    20b2:	8cc50513          	addi	a0,a0,-1844 # 38cc <__clz_tab+0x538>
    20b6:	39b5                	jal	1d32 <puts>
    dev_sensor.addr = 0x68;
    20b8:	06800793          	li	a5,104
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    20bc:	06800513          	li	a0,104
    dev_sensor.addr = 0x68;
    20c0:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    20c4:	fcdfe0ef          	jal	ra,1090 <i2c_ping>
    20c8:	e119                	bnez	a0,20ce <main+0x2c8>
    20ca:	4a70006f          	j	2d70 <main+0xf6a>
		printf("DS3231 not found\n");
    20ce:	6511                	lui	a0,0x4
    20d0:	90050513          	addi	a0,a0,-1792 # 3900 <__clz_tab+0x56c>
    20d4:	39b9                	jal	1d32 <puts>
    dev_sensor.addr = 0x57;
    20d6:	05700793          	li	a5,87
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    20da:	05700513          	li	a0,87
    dev_sensor.addr = 0x57;
    20de:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    20e2:	faffe0ef          	jal	ra,1090 <i2c_ping>
    20e6:	e119                	bnez	a0,20ec <main+0x2e6>
    20e8:	57d0006f          	j	2e64 <main+0x105e>
		printf("AT24C not found\n");
    20ec:	6511                	lui	a0,0x4
    20ee:	92850513          	addi	a0,a0,-1752 # 3928 <__clz_tab+0x594>
    20f2:	3181                	jal	1d32 <puts>
    dev_sensor.addr = 0x42;
    20f4:	04200793          	li	a5,66
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    20f8:	04200513          	li	a0,66
    dev_sensor.addr = 0x42;
    20fc:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2100:	f91fe0ef          	jal	ra,1090 <i2c_ping>
    2104:	e119                	bnez	a0,210a <main+0x304>
    2106:	5cf0006f          	j	2ed4 <main+0x10ce>
		printf("INA3221 not found\n");
    210a:	6511                	lui	a0,0x4
    210c:	94050513          	addi	a0,a0,-1728 # 3940 <__clz_tab+0x5ac>
    2110:	310d                	jal	1d32 <puts>
    dev_sensor.addr = 0x36;
    2112:	03600793          	li	a5,54
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2116:	03600513          	li	a0,54
    dev_sensor.addr = 0x36;
    211a:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    211e:	f73fe0ef          	jal	ra,1090 <i2c_ping>
    2122:	e119                	bnez	a0,2128 <main+0x322>
    2124:	6450006f          	j	2f68 <main+0x1162>
		printf("AS5600 not found\n");
    2128:	6511                	lui	a0,0x4
    212a:	97450513          	addi	a0,a0,-1676 # 3974 <__clz_tab+0x5e0>
    212e:	3111                	jal	1d32 <puts>
    dev_sensor.addr = 0x57;
    2130:	05700793          	li	a5,87
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2134:	05700513          	li	a0,87
    dev_sensor.addr = 0x57;
    2138:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    213c:	f55fe0ef          	jal	ra,1090 <i2c_ping>
    2140:	e119                	bnez	a0,2146 <main+0x340>
    2142:	6790006f          	j	2fba <main+0x11b4>
		printf("MAX30102 not found\n");
    2146:	6511                	lui	a0,0x4
    2148:	9b050513          	addi	a0,a0,-1616 # 39b0 <__clz_tab+0x61c>
    214c:	36dd                	jal	1d32 <puts>
    dev_sensor.addr = 0x69;
    214e:	06900793          	li	a5,105
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2152:	06900513          	li	a0,105
    dev_sensor.addr = 0x69;
    2156:	00f49423          	sh	a5,8(s1)
    if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    215a:	f37fe0ef          	jal	ra,1090 <i2c_ping>
    215e:	e119                	bnez	a0,2164 <main+0x35e>
    2160:	70d0006f          	j	306c <main+0x1266>
		printf("AMG88xx not found\n");
    2164:	6511                	lui	a0,0x4
    2166:	9e850513          	addi	a0,a0,-1560 # 39e8 <__clz_tab+0x654>
    216a:	36e1                	jal	1d32 <puts>
    dev_sensor.addr = 0x23;
    216c:	02300793          	li	a5,35
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2170:	02300513          	li	a0,35
    dev_sensor.addr = 0x23;
    2174:	00f49423          	sh	a5,8(s1)
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2178:	f19fe0ef          	jal	ra,1090 <i2c_ping>
    217c:	e119                	bnez	a0,2182 <main+0x37c>
    217e:	7a30006f          	j	3120 <main+0x131a>
		printf("BH1750 not found\n");
    2182:	6511                	lui	a0,0x4
    2184:	a2450513          	addi	a0,a0,-1500 # 3a24 <__clz_tab+0x690>
    2188:	366d                	jal	1d32 <puts>
    dev_sensor.addr = 0x44;
    218a:	04400793          	li	a5,68
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    218e:	04400513          	li	a0,68
    dev_sensor.addr = 0x44;
    2192:	00f49423          	sh	a5,8(s1)
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    2196:	efbfe0ef          	jal	ra,1090 <i2c_ping>
    219a:	e119                	bnez	a0,21a0 <main+0x39a>
    219c:	7e10006f          	j	317c <main+0x1376>
		printf("SHT3X not found\n");
    21a0:	6511                	lui	a0,0x4
    21a2:	a4c50513          	addi	a0,a0,-1460 # 3a4c <__clz_tab+0x6b8>
    21a6:	3671                	jal	1d32 <puts>
    dev_sensor.addr = 0x39;
    21a8:	03900793          	li	a5,57
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    21ac:	03900513          	li	a0,57
    dev_sensor.addr = 0x39;
    21b0:	00f49423          	sh	a5,8(s1)
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    21b4:	eddfe0ef          	jal	ra,1090 <i2c_ping>
    21b8:	e119                	bnez	a0,21be <main+0x3b8>
    21ba:	0660106f          	j	3220 <main+0x141a>
		printf("APDS9960 not found\n");
    21be:	6511                	lui	a0,0x4
    21c0:	a7850513          	addi	a0,a0,-1416 # 3a78 <__clz_tab+0x6e4>
    21c4:	36bd                	jal	1d32 <puts>
    dev_sensor.addr = 0x40;
    21c6:	04000793          	li	a5,64
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    21ca:	04000513          	li	a0,64
    dev_sensor.addr = 0x40;
    21ce:	00f49423          	sh	a5,8(s1)
	if (i2c_ping(dev_sensor.addr) != I2C_OK) {
    21d2:	ebffe0ef          	jal	ra,1090 <i2c_ping>
    21d6:	e119                	bnez	a0,21dc <main+0x3d6>
    21d8:	0be0106f          	j	3296 <main+0x1490>
		printf("INA219 not found\n");
    21dc:	6511                	lui	a0,0x4
    21de:	ad050513          	addi	a0,a0,-1328 # 3ad0 <__clz_tab+0x73c>
    21e2:	bb99                	j	1f38 <main+0x132>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    21e4:	02dc7537          	lui	a0,0x2dc7
    21e8:	95be                	add	a1,a1,a5
    21ea:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bdeb3654+0x2dbf4c3>
    21ee:	aebfe0ef          	jal	ra,cd8 <__hidden___udivsi3>
    21f2:	147d                	addi	s0,s0,-1
    21f4:	8d61                	and	a0,a0,s0
    21f6:	0542                	slli	a0,a0,0x10
    21f8:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    21fa:	67a1                	lui	a5,0x8
    21fc:	8d5d                	or	a0,a0,a5
    21fe:	bb11                	j	1f12 <main+0x10c>
		if (i2c_ping(0x3C) == I2C_OK) {
    2200:	03c00513          	li	a0,60
    2204:	e8dfe0ef          	jal	ra,1090 <i2c_ping>
    2208:	0e051063          	bnez	a0,22e8 <main+0x4e2>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    220c:	6411                	lui	s0,0x4
    220e:	c4018023          	sb	zero,-960(gp) # 2000003c <ssd1306_buffer>
    2212:	cf040413          	addi	s0,s0,-784 # 3cf0 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    2216:	00044503          	lbu	a0,0(s0)
    221a:	0ff00793          	li	a5,255
    221e:	02f51e63          	bne	a0,a5,225a <main+0x454>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    2222:	02100513          	li	a0,33
    2226:	842ff0ef          	jal	ra,1268 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    222a:	4501                	li	a0,0
    222c:	83cff0ef          	jal	ra,1268 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    2230:	07f00513          	li	a0,127
    2234:	834ff0ef          	jal	ra,1268 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    2238:	02200513          	li	a0,34
    223c:	82cff0ef          	jal	ra,1268 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    2240:	4501                	li	a0,0
    2242:	826ff0ef          	jal	ra,1268 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    2246:	451d                	li	a0,7
    2248:	820ff0ef          	jal	ra,1268 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    224c:	02000593          	li	a1,32
    2250:	c4018513          	addi	a0,gp,-960 # 2000003c <ssd1306_buffer>
    2254:	a3bff0ef          	jal	ra,1c8e <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    2258:	a029                	j	2262 <main+0x45c>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    225a:	0405                	addi	s0,s0,1
    225c:	80cff0ef          	jal	ra,1268 <ssd1306_cmd>
    2260:	d95d                	beqz	a0,2216 <main+0x410>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    2262:	40000613          	li	a2,1024
    2266:	4581                	li	a1,0
    2268:	c4818513          	addi	a0,gp,-952 # 20000044 <frame_buffer>
    226c:	9e1ff0ef          	jal	ra,1c4c <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    2270:	02100513          	li	a0,33
    2274:	ff5fe0ef          	jal	ra,1268 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    2278:	4501                	li	a0,0
    227a:	feffe0ef          	jal	ra,1268 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    227e:	07f00513          	li	a0,127
    2282:	fe7fe0ef          	jal	ra,1268 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    2286:	02200513          	li	a0,34
    228a:	fdffe0ef          	jal	ra,1268 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    228e:	4501                	li	a0,0
    2290:	fd9fe0ef          	jal	ra,1268 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    2294:	451d                	li	a0,7
    2296:	fd3fe0ef          	jal	ra,1268 <ssd1306_cmd>
    229a:	4401                	li	s0,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    229c:	c4818793          	addi	a5,gp,-952 # 20000044 <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    22a0:	4501                	li	a0,0
    22a2:	97a2                	add	a5,a5,s0
    22a4:	02050713          	addi	a4,a0,32
    22a8:	01071593          	slli	a1,a4,0x10
    22ac:	81c1                	srli	a1,a1,0x10
    22ae:	8d89                	sub	a1,a1,a0
    22b0:	953e                	add	a0,a0,a5
    22b2:	ca3a                	sw	a4,20(sp)
    22b4:	c63e                	sw	a5,12(sp)
    22b6:	9d9ff0ef          	jal	ra,1c8e <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    22ba:	4752                	lw	a4,20(sp)
    22bc:	47b2                	lw	a5,12(sp)
    22be:	853a                	mv	a0,a4
    22c0:	08000713          	li	a4,128
    22c4:	fee510e3          	bne	a0,a4,22a4 <main+0x49e>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    22c8:	08040413          	addi	s0,s0,128
    22cc:	40000793          	li	a5,1024
    22d0:	fcf416e3          	bne	s0,a5,229c <main+0x496>
			sprintf(str_output, "Hello Bee2!");
    22d4:	658d                	lui	a1,0x3
    22d6:	4b458593          	addi	a1,a1,1204 # 34b4 <__clz_tab+0x120>
    22da:	04818513          	addi	a0,gp,72 # 20000444 <str_output>
    22de:	981ff0ef          	jal	ra,1c5e <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    22e2:	4501                	li	a0,0
    22e4:	9dbff0ef          	jal	ra,1cbe <ssd1306_print_str_at.constprop.0>
		printf("----Scanning I2C Bus for Devices---\n");
    22e8:	650d                	lui	a0,0x3
    22ea:	4c050513          	addi	a0,a0,1216 # 34c0 <__clz_tab+0x12c>
    22ee:	a45ff0ef          	jal	ra,1d32 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    22f2:	4401                	li	s0,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    22f4:	8522                	mv	a0,s0
    22f6:	d9bfe0ef          	jal	ra,1090 <i2c_ping>
    22fa:	e501                	bnez	a0,2302 <main+0x4fc>
    22fc:	8522                	mv	a0,s0
    22fe:	a61ff0ef          	jal	ra,1d5e <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    2302:	0405                	addi	s0,s0,1
    2304:	0ff47413          	andi	s0,s0,255
    2308:	07f00793          	li	a5,127
    230c:	fef414e3          	bne	s0,a5,22f4 <main+0x4ee>
		printf("----Done Scanning----\n\n");
    2310:	650d                	lui	a0,0x3
    2312:	4e450513          	addi	a0,a0,1252 # 34e4 <__clz_tab+0x150>
    2316:	b10d                	j	1f38 <main+0x132>
	Delay_Ms(100);
    2318:	00494537          	lui	a0,0x494
    231c:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c6c3>
    2320:	b9ffe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0xFE}, 1);		// Soft reset
    2324:	57f9                	li	a5,-2
    2326:	4605                	li	a2,1
    2328:	102c                	addi	a1,sp,40
    232a:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    232e:	02f10423          	sb	a5,40(sp)
    2332:	df7fe0ef          	jal	ra,1128 <i2c_write_raw>
    2336:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2338:	650d                	lui	a0,0x3
    233a:	50c50513          	addi	a0,a0,1292 # 350c <__clz_tab+0x178>
    233e:	893ff0ef          	jal	ra,1bd0 <printf>
	Delay_Ms(200);
    2342:	009287b7          	lui	a5,0x928
    2346:	c0078513          	addi	a0,a5,-1024 # 927c00 <lib_i2c.c.bdeb3654+0x9204c3>
    234a:	b75fe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0xF3}, 1);
    234e:	4605                	li	a2,1
    2350:	57cd                	li	a5,-13
    2352:	106c                	addi	a1,sp,44
    2354:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2358:	02f10623          	sb	a5,44(sp)
    235c:	dcdfe0ef          	jal	ra,1128 <i2c_write_raw>
    2360:	85aa                	mv	a1,a0
	printf("Error3: %d\n", ret);
    2362:	650d                	lui	a0,0x3
    2364:	51850513          	addi	a0,a0,1304 # 3518 <__clz_tab+0x184>
    2368:	869ff0ef          	jal	ra,1bd0 <printf>
	Delay_Ms(200);
    236c:	009287b7          	lui	a5,0x928
    2370:	c0078513          	addi	a0,a5,-1024 # 927c00 <lib_i2c.c.bdeb3654+0x9204c3>
    2374:	b4bfe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_sensor, buff, 3);				// Read Temperature
    2378:	450d                	li	a0,3
    237a:	b22ff0ef          	jal	ra,169c <i2c_read_raw.constprop.0>
	printf("Error4: %d\n", ret);
    237e:	630d                	lui	t1,0x3
	ret = i2c_read_raw(&dev_sensor, buff, 3);				// Read Temperature
    2380:	85aa                	mv	a1,a0
	printf("Error4: %d\n", ret);
    2382:	52430513          	addi	a0,t1,1316 # 3524 <__clz_tab+0x190>
    2386:	84bff0ef          	jal	ra,1bd0 <printf>
	uint16_t temp = (temp_raw * 17572) >> 16;					// >> 16 is equivalent to / 65536
    238a:	c3818693          	addi	a3,gp,-968 # 20000034 <buff>
    238e:	0006d783          	lhu	a5,0(a3)
    2392:	6591                	lui	a1,0x4
    2394:	4a458593          	addi	a1,a1,1188 # 44a4 <ch32fun.c.6a6b5a13+0x1d7>
    2398:	00879513          	slli	a0,a5,0x8
    239c:	07c2                	slli	a5,a5,0x10
    239e:	83c1                	srli	a5,a5,0x10
    23a0:	83a1                	srli	a5,a5,0x8
    23a2:	8d5d                	or	a0,a0,a5
    23a4:	0542                	slli	a0,a0,0x10
    23a6:	8141                	srli	a0,a0,0x10
    23a8:	911fe0ef          	jal	ra,cb8 <__mulsi3>
	Delay_Ms(200);
    23ac:	009287b7          	lui	a5,0x928
	uint16_t temp = (temp_raw * 17572) >> 16;					// >> 16 is equivalent to / 65536
    23b0:	c62a                	sw	a0,12(sp)
	Delay_Ms(200);
    23b2:	c0078513          	addi	a0,a5,-1024 # 927c00 <lib_i2c.c.bdeb3654+0x9204c3>
    23b6:	b09fe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0xF5}, 1);
    23ba:	4605                	li	a2,1
    23bc:	57d5                	li	a5,-11
    23be:	180c                	addi	a1,sp,48
    23c0:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    23c4:	02f10823          	sb	a5,48(sp)
    23c8:	d61fe0ef          	jal	ra,1128 <i2c_write_raw>
	printf("Error4: %d\n", ret);
    23cc:	630d                	lui	t1,0x3
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0xF5}, 1);
    23ce:	85aa                	mv	a1,a0
	printf("Error4: %d\n", ret);
    23d0:	52430513          	addi	a0,t1,1316 # 3524 <__clz_tab+0x190>
    23d4:	ffcff0ef          	jal	ra,1bd0 <printf>
	Delay_Ms(200);
    23d8:	009287b7          	lui	a5,0x928
    23dc:	c0078513          	addi	a0,a5,-1024 # 927c00 <lib_i2c.c.bdeb3654+0x9204c3>
    23e0:	adffe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_sensor, buff, 3);				// Read Humidity
    23e4:	450d                	li	a0,3
    23e6:	ab6ff0ef          	jal	ra,169c <i2c_read_raw.constprop.0>
    23ea:	85aa                	mv	a1,a0
	printf("Error5: %d\n", ret);
    23ec:	650d                	lui	a0,0x3
    23ee:	53050513          	addi	a0,a0,1328 # 3530 <__clz_tab+0x19c>
    23f2:	fdeff0ef          	jal	ra,1bd0 <printf>
	uint16_t hum = (hum_raw * 125) >> 16;							// >> 16 is equivalent to / 65536
    23f6:	c3818693          	addi	a3,gp,-968 # 20000034 <buff>
    23fa:	0006d783          	lhu	a5,0(a3)
	printf("HTU21 Temp*100: %d, Hum: %d\n", temp, hum);
    23fe:	4732                	lw	a4,12(sp)
    2400:	650d                	lui	a0,0x3
	uint16_t hum = (hum_raw * 125) >> 16;							// >> 16 is equivalent to / 65536
    2402:	00879613          	slli	a2,a5,0x8
    2406:	07c2                	slli	a5,a5,0x10
    2408:	83c1                	srli	a5,a5,0x10
    240a:	83a1                	srli	a5,a5,0x8
    240c:	8e5d                	or	a2,a2,a5
    240e:	01061793          	slli	a5,a2,0x10
    2412:	83c1                	srli	a5,a5,0x10
    2414:	00579613          	slli	a2,a5,0x5
    2418:	8e1d                	sub	a2,a2,a5
    241a:	060a                	slli	a2,a2,0x2
    241c:	963e                	add	a2,a2,a5
	printf("HTU21 Temp*100: %d, Hum: %d\n", temp, hum);
    241e:	8241                	srli	a2,a2,0x10
    2420:	01075593          	srli	a1,a4,0x10
    2424:	53c50513          	addi	a0,a0,1340 # 353c <__clz_tab+0x1a8>
    2428:	fa8ff0ef          	jal	ra,1bd0 <printf>
    242c:	be3d                	j	1f6a <main+0x164>
	ret = i2c_read_reg(&dev_sensor, 0x71, buff, 1);
    242e:	4605                	li	a2,1
    2430:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    2434:	07100513          	li	a0,113
    2438:	872ff0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	buff[0] = buff[0] & 0x18;
    243c:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    2440:	00074683          	lbu	a3,0(a4)
	ret = i2c_read_reg(&dev_sensor, 0x71, buff, 1);
    2444:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2446:	650d                	lui	a0,0x3
	buff[0] = buff[0] & 0x18;
    2448:	8ae1                	andi	a3,a3,24
	printf("Error0: %d\n", ret);
    244a:	50c50513          	addi	a0,a0,1292 # 350c <__clz_tab+0x178>
	buff[0] = buff[0] & 0x18;
    244e:	00d70023          	sb	a3,0(a4)
	printf("Error0: %d\n", ret);
    2452:	f7eff0ef          	jal	ra,1bd0 <printf>
	printf("AHT21 Read reg 0x71: %02X\n", buff[0]);		// expect 0x18
    2456:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    245a:	00074583          	lbu	a1,0(a4)
    245e:	650d                	lui	a0,0x3
    2460:	56c50513          	addi	a0,a0,1388 # 356c <__clz_tab+0x1d8>
    2464:	f6cff0ef          	jal	ra,1bd0 <printf>
	buff[0] = 0xAC;
    2468:	668d                	lui	a3,0x3
    246a:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    246e:	3ac68693          	addi	a3,a3,940 # 33ac <__clz_tab+0x18>
    2472:	00d71023          	sh	a3,0(a4)
	buff[2] = 0x00;
    2476:	00070123          	sb	zero,2(a4)
	ret = i2c_write_raw(&dev_sensor, buff, 3);
    247a:	460d                	li	a2,3
    247c:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    2480:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2484:	ca5fe0ef          	jal	ra,1128 <i2c_write_raw>
    2488:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    248a:	650d                	lui	a0,0x3
    248c:	58850513          	addi	a0,a0,1416 # 3588 <__clz_tab+0x1f4>
    2490:	f40ff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_read_raw(&dev_sensor, buff, 6);		// Read sensor
    2494:	4519                	li	a0,6
    2496:	a06ff0ef          	jal	ra,169c <i2c_read_raw.constprop.0>
    249a:	85aa                	mv	a1,a0
	printf("Error2: %d\n", ret);
    249c:	650d                	lui	a0,0x3
    249e:	59450513          	addi	a0,a0,1428 # 3594 <__clz_tab+0x200>
    24a2:	f2eff0ef          	jal	ra,1bd0 <printf>
	uint32_t hum = (buff[1] << 12) | (buff[2] << 4) | (buff[3] >> 4);
    24a6:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    24aa:	87ba                	mv	a5,a4
    24ac:	00174583          	lbu	a1,1(a4)
    24b0:	00274703          	lbu	a4,2(a4)
	printf("Humidity: %lu\n", hum);
    24b4:	650d                	lui	a0,0x3
	uint32_t hum = (buff[1] << 12) | (buff[2] << 4) | (buff[3] >> 4);
    24b6:	05b2                	slli	a1,a1,0xc
    24b8:	0712                	slli	a4,a4,0x4
    24ba:	8dd9                	or	a1,a1,a4
    24bc:	0037c703          	lbu	a4,3(a5)
	printf("Humidity: %lu\n", hum);
    24c0:	5a050513          	addi	a0,a0,1440 # 35a0 <__clz_tab+0x20c>
	uint32_t hum = (buff[1] << 12) | (buff[2] << 4) | (buff[3] >> 4);
    24c4:	8311                	srli	a4,a4,0x4
    24c6:	8dd9                	or	a1,a1,a4
	hum = (hum * 100) / 0x100000;
    24c8:	00159713          	slli	a4,a1,0x1
    24cc:	972e                	add	a4,a4,a1
    24ce:	070e                	slli	a4,a4,0x3
    24d0:	95ba                	add	a1,a1,a4
	printf("Humidity: %lu\n", hum);
    24d2:	81c9                	srli	a1,a1,0x12
    24d4:	efcff0ef          	jal	ra,1bd0 <printf>
	uint32_t temp = ((buff[3] & 0xF) << 16) | (buff[4] << 8) | (buff[5]);
    24d8:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    24dc:	0037c583          	lbu	a1,3(a5)
    24e0:	0047d783          	lhu	a5,4(a5)
    24e4:	000f0737          	lui	a4,0xf0
    24e8:	05c2                	slli	a1,a1,0x10
    24ea:	8df9                	and	a1,a1,a4
    24ec:	00879713          	slli	a4,a5,0x8
    24f0:	07c2                	slli	a5,a5,0x10
    24f2:	83c1                	srli	a5,a5,0x10
    24f4:	83a1                	srli	a5,a5,0x8
    24f6:	8fd9                	or	a5,a5,a4
    24f8:	07c2                	slli	a5,a5,0x10
    24fa:	83c1                	srli	a5,a5,0x10
    24fc:	8ddd                	or	a1,a1,a5
	temp = (temp * 200) / 0x100000;
    24fe:	00159793          	slli	a5,a1,0x1
    2502:	97ae                	add	a5,a5,a1
    2504:	078e                	slli	a5,a5,0x3
    2506:	95be                	add	a1,a1,a5
	printf("Temperature: %lu\n", temp);
    2508:	650d                	lui	a0,0x3
    250a:	81c5                	srli	a1,a1,0x11
    250c:	5b050513          	addi	a0,a0,1456 # 35b0 <__clz_tab+0x21c>
    2510:	ec0ff0ef          	jal	ra,1bd0 <printf>
    2514:	bc8d                	j	1f86 <main+0x180>
	ret = i2c_read_reg(&dev_sensor, 0xD0, buff, 1);
    2516:	4605                	li	a2,1
    2518:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    251c:	0d000513          	li	a0,208
    2520:	f8bfe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
    2524:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2526:	650d                	lui	a0,0x3
    2528:	50c50513          	addi	a0,a0,1292 # 350c <__clz_tab+0x178>
    252c:	ea4ff0ef          	jal	ra,1bd0 <printf>
	printf("BMP280 Read reg 0xD0: %02X\n", buff[0]);		// expect 0x58
    2530:	c3818693          	addi	a3,gp,-968 # 20000034 <buff>
    2534:	0006c583          	lbu	a1,0(a3)
    2538:	650d                	lui	a0,0x3
    253a:	5d850513          	addi	a0,a0,1496 # 35d8 <__clz_tab+0x244>
    253e:	e92ff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_read_reg(&dev_sensor, 0x88, buff, 2);
    2542:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    2546:	4609                	li	a2,2
    2548:	08800513          	li	a0,136
    254c:	f5ffe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	bmp280_calib.dig_T1 =  (int16_t)(buff[1] << 8) | buff[0];
    2550:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    2554:	00079783          	lh	a5,0(a5)
	ret = i2c_read_reg(&dev_sensor, 0x8A, buff, 2);
    2558:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    255c:	4609                	li	a2,2
    255e:	08a00513          	li	a0,138
	bmp280_calib.dig_T1 =  (int16_t)(buff[1] << 8) | buff[0];
    2562:	cc3e                	sw	a5,24(sp)
	ret = i2c_read_reg(&dev_sensor, 0x8A, buff, 2);
    2564:	f47fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	bmp280_calib.dig_T2 =  (int16_t)(buff[1] << 8) | buff[0];
    2568:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    256c:	00071703          	lh	a4,0(a4) # f0000 <lib_i2c.c.bdeb3654+0xe88c3>
	ret = i2c_read_reg(&dev_sensor, 0x8C, buff, 2);
    2570:	4609                	li	a2,2
    2572:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    2576:	08c00513          	li	a0,140
	bmp280_calib.dig_T2 =  (int16_t)(buff[1] << 8) | buff[0];
    257a:	c63a                	sw	a4,12(sp)
	ret = i2c_read_reg(&dev_sensor, 0x8C, buff, 2);
    257c:	f2ffe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	bmp280_calib.dig_T3 =  (int16_t)(buff[1] << 8) | buff[0];
    2580:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
	printf("dig_T1: %lu\n", bmp280_calib.dig_T1);
    2584:	47e2                	lw	a5,24(sp)
	bmp280_calib.dig_T3 =  (int16_t)(buff[1] << 8) | buff[0];
    2586:	00071703          	lh	a4,0(a4)
	printf("dig_T1: %lu\n", bmp280_calib.dig_T1);
    258a:	650d                	lui	a0,0x3
    258c:	85be                	mv	a1,a5
    258e:	5f450513          	addi	a0,a0,1524 # 35f4 <__clz_tab+0x260>
	bmp280_calib.dig_T3 =  (int16_t)(buff[1] << 8) | buff[0];
    2592:	ca3a                	sw	a4,20(sp)
	printf("dig_T1: %lu\n", bmp280_calib.dig_T1);
    2594:	e3cff0ef          	jal	ra,1bd0 <printf>
	printf("dig_T2: %lu\n", bmp280_calib.dig_T2);
    2598:	45b2                	lw	a1,12(sp)
    259a:	650d                	lui	a0,0x3
    259c:	60450513          	addi	a0,a0,1540 # 3604 <__clz_tab+0x270>
    25a0:	e30ff0ef          	jal	ra,1bd0 <printf>
	printf("dig_T3: %ld\n", bmp280_calib.dig_T3);
    25a4:	45d2                	lw	a1,20(sp)
    25a6:	650d                	lui	a0,0x3
    25a8:	61450513          	addi	a0,a0,1556 # 3614 <__clz_tab+0x280>
    25ac:	e24ff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_write_reg(&dev_sensor, 0xF4, (uint8_t[]){0x5D}, 1);
    25b0:	05d00713          	li	a4,93
    25b4:	4605                	li	a2,1
    25b6:	180c                	addi	a1,sp,48
    25b8:	0f400513          	li	a0,244
    25bc:	02e10823          	sb	a4,48(sp)
    25c0:	cc9fe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
    25c4:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    25c6:	650d                	lui	a0,0x3
    25c8:	58850513          	addi	a0,a0,1416 # 3588 <__clz_tab+0x1f4>
    25cc:	e04ff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_read_reg(&dev_sensor, 0xF7, buff, 6);			// read sensors
    25d0:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    25d4:	4619                	li	a2,6
    25d6:	0f700513          	li	a0,247
    25da:	ed1fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	uint32_t raw_temp = (uint32_t)(buff[3]*4096 + buff[4]*16 + (buff[5]/16));
    25de:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    25e2:	00374503          	lbu	a0,3(a4)
    25e6:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    25ea:	0047c703          	lbu	a4,4(a5)
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    25ee:	47e2                	lw	a5,24(sp)
	uint32_t raw_temp = (uint32_t)(buff[3]*4096 + buff[4]*16 + (buff[5]/16));
    25f0:	0522                	slli	a0,a0,0x8
    25f2:	953a                	add	a0,a0,a4
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    25f4:	41f7d713          	srai	a4,a5,0x1f
    25f8:	01371693          	slli	a3,a4,0x13
    25fc:	82cd                	srli	a3,a3,0x13
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    25fe:	3ff77713          	andi	a4,a4,1023
    2602:	45b2                	lw	a1,12(sp)
	uint32_t raw_temp = (uint32_t)(buff[3]*4096 + buff[4]*16 + (buff[5]/16));
    2604:	0512                	slli	a0,a0,0x4
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    2606:	96be                	add	a3,a3,a5
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    2608:	97ba                	add	a5,a5,a4
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    260a:	01155613          	srli	a2,a0,0x11
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    260e:	87a9                	srai	a5,a5,0xa
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    2610:	86b5                	srai	a3,a3,0xd
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    2612:	8139                	srli	a0,a0,0xe
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    2614:	40d606b3          	sub	a3,a2,a3
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    2618:	8d1d                	sub	a0,a0,a5
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    261a:	cc36                	sw	a3,24(sp)
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    261c:	e9cfe0ef          	jal	ra,cb8 <__mulsi3>
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    2620:	46e2                	lw	a3,24(sp)
	uint32_t var1 = (raw_temp/16384 - bmp280_calib.dig_T1/1024) * bmp280_calib.dig_T2;
    2622:	c62a                	sw	a0,12(sp)
	uint32_t var2 = ((raw_temp/131072 - bmp280_calib.dig_T1/8192) * (raw_temp/131072 - bmp280_calib.dig_T1/8192)) * bmp280_calib.dig_T3;
    2624:	85b6                	mv	a1,a3
    2626:	8536                	mv	a0,a3
    2628:	e90fe0ef          	jal	ra,cb8 <__mulsi3>
    262c:	45d2                	lw	a1,20(sp)
    262e:	e8afe0ef          	jal	ra,cb8 <__mulsi3>
	uint32_t temp = t_fine/5120;
    2632:	47b2                	lw	a5,12(sp)
    2634:	6585                	lui	a1,0x1
    2636:	40058593          	addi	a1,a1,1024 # 1400 <i2c_write_reg.constprop.0+0x178>
    263a:	953e                	add	a0,a0,a5
    263c:	e9cfe0ef          	jal	ra,cd8 <__hidden___udivsi3>
    2640:	85aa                	mv	a1,a0
	printf("Temperature: %lu\n", temp);
    2642:	650d                	lui	a0,0x3
    2644:	5b050513          	addi	a0,a0,1456 # 35b0 <__clz_tab+0x21c>
    2648:	d88ff0ef          	jal	ra,1bd0 <printf>
    264c:	957ff06f          	j	1fa2 <main+0x19c>
	ret = i2c_write_reg(&dev_sensor, 0x02, (uint8_t[]){0x10}, 1);	// Set configuration register
    2650:	47c1                	li	a5,16
    2652:	4605                	li	a2,1
    2654:	106c                	addi	a1,sp,44
    2656:	4509                	li	a0,2
    2658:	02f10623          	sb	a5,44(sp)
    265c:	c2dfe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
    2660:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2662:	650d                	lui	a0,0x3
    2664:	50c50513          	addi	a0,a0,1292 # 350c <__clz_tab+0x178>
    2668:	d68ff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x00}, 1);		// Trigger measurement
    266c:	4605                	li	a2,1
    266e:	180c                	addi	a1,sp,48
    2670:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2674:	02010823          	sb	zero,48(sp)
    2678:	ab1fe0ef          	jal	ra,1128 <i2c_write_raw>
    267c:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    267e:	650d                	lui	a0,0x3
    2680:	58850513          	addi	a0,a0,1416 # 3588 <__clz_tab+0x1f4>
    2684:	d4cff0ef          	jal	ra,1bd0 <printf>
	Delay_Ms(100);											//! Wait for measurement to complete
    2688:	00494537          	lui	a0,0x494
    268c:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c6c3>
    2690:	82ffe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_sensor, buff, 4);				// Read data register
    2694:	4511                	li	a0,4
    2696:	806ff0ef          	jal	ra,169c <i2c_read_raw.constprop.0>
    269a:	85aa                	mv	a1,a0
	printf("Error2: %d\n", ret);
    269c:	650d                	lui	a0,0x3
    269e:	59450513          	addi	a0,a0,1428 # 3594 <__clz_tab+0x200>
    26a2:	d2eff0ef          	jal	ra,1bd0 <printf>
	printf("HDC1080 Read: %02X %02X %02X %02X\n", buff[0], buff[1], buff[2], buff[3]);
    26a6:	c3818313          	addi	t1,gp,-968 # 20000034 <buff>
    26aa:	00234683          	lbu	a3,2(t1)
    26ae:	00134603          	lbu	a2,1(t1)
    26b2:	00334703          	lbu	a4,3(t1)
    26b6:	00034583          	lbu	a1,0(t1)
    26ba:	650d                	lui	a0,0x3
    26bc:	63850513          	addi	a0,a0,1592 # 3638 <__clz_tab+0x2a4>
    26c0:	d10ff0ef          	jal	ra,1bd0 <printf>
	uint32_t hum = (raw_hum * 100 / 65536);
    26c4:	c3818313          	addi	t1,gp,-968 # 20000034 <buff>
    26c8:	00235703          	lhu	a4,2(t1)
	printf("Temperature: %lu\n", temp);
    26cc:	650d                	lui	a0,0x3
    26ce:	5b050513          	addi	a0,a0,1456 # 35b0 <__clz_tab+0x21c>
	uint32_t hum = (raw_hum * 100 / 65536);
    26d2:	00871793          	slli	a5,a4,0x8
    26d6:	0742                	slli	a4,a4,0x10
    26d8:	8341                	srli	a4,a4,0x10
    26da:	8321                	srli	a4,a4,0x8
    26dc:	8fd9                	or	a5,a5,a4
    26de:	01079713          	slli	a4,a5,0x10
    26e2:	8341                	srli	a4,a4,0x10
    26e4:	00171793          	slli	a5,a4,0x1
    26e8:	97ba                	add	a5,a5,a4
    26ea:	078e                	slli	a5,a5,0x3
    26ec:	97ba                	add	a5,a5,a4
	uint32_t temp = (raw_temp * 165 / 65536) - 40;
    26ee:	00035703          	lhu	a4,0(t1)
	uint32_t hum = (raw_hum * 100 / 65536);
    26f2:	83b9                	srli	a5,a5,0xe
    26f4:	c63e                	sw	a5,12(sp)
	uint32_t temp = (raw_temp * 165 / 65536) - 40;
    26f6:	00871593          	slli	a1,a4,0x8
    26fa:	0742                	slli	a4,a4,0x10
    26fc:	8341                	srli	a4,a4,0x10
    26fe:	8321                	srli	a4,a4,0x8
    2700:	8dd9                	or	a1,a1,a4
    2702:	01059713          	slli	a4,a1,0x10
    2706:	8341                	srli	a4,a4,0x10
    2708:	00271593          	slli	a1,a4,0x2
    270c:	95ba                	add	a1,a1,a4
    270e:	00559713          	slli	a4,a1,0x5
    2712:	95ba                	add	a1,a1,a4
    2714:	85c1                	srai	a1,a1,0x10
	printf("Temperature: %lu\n", temp);
    2716:	fd858593          	addi	a1,a1,-40
    271a:	cb6ff0ef          	jal	ra,1bd0 <printf>
	printf("Humidity: %lu\n", hum);
    271e:	47b2                	lw	a5,12(sp)
    2720:	650d                	lui	a0,0x3
    2722:	5a050513          	addi	a0,a0,1440 # 35a0 <__clz_tab+0x20c>
    2726:	85be                	mv	a1,a5
    2728:	ca8ff0ef          	jal	ra,1bd0 <printf>
    272c:	893ff06f          	j	1fbe <main+0x1b8>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0xE3}, 1);
    2730:	4605                	li	a2,1
    2732:	578d                	li	a5,-29
    2734:	180c                	addi	a1,sp,48
    2736:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    273a:	02f10823          	sb	a5,48(sp)
    273e:	9ebfe0ef          	jal	ra,1128 <i2c_write_raw>
	printf("Error0: %d\n", ret);
    2742:	678d                	lui	a5,0x3
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0xE3}, 1);
    2744:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2746:	50c78513          	addi	a0,a5,1292 # 350c <__clz_tab+0x178>
    274a:	c86ff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_read_raw(&dev_sensor, buff, 4);				// Read Temperature and Humidity
    274e:	4511                	li	a0,4
    2750:	f4dfe0ef          	jal	ra,169c <i2c_read_raw.constprop.0>
	printf("Error0: %d\n", ret);
    2754:	678d                	lui	a5,0x3
	ret = i2c_read_raw(&dev_sensor, buff, 4);				// Read Temperature and Humidity
    2756:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2758:	50c78513          	addi	a0,a5,1292 # 350c <__clz_tab+0x178>
    275c:	c74ff0ef          	jal	ra,1bd0 <printf>
	uint32_t temp = ((raw_temp * 17572) >> 16) - 4685;		// >> 16 is equivalent to / 65536
    2760:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    2764:	00075783          	lhu	a5,0(a4)
    2768:	6591                	lui	a1,0x4
    276a:	4a458593          	addi	a1,a1,1188 # 44a4 <ch32fun.c.6a6b5a13+0x1d7>
    276e:	00879513          	slli	a0,a5,0x8
    2772:	07c2                	slli	a5,a5,0x10
    2774:	83c1                	srli	a5,a5,0x10
    2776:	83a1                	srli	a5,a5,0x8
    2778:	8d5d                	or	a0,a0,a5
    277a:	0542                	slli	a0,a0,0x10
    277c:	8141                	srli	a0,a0,0x10
    277e:	d3afe0ef          	jal	ra,cb8 <__mulsi3>
	printf("Temp*100: %lu\n", temp);
    2782:	77fd                	lui	a5,0xfffff
    2784:	db378793          	addi	a5,a5,-589 # ffffedb3 <_eusrstack+0xdfffe5b3>
	uint32_t temp = ((raw_temp * 17572) >> 16) - 4685;		// >> 16 is equivalent to / 65536
    2788:	41055593          	srai	a1,a0,0x10
	printf("Temp*100: %lu\n", temp);
    278c:	650d                	lui	a0,0x3
    278e:	95be                	add	a1,a1,a5
    2790:	67050513          	addi	a0,a0,1648 # 3670 <__clz_tab+0x2dc>
    2794:	c3cff0ef          	jal	ra,1bd0 <printf>
	uint32_t hum = ((raw_hum * 12500) >> 16) - 600;
    2798:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    279c:	00275783          	lhu	a5,2(a4)
    27a0:	658d                	lui	a1,0x3
    27a2:	0d458593          	addi	a1,a1,212 # 30d4 <main+0x12ce>
    27a6:	00879513          	slli	a0,a5,0x8
    27aa:	07c2                	slli	a5,a5,0x10
    27ac:	83c1                	srli	a5,a5,0x10
    27ae:	83a1                	srli	a5,a5,0x8
    27b0:	8d5d                	or	a0,a0,a5
    27b2:	0542                	slli	a0,a0,0x10
    27b4:	8141                	srli	a0,a0,0x10
    27b6:	d02fe0ef          	jal	ra,cb8 <__mulsi3>
    27ba:	41055593          	srai	a1,a0,0x10
	printf("Hum*100: %lu\n", hum);
    27be:	650d                	lui	a0,0x3
    27c0:	da858593          	addi	a1,a1,-600
    27c4:	68050513          	addi	a0,a0,1664 # 3680 <__clz_tab+0x2ec>
    27c8:	c08ff0ef          	jal	ra,1bd0 <printf>
    27cc:	80fff06f          	j	1fda <main+0x1d4>
	ret = i2c_read_reg(&dev_sensor, 0x03, buff, 2);		// Read lux registers
    27d0:	4609                	li	a2,2
    27d2:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    27d6:	450d                	li	a0,3
    27d8:	cd3fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
    27dc:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    27de:	650d                	lui	a0,0x3
    27e0:	50c50513          	addi	a0,a0,1292 # 350c <__clz_tab+0x178>
    27e4:	becff0ef          	jal	ra,1bd0 <printf>
	int exponent = (buff[0] & 0xF0) >> 4;		// Get exponent from first byte
    27e8:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    27ec:	0007c583          	lbu	a1,0(a5)
	int mantissa = ((buff[0] & 0x0F)) << 4 | (buff[1] & 0x0F);	// Get mantissa from both bytes
    27f0:	0017c603          	lbu	a2,1(a5)
	printf("Max44009: %02X %02X\n", buff[0], buff[1]);
    27f4:	650d                	lui	a0,0x3
    27f6:	6a450513          	addi	a0,a0,1700 # 36a4 <__clz_tab+0x310>
    27fa:	ca32                	sw	a2,20(sp)
    27fc:	c62e                	sw	a1,12(sp)
    27fe:	bd2ff0ef          	jal	ra,1bd0 <printf>
	int mantissa = ((buff[0] & 0x0F)) << 4 | (buff[1] & 0x0F);	// Get mantissa from both bytes
    2802:	45b2                	lw	a1,12(sp)
    2804:	4652                	lw	a2,20(sp)
	printf("lux*1000: %lu\n", lux);
    2806:	650d                	lui	a0,0x3
	int mantissa = ((buff[0] & 0x0F)) << 4 | (buff[1] & 0x0F);	// Get mantissa from both bytes
    2808:	00459793          	slli	a5,a1,0x4
    280c:	8a3d                	andi	a2,a2,15
    280e:	0ff7f793          	andi	a5,a5,255
    2812:	8fd1                	or	a5,a5,a2
	int exponent = (buff[0] & 0xF0) >> 4;		// Get exponent from first byte
    2814:	8191                	srli	a1,a1,0x4
	uint16_t lux = (1 << exponent) * mantissa * 45;
    2816:	00b795b3          	sll	a1,a5,a1
    281a:	00159793          	slli	a5,a1,0x1
    281e:	95be                	add	a1,a1,a5
    2820:	00459793          	slli	a5,a1,0x4
    2824:	40b785b3          	sub	a1,a5,a1
	printf("lux*1000: %lu\n", lux);
    2828:	05c2                	slli	a1,a1,0x10
    282a:	81c1                	srli	a1,a1,0x10
    282c:	6bc50513          	addi	a0,a0,1724 # 36bc <__clz_tab+0x328>
    2830:	ba0ff0ef          	jal	ra,1bd0 <printf>
    2834:	fc2ff06f          	j	1ff6 <main+0x1f0>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x00, 0x03}, 2);		// Trigger measurement
    2838:	30000793          	li	a5,768
    283c:	4609                	li	a2,2
    283e:	180c                	addi	a1,sp,48
    2840:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2844:	02f11823          	sh	a5,48(sp)
    2848:	8e1fe0ef          	jal	ra,1128 <i2c_write_raw>
    284c:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    284e:	650d                	lui	a0,0x3
    2850:	50c50513          	addi	a0,a0,1292 # 350c <__clz_tab+0x178>
    2854:	b7cff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_read_reg(&dev_sensor, 0x0C, buff, 4);		// Read data registers
    2858:	4611                	li	a2,4
    285a:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    285e:	4531                	li	a0,12
    2860:	c4bfe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
    2864:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2866:	650d                	lui	a0,0x3
    2868:	58850513          	addi	a0,a0,1416 # 3588 <__clz_tab+0x1f4>
    286c:	b64ff0ef          	jal	ra,1bd0 <printf>
	uint8_t high_byte = buff[3] & 0x00111111;		// Get high byte of lux
    2870:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
	uint16_t lux = (buff[1] << 8) + buff[0];
    2874:	00174583          	lbu	a1,1(a4)
	uint8_t high_byte = buff[3] & 0x00111111;		// Get high byte of lux
    2878:	00374783          	lbu	a5,3(a4)
	uint8_t low_byte = buff[2] & 0b00001111;		// Get low byte of lux
    287c:	00274603          	lbu	a2,2(a4)
	uint16_t lux = (buff[1] << 8) + buff[0];
    2880:	00074703          	lbu	a4,0(a4)
    2884:	05a2                	slli	a1,a1,0x8
	uint8_t high_byte = buff[3] & 0x00111111;		// Get high byte of lux
    2886:	8bc5                	andi	a5,a5,17
	uint16_t lux = (buff[1] << 8) + buff[0];
    2888:	95ba                	add	a1,a1,a4
	uint16_t proximity = (high_byte << 4) + low_byte;
    288a:	0792                	slli	a5,a5,0x4
	uint8_t low_byte = buff[2] & 0b00001111;		// Get low byte of lux
    288c:	8a3d                	andi	a2,a2,15
	printf("lux: %d, proximity: %d\n", lux, proximity);
    288e:	05c2                	slli	a1,a1,0x10
    2890:	650d                	lui	a0,0x3
    2892:	963e                	add	a2,a2,a5
    2894:	81c1                	srli	a1,a1,0x10
    2896:	6e050513          	addi	a0,a0,1760 # 36e0 <__clz_tab+0x34c>
    289a:	b36ff0ef          	jal	ra,1bd0 <printf>
    289e:	f70ff06f          	j	200e <main+0x208>
	ret = i2c_read_reg(&dev_sensor, 0xC0, &status, 1);		// Read system status register
    28a2:	4605                	li	a2,1
    28a4:	180c                	addi	a1,sp,48
    28a6:	0c000513          	li	a0,192
    28aa:	c01fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("Error0: %d\n", ret);
    28ae:	630d                	lui	t1,0x3
	ret = i2c_read_reg(&dev_sensor, 0xC0, &status, 1);		// Read system status register
    28b0:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    28b2:	50c30513          	addi	a0,t1,1292 # 350c <__clz_tab+0x178>
    28b6:	b1aff0ef          	jal	ra,1bd0 <printf>
	printf("status: %02X\n", status);						// expect 0xEE
    28ba:	03014583          	lbu	a1,48(sp)
    28be:	650d                	lui	a0,0x3
    28c0:	70c50513          	addi	a0,a0,1804 # 370c <__clz_tab+0x378>
    28c4:	b0cff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_write_reg(&dev_sensor, 0x00, (uint8_t[]){0x00}, 1);
    28c8:	106c                	addi	a1,sp,44
    28ca:	4605                	li	a2,1
    28cc:	4501                	li	a0,0
    28ce:	02010623          	sb	zero,44(sp)
    28d2:	9b7fe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
	Delay_Ms(100);											// Wait for measurement to complete
    28d6:	004946b7          	lui	a3,0x494
    28da:	e0068513          	addi	a0,a3,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c6c3>
    28de:	de0fe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_reg(&dev_sensor, 0x13, buff, 1);
    28e2:	4605                	li	a2,1
    28e4:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    28e8:	454d                	li	a0,19
    28ea:	bc1fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("Error0: %d\n", ret);
    28ee:	630d                	lui	t1,0x3
	ret = i2c_read_reg(&dev_sensor, 0x13, buff, 1);
    28f0:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    28f2:	50c30513          	addi	a0,t1,1292 # 350c <__clz_tab+0x178>
    28f6:	adaff0ef          	jal	ra,1bd0 <printf>
	printf("VL53L0X Read reg 0x13: %02X\n", buff[0]);
    28fa:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    28fe:	00074583          	lbu	a1,0(a4)
    2902:	650d                	lui	a0,0x3
    2904:	71c50513          	addi	a0,a0,1820 # 371c <__clz_tab+0x388>
    2908:	ac8ff0ef          	jal	ra,1bd0 <printf>
	Delay_Ms(100);	
    290c:	004946b7          	lui	a3,0x494
    2910:	e0068513          	addi	a0,a3,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c6c3>
    2914:	daafe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_reg(&dev_sensor, 0x14 + 10, buff, 2);				// Read distance register
    2918:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    291c:	4609                	li	a2,2
    291e:	4579                	li	a0,30
    2920:	b8bfe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
    2924:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2926:	650d                	lui	a0,0x3
    2928:	58850513          	addi	a0,a0,1416 # 3588 <__clz_tab+0x1f4>
    292c:	aa4ff0ef          	jal	ra,1bd0 <printf>
	printf("VL53L0X Read: %02X %02X\n", buff[0], buff[1]);
    2930:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    2934:	00074583          	lbu	a1,0(a4)
    2938:	00174603          	lbu	a2,1(a4)
    293c:	650d                	lui	a0,0x3
    293e:	73c50513          	addi	a0,a0,1852 # 373c <__clz_tab+0x3a8>
    2942:	a8eff0ef          	jal	ra,1bd0 <printf>
	uint16_t distance = (buff[1] << 8) + buff[0];
    2946:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    294a:	0017c583          	lbu	a1,1(a5)
    294e:	0007c783          	lbu	a5,0(a5)
	printf("distance: %d\n", distance);
    2952:	650d                	lui	a0,0x3
	uint16_t distance = (buff[1] << 8) + buff[0];
    2954:	05a2                	slli	a1,a1,0x8
    2956:	95be                	add	a1,a1,a5
	printf("distance: %d\n", distance);
    2958:	05c2                	slli	a1,a1,0x10
    295a:	81c1                	srli	a1,a1,0x10
    295c:	75850513          	addi	a0,a0,1880 # 3758 <__clz_tab+0x3c4>
    2960:	a70ff0ef          	jal	ra,1bd0 <printf>
    2964:	ec6ff06f          	j	202a <main+0x224>
	ret = i2c_read_reg(&dev_sensor, 0x00, buff, 2);		// Read ENS160 ID
    2968:	4609                	li	a2,2
    296a:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    296e:	b3dfe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("ENS160 ID: %04X\n", ens160_id);
    2972:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    2976:	00075583          	lhu	a1,0(a4)
    297a:	650d                	lui	a0,0x3
    297c:	77c50513          	addi	a0,a0,1916 # 377c <__clz_tab+0x3e8>
    2980:	a50ff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_write_reg(&dev_sensor, 0x10, (uint8_t[]){0x02}, 1);		// set Mode
    2984:	4709                	li	a4,2
    2986:	180c                	addi	a1,sp,48
    2988:	4605                	li	a2,1
    298a:	4541                	li	a0,16
    298c:	02e10823          	sb	a4,48(sp)
    2990:	8f9fe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
	ret = i2c_read_reg(&dev_sensor, 0x21, buff, 5);		
    2994:	4615                	li	a2,5
    2996:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    299a:	02100513          	li	a0,33
    299e:	b0dfe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("ENS160 AQI: %d\n", buff[0]);
    29a2:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    29a6:	00074583          	lbu	a1,0(a4)
    29aa:	650d                	lui	a0,0x3
    29ac:	79050513          	addi	a0,a0,1936 # 3790 <__clz_tab+0x3fc>
    29b0:	a20ff0ef          	jal	ra,1bd0 <printf>
	printf("ENS160 TVOC: %d\n", tvoc);
    29b4:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    29b8:	00274783          	lbu	a5,2(a4)
    29bc:	00174583          	lbu	a1,1(a4)
    29c0:	650d                	lui	a0,0x3
    29c2:	07a2                	slli	a5,a5,0x8
    29c4:	8ddd                	or	a1,a1,a5
    29c6:	7a050513          	addi	a0,a0,1952 # 37a0 <__clz_tab+0x40c>
    29ca:	a06ff0ef          	jal	ra,1bd0 <printf>
	printf("ENS160 eCO2: %d\n", eco2);
    29ce:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    29d2:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    29d6:	0047c783          	lbu	a5,4(a5)
    29da:	00374583          	lbu	a1,3(a4)
    29de:	650d                	lui	a0,0x3
    29e0:	07a2                	slli	a5,a5,0x8
    29e2:	8ddd                	or	a1,a1,a5
    29e4:	7b450513          	addi	a0,a0,1972 # 37b4 <__clz_tab+0x420>
    29e8:	9e8ff0ef          	jal	ra,1bd0 <printf>
    29ec:	e5aff06f          	j	2046 <main+0x240>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x36, 0x82}, 2);
    29f0:	77e1                	lui	a5,0xffff8
    29f2:	23678793          	addi	a5,a5,566 # ffff8236 <_eusrstack+0xdfff7a36>
    29f6:	4609                	li	a2,2
    29f8:	104c                	addi	a1,sp,36
    29fa:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    29fe:	02f11223          	sh	a5,36(sp)
    2a02:	f26fe0ef          	jal	ra,1128 <i2c_write_raw>
	printf("Error0: %d\n", ret);					// Initialize SGP30
    2a06:	630d                	lui	t1,0x3
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x36, 0x82}, 2);
    2a08:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);					// Initialize SGP30
    2a0a:	50c30513          	addi	a0,t1,1292 # 350c <__clz_tab+0x178>
    2a0e:	9c2ff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_read_raw(&dev_sensor, buff, 3);		// Read ID
    2a12:	450d                	li	a0,3
    2a14:	c89fe0ef          	jal	ra,169c <i2c_read_raw.constprop.0>
	printf("Error1: %d\n", ret);
    2a18:	668d                	lui	a3,0x3
	ret = i2c_read_raw(&dev_sensor, buff, 3);		// Read ID
    2a1a:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2a1c:	58868513          	addi	a0,a3,1416 # 3588 <__clz_tab+0x1f4>
    2a20:	9b0ff0ef          	jal	ra,1bd0 <printf>
	uint32_t id = (buff[0] << 16) | (buff[1] << 8) | buff[2];		// Get ID	
    2a24:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    2a28:	0007c703          	lbu	a4,0(a5)
    2a2c:	0017c583          	lbu	a1,1(a5)
	printf("SGP30 ID: %04X\n", id);
    2a30:	650d                	lui	a0,0x3
	uint32_t id = (buff[0] << 16) | (buff[1] << 8) | buff[2];		// Get ID	
    2a32:	0742                	slli	a4,a4,0x10
    2a34:	05a2                	slli	a1,a1,0x8
    2a36:	8f4d                	or	a4,a4,a1
    2a38:	0027c583          	lbu	a1,2(a5)
	printf("SGP30 ID: %04X\n", id);
    2a3c:	7d850513          	addi	a0,a0,2008 # 37d8 <__clz_tab+0x444>
    2a40:	8dd9                	or	a1,a1,a4
    2a42:	98eff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x20, 0x03}, 2);
    2a46:	32000713          	li	a4,800
    2a4a:	4609                	li	a2,2
    2a4c:	102c                	addi	a1,sp,40
    2a4e:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2a52:	02e11423          	sh	a4,40(sp)
    2a56:	ed2fe0ef          	jal	ra,1128 <i2c_write_raw>
	printf("Error2: %d\n", ret);		// Initialize SGP30	
    2a5a:	638d                	lui	t2,0x3
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x20, 0x03}, 2);
    2a5c:	85aa                	mv	a1,a0
	printf("Error2: %d\n", ret);		// Initialize SGP30	
    2a5e:	59438513          	addi	a0,t2,1428 # 3594 <__clz_tab+0x200>
    2a62:	96eff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x20, 0x08}, 2);
    2a66:	6705                	lui	a4,0x1
    2a68:	82070713          	addi	a4,a4,-2016 # 820 <__muldf3+0x15e>
    2a6c:	4609                	li	a2,2
    2a6e:	106c                	addi	a1,sp,44
    2a70:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2a74:	02e11623          	sh	a4,44(sp)
    2a78:	eb0fe0ef          	jal	ra,1128 <i2c_write_raw>
	printf("Error0: %d\n", ret);		// Start measurement
    2a7c:	630d                	lui	t1,0x3
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x20, 0x08}, 2);
    2a7e:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);		// Start measurement
    2a80:	50c30513          	addi	a0,t1,1292 # 350c <__clz_tab+0x178>
    2a84:	94cff0ef          	jal	ra,1bd0 <printf>
	Delay_Ms(100);		// Wait for measurement
    2a88:	004942b7          	lui	t0,0x494
    2a8c:	e0028513          	addi	a0,t0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c6c3>
    2a90:	c2efe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_sensor, buff, 6);		// Read sensor data
    2a94:	4519                	li	a0,6
    2a96:	c07fe0ef          	jal	ra,169c <i2c_read_raw.constprop.0>
	printf("Error1: %d\n", ret);
    2a9a:	668d                	lui	a3,0x3
	ret = i2c_read_raw(&dev_sensor, buff, 6);		// Read sensor data
    2a9c:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2a9e:	58868513          	addi	a0,a3,1416 # 3588 <__clz_tab+0x1f4>
    2aa2:	92eff0ef          	jal	ra,1bd0 <printf>
	uint16_t co2 = (buff[0] << 8) | buff[1];		// CO2 in ppm
    2aa6:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    2aaa:	87ba                	mv	a5,a4
    2aac:	00075703          	lhu	a4,0(a4)
    2ab0:	0037c303          	lbu	t1,3(a5)
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x20, 0x50}, 2);
    2ab4:	4609                	li	a2,2
    2ab6:	00871693          	slli	a3,a4,0x8
    2aba:	0742                	slli	a4,a4,0x10
    2abc:	8341                	srli	a4,a4,0x10
    2abe:	8321                	srli	a4,a4,0x8
    2ac0:	8f55                	or	a4,a4,a3
    2ac2:	01071693          	slli	a3,a4,0x10
    2ac6:	0047c703          	lbu	a4,4(a5)
    2aca:	82c1                	srli	a3,a3,0x10
    2acc:	180c                	addi	a1,sp,48
    2ace:	0722                	slli	a4,a4,0x8
    2ad0:	00676733          	or	a4,a4,t1
    2ad4:	00871313          	slli	t1,a4,0x8
    2ad8:	8321                	srli	a4,a4,0x8
    2ada:	00e36733          	or	a4,t1,a4
    2ade:	01071313          	slli	t1,a4,0x10
    2ae2:	6715                	lui	a4,0x5
    2ae4:	01035313          	srli	t1,t1,0x10
    2ae8:	02070713          	addi	a4,a4,32 # 5020 <ch32fun.c.6a6b5a13+0xd53>
    2aec:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2af0:	ce36                	sw	a3,28(sp)
	uint16_t tvoc = (buff[3] << 8) | buff[4];		// TVOC in ppb
    2af2:	cc1a                	sw	t1,24(sp)
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x20, 0x50}, 2);
    2af4:	02e11823          	sh	a4,48(sp)
    2af8:	e30fe0ef          	jal	ra,1128 <i2c_write_raw>
	printf("Error2: %d\n", ret);		// Set baseline
    2afc:	638d                	lui	t2,0x3
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x20, 0x50}, 2);
    2afe:	85aa                	mv	a1,a0
	printf("Error2: %d\n", ret);		// Set baseline
    2b00:	59438513          	addi	a0,t2,1428 # 3594 <__clz_tab+0x200>
    2b04:	8ccff0ef          	jal	ra,1bd0 <printf>
	Delay_Ms(100);		// Wait for baseline to be
    2b08:	004942b7          	lui	t0,0x494
    2b0c:	e0028513          	addi	a0,t0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c6c3>
    2b10:	baefe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_sensor, buff, 6);		// Read baseline data
    2b14:	4519                	li	a0,6
    2b16:	b87fe0ef          	jal	ra,169c <i2c_read_raw.constprop.0>
    2b1a:	85aa                	mv	a1,a0
	printf("Error3: %d\n", ret);
    2b1c:	650d                	lui	a0,0x3
    2b1e:	51850513          	addi	a0,a0,1304 # 3518 <__clz_tab+0x184>
    2b22:	8aeff0ef          	jal	ra,1bd0 <printf>
	uint16_t h2 = (buff[0] << 8) | buff[1];			// H2 baseline
    2b26:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    2b2a:	0007d603          	lhu	a2,0(a5)
	printf("SGP30 CO2: %d ppm, TVOC: %d ppb\n", co2, tvoc);
    2b2e:	4362                	lw	t1,24(sp)
    2b30:	46f2                	lw	a3,28(sp)
    2b32:	00861713          	slli	a4,a2,0x8
    2b36:	0642                	slli	a2,a2,0x10
    2b38:	8241                	srli	a2,a2,0x10
    2b3a:	8221                	srli	a2,a2,0x8
    2b3c:	8e59                	or	a2,a2,a4
    2b3e:	01061713          	slli	a4,a2,0x10
    2b42:	0037c603          	lbu	a2,3(a5)
    2b46:	0047c783          	lbu	a5,4(a5)
    2b4a:	650d                	lui	a0,0x3
    2b4c:	8341                	srli	a4,a4,0x10
    2b4e:	07a2                	slli	a5,a5,0x8
    2b50:	8fd1                	or	a5,a5,a2
    2b52:	00879613          	slli	a2,a5,0x8
    2b56:	83a1                	srli	a5,a5,0x8
    2b58:	8fd1                	or	a5,a5,a2
    2b5a:	07c2                	slli	a5,a5,0x10
    2b5c:	83c1                	srli	a5,a5,0x10
    2b5e:	861a                	mv	a2,t1
    2b60:	85b6                	mv	a1,a3
    2b62:	7e850513          	addi	a0,a0,2024 # 37e8 <__clz_tab+0x454>
    2b66:	ca3a                	sw	a4,20(sp)
	uint16_t ethanol = (buff[3] << 8) | buff[4];	// Ethanol baseline
    2b68:	c63e                	sw	a5,12(sp)
	printf("SGP30 CO2: %d ppm, TVOC: %d ppb\n", co2, tvoc);
    2b6a:	866ff0ef          	jal	ra,1bd0 <printf>
	printf("SGP30 H2: %d, Ethanol: %d\n", h2, ethanol);
    2b6e:	47b2                	lw	a5,12(sp)
    2b70:	4752                	lw	a4,20(sp)
    2b72:	6511                	lui	a0,0x4
    2b74:	863e                	mv	a2,a5
    2b76:	85ba                	mv	a1,a4
    2b78:	80c50513          	addi	a0,a0,-2036 # 380c <__clz_tab+0x478>
    2b7c:	854ff0ef          	jal	ra,1bd0 <printf>
    2b80:	ce2ff06f          	j	2062 <main+0x25c>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x36, 0xF6}, 2); 	// wake up
    2b84:	77fd                	lui	a5,0xfffff
    2b86:	63678793          	addi	a5,a5,1590 # fffff636 <_eusrstack+0xdfffee36>
    2b8a:	4609                	li	a2,2
    2b8c:	102c                	addi	a1,sp,40
    2b8e:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2b92:	02f11423          	sh	a5,40(sp)
    2b96:	d92fe0ef          	jal	ra,1128 <i2c_write_raw>
	printf("Error0: %d\n", ret);
    2b9a:	670d                	lui	a4,0x3
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x36, 0xF6}, 2); 	// wake up
    2b9c:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2b9e:	50c70513          	addi	a0,a4,1292 # 350c <__clz_tab+0x178>
    2ba2:	82eff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x21, 0xB1}, 2);	// periodic measurement
    2ba6:	77ed                	lui	a5,0xffffb
    2ba8:	12178793          	addi	a5,a5,289 # ffffb121 <_eusrstack+0xdfffa921>
    2bac:	4609                	li	a2,2
    2bae:	106c                	addi	a1,sp,44
    2bb0:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2bb4:	02f11623          	sh	a5,44(sp)
    2bb8:	d70fe0ef          	jal	ra,1128 <i2c_write_raw>
	printf("Error0: %d\n", ret);
    2bbc:	670d                	lui	a4,0x3
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x21, 0xB1}, 2);	// periodic measurement
    2bbe:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2bc0:	50c70513          	addi	a0,a4,1292 # 350c <__clz_tab+0x178>
    2bc4:	80cff0ef          	jal	ra,1bd0 <printf>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0xEC, 0x05}, 2);	// read measurement
    2bc8:	5ec00793          	li	a5,1516
    2bcc:	4609                	li	a2,2
    2bce:	180c                	addi	a1,sp,48
    2bd0:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2bd4:	02f11823          	sh	a5,48(sp)
    2bd8:	d50fe0ef          	jal	ra,1128 <i2c_write_raw>
    2bdc:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2bde:	650d                	lui	a0,0x3
    2be0:	58850513          	addi	a0,a0,1416 # 3588 <__clz_tab+0x1f4>
    2be4:	fedfe0ef          	jal	ra,1bd0 <printf>
	ret = i2c_read_raw(&dev_sensor, buff, 8);		// Read sensor data
    2be8:	4521                	li	a0,8
    2bea:	ab3fe0ef          	jal	ra,169c <i2c_read_raw.constprop.0>
    2bee:	85aa                	mv	a1,a0
	printf("Error2: %d\n", ret);
    2bf0:	650d                	lui	a0,0x3
    2bf2:	59450513          	addi	a0,a0,1428 # 3594 <__clz_tab+0x200>
    2bf6:	fdbfe0ef          	jal	ra,1bd0 <printf>
	uint16_t hum_raw = (buff[6] << 8) | buff[6];
    2bfa:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    2bfe:	00674783          	lbu	a5,6(a4)
	uint16_t temp = (temp_raw * 175) >> 16;			// >> 16 is equivalent to / 65536
    2c02:	00374603          	lbu	a2,3(a4)
	printf("SCD40 CO2: %d ppm, Temp: %d, Hum: %d\n", co2, temp, hum);
    2c06:	6511                	lui	a0,0x4
	uint16_t hum_raw = (buff[6] << 8) | buff[6];
    2c08:	00879693          	slli	a3,a5,0x8
	uint16_t hum = (hum_raw * 100) >> 16;			// >> 16 is equivalent to / 65536
    2c0c:	8fd5                	or	a5,a5,a3
    2c0e:	00179693          	slli	a3,a5,0x1
    2c12:	96be                	add	a3,a3,a5
    2c14:	068e                	slli	a3,a3,0x3
    2c16:	96be                	add	a3,a3,a5
	uint16_t temp = (temp_raw * 175) >> 16;			// >> 16 is equivalent to / 65536
    2c18:	00474783          	lbu	a5,4(a4)
	printf("SCD40 CO2: %d ppm, Temp: %d, Hum: %d\n", co2, temp, hum);
    2c1c:	82b9                	srli	a3,a3,0xe
    2c1e:	83850513          	addi	a0,a0,-1992 # 3838 <__clz_tab+0x4a4>
	uint16_t temp = (temp_raw * 175) >> 16;			// >> 16 is equivalent to / 65536
    2c22:	07a2                	slli	a5,a5,0x8
    2c24:	8fd1                	or	a5,a5,a2
    2c26:	00879613          	slli	a2,a5,0x8
    2c2a:	83a1                	srli	a5,a5,0x8
    2c2c:	8e5d                	or	a2,a2,a5
    2c2e:	01061793          	slli	a5,a2,0x10
    2c32:	83c1                	srli	a5,a5,0x10
    2c34:	00179613          	slli	a2,a5,0x1
    2c38:	963e                	add	a2,a2,a5
    2c3a:	060a                	slli	a2,a2,0x2
    2c3c:	8e1d                	sub	a2,a2,a5
    2c3e:	0612                	slli	a2,a2,0x4
    2c40:	8e1d                	sub	a2,a2,a5
	printf("SCD40 CO2: %d ppm, Temp: %d, Hum: %d\n", co2, temp, hum);
    2c42:	00075783          	lhu	a5,0(a4)
    2c46:	8241                	srli	a2,a2,0x10
    2c48:	00879593          	slli	a1,a5,0x8
    2c4c:	07c2                	slli	a5,a5,0x10
    2c4e:	83c1                	srli	a5,a5,0x10
    2c50:	83a1                	srli	a5,a5,0x8
    2c52:	8ddd                	or	a1,a1,a5
    2c54:	05c2                	slli	a1,a1,0x10
    2c56:	81c1                	srli	a1,a1,0x10
    2c58:	f79fe0ef          	jal	ra,1bd0 <printf>
    2c5c:	c22ff06f          	j	207e <main+0x278>
	ret = i2c_write_reg(&dev_sensor, 0x6B, (uint8_t[]){0x00}, 1);	// Reset MPU6050
    2c60:	180c                	addi	a1,sp,48
    2c62:	4605                	li	a2,1
    2c64:	06b00513          	li	a0,107
    2c68:	02010823          	sb	zero,48(sp)
    2c6c:	e1cfe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
	ret = i2c_read_reg(&dev_sensor, 0x3B, buff, 6);
    2c70:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    2c74:	4619                	li	a2,6
    2c76:	03b00513          	li	a0,59
    2c7a:	831fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("MPU6050 acc_x: %d, acc_y: %d, acc_z: %d\n", acc_x, acc_y, acc_z);
    2c7e:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    2c82:	87ba                	mv	a5,a4
    2c84:	00475703          	lhu	a4,4(a4)
    2c88:	6511                	lui	a0,0x4
    2c8a:	87450513          	addi	a0,a0,-1932 # 3874 <__clz_tab+0x4e0>
    2c8e:	00871693          	slli	a3,a4,0x8
    2c92:	0742                	slli	a4,a4,0x10
    2c94:	8341                	srli	a4,a4,0x10
    2c96:	8321                	srli	a4,a4,0x8
    2c98:	8ed9                	or	a3,a3,a4
    2c9a:	0027d703          	lhu	a4,2(a5)
    2c9e:	06c2                	slli	a3,a3,0x10
    2ca0:	82c1                	srli	a3,a3,0x10
    2ca2:	00871613          	slli	a2,a4,0x8
    2ca6:	0742                	slli	a4,a4,0x10
    2ca8:	8341                	srli	a4,a4,0x10
    2caa:	8321                	srli	a4,a4,0x8
    2cac:	8e59                	or	a2,a2,a4
    2cae:	0007d703          	lhu	a4,0(a5)
    2cb2:	0642                	slli	a2,a2,0x10
    2cb4:	8241                	srli	a2,a2,0x10
    2cb6:	00871593          	slli	a1,a4,0x8
    2cba:	0742                	slli	a4,a4,0x10
    2cbc:	8341                	srli	a4,a4,0x10
    2cbe:	8321                	srli	a4,a4,0x8
    2cc0:	8dd9                	or	a1,a1,a4
    2cc2:	05c2                	slli	a1,a1,0x10
    2cc4:	81c1                	srli	a1,a1,0x10
    2cc6:	f0bfe0ef          	jal	ra,1bd0 <printf>
	ret = i2c_read_reg(&dev_sensor, 0x43, buff, 6);
    2cca:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    2cce:	4619                	li	a2,6
    2cd0:	04300513          	li	a0,67
    2cd4:	fd6fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("MPU6050 gyro_x: %d, gyro_y: %d, gyro_z: %d\n", gyro_x, gyro_y, gyro_z);
    2cd8:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    2cdc:	0047d703          	lhu	a4,4(a5)
    2ce0:	6511                	lui	a0,0x4
    2ce2:	8a050513          	addi	a0,a0,-1888 # 38a0 <__clz_tab+0x50c>
    2ce6:	00871693          	slli	a3,a4,0x8
    2cea:	0742                	slli	a4,a4,0x10
    2cec:	8341                	srli	a4,a4,0x10
    2cee:	8321                	srli	a4,a4,0x8
    2cf0:	8ed9                	or	a3,a3,a4
    2cf2:	0027d703          	lhu	a4,2(a5)
    2cf6:	0007d783          	lhu	a5,0(a5)
    2cfa:	06c2                	slli	a3,a3,0x10
    2cfc:	00871613          	slli	a2,a4,0x8
    2d00:	00879593          	slli	a1,a5,0x8
    2d04:	0742                	slli	a4,a4,0x10
    2d06:	07c2                	slli	a5,a5,0x10
    2d08:	8341                	srli	a4,a4,0x10
    2d0a:	83c1                	srli	a5,a5,0x10
    2d0c:	8321                	srli	a4,a4,0x8
    2d0e:	83a1                	srli	a5,a5,0x8
    2d10:	8e59                	or	a2,a2,a4
    2d12:	8ddd                	or	a1,a1,a5
    2d14:	0642                	slli	a2,a2,0x10
    2d16:	05c2                	slli	a1,a1,0x10
    2d18:	82c1                	srli	a3,a3,0x10
    2d1a:	8241                	srli	a2,a2,0x10
    2d1c:	81c1                	srli	a1,a1,0x10
    2d1e:	eb3fe0ef          	jal	ra,1bd0 <printf>
    2d22:	b78ff06f          	j	209a <main+0x294>
	ret = i2c_write_reg(&dev_sensor, 0x2D, (uint8_t[]){0x08}, 1);	// Set power mode to measurement
    2d26:	47a1                	li	a5,8
    2d28:	4605                	li	a2,1
    2d2a:	180c                	addi	a1,sp,48
    2d2c:	02d00513          	li	a0,45
    2d30:	02f10823          	sb	a5,48(sp)
    2d34:	d54fe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
    2d38:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2d3a:	650d                	lui	a0,0x3
    2d3c:	50c50513          	addi	a0,a0,1292 # 350c <__clz_tab+0x178>
    2d40:	e91fe0ef          	jal	ra,1bd0 <printf>
	ret = i2c_read_reg(&dev_sensor, 0x32, buff, 6);
    2d44:	4619                	li	a2,6
    2d46:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    2d4a:	03200513          	li	a0,50
    2d4e:	f5cfe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("ADXL345 x: %d, y: %d, z: %d\n", x, y, z);
    2d52:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    2d56:	0047d683          	lhu	a3,4(a5)
    2d5a:	0027d603          	lhu	a2,2(a5)
    2d5e:	0007d583          	lhu	a1,0(a5)
    2d62:	6511                	lui	a0,0x4
    2d64:	8e050513          	addi	a0,a0,-1824 # 38e0 <__clz_tab+0x54c>
    2d68:	e69fe0ef          	jal	ra,1bd0 <printf>
    2d6c:	b4cff06f          	j	20b8 <main+0x2b2>
	ret = i2c_write_reg(&dev_sensor, 0x00, (uint8_t[]){
    2d70:	011167b7          	lui	a5,0x1116
    2d74:	80978793          	addi	a5,a5,-2039 # 1115809 <lib_i2c.c.bdeb3654+0x110e0cc>
    2d78:	d83e                	sw	a5,48(sp)
    2d7a:	71500793          	li	a5,1813
    2d7e:	02f11a23          	sh	a5,52(sp)
    2d82:	461d                	li	a2,7
    2d84:	02500793          	li	a5,37
    2d88:	180c                	addi	a1,sp,48
    2d8a:	02f10b23          	sb	a5,54(sp)
    2d8e:	cfafe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
    2d92:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2d94:	650d                	lui	a0,0x3
    2d96:	50c50513          	addi	a0,a0,1292 # 350c <__clz_tab+0x178>
    2d9a:	e37fe0ef          	jal	ra,1bd0 <printf>
	ret = i2c_read_reg(&dev_sensor, 0x00, buff, 7);
    2d9e:	461d                	li	a2,7
    2da0:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    2da4:	4501                	li	a0,0
    2da6:	f04fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
    2daa:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2dac:	650d                	lui	a0,0x3
    2dae:	58850513          	addi	a0,a0,1416 # 3588 <__clz_tab+0x1f4>
    2db2:	e1ffe0ef          	jal	ra,1bd0 <printf>
		bcd_to_decimal(buff[4]), bcd_to_decimal(buff[5]), bcd_to_decimal(buff[6]) + 2000,
    2db6:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
		bcd_to_decimal(buff[2]), bcd_to_decimal(buff[1]), bcd_to_decimal(buff[0]));
    2dba:	00174603          	lbu	a2,1(a4)
    2dbe:	00274303          	lbu	t1,2(a4)
		bcd_to_decimal(buff[4]), bcd_to_decimal(buff[5]), bcd_to_decimal(buff[6]) + 2000,
    2dc2:	00474503          	lbu	a0,4(a4)
uint8_t bcd_to_decimal(uint8_t val) { return ((val/16)*10) + (val%16); }
    2dc6:	00465693          	srli	a3,a2,0x4
    2dca:	00269793          	slli	a5,a3,0x2
    2dce:	97b6                	add	a5,a5,a3
    2dd0:	8a3d                	andi	a2,a2,15
    2dd2:	0786                	slli	a5,a5,0x1
    2dd4:	97b2                	add	a5,a5,a2
    2dd6:	00435613          	srli	a2,t1,0x4
		bcd_to_decimal(buff[4]), bcd_to_decimal(buff[5]), bcd_to_decimal(buff[6]) + 2000,
    2dda:	00574583          	lbu	a1,5(a4)
    2dde:	00674383          	lbu	t2,6(a4)
		bcd_to_decimal(buff[2]), bcd_to_decimal(buff[1]), bcd_to_decimal(buff[0]));
    2de2:	00074283          	lbu	t0,0(a4)
uint8_t bcd_to_decimal(uint8_t val) { return ((val/16)*10) + (val%16); }
    2de6:	00261713          	slli	a4,a2,0x2
    2dea:	9732                	add	a4,a4,a2
    2dec:	00f37313          	andi	t1,t1,15
    2df0:	0706                	slli	a4,a4,0x1
    2df2:	971a                	add	a4,a4,t1
    2df4:	0043d313          	srli	t1,t2,0x4
    2df8:	0045d613          	srli	a2,a1,0x4
    2dfc:	00231693          	slli	a3,t1,0x2
    2e00:	969a                	add	a3,a3,t1
    2e02:	00261313          	slli	t1,a2,0x2
    2e06:	961a                	add	a2,a2,t1
    2e08:	89bd                	andi	a1,a1,15
    2e0a:	0606                	slli	a2,a2,0x1
    2e0c:	962e                	add	a2,a2,a1
    2e0e:	00455593          	srli	a1,a0,0x4
    2e12:	00259313          	slli	t1,a1,0x2
    2e16:	959a                	add	a1,a1,t1
    2e18:	893d                	andi	a0,a0,15
    2e1a:	0586                	slli	a1,a1,0x1
    2e1c:	95aa                	add	a1,a1,a0
    2e1e:	0042d513          	srli	a0,t0,0x4
    2e22:	00251313          	slli	t1,a0,0x2
    2e26:	951a                	add	a0,a0,t1
    2e28:	00f2f293          	andi	t0,t0,15
    2e2c:	0506                	slli	a0,a0,0x1
    2e2e:	00f3f393          	andi	t2,t2,15
    2e32:	9516                	add	a0,a0,t0
    2e34:	0686                	slli	a3,a3,0x1
    2e36:	969e                	add	a3,a3,t2
	printf("%d/%d/%lu %d:%d:%d\n", 
    2e38:	0ff57513          	andi	a0,a0,255
    2e3c:	c02a                	sw	a0,0(sp)
		bcd_to_decimal(buff[4]), bcd_to_decimal(buff[5]), bcd_to_decimal(buff[6]) + 2000,
    2e3e:	0ff6f693          	andi	a3,a3,255
	printf("%d/%d/%lu %d:%d:%d\n", 
    2e42:	6511                	lui	a0,0x4
    2e44:	0ff7f793          	andi	a5,a5,255
    2e48:	0ff77713          	andi	a4,a4,255
    2e4c:	7d068693          	addi	a3,a3,2000
    2e50:	0ff67613          	andi	a2,a2,255
    2e54:	0ff5f593          	andi	a1,a1,255
    2e58:	91450513          	addi	a0,a0,-1772 # 3914 <__clz_tab+0x580>
    2e5c:	d75fe0ef          	jal	ra,1bd0 <printf>
    2e60:	a76ff06f          	j	20d6 <main+0x2d0>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){ 0x00, 0x11, 0xDD }, 3);
    2e64:	6785                	lui	a5,0x1
    2e66:	fdd00713          	li	a4,-35
    2e6a:	10078793          	addi	a5,a5,256 # 1100 <i2c_ping+0x70>
    2e6e:	460d                	li	a2,3
    2e70:	180c                	addi	a1,sp,48
    2e72:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2e76:	02e10923          	sb	a4,50(sp)
    2e7a:	02f11823          	sh	a5,48(sp)
    2e7e:	aaafe0ef          	jal	ra,1128 <i2c_write_raw>
    2e82:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2e84:	650d                	lui	a0,0x3
    2e86:	50c50513          	addi	a0,a0,1292 # 350c <__clz_tab+0x178>
    2e8a:	d47fe0ef          	jal	ra,1bd0 <printf>
	Delay_Ms(10);
    2e8e:	00075537          	lui	a0,0x75
    2e92:	30050513          	addi	a0,a0,768 # 75300 <lib_i2c.c.bdeb3654+0x6dbc3>
    2e96:	828fe0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){ 0x00, 0x11 }, 2);
    2e9a:	6785                	lui	a5,0x1
    2e9c:	10078793          	addi	a5,a5,256 # 1100 <i2c_ping+0x70>
    2ea0:	4609                	li	a2,2
    2ea2:	106c                	addi	a1,sp,44
    2ea4:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2ea8:	02f11623          	sh	a5,44(sp)
    2eac:	a7cfe0ef          	jal	ra,1128 <i2c_write_raw>
	ret = i2c_read_raw(&dev_sensor, buff, 1);
    2eb0:	4505                	li	a0,1
    2eb2:	feafe0ef          	jal	ra,169c <i2c_read_raw.constprop.0>
    2eb6:	85aa                	mv	a1,a0
	printf("Error1: %d\n", ret);
    2eb8:	650d                	lui	a0,0x3
    2eba:	58850513          	addi	a0,a0,1416 # 3588 <__clz_tab+0x1f4>
    2ebe:	d13fe0ef          	jal	ra,1bd0 <printf>
	printf("0x%02X\n", buff[0]);
    2ec2:	c381c583          	lbu	a1,-968(gp) # 20000034 <buff>
    2ec6:	6511                	lui	a0,0x4
    2ec8:	93850513          	addi	a0,a0,-1736 # 3938 <__clz_tab+0x5a4>
    2ecc:	d05fe0ef          	jal	ra,1bd0 <printf>
    2ed0:	a24ff06f          	j	20f4 <main+0x2ee>
	ret = i2c_read_reg(&dev_sensor, 0x00, buff, 2);
    2ed4:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    2ed8:	4609                	li	a2,2
    2eda:	dd0fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("Error0: %d\n", ret);
    2ede:	628d                	lui	t0,0x3
	ret = i2c_read_reg(&dev_sensor, 0x00, buff, 2);
    2ee0:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2ee2:	50c28513          	addi	a0,t0,1292 # 350c <__clz_tab+0x178>
    2ee6:	cebfe0ef          	jal	ra,1bd0 <printf>
	printf("INA3221: %02X %02X\n", buff[0], buff[1]);
    2eea:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    2eee:	00174603          	lbu	a2,1(a4)
    2ef2:	00074583          	lbu	a1,0(a4)
    2ef6:	6311                	lui	t1,0x4
    2ef8:	95430513          	addi	a0,t1,-1708 # 3954 <__clz_tab+0x5c0>
    2efc:	cd5fe0ef          	jal	ra,1bd0 <printf>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x00, 0xF1, 0x26}, 3); // Reset + 128x avg
    2f00:	76fd                	lui	a3,0xfffff
    2f02:	10068693          	addi	a3,a3,256 # fffff100 <_eusrstack+0xdfffe900>
    2f06:	460d                	li	a2,3
    2f08:	02d11823          	sh	a3,48(sp)
    2f0c:	180c                	addi	a1,sp,48
    2f0e:	02600693          	li	a3,38
    2f12:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    2f16:	02d10923          	sb	a3,50(sp)
    2f1a:	a0efe0ef          	jal	ra,1128 <i2c_write_raw>
    2f1e:	85aa                	mv	a1,a0
	printf("Error: %d\n", ret);
    2f20:	6511                	lui	a0,0x4
    2f22:	96850513          	addi	a0,a0,-1688 # 3968 <__clz_tab+0x5d4>
    2f26:	cabfe0ef          	jal	ra,1bd0 <printf>
	Delay_Ms(100);
    2f2a:	00494537          	lui	a0,0x494
    2f2e:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c6c3>
    2f32:	f8dfd0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_reg(&dev_sensor, 0x00, buff, 2);
    2f36:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    2f3a:	4609                	li	a2,2
    2f3c:	4501                	li	a0,0
    2f3e:	d6cfe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("Error0: %d\n", ret);
    2f42:	628d                	lui	t0,0x3
	ret = i2c_read_reg(&dev_sensor, 0x00, buff, 2);
    2f44:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2f46:	50c28513          	addi	a0,t0,1292 # 350c <__clz_tab+0x178>
    2f4a:	c87fe0ef          	jal	ra,1bd0 <printf>
	printf("INA3221: %02X %02X\n", buff[0], buff[1]);
    2f4e:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    2f52:	0017c603          	lbu	a2,1(a5)
    2f56:	0007c583          	lbu	a1,0(a5)
    2f5a:	6311                	lui	t1,0x4
    2f5c:	95430513          	addi	a0,t1,-1708 # 3954 <__clz_tab+0x5c0>
    2f60:	c71fe0ef          	jal	ra,1bd0 <printf>
    2f64:	9aeff06f          	j	2112 <main+0x30c>
	ret = i2c_read_reg(&dev_sensor, 0x0C, buff, 4);
    2f68:	4611                	li	a2,4
    2f6a:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    2f6e:	4531                	li	a0,12
    2f70:	d3afe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
    2f74:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    2f76:	650d                	lui	a0,0x3
    2f78:	50c50513          	addi	a0,a0,1292 # 350c <__clz_tab+0x178>
    2f7c:	c55fe0ef          	jal	ra,1bd0 <printf>
	printf("AS5600 angle_raw: %d, angle_value: %d\n", angle_raw, angle_value);
    2f80:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    2f84:	00275783          	lhu	a5,2(a4)
    2f88:	6511                	lui	a0,0x4
    2f8a:	98850513          	addi	a0,a0,-1656 # 3988 <__clz_tab+0x5f4>
    2f8e:	00879613          	slli	a2,a5,0x8
    2f92:	07c2                	slli	a5,a5,0x10
    2f94:	83c1                	srli	a5,a5,0x10
    2f96:	83a1                	srli	a5,a5,0x8
    2f98:	8e5d                	or	a2,a2,a5
    2f9a:	00075783          	lhu	a5,0(a4)
    2f9e:	0642                	slli	a2,a2,0x10
    2fa0:	8241                	srli	a2,a2,0x10
    2fa2:	00879593          	slli	a1,a5,0x8
    2fa6:	07c2                	slli	a5,a5,0x10
    2fa8:	83c1                	srli	a5,a5,0x10
    2faa:	83a1                	srli	a5,a5,0x8
    2fac:	8ddd                	or	a1,a1,a5
    2fae:	05c2                	slli	a1,a1,0x10
    2fb0:	81c1                	srli	a1,a1,0x10
    2fb2:	c1ffe0ef          	jal	ra,1bd0 <printf>
    2fb6:	97aff06f          	j	2130 <main+0x32a>
	ret = i2c_read_reg(&dev_sensor, 0xFF, &part_id, 1);
    2fba:	4605                	li	a2,1
    2fbc:	180c                	addi	a1,sp,48
    2fbe:	0ff00513          	li	a0,255
    2fc2:	ce8fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("MAX30102: %02X\n", part_id);		// expect 0x15
    2fc6:	03014583          	lbu	a1,48(sp)
    2fca:	6511                	lui	a0,0x4
    2fcc:	9c450513          	addi	a0,a0,-1596 # 39c4 <__clz_tab+0x630>
    2fd0:	c01fe0ef          	jal	ra,1bd0 <printf>
	ret = i2c_write_reg(&dev_sensor, 0x09, (uint8_t[]){0x03}, 1);
    2fd4:	478d                	li	a5,3
    2fd6:	100c                	addi	a1,sp,32
    2fd8:	4605                	li	a2,1
    2fda:	4525                	li	a0,9
    2fdc:	02f10023          	sb	a5,32(sp)
    2fe0:	aa8fe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
	ret = i2c_write_reg(&dev_sensor, 0x0C, (uint8_t[]){0x24}, 1);
    2fe4:	02400793          	li	a5,36
    2fe8:	104c                	addi	a1,sp,36
    2fea:	4605                	li	a2,1
    2fec:	4531                	li	a0,12
    2fee:	02f10223          	sb	a5,36(sp)
    2ff2:	a96fe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
	ret = i2c_write_reg(&dev_sensor, 0x0D, (uint8_t[]){0x24}, 1);
    2ff6:	02400793          	li	a5,36
    2ffa:	102c                	addi	a1,sp,40
    2ffc:	4605                	li	a2,1
    2ffe:	4535                	li	a0,13
    3000:	02f10423          	sb	a5,40(sp)
    3004:	a84fe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
	ret = i2c_write_reg(&dev_sensor, 0x08, (uint8_t[]){0x40}, 1);
    3008:	04000793          	li	a5,64
    300c:	106c                	addi	a1,sp,44
    300e:	4605                	li	a2,1
    3010:	4521                	li	a0,8
    3012:	02f10623          	sb	a5,44(sp)
    3016:	a72fe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
	Delay_Ms(100);
    301a:	00494537          	lui	a0,0x494
    301e:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bdeb3654+0x48c6c3>
    3022:	e9dfd0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_reg(&dev_sensor, 0x07, buff, 6);
    3026:	4619                	li	a2,6
    3028:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    302c:	451d                	li	a0,7
    302e:	c7cfe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	uint32_t ir_led = (buff[3] << 16) | (buff[4] << 8) | buff[5];
    3032:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    3036:	0037c683          	lbu	a3,3(a5)
    303a:	0047c603          	lbu	a2,4(a5)
	uint32_t red_led = (buff[0] << 16) | (buff[1] << 8) | buff[2];
    303e:	0007c703          	lbu	a4,0(a5)
    3042:	0017c583          	lbu	a1,1(a5)
	uint32_t ir_led = (buff[3] << 16) | (buff[4] << 8) | buff[5];
    3046:	0622                	slli	a2,a2,0x8
    3048:	06c2                	slli	a3,a3,0x10
	uint32_t red_led = (buff[0] << 16) | (buff[1] << 8) | buff[2];
    304a:	05a2                	slli	a1,a1,0x8
    304c:	0742                	slli	a4,a4,0x10
	uint32_t ir_led = (buff[3] << 16) | (buff[4] << 8) | buff[5];
    304e:	8ed1                	or	a3,a3,a2
	uint32_t red_led = (buff[0] << 16) | (buff[1] << 8) | buff[2];
    3050:	8f4d                	or	a4,a4,a1
	uint32_t ir_led = (buff[3] << 16) | (buff[4] << 8) | buff[5];
    3052:	0057c603          	lbu	a2,5(a5)
	uint32_t red_led = (buff[0] << 16) | (buff[1] << 8) | buff[2];
    3056:	0027c583          	lbu	a1,2(a5)
	printf("MAX30102: %lu, %lu\n", red_led, ir_led);
    305a:	6511                	lui	a0,0x4
    305c:	8e55                	or	a2,a2,a3
    305e:	8dd9                	or	a1,a1,a4
    3060:	9d450513          	addi	a0,a0,-1580 # 39d4 <__clz_tab+0x640>
    3064:	b6dfe0ef          	jal	ra,1bd0 <printf>
    3068:	8e6ff06f          	j	214e <main+0x348>
	ret = i2c_read_reg(&dev_sensor, 0x80, buff, 128);
    306c:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    3070:	08000613          	li	a2,128
    3074:	ca2a                	sw	a0,20(sp)
    3076:	08000513          	li	a0,128
    307a:	c30fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
    307e:	85aa                	mv	a1,a0
	printf("Error0: %d\n", ret);
    3080:	650d                	lui	a0,0x3
    3082:	50c50513          	addi	a0,a0,1292 # 350c <__clz_tab+0x178>
    3086:	b4bfe0ef          	jal	ra,1bd0 <printf>
		pixels[i] = raw * .25;
    308a:	c241a603          	lw	a2,-988(gp) # 20000020 <line.0+0x8>
    308e:	c281a683          	lw	a3,-984(gp) # 20000024 <line.0+0xc>
	for (int i=0; i<64; i++) {
    3092:	47d2                	lw	a5,20(sp)
    3094:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
		pixels[i] = raw * .25;
    3098:	c632                	sw	a2,12(sp)
    309a:	c836                	sw	a3,16(sp)
    309c:	1814                	addi	a3,sp,48
    309e:	00f682b3          	add	t0,a3,a5
		uint16_t raw = (buff[i*2] << 8) | buff[i*2+1];
    30a2:	00074683          	lbu	a3,0(a4)
    30a6:	00174503          	lbu	a0,1(a4)
		pixels[i] = raw * .25;
    30aa:	ce3e                	sw	a5,28(sp)
		uint16_t raw = (buff[i*2] << 8) | buff[i*2+1];
    30ac:	06a2                	slli	a3,a3,0x8
		pixels[i] = raw * .25;
    30ae:	8d55                	or	a0,a0,a3
    30b0:	cc16                	sw	t0,24(sp)
		uint16_t raw = (buff[i*2] << 8) | buff[i*2+1];
    30b2:	ca3a                	sw	a4,20(sp)
		pixels[i] = raw * .25;
    30b4:	b51fd0ef          	jal	ra,c04 <__floatsidf>
    30b8:	4632                	lw	a2,12(sp)
    30ba:	46c2                	lw	a3,16(sp)
    30bc:	e06fd0ef          	jal	ra,6c2 <__muldf3>
    30c0:	ae9fd0ef          	jal	ra,ba8 <__fixunsdfsi>
    30c4:	42e2                	lw	t0,24(sp)
	for (int i=0; i<64; i++) {
    30c6:	47f2                	lw	a5,28(sp)
    30c8:	4752                	lw	a4,20(sp)
		pixels[i] = raw * .25;
    30ca:	00a29023          	sh	a0,0(t0)
	for (int i=0; i<64; i++) {
    30ce:	0789                	addi	a5,a5,2
    30d0:	08000313          	li	t1,128
    30d4:	0709                	addi	a4,a4,2
    30d6:	fc6793e3          	bne	a5,t1,309c <main+0x1296>
    30da:	03010313          	addi	t1,sp,48
		printf("%lu, %lu, %lu, %lu, %lu, %lu, %lu, %lu\n", 
    30de:	6291                	lui	t0,0x4
    30e0:	00e35783          	lhu	a5,14(t1)
    30e4:	9fc28513          	addi	a0,t0,-1540 # 39fc <__clz_tab+0x668>
    30e8:	c61a                	sw	t1,12(sp)
    30ea:	c43e                	sw	a5,8(sp)
    30ec:	00c35783          	lhu	a5,12(t1)
    30f0:	c23e                	sw	a5,4(sp)
    30f2:	00a35783          	lhu	a5,10(t1)
    30f6:	c03e                	sw	a5,0(sp)
    30f8:	00835783          	lhu	a5,8(t1)
    30fc:	00635703          	lhu	a4,6(t1)
    3100:	00435683          	lhu	a3,4(t1)
    3104:	00235603          	lhu	a2,2(t1)
    3108:	00035583          	lhu	a1,0(t1)
    310c:	ac5fe0ef          	jal	ra,1bd0 <printf>
	for (int i=0; i<8; i++) {
    3110:	4332                	lw	t1,12(sp)
    3112:	191c                	addi	a5,sp,176
    3114:	6291                	lui	t0,0x4
    3116:	0341                	addi	t1,t1,16
    3118:	fcf314e3          	bne	t1,a5,30e0 <main+0x12da>
    311c:	850ff06f          	j	216c <main+0x366>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x01}, 1);
    3120:	4785                	li	a5,1
    3122:	180c                	addi	a1,sp,48
    3124:	4605                	li	a2,1
    3126:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    312a:	02f10823          	sb	a5,48(sp)
    312e:	ffbfd0ef          	jal	ra,1128 <i2c_write_raw>
	ret = i2c_read_reg(&dev_sensor, 0x20, buff, 2);
    3132:	4609                	li	a2,2
    3134:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    3138:	02000513          	li	a0,32
    313c:	b6efe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	uint32_t lux = (lux_raw / 1.2);
    3140:	c3818793          	addi	a5,gp,-968 # 20000034 <buff>
    3144:	0007d783          	lhu	a5,0(a5)
    3148:	00879513          	slli	a0,a5,0x8
    314c:	07c2                	slli	a5,a5,0x10
    314e:	83c1                	srli	a5,a5,0x10
    3150:	83a1                	srli	a5,a5,0x8
    3152:	8d5d                	or	a0,a0,a5
    3154:	0542                	slli	a0,a0,0x10
    3156:	8141                	srli	a0,a0,0x10
    3158:	b13fd0ef          	jal	ra,c6a <__floatunsidf>
    315c:	c2c1a603          	lw	a2,-980(gp) # 20000028 <line.0+0x10>
    3160:	c301a683          	lw	a3,-976(gp) # 2000002c <line.0+0x14>
    3164:	f3dfc0ef          	jal	ra,a0 <__divdf3>
    3168:	a41fd0ef          	jal	ra,ba8 <__fixunsdfsi>
    316c:	85aa                	mv	a1,a0
	printf("BH1750: %lu lx\n\n", lux);
    316e:	6511                	lui	a0,0x4
    3170:	a3850513          	addi	a0,a0,-1480 # 3a38 <__clz_tab+0x6a4>
    3174:	a5dfe0ef          	jal	ra,1bd0 <printf>
    3178:	812ff06f          	j	218a <main+0x384>
	ret = i2c_write_reg(&dev_sensor, 0x30, (uint8_t[]){0xA2}, 1);
    317c:	fa200793          	li	a5,-94
    3180:	106c                	addi	a1,sp,44
    3182:	4605                	li	a2,1
    3184:	03000513          	li	a0,48
    3188:	02f10623          	sb	a5,44(sp)
    318c:	8fcfe0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
	Delay_Ms(20);	//! REQUIRED
    3190:	000ea737          	lui	a4,0xea
    3194:	60070513          	addi	a0,a4,1536 # ea600 <lib_i2c.c.bdeb3654+0xe2ec3>
    3198:	d27fd0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_write_raw(&dev_sensor, (uint8_t[]){0x21, 0x30}, 2);
    319c:	678d                	lui	a5,0x3
    319e:	02178793          	addi	a5,a5,33 # 3021 <main+0x121b>
    31a2:	180c                	addi	a1,sp,48
    31a4:	4609                	li	a2,2
    31a6:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
    31aa:	02f11823          	sh	a5,48(sp)
    31ae:	f7bfd0ef          	jal	ra,1128 <i2c_write_raw>
	Delay_Ms(20);	//! REQUIRED
    31b2:	000ea737          	lui	a4,0xea
    31b6:	60070513          	addi	a0,a4,1536 # ea600 <lib_i2c.c.bdeb3654+0xe2ec3>
    31ba:	d05fd0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_raw(&dev_sensor, buff, 6);
    31be:	4519                	li	a0,6
    31c0:	cdcfe0ef          	jal	ra,169c <i2c_read_raw.constprop.0>
	uint16_t hum = (100 * hum_raw) >> 16;			// >> 16 is equivalent to / 65536
    31c4:	c3818713          	addi	a4,gp,-968 # 20000034 <buff>
    31c8:	00474783          	lbu	a5,4(a4)
    31cc:	00374683          	lbu	a3,3(a4)
	printf("SHT3X temp: %d, hum: %d\n\n", temp, hum);
    31d0:	6511                	lui	a0,0x4
	uint16_t hum = (100 * hum_raw) >> 16;			// >> 16 is equivalent to / 65536
    31d2:	07a2                	slli	a5,a5,0x8
    31d4:	8fd5                	or	a5,a5,a3
    31d6:	00879613          	slli	a2,a5,0x8
    31da:	83a1                	srli	a5,a5,0x8
    31dc:	8fd1                	or	a5,a5,a2
    31de:	07c2                	slli	a5,a5,0x10
    31e0:	83c1                	srli	a5,a5,0x10
    31e2:	00179613          	slli	a2,a5,0x1
    31e6:	963e                	add	a2,a2,a5
    31e8:	060e                	slli	a2,a2,0x3
    31ea:	963e                	add	a2,a2,a5
	uint16_t temp = (175 * temp_raw) >> 16;			// >> 16 is equivalent to / 65536
    31ec:	00075783          	lhu	a5,0(a4)
	printf("SHT3X temp: %d, hum: %d\n\n", temp, hum);
    31f0:	8239                	srli	a2,a2,0xe
    31f2:	a5c50513          	addi	a0,a0,-1444 # 3a5c <__clz_tab+0x6c8>
	uint16_t temp = (175 * temp_raw) >> 16;			// >> 16 is equivalent to / 65536
    31f6:	00879593          	slli	a1,a5,0x8
    31fa:	07c2                	slli	a5,a5,0x10
    31fc:	83c1                	srli	a5,a5,0x10
    31fe:	83a1                	srli	a5,a5,0x8
    3200:	8ddd                	or	a1,a1,a5
    3202:	01059793          	slli	a5,a1,0x10
    3206:	83c1                	srli	a5,a5,0x10
    3208:	00179593          	slli	a1,a5,0x1
    320c:	95be                	add	a1,a1,a5
    320e:	058a                	slli	a1,a1,0x2
    3210:	8d9d                	sub	a1,a1,a5
    3212:	0592                	slli	a1,a1,0x4
    3214:	8d9d                	sub	a1,a1,a5
	printf("SHT3X temp: %d, hum: %d\n\n", temp, hum);
    3216:	81c1                	srli	a1,a1,0x10
    3218:	9b9fe0ef          	jal	ra,1bd0 <printf>
    321c:	f8dfe06f          	j	21a8 <main+0x3a2>
	uint8_t config[] = {
    3220:	019017b7          	lui	a5,0x1901
    3224:	f8078793          	addi	a5,a5,-128 # 1900f80 <lib_i2c.c.bdeb3654+0x18f9843>
    3228:	d83e                	sw	a5,48(sp)
    322a:	878e27b7          	lui	a5,0x878e2
    322e:	08f78793          	addi	a5,a5,143 # 878e208f <_eusrstack+0x678e188f>
	ret = i2c_write_raw(&dev_sensor, config, sizeof(config));
    3232:	180c                	addi	a1,sp,48
    3234:	4621                	li	a2,8
    3236:	c0418513          	addi	a0,gp,-1020 # 20000000 <dev_sensor>
	uint8_t config[] = {
    323a:	da3e                	sw	a5,52(sp)
	ret = i2c_write_raw(&dev_sensor, config, sizeof(config));
    323c:	eedfd0ef          	jal	ra,1128 <i2c_write_raw>
	Delay_Ms(50);  // Wait for sensor to initialize
    3240:	0024a537          	lui	a0,0x24a
    3244:	f0050513          	addi	a0,a0,-256 # 249f00 <lib_i2c.c.bdeb3654+0x2427c3>
    3248:	c77fd0ef          	jal	ra,ebe <DelaySysTick>
	ret = i2c_read_reg(&dev_sensor, 0x9C, &proximity, 1);		// Read proximity register
    324c:	4605                	li	a2,1
    324e:	106c                	addi	a1,sp,44
    3250:	09c00513          	li	a0,156
    3254:	a56fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("APDS9960 Proximity: %d\n", proximity);
    3258:	02c14583          	lbu	a1,44(sp)
    325c:	6511                	lui	a0,0x4
    325e:	a8c50513          	addi	a0,a0,-1396 # 3a8c <__clz_tab+0x6f8>
    3262:	96ffe0ef          	jal	ra,1bd0 <printf>
	ret = i2c_read_reg(&dev_sensor, 0x94, buff, 8);			// Read lux registers
    3266:	c3818413          	addi	s0,gp,-968 # 20000034 <buff>
    326a:	4621                	li	a2,8
    326c:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    3270:	09400513          	li	a0,148
    3274:	a36fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	printf("APDS9960 clear: %d, R: %d, G: %d, B: %d\n\n", clear, red, green, blue);
    3278:	00645703          	lhu	a4,6(s0)
    327c:	00445683          	lhu	a3,4(s0)
    3280:	00245603          	lhu	a2,2(s0)
    3284:	00045583          	lhu	a1,0(s0)
    3288:	6511                	lui	a0,0x4
    328a:	aa450513          	addi	a0,a0,-1372 # 3aa4 <__clz_tab+0x710>
    328e:	943fe0ef          	jal	ra,1bd0 <printf>
    3292:	f35fe06f          	j	21c6 <main+0x3c0>
	ret = i2c_write_reg(&dev_sensor, 0x00, (uint8_t[]){0x39, 0x9F}, 2);		// Configure INA219 32V 1A Range
    3296:	77e9                	lui	a5,0xffffa
    3298:	f3978793          	addi	a5,a5,-199 # ffff9f39 <_eusrstack+0xdfff9739>
    329c:	180c                	addi	a1,sp,48
    329e:	4609                	li	a2,2
    32a0:	02f11823          	sh	a5,48(sp)
    32a4:	fe5fd0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
	uint8_t cal_bytes[2] = {cal >> 8, cal & 0xFF};
    32a8:	47c1                	li	a5,16
	i2c_write_reg(&dev_sensor, 0x05, cal_bytes, 2);
    32aa:	106c                	addi	a1,sp,44
    32ac:	4609                	li	a2,2
    32ae:	4515                	li	a0,5
	uint8_t cal_bytes[2] = {cal >> 8, cal & 0xFF};
    32b0:	02f11623          	sh	a5,44(sp)
	i2c_write_reg(&dev_sensor, 0x05, cal_bytes, 2);
    32b4:	fd5fd0ef          	jal	ra,1288 <i2c_write_reg.constprop.0>
	ret = i2c_read_reg(&dev_sensor, 0x01, buff, 2);		// Read shunt voltage
    32b8:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    32bc:	4609                	li	a2,2
    32be:	4505                	li	a0,1
    32c0:	9eafe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
    32c4:	c3818413          	addi	s0,gp,-968 # 20000034 <buff>
    32c8:	00045783          	lhu	a5,0(s0)
	ret = i2c_read_reg(&dev_sensor, 0x02, buff, 2);		// Read bus voltage
    32cc:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    32d0:	4609                	li	a2,2
    32d2:	4509                	li	a0,2
    32d4:	c63e                	sw	a5,12(sp)
    32d6:	9d4fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	ret = i2c_read_reg(&dev_sensor, 0x03, buff, 2);		// Read power
    32da:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    32de:	4609                	li	a2,2
    32e0:	450d                	li	a0,3
    32e2:	9c8fe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	ret = i2c_read_reg(&dev_sensor, 0x04, buff, 2);		// Read current
    32e6:	c3818593          	addi	a1,gp,-968 # 20000034 <buff>
    32ea:	4609                	li	a2,2
    32ec:	4511                	li	a0,4
    32ee:	9bcfe0ef          	jal	ra,14aa <i2c_read_reg.constprop.0>
	uint16_t bus = (shunt_raw >> 3) * 4;				// in mV
    32f2:	47b2                	lw	a5,12(sp)
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    32f4:	00045683          	lhu	a3,0(s0)
	uint16_t shunt = shunt_raw / 100;					// in mV
    32f8:	06400593          	li	a1,100
	uint16_t bus = (shunt_raw >> 3) * 4;				// in mV
    32fc:	0037d613          	srli	a2,a5,0x3
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    3300:	060a                	slli	a2,a2,0x2
	uint16_t shunt = shunt_raw / 100;					// in mV
    3302:	853e                	mv	a0,a5
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    3304:	ca36                	sw	a3,20(sp)
    3306:	c632                	sw	a2,12(sp)
	uint16_t shunt = shunt_raw / 100;					// in mV
    3308:	9d1fd0ef          	jal	ra,cd8 <__hidden___udivsi3>
	printf("INA219 Shunt: %duV, Bus: %duV, Current: %duA\n\n", shunt, bus, current);
    330c:	46d2                	lw	a3,20(sp)
    330e:	4632                	lw	a2,12(sp)
    3310:	01051593          	slli	a1,a0,0x10
    3314:	6511                	lui	a0,0x4
    3316:	81c1                	srli	a1,a1,0x10
    3318:	ae450513          	addi	a0,a0,-1308 # 3ae4 <__clz_tab+0x750>
    331c:	8b5fe0ef          	jal	ra,1bd0 <printf>
    3320:	c1bfe06f          	j	1f3a <main+0x134>

00003324 <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
    3324:	1151                	addi	sp,sp,-12
    3326:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    3328:	e000f7b7          	lui	a5,0xe000f
{
    332c:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    332e:	4b98                	lw	a4,16(a5)
{
    3330:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    3332:	66b1                	lui	a3,0xc
    3334:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.bdeb3654+0x4443>
    3338:	9736                	add	a4,a4,a3
    333a:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
    333c:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
    3340:	c4418793          	addi	a5,gp,-956 # 20000040 <systick_millis>
    3344:	4398                	lw	a4,0(a5)
}
    3346:	46a2                	lw	a3,8(sp)
	systick_millis++;
    3348:	0705                	addi	a4,a4,1
    334a:	c398                	sw	a4,0(a5)
}
    334c:	4712                	lw	a4,4(sp)
    334e:	4782                	lw	a5,0(sp)
    3350:	0131                	addi	sp,sp,12
    3352:	30200073          	mret
    3356:	0000                	unimp
    3358:	06b0                	addi	a2,sp,840
    335a:	0000                	unimp
    335c:	0292                	slli	t0,t0,0x4
    335e:	0000                	unimp
    3360:	0608                	addi	a0,sp,768
    3362:	0000                	unimp
    3364:	0292                	slli	t0,t0,0x4
    3366:	0000                	unimp
    3368:	06a2                	slli	a3,a3,0x8
    336a:	0000                	unimp
    336c:	0292                	slli	t0,t0,0x4
    336e:	0000                	unimp
    3370:	0608                	addi	a0,sp,768
    3372:	0000                	unimp
    3374:	06b0                	addi	a2,sp,840
    3376:	0000                	unimp
    3378:	06b0                	addi	a2,sp,840
    337a:	0000                	unimp
    337c:	06a2                	slli	a3,a3,0x8
    337e:	0000                	unimp
    3380:	0608                	addi	a0,sp,768
    3382:	0000                	unimp
    3384:	0278                	addi	a4,sp,268
    3386:	0000                	unimp
    3388:	0278                	addi	a4,sp,268
    338a:	0000                	unimp
    338c:	0278                	addi	a4,sp,268
    338e:	0000                	unimp
    3390:	06a2                	slli	a3,a3,0x8
	...

00003394 <__clz_tab>:
    3394:	0100 0202 0303 0303 0404 0404 0404 0404     ................
    33a4:	0505 0505 0505 0505 0505 0505 0505 0505     ................
    33b4:	0606 0606 0606 0606 0606 0606 0606 0606     ................
    33c4:	0606 0606 0606 0606 0606 0606 0606 0606     ................
    33d4:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    33e4:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    33f4:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    3404:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    3414:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3424:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3434:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3444:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3454:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3464:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3474:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3484:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    3494:	3249 3a43 3020 2578 3230 0058 6146 6c69     I2C: 0x%02X.Fail
    34a4:	6465 7420 206f 6e69 7469 4920 4332 0000     ed to init I2C..
    34b4:	6548 6c6c 206f 6542 3265 0021 2d2d 2d2d     Hello Bee2!.----
    34c4:	6353 6e61 696e 676e 4920 4332 4220 7375     Scanning I2C Bus
    34d4:	6620 726f 4420 7665 6369 7365 2d2d 002d      for Devices---.
    34e4:	2d2d 2d2d 6f44 656e 5320 6163 6e6e 6e69     ----Done Scannin
    34f4:	2d67 2d2d 0a2d 0000 5448 3255 2031 6f6e     g----...HTU21 no
    3504:	2074 6f66 6e75 0064 7245 6f72 3072 203a     t found.Error0: 
    3514:	6425 000a 7245 6f72 3372 203a 6425 000a     %d..Error3: %d..
    3524:	7245 6f72 3472 203a 6425 000a 7245 6f72     Error4: %d..Erro
    3534:	3572 203a 6425 000a 5448 3255 2031 6554     r5: %d..HTU21 Te
    3544:	706d 312a 3030 203a 6425 202c 7548 3a6d     mp*100: %d, Hum:
    3554:	2520 0a64 0000 0000 4841 3254 2031 6f6e      %d.....AHT21 no
    3564:	2074 6f66 6e75 0064 4841 3254 2031 6552     t found.AHT21 Re
    3574:	6461 7220 6765 3020 3778 3a31 2520 3230     ad reg 0x71: %02
    3584:	0a58 0000 7245 6f72 3172 203a 6425 000a     X...Error1: %d..
    3594:	7245 6f72 3272 203a 6425 000a 7548 696d     Error2: %d..Humi
    35a4:	6964 7974 203a 6c25 0a75 0000 6554 706d     dity: %lu...Temp
    35b4:	7265 7461 7275 3a65 2520 756c 000a 0000     erature: %lu....
    35c4:	4d42 3250 3038 6e20 746f 6620 756f 646e     BMP280 not found
    35d4:	0000 0000 4d42 3250 3038 5220 6165 2064     ....BMP280 Read 
    35e4:	6572 2067 7830 3044 203a 3025 5832 000a     reg 0xD0: %02X..
    35f4:	6964 5f67 3154 203a 6c25 0a75 0000 0000     dig_T1: %lu.....
    3604:	6964 5f67 3254 203a 6c25 0a75 0000 0000     dig_T2: %lu.....
    3614:	6964 5f67 3354 203a 6c25 0a64 0000 0000     dig_T3: %ld.....
    3624:	4448 3143 3830 2030 6f6e 2074 6f66 6e75     HDC1080 not foun
    3634:	0064 0000 4448 3143 3830 2030 6552 6461     d...HDC1080 Read
    3644:	203a 3025 5832 2520 3230 2058 3025 5832     : %02X %02X %02X
    3654:	2520 3230 0a58 0000 4953 3037 3132 6e20      %02X...SI7021 n
    3664:	746f 6620 756f 646e 0000 0000 6554 706d     ot found....Temp
    3674:	312a 3030 203a 6c25 0a75 0000 7548 2a6d     *100: %lu...Hum*
    3684:	3031 3a30 2520 756c 000a 0000 614d 3478     100: %lu....Max4
    3694:	3034 3930 6e20 746f 6620 756f 646e 0000     4009 not found..
    36a4:	614d 3478 3034 3930 203a 3025 5832 2520     Max44009: %02X %
    36b4:	3230 0a58 0000 0000 756c 2a78 3031 3030     02X.....lux*1000
    36c4:	203a 6c25 0a75 0000 5041 3233 3631 6e20     : %lu...AP3216 n
    36d4:	746f 6620 756f 646e 0000 0000 756c 3a78     ot found....lux:
    36e4:	2520 2c64 7020 6f72 6978 696d 7974 203a      %d, proximity: 
    36f4:	6425 000a 4c56 3335 304c 2058 6f6e 2074     %d..VL53L0X not 
    3704:	6f66 6e75 0064 0000 7473 7461 7375 203a     found...status: 
    3714:	3025 5832 000a 0000 4c56 3335 304c 2058     %02X....VL53L0X 
    3724:	6552 6461 7220 6765 3020 3178 3a33 2520     Read reg 0x13: %
    3734:	3230 0a58 0000 0000 4c56 3335 304c 2058     02X.....VL53L0X 
    3744:	6552 6461 203a 3025 5832 2520 3230 0a58     Read: %02X %02X.
    3754:	0000 0000 6964 7473 6e61 6563 203a 6425     ....distance: %d
    3764:	000a 0000 4e45 3153 3036 6e20 746f 6620     ....ENS160 not f
    3774:	756f 646e 0000 0000 4e45 3153 3036 4920     ound....ENS160 I
    3784:	3a44 2520 3430 0a58 0000 0000 4e45 3153     D: %04X.....ENS1
    3794:	3036 4120 4951 203a 6425 000a 4e45 3153     60 AQI: %d..ENS1
    37a4:	3036 5420 4f56 3a43 2520 0a64 0000 0000     60 TVOC: %d.....
    37b4:	4e45 3153 3036 6520 4f43 3a32 2520 0a64     ENS160 eCO2: %d.
    37c4:	0000 0000 4753 3350 2030 6f6e 2074 6f66     ....SGP30 not fo
    37d4:	6e75 0064 4753 3350 2030 4449 203a 3025     und.SGP30 ID: %0
    37e4:	5834 000a 4753 3350 2030 4f43 3a32 2520     4X..SGP30 CO2: %
    37f4:	2064 7070 2c6d 5420 4f56 3a43 2520 2064     d ppm, TVOC: %d 
    3804:	7070 0a62 0000 0000 4753 3350 2030 3248     ppb.....SGP30 H2
    3814:	203a 6425 202c 7445 6168 6f6e 3a6c 2520     : %d, Ethanol: %
    3824:	0a64 0000 4353 3444 2030 6f6e 2074 6f66     d...SCD40 not fo
    3834:	6e75 0064 4353 3444 2030 4f43 3a32 2520     und.SCD40 CO2: %
    3844:	2064 7070 2c6d 5420 6d65 3a70 2520 2c64     d ppm, Temp: %d,
    3854:	4820 6d75 203a 6425 000a 0000 504d 3655      Hum: %d....MPU6
    3864:	3530 2030 6f6e 2074 6f66 6e75 0064 0000     050 not found...
    3874:	504d 3655 3530 2030 6361 5f63 3a78 2520     MPU6050 acc_x: %
    3884:	2c64 6120 6363 795f 203a 6425 202c 6361     d, acc_y: %d, ac
    3894:	5f63 3a7a 2520 0a64 0000 0000 504d 3655     c_z: %d.....MPU6
    38a4:	3530 2030 7967 6f72 785f 203a 6425 202c     050 gyro_x: %d, 
    38b4:	7967 6f72 795f 203a 6425 202c 7967 6f72     gyro_y: %d, gyro
    38c4:	7a5f 203a 6425 000a 4441 4c58 3433 2035     _z: %d..ADXL345 
    38d4:	6f6e 2074 6f66 6e75 0064 0000 4441 4c58     not found...ADXL
    38e4:	3433 2035 3a78 2520 2c64 7920 203a 6425     345 x: %d, y: %d
    38f4:	202c 3a7a 2520 0a64 0000 0000 5344 3233     , z: %d.....DS32
    3904:	3133 6e20 746f 6620 756f 646e 0000 0000     31 not found....
    3914:	6425 252f 2f64 6c25 2075 6425 253a 3a64     %d/%d/%lu %d:%d:
    3924:	6425 000a 5441 3432 2043 6f6e 2074 6f66     %d..AT24C not fo
    3934:	6e75 0064 7830 3025 5832 000a 4e49 3341     und.0x%02X..INA3
    3944:	3232 2031 6f6e 2074 6f66 6e75 0064 0000     221 not found...
    3954:	4e49 3341 3232 3a31 2520 3230 2058 3025     INA3221: %02X %0
    3964:	5832 000a 7245 6f72 3a72 2520 0a64 0000     2X..Error: %d...
    3974:	5341 3635 3030 6e20 746f 6620 756f 646e     AS5600 not found
    3984:	0000 0000 5341 3635 3030 6120 676e 656c     ....AS5600 angle
    3994:	725f 7761 203a 6425 202c 6e61 6c67 5f65     _raw: %d, angle_
    39a4:	6176 756c 3a65 2520 0a64 0000 414d 3358     value: %d...MAX3
    39b4:	3130 3230 6e20 746f 6620 756f 646e 0000     0102 not found..
    39c4:	414d 3358 3130 3230 203a 3025 5832 000a     MAX30102: %02X..
    39d4:	414d 3358 3130 3230 203a 6c25 2c75 2520     MAX30102: %lu, %
    39e4:	756c 000a 4d41 3847 7838 2078 6f6e 2074     lu..AMG88xx not 
    39f4:	6f66 6e75 0064 0000 6c25 2c75 2520 756c     found...%lu, %lu
    3a04:	202c 6c25 2c75 2520 756c 202c 6c25 2c75     , %lu, %lu, %lu,
    3a14:	2520 756c 202c 6c25 2c75 2520 756c 000a      %lu, %lu, %lu..
    3a24:	4842 3731 3035 6e20 746f 6620 756f 646e     BH1750 not found
    3a34:	0000 0000 4842 3731 3035 203a 6c25 2075     ....BH1750: %lu 
    3a44:	786c 0a0a 0000 0000 4853 3354 2058 6f6e     lx......SHT3X no
    3a54:	2074 6f66 6e75 0064 4853 3354 2058 6574     t found.SHT3X te
    3a64:	706d 203a 6425 202c 7568 3a6d 2520 0a64     mp: %d, hum: %d.
    3a74:	000a 0000 5041 5344 3939 3036 6e20 746f     ....APDS9960 not
    3a84:	6620 756f 646e 0000 5041 5344 3939 3036      found..APDS9960
    3a94:	5020 6f72 6978 696d 7974 203a 6425 000a      Proximity: %d..
    3aa4:	5041 5344 3939 3036 6320 656c 7261 203a     APDS9960 clear: 
    3ab4:	6425 202c 3a52 2520 2c64 4720 203a 6425     %d, R: %d, G: %d
    3ac4:	202c 3a42 2520 0a64 000a 0000 4e49 3241     , B: %d.....INA2
    3ad4:	3931 6e20 746f 6620 756f 646e 0000 0000     19 not found....
    3ae4:	4e49 3241 3931 5320 7568 746e 203a 6425     INA219 Shunt: %d
    3af4:	5675 202c 7542 3a73 2520 7564 2c56 4320     uV, Bus: %duV, C
    3b04:	7275 6572 746e 203a 6425 4175 0a0a 0000     urrent: %duA....

00003b14 <FONT_7x5>:
    3b14:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    3b24:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    3b34:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    3b44:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    3b54:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    3b64:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    3b74:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    3b84:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    3b94:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    3ba4:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    3bb4:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    3bc4:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    3bd4:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    3be4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    3bf4:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    3c04:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    3c14:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    3c24:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    3c34:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    3c44:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    3c54:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    3c64:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    3c74:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    3c84:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    3c94:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    3ca4:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    3cb4:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    3cc4:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    3cd4:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    3ce4:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

00003cf0 <ssd1306_init_array>:
    3cf0:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    3d00:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......
