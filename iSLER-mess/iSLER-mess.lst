
iSLER-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	0ed0006f          	j	8ec <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0970                	addi	a2,sp,156
   a:	0000                	unimp
   c:	0970                	addi	a2,sp,156
   e:	0000                	unimp
  10:	bda9                	j	fffffe6a <_eusrstack+0xdfff7e6a>
  12:	f3f9                	bnez	a5,ffffffd8 <_eusrstack+0xdfff7fd8>
  14:	0970                	addi	a2,sp,156
	...
  1e:	0000                	unimp
  20:	0970                	addi	a2,sp,156
  22:	0000                	unimp
  24:	0970                	addi	a2,sp,156
	...
  2e:	0000                	unimp
  30:	1878                	addi	a4,sp,60
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0970                	addi	a2,sp,156
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0970                	addi	a2,sp,156
  42:	0000                	unimp
  44:	0970                	addi	a2,sp,156
  46:	0000                	unimp
  48:	0970                	addi	a2,sp,156
  4a:	0000                	unimp
  4c:	18ce                	slli	a7,a7,0x33
  4e:	0000                	unimp
  50:	0970                	addi	a2,sp,156
  52:	0000                	unimp
  54:	1934                	addi	a3,sp,184
  56:	0000                	unimp
  58:	0970                	addi	a2,sp,156
  5a:	0000                	unimp
  5c:	0000                	unimp
  5e:	0000                	unimp
  60:	0970                	addi	a2,sp,156
  62:	0000                	unimp
  64:	0970                	addi	a2,sp,156
  66:	0000                	unimp
  68:	0970                	addi	a2,sp,156
  6a:	0000                	unimp
  6c:	0970                	addi	a2,sp,156
  6e:	0000                	unimp
  70:	0970                	addi	a2,sp,156
  72:	0000                	unimp
  74:	0970                	addi	a2,sp,156
  76:	0000                	unimp
  78:	0970                	addi	a2,sp,156
  7a:	0000                	unimp
  7c:	0970                	addi	a2,sp,156
  7e:	0000                	unimp
  80:	0970                	addi	a2,sp,156
  82:	0000                	unimp
  84:	0970                	addi	a2,sp,156
  86:	0000                	unimp
  88:	0970                	addi	a2,sp,156
  8a:	0000                	unimp
  8c:	0970                	addi	a2,sp,156
	...

Disassembly of section .text:

00000090 <mini_pad>:
{
      90:	1101                	addi	sp,sp,-32
      92:	ca26                	sw	s1,20(sp)
      94:	c84a                	sw	s2,16(sp)
      96:	c64e                	sw	s3,12(sp)
      98:	ce06                	sw	ra,28(sp)
      9a:	cc22                	sw	s0,24(sp)
      9c:	84ae                	mv	s1,a1
      9e:	89aa                	mv	s3,a0
      a0:	85b2                	mv	a1,a2
	int overflow = 0;
      a2:	4901                	li	s2,0
	if(pad_to == 0) pad_to = len;
      a4:	caa5                	beqz	a3,114 <mini_pad+0x84>
	if(len > pad_to) {
      a6:	0096d463          	bge	a3,s1,ae <mini_pad+0x1e>
      aa:	84b6                	mv	s1,a3
		overflow = 1;
      ac:	4905                	li	s2,1
	for(i = pad_to - len; i > 0; i --) {
      ae:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
      b2:	00045363          	bgez	s0,b8 <mini_pad+0x28>
      b6:	4401                	li	s0,0
      b8:	853a                	mv	a0,a4
      ba:	8622                	mv	a2,s0
      bc:	2b5000ef          	jal	ra,b70 <memset>
      c0:	872a                	mv	a4,a0
      c2:	008506b3          	add	a3,a0,s0
      c6:	4781                	li	a5,0
	for(i = len; i > 0; i --) {
      c8:	40f48633          	sub	a2,s1,a5
      cc:	04c04663          	bgtz	a2,118 <mini_pad+0x88>
      d0:	0004d363          	bgez	s1,d6 <mini_pad+0x46>
      d4:	4481                	li	s1,0
      d6:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
      da:	40e60533          	sub	a0,a2,a4
	if(overflow) {
      de:	02090463          	beqz	s2,106 <mini_pad+0x76>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
      e2:	02c77263          	bgeu	a4,a2,106 <mini_pad+0x76>
			*(pbuffer-- - 1) = '*';
      e6:	02a00793          	li	a5,42
      ea:	fef60fa3          	sb	a5,-1(a2)
      ee:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
      f2:	00d77a63          	bgeu	a4,a3,106 <mini_pad+0x76>
			*(pbuffer-- - 1) = '*';
      f6:	fef60f23          	sb	a5,-2(a2)
      fa:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
      fe:	00d77463          	bgeu	a4,a3,106 <mini_pad+0x76>
			*(pbuffer-- - 1) = '*';
     102:	fef60ea3          	sb	a5,-3(a2)
}
     106:	40f2                	lw	ra,28(sp)
     108:	4462                	lw	s0,24(sp)
     10a:	44d2                	lw	s1,20(sp)
     10c:	4942                	lw	s2,16(sp)
     10e:	49b2                	lw	s3,12(sp)
     110:	6105                	addi	sp,sp,32
     112:	8082                	ret
	if(pad_to == 0) pad_to = len;
     114:	86a6                	mv	a3,s1
     116:	bf61                	j	ae <mini_pad+0x1e>
		*(pbuffer++) = *(ptr++);
     118:	00f98633          	add	a2,s3,a5
     11c:	00064583          	lbu	a1,0(a2)
     120:	00f68633          	add	a2,a3,a5
     124:	0785                	addi	a5,a5,1
     126:	00b60023          	sb	a1,0(a2)
	for(i = len; i > 0; i --) {
     12a:	bf79                	j	c8 <mini_pad+0x38>

0000012c <mini_itoa.part.0>:
	int	negative = 0;
     12c:	4881                	li	a7,0
	if (value < 0 && !unsig) {
     12e:	00055663          	bgez	a0,13a <mini_itoa.part.0+0xe>
     132:	e681                	bnez	a3,13a <mini_itoa.part.0+0xe>
		value = -value;
     134:	40a00533          	neg	a0,a0
		negative = 1;
     138:	4885                	li	a7,1
     13a:	06100793          	li	a5,97
     13e:	c219                	beqz	a2,144 <mini_itoa.part.0+0x18>
     140:	04100793          	li	a5,65
	int	negative = 0;
     144:	883a                	mv	a6,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     146:	4e25                	li	t3,9
     148:	ff678613          	addi	a2,a5,-10
		int digit = value % radix;
     14c:	02b577b3          	remu	a5,a0,a1
     150:	832a                	mv	t1,a0
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     152:	0ff7f693          	andi	a3,a5,255
     156:	04fe6463          	bltu	t3,a5,19e <mini_itoa.part.0+0x72>
     15a:	03068693          	addi	a3,a3,48
     15e:	0ff6f693          	andi	a3,a3,255
     162:	00d80023          	sb	a3,0(a6)
     166:	00180793          	addi	a5,a6,1
		value /= radix;
     16a:	02b55533          	divu	a0,a0,a1
	} while (value > 0);
     16e:	02b37663          	bgeu	t1,a1,19a <mini_itoa.part.0+0x6e>
	if (negative)
     172:	00088863          	beqz	a7,182 <mini_itoa.part.0+0x56>
		*(pbuffer++) = '-';
     176:	02d00693          	li	a3,45
     17a:	00d78023          	sb	a3,0(a5)
     17e:	00280793          	addi	a5,a6,2
	len = (pbuffer - buffer);
     182:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     186:	4609                	li	a2,2
	*(pbuffer) = '\0';
     188:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     18c:	4681                	li	a3,0
     18e:	02c54633          	div	a2,a0,a2
     192:	17fd                	addi	a5,a5,-1
     194:	00c6c763          	blt	a3,a2,1a2 <mini_itoa.part.0+0x76>
}
     198:	8082                	ret
	} while (value > 0);
     19a:	883e                	mv	a6,a5
     19c:	bf45                	j	14c <mini_itoa.part.0+0x20>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     19e:	96b2                	add	a3,a3,a2
     1a0:	bf7d                	j	15e <mini_itoa.part.0+0x32>
		char j = buffer[i];
     1a2:	00d705b3          	add	a1,a4,a3
		buffer[i] = buffer[len-i-1];
     1a6:	0007c883          	lbu	a7,0(a5)
		char j = buffer[i];
     1aa:	0005c803          	lbu	a6,0(a1)
	for (i = 0; i < len / 2; i++) {
     1ae:	0685                	addi	a3,a3,1
		buffer[i] = buffer[len-i-1];
     1b0:	01158023          	sb	a7,0(a1)
		buffer[len-i-1] = j;
     1b4:	01078023          	sb	a6,0(a5)
	for (i = 0; i < len / 2; i++) {
     1b8:	bfe9                	j	192 <mini_itoa.part.0+0x66>

000001ba <DevSetMode>:
}

void DevSetMode(uint16_t mode) {
#if !defined(CH571_CH573)
	if(mode) {
		BB->CTRL_CFG = DEVSETMODE_ON;
     1ba:	4000c737          	lui	a4,0x4000c
     1be:	10072783          	lw	a5,256(a4) # 4000c100 <_eusrstack+0x20004100>
     1c2:	e7f7f793          	andi	a5,a5,-385
	if(mode) {
     1c6:	c115                	beqz	a0,1ea <DevSetMode+0x30>
		BB->CTRL_CFG = DEVSETMODE_ON;
     1c8:	1007e793          	ori	a5,a5,256
     1cc:	10f72023          	sw	a5,256(a4)
		RF->RF2 |= 0x330000;
     1d0:	4000d737          	lui	a4,0x4000d
     1d4:	471c                	lw	a5,8(a4)
     1d6:	003306b7          	lui	a3,0x330
     1da:	8fd5                	or	a5,a5,a3
     1dc:	c71c                	sw	a5,8(a4)
	mode = (mode == 0) ? 0x80 : mode;
#elif !defined(CH32V208)
	mode |= 0x30000;
#endif
#endif // ! CH571_CH573
	LL->CTRL_MOD = mode;
     1de:	4000c7b7          	lui	a5,0x4000c
     1e2:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
     1e6:	cba8                	sw	a0,80(a5)
}
     1e8:	8082                	ret
		BB->CTRL_CFG = DEVSETMODE_OFF;
     1ea:	0807e793          	ori	a5,a5,128
     1ee:	10f72023          	sw	a5,256(a4) # 4000d100 <_eusrstack+0x20005100>
		RF->RF2 &= 0xffcdffff;
     1f2:	4000d6b7          	lui	a3,0x4000d
     1f6:	469c                	lw	a5,8(a3)
     1f8:	ffce0737          	lui	a4,0xffce0
     1fc:	177d                	addi	a4,a4,-1
     1fe:	8ff9                	and	a5,a5,a4
     200:	c69c                	sw	a5,8(a3)
	mode = (mode == 0) ? 0x80 : mode;
     202:	08000513          	li	a0,128
     206:	bfe1                	j	1de <DevSetMode+0x24>

00000208 <RFEND_TXCTune>:

uint32_t RFEND_TXCTune(uint8_t channel) {
	// 0xbf = 2401 MHz
	RF->RF1 &= 0xfffffffe;
     208:	4000d737          	lui	a4,0x4000d
     20c:	435c                	lw	a5,4(a4)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
     20e:	6689                	lui	a3,0x2
     210:	c2c68693          	addi	a3,a3,-980 # 1c2c <channel_map>
	RF->RF1 &= 0xfffffffe;
     214:	9bf9                	andi	a5,a5,-2
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
     216:	96aa                	add	a3,a3,a0
	RF->RF1 &= 0xfffffffe;
     218:	c35c                	sw	a5,4(a4)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
     21a:	0006c783          	lbu	a5,0(a3)
     21e:	66b1                	lui	a3,0xc
     220:	5f10                	lw	a2,56(a4)
     222:	f0068693          	addi	a3,a3,-256 # bf00 <iSLER_mess.c.d6599a54+0x8daf>
     226:	07a2                	slli	a5,a5,0x8
     228:	97b6                	add	a5,a5,a3
     22a:	7681                	lui	a3,0xfffe0
     22c:	0ff68693          	addi	a3,a3,255 # fffe00ff <_eusrstack+0xdffd80ff>
     230:	8e75                	and	a2,a2,a3
     232:	8fd1                	or	a5,a5,a2
     234:	df1c                	sw	a5,56(a4)
	RF->RF1 |= 1;
     236:	435c                	lw	a5,4(a4)

	LL->TMR = 8000;
	while(!(RF->TXCTUNE_CO_CTRL & (1 << 25)) || !(RF->TXCTUNE_CO_CTRL & (1 << 26))) {
     238:	02000637          	lui	a2,0x2000
     23c:	040006b7          	lui	a3,0x4000
	RF->RF1 |= 1;
     240:	0017e793          	ori	a5,a5,1
     244:	c35c                	sw	a5,4(a4)
	LL->TMR = 8000;
     246:	4000c7b7          	lui	a5,0x4000c
     24a:	6709                	lui	a4,0x2
     24c:	f4070713          	addi	a4,a4,-192 # 1f40 <_data_lma+0x2ec>
     250:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
     254:	d3f8                	sw	a4,100(a5)
		if(LL->TMR == 0) {
     256:	4000c5b7          	lui	a1,0x4000c
	while(!(RF->TXCTUNE_CO_CTRL & (1 << 25)) || !(RF->TXCTUNE_CO_CTRL & (1 << 26))) {
     25a:	4000d737          	lui	a4,0x4000d
     25e:	09072783          	lw	a5,144(a4) # 4000d090 <_eusrstack+0x20005090>
     262:	8ff1                	and	a5,a5,a2
     264:	c789                	beqz	a5,26e <RFEND_TXCTune+0x66>
     266:	09072783          	lw	a5,144(a4)
     26a:	8ff5                	and	a5,a5,a3
     26c:	e789                	bnez	a5,276 <RFEND_TXCTune+0x6e>
		if(LL->TMR == 0) {
     26e:	20058793          	addi	a5,a1,512 # 4000c200 <_eusrstack+0x20004200>
     272:	53fc                	lw	a5,100(a5)
     274:	f7ed                	bnez	a5,25e <RFEND_TXCTune+0x56>
			break;
		}
	}

	uint8_t nCO = (uint8_t)RF->TXCTUNE_CO_CTRL & 0x3f;
     276:	4000d7b7          	lui	a5,0x4000d
     27a:	0907a503          	lw	a0,144(a5) # 4000d090 <_eusrstack+0x20005090>
	uint8_t nGA = (uint8_t)(RF->TXCTUNE_GA_CTRL >> 10) & 0x7f;
     27e:	0947a783          	lw	a5,148(a5)

	// printf("nCO,nGA ch:%u idx:%u %u,%u\n", channel, channel_map[channel], nCO,nGA);

	return (nGA << 24) | nCO;
     282:	03f57513          	andi	a0,a0,63
	uint8_t nGA = (uint8_t)(RF->TXCTUNE_GA_CTRL >> 10) & 0x7f;
     286:	83a9                	srli	a5,a5,0xa
	return (nGA << 24) | nCO;
     288:	07f7f793          	andi	a5,a5,127
     28c:	07e2                	slli	a5,a5,0x18
}
     28e:	8d5d                	or	a0,a0,a5
     290:	8082                	ret

00000292 <Neo_render_colorFlashing.constprop.0>:
	systick_millis++;
}


int8_t systick_handleTimeout(uint32_t *ref_time, uint32_t duration) {
	uint32_t now = millis();
     292:	cf01a603          	lw	a2,-784(gp) # 200000ec <systick_millis>

    return led_arr[ledIdx].packed;
}

uint32_t Neo_render_colorFlashing(WS2812_move_t* input, animation_color_t* ani, int ledIdx) {
    if (systick_handleTimeout(&input->ref_time, input->frame_duration)) {
     296:	cb418693          	addi	a3,gp,-844 # 200000b0 <move_leds>
	if (now - *ref_time > duration) {
     29a:	4a98                	lw	a4,16(a3)
     29c:	42cc                	lw	a1,4(a3)
     29e:	40e60733          	sub	a4,a2,a4
     2a2:	19c18e13          	addi	t3,gp,412 # 20000598 <led_arr>
     2a6:	0ce5f763          	bgeu	a1,a4,374 <Neo_render_colorFlashing.constprop.0+0xe2>
     2aa:	cb418793          	addi	a5,gp,-844 # 200000b0 <move_leds>
void animation_step(animation_color_t* ani) {
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
}

RGB_t animation_currentColor(animation_color_t* ani) {
    return ani->colors[ani->ref_index];
     2ae:	cd018893          	addi	a7,gp,-816 # 200000cc <color_ani>
        input->frame_value += 1;
     2b2:	0097c703          	lbu	a4,9(a5)
     2b6:	0058c583          	lbu	a1,5(a7)
		*ref_time = now;
     2ba:	cb90                	sw	a2,16(a5)
     2bc:	0008a603          	lw	a2,0(a7)
     2c0:	0705                	addi	a4,a4,1
     2c2:	0ff77713          	andi	a4,a4,255
     2c6:	00259313          	slli	t1,a1,0x2
     2ca:	961a                	add	a2,a2,t1
     2cc:	00e784a3          	sb	a4,9(a5)
     2d0:	00062883          	lw	a7,0(a2) # 2000000 <iSLER_mess.c.d6599a54+0x1ffceaf>
     2d4:	00064f83          	lbu	t6,0(a2)
     2d8:	00164f03          	lbu	t5,1(a2)
     2dc:	00264e83          	lbu	t4,2(a2)
        RGB_t color = animation_currentColor(ani);

        for (int i=0; i < NR_LEDS; i++) {
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, input->frame_value);
     2e0:	0ff00613          	li	a2,255
     2e4:	02c70633          	mul	a2,a4,a2
uint32_t Neo_render_colorFlashing(WS2812_move_t* input, animation_color_t* ani, int ledIdx) {
     2e8:	1141                	addi	sp,sp,-16
     2ea:	c646                	sw	a7,12(sp)
     2ec:	c046                	sw	a7,0(sp)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, input->frame_value);
     2ee:	06400893          	li	a7,100
     2f2:	19c18693          	addi	a3,gp,412 # 20000598 <led_arr>
     2f6:	018e0293          	addi	t0,t3,24
     2fa:	cd018813          	addi	a6,gp,-816 # 200000cc <color_ani>
     2fe:	03164633          	div	a2,a2,a7
     302:	6889                	lui	a7,0x2
     304:	b0c88893          	addi	a7,a7,-1268 # 1b0c <SIN_LUT>
     308:	0ff67613          	andi	a2,a2,255
     30c:	9646                	add	a2,a2,a7
     30e:	00064603          	lbu	a2,0(a2)
     312:	02cf8333          	mul	t1,t6,a2
     316:	02cf08b3          	mul	a7,t5,a2
     31a:	40835313          	srai	t1,t1,0x8
     31e:	02ce8633          	mul	a2,t4,a2
     322:	4088d893          	srai	a7,a7,0x8
     326:	8621                	srai	a2,a2,0x8
     328:	01f10023          	sb	t6,0(sp)
     32c:	01e100a3          	sb	t5,1(sp)
     330:	01d10123          	sb	t4,2(sp)
     334:	4382                	lw	t2,0(sp)
     336:	c21e                	sw	t2,4(sp)
     338:	00610223          	sb	t1,4(sp)
     33c:	011102a3          	sb	a7,5(sp)
     340:	00c10323          	sb	a2,6(sp)
     344:	4392                	lw	t2,4(sp)
     346:	0076a023          	sw	t2,0(a3) # 4000000 <iSLER_mess.c.d6599a54+0x3ffceaf>
        for (int i=0; i < NR_LEDS; i++) {
     34a:	0691                	addi	a3,a3,4
     34c:	fcd29ee3          	bne	t0,a3,328 <Neo_render_colorFlashing.constprop.0+0x96>
        }

        if (input->frame_value >= 100) {
     350:	06300693          	li	a3,99
     354:	00e6fb63          	bgeu	a3,a4,36a <Neo_render_colorFlashing.constprop.0+0xd8>
            input->frame_value = 0;
     358:	000784a3          	sb	zero,9(a5)
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     35c:	00484783          	lbu	a5,4(a6)
     360:	0585                	addi	a1,a1,1
     362:	02f5e5b3          	rem	a1,a1,a5
     366:	00b802a3          	sb	a1,5(a6)

            animation_step(ani);
        }
    }

    return led_arr[ledIdx].packed;
     36a:	050a                	slli	a0,a0,0x2
     36c:	9572                	add	a0,a0,t3
}
     36e:	4108                	lw	a0,0(a0)
     370:	0141                	addi	sp,sp,16
     372:	8082                	ret
    return led_arr[ledIdx].packed;
     374:	050a                	slli	a0,a0,0x2
     376:	9572                	add	a0,a0,t3
}
     378:	4108                	lw	a0,0(a0)
     37a:	8082                	ret

0000037c <WS2812FillBuffSec.constprop.0>:
#define bMOSI PA14
#endif
#endif
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     37c:	7159                	addi	sp,sp,-112
     37e:	d0ca                	sw	s2,96(sp)
     380:	c6de                	sw	s7,76(sp)
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };
#endif

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
     382:	ce81ab83          	lw	s7,-792(gp) # 200000e4 <WS2812LEDs>
	int place = WS2812LEDPlace;
     386:	ce418793          	addi	a5,gp,-796 # 200000e0 <WS2812LEDPlace>
     38a:	439c                	lw	a5,0(a5)
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     38c:	cece                	sw	s3,92(sp)
     38e:	d2a6                	sw	s1,100(sp)
     390:	c0ea                	sw	s10,64(sp)
	int place = WS2812LEDPlace;
     392:	13c18493          	addi	s1,gp,316 # 20000538 <WS2812dmabuff>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     396:	d686                	sw	ra,108(sp)
     398:	d4a2                	sw	s0,104(sp)
     39a:	ccd2                	sw	s4,88(sp)
     39c:	cad6                	sw	s5,84(sp)
     39e:	c8da                	sw	s6,80(sp)
     3a0:	c4e2                	sw	s8,72(sp)
     3a2:	c2e6                	sw	s9,68(sp)
     3a4:	de6e                	sw	s11,60(sp)
     3a6:	c62a                	sw	a0,12(sp)
     3a8:	00878d13          	addi	s10,a5,8
     3ac:	ce418913          	addi	s2,gp,-796 # 200000e0 <WS2812LEDPlace>
     3b0:	13c18993          	addi	s3,gp,316 # 20000538 <WS2812dmabuff>
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
     3b4:	0607cf63          	bltz	a5,432 <WS2812FillBuffSec.constprop.0+0xb6>
     3b8:	19c18693          	addi	a3,gp,412 # 20000598 <led_arr>
     3bc:	00279713          	slli	a4,a5,0x2
     3c0:	6a89                	lui	s5,0x2
        led_arr[input->ref_index] = COLOR_SET_BRIGHTNESS(color, input->frame_value);
     3c2:	6b09                	lui	s6,0x2
     3c4:	00e68a33          	add	s4,a3,a4
     3c8:	8d3e                	mv	s10,a5
     3ca:	19c18d93          	addi	s11,gp,412 # 20000598 <led_arr>
     3ce:	9f4a8a93          	addi	s5,s5,-1548 # 19f4 <LLE_IRQHandler+0xc0>
    if (systick_handleTimeout(&input->ref_time, input->frame_duration)) {
     3d2:	cb418413          	addi	s0,gp,-844 # 200000b0 <move_leds>
    return ani->colors[ani->ref_index];
     3d6:	cd018c93          	addi	s9,gp,-816 # 200000cc <color_ani>
        led_arr[input->ref_index] = COLOR_SET_BRIGHTNESS(color, input->frame_value);
     3da:	b0cb0b13          	addi	s6,s6,-1268 # 1b0c <SIN_LUT>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
     3de:	06098613          	addi	a2,s3,96
     3e2:	04c48a63          	beq	s1,a2,436 <WS2812FillBuffSec.constprop.0+0xba>
	{
		if( place >= ledcount )
     3e6:	077d4963          	blt	s10,s7,458 <WS2812FillBuffSec.constprop.0+0xdc>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
     3ea:	8e05                	sub	a2,a2,s1
     3ec:	4581                	li	a1,0
     3ee:	8526                	mv	a0,s1
     3f0:	780000ef          	jal	ra,b70 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
     3f4:	47b2                	lw	a5,12(sp)
     3f6:	c3a1                	beqz	a5,436 <WS2812FillBuffSec.constprop.0+0xba>
			{
				if( place == ledcount )
     3f8:	01ab9c63          	bne	s7,s10,410 <WS2812FillBuffSec.constprop.0+0x94>
				{
					// Take the DMA out of circular mode and let it expire.
#ifdef CH5xx
					R8_SPI0_INTER_EN &= ~RB_SPI_IE_DMA_END;  // Disable DMA end interrupt
     3fc:	40004737          	lui	a4,0x40004
     400:	00274783          	lbu	a5,2(a4) # 40004002 <_eusrstack+0x1fffc002>
     404:	0f77f793          	andi	a5,a5,247
     408:	00f70123          	sb	a5,2(a4)
#else
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
#endif
					WS2812BLEDInUse = 0;
     40c:	ce01a023          	sw	zero,-800(gp) # 200000dc <WS2812BLEDInUse>
				}
				place++;
     410:	0d05                	addi	s10,s10,1
     412:	a015                	j	436 <WS2812FillBuffSec.constprop.0+0xba>
		(*ptr++) = 0;
     414:	00049023          	sh	zero,0(s1)
		(*ptr++) = 0;
     418:	00049123          	sh	zero,2(s1)
		(*ptr++) = 0;
     41c:	00049223          	sh	zero,4(s1)
		(*ptr++) = 0;
     420:	00049323          	sh	zero,6(s1)
		(*ptr++) = 0;
     424:	00049423          	sh	zero,8(s1)
		place++;
     428:	0785                	addi	a5,a5,1
     42a:	04b1                	addi	s1,s1,12
		(*ptr++) = 0;
     42c:	fe049f23          	sh	zero,-2(s1)
     430:	b751                	j	3b4 <WS2812FillBuffSec.constprop.0+0x38>
	while( place < 0 && ptr != end )
     432:	ffa791e3          	bne	a5,s10,414 <WS2812FillBuffSec.constprop.0+0x98>
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
}
     436:	50b6                	lw	ra,108(sp)
     438:	5426                	lw	s0,104(sp)
	WS2812LEDPlace = place;
     43a:	01a92023          	sw	s10,0(s2)
}
     43e:	5496                	lw	s1,100(sp)
     440:	5906                	lw	s2,96(sp)
     442:	49f6                	lw	s3,92(sp)
     444:	4a66                	lw	s4,88(sp)
     446:	4ad6                	lw	s5,84(sp)
     448:	4b46                	lw	s6,80(sp)
     44a:	4bb6                	lw	s7,76(sp)
     44c:	4c26                	lw	s8,72(sp)
     44e:	4c96                	lw	s9,68(sp)
     450:	4d06                	lw	s10,64(sp)
     452:	5df2                	lw	s11,60(sp)
     454:	6165                	addi	sp,sp,112
     456:	8082                	ret
     458:	ccc1c783          	lbu	a5,-820(gp) # 200000c8 <Neo_LedCmd>
     45c:	4711                	li	a4,4
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     45e:	001d0c13          	addi	s8,s10,1
     462:	17fd                	addi	a5,a5,-1
     464:	0ff7f793          	andi	a5,a5,255
     468:	2ef76863          	bltu	a4,a5,758 <WS2812FillBuffSec.constprop.0+0x3dc>
     46c:	078a                	slli	a5,a5,0x2
     46e:	97d6                	add	a5,a5,s5
     470:	439c                	lw	a5,0(a5)
     472:	8782                	jr	a5
	uint32_t now = millis();
     474:	cf01a703          	lw	a4,-784(gp) # 200000ec <systick_millis>
	if (now - *ref_time > duration) {
     478:	481c                	lw	a5,16(s0)
     47a:	4050                	lw	a2,4(s0)
     47c:	40f707b3          	sub	a5,a4,a5
     480:	04f67463          	bgeu	a2,a5,4c8 <WS2812FillBuffSec.constprop.0+0x14c>
		*ref_time = now;
     484:	c818                	sw	a4,16(s0)
     486:	85ee                	mv	a1,s11
        for (int i=0; i < NR_LEDS; i++) {
     488:	4601                	li	a2,0
}

RGB_t animation_colorAt(animation_color_t* ani, uint8_t steps, uint8_t index) {
    return ani->colors[(index/steps) % ani->num_colors];
     48a:	4895                	li	a7,5
     48c:	4819                	li	a6,6
            led_arr[i] = animation_colorAt(ani, 5, i+input->ref_index);
     48e:	00d44703          	lbu	a4,13(s0)
     492:	004cc503          	lbu	a0,4(s9)
     496:	00c707b3          	add	a5,a4,a2
     49a:	0ff7f793          	andi	a5,a5,255
     49e:	0317d7b3          	divu	a5,a5,a7
        for (int i=0; i < NR_LEDS; i++) {
     4a2:	0605                	addi	a2,a2,1
     4a4:	02a7e7b3          	rem	a5,a5,a0
     4a8:	000ca503          	lw	a0,0(s9)
     4ac:	078a                	slli	a5,a5,0x2
     4ae:	97aa                	add	a5,a5,a0
     4b0:	439c                	lw	a5,0(a5)
            led_arr[i] = animation_colorAt(ani, 5, i+input->ref_index);
     4b2:	c19c                	sw	a5,0(a1)
     4b4:	cc3e                	sw	a5,24(sp)
     4b6:	d23e                	sw	a5,36(sp)
        for (int i=0; i < NR_LEDS; i++) {
     4b8:	0591                	addi	a1,a1,4
     4ba:	fd061ae3          	bne	a2,a6,48e <WS2812FillBuffSec.constprop.0+0x112>
        input->ref_index += input->frame_step;
     4be:	00844783          	lbu	a5,8(s0)
     4c2:	973e                	add	a4,a4,a5
     4c4:	00e406a3          	sb	a4,13(s0)
    return led_arr[ledIdx].packed;
     4c8:	000a2503          	lw	a0,0(s4)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     4cc:	6709                	lui	a4,0x2
     4ce:	00b55793          	srli	a5,a0,0xb
     4d2:	c0c70713          	addi	a4,a4,-1012 # 1c0c <bitquartets.0>
     4d6:	8bf9                	andi	a5,a5,30
     4d8:	97ba                	add	a5,a5,a4
     4da:	0007d783          	lhu	a5,0(a5)
		ptr += 6;
     4de:	04b1                	addi	s1,s1,12
     4e0:	0a11                	addi	s4,s4,4
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     4e2:	fef49a23          	sh	a5,-12(s1)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     4e6:	00755793          	srli	a5,a0,0x7
     4ea:	8bf9                	andi	a5,a5,30
     4ec:	97ba                	add	a5,a5,a4
     4ee:	0007d783          	lhu	a5,0(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     4f2:	8d62                	mv	s10,s8
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     4f4:	fef49b23          	sh	a5,-10(s1)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
     4f8:	00355793          	srli	a5,a0,0x3
     4fc:	8bf9                	andi	a5,a5,30
     4fe:	97ba                	add	a5,a5,a4
     500:	0007d783          	lhu	a5,0(a5)
     504:	fef49c23          	sh	a5,-8(s1)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
     508:	00f57793          	andi	a5,a0,15
     50c:	0786                	slli	a5,a5,0x1
     50e:	97ba                	add	a5,a5,a4
     510:	0007d783          	lhu	a5,0(a5)
     514:	fef49d23          	sh	a5,-6(s1)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     518:	01355793          	srli	a5,a0,0x13
     51c:	8bf9                	andi	a5,a5,30
     51e:	97ba                	add	a5,a5,a4
     520:	0007d783          	lhu	a5,0(a5)
     524:	fef49e23          	sh	a5,-4(s1)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     528:	00f55793          	srli	a5,a0,0xf
     52c:	8bf9                	andi	a5,a5,30
     52e:	97ba                	add	a5,a5,a4
     530:	0007d783          	lhu	a5,0(a5)
     534:	fef49f23          	sh	a5,-2(s1)
     538:	b55d                	j	3de <WS2812FillBuffSec.constprop.0+0x62>
	uint32_t now = millis();
     53a:	cf01a703          	lw	a4,-784(gp) # 200000ec <systick_millis>
	if (now - *ref_time > duration) {
     53e:	481c                	lw	a5,16(s0)
     540:	4050                	lw	a2,4(s0)
     542:	40f707b3          	sub	a5,a4,a5
     546:	f8f671e3          	bgeu	a2,a5,4c8 <WS2812FillBuffSec.constprop.0+0x14c>
        led_arr[input->prev_index] = COLOR_BLACK;       // Turn off previous LED
     54a:	00c44783          	lbu	a5,12(s0)
		*ref_time = now;
     54e:	c818                	sw	a4,16(s0)
    return ani->colors[ani->ref_index];
     550:	005cc703          	lbu	a4,5(s9)
     554:	000ca603          	lw	a2,0(s9)
     558:	078a                	slli	a5,a5,0x2
     55a:	97ee                	add	a5,a5,s11
     55c:	0007a023          	sw	zero,0(a5)
     560:	00271593          	slli	a1,a4,0x2
        led_arr[input->ref_index] = animation_currentColor(ani);
     564:	00d44783          	lbu	a5,13(s0)
     568:	962e                	add	a2,a2,a1
     56a:	420c                	lw	a1,0(a2)
     56c:	00279613          	slli	a2,a5,0x2
     570:	966e                	add	a2,a2,s11
     572:	c20c                	sw	a1,0(a2)
        uint8_t next_idx = input->ref_index + input->frame_step;
     574:	00844603          	lbu	a2,8(s0)
        input->prev_index = input->ref_index;
     578:	00f40623          	sb	a5,12(s0)
     57c:	ce2e                	sw	a1,28(sp)
        uint8_t next_idx = input->ref_index + input->frame_step;
     57e:	97b2                	add	a5,a5,a2
     580:	0ff7f793          	andi	a5,a5,255
        input->ref_index = next_idx % NR_LEDS;
     584:	4619                	li	a2,6
     586:	02c7f633          	remu	a2,a5,a2
     58a:	d22e                	sw	a1,36(sp)
     58c:	00c406a3          	sb	a2,13(s0)
        if (next_idx >= NR_LEDS) animation_step(ani);
     590:	4615                	li	a2,5
     592:	f2f67be3          	bgeu	a2,a5,4c8 <WS2812FillBuffSec.constprop.0+0x14c>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     596:	004cc783          	lbu	a5,4(s9)
     59a:	0705                	addi	a4,a4,1
     59c:	02f76733          	rem	a4,a4,a5
     5a0:	00ec82a3          	sb	a4,5(s9)
     5a4:	b715                	j	4c8 <WS2812FillBuffSec.constprop.0+0x14c>
	uint32_t now = millis();
     5a6:	cf01a703          	lw	a4,-784(gp) # 200000ec <systick_millis>
	if (now - *ref_time > duration) {
     5aa:	481c                	lw	a5,16(s0)
     5ac:	4050                	lw	a2,4(s0)
     5ae:	40f707b3          	sub	a5,a4,a5
     5b2:	f0f67be3          	bgeu	a2,a5,4c8 <WS2812FillBuffSec.constprop.0+0x14c>
		*ref_time = now;
     5b6:	c818                	sw	a4,16(s0)
     5b8:	856e                	mv	a0,s11
        for (int i = 0; i < NR_LEDS; i++) {
     5ba:	4701                	li	a4,0
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     5bc:	03100893          	li	a7,49
     5c0:	f9c00313          	li	t1,-100
     5c4:	06400e13          	li	t3,100
        for (int i = 0; i < NR_LEDS; i++) {
     5c8:	4f99                	li	t6,6
    return ani->colors[ani->ref_index];
     5ca:	005cc583          	lbu	a1,5(s9)
     5ce:	000ca783          	lw	a5,0(s9)
            uint8_t diff = input->ref_index - i;
     5d2:	00d44603          	lbu	a2,13(s0)
     5d6:	00259813          	slli	a6,a1,0x2
     5da:	97c2                	add	a5,a5,a6
     5dc:	0007c283          	lbu	t0,0(a5)
     5e0:	0017c383          	lbu	t2,1(a5)
     5e4:	0027c803          	lbu	a6,2(a5)
     5e8:	40e607b3          	sub	a5,a2,a4
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     5ec:	0ff7f793          	andi	a5,a5,255
     5f0:	02f28eb3          	mul	t4,t0,a5
     5f4:	4f01                	li	t5,0
     5f6:	031e8eb3          	mul	t4,t4,a7
     5fa:	026ecd33          	div	s10,t4,t1
     5fe:	9d16                	add	s10,s10,t0
     600:	000d4863          	bltz	s10,610 <WS2812FillBuffSec.constprop.0+0x294>
     604:	03cecf33          	div	t5,t4,t3
     608:	41e28f33          	sub	t5,t0,t5
     60c:	0fff7f13          	andi	t5,t5,255
     610:	027782b3          	mul	t0,a5,t2
     614:	4e81                	li	t4,0
     616:	031282b3          	mul	t0,t0,a7
     61a:	0262cd33          	div	s10,t0,t1
     61e:	9d1e                	add	s10,s10,t2
     620:	000d4863          	bltz	s10,630 <WS2812FillBuffSec.constprop.0+0x2b4>
     624:	03c2ceb3          	div	t4,t0,t3
     628:	41d38eb3          	sub	t4,t2,t4
     62c:	0ffefe93          	andi	t4,t4,255
     630:	030787b3          	mul	a5,a5,a6
     634:	4381                	li	t2,0
     636:	031787b3          	mul	a5,a5,a7
     63a:	0267c2b3          	div	t0,a5,t1
     63e:	92c2                	add	t0,t0,a6
     640:	0002c863          	bltz	t0,650 <WS2812FillBuffSec.constprop.0+0x2d4>
     644:	03c7c7b3          	div	a5,a5,t3
     648:	40f807b3          	sub	a5,a6,a5
     64c:	0ff7f393          	andi	t2,a5,255
     650:	00271293          	slli	t0,a4,0x2
     654:	92ee                	add	t0,t0,s11
     656:	0002a023          	sw	zero,0(t0)
     65a:	01e50023          	sb	t5,0(a0)
     65e:	01d500a3          	sb	t4,1(a0)
     662:	00750123          	sb	t2,2(a0)
        for (int i = 0; i < NR_LEDS; i++) {
     666:	0705                	addi	a4,a4,1
     668:	0511                	addi	a0,a0,4
     66a:	f7f710e3          	bne	a4,t6,5ca <WS2812FillBuffSec.constprop.0+0x24e>
        uint8_t next_increment = input->ref_index + input->frame_step;
     66e:	00844783          	lbu	a5,8(s0)
     672:	97b2                	add	a5,a5,a2
     674:	0ff7f793          	andi	a5,a5,255
        input->ref_index = next_increment % NR_LEDS;
     678:	02e7f733          	remu	a4,a5,a4
     67c:	00e406a3          	sb	a4,13(s0)
        if (next_increment >= NR_LEDS) {
     680:	4715                	li	a4,5
     682:	e4f773e3          	bgeu	a4,a5,4c8 <WS2812FillBuffSec.constprop.0+0x14c>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     686:	004cc783          	lbu	a5,4(s9)
     68a:	0585                	addi	a1,a1,1
     68c:	02f5e5b3          	rem	a1,a1,a5
     690:	00bc82a3          	sb	a1,5(s9)
     694:	bd15                	j	4c8 <WS2812FillBuffSec.constprop.0+0x14c>
	uint32_t now = millis();
     696:	cf01a703          	lw	a4,-784(gp) # 200000ec <systick_millis>
	if (now - *ref_time > duration) {
     69a:	481c                	lw	a5,16(s0)
     69c:	4050                	lw	a2,4(s0)
     69e:	40f707b3          	sub	a5,a4,a5
     6a2:	e2f673e3          	bgeu	a2,a5,4c8 <WS2812FillBuffSec.constprop.0+0x14c>
		*ref_time = now;
     6a6:	c818                	sw	a4,16(s0)
        input->frame_value += 3;
     6a8:	00944703          	lbu	a4,9(s0)
    return ani->colors[ani->ref_index];
     6ac:	005cc603          	lbu	a2,5(s9)
     6b0:	000ca783          	lw	a5,0(s9)
     6b4:	070d                	addi	a4,a4,3
     6b6:	0ff77713          	andi	a4,a4,255
     6ba:	00261593          	slli	a1,a2,0x2
     6be:	97ae                	add	a5,a5,a1
     6c0:	00e404a3          	sb	a4,9(s0)
     6c4:	0007a883          	lw	a7,0(a5)
     6c8:	0007c503          	lbu	a0,0(a5)
     6cc:	0017c583          	lbu	a1,1(a5)
     6d0:	0027c803          	lbu	a6,2(a5)
        led_arr[input->ref_index] = COLOR_SET_BRIGHTNESS(color, input->frame_value);
     6d4:	0ff00793          	li	a5,255
     6d8:	02f707b3          	mul	a5,a4,a5
     6dc:	d246                	sw	a7,36(sp)
     6de:	d646                	sw	a7,44(sp)
     6e0:	d046                	sw	a7,32(sp)
     6e2:	06400893          	li	a7,100
     6e6:	0317c7b3          	div	a5,a5,a7
     6ea:	0ff7f793          	andi	a5,a5,255
     6ee:	97da                	add	a5,a5,s6
     6f0:	0007c783          	lbu	a5,0(a5)
     6f4:	02f50533          	mul	a0,a0,a5
     6f8:	02f585b3          	mul	a1,a1,a5
     6fc:	8521                	srai	a0,a0,0x8
     6fe:	02a10223          	sb	a0,36(sp)
     702:	02f807b3          	mul	a5,a6,a5
     706:	85a1                	srai	a1,a1,0x8
     708:	02b102a3          	sb	a1,37(sp)
     70c:	87a1                	srai	a5,a5,0x8
     70e:	02f10323          	sb	a5,38(sp)
     712:	00d44783          	lbu	a5,13(s0)
     716:	5512                	lw	a0,36(sp)
     718:	00279593          	slli	a1,a5,0x2
     71c:	95ee                	add	a1,a1,s11
     71e:	c188                	sw	a0,0(a1)
     720:	d42a                	sw	a0,40(sp)
        if (input->frame_value >= 100) {
     722:	06300593          	li	a1,99
     726:	dae5f1e3          	bgeu	a1,a4,4c8 <WS2812FillBuffSec.constprop.0+0x14c>
            uint8_t next_idx = input->ref_index + input->frame_step;
     72a:	00844703          	lbu	a4,8(s0)
            input->frame_value = 0;
     72e:	000404a3          	sb	zero,9(s0)
            uint8_t next_idx = input->ref_index + input->frame_step;
     732:	97ba                	add	a5,a5,a4
     734:	0ff7f793          	andi	a5,a5,255
            input->ref_index = next_idx % NR_LEDS;
     738:	4719                	li	a4,6
     73a:	02e7f733          	remu	a4,a5,a4
     73e:	00e406a3          	sb	a4,13(s0)
            if (next_idx >= NR_LEDS) {
     742:	4715                	li	a4,5
     744:	d8f772e3          	bgeu	a4,a5,4c8 <WS2812FillBuffSec.constprop.0+0x14c>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     748:	004cc783          	lbu	a5,4(s9)
     74c:	0605                	addi	a2,a2,1
     74e:	02f66633          	rem	a2,a2,a5
     752:	00cc82a3          	sb	a2,5(s9)
     756:	bb8d                	j	4c8 <WS2812FillBuffSec.constprop.0+0x14c>
            break;
        case NEO_COLOR_FLASHING:
            return Neo_render_colorFlashing(&move_leds, &color_ani, ledIdx);
            break;
        default:
            return Neo_render_colorFlashing(&move_leds, &color_ani, ledIdx);
     758:	856a                	mv	a0,s10
     75a:	3e25                	jal	292 <Neo_render_colorFlashing.constprop.0>
     75c:	bb85                	j	4cc <WS2812FillBuffSec.constprop.0+0x150>

0000075e <DelaySysTick.constprop.0>:
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
#elif defined(CH32V20x) || defined(CH32V30x) || defined(CH32X03x) || defined(CH582_CH583) || defined(CH591_CH592)
	uint64_t targend = SysTick->CNT + n;
     75e:	e000f7b7          	lui	a5,0xe000f
     762:	4794                	lw	a3,8(a5)
     764:	47d8                	lw	a4,12(a5)
     766:	0003c7b7          	lui	a5,0x3c
     76a:	6cc78793          	addi	a5,a5,1740 # 3c6cc <iSLER_mess.c.d6599a54+0x3957b>
     76e:	97b6                	add	a5,a5,a3
     770:	00d7b633          	sltu	a2,a5,a3
     774:	963a                	add	a2,a2,a4
	while( ((int64_t)( SysTick->CNT - targend )) < 0 );
     776:	e000f837          	lui	a6,0xe000f
     77a:	00882503          	lw	a0,8(a6) # e000f008 <_eusrstack+0xc0007008>
     77e:	00c82583          	lw	a1,12(a6)
     782:	40f50733          	sub	a4,a0,a5
     786:	00e536b3          	sltu	a3,a0,a4
     78a:	40c58733          	sub	a4,a1,a2
     78e:	8f15                	sub	a4,a4,a3
     790:	fe0745e3          	bltz	a4,77a <DelaySysTick.constprop.0+0x1c>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     794:	8082                	ret

00000796 <blink>:
	.msgCode = 0xC1C2,
	.dest = {0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6},
	.group_id = 0x55,
};

void blink(int n) {
     796:	1141                	addi	sp,sp,-16
     798:	c422                	sw	s0,8(sp)
     79a:	c226                	sw	s1,4(sp)
     79c:	c04a                	sw	s2,0(sp)
     79e:	c606                	sw	ra,12(sp)
	for(int i = n-1; i >= 0; i--) {
     7a0:	fff50413          	addi	s0,a0,-1
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
     7a4:	400014b7          	lui	s1,0x40001
	for(int i = n-1; i >= 0; i--) {
     7a8:	597d                	li	s2,-1
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
     7aa:	0ac4a783          	lw	a5,172(s1) # 400010ac <_eusrstack+0x1fff90ac>
     7ae:	1007e793          	ori	a5,a5,256
     7b2:	0af4a623          	sw	a5,172(s1)
		Delay_Ms(33);
     7b6:	3765                	jal	75e <DelaySysTick.constprop.0>
		funDigitalWrite( LED, FUN_HIGH ); // Turn off LED
     7b8:	0a84a783          	lw	a5,168(s1)
     7bc:	1007e793          	ori	a5,a5,256
     7c0:	0af4a423          	sw	a5,168(s1)
		if(i) Delay_Ms(33);
     7c4:	c011                	beqz	s0,7c8 <blink+0x32>
     7c6:	3f61                	jal	75e <DelaySysTick.constprop.0>
	for(int i = n-1; i >= 0; i--) {
     7c8:	147d                	addi	s0,s0,-1
     7ca:	ff2410e3          	bne	s0,s2,7aa <blink+0x14>
	}
}
     7ce:	40b2                	lw	ra,12(sp)
     7d0:	4422                	lw	s0,8(sp)
     7d2:	4492                	lw	s1,4(sp)
     7d4:	4902                	lw	s2,0(sp)
     7d6:	0141                	addi	sp,sp,16
     7d8:	8082                	ret

000007da <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     7da:	e00007b7          	lui	a5,0xe0000
     7de:	3807a783          	lw	a5,896(a5) # e0000380 <_eusrstack+0xbfff8380>
}
     7e2:	8082                	ret

000007e4 <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     7e4:	e0000737          	lui	a4,0xe0000
     7e8:	38072783          	lw	a5,896(a4) # e0000380 <_eusrstack+0xbfff8380>
WEAK int _write(int fd, const char *buf, int size)
     7ec:	7139                	addi	sp,sp,-64
     7ee:	de06                	sw	ra,60(sp)
     7f0:	dc22                	sw	s0,56(sp)
     7f2:	da26                	sw	s1,52(sp)
     7f4:	d84a                	sw	s2,48(sp)
     7f6:	d64e                	sw	s3,44(sp)
     7f8:	d452                	sw	s4,40(sp)
     7fa:	d256                	sw	s5,36(sp)
     7fc:	d05a                	sw	s6,32(sp)
     7fe:	ce5e                	sw	s7,28(sp)
     800:	cc62                	sw	s8,24(sp)
     802:	ca66                	sw	s9,20(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     804:	0c07f793          	andi	a5,a5,192
     808:	0c000693          	li	a3,192
     80c:	0ad78a63          	beq	a5,a3,8c0 <_write.constprop.0+0xdc>
	char buffer[4] = { 0 };
     810:	c602                	sw	zero,12(sp)
     812:	842e                	mv	s0,a1
	if( size == 0 )
     814:	e9c5                	bnez	a1,8c4 <_write.constprop.0+0xe0>
		lastdmd = (*DMDATA0);
     816:	38072783          	lw	a5,896(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     81a:	c789                	beqz	a5,824 <_write.constprop.0+0x40>
     81c:	0807f793          	andi	a5,a5,128
     820:	e391                	bnez	a5,824 <_write.constprop.0+0x40>
     822:	3f65                	jal	7da <internal_handle_input.constprop.0>
}
     824:	50f2                	lw	ra,60(sp)
     826:	8522                	mv	a0,s0
     828:	5462                	lw	s0,56(sp)
     82a:	54d2                	lw	s1,52(sp)
     82c:	5942                	lw	s2,48(sp)
     82e:	59b2                	lw	s3,44(sp)
     830:	5a22                	lw	s4,40(sp)
     832:	5a92                	lw	s5,36(sp)
     834:	5b02                	lw	s6,32(sp)
     836:	4bf2                	lw	s7,28(sp)
     838:	4c62                	lw	s8,24(sp)
     83a:	4cd2                	lw	s9,20(sp)
     83c:	6121                	addi	sp,sp,64
     83e:	8082                	ret
		int tosend = size - place;
     840:	40940cb3          	sub	s9,s0,s1
     844:	8966                	mv	s2,s9
     846:	019ad363          	bge	s5,s9,84c <_write.constprop.0+0x68>
     84a:	491d                	li	s2,7
     84c:	001b0793          	addi	a5,s6,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     850:	380a2703          	lw	a4,896(s4)
     854:	380a0693          	addi	a3,s4,896
     858:	08077613          	andi	a2,a4,128
     85c:	ee21                	bnez	a2,8b4 <_write.constprop.0+0xd0>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     85e:	c311                	beqz	a4,862 <_write.constprop.0+0x7e>
     860:	3fad                	jal	7da <internal_handle_input.constprop.0>
			buffer[t-3] = buf[t+place];
     862:	4601                	li	a2,0
     864:	019bd463          	bge	s7,s9,86c <_write.constprop.0+0x88>
     868:	ffd90613          	addi	a2,s2,-3
     86c:	00348593          	addi	a1,s1,3
     870:	95ce                	add	a1,a1,s3
     872:	0068                	addi	a0,sp,12
     874:	2639                	jal	b82 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     876:	47b2                	lw	a5,12(sp)
     878:	00998733          	add	a4,s3,s1
     87c:	38fa2223          	sw	a5,900(s4)
		t = 0;
     880:	4781                	li	a5,0
			buffer[t+1] = buf[t+place];
     882:	00074603          	lbu	a2,0(a4)
     886:	0785                	addi	a5,a5,1
     888:	0074                	addi	a3,sp,12
     88a:	96be                	add	a3,a3,a5
     88c:	00c68023          	sb	a2,0(a3)
		while( t < tosend && t < 3 )
     890:	00f90563          	beq	s2,a5,89a <_write.constprop.0+0xb6>
     894:	0705                	addi	a4,a4,1
     896:	ff8796e3          	bne	a5,s8,882 <_write.constprop.0+0x9e>
		buffer[0] = 0x80 | (tosend + 4);
     89a:	00490793          	addi	a5,s2,4
     89e:	f807e793          	ori	a5,a5,-128
     8a2:	00f10623          	sb	a5,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     8a6:	47b2                	lw	a5,12(sp)
		place += tosend;
     8a8:	94ca                	add	s1,s1,s2
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     8aa:	38fa2023          	sw	a5,896(s4)
	while( place < size )
     8ae:	f884c9e3          	blt	s1,s0,840 <_write.constprop.0+0x5c>
     8b2:	bf8d                	j	824 <_write.constprop.0+0x40>
			if( timeout-- == 0 )
     8b4:	17fd                	addi	a5,a5,-1
     8b6:	ffc9                	bnez	a5,850 <_write.constprop.0+0x6c>
				*DMDATA0 |= 0xc0;
     8b8:	429c                	lw	a5,0(a3)
     8ba:	0c07e793          	ori	a5,a5,192
     8be:	c29c                	sw	a5,0(a3)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     8c0:	4401                	li	s0,0
     8c2:	b78d                	j	824 <_write.constprop.0+0x40>
     8c4:	89aa                	mv	s3,a0
	if( size == 0 )
     8c6:	4481                	li	s1,0
     8c8:	4a9d                	li	s5,7
		int tosend = size - place;
     8ca:	00100b37          	lui	s6,0x100
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     8ce:	e0000a37          	lui	s4,0xe0000
			buffer[t-3] = buf[t+place];
     8d2:	4b89                	li	s7,2
		while( t < tosend && t < 3 )
     8d4:	4c0d                	li	s8,3
     8d6:	bfe1                	j	8ae <_write.constprop.0+0xca>

000008d8 <__puts_uart>:
{
     8d8:	1141                	addi	sp,sp,-16
     8da:	c422                	sw	s0,8(sp)
     8dc:	c606                	sw	ra,12(sp)
     8de:	842e                	mv	s0,a1
	_write( 0, s, len );
     8e0:	3711                	jal	7e4 <_write.constprop.0>
}
     8e2:	40b2                	lw	ra,12(sp)
     8e4:	8522                	mv	a0,s0
     8e6:	4422                	lw	s0,8(sp)
     8e8:	0141                	addi	sp,sp,16
     8ea:	8082                	ret

000008ec <handle_reset>:
	asm volatile( "\n\
     8ec:	20000197          	auipc	gp,0x20000
     8f0:	b1018193          	addi	gp,gp,-1264 # 200003fc <__global_pointer$>
     8f4:	20007117          	auipc	sp,0x20007
     8f8:	70c10113          	addi	sp,sp,1804 # 20008000 <_eusrstack>
	asm volatile(
     8fc:	ce018513          	addi	a0,gp,-800 # 200000dc <WS2812BLEDInUse>
     900:	1b418593          	addi	a1,gp,436 # 200005b0 <_ebss>
     904:	00b57763          	bgeu	a0,a1,912 <handle_reset+0x26>
     908:	00052023          	sw	zero,0(a0)
     90c:	0511                	addi	a0,a0,4
     90e:	feb56de3          	bltu	a0,a1,908 <handle_reset+0x1c>
     912:	00001517          	auipc	a0,0x1
     916:	34250513          	addi	a0,a0,834 # 1c54 <_data_lma>
     91a:	c0418593          	addi	a1,gp,-1020 # 20000000 <Neo_Event_list>
     91e:	ce018613          	addi	a2,gp,-800 # 200000dc <WS2812BLEDInUse>
     922:	00c58a63          	beq	a1,a2,936 <handle_reset+0x4a>
     926:	00052283          	lw	t0,0(a0)
     92a:	0055a023          	sw	t0,0(a1)
     92e:	0511                	addi	a0,a0,4
     930:	0591                	addi	a1,a1,4
     932:	fec5eae3          	bltu	a1,a2,926 <handle_reset+0x3a>
	asm volatile(
     936:	00000793          	li	a5,0
     93a:	42fd                	li	t0,31
     93c:	bc029073          	csrw	0xbc0,t0
     940:	6289                	lui	t0,0x2
     942:	88828293          	addi	t0,t0,-1912 # 1888 <SysTick_Handler+0x10>
     946:	3002a073          	csrs	mstatus,t0
     94a:	fffff297          	auipc	t0,0xfffff
     94e:	6b628293          	addi	t0,t0,1718 # 0 <InterruptVector>
     952:	0032e293          	ori	t0,t0,3
     956:	30529073          	csrw	mtvec,t0
	SysTick->CTLR = 1;
     95a:	e000f7b7          	lui	a5,0xe000f
     95e:	4705                	li	a4,1
     960:	c398                	sw	a4,0(a5)
	asm volatile(
     962:	6785                	lui	a5,0x1
     964:	ef678793          	addi	a5,a5,-266 # ef6 <main>
     968:	34179073          	csrw	mepc,a5
     96c:	30200073          	mret

00000970 <ADC1_2_IRQHandler>:
	asm volatile( "1: j 1b" );
     970:	a001                	j	970 <ADC1_2_IRQHandler>

00000972 <strlen>:
{
     972:	87aa                	mv	a5,a0
	for (; *s; s++);
     974:	0007c703          	lbu	a4,0(a5)
     978:	e701                	bnez	a4,980 <strlen+0xe>
}
     97a:	40a78533          	sub	a0,a5,a0
     97e:	8082                	ret
	for (; *s; s++);
     980:	0785                	addi	a5,a5,1
     982:	bfcd                	j	974 <strlen+0x2>

00000984 <mini_vpprintf>:
{
     984:	7159                	addi	sp,sp,-112
     986:	d4a2                	sw	s0,104(sp)
     988:	d2a6                	sw	s1,100(sp)
     98a:	d0ca                	sw	s2,96(sp)
     98c:	cece                	sw	s3,92(sp)
     98e:	ccd2                	sw	s4,88(sp)
     990:	cad6                	sw	s5,84(sp)
     992:	c6de                	sw	s7,76(sp)
     994:	d686                	sw	ra,108(sp)
     996:	c8da                	sw	s6,80(sp)
     998:	c4e2                	sw	s8,72(sp)
     99a:	c2e6                	sw	s9,68(sp)
     99c:	c0ea                	sw	s10,64(sp)
     99e:	84aa                	mv	s1,a0
     9a0:	892e                	mv	s2,a1
     9a2:	8432                	mv	s0,a2
     9a4:	8bb6                	mv	s7,a3
	int n = 0;
     9a6:	4981                	li	s3,0
		if (ch!='%') {
     9a8:	02500a13          	li	s4,37
				pad_to = pad_to * 10 + (ch - '0');
     9ac:	4aa9                	li	s5,10
	while ((ch=*(fmt++))) {
     9ae:	00044783          	lbu	a5,0(s0)
     9b2:	00140c13          	addi	s8,s0,1
     9b6:	00f107a3          	sb	a5,15(sp)
     9ba:	e385                	bnez	a5,9da <mini_vpprintf+0x56>
}
     9bc:	50b6                	lw	ra,108(sp)
     9be:	5426                	lw	s0,104(sp)
     9c0:	5496                	lw	s1,100(sp)
     9c2:	5906                	lw	s2,96(sp)
     9c4:	4a66                	lw	s4,88(sp)
     9c6:	4ad6                	lw	s5,84(sp)
     9c8:	4b46                	lw	s6,80(sp)
     9ca:	4bb6                	lw	s7,76(sp)
     9cc:	4c26                	lw	s8,72(sp)
     9ce:	4c96                	lw	s9,68(sp)
     9d0:	4d06                	lw	s10,64(sp)
     9d2:	854e                	mv	a0,s3
     9d4:	49f6                	lw	s3,92(sp)
     9d6:	6165                	addi	sp,sp,112
     9d8:	8082                	ret
		if (ch!='%') {
     9da:	01478c63          	beq	a5,s4,9f2 <mini_vpprintf+0x6e>
			len = puts(&ch, len, buf);
     9de:	864a                	mv	a2,s2
     9e0:	4585                	li	a1,1
     9e2:	00f10513          	addi	a0,sp,15
     9e6:	9482                	jalr	s1
     9e8:	8b5e                	mv	s6,s7
	while ((ch=*(fmt++))) {
     9ea:	8462                	mv	s0,s8
		n = n + len;
     9ec:	99aa                	add	s3,s3,a0
     9ee:	8bda                	mv	s7,s6
     9f0:	bf7d                	j	9ae <mini_vpprintf+0x2a>
			ch=*(fmt++);
     9f2:	00144783          	lbu	a5,1(s0)
			if (ch == '0') pad_char = '0';
     9f6:	03000693          	li	a3,48
			ch=*(fmt++);
     9fa:	00240713          	addi	a4,s0,2
     9fe:	00f107a3          	sb	a5,15(sp)
			if (ch == '0') pad_char = '0';
     a02:	03000c13          	li	s8,48
     a06:	06d79f63          	bne	a5,a3,a84 <mini_vpprintf+0x100>
				ch=*(fmt++);
     a0a:	843a                	mv	s0,a4
     a0c:	4d01                	li	s10,0
     a0e:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     a10:	4625                	li	a2,9
     a12:	a801                	j	a22 <mini_vpprintf+0x9e>
				pad_to = pad_to * 10 + (ch - '0');
     a14:	035d0d33          	mul	s10,s10,s5
				ch=*(fmt++);
     a18:	00044783          	lbu	a5,0(s0)
     a1c:	0405                	addi	s0,s0,1
     a1e:	4705                	li	a4,1
				pad_to = pad_to * 10 + (ch - '0');
     a20:	9d36                	add	s10,s10,a3
			while (ch >= '0' && ch <= '9') {
     a22:	fd078693          	addi	a3,a5,-48
     a26:	0ff6f593          	andi	a1,a3,255
     a2a:	feb675e3          	bgeu	a2,a1,a14 <mini_vpprintf+0x90>
     a2e:	c319                	beqz	a4,a34 <mini_vpprintf+0xb0>
     a30:	00f107a3          	sb	a5,15(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     a34:	4761                	li	a4,24
     a36:	8cea                	mv	s9,s10
     a38:	01a75363          	bge	a4,s10,a3e <mini_vpprintf+0xba>
     a3c:	4ce1                	li	s9,24
			if (ch == 'l') {
     a3e:	06c00693          	li	a3,108
			char l = 0;
     a42:	4701                	li	a4,0
			if (ch == 'l') {
     a44:	00d79863          	bne	a5,a3,a54 <mini_vpprintf+0xd0>
				ch=*(fmt++);
     a48:	00044783          	lbu	a5,0(s0)
				l = 1;
     a4c:	4705                	li	a4,1
				ch=*(fmt++);
     a4e:	0405                	addi	s0,s0,1
     a50:	00f107a3          	sb	a5,15(sp)
			switch (ch) {
     a54:	00f14683          	lbu	a3,15(sp)
     a58:	06400793          	li	a5,100
     a5c:	06f68163          	beq	a3,a5,abe <mini_vpprintf+0x13a>
     a60:	02d7e563          	bltu	a5,a3,a8a <mini_vpprintf+0x106>
     a64:	05800793          	li	a5,88
     a68:	08f68e63          	beq	a3,a5,b04 <mini_vpprintf+0x180>
     a6c:	06300793          	li	a5,99
     a70:	0af68c63          	beq	a3,a5,b28 <mini_vpprintf+0x1a4>
     a74:	d6a1                	beqz	a3,9bc <mini_vpprintf+0x38>
					len = puts(&ch, len, buf);
     a76:	864a                	mv	a2,s2
     a78:	4585                	li	a1,1
     a7a:	00f10513          	addi	a0,sp,15
     a7e:	9482                	jalr	s1
     a80:	8b5e                	mv	s6,s7
     a82:	b7ad                	j	9ec <mini_vpprintf+0x68>
			char pad_char = ' ';
     a84:	02000c13          	li	s8,32
     a88:	b749                	j	a0a <mini_vpprintf+0x86>
			switch (ch) {
     a8a:	07500793          	li	a5,117
     a8e:	02f68863          	beq	a3,a5,abe <mini_vpprintf+0x13a>
     a92:	07800793          	li	a5,120
     a96:	06f68763          	beq	a3,a5,b04 <mini_vpprintf+0x180>
     a9a:	07300793          	li	a5,115
     a9e:	fcf69ce3          	bne	a3,a5,a76 <mini_vpprintf+0xf2>
					ptr = va_arg(va, char*);
     aa2:	004b8b13          	addi	s6,s7,4
     aa6:	000bab83          	lw	s7,0(s7)
					len = mini_strlen(ptr);
     aaa:	855e                	mv	a0,s7
     aac:	35d9                	jal	972 <strlen>
     aae:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     ab0:	080d0963          	beqz	s10,b42 <mini_vpprintf+0x1be>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     ab4:	1038                	addi	a4,sp,40
     ab6:	86e6                	mv	a3,s9
     ab8:	8662                	mv	a2,s8
     aba:	855e                	mv	a0,s7
     abc:	a025                	j	ae4 <mini_vpprintf+0x160>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     abe:	004b8b13          	addi	s6,s7,4
					if(l) {
     ac2:	cb05                	beqz	a4,af2 <mini_vpprintf+0x16e>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     ac4:	f8b68693          	addi	a3,a3,-117
     ac8:	0818                	addi	a4,sp,16
     aca:	0016b693          	seqz	a3,a3
     ace:	000ba503          	lw	a0,0(s7)
     ad2:	4601                	li	a2,0
     ad4:	45a9                	li	a1,10
     ad6:	e56ff0ef          	jal	ra,12c <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ada:	1038                	addi	a4,sp,40
     adc:	86e6                	mv	a3,s9
     ade:	8662                	mv	a2,s8
     ae0:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ae2:	0808                	addi	a0,sp,16
     ae4:	dacff0ef          	jal	ra,90 <mini_pad>
     ae8:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     aea:	864a                	mv	a2,s2
     aec:	1028                	addi	a0,sp,40
     aee:	9482                	jalr	s1
					break;
     af0:	bdf5                	j	9ec <mini_vpprintf+0x68>
						if(ch == 'u') {
     af2:	07500793          	li	a5,117
     af6:	0818                	addi	a4,sp,16
     af8:	00f69463          	bne	a3,a5,b00 <mini_vpprintf+0x17c>
	if (radix > 16)
     afc:	4685                	li	a3,1
     afe:	bfc1                	j	ace <mini_vpprintf+0x14a>
     b00:	4681                	li	a3,0
     b02:	b7f1                	j	ace <mini_vpprintf+0x14a>
					if(l) {
     b04:	000ba503          	lw	a0,0(s7)
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     b08:	fa868613          	addi	a2,a3,-88
     b0c:	0818                	addi	a4,sp,16
     b0e:	4685                	li	a3,1
     b10:	00163613          	seqz	a2,a2
     b14:	45c1                	li	a1,16
     b16:	e16ff0ef          	jal	ra,12c <mini_itoa.part.0>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     b1a:	004b8b13          	addi	s6,s7,4
	if (radix > 16)
     b1e:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     b20:	1038                	addi	a4,sp,40
     b22:	86e6                	mv	a3,s9
     b24:	8662                	mv	a2,s8
     b26:	bf75                	j	ae2 <mini_vpprintf+0x15e>
					ch = (char)(va_arg(va, int));
     b28:	000ba783          	lw	a5,0(s7)
     b2c:	004b8b13          	addi	s6,s7,4
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     b30:	1038                	addi	a4,sp,40
					ch = (char)(va_arg(va, int));
     b32:	00f107a3          	sb	a5,15(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     b36:	86e6                	mv	a3,s9
     b38:	8662                	mv	a2,s8
     b3a:	4585                	li	a1,1
     b3c:	00f10513          	addi	a0,sp,15
     b40:	b755                	j	ae4 <mini_vpprintf+0x160>
						len = puts(ptr, len, buf);
     b42:	864a                	mv	a2,s2
     b44:	855e                	mv	a0,s7
     b46:	b765                	j	aee <mini_vpprintf+0x16a>

00000b48 <printf>:
{
     b48:	7139                	addi	sp,sp,-64
     b4a:	d432                	sw	a2,40(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     b4c:	862a                	mv	a2,a0
     b4e:	6505                	lui	a0,0x1
{
     b50:	d22e                	sw	a1,36(sp)
     b52:	d636                	sw	a3,44(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     b54:	4581                	li	a1,0
	va_start( args, format );
     b56:	1054                	addi	a3,sp,36
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     b58:	8d850513          	addi	a0,a0,-1832 # 8d8 <__puts_uart>
{
     b5c:	ce06                	sw	ra,28(sp)
     b5e:	d83a                	sw	a4,48(sp)
     b60:	da3e                	sw	a5,52(sp)
     b62:	dc42                	sw	a6,56(sp)
     b64:	de46                	sw	a7,60(sp)
	va_start( args, format );
     b66:	c636                	sw	a3,12(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     b68:	3d31                	jal	984 <mini_vpprintf>
}
     b6a:	40f2                	lw	ra,28(sp)
     b6c:	6121                	addi	sp,sp,64
     b6e:	8082                	ret

00000b70 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     b70:	962a                	add	a2,a2,a0
     b72:	87aa                	mv	a5,a0
     b74:	00c79363          	bne	a5,a2,b7a <memset+0xa>
     b78:	8082                	ret
     b7a:	00b78023          	sb	a1,0(a5)
     b7e:	0785                	addi	a5,a5,1
     b80:	bfd5                	j	b74 <memset+0x4>

00000b82 <memcpy>:
{
     b82:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     b84:	00f61363          	bne	a2,a5,b8a <memcpy+0x8>
}
     b88:	8082                	ret
	for (; n; n--) *d++ = *s++;
     b8a:	00f58733          	add	a4,a1,a5
     b8e:	00074683          	lbu	a3,0(a4)
     b92:	00f50733          	add	a4,a0,a5
     b96:	0785                	addi	a5,a5,1
     b98:	00d70023          	sb	a3,0(a4)
     b9c:	b7e5                	j	b84 <memcpy+0x2>

00000b9e <memcmp>:
{
     b9e:	4701                	li	a4,0
	for (; n && *l == *r; n--, l++, r++);
     ba0:	02e60063          	beq	a2,a4,bc0 <memcmp+0x22>
     ba4:	00e507b3          	add	a5,a0,a4
     ba8:	0705                	addi	a4,a4,1
     baa:	00e586b3          	add	a3,a1,a4
     bae:	0007c783          	lbu	a5,0(a5)
     bb2:	fff6c683          	lbu	a3,-1(a3)
     bb6:	fed785e3          	beq	a5,a3,ba0 <memcmp+0x2>
	return n ? *l-*r : 0;
     bba:	40d78533          	sub	a0,a5,a3
}
     bbe:	8082                	ret
	return n ? *l-*r : 0;
     bc0:	4501                	li	a0,0
     bc2:	8082                	ret

00000bc4 <puts>:
{
     bc4:	1141                	addi	sp,sp,-16
     bc6:	c606                	sw	ra,12(sp)
     bc8:	c422                	sw	s0,8(sp)
     bca:	c226                	sw	s1,4(sp)
     bcc:	84aa                	mv	s1,a0
	int sl = strlen( s );
     bce:	3355                	jal	972 <strlen>
     bd0:	842a                	mv	s0,a0
	_write(0, s, sl );
     bd2:	85aa                	mv	a1,a0
     bd4:	8526                	mv	a0,s1
     bd6:	3139                	jal	7e4 <_write.constprop.0>
	_write(0, "\n", 1 );
     bd8:	6509                	lui	a0,0x2
     bda:	4585                	li	a1,1
     bdc:	a0850513          	addi	a0,a0,-1528 # 1a08 <LLE_IRQHandler+0xd4>
     be0:	3111                	jal	7e4 <_write.constprop.0>
}
     be2:	40b2                	lw	ra,12(sp)
     be4:	00140513          	addi	a0,s0,1
     be8:	4422                	lw	s0,8(sp)
     bea:	4492                	lw	s1,4(sp)
     bec:	0141                	addi	sp,sp,16
     bee:	8082                	ret

00000bf0 <putchar>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     bf0:	e00007b7          	lui	a5,0xe0000
     bf4:	3807a783          	lw	a5,896(a5) # e0000380 <_eusrstack+0xbfff8380>
     bf8:	0c000713          	li	a4,192
     bfc:	0c07f793          	andi	a5,a5,192
     c00:	04e78c63          	beq	a5,a4,c58 <putchar+0x68>
{
     c04:	1141                	addi	sp,sp,-16
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c06:	001007b7          	lui	a5,0x100
{
     c0a:	c422                	sw	s0,8(sp)
     c0c:	c606                	sw	ra,12(sp)
     c0e:	842a                	mv	s0,a0
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c10:	0785                	addi	a5,a5,1
	while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     c12:	e00006b7          	lui	a3,0xe0000
     c16:	3806a703          	lw	a4,896(a3) # e0000380 <_eusrstack+0xbfff8380>
     c1a:	38068613          	addi	a2,a3,896
     c1e:	08077593          	andi	a1,a4,128
     c22:	e185                	bnez	a1,c42 <putchar+0x52>
	if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     c24:	c311                	beqz	a4,c28 <putchar+0x38>
     c26:	3e55                	jal	7da <internal_handle_input.constprop.0>
	*DMDATA0 = 0x85 | ((const char)c<<8);
     c28:	6541                	lui	a0,0x10
     c2a:	157d                	addi	a0,a0,-1
     c2c:	00841793          	slli	a5,s0,0x8
     c30:	8fe9                	and	a5,a5,a0
     c32:	0857e793          	ori	a5,a5,133
     c36:	e0000737          	lui	a4,0xe0000
     c3a:	38f72023          	sw	a5,896(a4) # e0000380 <_eusrstack+0xbfff8380>
	return 1;
     c3e:	4505                	li	a0,1
     c40:	a801                	j	c50 <putchar+0x60>
		if( timeout-- == 0 )
     c42:	17fd                	addi	a5,a5,-1
     c44:	fbe9                	bnez	a5,c16 <putchar+0x26>
			*DMDATA0 |= 0xc0;
     c46:	421c                	lw	a5,0(a2)
     c48:	4501                	li	a0,0
     c4a:	0c07e793          	ori	a5,a5,192
     c4e:	c21c                	sw	a5,0(a2)
}
     c50:	40b2                	lw	ra,12(sp)
     c52:	4422                	lw	s0,8(sp)
     c54:	0141                	addi	sp,sp,16
     c56:	8082                	ret
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c58:	4501                	li	a0,0
}
     c5a:	8082                	ret

00000c5c <modiSLER_adv_data.constprop.0>:
) {
	dataFrame->data_len = data_len;
	memcpy(dataFrame->payload, cmd, data_len);
}

void modiSLER_adv_data(MESS_DataFrame_t *dataFrame) {
     c5c:	716d                	addi	sp,sp,-272
     c5e:	10112623          	sw	ra,268(sp)
     c62:	10812423          	sw	s0,264(sp)
     c66:	10912223          	sw	s1,260(sp)
     c6a:	0a00                	addi	s0,sp,272
     c6c:	11212023          	sw	s2,256(sp)
     c70:	dfce                	sw	s3,252(sp)
     c72:	ddd2                	sw	s4,248(sp)
     c74:	dbd6                	sw	s5,244(sp)
     c76:	d9da                	sw	s6,240(sp)
     c78:	d7de                	sw	s7,236(sp)
     c7a:	d5e2                	sw	s8,232(sp)
     c7c:	d3e6                	sw	s9,228(sp)
     c7e:	d1ea                	sw	s10,224(sp)
     c80:	cfee                	sw	s11,220(sp)
	if (!REPORT_ALL) return;

	iSLER_frame_t frame = {
     c82:	443327b7          	lui	a5,0x44332
     c86:	21178793          	addi	a5,a5,529 # 44332211 <_eusrstack+0x2432a211>
     c8a:	f0f42623          	sw	a5,-244(s0)
     c8e:	6799                	lui	a5,0x6
     c90:	65578793          	addi	a5,a5,1621 # 6655 <iSLER_mess.c.d6599a54+0x3504>
     c94:	f0f41823          	sh	a5,-240(s0)
     c98:	10200793          	li	a5,258
     c9c:	f0f41923          	sh	a5,-238(s0)
     ca0:	4799                	li	a5,6
     ca2:	f0f40a23          	sb	a5,-236(s0)
     ca6:	6589                	lui	a1,0x2
     ca8:	47d5                	li	a5,21
     caa:	f0f40aa3          	sb	a5,-235(s0)
     cae:	4621                	li	a2,8
     cb0:	47a5                	li	a5,9
     cb2:	9e058593          	addi	a1,a1,-1568 # 19e0 <LLE_IRQHandler+0xac>
     cb6:	f1740513          	addi	a0,s0,-233
     cba:	f0f40b23          	sb	a5,-234(s0)
     cbe:	35d1                	jal	b82 <memcpy>
     cc0:	4631                	li	a2,12
     cc2:	4581                	li	a1,0
     cc4:	f1f40513          	addi	a0,s0,-225
     cc8:	3565                	jal	b70 <memset>
     cca:	f9100793          	li	a5,-111
     cce:	f2f405a3          	sb	a5,-213(s0)
     cd2:	77f5                	lui	a5,0xffffd
     cd4:	7ff78793          	addi	a5,a5,2047 # ffffd7ff <_eusrstack+0xdfff57ff>
     cd8:	f2f41623          	sh	a5,-212(s0)
     cdc:	08e00613          	li	a2,142
     ce0:	479d                	li	a5,7
     ce2:	c2418593          	addi	a1,gp,-988 # 20000020 <dataFrame>
     ce6:	f2f40513          	addi	a0,s0,-209
     cea:	f2f40723          	sb	a5,-210(s0)
		.data_len = sizeof(MESS_DataFrame_t)+3,
		.field_sev_data = {0xFF, 0xD7, 0x07},
		.dataFrame = *dataFrame
	};

	PRINT_STRUCT_BYTES(&frame, "%02X");
     cee:	4481                	li	s1,0
	iSLER_frame_t frame = {
     cf0:	3d49                	jal	b82 <memcpy>
	PRINT_STRUCT_BYTES(&frame, "%02X");
     cf2:	6989                	lui	s3,0x2
     cf4:	0b100913          	li	s2,177
     cf8:	f0c40793          	addi	a5,s0,-244
     cfc:	97a6                	add	a5,a5,s1
     cfe:	0007c583          	lbu	a1,0(a5)
     d02:	a0c98513          	addi	a0,s3,-1524 # 1a0c <LLE_IRQHandler+0xd8>
     d06:	0485                	addi	s1,s1,1
     d08:	3581                	jal	b48 <printf>
     d0a:	ff2497e3          	bne	s1,s2,cf8 <modiSLER_adv_data.constprop.0+0x9c>
     d0e:	4529                	li	a0,10
     d10:	35c5                	jal	bf0 <putchar>
	printf("\n");
     d12:	4529                	li	a0,10

	// Uncomment to disable whitening to debug RF.
	//BB->CTRL_CFG |= (1<<6);
	DevSetMode(DEVSETMODE_TX);

	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
     d14:	8e89ca37          	lui	s4,0x8e89c
	BB->CRCINIT1 = 0x555555; // crc init
     d18:	00555ab7          	lui	s5,0x555
	BB->CRCPOLY1 = (BB->CRCPOLY1 & 0xff000000) | 0x80032d; // crc poly
	BB->CRCPOLY2 = (BB->CRCPOLY2 & 0xff000000) | 0x80032d;
#endif
	// LL->LL1 = (LL->LL1 & 0xfffffffe) | 1; // The "| 1" is for AUTO mode, to swap between RX <-> TX when either happened

	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
     d1c:	7b6d                	lui	s6,0xffffb

#if defined(CH582_CH583) || defined(CH32V208)
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
				   (phy_mode == PHY_S2) ? CTRL_CFG_PHY_CODED:
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
										  CTRL_CFG_PHY_1M; // default 1M for now
     d1e:	7bc5                	lui	s7,0xffff1
#if defined(CH571_CH573)
	BB->BB11 = (BB->BB11 & 0xfffffffc); // |2 for RX
#endif

	// This clears bit 17 (If set, seems to have no impact.)
	LL->LL4 &= 0xfffdffff;
     d20:	7c01                	lui	s8,0xfffe0

#if !defined(CH571_CH573)
	LL->STATUS = LL_STATUS_TX;
#endif
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
     d22:	6cd9                	lui	s9,0x16
     d24:	35f1                	jal	bf0 <putchar>

	for(int c = 0; c < sizeof(adv_channels); c++) {
     d26:	4d81                	li	s11,0
		Frame_TX((uint8_t*)&frame, sizeof(frame), adv_channels[c], PHY_MODE);
     d28:	cdc18993          	addi	s3,gp,-804 # 200000d8 <adv_channels>
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
     d2c:	4000c4b7          	lui	s1,0x4000c
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
     d30:	ed6a0a13          	addi	s4,s4,-298 # 8e89bed6 <_eusrstack+0x6e893ed6>
	BB->CRCINIT1 = 0x555555; // crc init
     d34:	555a8a93          	addi	s5,s5,1365 # 555555 <iSLER_mess.c.d6599a54+0x552404>
	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
     d38:	102b0b13          	addi	s6,s6,258 # ffffb102 <_eusrstack+0xdfff3102>
										  CTRL_CFG_PHY_1M; // default 1M for now
     d3c:	1bfd                	addi	s7,s7,-1
	LL->LL4 &= 0xfffdffff;
     d3e:	1c7d                	addi	s8,s8,-1
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
     d40:	200c8c93          	addi	s9,s9,512 # 16200 <iSLER_mess.c.d6599a54+0x130af>
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
     d44:	12c4a703          	lw	a4,300(s1) # 4000c12c <_eusrstack+0x2000412c>
void Frame_TX(uint8_t adv[], size_t len, uint8_t channel, uint8_t phy_mode) {
     d48:	ee242e23          	sw	sp,-260(s0)
     d4c:	01b987b3          	add	a5,s3,s11
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
     d50:	9b71                	andi	a4,a4,-4
     d52:	00176713          	ori	a4,a4,1
     d56:	0007c603          	lbu	a2,0(a5)
     d5a:	12e4a623          	sw	a4,300(s1)
	RF->RF11 &= 0xfffffffd;
     d5e:	4000d737          	lui	a4,0x4000d
     d62:	575c                	lw	a5,44(a4)
	__attribute__((aligned(4))) uint8_t  ADV_BUF[len+2]; // for the advertisement, which is 37 bytes + 2 header bytes
     d64:	7131                	addi	sp,sp,-192
	DevSetMode(DEVSETMODE_TX);
     d66:	0da00513          	li	a0,218
	RF->RF11 &= 0xfffffffd;
     d6a:	9bf5                	andi	a5,a5,-3
     d6c:	d75c                	sw	a5,44(a4)
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
     d6e:	1004a783          	lw	a5,256(s1)
     d72:	07f67713          	andi	a4,a2,127
	__attribute__((aligned(4))) uint8_t  ADV_BUF[len+2]; // for the advertisement, which is 37 bytes + 2 header bytes
     d76:	8d0a                	mv	s10,sp
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
     d78:	f807f793          	andi	a5,a5,-128
     d7c:	8fd9                	or	a5,a5,a4
     d7e:	10f4a023          	sw	a5,256(s1)
	DevSetMode(DEVSETMODE_TX);
     d82:	c38ff0ef          	jal	ra,1ba <DevSetMode>
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
     d86:	1144a423          	sw	s4,264(s1)
	BB->CRCINIT1 = 0x555555; // crc init
     d8a:	1154a223          	sw	s5,260(s1)
	memcpy(&ADV_BUF[2], adv, len);
     d8e:	0b100613          	li	a2,177
	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
     d92:	016d1023          	sh	s6,0(s10)
	memcpy(&ADV_BUF[2], adv, len);
     d96:	f0c40593          	addi	a1,s0,-244
     d9a:	002d0513          	addi	a0,s10,2
     d9e:	33d5                	jal	b82 <memcpy>
	LL->FRAME_BUF = (uint32_t)ADV_BUF;
     da0:	20048793          	addi	a5,s1,512
     da4:	07a7a823          	sw	s10,112(a5)
     da8:	6785                	lui	a5,0x1
     daa:	bba78793          	addi	a5,a5,-1094 # bba <memcmp+0x1c>
	for( int timeout = 3000; !(RF->RF26 & 0x1000000) && timeout >= 0; timeout-- );
     dae:	4000d6b7          	lui	a3,0x4000d
     db2:	01000637          	lui	a2,0x1000
     db6:	56b8                	lw	a4,104(a3)
     db8:	8f71                	and	a4,a4,a2
     dba:	e319                	bnez	a4,dc0 <modiSLER_adv_data.constprop.0+0x164>
     dbc:	17fd                	addi	a5,a5,-1
     dbe:	ffe5                	bnez	a5,db6 <modiSLER_adv_data.constprop.0+0x15a>
										  CTRL_CFG_PHY_1M; // default 1M for now
     dc0:	1004a783          	lw	a5,256(s1)
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
     dc4:	6705                	lui	a4,0x1
										  CTRL_CFG_PHY_1M; // default 1M for now
     dc6:	10048693          	addi	a3,s1,256
     dca:	0177f7b3          	and	a5,a5,s7
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
     dce:	8fd9                	or	a5,a5,a4
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
     dd0:	10f4a023          	sw	a5,256(s1)
	LL->LL4 &= 0xfffdffff;
     dd4:	20048793          	addi	a5,s1,512
     dd8:	4b98                	lw	a4,16(a5)
     dda:	01877733          	and	a4,a4,s8
     dde:	cb98                	sw	a4,16(a5)
	LL->STATUS = LL_STATUS_TX;
     de0:	6709                	lui	a4,0x2
     de2:	c798                	sw	a4,8(a5)
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
     de4:	0797a223          	sw	s9,100(a5)

	BB->CTRL_CFG |= CTRL_CFG_START_TX;
     de8:	1004a783          	lw	a5,256(s1)
     dec:	00800737          	lui	a4,0x800
     df0:	8fd9                	or	a5,a5,a4
     df2:	10f4a023          	sw	a5,256(s1)
	BB->CTRL_TX &= 0xfffffffc;
     df6:	56dc                	lw	a5,44(a3)
     df8:	9bf1                	andi	a5,a5,-4
     dfa:	d6dc                	sw	a5,44(a3)

	LL->LL0 = 2; // Not sure what this does, but on RX it's 1
     dfc:	4789                	li	a5,2
     dfe:	20f4a023          	sw	a5,512(s1)

	while(LL->TMR); // wait for tx buffer to empty
     e02:	2644a783          	lw	a5,612(s1)
     e06:	fff5                	bnez	a5,e02 <modiSLER_adv_data.constprop.0+0x1a6>
	DevSetMode(0);
     e08:	4501                	li	a0,0
     e0a:	bb0ff0ef          	jal	ra,1ba <DevSetMode>
	if(LL->LL0 & 3) {
     e0e:	2004a783          	lw	a5,512(s1)
     e12:	8b8d                	andi	a5,a5,3
     e14:	cf81                	beqz	a5,e2c <modiSLER_adv_data.constprop.0+0x1d0>
		LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
     e16:	2504a783          	lw	a5,592(s1)
     e1a:	9be1                	andi	a5,a5,-8
     e1c:	24f4a823          	sw	a5,592(s1)
		LL->LL0 |= 0x08;
     e20:	2004a783          	lw	a5,512(s1)
     e24:	0087e793          	ori	a5,a5,8
     e28:	20f4a023          	sw	a5,512(s1)
	for(int c = 0; c < sizeof(adv_channels); c++) {
     e2c:	0d85                	addi	s11,s11,1
     e2e:	478d                	li	a5,3
     e30:	efc42103          	lw	sp,-260(s0)
     e34:	f0fd98e3          	bne	s11,a5,d44 <modiSLER_adv_data.constprop.0+0xe8>
	}
}
     e38:	ef040113          	addi	sp,s0,-272
     e3c:	10c12083          	lw	ra,268(sp)
     e40:	10812403          	lw	s0,264(sp)
     e44:	10412483          	lw	s1,260(sp)
     e48:	10012903          	lw	s2,256(sp)
     e4c:	59fe                	lw	s3,252(sp)
     e4e:	5a6e                	lw	s4,248(sp)
     e50:	5ade                	lw	s5,244(sp)
     e52:	5b4e                	lw	s6,240(sp)
     e54:	5bbe                	lw	s7,236(sp)
     e56:	5c2e                	lw	s8,232(sp)
     e58:	5c9e                	lw	s9,228(sp)
     e5a:	5d0e                	lw	s10,224(sp)
     e5c:	4dfe                	lw	s11,220(sp)
     e5e:	6151                	addi	sp,sp,272
     e60:	8082                	ret

00000e62 <SystemInit>:
			R8_CLK_SYS_CFG = sc;
		);
	}
#else // ch5xx EXCEPT ch570/2 ch584/5
	SYS_CLKTypeDef sc = CLK_SOURCE_CH5XX;
	SYS_SAFE_ACCESS(
     e62:	400017b7          	lui	a5,0x40001
     e66:	05700693          	li	a3,87
     e6a:	04d78023          	sb	a3,64(a5) # 40001040 <_eusrstack+0x1fff9040>
     e6e:	fa800713          	li	a4,-88
     e72:	04e78023          	sb	a4,64(a5)
     e76:	0001                	nop
     e78:	0001                	nop
     e7a:	04b7c603          	lbu	a2,75(a5)
     e7e:	0df67613          	andi	a2,a2,223
     e82:	04c785a3          	sb	a2,75(a5)
     e86:	04078023          	sb	zero,64(a5)
     e8a:	0001                	nop
     e8c:	0001                	nop
		ADD_N_NOPS(4);
		R8_FLASH_CFG = 0X51;
	}
	else if(sc & 0x40) // PLL div
	{
		SYS_SAFE_ACCESS(
     e8e:	04d78023          	sb	a3,64(a5)
     e92:	04e78023          	sb	a4,64(a5)
     e96:	0001                	nop
     e98:	0001                	nop
     e9a:	00140637          	lui	a2,0x140
     e9e:	04860613          	addi	a2,a2,72 # 140048 <iSLER_mess.c.d6599a54+0x13cef7>
     ea2:	c790                	sw	a2,8(a5)
     ea4:	04078023          	sb	zero,64(a5)
     ea8:	0001                	nop
     eaa:	0001                	nop
			R32_CLK_SYS_CFG = (1 << 6) | (sc & 0x1f) | RB_TX_32M_PWR_EN | RB_PLL_PWR_EN;
		);
		ADD_N_NOPS(4);
     eac:	0001                	nop
     eae:	0001                	nop
     eb0:	0001                	nop
     eb2:	0001                	nop
		R8_FLASH_CFG = 0x52;
     eb4:	40002637          	lui	a2,0x40002
     eb8:	05200593          	li	a1,82
     ebc:	80b603a3          	sb	a1,-2041(a2) # 40001807 <_eusrstack+0x1fff9807>
		SYS_SAFE_ACCESS(
			R32_CLK_SYS_CFG |= RB_CLK_SYS_MOD;
		);
	}

	SYS_SAFE_ACCESS(
     ec0:	04d78023          	sb	a3,64(a5)
     ec4:	04e78023          	sb	a4,64(a5)
     ec8:	0001                	nop
     eca:	0001                	nop
     ecc:	04b7c703          	lbu	a4,75(a5)
     ed0:	f8076713          	ori	a4,a4,-128
     ed4:	0ff77713          	andi	a4,a4,255
     ed8:	04e785a3          	sb	a4,75(a5)
     edc:	04078023          	sb	zero,64(a5)
     ee0:	0001                	nop
     ee2:	0001                	nop
	*DMDATA1 = 0x00;
     ee4:	e00007b7          	lui	a5,0xe0000
     ee8:	3807a223          	sw	zero,900(a5) # e0000384 <_eusrstack+0xbfff8384>
	*DMDATA0 = 0x80;
     eec:	08000713          	li	a4,128
     ef0:	38e7a023          	sw	a4,896(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     ef4:	8082                	ret

00000ef6 <main>:
		case BTN_LONGPRESS:
			printf("Long Press\n"); break;
	}
}

int main() {
     ef6:	7175                	addi	sp,sp,-144
     ef8:	c706                	sw	ra,140(sp)
     efa:	c522                	sw	s0,136(sp)
     efc:	c326                	sw	s1,132(sp)
     efe:	c14a                	sw	s2,128(sp)
     f00:	dece                	sw	s3,124(sp)
     f02:	dcd2                	sw	s4,120(sp)
     f04:	dad6                	sw	s5,116(sp)
     f06:	d8da                	sw	s6,112(sp)
     f08:	d6de                	sw	s7,108(sp)
     f0a:	d4e2                	sw	s8,104(sp)
     f0c:	d2e6                	sw	s9,100(sp)
     f0e:	d0ea                	sw	s10,96(sp)
     f10:	ceee                	sw	s11,92(sp)
	SystemInit();
     f12:	3f81                	jal	e62 <SystemInit>
	SysTick->CTLR = 0x0000;
     f14:	e000f7b7          	lui	a5,0xe000f
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     f18:	663d                	lui	a2,0xf
	SysTick->CTLR = 0x0000;
     f1a:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc0007000>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     f1e:	a5f60613          	addi	a2,a2,-1441 # ea5f <iSLER_mess.c.d6599a54+0xb90e>
     f22:	cb90                	sw	a2,16(a5)
     f24:	4681                	li	a3,0
     f26:	cbd4                	sw	a3,20(a5)
	SysTick->CNT = 0x00000000;
     f28:	4681                	li	a3,0
     f2a:	c794                	sw	a3,8(a5)
     f2c:	4701                	li	a4,0
     f2e:	c7d8                	sw	a4,12(a5)
	systick_millis = 0x00000000;
     f30:	cf018713          	addi	a4,gp,-784 # 200000ec <systick_millis>
     f34:	00072023          	sw	zero,0(a4) # 800000 <iSLER_mess.c.d6599a54+0x7fceaf>
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
     f38:	4398                	lw	a4,0(a5)
}

// Enable Interrupt (by interrupt number)
RV_STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f3a:	e000e637          	lui	a2,0xe000e
     f3e:	6d05                	lui	s10,0x1
     f40:	00776713          	ori	a4,a4,7
     f44:	c398                	sw	a4,0(a5)
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) |= (pin & ~PB);
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     &= ~(pin & ~PB);
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
		break;
	case GPIO_ModeOut_PP_5mA:
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     f46:	400017b7          	lui	a5,0x40001
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f4a:	11a62023          	sw	s10,256(a2) # e000e100 <_eusrstack+0xc0006100>
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     f4e:	08078793          	addi	a5,a5,128 # 40001080 <_eusrstack+0x1fff9080>
     f52:	5bd8                	lw	a4,52(a5)
	LL->LL5 = 0x8c;
     f54:	08c00693          	li	a3,140
	LL->LL7 = 0x76;
     f58:	07600593          	li	a1,118
     f5c:	eff77713          	andi	a4,a4,-257
     f60:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    |= (pin & ~PB);
     f62:	5398                	lw	a4,32(a5)
	LL->STATE_BUF = (uint32_t)LLE_BUF;
     f64:	cfc18b93          	addi	s7,gp,-772 # 200000f8 <LLE_BUF>
     f68:	10076713          	ori	a4,a4,256
     f6c:	d398                	sw	a4,32(a5)
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     f6e:	5bd8                	lw	a4,52(a5)
	RF->RF10 = 0x480;
     f70:	4000d4b7          	lui	s1,0x4000d
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
     f74:	90000e37          	lui	t3,0x90000
     f78:	bff77713          	andi	a4,a4,-1025
     f7c:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     |= (pin & ~PB);
     f7e:	5b98                	lw	a4,48(a5)
     f80:	1e7d                	addi	t3,t3,-1
     f82:	20000eb7          	lui	t4,0x20000
     f86:	40076713          	ori	a4,a4,1024
     f8a:	db98                	sw	a4,48(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
     f8c:	5398                	lw	a4,32(a5)
	RF->RF18 |= 0x80000000;
     f8e:	80000837          	lui	a6,0x80000
	RF->RF19 |= 0x2000000;
     f92:	02000f37          	lui	t5,0x2000
     f96:	bff77713          	andi	a4,a4,-1025
     f9a:	d398                	sw	a4,32(a5)
	LL->LL5 = 0x8c;
     f9c:	4000c7b7          	lui	a5,0x4000c
     fa0:	20078713          	addi	a4,a5,512 # 4000c200 <_eusrstack+0x20004200>
     fa4:	cb54                	sw	a3,20(a4)
	LL->LL7 = 0x76;
     fa6:	cf4c                	sw	a1,28(a4)
	LL->LL9 = 0x8c;
     fa8:	d354                	sw	a3,36(a4)
	LL->LL13 = 0x8c;
     faa:	db54                	sw	a3,52(a4)
	LL->LL17 = 0x8c;
     fac:	c374                	sw	a3,68(a4)
	LL->LL19 = 0x76;
     fae:	c76c                	sw	a1,76(a4)
	LL->LL11 = 0x3c;
     fb0:	03c00693          	li	a3,60
     fb4:	d754                	sw	a3,44(a4)
	LL->LL15 = 0x3c;
     fb6:	df54                	sw	a3,60(a4)
	LL->INT_EN = 0xf00f;
     fb8:	66bd                	lui	a3,0xf
     fba:	06bd                	addi	a3,a3,15
     fbc:	c754                	sw	a3,12(a4)
	LL->STATE_BUF = (uint32_t)LLE_BUF;
     fbe:	07772a23          	sw	s7,116(a4)
	LL->STATUS = 0xffffffff;
     fc2:	56fd                	li	a3,-1
     fc4:	c714                	sw	a3,8(a4)
	RF->RF10 = 0x480;
     fc6:	48000713          	li	a4,1152
     fca:	d498                	sw	a4,40(s1)
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
     fcc:	44b8                	lw	a4,72(s1)
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
     fce:	f90006b7          	lui	a3,0xf9000
     fd2:	16fd                	addi	a3,a3,-1
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
     fd4:	01c77733          	and	a4,a4,t3
     fd8:	01d76733          	or	a4,a4,t4
     fdc:	c4b8                	sw	a4,72(s1)
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
     fde:	44b8                	lw	a4,72(s1)
     fe0:	040005b7          	lui	a1,0x4000
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
     fe4:	78c5                	lui	a7,0xffff1
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
     fe6:	8f75                	and	a4,a4,a3
     fe8:	8f4d                	or	a4,a4,a1
     fea:	c4b8                	sw	a4,72(s1)
	RF->RF18 = (RF->RF18 & 0xfffffff0) | 9;
     fec:	44b8                	lw	a4,72(s1)
	RF->RF18 &= 0xfff8ffff;
     fee:	fff905b7          	lui	a1,0xfff90
     ff2:	15fd                	addi	a1,a1,-1
	RF->RF18 = (RF->RF18 & 0xfffffff0) | 9;
     ff4:	9b41                	andi	a4,a4,-16
     ff6:	00976713          	ori	a4,a4,9
     ffa:	c4b8                	sw	a4,72(s1)
	RF->RF18 &= 0xfff8ffff;
     ffc:	44b8                	lw	a4,72(s1)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
     ffe:	6511                	lui	a0,0x4
	RF->RF21 &= 0xffffefff;
    1000:	79fd                	lui	s3,0xfffff
	RF->RF18 &= 0xfff8ffff;
    1002:	8f6d                	and	a4,a4,a1
    1004:	c4b8                	sw	a4,72(s1)
	RF->RF18 |= 0x80000000;
    1006:	44b8                	lw	a4,72(s1)
	RF->RF19 &= 0xfeffffff;
    1008:	ff0005b7          	lui	a1,0xff000
    100c:	15fd                	addi	a1,a1,-1
	RF->RF18 |= 0x80000000;
    100e:	01076733          	or	a4,a4,a6
    1012:	c4b8                	sw	a4,72(s1)
	RF->RF19 = (RF->RF19 & 0xfffffff8) | 3;
    1014:	44f8                	lw	a4,76(s1)
	RF->RF21 &= 0xffffefff;
    1016:	19fd                	addi	s3,s3,-1
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
    1018:	1efd                	addi	t4,t4,-1
	RF->RF19 = (RF->RF19 & 0xfffffff8) | 3;
    101a:	9b61                	andi	a4,a4,-8
    101c:	00376713          	ori	a4,a4,3
    1020:	c4f8                	sw	a4,76(s1)
	RF->RF19 = (RF->RF19 & 0xffffff8f) | 0x30;
    1022:	44f8                	lw	a4,76(s1)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
    1024:	00020a37          	lui	s4,0x20
	BB->CTRL_CFG |= 0x800000;
    1028:	10078793          	addi	a5,a5,256
	RF->RF19 = (RF->RF19 & 0xffffff8f) | 0x30;
    102c:	f8f77713          	andi	a4,a4,-113
    1030:	03076713          	ori	a4,a4,48
    1034:	c4f8                	sw	a4,76(s1)
	RF->RF19 = (RF->RF19 & 0xfffff8ff) | 0x300;
    1036:	44f8                	lw	a4,76(s1)
	NVIC->VTFIDR[3] = 0x14;
    1038:	4c51                	li	s8,20
    103a:	cf018413          	addi	s0,gp,-784 # 200000ec <systick_millis>
	RF->RF19 = (RF->RF19 & 0xfffff8ff) | 0x300;
    103e:	8ff77713          	andi	a4,a4,-1793
    1042:	30076713          	ori	a4,a4,768
    1046:	c4f8                	sw	a4,76(s1)
	RF->RF19 &= 0xfeffffff;
    1048:	44f8                	lw	a4,76(s1)
    104a:	cfc18913          	addi	s2,gp,-772 # 200000f8 <LLE_BUF>
		txctune_co[f] = tune | (tune << 4);
    104e:	1d41                	addi	s10,s10,-16
	RF->RF19 &= 0xfeffffff;
    1050:	8f6d                	and	a4,a4,a1
    1052:	c4f8                	sw	a4,76(s1)
	RF->RF19 |= 0x2000000;
    1054:	44f8                	lw	a4,76(s1)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
    1056:	fff88593          	addi	a1,a7,-1 # ffff0fff <_eusrstack+0xdffe8fff>
	RF->RF19 |= 0x2000000;
    105a:	01e76733          	or	a4,a4,t5
    105e:	c4f8                	sw	a4,76(s1)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
    1060:	48b8                	lw	a4,80(s1)
    1062:	8f6d                	and	a4,a4,a1
    1064:	8f49                	or	a4,a4,a0
    1066:	c8b8                	sw	a4,80(s1)
	RF->RF21 = (RF->RF21 & 0xfffffff0) | 0xc;
    1068:	0544a303          	lw	t1,84(s1) # 4000d054 <_eusrstack+0x20005054>
    106c:	ff037313          	andi	t1,t1,-16
    1070:	00c36313          	ori	t1,t1,12
    1074:	0464aa23          	sw	t1,84(s1)
	RF->RF21 |= 0x80;
    1078:	48f8                	lw	a4,84(s1)
    107a:	08076713          	ori	a4,a4,128
    107e:	c8f8                	sw	a4,84(s1)
	RF->RF21 &= 0xffffefff;
    1080:	48f8                	lw	a4,84(s1)
    1082:	01377733          	and	a4,a4,s3
    1086:	c8f8                	sw	a4,84(s1)
	RF->RF15 = (RF->RF15 & 0xffff0fff) | 0x8000;
    1088:	03c4a883          	lw	a7,60(s1)
    108c:	6721                	lui	a4,0x8
    108e:	00b8f8b3          	and	a7,a7,a1
    1092:	00e8e8b3          	or	a7,a7,a4
    1096:	0314ae23          	sw	a7,60(s1)
	RF->RF15 = (RF->RF15 & 0xf8ffffff) | 0x2000000;
    109a:	5cc8                	lw	a0,60(s1)
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
    109c:	40000737          	lui	a4,0x40000
	RF->RF15 = (RF->RF15 & 0xf8ffffff) | 0x2000000;
    10a0:	8d75                	and	a0,a0,a3
    10a2:	01e56533          	or	a0,a0,t5
    10a6:	dcc8                	sw	a0,60(s1)
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
    10a8:	5ccc                	lw	a1,60(s1)
	RF->RF11 |= 0x700000;
    10aa:	00700537          	lui	a0,0x700
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
    10ae:	01d5f5b3          	and	a1,a1,t4
    10b2:	8dd9                	or	a1,a1,a4
    10b4:	dccc                	sw	a1,60(s1)
	RF->RF11 |= 0x700000;
    10b6:	54d8                	lw	a4,44(s1)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
    10b8:	fffd05b7          	lui	a1,0xfffd0
    10bc:	15fd                	addi	a1,a1,-1
	RF->RF11 |= 0x700000;
    10be:	8f49                	or	a4,a4,a0
    10c0:	d4d8                	sw	a4,44(s1)
	RF->RF11 &= 0xf8ffffff;
    10c2:	54d8                	lw	a4,44(s1)
    10c4:	8ef9                	and	a3,a3,a4
    10c6:	d4d4                	sw	a3,44(s1)
	RF->RF11 = (RF->RF11 & 0xffffcfff) | 0x2000;
    10c8:	54d4                	lw	a3,44(s1)
    10ca:	7775                	lui	a4,0xffffd
    10cc:	177d                	addi	a4,a4,-1
    10ce:	8ef9                	and	a3,a3,a4
    10d0:	6709                	lui	a4,0x2
    10d2:	8ed9                	or	a3,a3,a4
    10d4:	d4d4                	sw	a3,44(s1)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
    10d6:	54d4                	lw	a3,44(s1)
    10d8:	8eed                	and	a3,a3,a1
    10da:	0146e6b3          	or	a3,a3,s4
    10de:	d4d4                	sw	a3,44(s1)
	RF->RF12 &= 0xfffffff0;
    10e0:	5894                	lw	a3,48(s1)
    10e2:	9ac1                	andi	a3,a3,-16
    10e4:	d894                	sw	a3,48(s1)
	RF->RF12 &= 0xffffff0f;
    10e6:	5894                	lw	a3,48(s1)
    10e8:	f0f6f693          	andi	a3,a3,-241
    10ec:	d894                	sw	a3,48(s1)
	RF->RF12 &= 0xfffff8ff;
    10ee:	5894                	lw	a3,48(s1)
    10f0:	8ff6f693          	andi	a3,a3,-1793
    10f4:	d894                	sw	a3,48(s1)
	RF->RF12 |= 0x700000;
    10f6:	5898                	lw	a4,48(s1)
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
    10f8:	500006b7          	lui	a3,0x50000
	RF->RF12 |= 0x700000;
    10fc:	8f49                	or	a4,a4,a0
    10fe:	d898                	sw	a4,48(s1)
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
    1100:	5898                	lw	a4,48(s1)
	DevSetMode(DEVSETMODE_TUNE);
    1102:	0dd00513          	li	a0,221
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
    1106:	01c77733          	and	a4,a4,t3
    110a:	8f55                	or	a4,a4,a3
    110c:	d898                	sw	a4,48(s1)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xff07ffff) | RFEND_TXCTUNE_INIT;
    110e:	5c98                	lw	a4,56(s1)
    1110:	ff0806b7          	lui	a3,0xff080
    1114:	16fd                	addi	a3,a3,-1
    1116:	8f75                	and	a4,a4,a3
    1118:	008806b7          	lui	a3,0x880
    111c:	8f55                	or	a4,a4,a3
    111e:	dc98                	sw	a4,56(s1)
	RF->TXTUNE_CTRL |= 0x80000000;
    1120:	5c98                	lw	a4,56(s1)
	BB->CTRL_CFG |= 0x800000;
    1122:	008006b7          	lui	a3,0x800
	RF->TXTUNE_CTRL |= 0x80000000;
    1126:	01076833          	or	a6,a4,a6
    112a:	0304ac23          	sw	a6,56(s1)
	BB->CTRL_CFG |= 0x800000;
    112e:	4398                	lw	a4,0(a5)
    1130:	8f55                	or	a4,a4,a3
    1132:	c398                	sw	a4,0(a5)
	BB->CTRL_CFG |= 0x10000000;
    1134:	4398                	lw	a4,0(a5)
    1136:	100006b7          	lui	a3,0x10000
    113a:	8f55                	or	a4,a4,a3
    113c:	c398                	sw	a4,0(a5)
	BB->BB13 = 0x1d0;
    113e:	1d000713          	li	a4,464
    1142:	dbd8                	sw	a4,52(a5)
	BB->CTRL_TX = TxPower << 0x19 | CTRL_TX_TXPOWER;
    1144:	a4011737          	lui	a4,0xa4011
    1148:	e7870713          	addi	a4,a4,-392 # a4010e78 <_eusrstack+0x84008e78>
    114c:	d7d8                	sw	a4,44(a5)
	BB->CTRL_TX = (BB->CTRL_TX & 0x81ffffff) | (TxPower & 0x3f) << 0x19;
    114e:	57d8                	lw	a4,44(a5)
    1150:	820006b7          	lui	a3,0x82000
    1154:	16fd                	addi	a3,a3,-1
    1156:	8f75                	and	a4,a4,a3
    1158:	240006b7          	lui	a3,0x24000
    115c:	8f55                	or	a4,a4,a3
    115e:	d7d8                	sw	a4,44(a5)
	BB->BB8 = 0x90083;
    1160:	00090737          	lui	a4,0x90
    1164:	08370713          	addi	a4,a4,131 # 90083 <iSLER_mess.c.d6599a54+0x8cf32>
    1168:	d398                	sw	a4,32(a5)
	NVIC->VTFIDR[3] = 0x14;
    116a:	058609a3          	sb	s8,83(a2)
	DevSetMode(DEVSETMODE_TUNE);
    116e:	84cff0ef          	jal	ra,1ba <DevSetMode>
	RF->RF1 &= 0xfffffeff;
    1172:	40dc                	lw	a5,4(s1)
	uint32_t tune2401 = RFEND_TXCTune(37);
    1174:	02500513          	li	a0,37
	RF->RF1 &= 0xfffffeff;
    1178:	eff7f793          	andi	a5,a5,-257
    117c:	c0dc                	sw	a5,4(s1)
	RF->RF10 &= 0xffffefff;
    117e:	549c                	lw	a5,40(s1)
    1180:	0137f9b3          	and	s3,a5,s3
    1184:	0334a423          	sw	s3,40(s1)
	RF->RF11 &= 0xffffffef;
    1188:	54d8                	lw	a4,44(s1)
    118a:	9b3d                	andi	a4,a4,-17
    118c:	d4d8                	sw	a4,44(s1)
	RF->RF2 |= 0x20000;
    118e:	449c                	lw	a5,8(s1)
    1190:	0147e7b3          	or	a5,a5,s4
    1194:	c49c                	sw	a5,8(s1)
	RF->RF1 |= 0x10;
    1196:	40dc                	lw	a5,4(s1)
    1198:	0107e793          	ori	a5,a5,16
    119c:	c0dc                	sw	a5,4(s1)
	uint32_t tune2401 = RFEND_TXCTune(37);
    119e:	86aff0ef          	jal	ra,208 <RFEND_TXCTune>
    11a2:	84aa                	mv	s1,a0
	uint8_t nGA2401 = (uint8_t)(tune2401 >> 24) & 0x7f;
    11a4:	01855b13          	srli	s6,a0,0x18
	uint32_t tune2480 = RFEND_TXCTune(39);
    11a8:	02700513          	li	a0,39
    11ac:	85cff0ef          	jal	ra,208 <RFEND_TXCTune>
    11b0:	89aa                	mv	s3,a0
	uint8_t nGA2480 = (uint8_t)(tune2480 >> 24) & 0x7f;
    11b2:	01855d93          	srli	s11,a0,0x18
	uint32_t tune2440 = RFEND_TXCTune(18);
    11b6:	4549                	li	a0,18
    11b8:	850ff0ef          	jal	ra,208 <RFEND_TXCTune>
	uint8_t nCO2440 = (uint8_t)(tune2440 & 0x3f);
    11bc:	03f57c93          	andi	s9,a0,63
	uint8_t nGA2440 = (uint8_t)(tune2440 >> 24) & 0x7f;
    11c0:	01855a93          	srli	s5,a0,0x18
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
    11c4:	02400613          	li	a2,36
	uint32_t tune2440 = RFEND_TXCTune(18);
    11c8:	8a2a                	mv	s4,a0
	uint32_t dCO0140 = nCO2401 - nCO2440;
    11ca:	03f4f493          	andi	s1,s1,63
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
    11ce:	4581                	li	a1,0
    11d0:	1068                	addi	a0,sp,44
	uint32_t dCO0140 = nCO2401 - nCO2440;
    11d2:	419484b3          	sub	s1,s1,s9
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
    11d6:	d402                	sw	zero,40(sp)
    11d8:	3a61                	jal	b70 <memset>
    11da:	03848733          	mul	a4,s1,s8
	uint32_t dCO4080 = nCO2440 - nCO2480;
    11de:	03f9f993          	andi	s3,s3,63
	uint8_t nGA2401 = (uint8_t)(tune2401 >> 24) & 0x7f;
    11e2:	07fb7b13          	andi	s6,s6,127
	uint8_t nGA2480 = (uint8_t)(tune2480 >> 24) & 0x7f;
    11e6:	07fdfd93          	andi	s11,s11,127
	uint8_t nGA2440 = (uint8_t)(tune2440 >> 24) & 0x7f;
    11ea:	07fafa93          	andi	s5,s5,127
	uint32_t dCO4080 = nCO2440 - nCO2480;
    11ee:	413c89b3          	sub	s3,s9,s3
	for(int f = 0; f < int_points; f++) {
    11f2:	4781                	li	a5,0
		tune = (dCO0140 * (int_points -f)) / int_points;
    11f4:	4651                	li	a2,20
		txctune_co[f] = tune | (tune << 4);
    11f6:	1034                	addi	a3,sp,40
    11f8:	00f68533          	add	a0,a3,a5
		tune = (dCO0140 * (int_points -f)) / int_points;
    11fc:	02c755b3          	divu	a1,a4,a2
	for(int f = 0; f < int_points; f++) {
    1200:	0785                	addi	a5,a5,1
    1202:	8f05                	sub	a4,a4,s1
		txctune_co[f] = tune | (tune << 4);
    1204:	00459693          	slli	a3,a1,0x4
    1208:	01a6f6b3          	and	a3,a3,s10
    120c:	8ecd                	or	a3,a3,a1
    120e:	00d50023          	sb	a3,0(a0) # 700000 <iSLER_mess.c.d6599a54+0x6fceaf>
	for(int f = 0; f < int_points; f++) {
    1212:	fec792e3          	bne	a5,a2,11f6 <main+0x300>
		txctune_co[f] = tune | (tune << 4);
    1216:	6605                	lui	a2,0x1
	for(int f = 0; f < int_points; f++) {
    1218:	4681                	li	a3,0
		tune = (dCO4080 * (f -int_points)) / int_points;
    121a:	48d1                	li	a7,20
		txctune_co[f] = tune | (tune << 4);
    121c:	1641                	addi	a2,a2,-16
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
    121e:	02800513          	li	a0,40
		tune = (dCO4080 * (f -int_points)) / int_points;
    1222:	0316d5b3          	divu	a1,a3,a7
		txctune_co[f] = tune | (tune << 4);
    1226:	1038                	addi	a4,sp,40
    1228:	00f70833          	add	a6,a4,a5
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
    122c:	0785                	addi	a5,a5,1
    122e:	96ce                	add	a3,a3,s3
		txctune_co[f] = tune | (tune << 4);
    1230:	00459713          	slli	a4,a1,0x4
    1234:	8f71                	and	a4,a4,a2
    1236:	8f4d                	or	a4,a4,a1
    1238:	00e80023          	sb	a4,0(a6) # 80000000 <_eusrstack+0x5fff8000>
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
    123c:	fea793e3          	bne	a5,a0,1222 <main+0x32c>
    1240:	1034                	addi	a3,sp,40
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
    1242:	4701                	li	a4,0
		RF->TXCTUNE_CO[i] = ((uint32_t*)txctune_co)[i];
    1244:	4000d537          	lui	a0,0x4000d
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
    1248:	4629                	li	a2,10
		RF->TXCTUNE_CO[i] = ((uint32_t*)txctune_co)[i];
    124a:	428c                	lw	a1,0(a3)
    124c:	02870793          	addi	a5,a4,40
    1250:	078a                	slli	a5,a5,0x2
    1252:	97aa                	add	a5,a5,a0
    1254:	c38c                	sw	a1,0(a5)
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
    1256:	0705                	addi	a4,a4,1
    1258:	0691                	addi	a3,a3,4
    125a:	fec718e3          	bne	a4,a2,124a <main+0x354>
	uint32_t dGA0140 = nGA2401 - nGA2440;
    125e:	415b0b33          	sub	s6,s6,s5
	uint32_t dGA4080 = nGA2440 - nGA2480;
    1262:	4695                	li	a3,5
    1264:	02db06b3          	mul	a3,s6,a3
		txctune_ga[f] = tune | (tune << 4);
    1268:	6605                	lui	a2,0x1
	uint32_t dGA4080 = nGA2440 - nGA2480;
    126a:	41ba8ab3          	sub	s5,s5,s11
	uint8_t txctune_ga[sizeof(RF->TXCTUNE_GA)] = {0};
    126e:	ce02                	sw	zero,28(sp)
    1270:	d002                	sw	zero,32(sp)
    1272:	d202                	sw	zero,36(sp)
	for(int f = 1; f < int_points; f++) {
    1274:	4785                	li	a5,1
		tune = (dGA0140 * (int_points -f)) / int_points;
    1276:	4599                	li	a1,6
		txctune_ga[f] = tune | (tune << 4);
    1278:	1641                	addi	a2,a2,-16
    127a:	0878                	addi	a4,sp,28
		tune = (dGA0140 * (int_points -f)) / int_points;
    127c:	02b6d533          	divu	a0,a3,a1
		txctune_ga[f] = tune | (tune << 4);
    1280:	00f70833          	add	a6,a4,a5
	for(int f = 1; f < int_points; f++) {
    1284:	0785                	addi	a5,a5,1
    1286:	416686b3          	sub	a3,a3,s6
		txctune_ga[f] = tune | (tune << 4);
    128a:	00451713          	slli	a4,a0,0x4
    128e:	8f71                	and	a4,a4,a2
    1290:	8f49                	or	a4,a4,a0
    1292:	00e80023          	sb	a4,0(a6)
	for(int f = 1; f < int_points; f++) {
    1296:	feb792e3          	bne	a5,a1,127a <main+0x384>
		txctune_ga[f] = tune | (tune << 4);
    129a:	6605                	lui	a2,0x1
	for(int f = 1; f < int_points; f++) {
    129c:	4701                	li	a4,0
		tune = (dGA4080 * (f -int_points)) / int_points;
    129e:	4319                	li	t1,6
		txctune_ga[f] = tune | (tune << 4);
    12a0:	ff060893          	addi	a7,a2,-16 # ff0 <main+0xfa>
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
    12a4:	452d                	li	a0,11
		tune = (dGA4080 * (f -int_points)) / int_points;
    12a6:	026755b3          	divu	a1,a4,t1
		txctune_ga[f] = tune | (tune << 4);
    12aa:	0874                	addi	a3,sp,28
    12ac:	00f68833          	add	a6,a3,a5
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
    12b0:	0785                	addi	a5,a5,1
    12b2:	9756                	add	a4,a4,s5
		txctune_ga[f] = tune | (tune << 4);
    12b4:	00459693          	slli	a3,a1,0x4
    12b8:	0116f6b3          	and	a3,a3,a7
    12bc:	8ecd                	or	a3,a3,a1
    12be:	00d80023          	sb	a3,0(a6)
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
    12c2:	fea792e3          	bne	a5,a0,12a6 <main+0x3b0>
		RF->TXCTUNE_GA[i] = ((uint32_t*)txctune_ga)[i];
    12c6:	46f2                	lw	a3,28(sp)
    12c8:	4000d7b7          	lui	a5,0x4000d
    12cc:	08078713          	addi	a4,a5,128 # 4000d080 <_eusrstack+0x20005080>
    12d0:	c734                	sw	a3,72(a4)
    12d2:	5682                	lw	a3,32(sp)
    12d4:	c774                	sw	a3,76(a4)
    12d6:	5692                	lw	a3,36(sp)
    12d8:	cb34                	sw	a3,80(a4)
	RF->RF1 &= 0xffffffef;
    12da:	43d8                	lw	a4,4(a5)
	RF->RF20 &= 0xfffeffff;
    12dc:	76c1                	lui	a3,0xffff0
    12de:	16fd                	addi	a3,a3,-1
	RF->RF1 &= 0xffffffef;
    12e0:	9b3d                	andi	a4,a4,-17
    12e2:	c3d8                	sw	a4,4(a5)
	RF->RF1 &= 0xfffffffe;
    12e4:	43d8                	lw	a4,4(a5)
    12e6:	9b79                	andi	a4,a4,-2
    12e8:	c3d8                	sw	a4,4(a5)
	RF->RF10 |= 0x1000;
    12ea:	5798                	lw	a4,40(a5)
    12ec:	8f51                	or	a4,a4,a2
    12ee:	d798                	sw	a4,40(a5)
	RF->RF11 |= 0x10;
    12f0:	57d8                	lw	a4,44(a5)
    12f2:	01076713          	ori	a4,a4,16
    12f6:	d7d8                	sw	a4,44(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xffffffc0) | (tune2440 & 0x3f);
    12f8:	5f98                	lw	a4,56(a5)
    12fa:	fc077713          	andi	a4,a4,-64
    12fe:	01976733          	or	a4,a4,s9
    1302:	df98                	sw	a4,56(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0x80ffffff) | (tune2440 & 0x7f000000);
    1304:	5f88                	lw	a0,56(a5)
    1306:	81000737          	lui	a4,0x81000
    130a:	177d                	addi	a4,a4,-1
    130c:	8f69                	and	a4,a4,a0
    130e:	7f000537          	lui	a0,0x7f000
    1312:	00aa7533          	and	a0,s4,a0
    1316:	8d59                	or	a0,a0,a4
    1318:	df88                	sw	a0,56(a5)
	RF->RF1 |= 0x100;
    131a:	43d8                	lw	a4,4(a5)
    131c:	10076713          	ori	a4,a4,256
    1320:	c3d8                	sw	a4,4(a5)
	RF->RF20 &= 0xfffeffff;
    1322:	4bb8                	lw	a4,80(a5)
    1324:	8f75                	and	a4,a4,a3
    1326:	cbb8                	sw	a4,80(a5)
	RF->RF2 |= 0x200000;
    1328:	4798                	lw	a4,8(a5)
    132a:	002006b7          	lui	a3,0x200
    132e:	8f55                	or	a4,a4,a3
    1330:	c798                	sw	a4,8(a5)
	RF->RF3 = (RF->RF3 & 0xffffffef) | 0x10;
    1332:	47d8                	lw	a4,12(a5)
	while(LL->TMR && ((RF->RXTUNE >> 8) & 1));
    1334:	4000c6b7          	lui	a3,0x4000c
	RF->RF3 = (RF->RF3 & 0xffffffef) | 0x10;
    1338:	01076713          	ori	a4,a4,16
    133c:	c7d8                	sw	a4,12(a5)
	RF->RF1 |= 0x1000;
    133e:	43d8                	lw	a4,4(a5)
    1340:	8f51                	or	a4,a4,a2
    1342:	c3d8                	sw	a4,4(a5)
	LL->TMR = 100;
    1344:	4000c7b7          	lui	a5,0x4000c
    1348:	06400713          	li	a4,100
    134c:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
    1350:	d3f8                	sw	a4,100(a5)
	while(LL->TMR && ((RF->RXTUNE >> 8) & 1));
    1352:	4000d737          	lui	a4,0x4000d
    1356:	20068793          	addi	a5,a3,512 # 4000c200 <_eusrstack+0x20004200>
    135a:	53fc                	lw	a5,100(a5)
    135c:	c791                	beqz	a5,1368 <main+0x472>
    135e:	09c72783          	lw	a5,156(a4) # 4000d09c <_eusrstack+0x2000509c>
    1362:	1007f793          	andi	a5,a5,256
    1366:	fbe5                	bnez	a5,1356 <main+0x460>
	tuneFilter = RF->RXTUNE & 0x1f;
    1368:	4000d7b7          	lui	a5,0x4000d
    136c:	08078713          	addi	a4,a5,128 # 4000d080 <_eusrstack+0x20005080>
    1370:	4f54                	lw	a3,28(a4)
    1372:	cf418713          	addi	a4,gp,-780 # 200000f0 <tuneFilter>
    1376:	8afd                	andi	a3,a3,31
    1378:	c314                	sw	a3,0(a4)
	RF->RF20 |= 0x10000;
    137a:	4bb4                	lw	a3,80(a5)
    137c:	6641                	lui	a2,0x10
    137e:	8ed1                	or	a3,a3,a2
    1380:	cbb4                	sw	a3,80(a5)
	RF->RF20 = (RF->RF20 & 0xffffffe0) | tuneFilter;
    1382:	4bb4                	lw	a3,80(a5)
    1384:	4310                	lw	a2,0(a4)
    1386:	9a81                	andi	a3,a3,-32
    1388:	8ed1                	or	a3,a3,a2
    138a:	cbb4                	sw	a3,80(a5)
	RF->RF2 &= 0xffdfffff;
    138c:	4794                	lw	a3,8(a5)
    138e:	ffe00637          	lui	a2,0xffe00
    1392:	167d                	addi	a2,a2,-1
    1394:	8ef1                	and	a3,a3,a2
    1396:	c794                	sw	a3,8(a5)
	tuneFilter2M = (tuneFilter +2 < 0x1f) ? (tuneFilter +2) : 0x1f;
    1398:	4314                	lw	a3,0(a4)
    139a:	4679                	li	a2,30
    139c:	47fd                	li	a5,31
    139e:	0689                	addi	a3,a3,2
    13a0:	00d66463          	bltu	a2,a3,13a8 <main+0x4b2>
    13a4:	431c                	lw	a5,0(a4)
    13a6:	0789                	addi	a5,a5,2
    13a8:	cef1ac23          	sw	a5,-776(gp) # 200000f4 <tuneFilter2M>
	RF->RF22 &= 0xfffeffff;
    13ac:	4000d7b7          	lui	a5,0x4000d
    13b0:	4fb8                	lw	a4,88(a5)
    13b2:	76c1                	lui	a3,0xffff0
    13b4:	16fd                	addi	a3,a3,-1
    13b6:	8f75                	and	a4,a4,a3
    13b8:	cfb8                	sw	a4,88(a5)
	RF->RF2 |= 0x10000;
    13ba:	4798                	lw	a4,8(a5)
    13bc:	66c1                	lui	a3,0x10
	DevSetMode(0);
    13be:	4501                	li	a0,0
	RF->RF2 |= 0x10000;
    13c0:	8f55                	or	a4,a4,a3
    13c2:	c798                	sw	a4,8(a5)
	RF->RF3 = (RF->RF3 & 0xfffffeff) | 0x100;
    13c4:	47d8                	lw	a4,12(a5)
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
    13c6:	ffef06b7          	lui	a3,0xffef0
    13ca:	16fd                	addi	a3,a3,-1
	RF->RF3 = (RF->RF3 & 0xfffffeff) | 0x100;
    13cc:	10076713          	ori	a4,a4,256
    13d0:	c7d8                	sw	a4,12(a5)
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
    13d2:	43d8                	lw	a4,4(a5)
	NVIC->IPRIOR[0x15] |= 0x80;
    13d4:	e000e4b7          	lui	s1,0xe000e
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
    13d8:	8f75                	and	a4,a4,a3
    13da:	001006b7          	lui	a3,0x100
    13de:	8f55                	or	a4,a4,a3
    13e0:	c3d8                	sw	a4,4(a5)
	DevSetMode(0);
    13e2:	dd9fe0ef          	jal	ra,1ba <DevSetMode>
	NVIC->IPRIOR[0x15] |= 0x80;
    13e6:	4154c783          	lbu	a5,1045(s1) # e000e415 <_eusrstack+0xc0006415>
	funGpioInitAll();
	funPinMode(LED, GPIO_CFGLR_OUT_2Mhz_PP);
	funPinMode(PA10, GPIO_CFGLR_IN_PUPD);

	RFCoreInit(LL_TX_POWER_0_DBM);
	printf(".~ ch32fun iSLER ~.\n");
    13ea:	6509                	lui	a0,0x2
    13ec:	a1450513          	addi	a0,a0,-1516 # 1a14 <LLE_IRQHandler+0xe0>
    13f0:	f807e793          	ori	a5,a5,-128
    13f4:	0ff7f793          	andi	a5,a5,255
    13f8:	40f48aa3          	sb	a5,1045(s1)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    13fc:	002007b7          	lui	a5,0x200
    1400:	10f4a023          	sw	a5,256(s1)
    1404:	fc0ff0ef          	jal	ra,bc4 <puts>
	blink(5);
    1408:	4515                	li	a0,5
    140a:	b8cff0ef          	jal	ra,796 <blink>
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
    140e:	400017b7          	lui	a5,0x40001
    1412:	08078793          	addi	a5,a5,128 # 40001080 <_eusrstack+0x1fff9080>
    1416:	5bd8                	lw	a4,52(a5)
    1418:	76f1                	lui	a3,0xffffc
    141a:	16fd                	addi	a3,a3,-1
    141c:	8f75                	and	a4,a4,a3
    141e:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    |= (pin & ~PB);
    1420:	5398                	lw	a4,32(a5)
    1422:	6691                	lui	a3,0x4

	uint32_t sec_time = 0;
	uint8_t frame_info[] = {0xff, 0x10}; // PDU, len, (maybe not?) needed in RX mode

	// uint32_t cmdValues[] = { 0x61, 0x62, 0x63, 0x64 };
	stepper32_t command_step = {
    1424:	4b01                	li	s6,0
    1426:	8f55                	or	a4,a4,a3
    1428:	d398                	sw	a4,32(a5)
void WS2812BDMAInit( )
{
	// Enable DMA + Peripherals
#ifdef CH5xx
	funPinMode( bMOSI, GPIO_CFGLR_OUT_2Mhz_PP );
	R8_SPI0_CLOCK_DIV = FUNCONF_SYSTEM_CORE_CLOCK / 3000000; // div = Fsys/3MHz
    142a:	46d1                	li	a3,20
    142c:	40004737          	lui	a4,0x40004
    1430:	00d701a3          	sb	a3,3(a4) # 40004003 <_eusrstack+0x1fffc003>
	R8_SPI0_CTRL_MOD = RB_SPI_ALL_CLEAR;
    1434:	4689                	li	a3,2
    1436:	00d70023          	sb	a3,0(a4)
	R8_SPI0_CTRL_MOD = RB_SPI_MOSI_OE | RB_SPI_2WIRE_MOD;
    143a:	04400693          	li	a3,68
    143e:	00d70023          	sb	a3,0(a4)
	R16_SPI0_DMA_END = ( (uint32_t)WS2812dmabuff + (DMA_BUFFER_LEN * 2) );
    1442:	13c18693          	addi	a3,gp,316 # 20000538 <WS2812dmabuff>
    1446:	06c2                	slli	a3,a3,0x10
    1448:	82c1                	srli	a3,a3,0x10
    144a:	c236                	sw	a3,4(sp)
    144c:	06068693          	addi	a3,a3,96 # 4060 <iSLER_mess.c.d6599a54+0xf0f>
    1450:	06c2                	slli	a3,a3,0x10
    1452:	82c1                	srli	a3,a3,0x10
    1454:	00d71e23          	sh	a3,28(a4)
	R8_SPI0_CTRL_CFG |= RB_SPI_BIT_ORDER;
    1458:	00174683          	lbu	a3,1(a4)
		.values = Neo_Event_list,
		.size = 5,
		.index = 0
	};

	Button_t button = {
    145c:	4c81                	li	s9,0
   uint32_t release_time;
   uint32_t press_time;
} Button_t;

void _reset_timers(uint8_t newState, Button_t *model) {
   model->btn_state = newState;
    145e:	498d                	li	s3,3
    1460:	0ff6f693          	andi	a3,a3,255
    1464:	0206e693          	ori	a3,a3,32
    1468:	00d700a3          	sb	a3,1(a4)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    146c:	00080737          	lui	a4,0x80
    1470:	10e4a023          	sw	a4,256(s1)
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
    1474:	5bd8                	lw	a4,52(a5)
	uint32_t sec_time = 0;
    1476:	4d01                	li	s10,0
    1478:	9b3d                	andi	a4,a4,-17
    147a:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     |= (pin & ~PB);
    147c:	5b98                	lw	a4,48(a5)
    move_leds.is_enabled = 1;
    147e:	cb418a13          	addi	s4,gp,-844 # 200000b0 <move_leds>
    1482:	01076713          	ori	a4,a4,16
    1486:	db98                	sw	a4,48(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
    1488:	5398                	lw	a4,32(a5)
	dataFrame->data_len = data_len;
    148a:	c2418493          	addi	s1,gp,-988 # 20000020 <dataFrame>
    148e:	9b3d                	andi	a4,a4,-17
    1490:	d398                	sw	a4,32(a5)
   model->debounce_time = millis();
    1492:	00042c03          	lw	s8,0(s0)
   model->release_time = millis();
    1496:	00042a83          	lw	s5,0(s0)
    color_ani.ref_index = 0;
    149a:	cd018793          	addi	a5,gp,-816 # 200000cc <color_ani>
    149e:	c43e                	sw	a5,8(sp)
	};

	button_setup(&button);

	while(1) {		
		if (funDigitalRead(PA10) == FUN_LOW) {
    14a0:	400017b7          	lui	a5,0x40001
    14a4:	0a47a783          	lw	a5,164(a5) # 400010a4 <_eusrstack+0x1fff90a4>
    14a8:	4007f793          	andi	a5,a5,1024
    14ac:	14079663          	bnez	a5,15f8 <main+0x702>
	uint32_t now = millis();
    14b0:	4018                	lw	a4,0(s0)
			move_leds.is_enabled = 1;
    14b2:	4785                	li	a5,1
    14b4:	00fa0523          	sb	a5,10(s4) # 2000a <iSLER_mess.c.d6599a54+0x1ceb9>
	if (now - *ref_time > duration) {
    14b8:	6785                	lui	a5,0x1
    14ba:	41a706b3          	sub	a3,a4,s10
    14be:	77078793          	addi	a5,a5,1904 # 1770 <main+0x87a>
    14c2:	06d7f963          	bgeu	a5,a3,1534 <main+0x63e>

			if (systick_handleTimeout(&sec_time, 6000)) {
				remote_command_t remote_cmd1 = {
					.command = 0xBB,
					.value1 = command_step.values[command_step.index],
    14c6:	002b1693          	slli	a3,s6,0x2
    14ca:	c0418793          	addi	a5,gp,-1020 # 20000000 <Neo_Event_list>
    14ce:	97b6                	add	a5,a5,a3
    14d0:	0007ad03          	lw	s10,0(a5)
					.value2 = 0xFFFFFFFF
				};
				// move to the next value
				stepper32_tick(&command_step, 1);

				printf("Sending value: %08X\n", remote_cmd1.value1);
    14d4:	6509                	lui	a0,0x2
    return ret;
}

//! stepper32
void stepper32_tick(stepper32_t *s, uint8_t skip) {
    s->index = (s->index + skip) % s->size;
    14d6:	4795                	li	a5,5
    14d8:	85ea                	mv	a1,s10
    14da:	0b05                	addi	s6,s6,1
    14dc:	a2850513          	addi	a0,a0,-1496 # 1a28 <LLE_IRQHandler+0xf4>
    14e0:	c63a                	sw	a4,12(sp)
    14e2:	02fb6b33          	rem	s6,s6,a5
    14e6:	e62ff0ef          	jal	ra,b48 <printf>
    14ea:	47a5                	li	a5,9
    14ec:	00f486a3          	sb	a5,13(s1)
	memcpy(dataFrame->payload, cmd, data_len);
    14f0:	fbb00793          	li	a5,-69
    14f4:	00f48723          	sb	a5,14(s1)
    14f8:	008d5793          	srli	a5,s10,0x8
    14fc:	00f48823          	sb	a5,16(s1)
    1500:	010d5793          	srli	a5,s10,0x10
    1504:	01a487a3          	sb	s10,15(s1)
    1508:	00f488a3          	sb	a5,17(s1)
    150c:	018d5d13          	srli	s10,s10,0x18
    1510:	57fd                	li	a5,-1
    1512:	01a48923          	sb	s10,18(s1)
    1516:	00f489a3          	sb	a5,19(s1)
    151a:	00f48a23          	sb	a5,20(s1)
    151e:	00f48aa3          	sb	a5,21(s1)
    1522:	00f48b23          	sb	a5,22(s1)

				modiSLER_loadCommand(&dataFrame, &remote_cmd1, sizeof(remote_cmd1));
				modiSLER_adv_data(&dataFrame);
    1526:	f36ff0ef          	jal	ra,c5c <modiSLER_adv_data.constprop.0>
				blink(1);
    152a:	4505                	li	a0,1
    152c:	a6aff0ef          	jal	ra,796 <blink>
		*ref_time = now;
    1530:	4732                	lw	a4,12(sp)
    1532:	8d3a                	mv	s10,a4
    //         return Neo_render_colorChase(&move_leds, &color_ani, ledIdx);
    // }   
}

void Neo_task() {
    if (WS2812BLEDInUse || move_leds.is_enabled == 0) return;
    1534:	ce018793          	addi	a5,gp,-800 # 200000dc <WS2812BLEDInUse>
    1538:	4398                	lw	a4,0(a5)
    153a:	e351                	bnez	a4,15be <main+0x6c8>
    153c:	00aa4703          	lbu	a4,10(s4)
    1540:	cf3d                	beqz	a4,15be <main+0x6c8>
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
    1542:	30002773          	csrr	a4,mstatus
	result &= ~0x88; __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
    1546:	f7777713          	andi	a4,a4,-137
    154a:	30071073          	csrw	mstatus,a4
	WS2812BLEDInUse = 1;
    154e:	4705                	li	a4,1
    1550:	c398                	sw	a4,0(a5)
	R8_SPI0_INTER_EN &= ~RB_SPI_IE_DMA_END;
    1552:	400047b7          	lui	a5,0x40004
    1556:	0027c703          	lbu	a4,2(a5) # 40004002 <_eusrstack+0x1fffc002>
    155a:	0f777713          	andi	a4,a4,247
    155e:	00e78123          	sb	a4,2(a5)
	R8_SPI0_CTRL_CFG &= ~RB_SPI_DMA_ENABLE;
    1562:	0017c703          	lbu	a4,1(a5)
    1566:	0fe77713          	andi	a4,a4,254
    156a:	00e780a3          	sb	a4,1(a5)
	R16_SPI0_TOTAL_CNT = 0;
    156e:	00079623          	sh	zero,12(a5)
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
    1572:	30002773          	csrr	a4,mstatus
	result |= 0x88;  __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
    1576:	08876713          	ori	a4,a4,136
    157a:	30071073          	csrw	mstatus,a4
	WS2812LEDs = leds;
    157e:	4699                	li	a3,6
    1580:	ced1a423          	sw	a3,-792(gp) # 200000e4 <WS2812LEDs>
	WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 0 );
    1584:	4501                	li	a0,0
	WS2812LEDPlace = -WS2812B_RESET_PERIOD;
    1586:	56f9                	li	a3,-2
    1588:	ced1a223          	sw	a3,-796(gp) # 200000e0 <WS2812LEDPlace>
	WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 0 );
    158c:	df1fe0ef          	jal	ra,37c <WS2812FillBuffSec.constprop.0>
	R16_SPI0_TOTAL_CNT = DMA_BUFFER_LEN * 2;
    1590:	400047b7          	lui	a5,0x40004
    1594:	06000713          	li	a4,96
    1598:	00e79623          	sh	a4,12(a5) # 4000400c <_eusrstack+0x1fffc00c>
	R16_SPI0_DMA_BEG = (uint32_t)WS2812dmabuff;
    159c:	4712                	lw	a4,4(sp)
    159e:	00e79c23          	sh	a4,24(a5)
	R8_SPI0_INT_FLAG = RB_SPI_IF_CNT_END | RB_SPI_IF_DMA_END;
    15a2:	4725                	li	a4,9
    15a4:	00e78323          	sb	a4,6(a5)
	R8_SPI0_INTER_EN = RB_SPI_IE_DMA_END;
    15a8:	4721                	li	a4,8
    15aa:	00e78123          	sb	a4,2(a5)
	R8_SPI0_CTRL_CFG |= RB_SPI_DMA_ENABLE;
    15ae:	0017c703          	lbu	a4,1(a5)
    15b2:	0ff77713          	andi	a4,a4,255
    15b6:	00176713          	ori	a4,a4,1
    15ba:	00e780a3          	sb	a4,1(a5)
}

void button_task(Button_t *model, void (*handler)(Button_Event_e, uint32_t)) {
   if (model->pin == 0xFF) return;
   
   uint32_t now = millis();
    15be:	401c                	lw	a5,0(s0)
   uint8_t read = funDigitalRead(model->pin);
    15c0:	40001737          	lui	a4,0x40001
    15c4:	0a472703          	lw	a4,164(a4) # 400010a4 <_eusrstack+0x1fff90a4>

   // Debounce check
   if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    15c8:	41878633          	sub	a2,a5,s8
    15cc:	46cd                	li	a3,19
    15ce:	02c6f263          	bgeu	a3,a2,15f2 <main+0x6fc>
   model->debounce_time = now;

   switch (model->btn_state) {
    15d2:	4689                	li	a3,2
   uint8_t read = funDigitalRead(model->pin);
    15d4:	8b41                	andi	a4,a4,16
   switch (model->btn_state) {
    15d6:	28d98363          	beq	s3,a3,185c <main+0x966>
    15da:	468d                	li	a3,3
    15dc:	1cd98e63          	beq	s3,a3,17b8 <main+0x8c2>
    15e0:	20099463          	bnez	s3,17e8 <main+0x8f2>
            _reset_timers(BTN_DOWN, model);      // First Press  
         }
         break;

      case BTN_DOWN:
         if (read > 0) {
    15e4:	1e070363          	beqz	a4,17ca <main+0x8d4>
   model->debounce_time = millis();
    15e8:	401c                	lw	a5,0(s0)
   model->btn_state = newState;
    15ea:	4985                	li	s3,1
   model->release_time = millis();
    15ec:	00042a83          	lw	s5,0(s0)
    15f0:	a011                	j	15f4 <main+0x6fe>
   if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    15f2:	87e2                	mv	a5,s8

         if (read < 1 && release_duration < TICK_CLICK_DUR) {
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

         } else if (release_duration > TICK_CLICK_DUR) {
    15f4:	8c3e                	mv	s8,a5
    15f6:	b56d                	j	14a0 <main+0x5aa>
	}
}

void Frame_RX(uint8_t frame_info[], uint8_t channel, uint8_t phy_mode) {
	DevSetMode(0);
    15f8:	4501                	li	a0,0
    15fa:	bc1fe0ef          	jal	ra,1ba <DevSetMode>
	if(LL->LL0 & 3) {
    15fe:	4000c7b7          	lui	a5,0x4000c
    1602:	2007a703          	lw	a4,512(a5) # 4000c200 <_eusrstack+0x20004200>
    1606:	20078693          	addi	a3,a5,512
    160a:	8b0d                	andi	a4,a4,3
    160c:	cb11                	beqz	a4,1620 <main+0x72a>
		LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    160e:	4ab8                	lw	a4,80(a3)
    1610:	9b61                	andi	a4,a4,-8
    1612:	cab8                	sw	a4,80(a3)
		LL->LL0 |= 0x08;
    1614:	2007a703          	lw	a4,512(a5)
    1618:	00876713          	ori	a4,a4,8
    161c:	20e7a023          	sw	a4,512(a5)
	}
	LL->TMR = 0;
    1620:	4000c737          	lui	a4,0x4000c
    1624:	20070793          	addi	a5,a4,512 # 4000c200 <_eusrstack+0x20004200>
    1628:	0607a223          	sw	zero,100(a5)
	RF->RF11 &= 0xfffffffd;
    162c:	4000d6b7          	lui	a3,0x4000d
    1630:	56dc                	lw	a5,44(a3)

	DevSetChannel(channel);
	DevSetMode(DEVSETMODE_RX);
    1632:	0d900513          	li	a0,217
	RF->RF11 &= 0xfffffffd;
    1636:	9bf5                	andi	a5,a5,-3
    1638:	d6dc                	sw	a5,44(a3)
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
    163a:	10072683          	lw	a3,256(a4)
    163e:	f806f693          	andi	a3,a3,-128
    1642:	0256e693          	ori	a3,a3,37
    1646:	10d72023          	sw	a3,256(a4)
	DevSetMode(DEVSETMODE_RX);
    164a:	b71fe0ef          	jal	ra,1ba <DevSetMode>

#if defined(CH582_CH583) || defined(CH32V208)
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
				   (phy_mode == PHY_S2) ? CTRL_CFG_PHY_CODED:
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
										  CTRL_CFG_PHY_1M; // default 1M for now
    164e:	4000c737          	lui	a4,0x4000c
    1652:	10072683          	lw	a3,256(a4) # 4000c100 <_eusrstack+0x20004100>
    1656:	7645                	lui	a2,0xffff1
    1658:	167d                	addi	a2,a2,-1
    165a:	8ef1                	and	a3,a3,a2
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
    165c:	6605                	lui	a2,0x1
    165e:	8ed1                	or	a3,a3,a2
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
    1660:	10d72023          	sw	a3,256(a4)
	BB->BB7 = (BB->BB7 & 0xff00fc00) | ((phy_mode == PHY_2M) ? 0x7f00a0 : 0x79009c);
#elif defined(CH571_CH573)
	BB->BB11 = (BB->BB11 & 0xfffffffc) | 2; // no |2 for TX
#elif defined(CH582_CH583) || defined(CH32V208)
#if defined(CH582_CH583)
	BB->BB4 = (phy_mode < PHY_S2) ? 0x3722d0 : 0x3722df;
    1664:	4000c7b7          	lui	a5,0x4000c
    1668:	003726b7          	lui	a3,0x372
    166c:	10078793          	addi	a5,a5,256 # 4000c100 <_eusrstack+0x20004100>
    1670:	2d068693          	addi	a3,a3,720 # 3722d0 <iSLER_mess.c.d6599a54+0x36f17f>
    1674:	cb94                	sw	a3,16(a5)
#elif defined(CH32V208)
	BB->BB4 = (phy_mode < PHY_S2) ? 0x3222d0 : 0x34a4df;
#endif
	BB->BB5 = (phy_mode < PHY_S2) ? 0x8101901 : 0x8301ff1;
    1676:	081026b7          	lui	a3,0x8102
    167a:	90168693          	addi	a3,a3,-1791 # 8101901 <iSLER_mess.c.d6599a54+0x80fe7b0>
    167e:	cbd4                	sw	a3,20(a5)
	BB->BB6 = (phy_mode < PHY_S2) ? 0x31624 : 0x31619;
    1680:	000316b7          	lui	a3,0x31
    1684:	62468693          	addi	a3,a3,1572 # 31624 <iSLER_mess.c.d6599a54+0x2e4d3>
    1688:	cf94                	sw	a3,24(a5)
	BB->BB8 = (phy_mode < PHY_S2) ? 0x90083 : 0x90086;
    168a:	000906b7          	lui	a3,0x90
    168e:	08368693          	addi	a3,a3,131 # 90083 <iSLER_mess.c.d6599a54+0x8cf32>
    1692:	d394                	sw	a3,32(a5)
	BB->BB9 = 0x1006310;
    1694:	010066b7          	lui	a3,0x1006
    1698:	31068693          	addi	a3,a3,784 # 1006310 <iSLER_mess.c.d6599a54+0x10031bf>
    169c:	d3d4                	sw	a3,36(a5)
	BB->BB10 = (phy_mode < PHY_S2) ? 0x28be : 0x28de;
    169e:	668d                	lui	a3,0x3
    16a0:	8be68693          	addi	a3,a3,-1858 # 28be <ch32fun.c.e0983271+0x628>
    16a4:	d794                	sw	a3,40(a5)
#elif defined(CH584_CH585) || defined(CH591_CH592)
	BB->BB6 = (BB->BB6 & 0xfffffc00) | ((phy_mode == PHY_2M) ? 0x13a : 0x132);
	BB->BB4 = (BB->BB4 & 0x00ffffff) | ((phy_mode == PHY_2M) ? 0x78000000 : 0x7f000000);
#endif

	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
    16a6:	8e89c6b7          	lui	a3,0x8e89c
    16aa:	ed668693          	addi	a3,a3,-298 # 8e89bed6 <_eusrstack+0x6e893ed6>
    16ae:	c794                	sw	a3,8(a5)
	BB->CRCINIT1 = 0x555555; // crc init
    16b0:	005556b7          	lui	a3,0x555
    16b4:	55568693          	addi	a3,a3,1365 # 555555 <iSLER_mess.c.d6599a54+0x552404>
    16b8:	c3d4                	sw	a3,4(a5)
#endif

	//LL->LL1 = (LL->LL1 & 0xfffffffe) | 1; // 1: AUTO mode, to swap between RX <-> TX when either happened. 0: BASIC
	//LL->FRAME_BUF = (uint32_t)frame_info; // also this only in AUTO mode

	LL->LL0 = 1; // Not sure what this does, but on TX it's 2
    16ba:	4785                	li	a5,1
    16bc:	20f72023          	sw	a5,512(a4)
	rx_ready = 0;
    16c0:	cec18793          	addi	a5,gp,-788 # 200000e8 <rx_ready>
    16c4:	0007a023          	sw	zero,0(a5)
    16c8:	cec18713          	addi	a4,gp,-788 # 200000e8 <rx_ready>
			}
		} else {
			// now listen for frames on channel 37. When the RF subsystem
			// detects and finalizes one, "rx_ready" in iSLER.h is set true
			Frame_RX(frame_info, 37, PHY_MODE);
			while(!rx_ready);
    16cc:	431c                	lw	a5,0(a4)
    16ce:	dffd                	beqz	a5,16cc <main+0x7d6>
	// for(int i= 0;i<6; i++) sender_mac[i] = frame[7-i];
	// printf("sender_mac\n");
	// PRINT_ARRAY(sender_mac, "%02x");
	// uint8_t target_mac[] = { BLE_AD_MAC(0x112233445566) };

	uint8_t target_mac[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };
    16d0:	443327b7          	lui	a5,0x44332
    16d4:	21178793          	addi	a5,a5,529 # 44332211 <_eusrstack+0x2432a211>
    16d8:	d43e                	sw	a5,40(sp)
    16da:	6799                	lui	a5,0x6
    16dc:	65578793          	addi	a5,a5,1621 # 6655 <iSLER_mess.c.d6599a54+0x3504>

	if (memcmp(rx_frame->mac, target_mac, 6) == 0) {
    16e0:	4619                	li	a2,6
    16e2:	102c                	addi	a1,sp,40
    16e4:	00290513          	addi	a0,s2,2
	uint8_t target_mac[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };
    16e8:	02f11623          	sh	a5,44(sp)
	if (memcmp(rx_frame->mac, target_mac, 6) == 0) {
    16ec:	cb2ff0ef          	jal	ra,b9e <memcmp>
    16f0:	e40512e3          	bnez	a0,1534 <main+0x63e>
		// first 8 bytes contains: [RSSI x 1Byte] [len x 1Byte] [MAC x 6Bytes]
		// The first two bytes of the frame are metadata with RSSI and length
		PRINT_SEPARATOR();
    16f4:	6509                	lui	a0,0x2
    16f6:	a4050513          	addi	a0,a0,-1472 # 1a40 <LLE_IRQHandler+0x10c>
    16fa:	ccaff0ef          	jal	ra,bc4 <puts>
		printf("RSSI:%d len:%d MAC:", frame[0], frame[1]);
    16fe:	00194603          	lbu	a2,1(s2)
    1702:	00094583          	lbu	a1,0(s2)
    1706:	6509                	lui	a0,0x2
    1708:	a6850513          	addi	a0,a0,-1432 # 1a68 <LLE_IRQHandler+0x134>
    170c:	c3cff0ef          	jal	ra,b48 <printf>
    1710:	87de                	mv	a5,s7
		PRINT_ARRAY(rx_frame->mac, "%02X");
    1712:	6689                	lui	a3,0x2
    1714:	0027c583          	lbu	a1,2(a5)
    1718:	a0c68513          	addi	a0,a3,-1524 # 1a0c <LLE_IRQHandler+0xd8>
    171c:	c63e                	sw	a5,12(sp)
    171e:	c2aff0ef          	jal	ra,b48 <printf>
    1722:	47b2                	lw	a5,12(sp)
    1724:	d0218713          	addi	a4,gp,-766 # 200000fe <LLE_BUF+0x6>
    1728:	0785                	addi	a5,a5,1
    172a:	6689                	lui	a3,0x2
    172c:	fef714e3          	bne	a4,a5,1714 <main+0x81e>
    1730:	4529                	li	a0,10
    1732:	cbeff0ef          	jal	ra,bf0 <putchar>
		// printf("Raw Data: ");
		// PRINT_ARRAY_WITH_SIZE(frame, frame[1], "%02X");

		// printf("preamble: %04X \n", rx_frame->dataFrame.preamble);
		// printf("controlbit: %04X \n", rx_frame->dataFrame.control_bits);
		printf("msgCode: %04X \n", rx_frame->dataFrame.msgCode);
    1736:	02892583          	lw	a1,40(s2)
    173a:	6509                	lui	a0,0x2
    173c:	a7c50513          	addi	a0,a0,-1412 # 1a7c <LLE_IRQHandler+0x148>
    1740:	81a1                	srli	a1,a1,0x8
    1742:	05c2                	slli	a1,a1,0x10
    1744:	81c1                	srli	a1,a1,0x10
    1746:	c02ff0ef          	jal	ra,b48 <printf>
		printf("groupId: %02X \n", rx_frame->dataFrame.group_id);
    174a:	03194583          	lbu	a1,49(s2)
    174e:	6509                	lui	a0,0x2
    1750:	a8c50513          	addi	a0,a0,-1396 # 1a8c <LLE_IRQHandler+0x158>
    1754:	bf4ff0ef          	jal	ra,b48 <printf>
		
		remote_command_t *cmd = (remote_command_t*)rx_frame->dataFrame.payload;
		printf("Command: %02X Value1: %08X Value2: %08X\n", 
    1758:	03394583          	lbu	a1,51(s2)
    175c:	03892683          	lw	a3,56(s2)
    1760:	03492603          	lw	a2,52(s2)
    1764:	6509                	lui	a0,0x2
    1766:	a9c50513          	addi	a0,a0,-1380 # 1a9c <LLE_IRQHandler+0x168>
    176a:	bdeff0ef          	jal	ra,b48 <printf>
			cmd->command, cmd->value1, cmd->value2);
		return cmd->value1;
    176e:	03492583          	lw	a1,52(s2)
    1772:	0ff5f793          	andi	a5,a1,255

			// we stepped over !rx_ready so we got a frame
			uint8_t cmd_code = modiSLER_rx_handler();
			if (cmd_code > 0) {
    1776:	c63e                	sw	a5,12(sp)
    1778:	da078ee3          	beqz	a5,1534 <main+0x63e>
    printf("Neo_loadCommand: %02X\n", cmd);
    177c:	6509                	lui	a0,0x2
    177e:	85be                	mv	a1,a5
    1780:	ac850513          	addi	a0,a0,-1336 # 1ac8 <LLE_IRQHandler+0x194>
    1784:	bc4ff0ef          	jal	ra,b48 <printf>
    Neo_LedCmd = cmd;
    1788:	47b2                	lw	a5,12(sp)
    178a:	ccf18623          	sb	a5,-820(gp) # 200000c8 <Neo_LedCmd>
    move_leds.is_enabled = 1;
    178e:	4785                	li	a5,1
    1790:	00fa0523          	sb	a5,10(s4)
    move_leds.ref_time = millis();
    1794:	401c                	lw	a5,0(s0)
    ARRAY_SET_VALUE(led_arr, 0);
    1796:	4661                	li	a2,24
    1798:	4581                	li	a1,0
    move_leds.ref_time = millis();
    179a:	00fa2823          	sw	a5,16(s4)
    color_ani.ref_index = 0;
    179e:	47a2                	lw	a5,8(sp)
    ARRAY_SET_VALUE(led_arr, 0);
    17a0:	19c18513          	addi	a0,gp,412 # 20000598 <led_arr>
    move_leds.ref_index = 0;
    17a4:	000a06a3          	sb	zero,13(s4)
    color_ani.ref_index = 0;
    17a8:	000782a3          	sb	zero,5(a5)
    ARRAY_SET_VALUE(led_arr, 0);
    17ac:	bc4ff0ef          	jal	ra,b70 <memset>
				Neo_loadCommand(cmd_code);
				blink(1);
    17b0:	4505                	li	a0,1
    17b2:	fe5fe0ef          	jal	ra,796 <blink>
    17b6:	bbbd                	j	1534 <main+0x63e>
         if (read < 1) {
    17b8:	e2071ee3          	bnez	a4,15f4 <main+0x6fe>
   model->debounce_time = millis();
    17bc:	4018                	lw	a4,0(s0)
            model->press_time = now;
    17be:	8cbe                	mv	s9,a5
   model->release_time = millis();
    17c0:	00042a83          	lw	s5,0(s0)
   model->debounce_time = millis();
    17c4:	87ba                	mv	a5,a4
   model->btn_state = newState;
    17c6:	4981                	li	s3,0
    17c8:	b535                	j	15f4 <main+0x6fe>
            if (press_duration > TICK_LONG_PRESS_DUR) {
    17ca:	6705                	lui	a4,0x1
            uint32_t press_duration = now - model->press_time;
    17cc:	419786b3          	sub	a3,a5,s9
            if (press_duration > TICK_LONG_PRESS_DUR) {
    17d0:	fa070713          	addi	a4,a4,-96 # fa0 <main+0xaa>
    17d4:	e2d770e3          	bgeu	a4,a3,15f4 <main+0x6fe>
			printf("Long Press\n"); break;
    17d8:	6509                	lui	a0,0x2
    17da:	ae050513          	addi	a0,a0,-1312 # 1ae0 <LLE_IRQHandler+0x1ac>
    17de:	c63e                	sw	a5,12(sp)
    17e0:	be4ff0ef          	jal	ra,bc4 <puts>
    17e4:	47b2                	lw	a5,12(sp)
    17e6:	b539                	j	15f4 <main+0x6fe>
         uint32_t release_duration = now - model->release_time;
    17e8:	415786b3          	sub	a3,a5,s5
         if (read < 1 && release_duration < TICK_CLICK_DUR) {
    17ec:	eb11                	bnez	a4,1800 <main+0x90a>
    17ee:	09f00713          	li	a4,159
    17f2:	00d76763          	bltu	a4,a3,1800 <main+0x90a>
   model->debounce_time = millis();
    17f6:	401c                	lw	a5,0(s0)
   model->btn_state = newState;
    17f8:	4989                	li	s3,2
   model->release_time = millis();
    17fa:	00042a83          	lw	s5,0(s0)
    17fe:	bbdd                	j	15f4 <main+0x6fe>
         } else if (release_duration > TICK_CLICK_DUR) {
    1800:	0a000713          	li	a4,160
    1804:	4985                	li	s3,1
    1806:	ded777e3          	bgeu	a4,a3,15f4 <main+0x6fe>
			printf("Single Click\n");
    180a:	6509                	lui	a0,0x2
	remote_command_t button_cmd = {
    180c:	020106a3          	sb	zero,45(sp)
    1810:	02010723          	sb	zero,46(sp)
    1814:	020107a3          	sb	zero,47(sp)
    1818:	02010823          	sb	zero,48(sp)
			printf("Single Click\n");
    181c:	aec50513          	addi	a0,a0,-1300 # 1aec <LLE_IRQHandler+0x1b8>
			printf("Double Click\n");
    1820:	ba4ff0ef          	jal	ra,bc4 <puts>
	dataFrame->data_len = data_len;
    1824:	47a5                	li	a5,9
    1826:	00f486a3          	sb	a5,13(s1)
	memcpy(dataFrame->payload, cmd, data_len);
    182a:	faa00793          	li	a5,-86
    182e:	02f10423          	sb	a5,40(sp)
    1832:	c3218513          	addi	a0,gp,-974 # 2000002e <dataFrame+0xe>
    1836:	4625                	li	a2,9
    1838:	102c                	addi	a1,sp,40
    183a:	033104a3          	sb	s3,41(sp)
    183e:	02010523          	sb	zero,42(sp)
    1842:	020105a3          	sb	zero,43(sp)
    1846:	02010623          	sb	zero,44(sp)
    184a:	b38ff0ef          	jal	ra,b82 <memcpy>
			modiSLER_adv_data(&dataFrame);
    184e:	c0eff0ef          	jal	ra,c5c <modiSLER_adv_data.constprop.0>
   model->debounce_time = millis();
    1852:	401c                	lw	a5,0(s0)
   model->btn_state = newState;
    1854:	498d                	li	s3,3
   model->release_time = millis();
    1856:	00042a83          	lw	s5,0(s0)
    185a:	bb69                	j	15f4 <main+0x6fe>
         break;
      }

      case BTN_DOWN2:
         // Second release
         if (read > 0) {
    185c:	d8070ce3          	beqz	a4,15f4 <main+0x6fe>
			printf("Double Click\n");
    1860:	6509                	lui	a0,0x2
	remote_command_t button_cmd = {
    1862:	020106a3          	sb	zero,45(sp)
    1866:	02010723          	sb	zero,46(sp)
    186a:	020107a3          	sb	zero,47(sp)
    186e:	02010823          	sb	zero,48(sp)
			printf("Double Click\n");
    1872:	afc50513          	addi	a0,a0,-1284 # 1afc <LLE_IRQHandler+0x1c8>
    1876:	b76d                	j	1820 <main+0x92a>

00001878 <SysTick_Handler>:
{
    1878:	1101                	addi	sp,sp,-32
    187a:	c63a                	sw	a4,12(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    187c:	e000f737          	lui	a4,0xe000f
{
    1880:	c242                	sw	a6,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1882:	01072803          	lw	a6,16(a4) # e000f010 <_eusrstack+0xc0007010>
{
    1886:	c43e                	sw	a5,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1888:	67bd                	lui	a5,0xf
{
    188a:	c046                	sw	a7,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    188c:	a6078793          	addi	a5,a5,-1440 # ea60 <iSLER_mess.c.d6599a54+0xb90f>
    1890:	01472883          	lw	a7,20(a4)
    1894:	97c2                	add	a5,a5,a6
{
    1896:	ce2a                	sw	a0,28(sp)
    1898:	c836                	sw	a3,16(sp)
    189a:	cc2e                	sw	a1,24(sp)
    189c:	ca32                	sw	a2,20(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    189e:	0107b533          	sltu	a0,a5,a6
    18a2:	cb1c                	sw	a5,16(a4)
    18a4:	011506b3          	add	a3,a0,a7
    18a8:	cb54                	sw	a3,20(a4)
	SysTick->SR = 0x00000000;
    18aa:	00072223          	sw	zero,4(a4)
	systick_millis++;
    18ae:	cf018793          	addi	a5,gp,-784 # 200000ec <systick_millis>
    18b2:	4398                	lw	a4,0(a5)
}
    18b4:	4572                	lw	a0,28(sp)
    18b6:	45e2                	lw	a1,24(sp)
	systick_millis++;
    18b8:	0705                	addi	a4,a4,1
    18ba:	c398                	sw	a4,0(a5)
}
    18bc:	4652                	lw	a2,20(sp)
    18be:	46c2                	lw	a3,16(sp)
    18c0:	4732                	lw	a4,12(sp)
    18c2:	47a2                	lw	a5,8(sp)
    18c4:	4812                	lw	a6,4(sp)
    18c6:	4882                	lw	a7,0(sp)
    18c8:	6105                	addi	sp,sp,32
    18ca:	30200073          	mret

000018ce <SPI0_IRQHandler>:
{
    18ce:	715d                	addi	sp,sp,-80
    18d0:	de22                	sw	s0,60(sp)
    18d2:	c686                	sw	ra,76(sp)
    18d4:	c496                	sw	t0,72(sp)
    18d6:	c29a                	sw	t1,68(sp)
    18d8:	c09e                	sw	t2,64(sp)
    18da:	dc2a                	sw	a0,56(sp)
    18dc:	da2e                	sw	a1,52(sp)
    18de:	d832                	sw	a2,48(sp)
    18e0:	d636                	sw	a3,44(sp)
    18e2:	d43a                	sw	a4,40(sp)
    18e4:	d23e                	sw	a5,36(sp)
    18e6:	d042                	sw	a6,32(sp)
    18e8:	ce46                	sw	a7,28(sp)
    18ea:	cc72                	sw	t3,24(sp)
    18ec:	ca76                	sw	t4,20(sp)
    18ee:	c87a                	sw	t5,16(sp)
    18f0:	c67e                	sw	t6,12(sp)
	uint8_t intf = R8_SPI0_INT_FLAG;
    18f2:	40004437          	lui	s0,0x40004
    18f6:	00644783          	lbu	a5,6(s0) # 40004006 <_eusrstack+0x1fffc006>
	if( (intf & RB_SPI_IF_DMA_END) )
    18fa:	8ba1                	andi	a5,a5,8
    18fc:	cb81                	beqz	a5,190c <SPI0_IRQHandler+0x3e>
		WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 1 );
    18fe:	4505                	li	a0,1
    1900:	a7dfe0ef          	jal	ra,37c <WS2812FillBuffSec.constprop.0>
		R16_SPI0_TOTAL_CNT = DMA_BUFFER_LEN * 2;
    1904:	06000793          	li	a5,96
    1908:	00f41623          	sh	a5,12(s0)
}
    190c:	5472                	lw	s0,60(sp)
    190e:	40b6                	lw	ra,76(sp)
    1910:	42a6                	lw	t0,72(sp)
    1912:	4316                	lw	t1,68(sp)
    1914:	4386                	lw	t2,64(sp)
    1916:	5562                	lw	a0,56(sp)
    1918:	55d2                	lw	a1,52(sp)
    191a:	5642                	lw	a2,48(sp)
    191c:	56b2                	lw	a3,44(sp)
    191e:	5722                	lw	a4,40(sp)
    1920:	5792                	lw	a5,36(sp)
    1922:	5802                	lw	a6,32(sp)
    1924:	48f2                	lw	a7,28(sp)
    1926:	4e62                	lw	t3,24(sp)
    1928:	4ed2                	lw	t4,20(sp)
    192a:	4f42                	lw	t5,16(sp)
    192c:	4fb2                	lw	t6,12(sp)
    192e:	6161                	addi	sp,sp,80
    1930:	30200073          	mret

00001934 <LLE_IRQHandler>:
void LLE_IRQHandler() {
    1934:	7139                	addi	sp,sp,-64
    1936:	cc3e                	sw	a5,24(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    1938:	4000c7b7          	lui	a5,0x4000c
    193c:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
void LLE_IRQHandler() {
    1940:	d036                	sw	a3,32(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    1942:	4794                	lw	a3,8(a5)
void LLE_IRQHandler() {
    1944:	ce3a                	sw	a4,28(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    1946:	6711                	lui	a4,0x4
void LLE_IRQHandler() {
    1948:	de06                	sw	ra,60(sp)
    194a:	dc16                	sw	t0,56(sp)
    194c:	da1a                	sw	t1,52(sp)
    194e:	d81e                	sw	t2,48(sp)
    1950:	d62a                	sw	a0,44(sp)
    1952:	d42e                	sw	a1,40(sp)
    1954:	d232                	sw	a2,36(sp)
    1956:	ca42                	sw	a6,20(sp)
    1958:	c846                	sw	a7,16(sp)
    195a:	c672                	sw	t3,12(sp)
    195c:	c476                	sw	t4,8(sp)
    195e:	c27a                	sw	t5,4(sp)
    1960:	c07e                	sw	t6,0(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    1962:	8ef9                	and	a3,a3,a4
    1964:	cea9                	beqz	a3,19be <LLE_IRQHandler+0x8a>
    1966:	47d4                	lw	a3,12(a5)
    1968:	8ef9                	and	a3,a3,a4
    196a:	cab1                	beqz	a3,19be <LLE_IRQHandler+0x8a>
		LL->LL26 = 0xffffffff;
    196c:	56fd                	li	a3,-1
    196e:	d7b4                	sw	a3,104(a5)
		LL->STATUS = 0x4000;
    1970:	c798                	sw	a4,8(a5)
	DevSetMode(0);
    1972:	4501                	li	a0,0
    1974:	847fe0ef          	jal	ra,1ba <DevSetMode>
	LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    1978:	4000c7b7          	lui	a5,0x4000c
    197c:	20078693          	addi	a3,a5,512 # 4000c200 <_eusrstack+0x20004200>
    1980:	4ab8                	lw	a4,80(a3)
}
    1982:	50f2                	lw	ra,60(sp)
    1984:	52e2                	lw	t0,56(sp)
	LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    1986:	9b61                	andi	a4,a4,-8
    1988:	cab8                	sw	a4,80(a3)
	LL->LL0 |= 0x08;
    198a:	2007a703          	lw	a4,512(a5)
}
    198e:	5352                	lw	t1,52(sp)
    1990:	53c2                	lw	t2,48(sp)
	LL->LL0 |= 0x08;
    1992:	00876713          	ori	a4,a4,8
    1996:	20e7a023          	sw	a4,512(a5)
	rx_ready = 1;
    199a:	4705                	li	a4,1
    199c:	cee1a623          	sw	a4,-788(gp) # 200000e8 <rx_ready>
}
    19a0:	5532                	lw	a0,44(sp)
    19a2:	55a2                	lw	a1,40(sp)
    19a4:	5612                	lw	a2,36(sp)
    19a6:	5682                	lw	a3,32(sp)
    19a8:	4772                	lw	a4,28(sp)
    19aa:	47e2                	lw	a5,24(sp)
    19ac:	4852                	lw	a6,20(sp)
    19ae:	48c2                	lw	a7,16(sp)
    19b0:	4e32                	lw	t3,12(sp)
    19b2:	4ea2                	lw	t4,8(sp)
    19b4:	4f12                	lw	t5,4(sp)
    19b6:	4f82                	lw	t6,0(sp)
    19b8:	6121                	addi	sp,sp,64
    19ba:	30200073          	mret
		LL->STATUS &= LL->INT_EN;
    19be:	4000c7b7          	lui	a5,0x4000c
    19c2:	20078713          	addi	a4,a5,512 # 4000c200 <_eusrstack+0x20004200>
    19c6:	4750                	lw	a2,12(a4)
    19c8:	4714                	lw	a3,8(a4)
		BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
    19ca:	10078793          	addi	a5,a5,256
		LL->STATUS &= LL->INT_EN;
    19ce:	8ef1                	and	a3,a3,a2
    19d0:	c714                	sw	a3,8(a4)
		BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
    19d2:	57d8                	lw	a4,44(a5)
    19d4:	9b71                	andi	a4,a4,-4
    19d6:	00176713          	ori	a4,a4,1
    19da:	d7d8                	sw	a4,44(a5)
    19dc:	bf59                	j	1972 <LLE_IRQHandler+0x3e>
    19de:	0000                	unimp
    19e0:	6562                	flw	fa0,24(sp)
    19e2:	2d65                	jal	209a <_data_lma+0x446>
    19e4:	3535                	jal	1810 <main+0x91a>
    19e6:	0035                	c.nop	13
	...
    19f4:	0474                	addi	a3,sp,524
    19f6:	0000                	unimp
    19f8:	053a                	slli	a0,a0,0xe
    19fa:	0000                	unimp
    19fc:	05a6                	slli	a1,a1,0x9
    19fe:	0000                	unimp
    1a00:	0696                	slli	a3,a3,0x5
    1a02:	0000                	unimp
    1a04:	0758                	addi	a4,sp,900
    1a06:	0000                	unimp
    1a08:	000a                	c.slli	zero,0x2
    1a0a:	0000                	unimp
    1a0c:	3025                	jal	1234 <main+0x33e>
    1a0e:	5832                	lw	a6,44(sp)
    1a10:	0020                	addi	s0,sp,8
    1a12:	0000                	unimp
    1a14:	7e2e                	flw	ft8,232(sp)
    1a16:	6320                	flw	fs0,64(a4)
    1a18:	3368                	fld	fa0,224(a4)
    1a1a:	6632                	flw	fa2,12(sp)
    1a1c:	6e75                	lui	t3,0x1d
    1a1e:	6920                	flw	fs0,80(a0)
    1a20:	52454c53          	0x52454c53
    1a24:	7e20                	flw	fs0,120(a2)
    1a26:	002e                	c.slli	zero,0xb
    1a28:	646e6553          	0x646e6553
    1a2c:	6e69                	lui	t3,0x1a
    1a2e:	61762067          	0x61762067
    1a32:	756c                	flw	fa1,108(a0)
    1a34:	3a65                	jal	13ec <main+0x4f6>
    1a36:	2520                	fld	fs0,72(a0)
    1a38:	3830                	fld	fa2,112(s0)
    1a3a:	0a58                	addi	a4,sp,276
    1a3c:	0000                	unimp
    1a3e:	0000                	unimp
    1a40:	2d0a                	fld	fs10,128(sp)
    1a42:	2d2d                	jal	207c <_data_lma+0x428>
    1a44:	2d2d                	jal	207e <_data_lma+0x42a>
    1a46:	2d2d                	jal	2080 <_data_lma+0x42c>
    1a48:	2d2d                	jal	2082 <_data_lma+0x42e>
    1a4a:	2d2d                	jal	2084 <_data_lma+0x430>
    1a4c:	2d2d                	jal	2086 <_data_lma+0x432>
    1a4e:	2d2d                	jal	2088 <_data_lma+0x434>
    1a50:	2d2d                	jal	208a <_data_lma+0x436>
    1a52:	2d2d                	jal	208c <_data_lma+0x438>
    1a54:	2d2d                	jal	208e <_data_lma+0x43a>
    1a56:	2d2d                	jal	2090 <_data_lma+0x43c>
    1a58:	2d2d                	jal	2092 <_data_lma+0x43e>
    1a5a:	2d2d                	jal	2094 <_data_lma+0x440>
    1a5c:	2d2d                	jal	2096 <_data_lma+0x442>
    1a5e:	2d2d                	jal	2098 <_data_lma+0x444>
    1a60:	2d2d                	jal	209a <_data_lma+0x446>
    1a62:	2d2d                	jal	209c <_data_lma+0x448>
    1a64:	0000                	unimp
    1a66:	0000                	unimp
    1a68:	5352                	lw	t1,52(sp)
    1a6a:	253a4953          	0x253a4953
    1a6e:	2064                	fld	fs1,192(s0)
    1a70:	656c                	flw	fa1,76(a0)
    1a72:	3a6e                	fld	fs4,248(sp)
    1a74:	6425                	lui	s0,0x9
    1a76:	4d20                	lw	s0,88(a0)
    1a78:	4341                	li	t1,16
    1a7a:	003a                	c.slli	zero,0xe
    1a7c:	736d                	lui	t1,0xffffb
    1a7e:	646f4367          	0x646f4367
    1a82:	3a65                	jal	143a <main+0x544>
    1a84:	2520                	fld	fs0,72(a0)
    1a86:	3430                	fld	fa2,104(s0)
    1a88:	2058                	fld	fa4,128(s0)
    1a8a:	000a                	c.slli	zero,0x2
    1a8c:	756f7267          	0x756f7267
    1a90:	4970                	lw	a2,84(a0)
    1a92:	3a64                	fld	fs1,240(a2)
    1a94:	2520                	fld	fs0,72(a0)
    1a96:	3230                	fld	fa2,96(a2)
    1a98:	2058                	fld	fa4,128(s0)
    1a9a:	000a                	c.slli	zero,0x2
    1a9c:	6d6d6f43          	0x6d6d6f43
    1aa0:	6e61                	lui	t3,0x18
    1aa2:	3a64                	fld	fs1,240(a2)
    1aa4:	2520                	fld	fs0,72(a0)
    1aa6:	3230                	fld	fa2,96(a2)
    1aa8:	2058                	fld	fa4,128(s0)
    1aaa:	6156                	flw	ft2,84(sp)
    1aac:	756c                	flw	fa1,108(a0)
    1aae:	3165                	jal	1756 <main+0x860>
    1ab0:	203a                	fld	ft0,392(sp)
    1ab2:	3025                	jal	12da <main+0x3e4>
    1ab4:	5838                	lw	a4,112(s0)
    1ab6:	5620                	lw	s0,104(a2)
    1ab8:	6c61                	lui	s8,0x18
    1aba:	6575                	lui	a0,0x1d
    1abc:	3a32                	fld	fs4,296(sp)
    1abe:	2520                	fld	fs0,72(a0)
    1ac0:	3830                	fld	fa2,112(s0)
    1ac2:	0a58                	addi	a4,sp,276
    1ac4:	0000                	unimp
    1ac6:	0000                	unimp
    1ac8:	654e                	flw	fa0,208(sp)
    1aca:	6f6c5f6f          	jal	t5,c71c0 <iSLER_mess.c.d6599a54+0xc406f>
    1ace:	6461                	lui	s0,0x18
    1ad0:	6d6d6f43          	0x6d6d6f43
    1ad4:	6e61                	lui	t3,0x18
    1ad6:	3a64                	fld	fs1,240(a2)
    1ad8:	2520                	fld	fs0,72(a0)
    1ada:	3230                	fld	fa2,96(a2)
    1adc:	0a58                	addi	a4,sp,276
    1ade:	0000                	unimp
    1ae0:	6f4c                	flw	fa1,28(a4)
    1ae2:	676e                	flw	fa4,216(sp)
    1ae4:	5020                	lw	s0,96(s0)
    1ae6:	6572                	flw	fa0,28(sp)
    1ae8:	00007373          	csrrci	t1,ustatus,0
    1aec:	676e6953          	0x676e6953
    1af0:	656c                	flw	fa1,76(a0)
    1af2:	4320                	lw	s0,64(a4)
    1af4:	696c                	flw	fa1,84(a0)
    1af6:	00006b63          	bltu	zero,zero,1b0c <SIN_LUT>
    1afa:	0000                	unimp
    1afc:	6f44                	flw	fs1,28(a4)
    1afe:	6275                	lui	tp,0x1d
    1b00:	656c                	flw	fa1,76(a0)
    1b02:	4320                	lw	s0,64(a4)
    1b04:	696c                	flw	fa1,84(a0)
    1b06:	00006b63          	bltu	zero,zero,1b1c <SIN_LUT+0x10>
	...

00001b0c <SIN_LUT>:
    1b0c:	01010100 02020101 05040403 09080706     ................
    1b1c:	0e0d0b0a 14131110 1b1a1816 24211f1d     ..............!$
    1b2c:	2d2a2826 3634312f 413e3c39 4c494744     &(*-/1469<>ADGIL
    1b3c:	5855524f 64615e5b 706d6a67 7d797673     ORUX[^adgjmpsvy}
    1b4c:	89868380 95928f8c a29f9c99 adaba8a5     ................
    1b5c:	b9b6b3b0 c4c1bebc cecbc9c6 d7d5d3d0     ................
    1b6c:	e0dedcda e8e6e4e2 eeedebe9 f4f3f1f0     ................
    1b7c:	f8f7f6f5 fcfbfaf9 fefefdfc fffffffe     ................
    1b8c:	ffffffff fdfefefe fafbfcfc f6f7f8f9     ................
    1b9c:	f1f3f4f5 ebedeef0 e4e6e8e9 dcdee0e2     ................
    1bac:	d3d5d7da c9cbced0 bec1c4c6 b3b6b9bc     ................
    1bbc:	a8abadb0 9c9fa2a5 8f929599 8386898c     ................
    1bcc:	76797d80 6a6d7073 5e616467 5255585b     .}yvspmjgda^[XUR
    1bdc:	47494c4f 3c3e4144 31343639 282a2d2f     OLIGDA><9641/-*(
    1bec:	1f212426 181a1b1d 11131416 0b0d0e10     &$!.............
    1bfc:	0708090a 04040506 01020203 01010101     ................

00001c0c <bitquartets.0>:
    1c0c:	71111111 77111711 71711171 77711771     ...q...wq.qqq.qw
    1c1c:	71171117 77171717 71771177 77771777     ...q...ww.wqw.ww

00001c2c <channel_map>:
    1c2c:	04030201 08070605 0d0c0a09 11100f0e     ................
    1c3c:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    1c4c:	25242322 270b0026                       "#$%&..'
