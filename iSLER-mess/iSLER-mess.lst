
iSLER-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	0f90006f          	j	8f8 <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	0000097c          	.word	0x0000097c
   c:	0000097c          	.word	0x0000097c
  10:	f3f9bda9          	.word	0xf3f9bda9
  14:	0000097c          	.word	0x0000097c
	...
  20:	0000097c          	.word	0x0000097c
  24:	0000097c          	.word	0x0000097c
	...
  30:	00001854          	.word	0x00001854
  34:	00000000          	.word	0x00000000
  38:	0000097c          	.word	0x0000097c
  3c:	00000000          	.word	0x00000000
  40:	0000097c          	.word	0x0000097c
  44:	0000097c          	.word	0x0000097c
  48:	0000097c          	.word	0x0000097c
  4c:	000018aa          	.word	0x000018aa
  50:	0000097c          	.word	0x0000097c
  54:	00001912          	.word	0x00001912
  58:	0000097c          	.word	0x0000097c
  5c:	00000000          	.word	0x00000000
  60:	0000097c          	.word	0x0000097c
  64:	0000097c          	.word	0x0000097c
  68:	0000097c          	.word	0x0000097c
  6c:	0000097c          	.word	0x0000097c
  70:	0000097c          	.word	0x0000097c
  74:	0000097c          	.word	0x0000097c
  78:	0000097c          	.word	0x0000097c
  7c:	0000097c          	.word	0x0000097c
  80:	0000097c          	.word	0x0000097c
  84:	0000097c          	.word	0x0000097c
  88:	0000097c          	.word	0x0000097c
  8c:	0000097c          	.word	0x0000097c

Disassembly of section .text:

00000090 <mini_pad>:
      90:	1101                	addi	sp,sp,-32
      92:	ca26                	sw	s1,20(sp)
      94:	c64e                	sw	s3,12(sp)
      96:	ce06                	sw	ra,28(sp)
      98:	cc22                	sw	s0,24(sp)
      9a:	c84a                	sw	s2,16(sp)
      9c:	84ae                	mv	s1,a1
      9e:	89aa                	mv	s3,a0
      a0:	85b2                	mv	a1,a2
      a2:	c699                	beqz	a3,b0 <mini_pad+0x20>
      a4:	4901                	li	s2,0
      a6:	0096d763          	bge	a3,s1,b4 <mini_pad+0x24>
      aa:	84b6                	mv	s1,a3
      ac:	4905                	li	s2,1
      ae:	a019                	j	b4 <mini_pad+0x24>
      b0:	4901                	li	s2,0
      b2:	86a6                	mv	a3,s1
      b4:	40968433          	sub	s0,a3,s1
      b8:	00045363          	bgez	s0,be <mini_pad+0x2e>
      bc:	4401                	li	s0,0
      be:	8622                	mv	a2,s0
      c0:	853a                	mv	a0,a4
      c2:	2bf000ef          	jal	b80 <memset>
      c6:	872a                	mv	a4,a0
      c8:	00850633          	add	a2,a0,s0
      cc:	4781                	li	a5,0
      ce:	40f486b3          	sub	a3,s1,a5
      d2:	04d04363          	bgtz	a3,118 <mini_pad+0x88>
      d6:	0004d363          	bgez	s1,dc <mini_pad+0x4c>
      da:	4481                	li	s1,0
      dc:	9626                	add	a2,a2,s1
      de:	40e60533          	sub	a0,a2,a4
      e2:	02090463          	beqz	s2,10a <mini_pad+0x7a>
      e6:	02c77263          	bgeu	a4,a2,10a <mini_pad+0x7a>
      ea:	02a00793          	li	a5,42
      ee:	fef60fa3          	sb	a5,-1(a2)
      f2:	fff60693          	addi	a3,a2,-1
      f6:	00d77a63          	bgeu	a4,a3,10a <mini_pad+0x7a>
      fa:	fef60f23          	sb	a5,-2(a2)
      fe:	ffe60693          	addi	a3,a2,-2
     102:	00d77463          	bgeu	a4,a3,10a <mini_pad+0x7a>
     106:	fef60ea3          	sb	a5,-3(a2)
     10a:	40f2                	lw	ra,28(sp)
     10c:	4462                	lw	s0,24(sp)
     10e:	44d2                	lw	s1,20(sp)
     110:	4942                	lw	s2,16(sp)
     112:	49b2                	lw	s3,12(sp)
     114:	6105                	addi	sp,sp,32
     116:	8082                	ret
     118:	00f986b3          	add	a3,s3,a5
     11c:	0006c583          	lbu	a1,0(a3)
     120:	00f606b3          	add	a3,a2,a5
     124:	0785                	addi	a5,a5,1
     126:	00b68023          	sb	a1,0(a3)
     12a:	b755                	j	ce <mini_pad+0x3e>

0000012c <mini_itoa.part.0>:
     12c:	4881                	li	a7,0
     12e:	00055663          	bgez	a0,13a <mini_itoa.part.0+0xe>
     132:	e681                	bnez	a3,13a <mini_itoa.part.0+0xe>
     134:	40a00533          	neg	a0,a0
     138:	4885                	li	a7,1
     13a:	8a05                	andi	a2,a2,1
     13c:	06100793          	li	a5,97
     140:	c219                	beqz	a2,146 <mini_itoa.part.0+0x1a>
     142:	04100793          	li	a5,65
     146:	883a                	mv	a6,a4
     148:	4e25                	li	t3,9
     14a:	ff678613          	addi	a2,a5,-10
     14e:	02b577b3          	remu	a5,a0,a1
     152:	832a                	mv	t1,a0
     154:	0ff7f693          	zext.b	a3,a5
     158:	04fe6463          	bltu	t3,a5,1a0 <mini_itoa.part.0+0x74>
     15c:	03068693          	addi	a3,a3,48
     160:	0ff6f693          	zext.b	a3,a3
     164:	00d80023          	sb	a3,0(a6)
     168:	00180793          	addi	a5,a6,1
     16c:	02b55533          	divu	a0,a0,a1
     170:	02b37663          	bgeu	t1,a1,19c <mini_itoa.part.0+0x70>
     174:	00088863          	beqz	a7,184 <mini_itoa.part.0+0x58>
     178:	02d00693          	li	a3,45
     17c:	00d78023          	sb	a3,0(a5)
     180:	00280793          	addi	a5,a6,2
     184:	40e78533          	sub	a0,a5,a4
     188:	4609                	li	a2,2
     18a:	00078023          	sb	zero,0(a5)
     18e:	4681                	li	a3,0
     190:	02c54633          	div	a2,a0,a2
     194:	17fd                	addi	a5,a5,-1
     196:	00c6c763          	blt	a3,a2,1a4 <mini_itoa.part.0+0x78>
     19a:	8082                	ret
     19c:	883e                	mv	a6,a5
     19e:	bf45                	j	14e <mini_itoa.part.0+0x22>
     1a0:	96b2                	add	a3,a3,a2
     1a2:	bf7d                	j	160 <mini_itoa.part.0+0x34>
     1a4:	00d705b3          	add	a1,a4,a3
     1a8:	0007c883          	lbu	a7,0(a5)
     1ac:	0005c803          	lbu	a6,0(a1)
     1b0:	0685                	addi	a3,a3,1
     1b2:	01158023          	sb	a7,0(a1)
     1b6:	01078023          	sb	a6,0(a5)
     1ba:	bfe9                	j	194 <mini_itoa.part.0+0x68>

000001bc <DevSetMode>:
	NVIC->VTFIDR[3] = 0x14;
}

void DevSetMode(uint16_t mode) {
#if !defined(CH571_CH573)
	if(mode) {
     1bc:	4000c7b7          	lui	a5,0x4000c
     1c0:	10078793          	addi	a5,a5,256 # 4000c100 <_eusrstack+0x20004100>
		BB->CTRL_CFG = DEVSETMODE_ON;
     1c4:	4398                	lw	a4,0(a5)
     1c6:	e7f77713          	andi	a4,a4,-385
	if(mode) {
     1ca:	c10d                	beqz	a0,1ec <DevSetMode+0x30>
		BB->CTRL_CFG = DEVSETMODE_ON;
     1cc:	10076713          	ori	a4,a4,256
     1d0:	c398                	sw	a4,0(a5)
		RF->RF2 |= 0x330000;
     1d2:	4000d737          	lui	a4,0x4000d
     1d6:	471c                	lw	a5,8(a4)
     1d8:	003306b7          	lui	a3,0x330
     1dc:	8fd5                	or	a5,a5,a3
     1de:	c71c                	sw	a5,8(a4)
	mode = (mode == 0) ? 0x80 : mode;
#elif !defined(CH32V208)
	mode |= 0x30000;
#endif
#endif // ! CH571_CH573
	LL->CTRL_MOD = mode;
     1e0:	4000c7b7          	lui	a5,0x4000c
     1e4:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
     1e8:	cba8                	sw	a0,80(a5)
}
     1ea:	8082                	ret
		BB->CTRL_CFG = DEVSETMODE_OFF;
     1ec:	08076713          	ori	a4,a4,128
     1f0:	c398                	sw	a4,0(a5)
		RF->RF2 &= 0xffcdffff;
     1f2:	4000d6b7          	lui	a3,0x4000d
     1f6:	469c                	lw	a5,8(a3)
     1f8:	ffce0737          	lui	a4,0xffce0
     1fc:	177d                	addi	a4,a4,-1 # ffcdffff <_eusrstack+0xdfcd7fff>
     1fe:	8ff9                	and	a5,a5,a4
     200:	c69c                	sw	a5,8(a3)
	mode = (mode == 0) ? 0x80 : mode;
     202:	08000513          	li	a0,128
     206:	bfe9                	j	1e0 <DevSetMode+0x24>

00000208 <RFEND_TXCTune>:

uint32_t RFEND_TXCTune(uint8_t channel) {
	// 0xbf = 2401 MHz
	RF->RF1 &= 0xfffffffe;
     208:	4000d737          	lui	a4,0x4000d
     20c:	435c                	lw	a5,4(a4)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
     20e:	6631                	lui	a2,0xc
     210:	f0060613          	addi	a2,a2,-256 # bf00 <iSLER_mess.c.a723f200+0x8e66>
	RF->RF1 &= 0xfffffffe;
     214:	9bf9                	andi	a5,a5,-2
     216:	c35c                	sw	a5,4(a4)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
     218:	6789                	lui	a5,0x2
     21a:	ba078793          	addi	a5,a5,-1120 # 1ba0 <channel_map>
     21e:	97aa                	add	a5,a5,a0
     220:	0007c783          	lbu	a5,0(a5)
     224:	5f14                	lw	a3,56(a4)
     226:	07a2                	slli	a5,a5,0x8
     228:	97b2                	add	a5,a5,a2
     22a:	7601                	lui	a2,0xfffe0
     22c:	0ff60613          	addi	a2,a2,255 # fffe00ff <_eusrstack+0xdffd80ff>
     230:	8ef1                	and	a3,a3,a2
     232:	8fd5                	or	a5,a5,a3
     234:	df1c                	sw	a5,56(a4)
	RF->RF1 |= 1;
     236:	435c                	lw	a5,4(a4)
     238:	0017e793          	ori	a5,a5,1
     23c:	c35c                	sw	a5,4(a4)

	LL->TMR = 8000;
     23e:	4000c7b7          	lui	a5,0x4000c
     242:	6709                	lui	a4,0x2
     244:	f4070713          	addi	a4,a4,-192 # 1f40 <_data_lma+0x378>
     248:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
     24c:	d3f8                	sw	a4,100(a5)
	while(!(RF->TXCTUNE_CO_CTRL & (1 << 25)) || !(RF->TXCTUNE_CO_CTRL & (1 << 26))) {
     24e:	4000d737          	lui	a4,0x4000d
     252:	09072683          	lw	a3,144(a4) # 4000d090 <_eusrstack+0x20005090>
     256:	00669613          	slli	a2,a3,0x6
     25a:	00065863          	bgez	a2,26a <RFEND_TXCTune+0x62>
     25e:	09072683          	lw	a3,144(a4)
     262:	00569613          	slli	a2,a3,0x5
     266:	00064463          	bltz	a2,26e <RFEND_TXCTune+0x66>
		if(LL->TMR == 0) {
     26a:	53f4                	lw	a3,100(a5)
     26c:	f2fd                	bnez	a3,252 <RFEND_TXCTune+0x4a>
			break;
		}
	}

	uint8_t nCO = (uint8_t)RF->TXCTUNE_CO_CTRL & 0x3f;
     26e:	4000d7b7          	lui	a5,0x4000d
     272:	0907a503          	lw	a0,144(a5) # 4000d090 <_eusrstack+0x20005090>
	uint8_t nGA = (uint8_t)(RF->TXCTUNE_GA_CTRL >> 10) & 0x7f;
     276:	0947a783          	lw	a5,148(a5)

	// printf("nCO,nGA ch:%u idx:%u %u,%u\n", channel, channel_map[channel], nCO,nGA);

	return (nGA << 24) | nCO;
     27a:	03f57513          	andi	a0,a0,63
	uint8_t nGA = (uint8_t)(RF->TXCTUNE_GA_CTRL >> 10) & 0x7f;
     27e:	83a9                	srli	a5,a5,0xa
	return (nGA << 24) | nCO;
     280:	07f7f793          	andi	a5,a5,127
     284:	07e2                	slli	a5,a5,0x18
}
     286:	8d5d                	or	a0,a0,a5
     288:	8082                	ret

0000028a <Neo_render_colorFlashing.constprop.0>:
	systick_millis++;
}


int8_t systick_handleTimeout(uint32_t *ref_time, uint32_t duration) {
	uint32_t now = millis();
     28a:	ce81a603          	lw	a2,-792(gp) # 200000e4 <systick_millis>

    return led_arr[ledIdx].packed;
}

uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
    if (systick_handleTimeout(&fr->ref_time, fr->frame_duration)) {
     28e:	c1018693          	addi	a3,gp,-1008 # 2000000c <leds_frame>
	if (now - *ref_time > duration) {
     292:	4a98                	lw	a4,16(a3)
     294:	42cc                	lw	a1,4(a3)
     296:	40e60733          	sub	a4,a2,a4
     29a:	12c18f13          	addi	t5,gp,300 # 20000528 <led_arr>
     29e:	0ce5fb63          	bgeu	a1,a4,374 <Neo_render_colorFlashing.constprop.0+0xea>
     2a2:	c1018793          	addi	a5,gp,-1008 # 2000000c <leds_frame>
        fr->frame_value += 1;
     2a6:	0097c703          	lbu	a4,9(a5)
		*ref_time = now;
     2aa:	cb90                	sw	a2,16(a5)
void animation_step(animation_color_t* ani) {
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
}

RGB_t animation_currentColor(animation_color_t* ani) {
    return ani->colors[ani->ref_index];
     2ac:	cb418613          	addi	a2,gp,-844 # 200000b0 <color_ani>
     2b0:	00564e83          	lbu	t4,5(a2)
     2b4:	4210                	lw	a2,0(a2)
     2b6:	0705                	addi	a4,a4,1
     2b8:	0ff77713          	zext.b	a4,a4
     2bc:	002e9813          	slli	a6,t4,0x2
     2c0:	9642                	add	a2,a2,a6
     2c2:	00e784a3          	sb	a4,9(a5)
     2c6:	4210                	lw	a2,0(a2)
uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
     2c8:	1141                	addi	sp,sp,-16
        RGB_t color = animation_currentColor(ani);

        for (int i=0; i < NR_LEDS; i++) {
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     2ca:	06400f93          	li	t6,100
     2ce:	00865313          	srli	t1,a2,0x8
     2d2:	01065893          	srli	a7,a2,0x10
     2d6:	0ff67e13          	zext.b	t3,a2
     2da:	c032                	sw	a2,0(sp)
     2dc:	0ff00613          	li	a2,255
     2e0:	02c70633          	mul	a2,a4,a2
     2e4:	6809                	lui	a6,0x2
     2e6:	a8080813          	addi	a6,a6,-1408 # 1a80 <SIN_LUT>
     2ea:	0ff37313          	zext.b	t1,t1
     2ee:	0ff8f893          	zext.b	a7,a7
     2f2:	12c18693          	addi	a3,gp,300 # 20000528 <led_arr>
     2f6:	018f0293          	addi	t0,t5,24
     2fa:	cb418593          	addi	a1,gp,-844 # 200000b0 <color_ani>
     2fe:	03f64633          	div	a2,a2,t6
     302:	0ff67613          	zext.b	a2,a2
     306:	9642                	add	a2,a2,a6
     308:	00064603          	lbu	a2,0(a2)
     30c:	02ce0fb3          	mul	t6,t3,a2
     310:	02c30833          	mul	a6,t1,a2
     314:	008fdf93          	srli	t6,t6,0x8
     318:	02c88633          	mul	a2,a7,a2
     31c:	00885813          	srli	a6,a6,0x8
     320:	8221                	srli	a2,a2,0x8
     322:	01c10023          	sb	t3,0(sp)
     326:	006100a3          	sb	t1,1(sp)
     32a:	01110123          	sb	a7,2(sp)
     32e:	4382                	lw	t2,0(sp)
     330:	c21e                	sw	t2,4(sp)
     332:	01f10223          	sb	t6,4(sp)
     336:	010102a3          	sb	a6,5(sp)
     33a:	00c10323          	sb	a2,6(sp)
     33e:	4392                	lw	t2,4(sp)
     340:	0076a023          	sw	t2,0(a3) # 4000d000 <_eusrstack+0x20005000>
        for (int i=0; i < NR_LEDS; i++) {
     344:	0691                	addi	a3,a3,4
     346:	fcd29ee3          	bne	t0,a3,322 <Neo_render_colorFlashing.constprop.0+0x98>
        }

        if (fr->frame_value >= 100) {
     34a:	06300693          	li	a3,99
     34e:	00e6fc63          	bgeu	a3,a4,366 <Neo_render_colorFlashing.constprop.0+0xdc>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     352:	0045c703          	lbu	a4,4(a1)
            fr->frame_value = 0;
     356:	000784a3          	sb	zero,9(a5)
     35a:	001e8793          	addi	a5,t4,1
     35e:	02e7e7b3          	rem	a5,a5,a4
     362:	00f582a3          	sb	a5,5(a1)

            animation_step(ani);
        }
    }

    return led_arr[ledIdx].packed;
     366:	00251793          	slli	a5,a0,0x2
     36a:	00ff0533          	add	a0,t5,a5
}
     36e:	4108                	lw	a0,0(a0)
     370:	0141                	addi	sp,sp,16
     372:	8082                	ret
    return led_arr[ledIdx].packed;
     374:	00251793          	slli	a5,a0,0x2
     378:	00ff0533          	add	a0,t5,a5
}
     37c:	4108                	lw	a0,0(a0)
     37e:	8082                	ret

00000380 <WS2812FillBuffSec.constprop.0>:
#define bMOSI PA14
#endif
#endif
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     380:	7159                	addi	sp,sp,-112
     382:	c8da                	sw	s6,80(sp)
     384:	c6de                	sw	s7,76(sp)
     386:	de6e                	sw	s11,60(sp)
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };
#endif

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
     388:	cd41ab83          	lw	s7,-812(gp) # 200000d0 <WS2812LEDs>
	int place = WS2812LEDPlace;
     38c:	cd01ad83          	lw	s11,-816(gp) # 200000cc <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     390:	d2a6                	sw	s1,100(sp)
     392:	d686                	sw	ra,108(sp)
     394:	d4a2                	sw	s0,104(sp)
     396:	d0ca                	sw	s2,96(sp)
     398:	cece                	sw	s3,92(sp)
     39a:	ccd2                	sw	s4,88(sp)
     39c:	cad6                	sw	s5,84(sp)
     39e:	c4e2                	sw	s8,72(sp)
     3a0:	c2e6                	sw	s9,68(sp)
     3a2:	c0ea                	sw	s10,64(sp)
     3a4:	c62a                	sw	a0,12(sp)
     3a6:	008d8793          	addi	a5,s11,8
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
     3aa:	15018493          	addi	s1,gp,336 # 2000054c <WS2812dmabuff>
     3ae:	000dd463          	bgez	s11,3b6 <WS2812FillBuffSec.constprop.0+0x36>
     3b2:	02fd9463          	bne	s11,a5,3da <WS2812FillBuffSec.constprop.0+0x5a>
     3b6:	12c18793          	addi	a5,gp,300 # 20000528 <led_arr>
     3ba:	002d9913          	slli	s2,s11,0x2
}

uint32_t WS2812BLEDCallback(int ledIdx){
    leds_frame.frame_duration = 70;

    switch (Neo_LedCmd) {
     3be:	6a89                	lui	s5,0x2
		ptr[2] = bitquartets[(ledval24bit>>20)&0xf];
		ptr[3] = bitquartets[(ledval24bit>>16)&0xf];
		ptr[4] = bitquartets[(ledval24bit>>4)&0xf];
		ptr[5] = bitquartets[(ledval24bit>>0)&0xf];
#elif defined( WSGRB )
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     3c0:	6d09                	lui	s10,0x2
     3c2:	993e                	add	s2,s2,a5
     3c4:	12c18993          	addi	s3,gp,300 # 20000528 <led_arr>
	while( ptr != end )
     3c8:	1b018a13          	addi	s4,gp,432 # 200005ac <_ebss>
    leds_frame.frame_duration = 70;
     3cc:	c1018413          	addi	s0,gp,-1008 # 2000000c <leds_frame>
    switch (Neo_LedCmd) {
     3d0:	9d0a8a93          	addi	s5,s5,-1584 # 19d0 <LLE_IRQHandler+0xbe>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     3d4:	b80d0d13          	addi	s10,s10,-1152 # 1b80 <bitquartets.0>
     3d8:	a209                	j	4da <WS2812FillBuffSec.constprop.0+0x15a>
		(*ptr++) = 0;
     3da:	00049023          	sh	zero,0(s1)
		(*ptr++) = 0;
     3de:	00049123          	sh	zero,2(s1)
		(*ptr++) = 0;
     3e2:	00049223          	sh	zero,4(s1)
		(*ptr++) = 0;
     3e6:	00049323          	sh	zero,6(s1)
		(*ptr++) = 0;
     3ea:	00049423          	sh	zero,8(s1)
		place++;
     3ee:	0d85                	addi	s11,s11,1
		(*ptr++) = 0;
     3f0:	04b1                	addi	s1,s1,12
     3f2:	fe049f23          	sh	zero,-2(s1)
     3f6:	bf65                	j	3ae <WS2812FillBuffSec.constprop.0+0x2e>
    leds_frame.frame_duration = 70;
     3f8:	04600793          	li	a5,70
     3fc:	c05c                	sw	a5,4(s0)
    switch (Neo_LedCmd) {
     3fe:	cbc1c783          	lbu	a5,-836(gp) # 200000b8 <Neo_LedCmd>
     402:	4711                	li	a4,4
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     404:	001d8c93          	addi	s9,s11,1
     408:	17fd                	addi	a5,a5,-1
     40a:	0ff7f793          	zext.b	a5,a5
     40e:	34f76c63          	bltu	a4,a5,766 <WS2812FillBuffSec.constprop.0+0x3e6>
     412:	078a                	slli	a5,a5,0x2
     414:	97d6                	add	a5,a5,s5
     416:	439c                	lw	a5,0(a5)
     418:	8782                	jr	a5
	uint32_t now = millis();
     41a:	ce81a703          	lw	a4,-792(gp) # 200000e4 <systick_millis>
	if (now - *ref_time > duration) {
     41e:	481c                	lw	a5,16(s0)
     420:	04600693          	li	a3,70
     424:	40f707b3          	sub	a5,a4,a5
     428:	04f6f563          	bgeu	a3,a5,472 <WS2812FillBuffSec.constprop.0+0xf2>
}

RGB_t animation_colorAt(animation_color_t* ani, uint8_t steps, uint8_t index) {
    return ani->colors[(index/steps) % ani->num_colors];
     42c:	cb418793          	addi	a5,gp,-844 # 200000b0 <color_ani>
		*ref_time = now;
     430:	c818                	sw	a4,16(s0)
     432:	4388                	lw	a0,0(a5)
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     434:	00e44703          	lbu	a4,14(s0)
     438:	0047c803          	lbu	a6,4(a5)
     43c:	864e                	mv	a2,s3
        for (int i=0; i < NR_LEDS; i++) {
     43e:	4681                	li	a3,0
     440:	4895                	li	a7,5
     442:	4599                	li	a1,6
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     444:	00d707b3          	add	a5,a4,a3
     448:	0ff7f793          	zext.b	a5,a5
     44c:	0317d7b3          	divu	a5,a5,a7
        for (int i=0; i < NR_LEDS; i++) {
     450:	0685                	addi	a3,a3,1
     452:	0307f7b3          	remu	a5,a5,a6
     456:	078a                	slli	a5,a5,0x2
     458:	97aa                	add	a5,a5,a0
     45a:	439c                	lw	a5,0(a5)
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     45c:	c21c                	sw	a5,0(a2)
     45e:	ca3e                	sw	a5,20(sp)
     460:	d23e                	sw	a5,36(sp)
        for (int i=0; i < NR_LEDS; i++) {
     462:	0611                	addi	a2,a2,4
     464:	feb690e3          	bne	a3,a1,444 <WS2812FillBuffSec.constprop.0+0xc4>
        fr->ref_index += fr->frame_step;
     468:	00844783          	lbu	a5,8(s0)
     46c:	973e                	add	a4,a4,a5
     46e:	00e40723          	sb	a4,14(s0)
    return led_arr[ledIdx].packed;
     472:	00092503          	lw	a0,0(s2)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     476:	00b55793          	srli	a5,a0,0xb
     47a:	8bf9                	andi	a5,a5,30
     47c:	97ea                	add	a5,a5,s10
     47e:	0007d783          	lhu	a5,0(a5)
		ptr[2] = bitquartets[(ledval24bit>>12)&0xf];
		ptr[3] = bitquartets[(ledval24bit>>8)&0xf];
		ptr[4] = bitquartets[(ledval24bit>>4)&0xf];
		ptr[5] = bitquartets[(ledval24bit>>0)&0xf];
#endif
		ptr += 6;
     482:	04b1                	addi	s1,s1,12
     484:	0911                	addi	s2,s2,4
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     486:	fef49a23          	sh	a5,-12(s1)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     48a:	00755793          	srli	a5,a0,0x7
     48e:	8bf9                	andi	a5,a5,30
     490:	97ea                	add	a5,a5,s10
     492:	0007d783          	lhu	a5,0(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     496:	8de6                	mv	s11,s9
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     498:	fef49b23          	sh	a5,-10(s1)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
     49c:	00355793          	srli	a5,a0,0x3
     4a0:	8bf9                	andi	a5,a5,30
     4a2:	97ea                	add	a5,a5,s10
     4a4:	0007d783          	lhu	a5,0(a5)
     4a8:	fef49c23          	sh	a5,-8(s1)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
     4ac:	00f57793          	andi	a5,a0,15
     4b0:	0786                	slli	a5,a5,0x1
     4b2:	97ea                	add	a5,a5,s10
     4b4:	0007d783          	lhu	a5,0(a5)
     4b8:	fef49d23          	sh	a5,-6(s1)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     4bc:	01355793          	srli	a5,a0,0x13
     4c0:	8bf9                	andi	a5,a5,30
     4c2:	97ea                	add	a5,a5,s10
     4c4:	0007d783          	lhu	a5,0(a5)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     4c8:	813d                	srli	a0,a0,0xf
     4ca:	8979                	andi	a0,a0,30
     4cc:	956a                	add	a0,a0,s10
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     4ce:	fef49e23          	sh	a5,-4(s1)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     4d2:	00055783          	lhu	a5,0(a0)
     4d6:	fef49f23          	sh	a5,-2(s1)
	while( ptr != end )
     4da:	03448863          	beq	s1,s4,50a <WS2812FillBuffSec.constprop.0+0x18a>
		if( place >= ledcount )
     4de:	f17dcde3          	blt	s11,s7,3f8 <WS2812FillBuffSec.constprop.0+0x78>
				(*ptr++) = 0;//0xffff;
     4e2:	409a0633          	sub	a2,s4,s1
     4e6:	4581                	li	a1,0
     4e8:	8526                	mv	a0,s1
     4ea:	2d59                	jal	b80 <memset>
			if( tce )
     4ec:	47b2                	lw	a5,12(sp)
     4ee:	cf91                	beqz	a5,50a <WS2812FillBuffSec.constprop.0+0x18a>
				if( place == ledcount )
     4f0:	01bb9c63          	bne	s7,s11,508 <WS2812FillBuffSec.constprop.0+0x188>
					R8_SPI0_INTER_EN &= ~RB_SPI_IE_DMA_END;  // Disable DMA end interrupt
     4f4:	400047b7          	lui	a5,0x40004
     4f8:	0027c703          	lbu	a4,2(a5) # 40004002 <_eusrstack+0x1fffc002>
     4fc:	0f777713          	andi	a4,a4,247
     500:	00e78123          	sb	a4,2(a5)
					WS2812BLEDInUse = 0;
     504:	cc01ac23          	sw	zero,-808(gp) # 200000d4 <WS2812BLEDInUse>
				place++;
     508:	0d85                	addi	s11,s11,1
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
}
     50a:	50b6                	lw	ra,108(sp)
     50c:	5426                	lw	s0,104(sp)
	WS2812LEDPlace = place;
     50e:	cdb1a823          	sw	s11,-816(gp) # 200000cc <WS2812LEDPlace>
}
     512:	5496                	lw	s1,100(sp)
     514:	5906                	lw	s2,96(sp)
     516:	49f6                	lw	s3,92(sp)
     518:	4a66                	lw	s4,88(sp)
     51a:	4ad6                	lw	s5,84(sp)
     51c:	4b46                	lw	s6,80(sp)
     51e:	4bb6                	lw	s7,76(sp)
     520:	4c26                	lw	s8,72(sp)
     522:	4c96                	lw	s9,68(sp)
     524:	4d06                	lw	s10,64(sp)
     526:	5df2                	lw	s11,60(sp)
     528:	6165                	addi	sp,sp,112
     52a:	8082                	ret
	uint32_t now = millis();
     52c:	ce81a703          	lw	a4,-792(gp) # 200000e4 <systick_millis>
	if (now - *ref_time > duration) {
     530:	481c                	lw	a5,16(s0)
     532:	04600693          	li	a3,70
     536:	40f707b3          	sub	a5,a4,a5
     53a:	f2f6fce3          	bgeu	a3,a5,472 <WS2812FillBuffSec.constprop.0+0xf2>
        led_arr[fr->prev_index] = COLOR_BLACK;       // Turn off previous LED
     53e:	00d44783          	lbu	a5,13(s0)
		*ref_time = now;
     542:	c818                	sw	a4,16(s0)
    return ani->colors[ani->ref_index];
     544:	cb418713          	addi	a4,gp,-844 # 200000b0 <color_ani>
     548:	00574683          	lbu	a3,5(a4)
     54c:	4310                	lw	a2,0(a4)
     54e:	078a                	slli	a5,a5,0x2
     550:	97ce                	add	a5,a5,s3
     552:	0007a023          	sw	zero,0(a5)
     556:	00269593          	slli	a1,a3,0x2
        led_arr[fr->ref_index] = animation_currentColor(ani);
     55a:	00e44783          	lbu	a5,14(s0)
     55e:	962e                	add	a2,a2,a1
     560:	420c                	lw	a1,0(a2)
     562:	00279613          	slli	a2,a5,0x2
     566:	964e                	add	a2,a2,s3
     568:	c20c                	sw	a1,0(a2)
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     56a:	00844603          	lbu	a2,8(s0)
        fr->prev_index = fr->ref_index;
     56e:	00f406a3          	sb	a5,13(s0)
     572:	cc2e                	sw	a1,24(sp)
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     574:	97b2                	add	a5,a5,a2
     576:	0ff7f793          	zext.b	a5,a5
        fr->ref_index = next_idx % NR_LEDS;
     57a:	4619                	li	a2,6
     57c:	02c7f633          	remu	a2,a5,a2
     580:	d22e                	sw	a1,36(sp)
     582:	00c40723          	sb	a2,14(s0)
        if (next_idx >= NR_LEDS) animation_step(ani);
     586:	4615                	li	a2,5
     588:	eef675e3          	bgeu	a2,a5,472 <WS2812FillBuffSec.constprop.0+0xf2>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     58c:	00474783          	lbu	a5,4(a4)
     590:	0685                	addi	a3,a3,1
     592:	02f6e6b3          	rem	a3,a3,a5
     596:	00d702a3          	sb	a3,5(a4)
}
     59a:	bde1                	j	472 <WS2812FillBuffSec.constprop.0+0xf2>
	uint32_t now = millis();
     59c:	ce81a703          	lw	a4,-792(gp) # 200000e4 <systick_millis>
	if (now - *ref_time > duration) {
     5a0:	481c                	lw	a5,16(s0)
     5a2:	04600693          	li	a3,70
     5a6:	40f707b3          	sub	a5,a4,a5
     5aa:	ecf6f4e3          	bgeu	a3,a5,472 <WS2812FillBuffSec.constprop.0+0xf2>
    return ani->colors[ani->ref_index];
     5ae:	cb418793          	addi	a5,gp,-844 # 200000b0 <color_ani>
     5b2:	0057c803          	lbu	a6,5(a5)
     5b6:	0007ae83          	lw	t4,0(a5)
            uint8_t diff = fr->ref_index - i;
     5ba:	00e44603          	lbu	a2,14(s0)
		*ref_time = now;
     5be:	c818                	sw	a4,16(s0)
     5c0:	00281713          	slli	a4,a6,0x2
     5c4:	9eba                	add	t4,t4,a4
     5c6:	8e4e                	mv	t3,s3
        for (int i = 0; i < NR_LEDS; i++) {
     5c8:	4681                	li	a3,0
     5ca:	cb418313          	addi	t1,gp,-844 # 200000b0 <color_ani>
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     5ce:	03100f13          	li	t5,49
     5d2:	f9c00f93          	li	t6,-100
        for (int i = 0; i < NR_LEDS; i++) {
     5d6:	4399                	li	t2,6
     5d8:	000ea703          	lw	a4,0(t4)
            uint8_t diff = fr->ref_index - i;
     5dc:	40d607b3          	sub	a5,a2,a3
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     5e0:	0ff7f793          	zext.b	a5,a5
     5e4:	00875513          	srli	a0,a4,0x8
     5e8:	01075593          	srli	a1,a4,0x10
     5ec:	ce3a                	sw	a4,28(sp)
     5ee:	0ff77713          	zext.b	a4,a4
     5f2:	02f708b3          	mul	a7,a4,a5
     5f6:	0ff57513          	zext.b	a0,a0
     5fa:	0ff5f593          	zext.b	a1,a1
     5fe:	4281                	li	t0,0
     600:	03e888b3          	mul	a7,a7,t5
     604:	03f8c8b3          	div	a7,a7,t6
     608:	01170db3          	add	s11,a4,a7
     60c:	000dc463          	bltz	s11,614 <WS2812FillBuffSec.constprop.0+0x294>
     610:	0ffdf293          	zext.b	t0,s11
     614:	02a788b3          	mul	a7,a5,a0
     618:	4701                	li	a4,0
     61a:	03e888b3          	mul	a7,a7,t5
     61e:	03f8c8b3          	div	a7,a7,t6
     622:	01150db3          	add	s11,a0,a7
     626:	000dc463          	bltz	s11,62e <WS2812FillBuffSec.constprop.0+0x2ae>
     62a:	0ffdf713          	zext.b	a4,s11
     62e:	02b787b3          	mul	a5,a5,a1
     632:	4501                	li	a0,0
     634:	03e787b3          	mul	a5,a5,t5
     638:	03f7c7b3          	div	a5,a5,t6
     63c:	00f588b3          	add	a7,a1,a5
     640:	0008c463          	bltz	a7,648 <WS2812FillBuffSec.constprop.0+0x2c8>
     644:	0ff8f513          	zext.b	a0,a7
     648:	00269793          	slli	a5,a3,0x2
     64c:	97ce                	add	a5,a5,s3
     64e:	0007a023          	sw	zero,0(a5)
     652:	005e0023          	sb	t0,0(t3)
     656:	00ee00a3          	sb	a4,1(t3)
     65a:	00ae0123          	sb	a0,2(t3)
        for (int i = 0; i < NR_LEDS; i++) {
     65e:	0685                	addi	a3,a3,1
     660:	0e11                	addi	t3,t3,4
     662:	f6769be3          	bne	a3,t2,5d8 <WS2812FillBuffSec.constprop.0+0x258>
        uint8_t next_increment = fr->ref_index + fr->frame_step;
     666:	00844783          	lbu	a5,8(s0)
     66a:	963e                	add	a2,a2,a5
     66c:	0ff67613          	zext.b	a2,a2
        fr->ref_index = next_increment % NR_LEDS;
     670:	02d676b3          	remu	a3,a2,a3
        if (next_increment >= NR_LEDS) {
     674:	4795                	li	a5,5
        fr->ref_index = next_increment % NR_LEDS;
     676:	00d40723          	sb	a3,14(s0)
        if (next_increment >= NR_LEDS) {
     67a:	dec7fce3          	bgeu	a5,a2,472 <WS2812FillBuffSec.constprop.0+0xf2>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     67e:	00434783          	lbu	a5,4(t1)
     682:	0805                	addi	a6,a6,1
     684:	02f86833          	rem	a6,a6,a5
     688:	010302a3          	sb	a6,5(t1)
}
     68c:	b3dd                	j	472 <WS2812FillBuffSec.constprop.0+0xf2>
	uint32_t now = millis();
     68e:	ce81a703          	lw	a4,-792(gp) # 200000e4 <systick_millis>
	if (now - *ref_time > duration) {
     692:	481c                	lw	a5,16(s0)
            break;
        case NEO_COLOR_FADE:
            return Neo_render_colorFade(&leds_frame, &color_ani, ledIdx);
            break;
        case NEO_SOLO_COLOR_FADE:
            leds_frame.frame_duration = 10;
     694:	46a9                	li	a3,10
     696:	c054                	sw	a3,4(s0)
     698:	40f707b3          	sub	a5,a4,a5
     69c:	dcf6fbe3          	bgeu	a3,a5,472 <WS2812FillBuffSec.constprop.0+0xf2>
		*ref_time = now;
     6a0:	c818                	sw	a4,16(s0)
    return ani->colors[ani->ref_index];
     6a2:	cb418593          	addi	a1,gp,-844 # 200000b0 <color_ani>
        fr->frame_value += 3;
     6a6:	00944703          	lbu	a4,9(s0)
     6aa:	0055c503          	lbu	a0,5(a1)
     6ae:	419c                	lw	a5,0(a1)
     6b0:	070d                	addi	a4,a4,3
     6b2:	0ff77713          	zext.b	a4,a4
     6b6:	00251693          	slli	a3,a0,0x2
     6ba:	97b6                	add	a5,a5,a3
     6bc:	00e404a3          	sb	a4,9(s0)
     6c0:	4394                	lw	a3,0(a5)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     6c2:	0ff00793          	li	a5,255
     6c6:	02f707b3          	mul	a5,a4,a5
     6ca:	06400313          	li	t1,100
     6ce:	d236                	sw	a3,36(sp)
     6d0:	0086d813          	srli	a6,a3,0x8
     6d4:	0106d613          	srli	a2,a3,0x10
     6d8:	0ff6f893          	zext.b	a7,a3
     6dc:	d636                	sw	a3,44(sp)
     6de:	d036                	sw	a3,32(sp)
     6e0:	6689                	lui	a3,0x2
     6e2:	a8068693          	addi	a3,a3,-1408 # 1a80 <SIN_LUT>
     6e6:	0267c7b3          	div	a5,a5,t1
     6ea:	0ff87813          	zext.b	a6,a6
     6ee:	0ff67613          	zext.b	a2,a2
     6f2:	0ff7f793          	zext.b	a5,a5
     6f6:	97b6                	add	a5,a5,a3
     6f8:	0007c303          	lbu	t1,0(a5)
     6fc:	026806b3          	mul	a3,a6,t1
     700:	026887b3          	mul	a5,a7,t1
     704:	86a1                	srai	a3,a3,0x8
     706:	02d102a3          	sb	a3,37(sp)
     70a:	026606b3          	mul	a3,a2,t1
     70e:	87a1                	srai	a5,a5,0x8
     710:	02f10223          	sb	a5,36(sp)
     714:	00e44783          	lbu	a5,14(s0)
     718:	86a1                	srai	a3,a3,0x8
     71a:	02d10323          	sb	a3,38(sp)
     71e:	5612                	lw	a2,36(sp)
     720:	00279693          	slli	a3,a5,0x2
     724:	96ce                	add	a3,a3,s3
     726:	c290                	sw	a2,0(a3)
     728:	d432                	sw	a2,40(sp)
        if (fr->frame_value >= 100) {
     72a:	06300693          	li	a3,99
     72e:	d4e6f2e3          	bgeu	a3,a4,472 <WS2812FillBuffSec.constprop.0+0xf2>
            uint8_t next_idx = fr->ref_index + fr->frame_step;
     732:	00844703          	lbu	a4,8(s0)
            fr->frame_value = 0;
     736:	000404a3          	sb	zero,9(s0)
            uint8_t next_idx = fr->ref_index + fr->frame_step;
     73a:	97ba                	add	a5,a5,a4
     73c:	0ff7f793          	zext.b	a5,a5
            fr->ref_index = next_idx % NR_LEDS;
     740:	4719                	li	a4,6
     742:	02e7f733          	remu	a4,a5,a4
     746:	00e40723          	sb	a4,14(s0)
            if (next_idx >= NR_LEDS) {
     74a:	4715                	li	a4,5
     74c:	d2f773e3          	bgeu	a4,a5,472 <WS2812FillBuffSec.constprop.0+0xf2>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     750:	0045c703          	lbu	a4,4(a1)
     754:	00150793          	addi	a5,a0,1
     758:	02e7e7b3          	rem	a5,a5,a4
     75c:	00f582a3          	sb	a5,5(a1)
}
     760:	bb09                	j	472 <WS2812FillBuffSec.constprop.0+0xf2>
            return Neo_render_soloColorFade(&leds_frame, &color_ani, ledIdx);
            break;
        case NEO_COLOR_FLASHING:
            leds_frame.frame_duration = 10;
     762:	47a9                	li	a5,10
     764:	c05c                	sw	a5,4(s0)
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
            break;
        default:
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
     766:	856e                	mv	a0,s11
     768:	360d                	jal	28a <Neo_render_colorFlashing.constprop.0>
     76a:	b331                	j	476 <WS2812FillBuffSec.constprop.0+0xf6>

0000076c <DelaySysTick.constprop.0>:
     76c:	e000f7b7          	lui	a5,0xe000f
     770:	4794                	lw	a3,8(a5)
     772:	47d8                	lw	a4,12(a5)
     774:	0003c7b7          	lui	a5,0x3c
     778:	6cc78793          	addi	a5,a5,1740 # 3c6cc <iSLER_mess.c.a723f200+0x39632>
     77c:	97b6                	add	a5,a5,a3
     77e:	00d7b633          	sltu	a2,a5,a3
     782:	963a                	add	a2,a2,a4
     784:	e000f837          	lui	a6,0xe000f
     788:	00882503          	lw	a0,8(a6) # e000f008 <_eusrstack+0xc0007008>
     78c:	00c82583          	lw	a1,12(a6)
     790:	40f506b3          	sub	a3,a0,a5
     794:	00d536b3          	sltu	a3,a0,a3
     798:	40c58733          	sub	a4,a1,a2
     79c:	8f15                	sub	a4,a4,a3
     79e:	fe0745e3          	bltz	a4,788 <DelaySysTick.constprop.0+0x1c>
     7a2:	8082                	ret

000007a4 <blink>:
	.msgCode = 0xC1C2,
	.dest = {0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6},
	.group_id = 0x55,
};

void blink(int n) {
     7a4:	1141                	addi	sp,sp,-16
     7a6:	c226                	sw	s1,4(sp)
     7a8:	c04a                	sw	s2,0(sp)
	for(int i = n-1; i >= 0; i--) {
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
     7aa:	400014b7          	lui	s1,0x40001
		Delay_Ms(33);
		funDigitalWrite( LED, FUN_HIGH ); // Turn off LED
     7ae:	40001937          	lui	s2,0x40001
void blink(int n) {
     7b2:	c422                	sw	s0,8(sp)
     7b4:	c606                	sw	ra,12(sp)
	for(int i = n-1; i >= 0; i--) {
     7b6:	fff50413          	addi	s0,a0,-1
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
     7ba:	0ac48493          	addi	s1,s1,172 # 400010ac <_eusrstack+0x1fff90ac>
		funDigitalWrite( LED, FUN_HIGH ); // Turn off LED
     7be:	0a890913          	addi	s2,s2,168 # 400010a8 <_eusrstack+0x1fff90a8>
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
     7c2:	409c                	lw	a5,0(s1)
     7c4:	1007e793          	ori	a5,a5,256
     7c8:	c09c                	sw	a5,0(s1)
		Delay_Ms(33);
     7ca:	374d                	jal	76c <DelaySysTick.constprop.0>
		funDigitalWrite( LED, FUN_HIGH ); // Turn off LED
     7cc:	00092783          	lw	a5,0(s2)
     7d0:	1007e793          	ori	a5,a5,256
     7d4:	00f92023          	sw	a5,0(s2)
		if(i) Delay_Ms(33);
     7d8:	c401                	beqz	s0,7e0 <blink+0x3c>
     7da:	3f49                	jal	76c <DelaySysTick.constprop.0>
	for(int i = n-1; i >= 0; i--) {
     7dc:	147d                	addi	s0,s0,-1
     7de:	b7d5                	j	7c2 <blink+0x1e>
	}
}
     7e0:	40b2                	lw	ra,12(sp)
     7e2:	4422                	lw	s0,8(sp)
     7e4:	4492                	lw	s1,4(sp)
     7e6:	4902                	lw	s2,0(sp)
     7e8:	0141                	addi	sp,sp,16
     7ea:	8082                	ret

000007ec <internal_handle_input.constprop.0>:
     7ec:	e00007b7          	lui	a5,0xe0000
     7f0:	38078793          	addi	a5,a5,896 # e0000380 <_eusrstack+0xbfff8380>
     7f4:	439c                	lw	a5,0(a5)
     7f6:	8082                	ret

000007f8 <_write.constprop.0>:
     7f8:	7139                	addi	sp,sp,-64
     7fa:	dc22                	sw	s0,56(sp)
     7fc:	e0000437          	lui	s0,0xe0000
     800:	38040413          	addi	s0,s0,896 # e0000380 <_eusrstack+0xbfff8380>
     804:	401c                	lw	a5,0(s0)
     806:	de06                	sw	ra,60(sp)
     808:	da26                	sw	s1,52(sp)
     80a:	d84a                	sw	s2,48(sp)
     80c:	d64e                	sw	s3,44(sp)
     80e:	d452                	sw	s4,40(sp)
     810:	d256                	sw	s5,36(sp)
     812:	d05a                	sw	s6,32(sp)
     814:	ce5e                	sw	s7,28(sp)
     816:	cc62                	sw	s8,24(sp)
     818:	0c07f793          	andi	a5,a5,192
     81c:	0c000713          	li	a4,192
     820:	00e78b63          	beq	a5,a4,836 <_write.constprop.0+0x3e>
     824:	c602                	sw	zero,12(sp)
     826:	84ae                	mv	s1,a1
     828:	e5cd                	bnez	a1,8d2 <_write.constprop.0+0xda>
     82a:	401c                	lw	a5,0(s0)
     82c:	c789                	beqz	a5,836 <_write.constprop.0+0x3e>
     82e:	0807f793          	andi	a5,a5,128
     832:	e391                	bnez	a5,836 <_write.constprop.0+0x3e>
     834:	3f65                	jal	7ec <internal_handle_input.constprop.0>
     836:	4481                	li	s1,0
     838:	50f2                	lw	ra,60(sp)
     83a:	5462                	lw	s0,56(sp)
     83c:	5942                	lw	s2,48(sp)
     83e:	59b2                	lw	s3,44(sp)
     840:	5a22                	lw	s4,40(sp)
     842:	5a92                	lw	s5,36(sp)
     844:	5b02                	lw	s6,32(sp)
     846:	4bf2                	lw	s7,28(sp)
     848:	4c62                	lw	s8,24(sp)
     84a:	8526                	mv	a0,s1
     84c:	54d2                	lw	s1,52(sp)
     84e:	6121                	addi	sp,sp,64
     850:	8082                	ret
     852:	41248a33          	sub	s4,s1,s2
     856:	89d2                	mv	s3,s4
     858:	014bd363          	bge	s7,s4,85e <_write.constprop.0+0x66>
     85c:	499d                	li	s3,7
     85e:	001007b7          	lui	a5,0x100
     862:	0785                	addi	a5,a5,1 # 100001 <iSLER_mess.c.a723f200+0xfcf67>
     864:	4018                	lw	a4,0(s0)
     866:	08077693          	andi	a3,a4,128
     86a:	eea9                	bnez	a3,8c4 <_write.constprop.0+0xcc>
     86c:	c311                	beqz	a4,870 <_write.constprop.0+0x78>
     86e:	3fbd                	jal	7ec <internal_handle_input.constprop.0>
     870:	003a2a13          	slti	s4,s4,3
     874:	4601                	li	a2,0
     876:	000a1463          	bnez	s4,87e <_write.constprop.0+0x86>
     87a:	ffd98613          	addi	a2,s3,-3
     87e:	00390593          	addi	a1,s2,3
     882:	95d6                	add	a1,a1,s5
     884:	0068                	addi	a0,sp,12
     886:	2631                	jal	b92 <memcpy>
     888:	47b2                	lw	a5,12(sp)
     88a:	012a8733          	add	a4,s5,s2
     88e:	00fb2023          	sw	a5,0(s6)
     892:	4781                	li	a5,0
     894:	00074603          	lbu	a2,0(a4)
     898:	0785                	addi	a5,a5,1
     89a:	0074                	addi	a3,sp,12
     89c:	96be                	add	a3,a3,a5
     89e:	00c68023          	sb	a2,0(a3)
     8a2:	00f98563          	beq	s3,a5,8ac <_write.constprop.0+0xb4>
     8a6:	0705                	addi	a4,a4,1
     8a8:	ff8796e3          	bne	a5,s8,894 <_write.constprop.0+0x9c>
     8ac:	00498793          	addi	a5,s3,4
     8b0:	f807e793          	ori	a5,a5,-128
     8b4:	00f10623          	sb	a5,12(sp)
     8b8:	47b2                	lw	a5,12(sp)
     8ba:	994e                	add	s2,s2,s3
     8bc:	c01c                	sw	a5,0(s0)
     8be:	f8994ae3          	blt	s2,s1,852 <_write.constprop.0+0x5a>
     8c2:	bf9d                	j	838 <_write.constprop.0+0x40>
     8c4:	17fd                	addi	a5,a5,-1
     8c6:	ffd9                	bnez	a5,864 <_write.constprop.0+0x6c>
     8c8:	401c                	lw	a5,0(s0)
     8ca:	0c07e793          	ori	a5,a5,192
     8ce:	c01c                	sw	a5,0(s0)
     8d0:	b79d                	j	836 <_write.constprop.0+0x3e>
     8d2:	e0000b37          	lui	s6,0xe0000
     8d6:	8aaa                	mv	s5,a0
     8d8:	4901                	li	s2,0
     8da:	4b9d                	li	s7,7
     8dc:	384b0b13          	addi	s6,s6,900 # e0000384 <_eusrstack+0xbfff8384>
     8e0:	4c0d                	li	s8,3
     8e2:	bff1                	j	8be <_write.constprop.0+0xc6>

000008e4 <__puts_uart>:
     8e4:	1141                	addi	sp,sp,-16
     8e6:	c422                	sw	s0,8(sp)
     8e8:	c606                	sw	ra,12(sp)
     8ea:	842e                	mv	s0,a1
     8ec:	3731                	jal	7f8 <_write.constprop.0>
     8ee:	40b2                	lw	ra,12(sp)
     8f0:	8522                	mv	a0,s0
     8f2:	4422                	lw	s0,8(sp)
     8f4:	0141                	addi	sp,sp,16
     8f6:	8082                	ret

000008f8 <handle_reset>:
     8f8:	20000197          	auipc	gp,0x20000
     8fc:	b0418193          	addi	gp,gp,-1276 # 200003fc <__global_pointer$>
     900:	20007117          	auipc	sp,0x20007
     904:	70010113          	addi	sp,sp,1792 # 20008000 <_eusrstack>
     908:	cc818513          	addi	a0,gp,-824 # 200000c4 <tuneFilter2M>
     90c:	1b018593          	addi	a1,gp,432 # 200005ac <_ebss>
     910:	00b57763          	bgeu	a0,a1,91e <handle_reset+0x26>
     914:	00052023          	sw	zero,0(a0)
     918:	0511                	addi	a0,a0,4
     91a:	feb56de3          	bltu	a0,a1,914 <handle_reset+0x1c>
     91e:	00001517          	auipc	a0,0x1
     922:	2aa50513          	addi	a0,a0,682 # 1bc8 <_data_lma>
     926:	c0418593          	addi	a1,gp,-1020 # 20000000 <color_arr>
     92a:	cc818613          	addi	a2,gp,-824 # 200000c4 <tuneFilter2M>
     92e:	00c58a63          	beq	a1,a2,942 <handle_reset+0x4a>
     932:	00052283          	lw	t0,0(a0)
     936:	0055a023          	sw	t0,0(a1)
     93a:	0511                	addi	a0,a0,4
     93c:	0591                	addi	a1,a1,4
     93e:	fec5eae3          	bltu	a1,a2,932 <handle_reset+0x3a>
     942:	00000793          	li	a5,0
     946:	42fd                	li	t0,31
     948:	bc029073          	csrw	0xbc0,t0
     94c:	6289                	lui	t0,0x2
     94e:	88828293          	addi	t0,t0,-1912 # 1888 <SysTick_Handler+0x34>
     952:	3002a073          	csrs	mstatus,t0
     956:	fffff297          	auipc	t0,0xfffff
     95a:	6aa28293          	addi	t0,t0,1706 # 0 <InterruptVector>
     95e:	0032e293          	ori	t0,t0,3
     962:	30529073          	csrw	mtvec,t0
     966:	e000f7b7          	lui	a5,0xe000f
     96a:	4705                	li	a4,1
     96c:	c398                	sw	a4,0(a5)
     96e:	6785                	lui	a5,0x1
     970:	e5078793          	addi	a5,a5,-432 # e50 <main>
     974:	34179073          	csrw	mepc,a5
     978:	30200073          	mret

0000097c <ADC1_2_IRQHandler>:
     97c:	a001                	j	97c <ADC1_2_IRQHandler>

0000097e <strlen>:
     97e:	87aa                	mv	a5,a0
     980:	0007c703          	lbu	a4,0(a5)
     984:	e701                	bnez	a4,98c <strlen+0xe>
     986:	40a78533          	sub	a0,a5,a0
     98a:	8082                	ret
     98c:	0785                	addi	a5,a5,1
     98e:	bfcd                	j	980 <strlen+0x2>

00000990 <mini_vpprintf>:
     990:	7119                	addi	sp,sp,-128
     992:	dca2                	sw	s0,120(sp)
     994:	daa6                	sw	s1,116(sp)
     996:	d8ca                	sw	s2,112(sp)
     998:	d6ce                	sw	s3,108(sp)
     99a:	d4d2                	sw	s4,104(sp)
     99c:	d2d6                	sw	s5,100(sp)
     99e:	d0da                	sw	s6,96(sp)
     9a0:	cce2                	sw	s8,88(sp)
     9a2:	de86                	sw	ra,124(sp)
     9a4:	cede                	sw	s7,92(sp)
     9a6:	cae6                	sw	s9,84(sp)
     9a8:	c8ea                	sw	s10,80(sp)
     9aa:	c6ee                	sw	s11,76(sp)
     9ac:	84aa                	mv	s1,a0
     9ae:	892e                	mv	s2,a1
     9b0:	8432                	mv	s0,a2
     9b2:	8c36                	mv	s8,a3
     9b4:	4981                	li	s3,0
     9b6:	02500a13          	li	s4,37
     9ba:	03000a93          	li	s5,48
     9be:	4b29                	li	s6,10
     9c0:	00044783          	lbu	a5,0(s0)
     9c4:	00140c93          	addi	s9,s0,1
     9c8:	00f107a3          	sb	a5,15(sp)
     9cc:	e38d                	bnez	a5,9ee <mini_vpprintf+0x5e>
     9ce:	50f6                	lw	ra,124(sp)
     9d0:	5466                	lw	s0,120(sp)
     9d2:	54d6                	lw	s1,116(sp)
     9d4:	5946                	lw	s2,112(sp)
     9d6:	5a26                	lw	s4,104(sp)
     9d8:	5a96                	lw	s5,100(sp)
     9da:	5b06                	lw	s6,96(sp)
     9dc:	4bf6                	lw	s7,92(sp)
     9de:	4c66                	lw	s8,88(sp)
     9e0:	4cd6                	lw	s9,84(sp)
     9e2:	4d46                	lw	s10,80(sp)
     9e4:	4db6                	lw	s11,76(sp)
     9e6:	854e                	mv	a0,s3
     9e8:	59b6                	lw	s3,108(sp)
     9ea:	6109                	addi	sp,sp,128
     9ec:	8082                	ret
     9ee:	01478c63          	beq	a5,s4,a06 <mini_vpprintf+0x76>
     9f2:	864a                	mv	a2,s2
     9f4:	4585                	li	a1,1
     9f6:	00f10513          	addi	a0,sp,15
     9fa:	9482                	jalr	s1
     9fc:	8be2                	mv	s7,s8
     9fe:	8466                	mv	s0,s9
     a00:	99aa                	add	s3,s3,a0
     a02:	8c5e                	mv	s8,s7
     a04:	bf75                	j	9c0 <mini_vpprintf+0x30>
     a06:	00144783          	lbu	a5,1(s0)
     a0a:	00240713          	addi	a4,s0,2
     a0e:	03000c93          	li	s9,48
     a12:	00f107a3          	sb	a5,15(sp)
     a16:	07579f63          	bne	a5,s5,a94 <mini_vpprintf+0x104>
     a1a:	843a                	mv	s0,a4
     a1c:	4d81                	li	s11,0
     a1e:	4701                	li	a4,0
     a20:	4625                	li	a2,9
     a22:	a801                	j	a32 <mini_vpprintf+0xa2>
     a24:	036d8db3          	mul	s11,s11,s6
     a28:	00044783          	lbu	a5,0(s0)
     a2c:	0405                	addi	s0,s0,1
     a2e:	4705                	li	a4,1
     a30:	9db6                	add	s11,s11,a3
     a32:	fd078693          	addi	a3,a5,-48
     a36:	0ff6f593          	zext.b	a1,a3
     a3a:	feb675e3          	bgeu	a2,a1,a24 <mini_vpprintf+0x94>
     a3e:	c319                	beqz	a4,a44 <mini_vpprintf+0xb4>
     a40:	00f107a3          	sb	a5,15(sp)
     a44:	4761                	li	a4,24
     a46:	8d6e                	mv	s10,s11
     a48:	01b75363          	bge	a4,s11,a4e <mini_vpprintf+0xbe>
     a4c:	4d61                	li	s10,24
     a4e:	06c00693          	li	a3,108
     a52:	4701                	li	a4,0
     a54:	00d79863          	bne	a5,a3,a64 <mini_vpprintf+0xd4>
     a58:	00044783          	lbu	a5,0(s0)
     a5c:	4705                	li	a4,1
     a5e:	0405                	addi	s0,s0,1
     a60:	00f107a3          	sb	a5,15(sp)
     a64:	00f14683          	lbu	a3,15(sp)
     a68:	06400793          	li	a5,100
     a6c:	06f68163          	beq	a3,a5,ace <mini_vpprintf+0x13e>
     a70:	02d7e563          	bltu	a5,a3,a9a <mini_vpprintf+0x10a>
     a74:	05800793          	li	a5,88
     a78:	08f68e63          	beq	a3,a5,b14 <mini_vpprintf+0x184>
     a7c:	06300793          	li	a5,99
     a80:	0af68c63          	beq	a3,a5,b38 <mini_vpprintf+0x1a8>
     a84:	d6a9                	beqz	a3,9ce <mini_vpprintf+0x3e>
     a86:	864a                	mv	a2,s2
     a88:	4585                	li	a1,1
     a8a:	00f10513          	addi	a0,sp,15
     a8e:	9482                	jalr	s1
     a90:	8be2                	mv	s7,s8
     a92:	b7bd                	j	a00 <mini_vpprintf+0x70>
     a94:	02000c93          	li	s9,32
     a98:	b749                	j	a1a <mini_vpprintf+0x8a>
     a9a:	07500793          	li	a5,117
     a9e:	02f68863          	beq	a3,a5,ace <mini_vpprintf+0x13e>
     aa2:	07800793          	li	a5,120
     aa6:	06f68763          	beq	a3,a5,b14 <mini_vpprintf+0x184>
     aaa:	07300793          	li	a5,115
     aae:	fcf69ce3          	bne	a3,a5,a86 <mini_vpprintf+0xf6>
     ab2:	004c0b93          	addi	s7,s8,4
     ab6:	000c2c03          	lw	s8,0(s8)
     aba:	8562                	mv	a0,s8
     abc:	35c9                	jal	97e <strlen>
     abe:	85aa                	mv	a1,a0
     ac0:	09b05963          	blez	s11,b52 <mini_vpprintf+0x1c2>
     ac4:	1038                	addi	a4,sp,40
     ac6:	86ea                	mv	a3,s10
     ac8:	8666                	mv	a2,s9
     aca:	8562                	mv	a0,s8
     acc:	a025                	j	af4 <mini_vpprintf+0x164>
     ace:	004c0b93          	addi	s7,s8,4
     ad2:	cb05                	beqz	a4,b02 <mini_vpprintf+0x172>
     ad4:	f8b68693          	addi	a3,a3,-117
     ad8:	0818                	addi	a4,sp,16
     ada:	0016b693          	seqz	a3,a3
     ade:	000c2503          	lw	a0,0(s8)
     ae2:	4601                	li	a2,0
     ae4:	45a9                	li	a1,10
     ae6:	e46ff0ef          	jal	12c <mini_itoa.part.0>
     aea:	1038                	addi	a4,sp,40
     aec:	86ea                	mv	a3,s10
     aee:	8666                	mv	a2,s9
     af0:	85aa                	mv	a1,a0
     af2:	0808                	addi	a0,sp,16
     af4:	d9cff0ef          	jal	90 <mini_pad>
     af8:	85aa                	mv	a1,a0
     afa:	864a                	mv	a2,s2
     afc:	1028                	addi	a0,sp,40
     afe:	9482                	jalr	s1
     b00:	b701                	j	a00 <mini_vpprintf+0x70>
     b02:	07500793          	li	a5,117
     b06:	0818                	addi	a4,sp,16
     b08:	00f69463          	bne	a3,a5,b10 <mini_vpprintf+0x180>
     b0c:	4685                	li	a3,1
     b0e:	bfc1                	j	ade <mini_vpprintf+0x14e>
     b10:	4681                	li	a3,0
     b12:	b7f1                	j	ade <mini_vpprintf+0x14e>
     b14:	000c2503          	lw	a0,0(s8)
     b18:	fa868613          	addi	a2,a3,-88
     b1c:	0818                	addi	a4,sp,16
     b1e:	4685                	li	a3,1
     b20:	00163613          	seqz	a2,a2
     b24:	45c1                	li	a1,16
     b26:	e06ff0ef          	jal	12c <mini_itoa.part.0>
     b2a:	004c0b93          	addi	s7,s8,4
     b2e:	85aa                	mv	a1,a0
     b30:	1038                	addi	a4,sp,40
     b32:	86ea                	mv	a3,s10
     b34:	8666                	mv	a2,s9
     b36:	bf75                	j	af2 <mini_vpprintf+0x162>
     b38:	000c2783          	lw	a5,0(s8)
     b3c:	004c0b93          	addi	s7,s8,4
     b40:	1038                	addi	a4,sp,40
     b42:	00f107a3          	sb	a5,15(sp)
     b46:	86ea                	mv	a3,s10
     b48:	8666                	mv	a2,s9
     b4a:	4585                	li	a1,1
     b4c:	00f10513          	addi	a0,sp,15
     b50:	b755                	j	af4 <mini_vpprintf+0x164>
     b52:	864a                	mv	a2,s2
     b54:	8562                	mv	a0,s8
     b56:	b765                	j	afe <mini_vpprintf+0x16e>

00000b58 <printf>:
     b58:	7139                	addi	sp,sp,-64
     b5a:	d432                	sw	a2,40(sp)
     b5c:	862a                	mv	a2,a0
     b5e:	6505                	lui	a0,0x1
     b60:	d22e                	sw	a1,36(sp)
     b62:	d636                	sw	a3,44(sp)
     b64:	4581                	li	a1,0
     b66:	1054                	addi	a3,sp,36
     b68:	8e450513          	addi	a0,a0,-1820 # 8e4 <__puts_uart>
     b6c:	ce06                	sw	ra,28(sp)
     b6e:	d83a                	sw	a4,48(sp)
     b70:	da3e                	sw	a5,52(sp)
     b72:	dc42                	sw	a6,56(sp)
     b74:	de46                	sw	a7,60(sp)
     b76:	c636                	sw	a3,12(sp)
     b78:	3d21                	jal	990 <mini_vpprintf>
     b7a:	40f2                	lw	ra,28(sp)
     b7c:	6121                	addi	sp,sp,64
     b7e:	8082                	ret

00000b80 <memset>:
     b80:	962a                	add	a2,a2,a0
     b82:	87aa                	mv	a5,a0
     b84:	00c79363          	bne	a5,a2,b8a <memset+0xa>
     b88:	8082                	ret
     b8a:	00b78023          	sb	a1,0(a5)
     b8e:	0785                	addi	a5,a5,1
     b90:	bfd5                	j	b84 <memset+0x4>

00000b92 <memcpy>:
     b92:	4781                	li	a5,0
     b94:	00f61363          	bne	a2,a5,b9a <memcpy+0x8>
     b98:	8082                	ret
     b9a:	00f58733          	add	a4,a1,a5
     b9e:	00074683          	lbu	a3,0(a4)
     ba2:	00f50733          	add	a4,a0,a5
     ba6:	0785                	addi	a5,a5,1
     ba8:	00d70023          	sb	a3,0(a4)
     bac:	b7e5                	j	b94 <memcpy+0x2>

00000bae <modiSLER_adv_data.constprop.0>:
) {
	dataFrame->data_len = data_len;
	memcpy(dataFrame->payload, cmd, data_len);
}

void modiSLER_adv_data(MESS_DataFrame_t *dataFrame) {
     bae:	7111                	addi	sp,sp,-256
     bb0:	df86                	sw	ra,252(sp)
     bb2:	dda2                	sw	s0,248(sp)
     bb4:	dba6                	sw	s1,244(sp)
     bb6:	0200                	addi	s0,sp,256
     bb8:	d9ca                	sw	s2,240(sp)
     bba:	d7ce                	sw	s3,236(sp)
     bbc:	d5d2                	sw	s4,232(sp)
     bbe:	d3d6                	sw	s5,228(sp)
     bc0:	d1da                	sw	s6,224(sp)
     bc2:	cde2                	sw	s8,216(sp)
     bc4:	cbe6                	sw	s9,212(sp)
     bc6:	c9ea                	sw	s10,208(sp)
     bc8:	cfde                	sw	s7,220(sp)
     bca:	c7ee                	sw	s11,204(sp)
	if (!REPORT_ALL) return;

	iSLER_frame_t frame = {
     bcc:	6589                	lui	a1,0x2
     bce:	4625                	li	a2,9
     bd0:	9e458593          	addi	a1,a1,-1564 # 19e4 <LLE_IRQHandler+0xd2>
     bd4:	f0c40513          	addi	a0,s0,-244
     bd8:	3f6d                	jal	b92 <memcpy>
     bda:	6589                	lui	a1,0x2
     bdc:	4621                	li	a2,8
     bde:	9bc58593          	addi	a1,a1,-1604 # 19bc <LLE_IRQHandler+0xaa>
     be2:	f1740513          	addi	a0,s0,-233
     be6:	3775                	jal	b92 <memcpy>
     be8:	4631                	li	a2,12
     bea:	4581                	li	a1,0
     bec:	f1f40513          	addi	a0,s0,-225
     bf0:	3f41                	jal	b80 <memset>
     bf2:	77f5                	lui	a5,0xffffd
     bf4:	7ff78793          	addi	a5,a5,2047 # ffffd7ff <_eusrstack+0xdfff57ff>
     bf8:	f2f41623          	sh	a5,-212(s0)
     bfc:	08e00613          	li	a2,142
     c00:	479d                	li	a5,7
     c02:	c2418593          	addi	a1,gp,-988 # 20000020 <dataFrame>
     c06:	f2f40513          	addi	a0,s0,-209
}

void Frame_TX(uint8_t adv[], size_t len, uint8_t channel, uint8_t phy_mode) {
	__attribute__((aligned(4))) uint8_t  ADV_BUF[len+2]; // for the advertisement, which is 37 bytes + 2 header bytes

	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
     c0a:	4000c4b7          	lui	s1,0x4000c

	// Uncomment to disable whitening to debug RF.
	//BB->CTRL_CFG |= (1<<6);
	DevSetMode(DEVSETMODE_TX);

	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
     c0e:	8e89ca37          	lui	s4,0x8e89c
	BB->CRCINIT1 = 0x555555; // crc init
     c12:	00555ab7          	lui	s5,0x555
	BB->CRCPOLY1 = (BB->CRCPOLY1 & 0xff000000) | 0x80032d; // crc poly
	BB->CRCPOLY2 = (BB->CRCPOLY2 & 0xff000000) | 0x80032d;
#endif
	// LL->LL1 = (LL->LL1 & 0xfffffffe) | 1; // The "| 1" is for AUTO mode, to swap between RX <-> TX when either happened

	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
     c16:	7b6d                	lui	s6,0xffffb
	ADV_BUF[1] = len ;
	memcpy(&ADV_BUF[2], adv, len);
	LL->FRAME_BUF = (uint32_t)ADV_BUF;
     c18:	4000c937          	lui	s2,0x4000c

#if defined(CH582_CH583) || defined(CH32V208)
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
				   (phy_mode == PHY_S2) ? CTRL_CFG_PHY_CODED:
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
										  CTRL_CFG_PHY_1M; // default 1M for now
     c1c:	7d45                	lui	s10,0xffff1
     c1e:	f2f40723          	sb	a5,-210(s0)
	// PRINT_SEPARATOR();
	// printf("Frame: ");
	// PRINT_STRUCT_BYTES(&frame, "%02X");
	// printf("\n");

	for(int c = 0; c < sizeof(adv_channels); c++) {
     c22:	4c01                	li	s8,0
	iSLER_frame_t frame = {
     c24:	37bd                	jal	b92 <memcpy>
		Frame_TX((uint8_t*)&frame, sizeof(frame), adv_channels[c], PHY_MODE);
     c26:	cc418993          	addi	s3,gp,-828 # 200000c0 <adv_channels>
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
     c2a:	10048493          	addi	s1,s1,256 # 4000c100 <_eusrstack+0x20004100>
	RF->RF11 &= 0xfffffffd;
     c2e:	4000dcb7          	lui	s9,0x4000d
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
     c32:	ed6a0a13          	addi	s4,s4,-298 # 8e89bed6 <_eusrstack+0x6e893ed6>
	BB->CRCINIT1 = 0x555555; // crc init
     c36:	555a8a93          	addi	s5,s5,1365 # 555555 <iSLER_mess.c.a723f200+0x5524bb>
	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
     c3a:	102b0b13          	addi	s6,s6,258 # ffffb102 <_eusrstack+0xdfff3102>
	LL->FRAME_BUF = (uint32_t)ADV_BUF;
     c3e:	20090913          	addi	s2,s2,512 # 4000c200 <_eusrstack+0x20004200>
										  CTRL_CFG_PHY_1M; // default 1M for now
     c42:	1d7d                	addi	s10,s10,-1 # ffff0fff <_eusrstack+0xdffe8fff>
     c44:	013c07b3          	add	a5,s8,s3
     c48:	0007c703          	lbu	a4,0(a5)
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
     c4c:	54dc                	lw	a5,44(s1)
	DevSetMode(DEVSETMODE_TX);
     c4e:	0da00513          	li	a0,218
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
     c52:	07f77713          	andi	a4,a4,127
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
     c56:	9bf1                	andi	a5,a5,-4
     c58:	0017e793          	ori	a5,a5,1
     c5c:	d4dc                	sw	a5,44(s1)
	RF->RF11 &= 0xfffffffd;
     c5e:	02cca783          	lw	a5,44(s9) # 4000d02c <_eusrstack+0x2000502c>
void Frame_TX(uint8_t adv[], size_t len, uint8_t channel, uint8_t phy_mode) {
     c62:	8d8a                	mv	s11,sp
	__attribute__((aligned(4))) uint8_t  ADV_BUF[len+2]; // for the advertisement, which is 37 bytes + 2 header bytes
     c64:	7131                	addi	sp,sp,-192
	RF->RF11 &= 0xfffffffd;
     c66:	9bf5                	andi	a5,a5,-3
     c68:	02fca623          	sw	a5,44(s9)
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
     c6c:	409c                	lw	a5,0(s1)
	__attribute__((aligned(4))) uint8_t  ADV_BUF[len+2]; // for the advertisement, which is 37 bytes + 2 header bytes
     c6e:	8b8a                	mv	s7,sp
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
     c70:	f807f793          	andi	a5,a5,-128
     c74:	8fd9                	or	a5,a5,a4
     c76:	c09c                	sw	a5,0(s1)
	DevSetMode(DEVSETMODE_TX);
     c78:	d44ff0ef          	jal	1bc <DevSetMode>
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
     c7c:	0144a423          	sw	s4,8(s1)
	BB->CRCINIT1 = 0x555555; // crc init
     c80:	0154a223          	sw	s5,4(s1)
	memcpy(&ADV_BUF[2], adv, len);
     c84:	47d5                	li	a5,21
     c86:	f0f40aa3          	sb	a5,-235(s0)
     c8a:	47a5                	li	a5,9
     c8c:	f0f40b23          	sb	a5,-234(s0)
	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
     c90:	016b9023          	sh	s6,0(s7)
	memcpy(&ADV_BUF[2], adv, len);
     c94:	f9100793          	li	a5,-111
     c98:	0b100613          	li	a2,177
     c9c:	f0c40593          	addi	a1,s0,-244
     ca0:	002b8513          	addi	a0,s7,2
     ca4:	f2f405a3          	sb	a5,-213(s0)
     ca8:	35ed                	jal	b92 <memcpy>
	for( int timeout = 3000; !(RF->RF26 & 0x1000000) && timeout >= 0; timeout-- );
     caa:	6785                	lui	a5,0x1
	LL->FRAME_BUF = (uint32_t)ADV_BUF;
     cac:	07792823          	sw	s7,112(s2)
	for( int timeout = 3000; !(RF->RF26 & 0x1000000) && timeout >= 0; timeout-- );
     cb0:	bba78793          	addi	a5,a5,-1094 # bba <modiSLER_adv_data.constprop.0+0xc>
     cb4:	068ca703          	lw	a4,104(s9)
     cb8:	00771693          	slli	a3,a4,0x7
     cbc:	0006c463          	bltz	a3,cc4 <modiSLER_adv_data.constprop.0+0x116>
     cc0:	17fd                	addi	a5,a5,-1
     cc2:	fbed                	bnez	a5,cb4 <modiSLER_adv_data.constprop.0+0x106>
										  CTRL_CFG_PHY_1M; // default 1M for now
     cc4:	409c                	lw	a5,0(s1)
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
     cc6:	6705                	lui	a4,0x1
										  CTRL_CFG_PHY_1M; // default 1M for now
     cc8:	01a7f7b3          	and	a5,a5,s10
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
     ccc:	8fd9                	or	a5,a5,a4
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
     cce:	c09c                	sw	a5,0(s1)
#if defined(CH571_CH573)
	BB->BB11 = (BB->BB11 & 0xfffffffc); // |2 for RX
#endif

	// This clears bit 17 (If set, seems to have no impact.)
	LL->LL4 &= 0xfffdffff;
     cd0:	01092783          	lw	a5,16(s2)
     cd4:	7701                	lui	a4,0xfffe0
     cd6:	177d                	addi	a4,a4,-1 # fffdffff <_eusrstack+0xdffd7fff>
     cd8:	8ff9                	and	a5,a5,a4
     cda:	00f92823          	sw	a5,16(s2)

#if !defined(CH571_CH573)
	LL->STATUS = LL_STATUS_TX;
     cde:	6789                	lui	a5,0x2
     ce0:	00f92423          	sw	a5,8(s2)
#endif
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
     ce4:	67d9                	lui	a5,0x16
     ce6:	20078793          	addi	a5,a5,512 # 16200 <iSLER_mess.c.a723f200+0x13166>
     cea:	06f92223          	sw	a5,100(s2)

	BB->CTRL_CFG |= CTRL_CFG_START_TX;
     cee:	409c                	lw	a5,0(s1)
     cf0:	00800737          	lui	a4,0x800
     cf4:	8fd9                	or	a5,a5,a4
     cf6:	c09c                	sw	a5,0(s1)
	BB->CTRL_TX &= 0xfffffffc;
     cf8:	54dc                	lw	a5,44(s1)
     cfa:	9bf1                	andi	a5,a5,-4
     cfc:	d4dc                	sw	a5,44(s1)

	LL->LL0 = 2; // Not sure what this does, but on RX it's 1
     cfe:	4789                	li	a5,2
     d00:	00f92023          	sw	a5,0(s2)

	while(LL->TMR); // wait for tx buffer to empty
     d04:	06492783          	lw	a5,100(s2)
     d08:	fff5                	bnez	a5,d04 <modiSLER_adv_data.constprop.0+0x156>
	DevSetMode(0);
     d0a:	4501                	li	a0,0
     d0c:	cb0ff0ef          	jal	1bc <DevSetMode>
	if(LL->LL0 & 3) {
     d10:	00092783          	lw	a5,0(s2)
     d14:	8b8d                	andi	a5,a5,3
     d16:	cf81                	beqz	a5,d2e <modiSLER_adv_data.constprop.0+0x180>
		LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
     d18:	05092783          	lw	a5,80(s2)
     d1c:	9be1                	andi	a5,a5,-8
     d1e:	04f92823          	sw	a5,80(s2)
		LL->LL0 |= 0x08;
     d22:	00092783          	lw	a5,0(s2)
     d26:	0087e793          	ori	a5,a5,8
     d2a:	00f92023          	sw	a5,0(s2)
	for(int c = 0; c < sizeof(adv_channels); c++) {
     d2e:	0c05                	addi	s8,s8,1
     d30:	478d                	li	a5,3
     d32:	816e                	mv	sp,s11
     d34:	f0fc18e3          	bne	s8,a5,c44 <modiSLER_adv_data.constprop.0+0x96>
	}
}
     d38:	f0040113          	addi	sp,s0,-256
     d3c:	50fe                	lw	ra,252(sp)
     d3e:	546e                	lw	s0,248(sp)
     d40:	54de                	lw	s1,244(sp)
     d42:	594e                	lw	s2,240(sp)
     d44:	59be                	lw	s3,236(sp)
     d46:	5a2e                	lw	s4,232(sp)
     d48:	5a9e                	lw	s5,228(sp)
     d4a:	5b0e                	lw	s6,224(sp)
     d4c:	4bfe                	lw	s7,220(sp)
     d4e:	4c6e                	lw	s8,216(sp)
     d50:	4cde                	lw	s9,212(sp)
     d52:	4d4e                	lw	s10,208(sp)
     d54:	4dbe                	lw	s11,204(sp)
     d56:	6111                	addi	sp,sp,256
     d58:	8082                	ret

00000d5a <memcmp>:
     d5a:	ce11                	beqz	a2,d76 <memcmp+0x1c>
     d5c:	00054783          	lbu	a5,0(a0)
     d60:	0005c703          	lbu	a4,0(a1)
     d64:	00e78563          	beq	a5,a4,d6e <memcmp+0x14>
     d68:	40e78533          	sub	a0,a5,a4
     d6c:	8082                	ret
     d6e:	167d                	addi	a2,a2,-1
     d70:	0505                	addi	a0,a0,1
     d72:	0585                	addi	a1,a1,1
     d74:	b7dd                	j	d5a <memcmp>
     d76:	4501                	li	a0,0
     d78:	8082                	ret

00000d7a <puts>:
     d7a:	1141                	addi	sp,sp,-16
     d7c:	c606                	sw	ra,12(sp)
     d7e:	c422                	sw	s0,8(sp)
     d80:	c226                	sw	s1,4(sp)
     d82:	84aa                	mv	s1,a0
     d84:	3eed                	jal	97e <strlen>
     d86:	842a                	mv	s0,a0
     d88:	85aa                	mv	a1,a0
     d8a:	8526                	mv	a0,s1
     d8c:	34b5                	jal	7f8 <_write.constprop.0>
     d8e:	6509                	lui	a0,0x2
     d90:	4585                	li	a1,1
     d92:	9f050513          	addi	a0,a0,-1552 # 19f0 <LLE_IRQHandler+0xde>
     d96:	348d                	jal	7f8 <_write.constprop.0>
     d98:	40b2                	lw	ra,12(sp)
     d9a:	00140513          	addi	a0,s0,1
     d9e:	4422                	lw	s0,8(sp)
     da0:	4492                	lw	s1,4(sp)
     da2:	0141                	addi	sp,sp,16
     da4:	8082                	ret

00000da6 <SystemInit>:
     da6:	400017b7          	lui	a5,0x40001
     daa:	04078793          	addi	a5,a5,64 # 40001040 <_eusrstack+0x1fff9040>
     dae:	05700613          	li	a2,87
     db2:	00c78023          	sb	a2,0(a5)
     db6:	fa800693          	li	a3,-88
     dba:	00d78023          	sb	a3,0(a5)
     dbe:	0001                	nop
     dc0:	0001                	nop
     dc2:	40001737          	lui	a4,0x40001
     dc6:	04b74583          	lbu	a1,75(a4) # 4000104b <_eusrstack+0x1fff904b>
     dca:	04b70713          	addi	a4,a4,75
     dce:	0df5f593          	andi	a1,a1,223
     dd2:	00b70023          	sb	a1,0(a4)
     dd6:	00078023          	sb	zero,0(a5)
     dda:	0001                	nop
     ddc:	0001                	nop
     dde:	00c78023          	sb	a2,0(a5)
     de2:	00d78023          	sb	a3,0(a5)
     de6:	0001                	nop
     de8:	0001                	nop
     dea:	00140537          	lui	a0,0x140
     dee:	400015b7          	lui	a1,0x40001
     df2:	04850513          	addi	a0,a0,72 # 140048 <iSLER_mess.c.a723f200+0x13cfae>
     df6:	c588                	sw	a0,8(a1)
     df8:	00078023          	sb	zero,0(a5)
     dfc:	0001                	nop
     dfe:	0001                	nop
     e00:	0001                	nop
     e02:	0001                	nop
     e04:	0001                	nop
     e06:	0001                	nop
     e08:	400025b7          	lui	a1,0x40002
     e0c:	05200513          	li	a0,82
     e10:	80a583a3          	sb	a0,-2041(a1) # 40001807 <_eusrstack+0x1fff9807>
     e14:	00c78023          	sb	a2,0(a5)
     e18:	00d78023          	sb	a3,0(a5)
     e1c:	0001                	nop
     e1e:	0001                	nop
     e20:	00074683          	lbu	a3,0(a4)
     e24:	0806e693          	ori	a3,a3,128
     e28:	00d70023          	sb	a3,0(a4)
     e2c:	00078023          	sb	zero,0(a5)
     e30:	0001                	nop
     e32:	0001                	nop
     e34:	e00007b7          	lui	a5,0xe0000
     e38:	38478793          	addi	a5,a5,900 # e0000384 <_eusrstack+0xbfff8384>
     e3c:	0007a023          	sw	zero,0(a5)
     e40:	e00007b7          	lui	a5,0xe0000
     e44:	38078793          	addi	a5,a5,896 # e0000380 <_eusrstack+0xbfff8380>
     e48:	08000713          	li	a4,128
     e4c:	c398                	sw	a4,0(a5)
     e4e:	8082                	ret

00000e50 <main>:
				break;
		}
	}
}

int main() {
     e50:	7175                	addi	sp,sp,-144
     e52:	c706                	sw	ra,140(sp)
     e54:	c522                	sw	s0,136(sp)
     e56:	c326                	sw	s1,132(sp)
     e58:	c14a                	sw	s2,128(sp)
     e5a:	dece                	sw	s3,124(sp)
     e5c:	dcd2                	sw	s4,120(sp)
     e5e:	dad6                	sw	s5,116(sp)
     e60:	d8da                	sw	s6,112(sp)
     e62:	d6de                	sw	s7,108(sp)
     e64:	d4e2                	sw	s8,104(sp)
     e66:	d2e6                	sw	s9,100(sp)
     e68:	d0ea                	sw	s10,96(sp)
     e6a:	ceee                	sw	s11,92(sp)
	SystemInit();
     e6c:	3f2d                	jal	da6 <SystemInit>
	SysTick->CTLR = 0x0000;
     e6e:	e000f7b7          	lui	a5,0xe000f
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     e72:	663d                	lui	a2,0xf
	SysTick->CTLR = 0x0000;
     e74:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc0007000>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     e78:	a5f60613          	addi	a2,a2,-1441 # ea5f <iSLER_mess.c.a723f200+0xb9c5>
     e7c:	cb90                	sw	a2,16(a5)
     e7e:	4681                	li	a3,0
     e80:	cbd4                	sw	a3,20(a5)
	SysTick->CNT = 0x00000000;
     e82:	4681                	li	a3,0
     e84:	c794                	sw	a3,8(a5)
     e86:	4701                	li	a4,0
     e88:	c7d8                	sw	a4,12(a5)
	systick_millis = 0x00000000;
     e8a:	ce01a423          	sw	zero,-792(gp) # 200000e4 <systick_millis>
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
     e8e:	4398                	lw	a4,0(a5)
}

// Enable Interrupt (by interrupt number)
RV_STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e90:	e000e6b7          	lui	a3,0xe000e
     e94:	00776713          	ori	a4,a4,7
     e98:	c398                	sw	a4,0(a5)
     e9a:	6785                	lui	a5,0x1
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) |= (pin & ~PB);
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     &= ~(pin & ~PB);
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
		break;
	case GPIO_ModeOut_PP_5mA:
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     e9c:	40001737          	lui	a4,0x40001
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     ea0:	10f6a023          	sw	a5,256(a3) # e000e100 <_eusrstack+0xc0006100>
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     ea4:	0b470713          	addi	a4,a4,180 # 400010b4 <_eusrstack+0x1fff90b4>
     ea8:	431c                	lw	a5,0(a4)
	RF->RF10 = 0x480;
     eaa:	4000d437          	lui	s0,0x4000d
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
     eae:	900005b7          	lui	a1,0x90000
     eb2:	eff7f793          	andi	a5,a5,-257
     eb6:	c31c                	sw	a5,0(a4)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    |= (pin & ~PB);
     eb8:	400017b7          	lui	a5,0x40001
     ebc:	0a078793          	addi	a5,a5,160 # 400010a0 <_eusrstack+0x1fff90a0>
     ec0:	4390                	lw	a2,0(a5)
     ec2:	15fd                	addi	a1,a1,-1 # 8fffffff <_eusrstack+0x6fff7fff>
     ec4:	20000537          	lui	a0,0x20000
     ec8:	10066613          	ori	a2,a2,256
     ecc:	c390                	sw	a2,0(a5)
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     ece:	4310                	lw	a2,0(a4)
	RF->RF19 &= 0xfeffffff;
     ed0:	ff000837          	lui	a6,0xff000
     ed4:	187d                	addi	a6,a6,-1 # feffffff <_eusrstack+0xdeff7fff>
     ed6:	bff67613          	andi	a2,a2,-1025
     eda:	c310                	sw	a2,0(a4)
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     |= (pin & ~PB);
     edc:	40001737          	lui	a4,0x40001
     ee0:	0b070713          	addi	a4,a4,176 # 400010b0 <_eusrstack+0x1fff90b0>
     ee4:	4310                	lw	a2,0(a4)
	RF->RF19 |= 0x2000000;
     ee6:	020008b7          	lui	a7,0x2000
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
     eea:	6311                	lui	t1,0x4
     eec:	40066613          	ori	a2,a2,1024
     ef0:	c310                	sw	a2,0(a4)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
     ef2:	4398                	lw	a4,0(a5)
	LL->LL7 = 0x76;
     ef4:	07600613          	li	a2,118
	RF->RF21 &= 0xffffefff;
     ef8:	797d                	lui	s2,0xfffff
     efa:	bff77713          	andi	a4,a4,-1025
     efe:	c398                	sw	a4,0(a5)
	LL->LL5 = 0x8c;
     f00:	4000c7b7          	lui	a5,0x4000c
     f04:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
     f08:	08c00713          	li	a4,140
     f0c:	cbd8                	sw	a4,20(a5)
	LL->LL7 = 0x76;
     f0e:	cfd0                	sw	a2,28(a5)
	LL->LL9 = 0x8c;
     f10:	d3d8                	sw	a4,36(a5)
	LL->LL13 = 0x8c;
     f12:	dbd8                	sw	a4,52(a5)
	LL->LL17 = 0x8c;
     f14:	c3f8                	sw	a4,68(a5)
	LL->LL19 = 0x76;
     f16:	c7f0                	sw	a2,76(a5)
	LL->LL11 = 0x3c;
     f18:	03c00713          	li	a4,60
     f1c:	d7d8                	sw	a4,44(a5)
	LL->LL15 = 0x3c;
     f1e:	dfd8                	sw	a4,60(a5)
	LL->INT_EN = 0xf00f;
     f20:	673d                	lui	a4,0xf
     f22:	073d                	addi	a4,a4,15 # f00f <iSLER_mess.c.a723f200+0xbf75>
     f24:	c7d8                	sw	a4,12(a5)
	LL->STATE_BUF = (uint32_t)LLE_BUF;
     f26:	cec18713          	addi	a4,gp,-788 # 200000e8 <LLE_BUF>
     f2a:	dbf8                	sw	a4,116(a5)
	LL->STATUS = 0xffffffff;
     f2c:	577d                	li	a4,-1
     f2e:	c798                	sw	a4,8(a5)
	RF->RF10 = 0x480;
     f30:	48000793          	li	a5,1152
     f34:	d41c                	sw	a5,40(s0)
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
     f36:	443c                	lw	a5,72(s0)
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
     f38:	04000637          	lui	a2,0x4000
	RF->RF21 &= 0xffffefff;
     f3c:	197d                	addi	s2,s2,-1 # ffffefff <_eusrstack+0xdfff6fff>
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
     f3e:	8fed                	and	a5,a5,a1
     f40:	8fc9                	or	a5,a5,a0
     f42:	c43c                	sw	a5,72(s0)
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
     f44:	4438                	lw	a4,72(s0)
     f46:	f90007b7          	lui	a5,0xf9000
     f4a:	17fd                	addi	a5,a5,-1 # f8ffffff <_eusrstack+0xd8ff7fff>
     f4c:	8f7d                	and	a4,a4,a5
     f4e:	8f51                	or	a4,a4,a2
     f50:	c438                	sw	a4,72(s0)
	RF->RF18 = (RF->RF18 & 0xfffffff0) | 9;
     f52:	4438                	lw	a4,72(s0)
	RF->RF18 &= 0xfff8ffff;
     f54:	fff90637          	lui	a2,0xfff90
     f58:	167d                	addi	a2,a2,-1 # fff8ffff <_eusrstack+0xdff87fff>
	RF->RF18 = (RF->RF18 & 0xfffffff0) | 9;
     f5a:	9b41                	andi	a4,a4,-16
     f5c:	00976713          	ori	a4,a4,9
     f60:	c438                	sw	a4,72(s0)
	RF->RF18 &= 0xfff8ffff;
     f62:	4438                	lw	a4,72(s0)
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
     f64:	157d                	addi	a0,a0,-1 # 1fffffff <iSLER_mess.c.a723f200+0x1fffcf65>
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
     f66:	000209b7          	lui	s3,0x20
	RF->RF18 &= 0xfff8ffff;
     f6a:	8f71                	and	a4,a4,a2
     f6c:	c438                	sw	a4,72(s0)
	RF->RF18 |= 0x80000000;
     f6e:	4438                	lw	a4,72(s0)
     f70:	80000637          	lui	a2,0x80000
	NVIC->VTFIDR[3] = 0x14;
     f74:	4b51                	li	s6,20
	RF->RF18 |= 0x80000000;
     f76:	8f51                	or	a4,a4,a2
     f78:	c438                	sw	a4,72(s0)
	RF->RF19 = (RF->RF19 & 0xfffffff8) | 3;
     f7a:	4478                	lw	a4,76(s0)
     f7c:	cec18a13          	addi	s4,gp,-788 # 200000e8 <LLE_BUF>
     f80:	9b61                	andi	a4,a4,-8
     f82:	00376713          	ori	a4,a4,3
     f86:	c478                	sw	a4,76(s0)
	RF->RF19 = (RF->RF19 & 0xffffff8f) | 0x30;
     f88:	4478                	lw	a4,76(s0)
     f8a:	f8f77713          	andi	a4,a4,-113
     f8e:	03076713          	ori	a4,a4,48
     f92:	c478                	sw	a4,76(s0)
	RF->RF19 = (RF->RF19 & 0xfffff8ff) | 0x300;
     f94:	4478                	lw	a4,76(s0)
     f96:	8ff77713          	andi	a4,a4,-1793
     f9a:	30076713          	ori	a4,a4,768
     f9e:	c478                	sw	a4,76(s0)
	RF->RF19 &= 0xfeffffff;
     fa0:	4478                	lw	a4,76(s0)
     fa2:	01077733          	and	a4,a4,a6
     fa6:	c478                	sw	a4,76(s0)
	RF->RF19 |= 0x2000000;
     fa8:	4478                	lw	a4,76(s0)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
     faa:	7845                	lui	a6,0xffff1
     fac:	187d                	addi	a6,a6,-1 # ffff0fff <_eusrstack+0xdffe8fff>
	RF->RF19 |= 0x2000000;
     fae:	01176733          	or	a4,a4,a7
     fb2:	c478                	sw	a4,76(s0)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
     fb4:	4838                	lw	a4,80(s0)
     fb6:	01077733          	and	a4,a4,a6
     fba:	00676733          	or	a4,a4,t1
     fbe:	c838                	sw	a4,80(s0)
	RF->RF21 = (RF->RF21 & 0xfffffff0) | 0xc;
     fc0:	4878                	lw	a4,84(s0)
     fc2:	9b41                	andi	a4,a4,-16
     fc4:	00c76713          	ori	a4,a4,12
     fc8:	c878                	sw	a4,84(s0)
	RF->RF21 |= 0x80;
     fca:	4878                	lw	a4,84(s0)
     fcc:	08076713          	ori	a4,a4,128
     fd0:	c878                	sw	a4,84(s0)
	RF->RF21 &= 0xffffefff;
     fd2:	4878                	lw	a4,84(s0)
     fd4:	01277733          	and	a4,a4,s2
     fd8:	c878                	sw	a4,84(s0)
	RF->RF15 = (RF->RF15 & 0xffff0fff) | 0x8000;
     fda:	5c58                	lw	a4,60(s0)
     fdc:	01077733          	and	a4,a4,a6
     fe0:	6821                	lui	a6,0x8
     fe2:	01076733          	or	a4,a4,a6
     fe6:	dc58                	sw	a4,60(s0)
	RF->RF15 = (RF->RF15 & 0xf8ffffff) | 0x2000000;
     fe8:	5c58                	lw	a4,60(s0)
     fea:	8f7d                	and	a4,a4,a5
     fec:	01176733          	or	a4,a4,a7
     ff0:	dc58                	sw	a4,60(s0)
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
     ff2:	5c58                	lw	a4,60(s0)
     ff4:	8f69                	and	a4,a4,a0
     ff6:	40000537          	lui	a0,0x40000
     ffa:	8f49                	or	a4,a4,a0
     ffc:	dc58                	sw	a4,60(s0)
	RF->RF11 |= 0x700000;
     ffe:	5458                	lw	a4,44(s0)
    1000:	00700537          	lui	a0,0x700
    1004:	8f49                	or	a4,a4,a0
    1006:	d458                	sw	a4,44(s0)
	RF->RF11 &= 0xf8ffffff;
    1008:	5458                	lw	a4,44(s0)
    100a:	8ff9                	and	a5,a5,a4
    100c:	d45c                	sw	a5,44(s0)
	RF->RF11 = (RF->RF11 & 0xffffcfff) | 0x2000;
    100e:	545c                	lw	a5,44(s0)
    1010:	7775                	lui	a4,0xffffd
    1012:	177d                	addi	a4,a4,-1 # ffffcfff <_eusrstack+0xdfff4fff>
    1014:	8ff9                	and	a5,a5,a4
    1016:	6709                	lui	a4,0x2
    1018:	8fd9                	or	a5,a5,a4
    101a:	d45c                	sw	a5,44(s0)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
    101c:	545c                	lw	a5,44(s0)
    101e:	fffd0737          	lui	a4,0xfffd0
    1022:	177d                	addi	a4,a4,-1 # fffcffff <_eusrstack+0xdffc7fff>
    1024:	8ff9                	and	a5,a5,a4
    1026:	0137e7b3          	or	a5,a5,s3
    102a:	d45c                	sw	a5,44(s0)
	RF->RF12 &= 0xfffffff0;
    102c:	581c                	lw	a5,48(s0)
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
    102e:	50000737          	lui	a4,0x50000
	RF->RF12 &= 0xfffffff0;
    1032:	9bc1                	andi	a5,a5,-16
    1034:	d81c                	sw	a5,48(s0)
	RF->RF12 &= 0xffffff0f;
    1036:	581c                	lw	a5,48(s0)
    1038:	f0f7f793          	andi	a5,a5,-241
    103c:	d81c                	sw	a5,48(s0)
	RF->RF12 &= 0xfffff8ff;
    103e:	581c                	lw	a5,48(s0)
    1040:	8ff7f793          	andi	a5,a5,-1793
    1044:	d81c                	sw	a5,48(s0)
	RF->RF12 |= 0x700000;
    1046:	581c                	lw	a5,48(s0)
    1048:	8fc9                	or	a5,a5,a0
    104a:	d81c                	sw	a5,48(s0)
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
    104c:	581c                	lw	a5,48(s0)
	DevSetMode(DEVSETMODE_TUNE);
    104e:	0dd00513          	li	a0,221
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
    1052:	8fed                	and	a5,a5,a1
    1054:	8fd9                	or	a5,a5,a4
    1056:	d81c                	sw	a5,48(s0)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xff07ffff) | RFEND_TXCTUNE_INIT;
    1058:	5c1c                	lw	a5,56(s0)
    105a:	ff080737          	lui	a4,0xff080
    105e:	177d                	addi	a4,a4,-1 # ff07ffff <_eusrstack+0xdf077fff>
    1060:	8ff9                	and	a5,a5,a4
    1062:	00880737          	lui	a4,0x880
    1066:	8fd9                	or	a5,a5,a4
    1068:	dc1c                	sw	a5,56(s0)
	RF->TXTUNE_CTRL |= 0x80000000;
    106a:	5c1c                	lw	a5,56(s0)
    106c:	8fd1                	or	a5,a5,a2
    106e:	dc1c                	sw	a5,56(s0)
	BB->CTRL_CFG |= 0x800000;
    1070:	4000c7b7          	lui	a5,0x4000c
    1074:	10078793          	addi	a5,a5,256 # 4000c100 <_eusrstack+0x20004100>
    1078:	4398                	lw	a4,0(a5)
    107a:	00800637          	lui	a2,0x800
    107e:	8f51                	or	a4,a4,a2
    1080:	c398                	sw	a4,0(a5)
	BB->CTRL_CFG |= 0x10000000;
    1082:	4398                	lw	a4,0(a5)
    1084:	10000637          	lui	a2,0x10000
    1088:	8f51                	or	a4,a4,a2
    108a:	c398                	sw	a4,0(a5)
	BB->BB13 = 0x1d0;
    108c:	1d000713          	li	a4,464
    1090:	dbd8                	sw	a4,52(a5)
	BB->CTRL_TX = TxPower << 0x19 | CTRL_TX_TXPOWER;
    1092:	a4011737          	lui	a4,0xa4011
    1096:	e7870713          	addi	a4,a4,-392 # a4010e78 <_eusrstack+0x84008e78>
    109a:	d7d8                	sw	a4,44(a5)
	BB->CTRL_TX = (BB->CTRL_TX & 0x81ffffff) | (TxPower & 0x3f) << 0x19;
    109c:	57d8                	lw	a4,44(a5)
    109e:	82000637          	lui	a2,0x82000
    10a2:	167d                	addi	a2,a2,-1 # 81ffffff <_eusrstack+0x61ff7fff>
    10a4:	8f71                	and	a4,a4,a2
    10a6:	24000637          	lui	a2,0x24000
    10aa:	8f51                	or	a4,a4,a2
    10ac:	d7d8                	sw	a4,44(a5)
	BB->BB8 = 0x90083;
    10ae:	00090737          	lui	a4,0x90
    10b2:	08370713          	addi	a4,a4,131 # 90083 <iSLER_mess.c.a723f200+0x8cfe9>
    10b6:	d398                	sw	a4,32(a5)
	NVIC->VTFIDR[3] = 0x14;
    10b8:	056689a3          	sb	s6,83(a3)
	DevSetMode(DEVSETMODE_TUNE);
    10bc:	900ff0ef          	jal	1bc <DevSetMode>
	RF->RF1 &= 0xfffffeff;
    10c0:	405c                	lw	a5,4(s0)
	uint32_t tune2401 = RFEND_TXCTune(37);
    10c2:	02500513          	li	a0,37
	RF->RF1 &= 0xfffffeff;
    10c6:	eff7f793          	andi	a5,a5,-257
    10ca:	c05c                	sw	a5,4(s0)
	RF->RF10 &= 0xffffefff;
    10cc:	541c                	lw	a5,40(s0)
    10ce:	0127f7b3          	and	a5,a5,s2
    10d2:	d41c                	sw	a5,40(s0)
	RF->RF11 &= 0xffffffef;
    10d4:	545c                	lw	a5,44(s0)
    10d6:	9bbd                	andi	a5,a5,-17
    10d8:	d45c                	sw	a5,44(s0)
	RF->RF2 |= 0x20000;
    10da:	441c                	lw	a5,8(s0)
    10dc:	0137e7b3          	or	a5,a5,s3
    10e0:	c41c                	sw	a5,8(s0)
	RF->RF1 |= 0x10;
    10e2:	405c                	lw	a5,4(s0)
    10e4:	0107e793          	ori	a5,a5,16
    10e8:	c05c                	sw	a5,4(s0)
	uint32_t tune2401 = RFEND_TXCTune(37);
    10ea:	91eff0ef          	jal	208 <RFEND_TXCTune>
    10ee:	842a                	mv	s0,a0
	uint8_t nGA2401 = (uint8_t)(tune2401 >> 24) & 0x7f;
    10f0:	01855a93          	srli	s5,a0,0x18
	uint32_t tune2480 = RFEND_TXCTune(39);
    10f4:	02700513          	li	a0,39
    10f8:	910ff0ef          	jal	208 <RFEND_TXCTune>
    10fc:	8c2a                	mv	s8,a0
	uint8_t nGA2480 = (uint8_t)(tune2480 >> 24) & 0x7f;
    10fe:	01855c93          	srli	s9,a0,0x18
	uint32_t tune2440 = RFEND_TXCTune(18);
    1102:	4549                	li	a0,18
    1104:	904ff0ef          	jal	208 <RFEND_TXCTune>
	uint8_t nCO2440 = (uint8_t)(tune2440 & 0x3f);
    1108:	03f57b93          	andi	s7,a0,63
	uint8_t nGA2440 = (uint8_t)(tune2440 >> 24) & 0x7f;
    110c:	01855993          	srli	s3,a0,0x18
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
    1110:	02800613          	li	a2,40
	uint32_t tune2440 = RFEND_TXCTune(18);
    1114:	892a                	mv	s2,a0
	uint32_t dCO0140 = nCO2401 - nCO2440;
    1116:	03f47413          	andi	s0,s0,63
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
    111a:	4581                	li	a1,0
    111c:	1028                	addi	a0,sp,40
    111e:	348d                	jal	b80 <memset>
	uint32_t dCO0140 = nCO2401 - nCO2440;
    1120:	41740433          	sub	s0,s0,s7
    1124:	03640733          	mul	a4,s0,s6
	uint32_t dCO4080 = nCO2440 - nCO2480;
    1128:	03fc7c13          	andi	s8,s8,63
	uint8_t nGA2401 = (uint8_t)(tune2401 >> 24) & 0x7f;
    112c:	07fafa93          	andi	s5,s5,127
	uint8_t nGA2480 = (uint8_t)(tune2480 >> 24) & 0x7f;
    1130:	07fcfc93          	andi	s9,s9,127
	uint8_t nGA2440 = (uint8_t)(tune2440 >> 24) & 0x7f;
    1134:	07f9f993          	andi	s3,s3,127
	uint32_t dCO4080 = nCO2440 - nCO2480;
    1138:	418b8c33          	sub	s8,s7,s8
	for(int f = 0; f < int_points; f++) {
    113c:	4781                	li	a5,0
		tune = (dCO0140 * (int_points -f)) / int_points;
    113e:	4651                	li	a2,20
		txctune_co[f] = tune | (tune << 4);
    1140:	102c                	addi	a1,sp,40
    1142:	95be                	add	a1,a1,a5
		tune = (dCO0140 * (int_points -f)) / int_points;
    1144:	02c756b3          	divu	a3,a4,a2
	for(int f = 0; f < int_points; f++) {
    1148:	0785                	addi	a5,a5,1
    114a:	8f01                	sub	a4,a4,s0
		txctune_co[f] = tune | (tune << 4);
    114c:	06e2                	slli	a3,a3,0x18
    114e:	86e1                	srai	a3,a3,0x18
    1150:	00469513          	slli	a0,a3,0x4
    1154:	8ec9                	or	a3,a3,a0
    1156:	00d58023          	sb	a3,0(a1)
	for(int f = 0; f < int_points; f++) {
    115a:	fec793e3          	bne	a5,a2,1140 <main+0x2f0>
    115e:	4681                	li	a3,0
		tune = (dCO4080 * (f -int_points)) / int_points;
    1160:	4851                	li	a6,20
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
    1162:	02800613          	li	a2,40
		tune = (dCO4080 * (f -int_points)) / int_points;
    1166:	0306d733          	divu	a4,a3,a6
		txctune_co[f] = tune | (tune << 4);
    116a:	102c                	addi	a1,sp,40
    116c:	95be                	add	a1,a1,a5
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
    116e:	0785                	addi	a5,a5,1
    1170:	96e2                	add	a3,a3,s8
		txctune_co[f] = tune | (tune << 4);
    1172:	0762                	slli	a4,a4,0x18
    1174:	8761                	srai	a4,a4,0x18
    1176:	00471513          	slli	a0,a4,0x4
    117a:	8f49                	or	a4,a4,a0
    117c:	00e58023          	sb	a4,0(a1)
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
    1180:	fec793e3          	bne	a5,a2,1166 <main+0x316>
    1184:	1034                	addi	a3,sp,40
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
    1186:	4701                	li	a4,0
		RF->TXCTUNE_CO[i] = ((uint32_t*)txctune_co)[i];
    1188:	4000d537          	lui	a0,0x4000d
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
    118c:	4629                	li	a2,10
		RF->TXCTUNE_CO[i] = ((uint32_t*)txctune_co)[i];
    118e:	428c                	lw	a1,0(a3)
    1190:	02870793          	addi	a5,a4,40
    1194:	078a                	slli	a5,a5,0x2
    1196:	97aa                	add	a5,a5,a0
    1198:	c38c                	sw	a1,0(a5)
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
    119a:	0705                	addi	a4,a4,1
    119c:	0691                	addi	a3,a3,4
    119e:	fec718e3          	bne	a4,a2,118e <main+0x33e>
	uint32_t dGA0140 = nGA2401 - nGA2440;
    11a2:	413a8ab3          	sub	s5,s5,s3
	uint32_t dGA4080 = nGA2440 - nGA2480;
    11a6:	4695                	li	a3,5
    11a8:	02da86b3          	mul	a3,s5,a3
    11ac:	419989b3          	sub	s3,s3,s9
	uint8_t txctune_ga[sizeof(RF->TXCTUNE_GA)] = {0};
    11b0:	ce02                	sw	zero,28(sp)
    11b2:	d002                	sw	zero,32(sp)
    11b4:	d202                	sw	zero,36(sp)
	for(int f = 1; f < int_points; f++) {
    11b6:	4785                	li	a5,1
		tune = (dGA0140 * (int_points -f)) / int_points;
    11b8:	4619                	li	a2,6
		txctune_ga[f] = tune | (tune << 4);
    11ba:	086c                	addi	a1,sp,28
    11bc:	95be                	add	a1,a1,a5
	for(int f = 1; f < int_points; f++) {
    11be:	0785                	addi	a5,a5,1
		tune = (dGA0140 * (int_points -f)) / int_points;
    11c0:	02c6d733          	divu	a4,a3,a2
	for(int f = 1; f < int_points; f++) {
    11c4:	415686b3          	sub	a3,a3,s5
		txctune_ga[f] = tune | (tune << 4);
    11c8:	0762                	slli	a4,a4,0x18
    11ca:	8761                	srai	a4,a4,0x18
    11cc:	00471513          	slli	a0,a4,0x4
    11d0:	8f49                	or	a4,a4,a0
    11d2:	00e58023          	sb	a4,0(a1)
	for(int f = 1; f < int_points; f++) {
    11d6:	fec792e3          	bne	a5,a2,11ba <main+0x36a>
    11da:	4681                	li	a3,0
		tune = (dGA4080 * (f -int_points)) / int_points;
    11dc:	4819                	li	a6,6
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
    11de:	462d                	li	a2,11
		tune = (dGA4080 * (f -int_points)) / int_points;
    11e0:	0306d733          	divu	a4,a3,a6
		txctune_ga[f] = tune | (tune << 4);
    11e4:	086c                	addi	a1,sp,28
    11e6:	95be                	add	a1,a1,a5
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
    11e8:	0785                	addi	a5,a5,1
    11ea:	96ce                	add	a3,a3,s3
		txctune_ga[f] = tune | (tune << 4);
    11ec:	0762                	slli	a4,a4,0x18
    11ee:	8761                	srai	a4,a4,0x18
    11f0:	00471513          	slli	a0,a4,0x4
    11f4:	8f49                	or	a4,a4,a0
    11f6:	00e58023          	sb	a4,0(a1)
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
    11fa:	fec793e3          	bne	a5,a2,11e0 <main+0x390>
		RF->TXCTUNE_GA[i] = ((uint32_t*)txctune_ga)[i];
    11fe:	46f2                	lw	a3,28(sp)
    1200:	4000d737          	lui	a4,0x4000d
    1204:	08070713          	addi	a4,a4,128 # 4000d080 <_eusrstack+0x20005080>
    1208:	c734                	sw	a3,72(a4)
    120a:	5682                	lw	a3,32(sp)
    120c:	4000d7b7          	lui	a5,0x4000d
	RF->RF10 |= 0x1000;
    1210:	6605                	lui	a2,0x1
		RF->TXCTUNE_GA[i] = ((uint32_t*)txctune_ga)[i];
    1212:	c774                	sw	a3,76(a4)
    1214:	5692                	lw	a3,36(sp)
    1216:	cb34                	sw	a3,80(a4)
	RF->RF1 &= 0xffffffef;
    1218:	43d8                	lw	a4,4(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0x80ffffff) | (tune2440 & 0x7f000000);
    121a:	810006b7          	lui	a3,0x81000
    121e:	16fd                	addi	a3,a3,-1 # 80ffffff <_eusrstack+0x60ff7fff>
	RF->RF1 &= 0xffffffef;
    1220:	9b3d                	andi	a4,a4,-17
    1222:	c3d8                	sw	a4,4(a5)
	RF->RF1 &= 0xfffffffe;
    1224:	43d8                	lw	a4,4(a5)
    1226:	9b79                	andi	a4,a4,-2
    1228:	c3d8                	sw	a4,4(a5)
	RF->RF10 |= 0x1000;
    122a:	5798                	lw	a4,40(a5)
    122c:	8f51                	or	a4,a4,a2
    122e:	d798                	sw	a4,40(a5)
	RF->RF11 |= 0x10;
    1230:	57d8                	lw	a4,44(a5)
    1232:	01076713          	ori	a4,a4,16
    1236:	d7d8                	sw	a4,44(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xffffffc0) | (tune2440 & 0x3f);
    1238:	5f98                	lw	a4,56(a5)
    123a:	fc077713          	andi	a4,a4,-64
    123e:	01776733          	or	a4,a4,s7
    1242:	df98                	sw	a4,56(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0x80ffffff) | (tune2440 & 0x7f000000);
    1244:	5f98                	lw	a4,56(a5)
    1246:	8f75                	and	a4,a4,a3
    1248:	7f0006b7          	lui	a3,0x7f000
    124c:	00d97933          	and	s2,s2,a3
    1250:	01276733          	or	a4,a4,s2
    1254:	df98                	sw	a4,56(a5)
	RF->RF1 |= 0x100;
    1256:	43d8                	lw	a4,4(a5)
	RF->RF20 &= 0xfffeffff;
    1258:	76c1                	lui	a3,0xffff0
    125a:	16fd                	addi	a3,a3,-1 # fffeffff <_eusrstack+0xdffe7fff>
	RF->RF1 |= 0x100;
    125c:	10076713          	ori	a4,a4,256
    1260:	c3d8                	sw	a4,4(a5)
	RF->RF20 &= 0xfffeffff;
    1262:	4bb8                	lw	a4,80(a5)
    1264:	8f75                	and	a4,a4,a3
    1266:	cbb8                	sw	a4,80(a5)
	RF->RF2 |= 0x200000;
    1268:	4798                	lw	a4,8(a5)
    126a:	002006b7          	lui	a3,0x200
    126e:	8f55                	or	a4,a4,a3
    1270:	c798                	sw	a4,8(a5)
	RF->RF3 = (RF->RF3 & 0xffffffef) | 0x10;
    1272:	47d8                	lw	a4,12(a5)
	while(LL->TMR && ((RF->RXTUNE >> 8) & 1));
    1274:	4000d6b7          	lui	a3,0x4000d
	RF->RF3 = (RF->RF3 & 0xffffffef) | 0x10;
    1278:	01076713          	ori	a4,a4,16
    127c:	c7d8                	sw	a4,12(a5)
	RF->RF1 |= 0x1000;
    127e:	43d8                	lw	a4,4(a5)
    1280:	8f51                	or	a4,a4,a2
    1282:	c3d8                	sw	a4,4(a5)
	LL->TMR = 100;
    1284:	4000c7b7          	lui	a5,0x4000c
    1288:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
    128c:	06400713          	li	a4,100
    1290:	d3f8                	sw	a4,100(a5)
	while(LL->TMR && ((RF->RXTUNE >> 8) & 1));
    1292:	53f8                	lw	a4,100(a5)
    1294:	c711                	beqz	a4,12a0 <main+0x450>
    1296:	09c6a703          	lw	a4,156(a3) # 4000d09c <_eusrstack+0x2000509c>
    129a:	10077713          	andi	a4,a4,256
    129e:	fb75                	bnez	a4,1292 <main+0x442>
	tuneFilter = RF->RXTUNE & 0x1f;
    12a0:	4000d737          	lui	a4,0x4000d
    12a4:	08070713          	addi	a4,a4,128 # 4000d080 <_eusrstack+0x20005080>
    12a8:	4f58                	lw	a4,28(a4)
    12aa:	4000d7b7          	lui	a5,0x4000d
    12ae:	8b7d                	andi	a4,a4,31
    12b0:	cce1a623          	sw	a4,-820(gp) # 200000c8 <tuneFilter>
	RF->RF20 |= 0x10000;
    12b4:	4bb8                	lw	a4,80(a5)
    12b6:	6641                	lui	a2,0x10
    12b8:	8f51                	or	a4,a4,a2
    12ba:	cbb8                	sw	a4,80(a5)
	RF->RF20 = (RF->RF20 & 0xffffffe0) | tuneFilter;
    12bc:	4bb8                	lw	a4,80(a5)
    12be:	ccc1a603          	lw	a2,-820(gp) # 200000c8 <tuneFilter>
    12c2:	9b01                	andi	a4,a4,-32
    12c4:	8f51                	or	a4,a4,a2
    12c6:	cbb8                	sw	a4,80(a5)
	RF->RF2 &= 0xffdfffff;
    12c8:	4798                	lw	a4,8(a5)
    12ca:	ffe00637          	lui	a2,0xffe00
    12ce:	167d                	addi	a2,a2,-1 # ffdfffff <_eusrstack+0xdfdf7fff>
    12d0:	8f71                	and	a4,a4,a2
    12d2:	c798                	sw	a4,8(a5)
	tuneFilter2M = (tuneFilter +2 < 0x1f) ? (tuneFilter +2) : 0x1f;
    12d4:	ccc1a703          	lw	a4,-820(gp) # 200000c8 <tuneFilter>
    12d8:	4679                	li	a2,30
    12da:	47fd                	li	a5,31
    12dc:	0709                	addi	a4,a4,2
    12de:	00e66563          	bltu	a2,a4,12e8 <main+0x498>
    12e2:	ccc1a783          	lw	a5,-820(gp) # 200000c8 <tuneFilter>
    12e6:	0789                	addi	a5,a5,2 # 4000d002 <_eusrstack+0x20005002>
    12e8:	ccf1a423          	sw	a5,-824(gp) # 200000c4 <tuneFilter2M>
	RF->RF22 &= 0xfffeffff;
    12ec:	4000d7b7          	lui	a5,0x4000d
    12f0:	4fb8                	lw	a4,88(a5)
    12f2:	76c1                	lui	a3,0xffff0
    12f4:	16fd                	addi	a3,a3,-1 # fffeffff <_eusrstack+0xdffe7fff>
    12f6:	8f75                	and	a4,a4,a3
    12f8:	cfb8                	sw	a4,88(a5)
	RF->RF2 |= 0x10000;
    12fa:	4798                	lw	a4,8(a5)
    12fc:	66c1                	lui	a3,0x10
	DevSetMode(0);
    12fe:	4501                	li	a0,0
	RF->RF2 |= 0x10000;
    1300:	8f55                	or	a4,a4,a3
    1302:	c798                	sw	a4,8(a5)
	RF->RF3 = (RF->RF3 & 0xfffffeff) | 0x100;
    1304:	47d8                	lw	a4,12(a5)
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
    1306:	ffef06b7          	lui	a3,0xffef0
    130a:	16fd                	addi	a3,a3,-1 # ffeeffff <_eusrstack+0xdfee7fff>
	RF->RF3 = (RF->RF3 & 0xfffffeff) | 0x100;
    130c:	10076713          	ori	a4,a4,256
    1310:	c7d8                	sw	a4,12(a5)
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
    1312:	43d8                	lw	a4,4(a5)
	NVIC->IPRIOR[0x15] |= 0x80;
    1314:	e000e437          	lui	s0,0xe000e
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
    1318:	8f75                	and	a4,a4,a3
    131a:	001006b7          	lui	a3,0x100
    131e:	8f55                	or	a4,a4,a3
    1320:	c3d8                	sw	a4,4(a5)
	DevSetMode(0);
    1322:	e9bfe0ef          	jal	1bc <DevSetMode>
	NVIC->IPRIOR[0x15] |= 0x80;
    1326:	41544783          	lbu	a5,1045(s0) # e000e415 <_eusrstack+0xc0006415>
	funGpioInitAll();
	funPinMode(LED, GPIO_CFGLR_OUT_2Mhz_PP);
	funPinMode(INPUT1_PIN, GPIO_CFGLR_IN_PUPD);

	RFCoreInit(LL_TX_POWER_0_DBM);
	printf(".~ ch32fun iSLER ~.\n");
    132a:	6509                	lui	a0,0x2
    132c:	9f450513          	addi	a0,a0,-1548 # 19f4 <LLE_IRQHandler+0xe2>
    1330:	0807e793          	ori	a5,a5,128
    1334:	40f40aa3          	sb	a5,1045(s0)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1338:	002007b7          	lui	a5,0x200
    133c:	10f42023          	sw	a5,256(s0)
    1340:	3c2d                	jal	d7a <puts>
	blink(5);
    1342:	4515                	li	a0,5
    1344:	c60ff0ef          	jal	7a4 <blink>
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
    1348:	40001737          	lui	a4,0x40001
    134c:	0b470713          	addi	a4,a4,180 # 400010b4 <_eusrstack+0x1fff90b4>
    1350:	431c                	lw	a5,0(a4)
    1352:	76f1                	lui	a3,0xffffc
    1354:	16fd                	addi	a3,a3,-1 # ffffbfff <_eusrstack+0xdfff3fff>
    1356:	8ff5                	and	a5,a5,a3
    1358:	c31c                	sw	a5,0(a4)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    |= (pin & ~PB);
    135a:	400017b7          	lui	a5,0x40001
    135e:	0a078793          	addi	a5,a5,160 # 400010a0 <_eusrstack+0x1fff90a0>
    1362:	4394                	lw	a3,0(a5)
    1364:	6611                	lui	a2,0x4
void WS2812BDMAInit( )
{
	// Enable DMA + Peripherals
#ifdef CH5xx
	funPinMode( bMOSI, GPIO_CFGLR_OUT_2Mhz_PP );
	R8_SPI0_CLOCK_DIV = FUNCONF_SYSTEM_CORE_CLOCK / 3000000; // div = Fsys/3MHz
    1366:	45d1                	li	a1,20
    1368:	8ed1                	or	a3,a3,a2
    136a:	c394                	sw	a3,0(a5)
	R8_SPI0_CTRL_MOD = RB_SPI_ALL_CLEAR;
	R8_SPI0_CTRL_MOD = RB_SPI_MOSI_OE | RB_SPI_2WIRE_MOD;
	R16_SPI0_DMA_END = ( (uint32_t)WS2812dmabuff + (DMA_BUFFER_LEN * 2) );
    136c:	15018b93          	addi	s7,gp,336 # 2000054c <WS2812dmabuff>
	R8_SPI0_CLOCK_DIV = FUNCONF_SYSTEM_CORE_CLOCK / 3000000; // div = Fsys/3MHz
    1370:	400046b7          	lui	a3,0x40004
    1374:	00b681a3          	sb	a1,3(a3) # 40004003 <_eusrstack+0x1fffc003>
    1378:	40004637          	lui	a2,0x40004
	R8_SPI0_CTRL_MOD = RB_SPI_ALL_CLEAR;
    137c:	4689                	li	a3,2
	R16_SPI0_DMA_END = ( (uint32_t)WS2812dmabuff + (DMA_BUFFER_LEN * 2) );
    137e:	0bc2                	slli	s7,s7,0x10
	R8_SPI0_CTRL_MOD = RB_SPI_ALL_CLEAR;
    1380:	00d60023          	sb	a3,0(a2) # 40004000 <_eusrstack+0x1fffc000>
	R16_SPI0_DMA_END = ( (uint32_t)WS2812dmabuff + (DMA_BUFFER_LEN * 2) );
    1384:	010bdb93          	srli	s7,s7,0x10
	R8_SPI0_CTRL_MOD = RB_SPI_MOSI_OE | RB_SPI_2WIRE_MOD;
    1388:	04400693          	li	a3,68
    138c:	00d60023          	sb	a3,0(a2)
	R16_SPI0_DMA_END = ( (uint32_t)WS2812dmabuff + (DMA_BUFFER_LEN * 2) );
    1390:	060b8613          	addi	a2,s7,96
    1394:	0642                	slli	a2,a2,0x10
    1396:	8241                	srli	a2,a2,0x10
    1398:	400046b7          	lui	a3,0x40004
    139c:	00c69e23          	sh	a2,28(a3) # 4000401c <_eusrstack+0x1fffc01c>
	R8_SPI0_CTRL_CFG |= RB_SPI_BIT_ORDER;
    13a0:	400046b7          	lui	a3,0x40004
    13a4:	0016c603          	lbu	a2,1(a3) # 40004001 <_eusrstack+0x1fffc001>
	return funDigitalRead(INPUT1_PIN);
    13a8:	40001ab7          	lui	s5,0x40001
    13ac:	02066613          	ori	a2,a2,32
    13b0:	00c680a3          	sb	a2,1(a3)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    13b4:	000806b7          	lui	a3,0x80
    13b8:	10d42023          	sw	a3,256(s0)
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
    13bc:	4314                	lw	a3,0(a4)
    13be:	9abd                	andi	a3,a3,-17
    13c0:	c314                	sw	a3,0(a4)
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     |= (pin & ~PB);
    13c2:	40001737          	lui	a4,0x40001
    13c6:	0b070713          	addi	a4,a4,176 # 400010b0 <_eusrstack+0x1fff90b0>
    13ca:	4314                	lw	a3,0(a4)
   uint32_t release_time;
   uint32_t press_time;
} Button_t;

void _reset_timers(uint8_t newState, Button_t *model) {
   model->btn_state = newState;
    13cc:	498d                	li	s3,3

    WS2812BDMAInit();

	uint32_t sec_time = 0;
    13ce:	4d81                	li	s11,0
    13d0:	0106e693          	ori	a3,a3,16
    13d4:	c314                	sw	a3,0(a4)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
    13d6:	4398                	lw	a4,0(a5)
	};

	button_setup(&button);

	while(1) {
		if (ping_cmd.command == 0xF2 && millis() - delay_send > 200) {
    13d8:	14418413          	addi	s0,gp,324 # 20000540 <ping_cmd>
	dataFrame->data_len = data_len;
    13dc:	c2418913          	addi	s2,gp,-988 # 20000020 <dataFrame>
    13e0:	9b3d                	andi	a4,a4,-17
    13e2:	c398                	sw	a4,0(a5)
   model->debounce_time = millis();
    13e4:	ce81ac83          	lw	s9,-792(gp) # 200000e4 <systick_millis>
   model->release_time = millis();
    13e8:	ce81ab03          	lw	s6,-792(gp) # 200000e4 <systick_millis>
	Button_t button = {
    13ec:	c002                	sw	zero,0(sp)
	return funDigitalRead(INPUT1_PIN);
    13ee:	0a4a8a93          	addi	s5,s5,164 # 400010a4 <_eusrstack+0x1fff90a4>
			ping_cmd.value1 = 0;
			ping_cmd.value2 = 0;
		}

		if (is_slave_device() == 0) {
			leds_frame.is_enabled = 1;
    13f2:	c1018c13          	addi	s8,gp,-1008 # 2000000c <leds_frame>
		if (ping_cmd.command == 0xF2 && millis() - delay_send > 200) {
    13f6:	00044703          	lbu	a4,0(s0)
    13fa:	0f200793          	li	a5,242
    13fe:	06f71b63          	bne	a4,a5,1474 <main+0x624>
    1402:	ce01a703          	lw	a4,-800(gp) # 200000dc <delay_send>
    1406:	ce81a783          	lw	a5,-792(gp) # 200000e4 <systick_millis>
    140a:	8f99                	sub	a5,a5,a4
    140c:	0c800713          	li	a4,200
    1410:	06f77263          	bgeu	a4,a5,1474 <main+0x624>
			blink(1);
    1414:	4505                	li	a0,1
    1416:	b8eff0ef          	jal	7a4 <blink>
			printf("Sending value1: %u, value2: %u\n", ping_cmd.value1, ping_cmd.value2);
    141a:	405c                	lw	a5,4(s0)
    141c:	00844703          	lbu	a4,8(s0)
    1420:	400c                	lw	a1,0(s0)
    1422:	0087d613          	srli	a2,a5,0x8
    1426:	0762                	slli	a4,a4,0x18
    1428:	07e2                	slli	a5,a5,0x18
    142a:	81a1                	srli	a1,a1,0x8
    142c:	6509                	lui	a0,0x2
    142e:	8e59                	or	a2,a2,a4
    1430:	8ddd                	or	a1,a1,a5
    1432:	a0850513          	addi	a0,a0,-1528 # 1a08 <LLE_IRQHandler+0xf6>
    1436:	f22ff0ef          	jal	b58 <printf>
    143a:	47a5                	li	a5,9
    143c:	00f906a3          	sb	a5,13(s2)
	memcpy(dataFrame->payload, cmd, data_len);
    1440:	4625                	li	a2,9
    1442:	85a2                	mv	a1,s0
    1444:	c3218513          	addi	a0,gp,-974 # 2000002e <dataFrame+0xe>
    1448:	f4aff0ef          	jal	b92 <memcpy>
			modiSLER_adv_data(&dataFrame);
    144c:	f62ff0ef          	jal	bae <modiSLER_adv_data.constprop.0>
			ping_cmd.command = 0;
    1450:	00040023          	sb	zero,0(s0)
			ping_cmd.value1 = 0;
    1454:	000400a3          	sb	zero,1(s0)
    1458:	00040123          	sb	zero,2(s0)
    145c:	000401a3          	sb	zero,3(s0)
    1460:	00040223          	sb	zero,4(s0)
			ping_cmd.value2 = 0;
    1464:	000402a3          	sb	zero,5(s0)
    1468:	00040323          	sb	zero,6(s0)
    146c:	000403a3          	sb	zero,7(s0)
    1470:	00040423          	sb	zero,8(s0)
	return funDigitalRead(INPUT1_PIN);
    1474:	000aa783          	lw	a5,0(s5)
		if (is_slave_device() == 0) {
    1478:	4007f793          	andi	a5,a5,1024
    147c:	ebb5                	bnez	a5,14f0 <main+0x6a0>
	uint32_t now = millis();
    147e:	ce81ad03          	lw	s10,-792(gp) # 200000e4 <systick_millis>
			leds_frame.is_enabled = 1;
    1482:	4785                	li	a5,1
    1484:	00fc05a3          	sb	a5,11(s8)
	if (now - *ref_time > duration) {
    1488:	6785                	lui	a5,0x1
    148a:	41bd06b3          	sub	a3,s10,s11
    148e:	bb878793          	addi	a5,a5,-1096 # bb8 <modiSLER_adv_data.constprop.0+0xa>
    1492:	04d7ff63          	bgeu	a5,a3,14f0 <main+0x6a0>

			if (systick_handleTimeout(&sec_time, 3000)) {
				blink(1);
    1496:	4505                	li	a0,1
    1498:	b0cff0ef          	jal	7a4 <blink>
				// stepper32_tick(&command_step, 1);
				// printf("Sending value: %08X\n", remote_cmd1.value1);

				remote_command_t remote_cmd1 = {
					.command = 0xF1,
					.value1 = counter++,
    149c:	cdc1a783          	lw	a5,-804(gp) # 200000d8 <counter>
    14a0:	01a909a3          	sb	s10,19(s2)
		*ref_time = now;
    14a4:	8dea                	mv	s11,s10
    14a6:	00178613          	addi	a2,a5,1
    14aa:	ccc1ae23          	sw	a2,-804(gp) # 200000d8 <counter>
	dataFrame->data_len = data_len;
    14ae:	46a5                	li	a3,9
    14b0:	00d906a3          	sb	a3,13(s2)
	memcpy(dataFrame->payload, cmd, data_len);
    14b4:	56c5                	li	a3,-15
    14b6:	00d90723          	sb	a3,14(s2)
    14ba:	0087d693          	srli	a3,a5,0x8
    14be:	00f907a3          	sb	a5,15(s2)
    14c2:	00d90823          	sb	a3,16(s2)
    14c6:	0107d693          	srli	a3,a5,0x10
    14ca:	83e1                	srli	a5,a5,0x18
    14cc:	00f90923          	sb	a5,18(s2)
    14d0:	008d5793          	srli	a5,s10,0x8
    14d4:	00f90a23          	sb	a5,20(s2)
    14d8:	010d5793          	srli	a5,s10,0x10
    14dc:	00f90aa3          	sb	a5,21(s2)
    14e0:	018d5793          	srli	a5,s10,0x18
    14e4:	00d908a3          	sb	a3,17(s2)
    14e8:	00f90b23          	sb	a5,22(s2)
				};
				// printf("[Master] Sending value1: %u, value2: %u\n", 
				// 	remote_cmd1.value1, remote_cmd1.value2);

				modiSLER_loadCommand(&dataFrame, &remote_cmd1, sizeof(remote_cmd1));
				modiSLER_adv_data(&dataFrame);
    14ec:	ec2ff0ef          	jal	bae <modiSLER_adv_data.constprop.0>
			}
		}
		
		handle_receiving_frame(millis());
    14f0:	ce81a783          	lw	a5,-792(gp) # 200000e4 <systick_millis>
	}
}

void Frame_RX(uint8_t frame_info[], uint8_t channel, uint8_t phy_mode) {
	DevSetMode(0);
    14f4:	4501                	li	a0,0
    14f6:	8d3e                	mv	s10,a5
    14f8:	cc5fe0ef          	jal	1bc <DevSetMode>
	if(LL->LL0 & 3) {
    14fc:	4000c7b7          	lui	a5,0x4000c
    1500:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
    1504:	4398                	lw	a4,0(a5)
    1506:	8b0d                	andi	a4,a4,3
    1508:	cb01                	beqz	a4,1518 <main+0x6c8>
		LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    150a:	4bb8                	lw	a4,80(a5)
    150c:	9b61                	andi	a4,a4,-8
    150e:	cbb8                	sw	a4,80(a5)
		LL->LL0 |= 0x08;
    1510:	4398                	lw	a4,0(a5)
    1512:	00876713          	ori	a4,a4,8
    1516:	c398                	sw	a4,0(a5)
	}
	LL->TMR = 0;
    1518:	4000c6b7          	lui	a3,0x4000c
    151c:	20068693          	addi	a3,a3,512 # 4000c200 <_eusrstack+0x20004200>
    1520:	0606a223          	sw	zero,100(a3)
	RF->RF11 &= 0xfffffffd;
    1524:	4000d737          	lui	a4,0x4000d
    1528:	575c                	lw	a5,44(a4)
	LL->TMR = 0;
    152a:	c436                	sw	a3,8(sp)

	DevSetChannel(channel);
	DevSetMode(DEVSETMODE_RX);
    152c:	0d900513          	li	a0,217
	RF->RF11 &= 0xfffffffd;
    1530:	9bf5                	andi	a5,a5,-3
    1532:	d75c                	sw	a5,44(a4)
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
    1534:	4000c7b7          	lui	a5,0x4000c
    1538:	10078793          	addi	a5,a5,256 # 4000c100 <_eusrstack+0x20004100>
    153c:	4398                	lw	a4,0(a5)
    153e:	f8077713          	andi	a4,a4,-128
    1542:	02576713          	ori	a4,a4,37
    1546:	c398                	sw	a4,0(a5)
    1548:	c23e                	sw	a5,4(sp)
	DevSetMode(DEVSETMODE_RX);
    154a:	c73fe0ef          	jal	1bc <DevSetMode>

#if defined(CH582_CH583) || defined(CH32V208)
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
				   (phy_mode == PHY_S2) ? CTRL_CFG_PHY_CODED:
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
										  CTRL_CFG_PHY_1M; // default 1M for now
    154e:	4792                	lw	a5,4(sp)
    1550:	7645                	lui	a2,0xffff1
    1552:	167d                	addi	a2,a2,-1 # ffff0fff <_eusrstack+0xdffe8fff>
    1554:	4398                	lw	a4,0(a5)
#endif

	//LL->LL1 = (LL->LL1 & 0xfffffffe) | 1; // 1: AUTO mode, to swap between RX <-> TX when either happened. 0: BASIC
	//LL->FRAME_BUF = (uint32_t)frame_info; // also this only in AUTO mode

	LL->LL0 = 1; // Not sure what this does, but on TX it's 2
    1556:	46a2                	lw	a3,8(sp)
										  CTRL_CFG_PHY_1M; // default 1M for now
    1558:	8f71                	and	a4,a4,a2
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
    155a:	6605                	lui	a2,0x1
    155c:	8f51                	or	a4,a4,a2
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
    155e:	c398                	sw	a4,0(a5)
	BB->BB4 = (phy_mode < PHY_S2) ? 0x3722d0 : 0x3722df;
    1560:	00372737          	lui	a4,0x372
    1564:	2d070713          	addi	a4,a4,720 # 3722d0 <iSLER_mess.c.a723f200+0x36f236>
    1568:	cb98                	sw	a4,16(a5)
	BB->BB5 = (phy_mode < PHY_S2) ? 0x8101901 : 0x8301ff1;
    156a:	08102737          	lui	a4,0x8102
    156e:	90170713          	addi	a4,a4,-1791 # 8101901 <iSLER_mess.c.a723f200+0x80fe867>
    1572:	cbd8                	sw	a4,20(a5)
	BB->BB6 = (phy_mode < PHY_S2) ? 0x31624 : 0x31619;
    1574:	00031737          	lui	a4,0x31
    1578:	62470713          	addi	a4,a4,1572 # 31624 <iSLER_mess.c.a723f200+0x2e58a>
    157c:	cf98                	sw	a4,24(a5)
	BB->BB8 = (phy_mode < PHY_S2) ? 0x90083 : 0x90086;
    157e:	00090737          	lui	a4,0x90
    1582:	08370713          	addi	a4,a4,131 # 90083 <iSLER_mess.c.a723f200+0x8cfe9>
    1586:	d398                	sw	a4,32(a5)
	BB->BB9 = 0x1006310;
    1588:	01006737          	lui	a4,0x1006
    158c:	31070713          	addi	a4,a4,784 # 1006310 <iSLER_mess.c.a723f200+0x1003276>
    1590:	d3d8                	sw	a4,36(a5)
	BB->BB10 = (phy_mode < PHY_S2) ? 0x28be : 0x28de;
    1592:	670d                	lui	a4,0x3
    1594:	8be70713          	addi	a4,a4,-1858 # 28be <ch32fun.c.3cf7314a+0x605>
    1598:	d798                	sw	a4,40(a5)
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
    159a:	8e89c737          	lui	a4,0x8e89c
    159e:	ed670713          	addi	a4,a4,-298 # 8e89bed6 <_eusrstack+0x6e893ed6>
    15a2:	c798                	sw	a4,8(a5)
	BB->CRCINIT1 = 0x555555; // crc init
    15a4:	00555737          	lui	a4,0x555
    15a8:	55570713          	addi	a4,a4,1365 # 555555 <iSLER_mess.c.a723f200+0x5524bb>
    15ac:	c3d8                	sw	a4,4(a5)
	LL->LL0 = 1; // Not sure what this does, but on TX it's 2
    15ae:	4785                	li	a5,1
    15b0:	c29c                	sw	a5,0(a3)
	rx_ready = 0;
    15b2:	ce01a223          	sw	zero,-796(gp) # 200000e0 <rx_ready>
	while(!rx_ready);
    15b6:	ce41a703          	lw	a4,-796(gp) # 200000e0 <rx_ready>
    15ba:	df75                	beqz	a4,15b6 <main+0x766>

remote_command_t* modiSLER_rx_handler() {
	// The chip stores the incoming frame in LLE_BUF, defined in extralibs/iSLER.h
	uint8_t *frame = (uint8_t*)LLE_BUF;
	iSLER_frame_t* rx_frame = (iSLER_frame_t*)(frame + 2);
	uint8_t target_mac[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };
    15bc:	443327b7          	lui	a5,0x44332
    15c0:	21178793          	addi	a5,a5,529 # 44332211 <_eusrstack+0x2432a211>
    15c4:	d43e                	sw	a5,40(sp)
    15c6:	6799                	lui	a5,0x6
    15c8:	65578793          	addi	a5,a5,1621 # 6655 <iSLER_mess.c.a723f200+0x35bb>

	if (memcmp(rx_frame->mac, target_mac, 6) == 0) {
    15cc:	4619                	li	a2,6
    15ce:	102c                	addi	a1,sp,40
    15d0:	cee18513          	addi	a0,gp,-786 # 200000ea <LLE_BUF+0x2>
	uint8_t target_mac[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };
    15d4:	02f11623          	sh	a5,44(sp)
	if (memcmp(rx_frame->mac, target_mac, 6) == 0) {
    15d8:	f82ff0ef          	jal	d5a <memcmp>
    15dc:	10051163          	bnez	a0,16de <main+0x88e>
		blink(1);
    15e0:	4505                	li	a0,1
    15e2:	9c2ff0ef          	jal	7a4 <blink>
		switch (cmd->command) {
    15e6:	033a4783          	lbu	a5,51(s4)
    15ea:	0f100713          	li	a4,241
    15ee:	12e78363          	beq	a5,a4,1714 <main+0x8c4>
    15f2:	0f200713          	li	a4,242
    15f6:	16e78a63          	beq	a5,a4,176a <main+0x91a>
    15fa:	0bb00713          	li	a4,187
    15fe:	0ee79063          	bne	a5,a4,16de <main+0x88e>
	return funDigitalRead(INPUT1_PIN);
    1602:	000aa783          	lw	a5,0(s5)
				if (is_slave_device() > 0) {
    1606:	4007f793          	andi	a5,a5,1024
    160a:	cbf1                	beqz	a5,16de <main+0x88e>
					Neo_loadCommand(cmd->value1);
    160c:	034a2783          	lw	a5,52(s4)
    printf("Neo_loadCommand: %02X\n", cmd);
    1610:	6509                	lui	a0,0x2
    1612:	a2850513          	addi	a0,a0,-1496 # 1a28 <LLE_IRQHandler+0x116>
    1616:	0ff7f593          	zext.b	a1,a5
    161a:	c23e                	sw	a5,4(sp)
    161c:	d3cff0ef          	jal	b58 <printf>
    1620:	4792                	lw	a5,4(sp)
    1622:	caf18e23          	sb	a5,-836(gp) # 200000b8 <Neo_LedCmd>
    leds_frame.ref_time = millis();
    1626:	ce81a783          	lw	a5,-792(gp) # 200000e4 <systick_millis>
    leds_frame.is_enabled = 1;
    162a:	4705                	li	a4,1
    ARRAY_SET_VALUE(led_arr, 0);
    162c:	4661                	li	a2,24
    leds_frame.ref_time = millis();
    162e:	00fc2823          	sw	a5,16(s8)
    ARRAY_SET_VALUE(led_arr, 0);
    1632:	4581                	li	a1,0
    1634:	12c18513          	addi	a0,gp,300 # 20000528 <led_arr>
    leds_frame.is_enabled = 1;
    1638:	00ec05a3          	sb	a4,11(s8)
    leds_frame.ref_index = 0;
    163c:	000c0723          	sb	zero,14(s8)
    color_ani.ref_index = 0;
    1640:	ca018ca3          	sb	zero,-839(gp) # 200000b5 <color_ani+0x5>
    ARRAY_SET_VALUE(led_arr, 0);
    1644:	d3cff0ef          	jal	b80 <memset>
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
    1648:	300027f3          	csrr	a5,mstatus
	result &= ~0x88; __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
    164c:	f777f793          	andi	a5,a5,-137
    1650:	30079073          	csrw	mstatus,a5
	WS2812BLEDInUse = 1;
    1654:	4705                	li	a4,1
    1656:	cce1ac23          	sw	a4,-808(gp) # 200000d4 <WS2812BLEDInUse>
	R8_SPI0_INTER_EN &= ~RB_SPI_IE_DMA_END;
    165a:	40004737          	lui	a4,0x40004
    165e:	00274783          	lbu	a5,2(a4) # 40004002 <_eusrstack+0x1fffc002>
    1662:	0709                	addi	a4,a4,2
    1664:	0f77f793          	andi	a5,a5,247
    1668:	00f70023          	sb	a5,0(a4)
    166c:	c63a                	sw	a4,12(sp)
	R8_SPI0_CTRL_CFG &= ~RB_SPI_DMA_ENABLE;
    166e:	400047b7          	lui	a5,0x40004
    1672:	0017c683          	lbu	a3,1(a5) # 40004001 <_eusrstack+0x1fffc001>
    1676:	0785                	addi	a5,a5,1
    1678:	0fe6f693          	andi	a3,a3,254
    167c:	00d78023          	sb	a3,0(a5)
    1680:	c43e                	sw	a5,8(sp)
	R16_SPI0_TOTAL_CNT = 0;
    1682:	400046b7          	lui	a3,0x40004
    1686:	00069623          	sh	zero,12(a3) # 4000400c <_eusrstack+0x1fffc00c>
    168a:	06b1                	addi	a3,a3,12
    168c:	c236                	sw	a3,4(sp)
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
    168e:	30002673          	csrr	a2,mstatus
	result |= 0x88;  __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
    1692:	08866613          	ori	a2,a2,136
    1696:	30061073          	csrw	mstatus,a2
	WS2812LEDs = leds;
    169a:	4599                	li	a1,6
    169c:	ccb1aa23          	sw	a1,-812(gp) # 200000d0 <WS2812LEDs>
	WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 0 );
    16a0:	4501                	li	a0,0
	WS2812LEDPlace = -WS2812B_RESET_PERIOD;
    16a2:	55f9                	li	a1,-2
    16a4:	ccb1a823          	sw	a1,-816(gp) # 200000cc <WS2812LEDPlace>
	WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 0 );
    16a8:	cd9fe0ef          	jal	380 <WS2812FillBuffSec.constprop.0>
	R16_SPI0_TOTAL_CNT = DMA_BUFFER_LEN * 2;
    16ac:	4692                	lw	a3,4(sp)
    16ae:	06000613          	li	a2,96
    16b2:	00c69023          	sh	a2,0(a3)
	R16_SPI0_DMA_BEG = (uint32_t)WS2812dmabuff;
    16b6:	400046b7          	lui	a3,0x40004
    16ba:	01769c23          	sh	s7,24(a3) # 40004018 <_eusrstack+0x1fffc018>
	R8_SPI0_INT_FLAG = RB_SPI_IF_CNT_END | RB_SPI_IF_DMA_END;
    16be:	4625                	li	a2,9
    16c0:	400046b7          	lui	a3,0x40004
    16c4:	00c68323          	sb	a2,6(a3) # 40004006 <_eusrstack+0x1fffc006>
	R8_SPI0_INTER_EN = RB_SPI_IE_DMA_END;
    16c8:	4732                	lw	a4,12(sp)
    16ca:	46a1                	li	a3,8
    16cc:	00d70023          	sb	a3,0(a4)
	R8_SPI0_CTRL_CFG |= RB_SPI_DMA_ENABLE;
    16d0:	47a2                	lw	a5,8(sp)
    16d2:	0007c703          	lbu	a4,0(a5)
    16d6:	00176713          	ori	a4,a4,1
    16da:	00e78023          	sb	a4,0(a5)
}

void button_task(Button_t *model, void (*handler)(Button_Event_e, uint32_t)) {
   if (model->pin == 0xFF) return;
   
   uint32_t now = millis();
    16de:	ce81a783          	lw	a5,-792(gp) # 200000e4 <systick_millis>
   uint8_t read = funDigitalRead(model->pin);
    16e2:	000aa703          	lw	a4,0(s5)

   // Debounce check
   if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    16e6:	46cd                	li	a3,19
    16e8:	41978633          	sub	a2,a5,s9
    16ec:	02c6f163          	bgeu	a3,a2,170e <main+0x8be>
   model->debounce_time = now;

   switch (model->btn_state) {
    16f0:	4689                	li	a3,2
   uint8_t read = funDigitalRead(model->pin);
    16f2:	8b41                	andi	a4,a4,16
   switch (model->btn_state) {
    16f4:	14d98263          	beq	s3,a3,1838 <main+0x9e8>
    16f8:	0936e863          	bltu	a3,s3,1788 <main+0x938>
    16fc:	0c099263          	bnez	s3,17c0 <main+0x970>
            _reset_timers(BTN_DOWN, model);      // First Press  
         }
         break;

      case BTN_DOWN:
         if (read > 0) {
    1700:	c345                	beqz	a4,17a0 <main+0x950>
   model->debounce_time = millis();
    1702:	ce81a783          	lw	a5,-792(gp) # 200000e4 <systick_millis>
   model->btn_state = newState;
    1706:	4985                	li	s3,1
   model->release_time = millis();
    1708:	ce81ab03          	lw	s6,-792(gp) # 200000e4 <systick_millis>
}
    170c:	a011                	j	1710 <main+0x8c0>
    170e:	87e6                	mv	a5,s9
   model->btn_state = newState;
    1710:	8cbe                	mv	s9,a5
    1712:	b1d5                	j	13f6 <main+0x5a6>
	return funDigitalRead(INPUT1_PIN);
    1714:	000aa783          	lw	a5,0(s5)
				if (is_slave_device() > 0) {
    1718:	4007f793          	andi	a5,a5,1024
    171c:	d3e9                	beqz	a5,16de <main+0x88e>
					ping_cmd.command = 0xF2;
    171e:	57c9                	li	a5,-14
    1720:	00f40023          	sb	a5,0(s0)
					ping_cmd.value1 = cmd->value1;
    1724:	034a2783          	lw	a5,52(s4)
    1728:	0087d713          	srli	a4,a5,0x8
    172c:	00f400a3          	sb	a5,1(s0)
    1730:	00e40123          	sb	a4,2(s0)
    1734:	0107d713          	srli	a4,a5,0x10
    1738:	83e1                	srli	a5,a5,0x18
    173a:	00f40223          	sb	a5,4(s0)
					ping_cmd.value2 = cmd->value2;
    173e:	038a2783          	lw	a5,56(s4)
					ping_cmd.value1 = cmd->value1;
    1742:	00e401a3          	sb	a4,3(s0)
					ping_cmd.value2 = cmd->value2;
    1746:	0087d713          	srli	a4,a5,0x8
    174a:	00e40323          	sb	a4,6(s0)
    174e:	0107d713          	srli	a4,a5,0x10
    1752:	00e403a3          	sb	a4,7(s0)
					delay_send = millis();
    1756:	ce81a703          	lw	a4,-792(gp) # 200000e4 <systick_millis>
					ping_cmd.value2 = cmd->value2;
    175a:	00f402a3          	sb	a5,5(s0)
    175e:	83e1                	srli	a5,a5,0x18
    1760:	00f40423          	sb	a5,8(s0)
					delay_send = millis();
    1764:	cee1a023          	sw	a4,-800(gp) # 200000dc <delay_send>
    1768:	bf9d                	j	16de <main+0x88e>
	return funDigitalRead(INPUT1_PIN);
    176a:	000aa783          	lw	a5,0(s5)
				if (is_slave_device() == 0) {
    176e:	4007f793          	andi	a5,a5,1024
    1772:	f7b5                	bnez	a5,16de <main+0x88e>
					printf("time_diff: %d\n", time - cmd->value2);
    1774:	038a2583          	lw	a1,56(s4)
    1778:	6509                	lui	a0,0x2
    177a:	a4450513          	addi	a0,a0,-1468 # 1a44 <LLE_IRQHandler+0x132>
    177e:	40bd05b3          	sub	a1,s10,a1
    1782:	bd6ff0ef          	jal	b58 <printf>
    1786:	bfa1                	j	16de <main+0x88e>
   switch (model->btn_state) {
    1788:	468d                	li	a3,3
    178a:	f8d993e3          	bne	s3,a3,1710 <main+0x8c0>
         if (read < 1) {
    178e:	f349                	bnez	a4,1710 <main+0x8c0>
   model->debounce_time = millis();
    1790:	ce81a703          	lw	a4,-792(gp) # 200000e4 <systick_millis>
   model->release_time = millis();
    1794:	ce81ab03          	lw	s6,-792(gp) # 200000e4 <systick_millis>
            model->press_time = now;
    1798:	c03e                	sw	a5,0(sp)
   model->debounce_time = millis();
    179a:	87ba                	mv	a5,a4
   model->btn_state = newState;
    179c:	4981                	li	s3,0
    179e:	bf8d                	j	1710 <main+0x8c0>
            _reset_timers(BTN_UP, model);        // First Release

         } else {
            // Long press detection
            uint32_t press_duration = now - model->press_time;
    17a0:	4702                	lw	a4,0(sp)
    17a2:	40e786b3          	sub	a3,a5,a4
            if (press_duration > TICK_LONG_PRESS_DUR) {
    17a6:	6705                	lui	a4,0x1
    17a8:	fa070713          	addi	a4,a4,-96 # fa0 <main+0x150>
    17ac:	fed778e3          	bgeu	a4,a3,179c <main+0x94c>
			printf("Long Press\n"); break;
    17b0:	6509                	lui	a0,0x2
    17b2:	a5450513          	addi	a0,a0,-1452 # 1a54 <LLE_IRQHandler+0x142>
    17b6:	c23e                	sw	a5,4(sp)
    17b8:	dc2ff0ef          	jal	d7a <puts>
}
    17bc:	4792                	lw	a5,4(sp)
    17be:	bff9                	j	179c <main+0x94c>
            }
         }
         break;

      case BTN_UP: {
         uint32_t release_duration = now - model->release_time;
    17c0:	416786b3          	sub	a3,a5,s6

         if (read < 1 && release_duration < TICK_CLICK_DUR) {
    17c4:	eb19                	bnez	a4,17da <main+0x98a>
    17c6:	09f00713          	li	a4,159
    17ca:	00d76863          	bltu	a4,a3,17da <main+0x98a>
   model->debounce_time = millis();
    17ce:	ce81a783          	lw	a5,-792(gp) # 200000e4 <systick_millis>
   model->btn_state = newState;
    17d2:	4989                	li	s3,2
   model->release_time = millis();
    17d4:	ce81ab03          	lw	s6,-792(gp) # 200000e4 <systick_millis>
}
    17d8:	bf25                	j	1710 <main+0x8c0>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

         } else if (release_duration > TICK_CLICK_DUR) {
    17da:	0a000713          	li	a4,160
    17de:	4985                	li	s3,1
    17e0:	f2d778e3          	bgeu	a4,a3,1710 <main+0x8c0>
			printf("Single Click\n");
    17e4:	6509                	lui	a0,0x2
	remote_command_t button_cmd = {
    17e6:	020106a3          	sb	zero,45(sp)
    17ea:	02010723          	sb	zero,46(sp)
    17ee:	020107a3          	sb	zero,47(sp)
    17f2:	02010823          	sb	zero,48(sp)
			printf("Single Click\n");
    17f6:	a6050513          	addi	a0,a0,-1440 # 1a60 <LLE_IRQHandler+0x14e>
			printf("Double Click\n");
    17fa:	d80ff0ef          	jal	d7a <puts>
	dataFrame->data_len = data_len;
    17fe:	47a5                	li	a5,9
    1800:	00f906a3          	sb	a5,13(s2)
	memcpy(dataFrame->payload, cmd, data_len);
    1804:	faa00793          	li	a5,-86
    1808:	02f10423          	sb	a5,40(sp)
    180c:	c3218513          	addi	a0,gp,-974 # 2000002e <dataFrame+0xe>
    1810:	4625                	li	a2,9
    1812:	102c                	addi	a1,sp,40
    1814:	033104a3          	sb	s3,41(sp)
    1818:	02010523          	sb	zero,42(sp)
    181c:	020105a3          	sb	zero,43(sp)
    1820:	02010623          	sb	zero,44(sp)
    1824:	b6eff0ef          	jal	b92 <memcpy>
			modiSLER_adv_data(&dataFrame);
    1828:	b86ff0ef          	jal	bae <modiSLER_adv_data.constprop.0>
   model->debounce_time = millis();
    182c:	ce81a783          	lw	a5,-792(gp) # 200000e4 <systick_millis>
   model->btn_state = newState;
    1830:	498d                	li	s3,3
   model->release_time = millis();
    1832:	ce81ab03          	lw	s6,-792(gp) # 200000e4 <systick_millis>
}
    1836:	bde9                	j	1710 <main+0x8c0>
         break;
      }

      case BTN_DOWN2:
         // Second release
         if (read > 0) {
    1838:	ec070ce3          	beqz	a4,1710 <main+0x8c0>
			printf("Double Click\n");
    183c:	6509                	lui	a0,0x2
	remote_command_t button_cmd = {
    183e:	020106a3          	sb	zero,45(sp)
    1842:	02010723          	sb	zero,46(sp)
    1846:	020107a3          	sb	zero,47(sp)
    184a:	02010823          	sb	zero,48(sp)
			printf("Double Click\n");
    184e:	a7050513          	addi	a0,a0,-1424 # 1a70 <LLE_IRQHandler+0x15e>
    1852:	b765                	j	17fa <main+0x9aa>

00001854 <SysTick_Handler>:
{
    1854:	1101                	addi	sp,sp,-32
    1856:	c63a                	sw	a4,12(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1858:	e000f737          	lui	a4,0xe000f
{
    185c:	c242                	sw	a6,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    185e:	01072803          	lw	a6,16(a4) # e000f010 <_eusrstack+0xc0007010>
{
    1862:	c43e                	sw	a5,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1864:	67bd                	lui	a5,0xf
{
    1866:	c046                	sw	a7,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1868:	a6078793          	addi	a5,a5,-1440 # ea60 <iSLER_mess.c.a723f200+0xb9c6>
    186c:	01472883          	lw	a7,20(a4)
    1870:	97c2                	add	a5,a5,a6
{
    1872:	ce2a                	sw	a0,28(sp)
    1874:	c836                	sw	a3,16(sp)
    1876:	cc2e                	sw	a1,24(sp)
    1878:	ca32                	sw	a2,20(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    187a:	0107b533          	sltu	a0,a5,a6
    187e:	cb1c                	sw	a5,16(a4)
    1880:	011506b3          	add	a3,a0,a7
    1884:	cb54                	sw	a3,20(a4)
	SysTick->SR = 0x00000000;
    1886:	00072223          	sw	zero,4(a4)
	systick_millis++;
    188a:	ce81a783          	lw	a5,-792(gp) # 200000e4 <systick_millis>
}
    188e:	4572                	lw	a0,28(sp)
    1890:	45e2                	lw	a1,24(sp)
	systick_millis++;
    1892:	0785                	addi	a5,a5,1
    1894:	cef1a423          	sw	a5,-792(gp) # 200000e4 <systick_millis>
}
    1898:	4652                	lw	a2,20(sp)
    189a:	46c2                	lw	a3,16(sp)
    189c:	4732                	lw	a4,12(sp)
    189e:	47a2                	lw	a5,8(sp)
    18a0:	4812                	lw	a6,4(sp)
    18a2:	4882                	lw	a7,0(sp)
    18a4:	6105                	addi	sp,sp,32
    18a6:	30200073          	mret

000018aa <SPI0_IRQHandler>:
{
    18aa:	7139                	addi	sp,sp,-64
    18ac:	cc3e                	sw	a5,24(sp)
	uint8_t intf = R8_SPI0_INT_FLAG;
    18ae:	400047b7          	lui	a5,0x40004
{
    18b2:	de06                	sw	ra,60(sp)
    18b4:	dc16                	sw	t0,56(sp)
    18b6:	da1a                	sw	t1,52(sp)
    18b8:	d81e                	sw	t2,48(sp)
    18ba:	d62a                	sw	a0,44(sp)
    18bc:	d42e                	sw	a1,40(sp)
    18be:	d232                	sw	a2,36(sp)
    18c0:	d036                	sw	a3,32(sp)
    18c2:	ce3a                	sw	a4,28(sp)
    18c4:	ca42                	sw	a6,20(sp)
    18c6:	c846                	sw	a7,16(sp)
    18c8:	c672                	sw	t3,12(sp)
    18ca:	c476                	sw	t4,8(sp)
    18cc:	c27a                	sw	t5,4(sp)
    18ce:	c07e                	sw	t6,0(sp)
	uint8_t intf = R8_SPI0_INT_FLAG;
    18d0:	0799                	addi	a5,a5,6 # 40004006 <_eusrstack+0x1fffc006>
    18d2:	0007c783          	lbu	a5,0(a5)
	if( (intf & RB_SPI_IF_DMA_END) )
    18d6:	8ba1                	andi	a5,a5,8
    18d8:	cb91                	beqz	a5,18ec <SPI0_IRQHandler+0x42>
		WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 1 );
    18da:	4505                	li	a0,1
    18dc:	aa5fe0ef          	jal	380 <WS2812FillBuffSec.constprop.0>
		R16_SPI0_TOTAL_CNT = DMA_BUFFER_LEN * 2;
    18e0:	400047b7          	lui	a5,0x40004
    18e4:	06000713          	li	a4,96
    18e8:	00e79623          	sh	a4,12(a5) # 4000400c <_eusrstack+0x1fffc00c>
}
    18ec:	50f2                	lw	ra,60(sp)
    18ee:	52e2                	lw	t0,56(sp)
    18f0:	5352                	lw	t1,52(sp)
    18f2:	53c2                	lw	t2,48(sp)
    18f4:	5532                	lw	a0,44(sp)
    18f6:	55a2                	lw	a1,40(sp)
    18f8:	5612                	lw	a2,36(sp)
    18fa:	5682                	lw	a3,32(sp)
    18fc:	4772                	lw	a4,28(sp)
    18fe:	47e2                	lw	a5,24(sp)
    1900:	4852                	lw	a6,20(sp)
    1902:	48c2                	lw	a7,16(sp)
    1904:	4e32                	lw	t3,12(sp)
    1906:	4ea2                	lw	t4,8(sp)
    1908:	4f12                	lw	t5,4(sp)
    190a:	4f82                	lw	t6,0(sp)
    190c:	6121                	addi	sp,sp,64
    190e:	30200073          	mret

00001912 <LLE_IRQHandler>:
void LLE_IRQHandler() {
    1912:	7139                	addi	sp,sp,-64
    1914:	cc3e                	sw	a5,24(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    1916:	4000c7b7          	lui	a5,0x4000c
    191a:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
void LLE_IRQHandler() {
    191e:	ce3a                	sw	a4,28(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    1920:	4798                	lw	a4,8(a5)
void LLE_IRQHandler() {
    1922:	d036                	sw	a3,32(sp)
    1924:	de06                	sw	ra,60(sp)
    1926:	dc16                	sw	t0,56(sp)
    1928:	da1a                	sw	t1,52(sp)
    192a:	d81e                	sw	t2,48(sp)
    192c:	d62a                	sw	a0,44(sp)
    192e:	d42e                	sw	a1,40(sp)
    1930:	d232                	sw	a2,36(sp)
    1932:	ca42                	sw	a6,20(sp)
    1934:	c846                	sw	a7,16(sp)
    1936:	c672                	sw	t3,12(sp)
    1938:	c476                	sw	t4,8(sp)
    193a:	c27a                	sw	t5,4(sp)
    193c:	c07e                	sw	t6,0(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    193e:	01171693          	slli	a3,a4,0x11
    1942:	0406df63          	bgez	a3,19a0 <LLE_IRQHandler+0x8e>
    1946:	47d8                	lw	a4,12(a5)
    1948:	01171693          	slli	a3,a4,0x11
    194c:	0406da63          	bgez	a3,19a0 <LLE_IRQHandler+0x8e>
		LL->LL26 = 0xffffffff;
    1950:	577d                	li	a4,-1
    1952:	d7b8                	sw	a4,104(a5)
		LL->STATUS = 0x4000;
    1954:	6711                	lui	a4,0x4
    1956:	c798                	sw	a4,8(a5)
	DevSetMode(0);
    1958:	4501                	li	a0,0
    195a:	863fe0ef          	jal	1bc <DevSetMode>
	LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    195e:	4000c7b7          	lui	a5,0x4000c
    1962:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
    1966:	4bb8                	lw	a4,80(a5)
}
    1968:	50f2                	lw	ra,60(sp)
    196a:	52e2                	lw	t0,56(sp)
	LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    196c:	9b61                	andi	a4,a4,-8
    196e:	cbb8                	sw	a4,80(a5)
	LL->LL0 |= 0x08;
    1970:	4398                	lw	a4,0(a5)
}
    1972:	5352                	lw	t1,52(sp)
    1974:	53c2                	lw	t2,48(sp)
	LL->LL0 |= 0x08;
    1976:	00876713          	ori	a4,a4,8
    197a:	c398                	sw	a4,0(a5)
	rx_ready = 1;
    197c:	4705                	li	a4,1
    197e:	cee1a223          	sw	a4,-796(gp) # 200000e0 <rx_ready>
}
    1982:	5532                	lw	a0,44(sp)
    1984:	55a2                	lw	a1,40(sp)
    1986:	5612                	lw	a2,36(sp)
    1988:	5682                	lw	a3,32(sp)
    198a:	4772                	lw	a4,28(sp)
    198c:	47e2                	lw	a5,24(sp)
    198e:	4852                	lw	a6,20(sp)
    1990:	48c2                	lw	a7,16(sp)
    1992:	4e32                	lw	t3,12(sp)
    1994:	4ea2                	lw	t4,8(sp)
    1996:	4f12                	lw	t5,4(sp)
    1998:	4f82                	lw	t6,0(sp)
    199a:	6121                	addi	sp,sp,64
    199c:	30200073          	mret
		LL->STATUS &= LL->INT_EN;
    19a0:	47d4                	lw	a3,12(a5)
    19a2:	4798                	lw	a4,8(a5)
    19a4:	8f75                	and	a4,a4,a3
    19a6:	c798                	sw	a4,8(a5)
		BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
    19a8:	4000c737          	lui	a4,0x4000c
    19ac:	10070713          	addi	a4,a4,256 # 4000c100 <_eusrstack+0x20004100>
    19b0:	575c                	lw	a5,44(a4)
    19b2:	9bf1                	andi	a5,a5,-4
    19b4:	0017e793          	ori	a5,a5,1
    19b8:	d75c                	sw	a5,44(a4)
    19ba:	bf79                	j	1958 <LLE_IRQHandler+0x46>
    19bc:	6562                	.insn	2, 0x6562
    19be:	2d65                	jal	2076 <_data_lma+0x4ae>
    19c0:	3535                	jal	17ec <main+0x99c>
    19c2:	0035                	c.nop	13
	...
    19d0:	041a                	slli	s0,s0,0x6
    19d2:	0000                	unimp
    19d4:	052c                	addi	a1,sp,648
    19d6:	0000                	unimp
    19d8:	059c                	addi	a5,sp,704
    19da:	0000                	unimp
    19dc:	068e                	slli	a3,a3,0x3
    19de:	0000                	unimp
    19e0:	0762                	slli	a4,a4,0x18
    19e2:	0000                	unimp
    19e4:	2211                	jal	1ae8 <SIN_LUT+0x68>
    19e6:	66554433          	.insn	4, 0x66554433
    19ea:	0102                	c.slli64	sp
    19ec:	0006                	c.slli	zero,0x1
    19ee:	0000                	unimp
    19f0:	000a                	c.slli	zero,0x2
    19f2:	0000                	unimp
    19f4:	7e2e                	.insn	2, 0x7e2e
    19f6:	6320                	.insn	2, 0x6320
    19f8:	3368                	.insn	2, 0x3368
    19fa:	6632                	.insn	2, 0x6632
    19fc:	6e75                	lui	t3,0x1d
    19fe:	6920                	.insn	2, 0x6920
    1a00:	52454c53          	.insn	4, 0x52454c53
    1a04:	7e20                	.insn	2, 0x7e20
    1a06:	002e                	c.slli	zero,0xb
    1a08:	646e6553          	.insn	4, 0x646e6553
    1a0c:	6e69                	lui	t3,0x1a
    1a0e:	61762067          	.insn	4, 0x61762067
    1a12:	756c                	.insn	2, 0x756c
    1a14:	3165                	jal	16bc <main+0x86c>
    1a16:	203a                	.insn	2, 0x203a
    1a18:	7525                	lui	a0,0xfffe9
    1a1a:	202c                	.insn	2, 0x202c
    1a1c:	6176                	.insn	2, 0x6176
    1a1e:	756c                	.insn	2, 0x756c
    1a20:	3265                	jal	13c8 <main+0x578>
    1a22:	203a                	.insn	2, 0x203a
    1a24:	7525                	lui	a0,0xfffe9
    1a26:	000a                	c.slli	zero,0x2
    1a28:	654e                	.insn	2, 0x654e
    1a2a:	6f6c5f6f          	jal	t5,c7120 <iSLER_mess.c.a723f200+0xc4086>
    1a2e:	6461                	lui	s0,0x18
    1a30:	6d6d6f43          	.insn	4, 0x6d6d6f43
    1a34:	6e61                	lui	t3,0x18
    1a36:	3a64                	.insn	2, 0x3a64
    1a38:	2520                	.insn	2, 0x2520
    1a3a:	3230                	.insn	2, 0x3230
    1a3c:	0a58                	addi	a4,sp,276
    1a3e:	0000                	unimp
    1a40:	0000                	unimp
    1a42:	0000                	unimp
    1a44:	6974                	.insn	2, 0x6974
    1a46:	656d                	lui	a0,0x1b
    1a48:	645f 6669 3a66      	.insn	6, 0x3a666669645f
    1a4e:	2520                	.insn	2, 0x2520
    1a50:	0a64                	addi	s1,sp,284
    1a52:	0000                	unimp
    1a54:	6f4c                	.insn	2, 0x6f4c
    1a56:	676e                	.insn	2, 0x676e
    1a58:	5020                	lw	s0,96(s0)
    1a5a:	6572                	.insn	2, 0x6572
    1a5c:	00007373          	csrrci	t1,ustatus,0
    1a60:	676e6953          	.insn	4, 0x676e6953
    1a64:	656c                	.insn	2, 0x656c
    1a66:	4320                	lw	s0,64(a4)
    1a68:	696c                	.insn	2, 0x696c
    1a6a:	00006b63          	bltu	zero,zero,1a80 <SIN_LUT>
    1a6e:	0000                	unimp
    1a70:	6f44                	.insn	2, 0x6f44
    1a72:	6275                	lui	tp,0x1d
    1a74:	656c                	.insn	2, 0x656c
    1a76:	4320                	lw	s0,64(a4)
    1a78:	696c                	.insn	2, 0x696c
    1a7a:	00006b63          	bltu	zero,zero,1a90 <SIN_LUT+0x10>
	...

00001a80 <SIN_LUT>:
    1a80:	01010100 02020101 05040403 09080706     ................
    1a90:	0e0d0b0a 14131110 1b1a1816 24211f1d     ..............!$
    1aa0:	2d2a2826 3634312f 413e3c39 4c494744     &(*-/1469<>ADGIL
    1ab0:	5855524f 64615e5b 706d6a67 7d797673     ORUX[^adgjmpsvy}
    1ac0:	89868380 95928f8c a29f9c99 adaba8a5     ................
    1ad0:	b9b6b3b0 c4c1bebc cecbc9c6 d7d5d3d0     ................
    1ae0:	e0dedcda e8e6e4e2 eeedebe9 f4f3f1f0     ................
    1af0:	f8f7f6f5 fcfbfaf9 fefefdfc fffffffe     ................
    1b00:	ffffffff fdfefefe fafbfcfc f6f7f8f9     ................
    1b10:	f1f3f4f5 ebedeef0 e4e6e8e9 dcdee0e2     ................
    1b20:	d3d5d7da c9cbced0 bec1c4c6 b3b6b9bc     ................
    1b30:	a8abadb0 9c9fa2a5 8f929599 8386898c     ................
    1b40:	76797d80 6a6d7073 5e616467 5255585b     .}yvspmjgda^[XUR
    1b50:	47494c4f 3c3e4144 31343639 282a2d2f     OLIGDA><9641/-*(
    1b60:	1f212426 181a1b1d 11131416 0b0d0e10     &$!.............
    1b70:	0708090a 04040506 01020203 01010101     ................

00001b80 <bitquartets.0>:
    1b80:	71111111 77111711 71711171 77711771     ...q...wq.qqq.qw
    1b90:	71171117 77171717 71771177 77771777     ...q...ww.wqw.ww

00001ba0 <channel_map>:
    1ba0:	04030201 08070605 0d0c0a09 11100f0e     ................
    1bb0:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    1bc0:	25242322 270b0026                       "#$%&..'
