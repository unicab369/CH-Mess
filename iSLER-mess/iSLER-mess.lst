
iSLER-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	5900006f          	j	590 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0614                	addi	a3,sp,768
   a:	0000                	unimp
   c:	0614                	addi	a3,sp,768
   e:	0000                	unimp
  10:	bda9                	j	fffffe6a <_eusrstack+0xdfff7e6a>
  12:	f3f9                	bnez	a5,ffffffd8 <_eusrstack+0xdfff7fd8>
  14:	0614                	addi	a3,sp,768
	...
  1e:	0000                	unimp
  20:	0614                	addi	a3,sp,768
  22:	0000                	unimp
  24:	0614                	addi	a3,sp,768
	...
  2e:	0000                	unimp
  30:	1412                	slli	s0,s0,0x24
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0614                	addi	a3,sp,768
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0614                	addi	a3,sp,768
  42:	0000                	unimp
  44:	0614                	addi	a3,sp,768
  46:	0000                	unimp
  48:	0614                	addi	a3,sp,768
  4a:	0000                	unimp
  4c:	1468                	addi	a0,sp,556
  4e:	0000                	unimp
  50:	0614                	addi	a3,sp,768
  52:	0000                	unimp
  54:	14ce                	slli	s1,s1,0x33
  56:	0000                	unimp
  58:	0614                	addi	a3,sp,768
  5a:	0000                	unimp
  5c:	0000                	unimp
  5e:	0000                	unimp
  60:	0614                	addi	a3,sp,768
  62:	0000                	unimp
  64:	0614                	addi	a3,sp,768
  66:	0000                	unimp
  68:	0614                	addi	a3,sp,768
  6a:	0000                	unimp
  6c:	0614                	addi	a3,sp,768
  6e:	0000                	unimp
  70:	0614                	addi	a3,sp,768
  72:	0000                	unimp
  74:	0614                	addi	a3,sp,768
  76:	0000                	unimp
  78:	0614                	addi	a3,sp,768
  7a:	0000                	unimp
  7c:	0614                	addi	a3,sp,768
  7e:	0000                	unimp
  80:	0614                	addi	a3,sp,768
  82:	0000                	unimp
  84:	0614                	addi	a3,sp,768
  86:	0000                	unimp
  88:	0614                	addi	a3,sp,768
  8a:	0000                	unimp
  8c:	0614                	addi	a3,sp,768
	...

Disassembly of section .text:

00000090 <mini_pad>:
{
      90:	1101                	addi	sp,sp,-32
      92:	ca26                	sw	s1,20(sp)
      94:	c84a                	sw	s2,16(sp)
      96:	c64e                	sw	s3,12(sp)
      98:	ce06                	sw	ra,28(sp)
      9a:	cc22                	sw	s0,24(sp)
      9c:	84ae                	mv	s1,a1
      9e:	89aa                	mv	s3,a0
      a0:	85b2                	mv	a1,a2
	int overflow = 0;
      a2:	4901                	li	s2,0
	if(pad_to == 0) pad_to = len;
      a4:	c6bd                	beqz	a3,112 <mini_pad+0x82>
	if(len > pad_to) {
      a6:	0096d463          	bge	a3,s1,ae <mini_pad+0x1e>
      aa:	84b6                	mv	s1,a3
		overflow = 1;
      ac:	4905                	li	s2,1
	for(i = pad_to - len; i > 0; i --) {
      ae:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
      b2:	00045363          	bgez	s0,b8 <mini_pad+0x28>
      b6:	4401                	li	s0,0
      b8:	853a                	mv	a0,a4
      ba:	8622                	mv	a2,s0
      bc:	2f81                	jal	80c <memset>
      be:	872a                	mv	a4,a0
      c0:	008506b3          	add	a3,a0,s0
      c4:	4781                	li	a5,0
	for(i = len; i > 0; i --) {
      c6:	40f48633          	sub	a2,s1,a5
      ca:	04c04663          	bgtz	a2,116 <mini_pad+0x86>
      ce:	0004d363          	bgez	s1,d4 <mini_pad+0x44>
      d2:	4481                	li	s1,0
      d4:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
      d8:	40e60533          	sub	a0,a2,a4
	if(overflow) {
      dc:	02090463          	beqz	s2,104 <mini_pad+0x74>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
      e0:	02c77263          	bgeu	a4,a2,104 <mini_pad+0x74>
			*(pbuffer-- - 1) = '*';
      e4:	02a00793          	li	a5,42
      e8:	fef60fa3          	sb	a5,-1(a2)
      ec:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
      f0:	00d77a63          	bgeu	a4,a3,104 <mini_pad+0x74>
			*(pbuffer-- - 1) = '*';
      f4:	fef60f23          	sb	a5,-2(a2)
      f8:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
      fc:	00d77463          	bgeu	a4,a3,104 <mini_pad+0x74>
			*(pbuffer-- - 1) = '*';
     100:	fef60ea3          	sb	a5,-3(a2)
}
     104:	40f2                	lw	ra,28(sp)
     106:	4462                	lw	s0,24(sp)
     108:	44d2                	lw	s1,20(sp)
     10a:	4942                	lw	s2,16(sp)
     10c:	49b2                	lw	s3,12(sp)
     10e:	6105                	addi	sp,sp,32
     110:	8082                	ret
	if(pad_to == 0) pad_to = len;
     112:	86a6                	mv	a3,s1
     114:	bf69                	j	ae <mini_pad+0x1e>
		*(pbuffer++) = *(ptr++);
     116:	00f98633          	add	a2,s3,a5
     11a:	00064583          	lbu	a1,0(a2)
     11e:	00f68633          	add	a2,a3,a5
     122:	0785                	addi	a5,a5,1
     124:	00b60023          	sb	a1,0(a2)
	for(i = len; i > 0; i --) {
     128:	bf79                	j	c6 <mini_pad+0x36>

0000012a <mini_itoa.part.0>:
	int	negative = 0;
     12a:	4881                	li	a7,0
	if (value < 0 && !unsig) {
     12c:	00055663          	bgez	a0,138 <mini_itoa.part.0+0xe>
     130:	e681                	bnez	a3,138 <mini_itoa.part.0+0xe>
		value = -value;
     132:	40a00533          	neg	a0,a0
		negative = 1;
     136:	4885                	li	a7,1
     138:	06100793          	li	a5,97
     13c:	c219                	beqz	a2,142 <mini_itoa.part.0+0x18>
     13e:	04100793          	li	a5,65
	int	negative = 0;
     142:	883a                	mv	a6,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     144:	4e25                	li	t3,9
     146:	ff678613          	addi	a2,a5,-10
		int digit = value % radix;
     14a:	02b577b3          	remu	a5,a0,a1
     14e:	832a                	mv	t1,a0
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     150:	0ff7f693          	andi	a3,a5,255
     154:	04fe6463          	bltu	t3,a5,19c <mini_itoa.part.0+0x72>
     158:	03068693          	addi	a3,a3,48
     15c:	0ff6f693          	andi	a3,a3,255
     160:	00d80023          	sb	a3,0(a6)
     164:	00180793          	addi	a5,a6,1
		value /= radix;
     168:	02b55533          	divu	a0,a0,a1
	} while (value > 0);
     16c:	02b37663          	bgeu	t1,a1,198 <mini_itoa.part.0+0x6e>
	if (negative)
     170:	00088863          	beqz	a7,180 <mini_itoa.part.0+0x56>
		*(pbuffer++) = '-';
     174:	02d00693          	li	a3,45
     178:	00d78023          	sb	a3,0(a5)
     17c:	00280793          	addi	a5,a6,2
	len = (pbuffer - buffer);
     180:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     184:	4609                	li	a2,2
	*(pbuffer) = '\0';
     186:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     18a:	4681                	li	a3,0
     18c:	02c54633          	div	a2,a0,a2
     190:	17fd                	addi	a5,a5,-1
     192:	00c6c763          	blt	a3,a2,1a0 <mini_itoa.part.0+0x76>
}
     196:	8082                	ret
	} while (value > 0);
     198:	883e                	mv	a6,a5
     19a:	bf45                	j	14a <mini_itoa.part.0+0x20>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     19c:	96b2                	add	a3,a3,a2
     19e:	bf7d                	j	15c <mini_itoa.part.0+0x32>
		char j = buffer[i];
     1a0:	00d705b3          	add	a1,a4,a3
		buffer[i] = buffer[len-i-1];
     1a4:	0007c883          	lbu	a7,0(a5)
		char j = buffer[i];
     1a8:	0005c803          	lbu	a6,0(a1)
	for (i = 0; i < len / 2; i++) {
     1ac:	0685                	addi	a3,a3,1
		buffer[i] = buffer[len-i-1];
     1ae:	01158023          	sb	a7,0(a1)
		buffer[len-i-1] = j;
     1b2:	01078023          	sb	a6,0(a5)
	for (i = 0; i < len / 2; i++) {
     1b6:	bfe9                	j	190 <mini_itoa.part.0+0x66>

000001b8 <DevSetMode>:
}

void DevSetMode(uint16_t mode) {
#if !defined(CH571_CH573)
	if(mode) {
		BB->CTRL_CFG = DEVSETMODE_ON;
     1b8:	4000c737          	lui	a4,0x4000c
     1bc:	10072783          	lw	a5,256(a4) # 4000c100 <_eusrstack+0x20004100>
     1c0:	e7f7f793          	andi	a5,a5,-385
	if(mode) {
     1c4:	c115                	beqz	a0,1e8 <DevSetMode+0x30>
		BB->CTRL_CFG = DEVSETMODE_ON;
     1c6:	1007e793          	ori	a5,a5,256
     1ca:	10f72023          	sw	a5,256(a4)
		RF->RF2 |= 0x330000;
     1ce:	4000d737          	lui	a4,0x4000d
     1d2:	471c                	lw	a5,8(a4)
     1d4:	003306b7          	lui	a3,0x330
     1d8:	8fd5                	or	a5,a5,a3
     1da:	c71c                	sw	a5,8(a4)
	mode = (mode == 0) ? 0x80 : mode;
#elif !defined(CH32V208)
	mode |= 0x30000;
#endif
#endif // ! CH571_CH573
	LL->CTRL_MOD = mode;
     1dc:	4000c7b7          	lui	a5,0x4000c
     1e0:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
     1e4:	cba8                	sw	a0,80(a5)
}
     1e6:	8082                	ret
		BB->CTRL_CFG = DEVSETMODE_OFF;
     1e8:	0807e793          	ori	a5,a5,128
     1ec:	10f72023          	sw	a5,256(a4) # 4000d100 <_eusrstack+0x20005100>
		RF->RF2 &= 0xffcdffff;
     1f0:	4000d6b7          	lui	a3,0x4000d
     1f4:	469c                	lw	a5,8(a3)
     1f6:	ffce0737          	lui	a4,0xffce0
     1fa:	177d                	addi	a4,a4,-1
     1fc:	8ff9                	and	a5,a5,a4
     1fe:	c69c                	sw	a5,8(a3)
	mode = (mode == 0) ? 0x80 : mode;
     200:	08000513          	li	a0,128
     204:	bfe1                	j	1dc <DevSetMode+0x24>

00000206 <RFEND_TXCTune>:

uint32_t RFEND_TXCTune(uint8_t channel) {
	// 0xbf = 2401 MHz
	RF->RF1 &= 0xfffffffe;
     206:	4000d737          	lui	a4,0x4000d
     20a:	435c                	lw	a5,4(a4)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
     20c:	6685                	lui	a3,0x1
     20e:	65068693          	addi	a3,a3,1616 # 1650 <channel_map>
	RF->RF1 &= 0xfffffffe;
     212:	9bf9                	andi	a5,a5,-2
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
     214:	96aa                	add	a3,a3,a0
	RF->RF1 &= 0xfffffffe;
     216:	c35c                	sw	a5,4(a4)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
     218:	0006c783          	lbu	a5,0(a3)
     21c:	66b1                	lui	a3,0xc
     21e:	5f10                	lw	a2,56(a4)
     220:	f0068693          	addi	a3,a3,-256 # bf00 <iSLER_mess.c.19bd7d4e+0x94b4>
     224:	07a2                	slli	a5,a5,0x8
     226:	97b6                	add	a5,a5,a3
     228:	7681                	lui	a3,0xfffe0
     22a:	0ff68693          	addi	a3,a3,255 # fffe00ff <_eusrstack+0xdffd80ff>
     22e:	8e75                	and	a2,a2,a3
     230:	8fd1                	or	a5,a5,a2
     232:	df1c                	sw	a5,56(a4)
	RF->RF1 |= 1;
     234:	435c                	lw	a5,4(a4)

	LL->TMR = 8000;
	while(!(RF->TXCTUNE_CO_CTRL & (1 << 25)) || !(RF->TXCTUNE_CO_CTRL & (1 << 26))) {
     236:	02000637          	lui	a2,0x2000
     23a:	040006b7          	lui	a3,0x4000
	RF->RF1 |= 1;
     23e:	0017e793          	ori	a5,a5,1
     242:	c35c                	sw	a5,4(a4)
	LL->TMR = 8000;
     244:	4000c7b7          	lui	a5,0x4000c
     248:	6709                	lui	a4,0x2
     24a:	f4070713          	addi	a4,a4,-192 # 1f40 <ch32fun.c.e0983271+0x3af>
     24e:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
     252:	d3f8                	sw	a4,100(a5)
		if(LL->TMR == 0) {
     254:	4000c5b7          	lui	a1,0x4000c
	while(!(RF->TXCTUNE_CO_CTRL & (1 << 25)) || !(RF->TXCTUNE_CO_CTRL & (1 << 26))) {
     258:	4000d737          	lui	a4,0x4000d
     25c:	09072783          	lw	a5,144(a4) # 4000d090 <_eusrstack+0x20005090>
     260:	8ff1                	and	a5,a5,a2
     262:	c789                	beqz	a5,26c <RFEND_TXCTune+0x66>
     264:	09072783          	lw	a5,144(a4)
     268:	8ff5                	and	a5,a5,a3
     26a:	e789                	bnez	a5,274 <RFEND_TXCTune+0x6e>
		if(LL->TMR == 0) {
     26c:	20058793          	addi	a5,a1,512 # 4000c200 <_eusrstack+0x20004200>
     270:	53fc                	lw	a5,100(a5)
     272:	f7ed                	bnez	a5,25c <RFEND_TXCTune+0x56>
			break;
		}
	}

	uint8_t nCO = (uint8_t)RF->TXCTUNE_CO_CTRL & 0x3f;
     274:	4000d7b7          	lui	a5,0x4000d
     278:	0907a503          	lw	a0,144(a5) # 4000d090 <_eusrstack+0x20005090>
	uint8_t nGA = (uint8_t)(RF->TXCTUNE_GA_CTRL >> 10) & 0x7f;
     27c:	0947a783          	lw	a5,148(a5)

	// printf("nCO,nGA ch:%u idx:%u %u,%u\n", channel, channel_map[channel], nCO,nGA);

	return (nGA << 24) | nCO;
     280:	03f57513          	andi	a0,a0,63
	uint8_t nGA = (uint8_t)(RF->TXCTUNE_GA_CTRL >> 10) & 0x7f;
     284:	83a9                	srli	a5,a5,0xa
	return (nGA << 24) | nCO;
     286:	07f7f793          	andi	a5,a5,127
     28a:	07e2                	slli	a5,a5,0x18
}
     28c:	8d5d                	or	a0,a0,a5
     28e:	8082                	ret

00000290 <WS2812FillBuffSec.constprop.0>:
#define bMOSI PA14
#endif
#endif
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     290:	7179                	addi	sp,sp,-48
     292:	d226                	sw	s1,36(sp)
     294:	ce4e                	sw	s3,28(sp)
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };
#endif

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
     296:	c901a983          	lw	s3,-880(gp) # 2000008c <WS2812LEDs>
	int place = WS2812LEDPlace;
     29a:	c8c18793          	addi	a5,gp,-884 # 20000088 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     29e:	d422                	sw	s0,40(sp)
	int place = WS2812LEDPlace;
     2a0:	4380                	lw	s0,0(a5)
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     2a2:	d04a                	sw	s2,32(sp)
     2a4:	cc52                	sw	s4,24(sp)
     2a6:	892a                	mv	s2,a0
     2a8:	d606                	sw	ra,44(sp)
	int place = WS2812LEDPlace;
     2aa:	0e418513          	addi	a0,gp,228 # 200004e0 <WS2812dmabuff>
     2ae:	00840a13          	addi	s4,s0,8
     2b2:	c8c18493          	addi	s1,gp,-884 # 20000088 <WS2812LEDPlace>
     2b6:	0e418613          	addi	a2,gp,228 # 200004e0 <WS2812dmabuff>
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
     2ba:	06044763          	bltz	s0,328 <WS2812FillBuffSec.constprop.0+0x98>
		ptr[2] = bitquartets[(ledval24bit>>20)&0xf];
		ptr[3] = bitquartets[(ledval24bit>>16)&0xf];
		ptr[4] = bitquartets[(ledval24bit>>4)&0xf];
		ptr[5] = bitquartets[(ledval24bit>>0)&0xf];
#elif defined( WSGRB )
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     2be:	6685                	lui	a3,0x1
	while( ptr != end )
     2c0:	06060613          	addi	a2,a2,96 # 2000060 <iSLER_mess.c.19bd7d4e+0x1ffd614>
    .num_colors = ARRAY_SIZE(color_arr),
    .ref_index = 0,
};

uint32_t Neo_render_colorChase(WS2812_move_t* input, animation_color_t* ani, int ledIdx) {
    if (systick_handleTimeout(&input->ref_time, input->frame_duration)) {
     2c4:	c6018713          	addi	a4,gp,-928 # 2000005c <move_leds>
     2c8:	14418813          	addi	a6,gp,324 # 20000540 <led_arr>
RGB_t animation_currentColor(animation_color_t* ani) {
    return ani->colors[ani->ref_index];
}

RGB_t animation_colorAt(animation_color_t* ani, uint8_t steps, uint8_t index) {
    return ani->colors[(index/steps) % ani->num_colors];
     2cc:	c7418893          	addi	a7,gp,-908 # 20000070 <color_ani>
     2d0:	4e15                	li	t3,5
        for (int i=0; i < NR_LEDS; i++) {
     2d2:	4e99                	li	t4,6
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     2d4:	63068693          	addi	a3,a3,1584 # 1630 <bitquartets.0>
     2d8:	8a22                	mv	s4,s0
	while( ptr != end )
     2da:	04c50963          	beq	a0,a2,32c <WS2812FillBuffSec.constprop.0+0x9c>
		if( place >= ledcount )
     2de:	07344163          	blt	s0,s3,340 <WS2812FillBuffSec.constprop.0+0xb0>
				(*ptr++) = 0;//0xffff;
     2e2:	8e09                	sub	a2,a2,a0
     2e4:	4581                	li	a1,0
     2e6:	231d                	jal	80c <memset>
			if( tce )
     2e8:	04090263          	beqz	s2,32c <WS2812FillBuffSec.constprop.0+0x9c>
				if( place == ledcount )
     2ec:	00899c63          	bne	s3,s0,304 <WS2812FillBuffSec.constprop.0+0x74>
					R8_SPI0_INTER_EN &= ~RB_SPI_IE_DMA_END;  // Disable DMA end interrupt
     2f0:	40004737          	lui	a4,0x40004
     2f4:	00274783          	lbu	a5,2(a4) # 40004002 <_eusrstack+0x1fffc002>
     2f8:	0f77f793          	andi	a5,a5,247
     2fc:	00f70123          	sb	a5,2(a4)
					WS2812BLEDInUse = 0;
     300:	c801a423          	sw	zero,-888(gp) # 20000084 <WS2812BLEDInUse>
				place++;
     304:	00140a13          	addi	s4,s0,1
     308:	a015                	j	32c <WS2812FillBuffSec.constprop.0+0x9c>
		(*ptr++) = 0;
     30a:	00051023          	sh	zero,0(a0)
		(*ptr++) = 0;
     30e:	00051123          	sh	zero,2(a0)
		(*ptr++) = 0;
     312:	00051223          	sh	zero,4(a0)
		(*ptr++) = 0;
     316:	00051323          	sh	zero,6(a0)
		(*ptr++) = 0;
     31a:	00051423          	sh	zero,8(a0)
		place++;
     31e:	0405                	addi	s0,s0,1
     320:	0531                	addi	a0,a0,12
		(*ptr++) = 0;
     322:	fe051f23          	sh	zero,-2(a0)
     326:	bf51                	j	2ba <WS2812FillBuffSec.constprop.0+0x2a>
	while( place < 0 && ptr != end )
     328:	ff4411e3          	bne	s0,s4,30a <WS2812FillBuffSec.constprop.0+0x7a>
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
}
     32c:	50b2                	lw	ra,44(sp)
     32e:	5422                	lw	s0,40(sp)
	WS2812LEDPlace = place;
     330:	0144a023          	sw	s4,0(s1)
}
     334:	5902                	lw	s2,32(sp)
     336:	5492                	lw	s1,36(sp)
     338:	49f2                	lw	s3,28(sp)
     33a:	4a62                	lw	s4,24(sp)
     33c:	6145                	addi	sp,sp,48
     33e:	8082                	ret
	systick_millis++;
}


int8_t systick_handleTimeout(uint32_t *ref_time, uint32_t duration) {
	uint32_t now = millis();
     340:	c9818793          	addi	a5,gp,-872 # 20000094 <systick_millis>
     344:	438c                	lw	a1,0(a5)
	if (now - *ref_time > duration) {
     346:	4b1c                	lw	a5,16(a4)
     348:	00472f03          	lw	t5,4(a4)
     34c:	40f587b3          	sub	a5,a1,a5
     350:	04ff7363          	bgeu	t5,a5,396 <WS2812FillBuffSec.constprop.0+0x106>
		*ref_time = now;
     354:	cb0c                	sw	a1,16(a4)
     356:	8fc2                	mv	t6,a6
     358:	4f01                	li	t5,0
            led_arr[i] = animation_colorAt(ani, 5, i+input->ref_index);
     35a:	00d74583          	lbu	a1,13(a4)
     35e:	0048c283          	lbu	t0,4(a7)
        for (int i=0; i < NR_LEDS; i++) {
     362:	0f91                	addi	t6,t6,4
            led_arr[i] = animation_colorAt(ani, 5, i+input->ref_index);
     364:	01e587b3          	add	a5,a1,t5
     368:	0ff7f793          	andi	a5,a5,255
     36c:	03c7d7b3          	divu	a5,a5,t3
        for (int i=0; i < NR_LEDS; i++) {
     370:	0f05                	addi	t5,t5,1
     372:	0257e7b3          	rem	a5,a5,t0
     376:	0008a283          	lw	t0,0(a7)
     37a:	078a                	slli	a5,a5,0x2
     37c:	9796                	add	a5,a5,t0
     37e:	439c                	lw	a5,0(a5)
            led_arr[i] = animation_colorAt(ani, 5, i+input->ref_index);
     380:	feffae23          	sw	a5,-4(t6)
     384:	c63e                	sw	a5,12(sp)
     386:	c43e                	sw	a5,8(sp)
        for (int i=0; i < NR_LEDS; i++) {
     388:	fddf19e3          	bne	t5,t4,35a <WS2812FillBuffSec.constprop.0+0xca>
        }

        input->ref_index += input->frame_step;
     38c:	00874783          	lbu	a5,8(a4)
     390:	95be                	add	a1,a1,a5
     392:	00b706a3          	sb	a1,13(a4)
    }

    return led_arr[ledIdx].packed;
     396:	00241793          	slli	a5,s0,0x2
     39a:	97c2                	add	a5,a5,a6
     39c:	439c                	lw	a5,0(a5)
		ptr += 6;
     39e:	0531                	addi	a0,a0,12
     3a0:	0405                	addi	s0,s0,1
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     3a2:	00b7d593          	srli	a1,a5,0xb
     3a6:	89f9                	andi	a1,a1,30
     3a8:	95b6                	add	a1,a1,a3
     3aa:	0005d583          	lhu	a1,0(a1)
     3ae:	feb51a23          	sh	a1,-12(a0)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     3b2:	0077d593          	srli	a1,a5,0x7
     3b6:	89f9                	andi	a1,a1,30
     3b8:	95b6                	add	a1,a1,a3
     3ba:	0005d583          	lhu	a1,0(a1)
     3be:	feb51b23          	sh	a1,-10(a0)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
     3c2:	0037d593          	srli	a1,a5,0x3
     3c6:	89f9                	andi	a1,a1,30
     3c8:	95b6                	add	a1,a1,a3
     3ca:	0005d583          	lhu	a1,0(a1)
     3ce:	feb51c23          	sh	a1,-8(a0)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
     3d2:	00f7f593          	andi	a1,a5,15
     3d6:	0586                	slli	a1,a1,0x1
     3d8:	95b6                	add	a1,a1,a3
     3da:	0005d583          	lhu	a1,0(a1)
     3de:	feb51d23          	sh	a1,-6(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     3e2:	0137d593          	srli	a1,a5,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     3e6:	83bd                	srli	a5,a5,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     3e8:	89f9                	andi	a1,a1,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     3ea:	8bf9                	andi	a5,a5,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     3ec:	95b6                	add	a1,a1,a3
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     3ee:	97b6                	add	a5,a5,a3
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     3f0:	0005d583          	lhu	a1,0(a1)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     3f4:	0007d783          	lhu	a5,0(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     3f8:	feb51e23          	sh	a1,-4(a0)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     3fc:	fef51f23          	sh	a5,-2(a0)
     400:	bde1                	j	2d8 <WS2812FillBuffSec.constprop.0+0x48>

00000402 <DelaySysTick.constprop.0>:
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
#elif defined(CH32V20x) || defined(CH32V30x) || defined(CH32X03x) || defined(CH582_CH583) || defined(CH591_CH592)
	uint64_t targend = SysTick->CNT + n;
     402:	e000f7b7          	lui	a5,0xe000f
     406:	4794                	lw	a3,8(a5)
     408:	47d8                	lw	a4,12(a5)
     40a:	0003c7b7          	lui	a5,0x3c
     40e:	6cc78793          	addi	a5,a5,1740 # 3c6cc <iSLER_mess.c.19bd7d4e+0x39c80>
     412:	97b6                	add	a5,a5,a3
     414:	00d7b633          	sltu	a2,a5,a3
     418:	963a                	add	a2,a2,a4
	while( ((int64_t)( SysTick->CNT - targend )) < 0 );
     41a:	e000f837          	lui	a6,0xe000f
     41e:	00882503          	lw	a0,8(a6) # e000f008 <_eusrstack+0xc0007008>
     422:	00c82583          	lw	a1,12(a6)
     426:	40f50733          	sub	a4,a0,a5
     42a:	00e536b3          	sltu	a3,a0,a4
     42e:	40c58733          	sub	a4,a1,a2
     432:	8f15                	sub	a4,a4,a3
     434:	fe0745e3          	bltz	a4,41e <DelaySysTick.constprop.0+0x1c>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     438:	8082                	ret

0000043a <blink>:
remote_command_t remote_cmd1 = {
	.command = 0xBB,
	.value = 0x1B2B3B4B,
};

void blink(int n) {
     43a:	1141                	addi	sp,sp,-16
     43c:	c422                	sw	s0,8(sp)
     43e:	c226                	sw	s1,4(sp)
     440:	c04a                	sw	s2,0(sp)
     442:	c606                	sw	ra,12(sp)
	for(int i = n-1; i >= 0; i--) {
     444:	fff50413          	addi	s0,a0,-1
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
     448:	400014b7          	lui	s1,0x40001
	for(int i = n-1; i >= 0; i--) {
     44c:	597d                	li	s2,-1
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
     44e:	0ac4a783          	lw	a5,172(s1) # 400010ac <_eusrstack+0x1fff90ac>
     452:	1007e793          	ori	a5,a5,256
     456:	0af4a623          	sw	a5,172(s1)
		Delay_Ms(33);
     45a:	3765                	jal	402 <DelaySysTick.constprop.0>
		funDigitalWrite( LED, FUN_HIGH ); // Turn off LED
     45c:	0a84a783          	lw	a5,168(s1)
     460:	1007e793          	ori	a5,a5,256
     464:	0af4a423          	sw	a5,168(s1)
		if(i) Delay_Ms(33);
     468:	c011                	beqz	s0,46c <blink+0x32>
     46a:	3f61                	jal	402 <DelaySysTick.constprop.0>
	for(int i = n-1; i >= 0; i--) {
     46c:	147d                	addi	s0,s0,-1
     46e:	ff2410e3          	bne	s0,s2,44e <blink+0x14>
	}
}
     472:	40b2                	lw	ra,12(sp)
     474:	4422                	lw	s0,8(sp)
     476:	4492                	lw	s1,4(sp)
     478:	4902                	lw	s2,0(sp)
     47a:	0141                	addi	sp,sp,16
     47c:	8082                	ret

0000047e <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     47e:	e00007b7          	lui	a5,0xe0000
     482:	3807a783          	lw	a5,896(a5) # e0000380 <_eusrstack+0xbfff8380>
}
     486:	8082                	ret

00000488 <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     488:	e0000737          	lui	a4,0xe0000
     48c:	38072783          	lw	a5,896(a4) # e0000380 <_eusrstack+0xbfff8380>
WEAK int _write(int fd, const char *buf, int size)
     490:	7139                	addi	sp,sp,-64
     492:	de06                	sw	ra,60(sp)
     494:	dc22                	sw	s0,56(sp)
     496:	da26                	sw	s1,52(sp)
     498:	d84a                	sw	s2,48(sp)
     49a:	d64e                	sw	s3,44(sp)
     49c:	d452                	sw	s4,40(sp)
     49e:	d256                	sw	s5,36(sp)
     4a0:	d05a                	sw	s6,32(sp)
     4a2:	ce5e                	sw	s7,28(sp)
     4a4:	cc62                	sw	s8,24(sp)
     4a6:	ca66                	sw	s9,20(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     4a8:	0c07f793          	andi	a5,a5,192
     4ac:	0c000693          	li	a3,192
     4b0:	0ad78a63          	beq	a5,a3,564 <_write.constprop.0+0xdc>
	char buffer[4] = { 0 };
     4b4:	c602                	sw	zero,12(sp)
     4b6:	842e                	mv	s0,a1
	if( size == 0 )
     4b8:	e9c5                	bnez	a1,568 <_write.constprop.0+0xe0>
		lastdmd = (*DMDATA0);
     4ba:	38072783          	lw	a5,896(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     4be:	c789                	beqz	a5,4c8 <_write.constprop.0+0x40>
     4c0:	0807f793          	andi	a5,a5,128
     4c4:	e391                	bnez	a5,4c8 <_write.constprop.0+0x40>
     4c6:	3f65                	jal	47e <internal_handle_input.constprop.0>
}
     4c8:	50f2                	lw	ra,60(sp)
     4ca:	8522                	mv	a0,s0
     4cc:	5462                	lw	s0,56(sp)
     4ce:	54d2                	lw	s1,52(sp)
     4d0:	5942                	lw	s2,48(sp)
     4d2:	59b2                	lw	s3,44(sp)
     4d4:	5a22                	lw	s4,40(sp)
     4d6:	5a92                	lw	s5,36(sp)
     4d8:	5b02                	lw	s6,32(sp)
     4da:	4bf2                	lw	s7,28(sp)
     4dc:	4c62                	lw	s8,24(sp)
     4de:	4cd2                	lw	s9,20(sp)
     4e0:	6121                	addi	sp,sp,64
     4e2:	8082                	ret
		int tosend = size - place;
     4e4:	40940cb3          	sub	s9,s0,s1
     4e8:	8966                	mv	s2,s9
     4ea:	019ad363          	bge	s5,s9,4f0 <_write.constprop.0+0x68>
     4ee:	491d                	li	s2,7
     4f0:	001b0793          	addi	a5,s6,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     4f4:	380a2703          	lw	a4,896(s4)
     4f8:	380a0693          	addi	a3,s4,896
     4fc:	08077613          	andi	a2,a4,128
     500:	ee21                	bnez	a2,558 <_write.constprop.0+0xd0>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     502:	c311                	beqz	a4,506 <_write.constprop.0+0x7e>
     504:	3fad                	jal	47e <internal_handle_input.constprop.0>
			buffer[t-3] = buf[t+place];
     506:	4601                	li	a2,0
     508:	019bd463          	bge	s7,s9,510 <_write.constprop.0+0x88>
     50c:	ffd90613          	addi	a2,s2,-3
     510:	00348593          	addi	a1,s1,3
     514:	95ce                	add	a1,a1,s3
     516:	0068                	addi	a0,sp,12
     518:	2619                	jal	81e <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     51a:	47b2                	lw	a5,12(sp)
     51c:	00998733          	add	a4,s3,s1
     520:	38fa2223          	sw	a5,900(s4)
		t = 0;
     524:	4781                	li	a5,0
			buffer[t+1] = buf[t+place];
     526:	00074603          	lbu	a2,0(a4)
     52a:	0785                	addi	a5,a5,1
     52c:	0074                	addi	a3,sp,12
     52e:	96be                	add	a3,a3,a5
     530:	00c68023          	sb	a2,0(a3)
		while( t < tosend && t < 3 )
     534:	00f90563          	beq	s2,a5,53e <_write.constprop.0+0xb6>
     538:	0705                	addi	a4,a4,1
     53a:	ff8796e3          	bne	a5,s8,526 <_write.constprop.0+0x9e>
		buffer[0] = 0x80 | (tosend + 4);
     53e:	00490793          	addi	a5,s2,4
     542:	f807e793          	ori	a5,a5,-128
     546:	00f10623          	sb	a5,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     54a:	47b2                	lw	a5,12(sp)
		place += tosend;
     54c:	94ca                	add	s1,s1,s2
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     54e:	38fa2023          	sw	a5,896(s4)
	while( place < size )
     552:	f884c9e3          	blt	s1,s0,4e4 <_write.constprop.0+0x5c>
     556:	bf8d                	j	4c8 <_write.constprop.0+0x40>
			if( timeout-- == 0 )
     558:	17fd                	addi	a5,a5,-1
     55a:	ffc9                	bnez	a5,4f4 <_write.constprop.0+0x6c>
				*DMDATA0 |= 0xc0;
     55c:	429c                	lw	a5,0(a3)
     55e:	0c07e793          	ori	a5,a5,192
     562:	c29c                	sw	a5,0(a3)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     564:	4401                	li	s0,0
     566:	b78d                	j	4c8 <_write.constprop.0+0x40>
     568:	89aa                	mv	s3,a0
	if( size == 0 )
     56a:	4481                	li	s1,0
     56c:	4a9d                	li	s5,7
		int tosend = size - place;
     56e:	00100b37          	lui	s6,0x100
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     572:	e0000a37          	lui	s4,0xe0000
			buffer[t-3] = buf[t+place];
     576:	4b89                	li	s7,2
		while( t < tosend && t < 3 )
     578:	4c0d                	li	s8,3
     57a:	bfe1                	j	552 <_write.constprop.0+0xca>

0000057c <__puts_uart>:
{
     57c:	1141                	addi	sp,sp,-16
     57e:	c422                	sw	s0,8(sp)
     580:	c606                	sw	ra,12(sp)
     582:	842e                	mv	s0,a1
	_write( 0, s, len );
     584:	3711                	jal	488 <_write.constprop.0>
}
     586:	40b2                	lw	ra,12(sp)
     588:	8522                	mv	a0,s0
     58a:	4422                	lw	s0,8(sp)
     58c:	0141                	addi	sp,sp,16
     58e:	8082                	ret

00000590 <handle_reset>:
	asm volatile( "\n\
     590:	20000197          	auipc	gp,0x20000
     594:	e6c18193          	addi	gp,gp,-404 # 200003fc <__global_pointer$>
     598:	20008117          	auipc	sp,0x20008
     59c:	a6810113          	addi	sp,sp,-1432 # 20008000 <_eusrstack>
	asm volatile(
     5a0:	c8818513          	addi	a0,gp,-888 # 20000084 <WS2812BLEDInUse>
     5a4:	15c18593          	addi	a1,gp,348 # 20000558 <_ebss>
     5a8:	00b57763          	bgeu	a0,a1,5b6 <handle_reset+0x26>
     5ac:	00052023          	sw	zero,0(a0)
     5b0:	0511                	addi	a0,a0,4
     5b2:	feb56de3          	bltu	a0,a1,5ac <handle_reset+0x1c>
     5b6:	00001517          	auipc	a0,0x1
     5ba:	0c250513          	addi	a0,a0,194 # 1678 <_data_lma>
     5be:	c0418593          	addi	a1,gp,-1020 # 20000000 <color_arr>
     5c2:	c8818613          	addi	a2,gp,-888 # 20000084 <WS2812BLEDInUse>
     5c6:	00c58a63          	beq	a1,a2,5da <handle_reset+0x4a>
     5ca:	00052283          	lw	t0,0(a0)
     5ce:	0055a023          	sw	t0,0(a1)
     5d2:	0511                	addi	a0,a0,4
     5d4:	0591                	addi	a1,a1,4
     5d6:	fec5eae3          	bltu	a1,a2,5ca <handle_reset+0x3a>
	asm volatile(
     5da:	00000793          	li	a5,0
     5de:	42fd                	li	t0,31
     5e0:	bc029073          	csrw	0xbc0,t0
     5e4:	6289                	lui	t0,0x2
     5e6:	88828293          	addi	t0,t0,-1912 # 1888 <_data_lma+0x210>
     5ea:	3002a073          	csrs	mstatus,t0
     5ee:	00000297          	auipc	t0,0x0
     5f2:	a1228293          	addi	t0,t0,-1518 # 0 <InterruptVector>
     5f6:	0032e293          	ori	t0,t0,3
     5fa:	30529073          	csrw	mtvec,t0
	SysTick->CTLR = 1;
     5fe:	e000f7b7          	lui	a5,0xe000f
     602:	4705                	li	a4,1
     604:	c398                	sw	a4,0(a5)
	asm volatile(
     606:	6785                	lui	a5,0x1
     608:	98c78793          	addi	a5,a5,-1652 # 98c <main>
     60c:	34179073          	csrw	mepc,a5
     610:	30200073          	mret

00000614 <ADC1_2_IRQHandler>:
	asm volatile( "1: j 1b" );
     614:	a001                	j	614 <ADC1_2_IRQHandler>

00000616 <strlen>:
{
     616:	87aa                	mv	a5,a0
	for (; *s; s++);
     618:	0007c703          	lbu	a4,0(a5)
     61c:	e701                	bnez	a4,624 <strlen+0xe>
}
     61e:	40a78533          	sub	a0,a5,a0
     622:	8082                	ret
	for (; *s; s++);
     624:	0785                	addi	a5,a5,1
     626:	bfcd                	j	618 <strlen+0x2>

00000628 <mini_vpprintf>:
{
     628:	7159                	addi	sp,sp,-112
     62a:	d4a2                	sw	s0,104(sp)
     62c:	d2a6                	sw	s1,100(sp)
     62e:	d0ca                	sw	s2,96(sp)
     630:	cece                	sw	s3,92(sp)
     632:	ccd2                	sw	s4,88(sp)
     634:	cad6                	sw	s5,84(sp)
     636:	c6de                	sw	s7,76(sp)
     638:	d686                	sw	ra,108(sp)
     63a:	c8da                	sw	s6,80(sp)
     63c:	c4e2                	sw	s8,72(sp)
     63e:	c2e6                	sw	s9,68(sp)
     640:	c0ea                	sw	s10,64(sp)
     642:	84aa                	mv	s1,a0
     644:	892e                	mv	s2,a1
     646:	8432                	mv	s0,a2
     648:	8bb6                	mv	s7,a3
	int n = 0;
     64a:	4981                	li	s3,0
		if (ch!='%') {
     64c:	02500a13          	li	s4,37
				pad_to = pad_to * 10 + (ch - '0');
     650:	4aa9                	li	s5,10
	while ((ch=*(fmt++))) {
     652:	00044783          	lbu	a5,0(s0)
     656:	00140c13          	addi	s8,s0,1
     65a:	00f107a3          	sb	a5,15(sp)
     65e:	e385                	bnez	a5,67e <mini_vpprintf+0x56>
}
     660:	50b6                	lw	ra,108(sp)
     662:	5426                	lw	s0,104(sp)
     664:	5496                	lw	s1,100(sp)
     666:	5906                	lw	s2,96(sp)
     668:	4a66                	lw	s4,88(sp)
     66a:	4ad6                	lw	s5,84(sp)
     66c:	4b46                	lw	s6,80(sp)
     66e:	4bb6                	lw	s7,76(sp)
     670:	4c26                	lw	s8,72(sp)
     672:	4c96                	lw	s9,68(sp)
     674:	4d06                	lw	s10,64(sp)
     676:	854e                	mv	a0,s3
     678:	49f6                	lw	s3,92(sp)
     67a:	6165                	addi	sp,sp,112
     67c:	8082                	ret
		if (ch!='%') {
     67e:	01478c63          	beq	a5,s4,696 <mini_vpprintf+0x6e>
			len = puts(&ch, len, buf);
     682:	864a                	mv	a2,s2
     684:	4585                	li	a1,1
     686:	00f10513          	addi	a0,sp,15
     68a:	9482                	jalr	s1
     68c:	8b5e                	mv	s6,s7
	while ((ch=*(fmt++))) {
     68e:	8462                	mv	s0,s8
		n = n + len;
     690:	99aa                	add	s3,s3,a0
     692:	8bda                	mv	s7,s6
     694:	bf7d                	j	652 <mini_vpprintf+0x2a>
			ch=*(fmt++);
     696:	00144783          	lbu	a5,1(s0)
			if (ch == '0') pad_char = '0';
     69a:	03000693          	li	a3,48
			ch=*(fmt++);
     69e:	00240713          	addi	a4,s0,2
     6a2:	00f107a3          	sb	a5,15(sp)
			if (ch == '0') pad_char = '0';
     6a6:	03000c13          	li	s8,48
     6aa:	06d79f63          	bne	a5,a3,728 <mini_vpprintf+0x100>
				ch=*(fmt++);
     6ae:	843a                	mv	s0,a4
     6b0:	4d01                	li	s10,0
     6b2:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     6b4:	4625                	li	a2,9
     6b6:	a801                	j	6c6 <mini_vpprintf+0x9e>
				pad_to = pad_to * 10 + (ch - '0');
     6b8:	035d0d33          	mul	s10,s10,s5
				ch=*(fmt++);
     6bc:	00044783          	lbu	a5,0(s0)
     6c0:	0405                	addi	s0,s0,1
     6c2:	4705                	li	a4,1
				pad_to = pad_to * 10 + (ch - '0');
     6c4:	9d36                	add	s10,s10,a3
			while (ch >= '0' && ch <= '9') {
     6c6:	fd078693          	addi	a3,a5,-48
     6ca:	0ff6f593          	andi	a1,a3,255
     6ce:	feb675e3          	bgeu	a2,a1,6b8 <mini_vpprintf+0x90>
     6d2:	c319                	beqz	a4,6d8 <mini_vpprintf+0xb0>
     6d4:	00f107a3          	sb	a5,15(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     6d8:	4761                	li	a4,24
     6da:	8cea                	mv	s9,s10
     6dc:	01a75363          	bge	a4,s10,6e2 <mini_vpprintf+0xba>
     6e0:	4ce1                	li	s9,24
			if (ch == 'l') {
     6e2:	06c00693          	li	a3,108
			char l = 0;
     6e6:	4701                	li	a4,0
			if (ch == 'l') {
     6e8:	00d79863          	bne	a5,a3,6f8 <mini_vpprintf+0xd0>
				ch=*(fmt++);
     6ec:	00044783          	lbu	a5,0(s0)
				l = 1;
     6f0:	4705                	li	a4,1
				ch=*(fmt++);
     6f2:	0405                	addi	s0,s0,1
     6f4:	00f107a3          	sb	a5,15(sp)
			switch (ch) {
     6f8:	00f14683          	lbu	a3,15(sp)
     6fc:	06400793          	li	a5,100
     700:	06f68163          	beq	a3,a5,762 <mini_vpprintf+0x13a>
     704:	02d7e563          	bltu	a5,a3,72e <mini_vpprintf+0x106>
     708:	05800793          	li	a5,88
     70c:	08f68c63          	beq	a3,a5,7a4 <mini_vpprintf+0x17c>
     710:	06300793          	li	a5,99
     714:	0af68963          	beq	a3,a5,7c6 <mini_vpprintf+0x19e>
     718:	d6a1                	beqz	a3,660 <mini_vpprintf+0x38>
					len = puts(&ch, len, buf);
     71a:	864a                	mv	a2,s2
     71c:	4585                	li	a1,1
     71e:	00f10513          	addi	a0,sp,15
     722:	9482                	jalr	s1
     724:	8b5e                	mv	s6,s7
     726:	b7ad                	j	690 <mini_vpprintf+0x68>
			char pad_char = ' ';
     728:	02000c13          	li	s8,32
     72c:	b749                	j	6ae <mini_vpprintf+0x86>
			switch (ch) {
     72e:	07500793          	li	a5,117
     732:	02f68863          	beq	a3,a5,762 <mini_vpprintf+0x13a>
     736:	07800793          	li	a5,120
     73a:	06f68563          	beq	a3,a5,7a4 <mini_vpprintf+0x17c>
     73e:	07300793          	li	a5,115
     742:	fcf69ce3          	bne	a3,a5,71a <mini_vpprintf+0xf2>
					ptr = va_arg(va, char*);
     746:	004b8b13          	addi	s6,s7,4
     74a:	000bab83          	lw	s7,0(s7)
					len = mini_strlen(ptr);
     74e:	855e                	mv	a0,s7
     750:	35d9                	jal	616 <strlen>
     752:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     754:	080d0663          	beqz	s10,7e0 <mini_vpprintf+0x1b8>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     758:	1038                	addi	a4,sp,40
     75a:	86e6                	mv	a3,s9
     75c:	8662                	mv	a2,s8
     75e:	855e                	mv	a0,s7
     760:	a01d                	j	786 <mini_vpprintf+0x15e>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     762:	004b8b13          	addi	s6,s7,4
					if(l) {
     766:	c715                	beqz	a4,792 <mini_vpprintf+0x16a>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     768:	f8b68693          	addi	a3,a3,-117
     76c:	0818                	addi	a4,sp,16
     76e:	0016b693          	seqz	a3,a3
     772:	000ba503          	lw	a0,0(s7)
     776:	4601                	li	a2,0
     778:	45a9                	li	a1,10
     77a:	3a45                	jal	12a <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     77c:	1038                	addi	a4,sp,40
     77e:	86e6                	mv	a3,s9
     780:	8662                	mv	a2,s8
     782:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     784:	0808                	addi	a0,sp,16
     786:	3229                	jal	90 <mini_pad>
     788:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     78a:	864a                	mv	a2,s2
     78c:	1028                	addi	a0,sp,40
     78e:	9482                	jalr	s1
					break;
     790:	b701                	j	690 <mini_vpprintf+0x68>
						if(ch == 'u') {
     792:	07500793          	li	a5,117
     796:	0818                	addi	a4,sp,16
     798:	00f69463          	bne	a3,a5,7a0 <mini_vpprintf+0x178>
	if (radix > 16)
     79c:	4685                	li	a3,1
     79e:	bfd1                	j	772 <mini_vpprintf+0x14a>
     7a0:	4681                	li	a3,0
     7a2:	bfc1                	j	772 <mini_vpprintf+0x14a>
					if(l) {
     7a4:	000ba503          	lw	a0,0(s7)
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     7a8:	fa868613          	addi	a2,a3,-88
     7ac:	0818                	addi	a4,sp,16
     7ae:	4685                	li	a3,1
     7b0:	00163613          	seqz	a2,a2
     7b4:	45c1                	li	a1,16
     7b6:	3a95                	jal	12a <mini_itoa.part.0>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     7b8:	004b8b13          	addi	s6,s7,4
	if (radix > 16)
     7bc:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     7be:	1038                	addi	a4,sp,40
     7c0:	86e6                	mv	a3,s9
     7c2:	8662                	mv	a2,s8
     7c4:	b7c1                	j	784 <mini_vpprintf+0x15c>
					ch = (char)(va_arg(va, int));
     7c6:	000ba783          	lw	a5,0(s7)
     7ca:	004b8b13          	addi	s6,s7,4
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     7ce:	1038                	addi	a4,sp,40
					ch = (char)(va_arg(va, int));
     7d0:	00f107a3          	sb	a5,15(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     7d4:	86e6                	mv	a3,s9
     7d6:	8662                	mv	a2,s8
     7d8:	4585                	li	a1,1
     7da:	00f10513          	addi	a0,sp,15
     7de:	b765                	j	786 <mini_vpprintf+0x15e>
						len = puts(ptr, len, buf);
     7e0:	864a                	mv	a2,s2
     7e2:	855e                	mv	a0,s7
     7e4:	b76d                	j	78e <mini_vpprintf+0x166>

000007e6 <printf>:
{
     7e6:	7139                	addi	sp,sp,-64
     7e8:	d432                	sw	a2,40(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     7ea:	862a                	mv	a2,a0
{
     7ec:	d22e                	sw	a1,36(sp)
     7ee:	d636                	sw	a3,44(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     7f0:	4581                	li	a1,0
	va_start( args, format );
     7f2:	1054                	addi	a3,sp,36
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     7f4:	57c00513          	li	a0,1404
{
     7f8:	ce06                	sw	ra,28(sp)
     7fa:	d83a                	sw	a4,48(sp)
     7fc:	da3e                	sw	a5,52(sp)
     7fe:	dc42                	sw	a6,56(sp)
     800:	de46                	sw	a7,60(sp)
	va_start( args, format );
     802:	c636                	sw	a3,12(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     804:	3515                	jal	628 <mini_vpprintf>
}
     806:	40f2                	lw	ra,28(sp)
     808:	6121                	addi	sp,sp,64
     80a:	8082                	ret

0000080c <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     80c:	962a                	add	a2,a2,a0
     80e:	87aa                	mv	a5,a0
     810:	00c79363          	bne	a5,a2,816 <memset+0xa>
     814:	8082                	ret
     816:	00b78023          	sb	a1,0(a5)
     81a:	0785                	addi	a5,a5,1
     81c:	bfd5                	j	810 <memset+0x4>

0000081e <memcpy>:
{
     81e:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     820:	00f61363          	bne	a2,a5,826 <memcpy+0x8>
}
     824:	8082                	ret
	for (; n; n--) *d++ = *s++;
     826:	00f58733          	add	a4,a1,a5
     82a:	00074683          	lbu	a3,0(a4)
     82e:	00f50733          	add	a4,a0,a5
     832:	0785                	addi	a5,a5,1
     834:	00d70023          	sb	a3,0(a4)
     838:	b7e5                	j	820 <memcpy+0x2>

0000083a <memcmp>:
{
     83a:	4701                	li	a4,0
	for (; n && *l == *r; n--, l++, r++);
     83c:	02e60063          	beq	a2,a4,85c <memcmp+0x22>
     840:	00e507b3          	add	a5,a0,a4
     844:	0705                	addi	a4,a4,1
     846:	00e586b3          	add	a3,a1,a4
     84a:	0007c783          	lbu	a5,0(a5)
     84e:	fff6c683          	lbu	a3,-1(a3)
     852:	fed785e3          	beq	a5,a3,83c <memcmp+0x2>
	return n ? *l-*r : 0;
     856:	40d78533          	sub	a0,a5,a3
}
     85a:	8082                	ret
	return n ? *l-*r : 0;
     85c:	4501                	li	a0,0
     85e:	8082                	ret

00000860 <puts>:
{
     860:	1141                	addi	sp,sp,-16
     862:	c606                	sw	ra,12(sp)
     864:	c422                	sw	s0,8(sp)
     866:	c226                	sw	s1,4(sp)
     868:	84aa                	mv	s1,a0
	int sl = strlen( s );
     86a:	3375                	jal	616 <strlen>
     86c:	842a                	mv	s0,a0
	_write(0, s, sl );
     86e:	85aa                	mv	a1,a0
     870:	8526                	mv	a0,s1
     872:	3919                	jal	488 <_write.constprop.0>
	_write(0, "\n", 1 );
     874:	6505                	lui	a0,0x1
     876:	4585                	li	a1,1
     878:	58c50513          	addi	a0,a0,1420 # 158c <LLE_IRQHandler+0xbe>
     87c:	3131                	jal	488 <_write.constprop.0>
}
     87e:	40b2                	lw	ra,12(sp)
     880:	00140513          	addi	a0,s0,1
     884:	4422                	lw	s0,8(sp)
     886:	4492                	lw	s1,4(sp)
     888:	0141                	addi	sp,sp,16
     88a:	8082                	ret

0000088c <putchar>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     88c:	e00007b7          	lui	a5,0xe0000
     890:	3807a783          	lw	a5,896(a5) # e0000380 <_eusrstack+0xbfff8380>
     894:	0c000713          	li	a4,192
     898:	0c07f793          	andi	a5,a5,192
     89c:	04e78c63          	beq	a5,a4,8f4 <putchar+0x68>
{
     8a0:	1141                	addi	sp,sp,-16
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     8a2:	001007b7          	lui	a5,0x100
{
     8a6:	c422                	sw	s0,8(sp)
     8a8:	c606                	sw	ra,12(sp)
     8aa:	842a                	mv	s0,a0
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     8ac:	0785                	addi	a5,a5,1
	while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     8ae:	e00006b7          	lui	a3,0xe0000
     8b2:	3806a703          	lw	a4,896(a3) # e0000380 <_eusrstack+0xbfff8380>
     8b6:	38068613          	addi	a2,a3,896
     8ba:	08077593          	andi	a1,a4,128
     8be:	e185                	bnez	a1,8de <putchar+0x52>
	if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     8c0:	c311                	beqz	a4,8c4 <putchar+0x38>
     8c2:	3e75                	jal	47e <internal_handle_input.constprop.0>
	*DMDATA0 = 0x85 | ((const char)c<<8);
     8c4:	6541                	lui	a0,0x10
     8c6:	157d                	addi	a0,a0,-1
     8c8:	00841793          	slli	a5,s0,0x8
     8cc:	8fe9                	and	a5,a5,a0
     8ce:	0857e793          	ori	a5,a5,133
     8d2:	e0000737          	lui	a4,0xe0000
     8d6:	38f72023          	sw	a5,896(a4) # e0000380 <_eusrstack+0xbfff8380>
	return 1;
     8da:	4505                	li	a0,1
     8dc:	a801                	j	8ec <putchar+0x60>
		if( timeout-- == 0 )
     8de:	17fd                	addi	a5,a5,-1
     8e0:	fbe9                	bnez	a5,8b2 <putchar+0x26>
			*DMDATA0 |= 0xc0;
     8e2:	421c                	lw	a5,0(a2)
     8e4:	4501                	li	a0,0
     8e6:	0c07e793          	ori	a5,a5,192
     8ea:	c21c                	sw	a5,0(a2)
}
     8ec:	40b2                	lw	ra,12(sp)
     8ee:	4422                	lw	s0,8(sp)
     8f0:	0141                	addi	sp,sp,16
     8f2:	8082                	ret
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     8f4:	4501                	li	a0,0
}
     8f6:	8082                	ret

000008f8 <SystemInit>:
			R8_CLK_SYS_CFG = sc;
		);
	}
#else // ch5xx EXCEPT ch570/2 ch584/5
	SYS_CLKTypeDef sc = CLK_SOURCE_CH5XX;
	SYS_SAFE_ACCESS(
     8f8:	400017b7          	lui	a5,0x40001
     8fc:	05700693          	li	a3,87
     900:	04d78023          	sb	a3,64(a5) # 40001040 <_eusrstack+0x1fff9040>
     904:	fa800713          	li	a4,-88
     908:	04e78023          	sb	a4,64(a5)
     90c:	0001                	nop
     90e:	0001                	nop
     910:	04b7c603          	lbu	a2,75(a5)
     914:	0df67613          	andi	a2,a2,223
     918:	04c785a3          	sb	a2,75(a5)
     91c:	04078023          	sb	zero,64(a5)
     920:	0001                	nop
     922:	0001                	nop
		ADD_N_NOPS(4);
		R8_FLASH_CFG = 0X51;
	}
	else if(sc & 0x40) // PLL div
	{
		SYS_SAFE_ACCESS(
     924:	04d78023          	sb	a3,64(a5)
     928:	04e78023          	sb	a4,64(a5)
     92c:	0001                	nop
     92e:	0001                	nop
     930:	00140637          	lui	a2,0x140
     934:	04860613          	addi	a2,a2,72 # 140048 <iSLER_mess.c.19bd7d4e+0x13d5fc>
     938:	c790                	sw	a2,8(a5)
     93a:	04078023          	sb	zero,64(a5)
     93e:	0001                	nop
     940:	0001                	nop
			R32_CLK_SYS_CFG = (1 << 6) | (sc & 0x1f) | RB_TX_32M_PWR_EN | RB_PLL_PWR_EN;
		);
		ADD_N_NOPS(4);
     942:	0001                	nop
     944:	0001                	nop
     946:	0001                	nop
     948:	0001                	nop
		R8_FLASH_CFG = 0x52;
     94a:	40002637          	lui	a2,0x40002
     94e:	05200593          	li	a1,82
     952:	80b603a3          	sb	a1,-2041(a2) # 40001807 <_eusrstack+0x1fff9807>
		SYS_SAFE_ACCESS(
			R32_CLK_SYS_CFG |= RB_CLK_SYS_MOD;
		);
	}

	SYS_SAFE_ACCESS(
     956:	04d78023          	sb	a3,64(a5)
     95a:	04e78023          	sb	a4,64(a5)
     95e:	0001                	nop
     960:	0001                	nop
     962:	04b7c703          	lbu	a4,75(a5)
     966:	f8076713          	ori	a4,a4,-128
     96a:	0ff77713          	andi	a4,a4,255
     96e:	04e785a3          	sb	a4,75(a5)
     972:	04078023          	sb	zero,64(a5)
     976:	0001                	nop
     978:	0001                	nop
	*DMDATA1 = 0x00;
     97a:	e00007b7          	lui	a5,0xe0000
     97e:	3807a223          	sw	zero,900(a5) # e0000384 <_eusrstack+0xbfff8384>
	*DMDATA0 = 0x80;
     982:	08000713          	li	a4,128
     986:	38e7a023          	sw	a4,896(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     98a:	8082                	ret

0000098c <main>:

int main() {
     98c:	7115                	addi	sp,sp,-224
     98e:	cf86                	sw	ra,220(sp)
     990:	cda2                	sw	s0,216(sp)
     992:	cba6                	sw	s1,212(sp)
     994:	1180                	addi	s0,sp,224
     996:	c9ca                	sw	s2,208(sp)
     998:	c7ce                	sw	s3,204(sp)
     99a:	c5d2                	sw	s4,200(sp)
     99c:	c3d6                	sw	s5,196(sp)
     99e:	c1da                	sw	s6,192(sp)
     9a0:	df5e                	sw	s7,188(sp)
     9a2:	dd62                	sw	s8,184(sp)
     9a4:	db66                	sw	s9,180(sp)
     9a6:	d96a                	sw	s10,176(sp)
     9a8:	d76e                	sw	s11,172(sp)
	SystemInit();
     9aa:	37b9                	jal	8f8 <SystemInit>
	SysTick->CTLR = 0x0000;
     9ac:	e000f7b7          	lui	a5,0xe000f
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     9b0:	663d                	lui	a2,0xf
	SysTick->CTLR = 0x0000;
     9b2:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc0007000>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     9b6:	a5f60613          	addi	a2,a2,-1441 # ea5f <iSLER_mess.c.19bd7d4e+0xc013>
     9ba:	cb90                	sw	a2,16(a5)
     9bc:	4681                	li	a3,0
     9be:	cbd4                	sw	a3,20(a5)
	SysTick->CNT = 0x00000000;
     9c0:	4681                	li	a3,0
     9c2:	c794                	sw	a3,8(a5)
     9c4:	4701                	li	a4,0
     9c6:	c7d8                	sw	a4,12(a5)
	systick_millis = 0x00000000;
     9c8:	c9818713          	addi	a4,gp,-872 # 20000094 <systick_millis>
     9cc:	00072023          	sw	zero,0(a4)
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
     9d0:	4398                	lw	a4,0(a5)
}

// Enable Interrupt (by interrupt number)
RV_STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     9d2:	e000e637          	lui	a2,0xe000e
     9d6:	6d05                	lui	s10,0x1
     9d8:	00776713          	ori	a4,a4,7
     9dc:	c398                	sw	a4,0(a5)
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) |= (pin & ~PB);
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     &= ~(pin & ~PB);
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
		break;
	case GPIO_ModeOut_PP_5mA:
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     9de:	400017b7          	lui	a5,0x40001
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     9e2:	11a62023          	sw	s10,256(a2) # e000e100 <_eusrstack+0xc0006100>
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     9e6:	08078793          	addi	a5,a5,128 # 40001080 <_eusrstack+0x1fff9080>
     9ea:	5bd8                	lw	a4,52(a5)
	LL->LL5 = 0x8c;
     9ec:	08c00693          	li	a3,140
	LL->LL7 = 0x76;
     9f0:	07600593          	li	a1,118
     9f4:	eff77713          	andi	a4,a4,-257
     9f8:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    |= (pin & ~PB);
     9fa:	5398                	lw	a4,32(a5)
	LL->STATE_BUF = (uint32_t)LLE_BUF;
     9fc:	ca418b13          	addi	s6,gp,-860 # 200000a0 <LLE_BUF>
     a00:	10076713          	ori	a4,a4,256
     a04:	d398                	sw	a4,32(a5)
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     a06:	5bd8                	lw	a4,52(a5)
	RF->RF10 = 0x480;
     a08:	4000d937          	lui	s2,0x4000d
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
     a0c:	90000337          	lui	t1,0x90000
     a10:	bff77713          	andi	a4,a4,-1025
     a14:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     |= (pin & ~PB);
     a16:	5b98                	lw	a4,48(a5)
     a18:	137d                	addi	t1,t1,-1
     a1a:	20000e37          	lui	t3,0x20000
     a1e:	40076713          	ori	a4,a4,1024
     a22:	db98                	sw	a4,48(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
     a24:	5398                	lw	a4,32(a5)
	RF->RF18 |= 0x80000000;
     a26:	80000837          	lui	a6,0x80000
	RF->RF19 |= 0x2000000;
     a2a:	02000eb7          	lui	t4,0x2000
     a2e:	bff77713          	andi	a4,a4,-1025
     a32:	d398                	sw	a4,32(a5)
	LL->LL5 = 0x8c;
     a34:	4000c7b7          	lui	a5,0x4000c
     a38:	20078713          	addi	a4,a5,512 # 4000c200 <_eusrstack+0x20004200>
     a3c:	cb54                	sw	a3,20(a4)
	LL->LL7 = 0x76;
     a3e:	cf4c                	sw	a1,28(a4)
	LL->LL9 = 0x8c;
     a40:	d354                	sw	a3,36(a4)
	LL->LL13 = 0x8c;
     a42:	db54                	sw	a3,52(a4)
	LL->LL17 = 0x8c;
     a44:	c374                	sw	a3,68(a4)
	LL->LL19 = 0x76;
     a46:	c76c                	sw	a1,76(a4)
	LL->LL11 = 0x3c;
     a48:	03c00693          	li	a3,60
     a4c:	d754                	sw	a3,44(a4)
	LL->LL15 = 0x3c;
     a4e:	df54                	sw	a3,60(a4)
	LL->INT_EN = 0xf00f;
     a50:	66bd                	lui	a3,0xf
     a52:	06bd                	addi	a3,a3,15
     a54:	c754                	sw	a3,12(a4)
	LL->STATE_BUF = (uint32_t)LLE_BUF;
     a56:	07672a23          	sw	s6,116(a4)
	LL->STATUS = 0xffffffff;
     a5a:	56fd                	li	a3,-1
     a5c:	c714                	sw	a3,8(a4)
	RF->RF10 = 0x480;
     a5e:	48000713          	li	a4,1152
     a62:	02e92423          	sw	a4,40(s2) # 4000d028 <_eusrstack+0x20005028>
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
     a66:	04892703          	lw	a4,72(s2)
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
     a6a:	f90006b7          	lui	a3,0xf9000
     a6e:	16fd                	addi	a3,a3,-1
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
     a70:	00677733          	and	a4,a4,t1
     a74:	01c76733          	or	a4,a4,t3
     a78:	04e92423          	sw	a4,72(s2)
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
     a7c:	04892703          	lw	a4,72(s2)
     a80:	040005b7          	lui	a1,0x4000
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
     a84:	78c5                	lui	a7,0xffff1
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
     a86:	8f75                	and	a4,a4,a3
     a88:	8f4d                	or	a4,a4,a1
     a8a:	04e92423          	sw	a4,72(s2)
	RF->RF18 = (RF->RF18 & 0xfffffff0) | 9;
     a8e:	04892703          	lw	a4,72(s2)
	RF->RF18 &= 0xfff8ffff;
     a92:	fff905b7          	lui	a1,0xfff90
     a96:	15fd                	addi	a1,a1,-1
	RF->RF18 = (RF->RF18 & 0xfffffff0) | 9;
     a98:	9b41                	andi	a4,a4,-16
     a9a:	00976713          	ori	a4,a4,9
     a9e:	04e92423          	sw	a4,72(s2)
	RF->RF18 &= 0xfff8ffff;
     aa2:	04892703          	lw	a4,72(s2)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
     aa6:	6511                	lui	a0,0x4
	RF->RF21 &= 0xffffefff;
     aa8:	79fd                	lui	s3,0xfffff
	RF->RF18 &= 0xfff8ffff;
     aaa:	8f6d                	and	a4,a4,a1
     aac:	04e92423          	sw	a4,72(s2)
	RF->RF18 |= 0x80000000;
     ab0:	04892703          	lw	a4,72(s2)
	RF->RF19 &= 0xfeffffff;
     ab4:	ff0005b7          	lui	a1,0xff000
     ab8:	15fd                	addi	a1,a1,-1
	RF->RF18 |= 0x80000000;
     aba:	01076733          	or	a4,a4,a6
     abe:	04e92423          	sw	a4,72(s2)
	RF->RF19 = (RF->RF19 & 0xfffffff8) | 3;
     ac2:	04c92703          	lw	a4,76(s2)
	RF->RF21 &= 0xffffefff;
     ac6:	19fd                	addi	s3,s3,-1
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
     ac8:	1e7d                	addi	t3,t3,-1
	RF->RF19 = (RF->RF19 & 0xfffffff8) | 3;
     aca:	9b61                	andi	a4,a4,-8
     acc:	00376713          	ori	a4,a4,3
     ad0:	04e92623          	sw	a4,76(s2)
	RF->RF19 = (RF->RF19 & 0xffffff8f) | 0x30;
     ad4:	04c92703          	lw	a4,76(s2)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
     ad8:	00020ab7          	lui	s5,0x20
	BB->CTRL_CFG |= 0x800000;
     adc:	10078793          	addi	a5,a5,256
	RF->RF19 = (RF->RF19 & 0xffffff8f) | 0x30;
     ae0:	f8f77713          	andi	a4,a4,-113
     ae4:	03076713          	ori	a4,a4,48
     ae8:	04e92623          	sw	a4,76(s2)
	RF->RF19 = (RF->RF19 & 0xfffff8ff) | 0x300;
     aec:	04c92703          	lw	a4,76(s2)
	NVIC->VTFIDR[3] = 0x14;
     af0:	4cd1                	li	s9,20
     af2:	c9818a13          	addi	s4,gp,-872 # 20000094 <systick_millis>
	RF->RF19 = (RF->RF19 & 0xfffff8ff) | 0x300;
     af6:	8ff77713          	andi	a4,a4,-1793
     afa:	30076713          	ori	a4,a4,768
     afe:	04e92623          	sw	a4,76(s2)
	RF->RF19 &= 0xfeffffff;
     b02:	04c92703          	lw	a4,76(s2)
     b06:	ca418493          	addi	s1,gp,-860 # 200000a0 <LLE_BUF>
	uint8_t tune = 0;
	uint8_t int_points = sizeof(RF->TXCTUNE_CO) /2;
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
	for(int f = 0; f < int_points; f++) {
		tune = (dCO0140 * (int_points -f)) / int_points;
		txctune_co[f] = tune | (tune << 4);
     b0a:	1d41                	addi	s10,s10,-16
	RF->RF19 &= 0xfeffffff;
     b0c:	8f6d                	and	a4,a4,a1
     b0e:	04e92623          	sw	a4,76(s2)
	RF->RF19 |= 0x2000000;
     b12:	04c92703          	lw	a4,76(s2)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
     b16:	fff88593          	addi	a1,a7,-1 # ffff0fff <_eusrstack+0xdffe8fff>
	RF->RF19 |= 0x2000000;
     b1a:	01d76733          	or	a4,a4,t4
     b1e:	04e92623          	sw	a4,76(s2)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
     b22:	05092703          	lw	a4,80(s2)
     b26:	8f6d                	and	a4,a4,a1
     b28:	8f49                	or	a4,a4,a0
     b2a:	04e92823          	sw	a4,80(s2)
	RF->RF21 = (RF->RF21 & 0xfffffff0) | 0xc;
     b2e:	05492703          	lw	a4,84(s2)
     b32:	9b41                	andi	a4,a4,-16
     b34:	00c76713          	ori	a4,a4,12
     b38:	04e92a23          	sw	a4,84(s2)
	RF->RF21 |= 0x80;
     b3c:	05492703          	lw	a4,84(s2)
     b40:	08076713          	ori	a4,a4,128
     b44:	04e92a23          	sw	a4,84(s2)
	RF->RF21 &= 0xffffefff;
     b48:	05492703          	lw	a4,84(s2)
     b4c:	01377733          	and	a4,a4,s3
     b50:	04e92a23          	sw	a4,84(s2)
	RF->RF15 = (RF->RF15 & 0xffff0fff) | 0x8000;
     b54:	03c92883          	lw	a7,60(s2)
     b58:	6721                	lui	a4,0x8
     b5a:	00b8f8b3          	and	a7,a7,a1
     b5e:	00e8e8b3          	or	a7,a7,a4
     b62:	03192e23          	sw	a7,60(s2)
	RF->RF15 = (RF->RF15 & 0xf8ffffff) | 0x2000000;
     b66:	03c92503          	lw	a0,60(s2)
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
     b6a:	40000737          	lui	a4,0x40000
	RF->RF15 = (RF->RF15 & 0xf8ffffff) | 0x2000000;
     b6e:	8d75                	and	a0,a0,a3
     b70:	01d56533          	or	a0,a0,t4
     b74:	02a92e23          	sw	a0,60(s2)
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
     b78:	03c92583          	lw	a1,60(s2)
	RF->RF11 |= 0x700000;
     b7c:	00700537          	lui	a0,0x700
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
     b80:	01c5f5b3          	and	a1,a1,t3
     b84:	8dd9                	or	a1,a1,a4
     b86:	02b92e23          	sw	a1,60(s2)
	RF->RF11 |= 0x700000;
     b8a:	02c92703          	lw	a4,44(s2)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
     b8e:	fffd05b7          	lui	a1,0xfffd0
     b92:	15fd                	addi	a1,a1,-1
	RF->RF11 |= 0x700000;
     b94:	8f49                	or	a4,a4,a0
     b96:	02e92623          	sw	a4,44(s2)
	RF->RF11 &= 0xf8ffffff;
     b9a:	02c92703          	lw	a4,44(s2)
     b9e:	8ef9                	and	a3,a3,a4
     ba0:	02d92623          	sw	a3,44(s2)
	RF->RF11 = (RF->RF11 & 0xffffcfff) | 0x2000;
     ba4:	02c92683          	lw	a3,44(s2)
     ba8:	7775                	lui	a4,0xffffd
     baa:	177d                	addi	a4,a4,-1
     bac:	8ef9                	and	a3,a3,a4
     bae:	6709                	lui	a4,0x2
     bb0:	8ed9                	or	a3,a3,a4
     bb2:	02d92623          	sw	a3,44(s2)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
     bb6:	02c92683          	lw	a3,44(s2)
     bba:	8eed                	and	a3,a3,a1
     bbc:	0156e6b3          	or	a3,a3,s5
     bc0:	02d92623          	sw	a3,44(s2)
	RF->RF12 &= 0xfffffff0;
     bc4:	03092683          	lw	a3,48(s2)
     bc8:	9ac1                	andi	a3,a3,-16
     bca:	02d92823          	sw	a3,48(s2)
	RF->RF12 &= 0xffffff0f;
     bce:	03092683          	lw	a3,48(s2)
     bd2:	f0f6f693          	andi	a3,a3,-241
     bd6:	02d92823          	sw	a3,48(s2)
	RF->RF12 &= 0xfffff8ff;
     bda:	03092683          	lw	a3,48(s2)
     bde:	8ff6f693          	andi	a3,a3,-1793
     be2:	02d92823          	sw	a3,48(s2)
	RF->RF12 |= 0x700000;
     be6:	03092703          	lw	a4,48(s2)
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
     bea:	500006b7          	lui	a3,0x50000
	RF->RF12 |= 0x700000;
     bee:	8f49                	or	a4,a4,a0
     bf0:	02e92823          	sw	a4,48(s2)
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
     bf4:	03092703          	lw	a4,48(s2)
	RF->RF3 = (RF->RF3 & 0xfffffeff) | 0x100;
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
}

void RegInit() {
	DevSetMode(DEVSETMODE_TUNE);
     bf8:	0dd00513          	li	a0,221
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
     bfc:	00677733          	and	a4,a4,t1
     c00:	8f55                	or	a4,a4,a3
     c02:	02e92823          	sw	a4,48(s2)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xff07ffff) | RFEND_TXCTUNE_INIT;
     c06:	03892703          	lw	a4,56(s2)
     c0a:	ff0806b7          	lui	a3,0xff080
     c0e:	16fd                	addi	a3,a3,-1
     c10:	8f75                	and	a4,a4,a3
     c12:	008806b7          	lui	a3,0x880
     c16:	8f55                	or	a4,a4,a3
     c18:	02e92c23          	sw	a4,56(s2)
	RF->TXTUNE_CTRL |= 0x80000000;
     c1c:	03892703          	lw	a4,56(s2)
	BB->CTRL_CFG |= 0x800000;
     c20:	008006b7          	lui	a3,0x800
	RF->TXTUNE_CTRL |= 0x80000000;
     c24:	01076833          	or	a6,a4,a6
     c28:	03092c23          	sw	a6,56(s2)
	BB->CTRL_CFG |= 0x800000;
     c2c:	4398                	lw	a4,0(a5)
     c2e:	8f55                	or	a4,a4,a3
     c30:	c398                	sw	a4,0(a5)
	BB->CTRL_CFG |= 0x10000000;
     c32:	4398                	lw	a4,0(a5)
     c34:	100006b7          	lui	a3,0x10000
     c38:	8f55                	or	a4,a4,a3
     c3a:	c398                	sw	a4,0(a5)
	BB->BB13 = 0x1d0;
     c3c:	1d000713          	li	a4,464
     c40:	dbd8                	sw	a4,52(a5)
	BB->CTRL_TX = TxPower << 0x19 | CTRL_TX_TXPOWER;
     c42:	a4011737          	lui	a4,0xa4011
     c46:	e7870713          	addi	a4,a4,-392 # a4010e78 <_eusrstack+0x84008e78>
     c4a:	d7d8                	sw	a4,44(a5)
	BB->CTRL_TX = (BB->CTRL_TX & 0x81ffffff) | (TxPower & 0x3f) << 0x19;
     c4c:	57d8                	lw	a4,44(a5)
     c4e:	820006b7          	lui	a3,0x82000
     c52:	16fd                	addi	a3,a3,-1
     c54:	8f75                	and	a4,a4,a3
     c56:	240006b7          	lui	a3,0x24000
     c5a:	8f55                	or	a4,a4,a3
     c5c:	d7d8                	sw	a4,44(a5)
	BB->BB8 = 0x90083;
     c5e:	00090737          	lui	a4,0x90
     c62:	08370713          	addi	a4,a4,131 # 90083 <iSLER_mess.c.19bd7d4e+0x8d637>
     c66:	d398                	sw	a4,32(a5)
	NVIC->VTFIDR[3] = 0x14;
     c68:	059609a3          	sb	s9,83(a2)
	DevSetMode(DEVSETMODE_TUNE);
     c6c:	d4cff0ef          	jal	ra,1b8 <DevSetMode>
	RF->RF1 &= 0xfffffeff;
     c70:	00492783          	lw	a5,4(s2)
	uint32_t tune2401 = RFEND_TXCTune(37);
     c74:	02500513          	li	a0,37
	RF->RF1 &= 0xfffffeff;
     c78:	eff7f793          	andi	a5,a5,-257
     c7c:	00f92223          	sw	a5,4(s2)
	RF->RF10 &= 0xffffefff;
     c80:	02892783          	lw	a5,40(s2)
     c84:	0137f9b3          	and	s3,a5,s3
     c88:	03392423          	sw	s3,40(s2)
	RF->RF11 &= 0xffffffef;
     c8c:	02c92783          	lw	a5,44(s2)
     c90:	9bbd                	andi	a5,a5,-17
     c92:	02f92623          	sw	a5,44(s2)
	RF->RF2 |= 0x20000;
     c96:	00892783          	lw	a5,8(s2)
     c9a:	0157e7b3          	or	a5,a5,s5
     c9e:	00f92423          	sw	a5,8(s2)
	RF->RF1 |= 0x10;
     ca2:	00492783          	lw	a5,4(s2)
     ca6:	0107e793          	ori	a5,a5,16
     caa:	00f92223          	sw	a5,4(s2)
	uint32_t tune2401 = RFEND_TXCTune(37);
     cae:	d58ff0ef          	jal	ra,206 <RFEND_TXCTune>
     cb2:	892a                	mv	s2,a0
	uint8_t nGA2401 = (uint8_t)(tune2401 >> 24) & 0x7f;
     cb4:	01855c13          	srli	s8,a0,0x18
	uint32_t tune2480 = RFEND_TXCTune(39);
     cb8:	02700513          	li	a0,39
     cbc:	d4aff0ef          	jal	ra,206 <RFEND_TXCTune>
	uint8_t nGA2480 = (uint8_t)(tune2480 >> 24) & 0x7f;
     cc0:	01855693          	srli	a3,a0,0x18
     cc4:	07f6f693          	andi	a3,a3,127
	uint32_t tune2480 = RFEND_TXCTune(39);
     cc8:	89aa                	mv	s3,a0
	uint32_t tune2440 = RFEND_TXCTune(18);
     cca:	4549                	li	a0,18
	uint8_t nGA2480 = (uint8_t)(tune2480 >> 24) & 0x7f;
     ccc:	f2d42e23          	sw	a3,-196(s0)
	uint32_t tune2440 = RFEND_TXCTune(18);
     cd0:	d36ff0ef          	jal	ra,206 <RFEND_TXCTune>
	uint8_t nCO2440 = (uint8_t)(tune2440 & 0x3f);
     cd4:	03f57d93          	andi	s11,a0,63
	uint8_t nGA2440 = (uint8_t)(tune2440 >> 24) & 0x7f;
     cd8:	01855b93          	srli	s7,a0,0x18
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
     cdc:	4581                	li	a1,0
	uint32_t tune2440 = RFEND_TXCTune(18);
     cde:	8aaa                	mv	s5,a0
	uint32_t dCO0140 = nCO2401 - nCO2440;
     ce0:	03f97913          	andi	s2,s2,63
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
     ce4:	02400613          	li	a2,36
     ce8:	f5040513          	addi	a0,s0,-176
	uint32_t dCO0140 = nCO2401 - nCO2440;
     cec:	41b90933          	sub	s2,s2,s11
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
     cf0:	f4042623          	sw	zero,-180(s0)
     cf4:	3e21                	jal	80c <memset>
     cf6:	03990733          	mul	a4,s2,s9
		txctune_co[f] = tune | (tune << 4);
     cfa:	f3c42683          	lw	a3,-196(s0)
	uint32_t dCO4080 = nCO2440 - nCO2480;
     cfe:	03f9f993          	andi	s3,s3,63
	uint8_t nGA2401 = (uint8_t)(tune2401 >> 24) & 0x7f;
     d02:	07fc7c13          	andi	s8,s8,127
	uint8_t nGA2440 = (uint8_t)(tune2440 >> 24) & 0x7f;
     d06:	07fbfb93          	andi	s7,s7,127
	uint32_t dCO4080 = nCO2440 - nCO2480;
     d0a:	413d89b3          	sub	s3,s11,s3
	for(int f = 0; f < int_points; f++) {
     d0e:	4781                	li	a5,0
		tune = (dCO0140 * (int_points -f)) / int_points;
     d10:	45d1                	li	a1,20
		txctune_co[f] = tune | (tune << 4);
     d12:	f4c40613          	addi	a2,s0,-180
     d16:	00f60833          	add	a6,a2,a5
		tune = (dCO0140 * (int_points -f)) / int_points;
     d1a:	02b75533          	divu	a0,a4,a1
	for(int f = 0; f < int_points; f++) {
     d1e:	0785                	addi	a5,a5,1
     d20:	41270733          	sub	a4,a4,s2
		txctune_co[f] = tune | (tune << 4);
     d24:	00451613          	slli	a2,a0,0x4
     d28:	01a67633          	and	a2,a2,s10
     d2c:	8e49                	or	a2,a2,a0
     d2e:	00c80023          	sb	a2,0(a6) # 80000000 <_eusrstack+0x5fff8000>
	for(int f = 0; f < int_points; f++) {
     d32:	feb790e3          	bne	a5,a1,d12 <main+0x386>
		txctune_co[f] = tune | (tune << 4);
     d36:	6585                	lui	a1,0x1
	for(int f = 0; f < int_points; f++) {
     d38:	4601                	li	a2,0
		tune = (dCO4080 * (f -int_points)) / int_points;
     d3a:	4351                	li	t1,20
		txctune_co[f] = tune | (tune << 4);
     d3c:	15c1                	addi	a1,a1,-16
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
     d3e:	02800813          	li	a6,40
		tune = (dCO4080 * (f -int_points)) / int_points;
     d42:	02665533          	divu	a0,a2,t1
		txctune_co[f] = tune | (tune << 4);
     d46:	f4c40713          	addi	a4,s0,-180
     d4a:	00f708b3          	add	a7,a4,a5
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
     d4e:	0785                	addi	a5,a5,1
     d50:	964e                	add	a2,a2,s3
		txctune_co[f] = tune | (tune << 4);
     d52:	00451713          	slli	a4,a0,0x4
     d56:	8f6d                	and	a4,a4,a1
     d58:	8f49                	or	a4,a4,a0
     d5a:	00e88023          	sb	a4,0(a7)
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
     d5e:	ff0792e3          	bne	a5,a6,d42 <main+0x3b6>
     d62:	f4c40613          	addi	a2,s0,-180
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
     d66:	4701                	li	a4,0
		RF->TXCTUNE_CO[i] = ((uint32_t*)txctune_co)[i];
     d68:	4000d837          	lui	a6,0x4000d
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
     d6c:	45a9                	li	a1,10
		RF->TXCTUNE_CO[i] = ((uint32_t*)txctune_co)[i];
     d6e:	4208                	lw	a0,0(a2)
     d70:	02870793          	addi	a5,a4,40
     d74:	078a                	slli	a5,a5,0x2
     d76:	97c2                	add	a5,a5,a6
     d78:	c388                	sw	a0,0(a5)
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
     d7a:	0705                	addi	a4,a4,1
     d7c:	0611                	addi	a2,a2,4
     d7e:	feb718e3          	bne	a4,a1,d6e <main+0x3e2>
	uint32_t dGA0140 = nGA2401 - nGA2440;
     d82:	417c0c33          	sub	s8,s8,s7
	uint32_t dGA4080 = nGA2440 - nGA2480;
     d86:	4715                	li	a4,5
     d88:	02ec0733          	mul	a4,s8,a4
		txctune_ga[f] = tune | (tune << 4);
     d8c:	6605                	lui	a2,0x1
	uint32_t dGA4080 = nGA2440 - nGA2480;
     d8e:	40db8bb3          	sub	s7,s7,a3
	uint8_t txctune_ga[sizeof(RF->TXCTUNE_GA)] = {0};
     d92:	f4042023          	sw	zero,-192(s0)
     d96:	f4042223          	sw	zero,-188(s0)
     d9a:	f4042423          	sw	zero,-184(s0)
	for(int f = 1; f < int_points; f++) {
     d9e:	4785                	li	a5,1
		tune = (dGA0140 * (int_points -f)) / int_points;
     da0:	4599                	li	a1,6
		txctune_ga[f] = tune | (tune << 4);
     da2:	1641                	addi	a2,a2,-16
     da4:	f4040693          	addi	a3,s0,-192
		tune = (dGA0140 * (int_points -f)) / int_points;
     da8:	02b75533          	divu	a0,a4,a1
		txctune_ga[f] = tune | (tune << 4);
     dac:	00f68833          	add	a6,a3,a5
	for(int f = 1; f < int_points; f++) {
     db0:	0785                	addi	a5,a5,1
     db2:	41870733          	sub	a4,a4,s8
		txctune_ga[f] = tune | (tune << 4);
     db6:	00451693          	slli	a3,a0,0x4
     dba:	8ef1                	and	a3,a3,a2
     dbc:	8ec9                	or	a3,a3,a0
     dbe:	00d80023          	sb	a3,0(a6) # 4000d000 <_eusrstack+0x20005000>
	for(int f = 1; f < int_points; f++) {
     dc2:	feb791e3          	bne	a5,a1,da4 <main+0x418>
		txctune_ga[f] = tune | (tune << 4);
     dc6:	6605                	lui	a2,0x1
	for(int f = 1; f < int_points; f++) {
     dc8:	4701                	li	a4,0
		tune = (dGA4080 * (f -int_points)) / int_points;
     dca:	4319                	li	t1,6
		txctune_ga[f] = tune | (tune << 4);
     dcc:	ff060893          	addi	a7,a2,-16 # ff0 <main+0x664>
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
     dd0:	452d                	li	a0,11
		tune = (dGA4080 * (f -int_points)) / int_points;
     dd2:	026755b3          	divu	a1,a4,t1
		txctune_ga[f] = tune | (tune << 4);
     dd6:	f4040693          	addi	a3,s0,-192
     dda:	00f68833          	add	a6,a3,a5
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
     dde:	0785                	addi	a5,a5,1
     de0:	975e                	add	a4,a4,s7
		txctune_ga[f] = tune | (tune << 4);
     de2:	00459693          	slli	a3,a1,0x4
     de6:	0116f6b3          	and	a3,a3,a7
     dea:	8ecd                	or	a3,a3,a1
     dec:	00d80023          	sb	a3,0(a6)
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
     df0:	fea791e3          	bne	a5,a0,dd2 <main+0x446>
		RF->TXCTUNE_GA[i] = ((uint32_t*)txctune_ga)[i];
     df4:	f4042683          	lw	a3,-192(s0)
     df8:	4000d7b7          	lui	a5,0x4000d
     dfc:	08078713          	addi	a4,a5,128 # 4000d080 <_eusrstack+0x20005080>
     e00:	c734                	sw	a3,72(a4)
     e02:	f4442683          	lw	a3,-188(s0)
     e06:	c774                	sw	a3,76(a4)
     e08:	f4842683          	lw	a3,-184(s0)
     e0c:	cb34                	sw	a3,80(a4)
	RF->RF1 &= 0xffffffef;
     e0e:	43d8                	lw	a4,4(a5)
	RF->RF20 &= 0xfffeffff;
     e10:	76c1                	lui	a3,0xffff0
     e12:	16fd                	addi	a3,a3,-1
	RF->RF1 &= 0xffffffef;
     e14:	9b3d                	andi	a4,a4,-17
     e16:	c3d8                	sw	a4,4(a5)
	RF->RF1 &= 0xfffffffe;
     e18:	43d8                	lw	a4,4(a5)
     e1a:	9b79                	andi	a4,a4,-2
     e1c:	c3d8                	sw	a4,4(a5)
	RF->RF10 |= 0x1000;
     e1e:	5798                	lw	a4,40(a5)
     e20:	8f51                	or	a4,a4,a2
     e22:	d798                	sw	a4,40(a5)
	RF->RF11 |= 0x10;
     e24:	57d8                	lw	a4,44(a5)
     e26:	01076713          	ori	a4,a4,16
     e2a:	d7d8                	sw	a4,44(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xffffffc0) | (tune2440 & 0x3f);
     e2c:	5f98                	lw	a4,56(a5)
     e2e:	fc077713          	andi	a4,a4,-64
     e32:	01b76733          	or	a4,a4,s11
     e36:	df98                	sw	a4,56(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0x80ffffff) | (tune2440 & 0x7f000000);
     e38:	5f88                	lw	a0,56(a5)
     e3a:	81000737          	lui	a4,0x81000
     e3e:	177d                	addi	a4,a4,-1
     e40:	8f69                	and	a4,a4,a0
     e42:	7f000537          	lui	a0,0x7f000
     e46:	00aaf533          	and	a0,s5,a0
     e4a:	8d59                	or	a0,a0,a4
     e4c:	df88                	sw	a0,56(a5)
	RF->RF1 |= 0x100;
     e4e:	43d8                	lw	a4,4(a5)
     e50:	10076713          	ori	a4,a4,256
     e54:	c3d8                	sw	a4,4(a5)
	RF->RF20 &= 0xfffeffff;
     e56:	4bb8                	lw	a4,80(a5)
     e58:	8f75                	and	a4,a4,a3
     e5a:	cbb8                	sw	a4,80(a5)
	RF->RF2 |= 0x200000;
     e5c:	4798                	lw	a4,8(a5)
     e5e:	002006b7          	lui	a3,0x200
     e62:	8f55                	or	a4,a4,a3
     e64:	c798                	sw	a4,8(a5)
	RF->RF3 = (RF->RF3 & 0xffffffef) | 0x10;
     e66:	47d8                	lw	a4,12(a5)
	while(LL->TMR && ((RF->RXTUNE >> 8) & 1));
     e68:	4000c6b7          	lui	a3,0x4000c
	RF->RF3 = (RF->RF3 & 0xffffffef) | 0x10;
     e6c:	01076713          	ori	a4,a4,16
     e70:	c7d8                	sw	a4,12(a5)
	RF->RF1 |= 0x1000;
     e72:	43d8                	lw	a4,4(a5)
     e74:	8f51                	or	a4,a4,a2
     e76:	c3d8                	sw	a4,4(a5)
	LL->TMR = 100;
     e78:	4000c7b7          	lui	a5,0x4000c
     e7c:	06400713          	li	a4,100
     e80:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
     e84:	d3f8                	sw	a4,100(a5)
	while(LL->TMR && ((RF->RXTUNE >> 8) & 1));
     e86:	4000d737          	lui	a4,0x4000d
     e8a:	20068793          	addi	a5,a3,512 # 4000c200 <_eusrstack+0x20004200>
     e8e:	53fc                	lw	a5,100(a5)
     e90:	c791                	beqz	a5,e9c <main+0x510>
     e92:	09c72783          	lw	a5,156(a4) # 4000d09c <_eusrstack+0x2000509c>
     e96:	1007f793          	andi	a5,a5,256
     e9a:	fbe5                	bnez	a5,e8a <main+0x4fe>
	tuneFilter = RF->RXTUNE & 0x1f;
     e9c:	4000d7b7          	lui	a5,0x4000d
     ea0:	08078713          	addi	a4,a5,128 # 4000d080 <_eusrstack+0x20005080>
     ea4:	4f54                	lw	a3,28(a4)
     ea6:	c9c18713          	addi	a4,gp,-868 # 20000098 <tuneFilter>
     eaa:	8afd                	andi	a3,a3,31
     eac:	c314                	sw	a3,0(a4)
	RF->RF20 |= 0x10000;
     eae:	4bb4                	lw	a3,80(a5)
     eb0:	6641                	lui	a2,0x10
     eb2:	8ed1                	or	a3,a3,a2
     eb4:	cbb4                	sw	a3,80(a5)
	RF->RF20 = (RF->RF20 & 0xffffffe0) | tuneFilter;
     eb6:	4bb4                	lw	a3,80(a5)
     eb8:	4310                	lw	a2,0(a4)
     eba:	9a81                	andi	a3,a3,-32
     ebc:	8ed1                	or	a3,a3,a2
     ebe:	cbb4                	sw	a3,80(a5)
	RF->RF2 &= 0xffdfffff;
     ec0:	4794                	lw	a3,8(a5)
     ec2:	ffe00637          	lui	a2,0xffe00
     ec6:	167d                	addi	a2,a2,-1
     ec8:	8ef1                	and	a3,a3,a2
     eca:	c794                	sw	a3,8(a5)
	tuneFilter2M = (tuneFilter +2 < 0x1f) ? (tuneFilter +2) : 0x1f;
     ecc:	4314                	lw	a3,0(a4)
     ece:	4679                	li	a2,30
     ed0:	47fd                	li	a5,31
     ed2:	0689                	addi	a3,a3,2
     ed4:	00d66463          	bltu	a2,a3,edc <main+0x550>
     ed8:	431c                	lw	a5,0(a4)
     eda:	0789                	addi	a5,a5,2
     edc:	caf1a023          	sw	a5,-864(gp) # 2000009c <tuneFilter2M>
	RF->RF22 &= 0xfffeffff;
     ee0:	4000d7b7          	lui	a5,0x4000d
     ee4:	4fb8                	lw	a4,88(a5)
     ee6:	76c1                	lui	a3,0xffff0
     ee8:	16fd                	addi	a3,a3,-1
     eea:	8f75                	and	a4,a4,a3
     eec:	cfb8                	sw	a4,88(a5)
	RF->RF2 |= 0x10000;
     eee:	4798                	lw	a4,8(a5)
     ef0:	66c1                	lui	a3,0x10
	RFEND_TXTune();
	RFEND_RXTune();
	DevSetMode(0);
     ef2:	4501                	li	a0,0
	RF->RF2 |= 0x10000;
     ef4:	8f55                	or	a4,a4,a3
     ef6:	c798                	sw	a4,8(a5)
	RF->RF3 = (RF->RF3 & 0xfffffeff) | 0x100;
     ef8:	47d8                	lw	a4,12(a5)
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
     efa:	ffef06b7          	lui	a3,0xffef0
     efe:	16fd                	addi	a3,a3,-1
	RF->RF3 = (RF->RF3 & 0xfffffeff) | 0x100;
     f00:	10076713          	ori	a4,a4,256
     f04:	c7d8                	sw	a4,12(a5)
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
     f06:	43d8                	lw	a4,4(a5)
	NVIC->IENR[0] = 0x1000;
	NVIC->IRER[0] = 0x1000;
#endif
	DevInit(TxPower);
	RegInit();
	NVIC->IPRIOR[0x15] |= 0x80;
     f08:	e000e937          	lui	s2,0xe000e
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
     f0c:	8f75                	and	a4,a4,a3
     f0e:	001006b7          	lui	a3,0x100
     f12:	8f55                	or	a4,a4,a3
     f14:	c3d8                	sw	a4,4(a5)
	DevSetMode(0);
     f16:	aa2ff0ef          	jal	ra,1b8 <DevSetMode>
	NVIC->IPRIOR[0x15] |= 0x80;
     f1a:	41594783          	lbu	a5,1045(s2) # e000e415 <_eusrstack+0xc0006415>
	funGpioInitAll();
	funPinMode(LED, GPIO_CFGLR_OUT_2Mhz_PP);
	funPinMode(PA10, GPIO_CFGLR_IN_PUPD);

	RFCoreInit(LL_TX_POWER_0_DBM);
	printf(".~ ch32fun iSLER ~.\n");
     f1e:	6505                	lui	a0,0x1
     f20:	59050513          	addi	a0,a0,1424 # 1590 <LLE_IRQHandler+0xc2>
     f24:	f807e793          	ori	a5,a5,-128
     f28:	0ff7f793          	andi	a5,a5,255
     f2c:	40f90aa3          	sb	a5,1045(s2)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f30:	002007b7          	lui	a5,0x200
     f34:	10f92023          	sw	a5,256(s2)
     f38:	3225                	jal	860 <puts>
	blink(5);
     f3a:	4515                	li	a0,5
     f3c:	cfeff0ef          	jal	ra,43a <blink>
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     f40:	400017b7          	lui	a5,0x40001
     f44:	08078793          	addi	a5,a5,128 # 40001080 <_eusrstack+0x1fff9080>
     f48:	5bd8                	lw	a4,52(a5)
     f4a:	76f1                	lui	a3,0xffffc
     f4c:	16fd                	addi	a3,a3,-1
     f4e:	8f75                	and	a4,a4,a3
     f50:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    |= (pin & ~PB);
     f52:	5398                	lw	a4,32(a5)
     f54:	6691                	lui	a3,0x4
#ifdef CH5xx
	funPinMode( bMOSI, GPIO_CFGLR_OUT_2Mhz_PP );
	R8_SPI0_CLOCK_DIV = FUNCONF_SYSTEM_CORE_CLOCK / 3000000; // div = Fsys/3MHz
	R8_SPI0_CTRL_MOD = RB_SPI_ALL_CLEAR;
	R8_SPI0_CTRL_MOD = RB_SPI_MOSI_OE | RB_SPI_2WIRE_MOD;
	R16_SPI0_DMA_END = ( (uint32_t)WS2812dmabuff + (DMA_BUFFER_LEN * 2) );
     f56:	0e418993          	addi	s3,gp,228 # 200004e0 <WS2812dmabuff>
     f5a:	8f55                	or	a4,a4,a3
     f5c:	d398                	sw	a4,32(a5)
	R8_SPI0_CLOCK_DIV = FUNCONF_SYSTEM_CORE_CLOCK / 3000000; // div = Fsys/3MHz
     f5e:	400047b7          	lui	a5,0x40004
     f62:	4751                	li	a4,20
     f64:	00e781a3          	sb	a4,3(a5) # 40004003 <_eusrstack+0x1fffc003>
	R8_SPI0_CTRL_MOD = RB_SPI_ALL_CLEAR;
     f68:	4709                	li	a4,2
     f6a:	00e78023          	sb	a4,0(a5)
	R8_SPI0_CTRL_MOD = RB_SPI_MOSI_OE | RB_SPI_2WIRE_MOD;
     f6e:	04400713          	li	a4,68
     f72:	00e78023          	sb	a4,0(a5)
	R16_SPI0_DMA_END = ( (uint32_t)WS2812dmabuff + (DMA_BUFFER_LEN * 2) );
     f76:	01099713          	slli	a4,s3,0x10
     f7a:	8341                	srli	a4,a4,0x10
     f7c:	f2e42e23          	sw	a4,-196(s0)
     f80:	06070713          	addi	a4,a4,96
     f84:	0742                	slli	a4,a4,0x10
     f86:	8341                	srli	a4,a4,0x10
     f88:	00e79e23          	sh	a4,28(a5)
	R8_SPI0_CTRL_CFG |= RB_SPI_BIT_ORDER;
     f8c:	0017c703          	lbu	a4,1(a5)
uint8_t adv_channels[] = {37, 38, 39};
uint8_t dev_name[] = "ch32fun999";

void modiSLER_loadData(MESS_DataFrame_t *dataFrame, uint8_t *data, size_t data_len) {
	dataFrame->data_len = data_len;
	memcpy(dataFrame->payload, data, data_len);
     f90:	4615                	li	a2,5
     f92:	0ff77713          	andi	a4,a4,255
     f96:	02076713          	ori	a4,a4,32
     f9a:	00e780a3          	sb	a4,1(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f9e:	000807b7          	lui	a5,0x80
     fa2:	10f92023          	sw	a5,256(s2)
	dataFrame->data_len = data_len;
     fa6:	c1018513          	addi	a0,gp,-1008 # 2000000c <dataFrame>
     faa:	4795                	li	a5,5
     fac:	00f506a3          	sb	a5,13(a0)
	memcpy(dataFrame->payload, data, data_len);
     fb0:	c7c18593          	addi	a1,gp,-900 # 20000078 <remote_cmd1>
     fb4:	0539                	addi	a0,a0,14
     fb6:	869ff0ef          	jal	ra,81e <memcpy>
	BB->BB7 = (BB->BB7 & 0xff00fc00) | ((phy_mode == PHY_2M) ? 0x7f00a0 : 0x79009c);
#elif defined(CH571_CH573)
	BB->BB11 = (BB->BB11 & 0xfffffffc) | 2; // no |2 for TX
#elif defined(CH582_CH583) || defined(CH32V208)
#if defined(CH582_CH583)
	BB->BB4 = (phy_mode < PHY_S2) ? 0x3722d0 : 0x3722df;
     fba:	003727b7          	lui	a5,0x372
     fbe:	2d078793          	addi	a5,a5,720 # 3722d0 <iSLER_mess.c.19bd7d4e+0x36f884>
     fc2:	f2f42223          	sw	a5,-220(s0)

	PRINT_STRUCT_BYTES(&frame, "%02X");
	printf("\n");

	for(int c = 0; c < sizeof(adv_channels); c++) {
		Frame_TX((uint8_t*)&frame, sizeof(frame), adv_channels[c], PHY_MODE);
     fc6:	f3242423          	sw	s2,-216(s0)
										  CTRL_CFG_PHY_1M; // default 1M for now
     fca:	7ac5                	lui	s5,0xffff1
     fcc:	c8418793          	addi	a5,gp,-892 # 20000080 <adv_channels>

    WS2812BDMAInit();
	modiSLER_loadData(&dataFrame, &remote_cmd1, sizeof(remote_cmd1));

	uint32_t sec_time = 0;
     fd0:	4b81                	li	s7,0
     fd2:	1afd                	addi	s5,s5,-1
			Frame_RX(frame_info, 37, PHY_MODE);
			while(!rx_ready);

			// we stepped over !rx_ready so we got a frame
			if (modiSLER_rx_handler()) {
				move_leds.is_enabled = 1;
     fd4:	c6018913          	addi	s2,gp,-928 # 2000005c <move_leds>
     fd8:	f2f42023          	sw	a5,-224(s0)
		if (funDigitalRead(PA10) == FUN_LOW) {
     fdc:	400017b7          	lui	a5,0x40001
     fe0:	0a47ac03          	lw	s8,164(a5) # 400010a4 <_eusrstack+0x1fff90a4>
     fe4:	400c7c13          	andi	s8,s8,1024
     fe8:	280c1763          	bnez	s8,1276 <main+0x8ea>
			move_leds.is_enabled = 1;
     fec:	4785                	li	a5,1
     fee:	00f90523          	sb	a5,10(s2)
	uint32_t now = millis();
     ff2:	000a2783          	lw	a5,0(s4) # e0000000 <_eusrstack+0xbfff8000>
     ff6:	f2f42c23          	sw	a5,-200(s0)
	if (now - *ref_time > duration) {
     ffa:	41778733          	sub	a4,a5,s7
     ffe:	6785                	lui	a5,0x1
    1000:	38878793          	addi	a5,a5,904 # 1388 <main+0x9fc>
    1004:	1ee7f263          	bgeu	a5,a4,11e8 <main+0x85c>
	iSLER_frame_t frame = {
    1008:	443327b7          	lui	a5,0x44332
    100c:	21178793          	addi	a5,a5,529 # 44332211 <_eusrstack+0x2432a211>
    1010:	f4f42623          	sw	a5,-180(s0)
    1014:	6799                	lui	a5,0x6
    1016:	65578793          	addi	a5,a5,1621 # 6655 <iSLER_mess.c.19bd7d4e+0x3c09>
    101a:	f4f41823          	sh	a5,-176(s0)
    101e:	10200793          	li	a5,258
    1022:	f4f41923          	sh	a5,-174(s0)
    1026:	4799                	li	a5,6
    1028:	f4f40a23          	sb	a5,-172(s0)
    102c:	6585                	lui	a1,0x1
    102e:	47d5                	li	a5,21
    1030:	f4f40aa3          	sb	a5,-171(s0)
    1034:	4621                	li	a2,8
    1036:	47a5                	li	a5,9
    1038:	57858593          	addi	a1,a1,1400 # 1578 <LLE_IRQHandler+0xaa>
    103c:	f5740513          	addi	a0,s0,-169
    1040:	f4f40b23          	sb	a5,-170(s0)
    1044:	fdaff0ef          	jal	ra,81e <memcpy>
    1048:	4631                	li	a2,12
    104a:	4581                	li	a1,0
    104c:	f5f40513          	addi	a0,s0,-161
    1050:	fbcff0ef          	jal	ra,80c <memset>
    1054:	05100793          	li	a5,81
    1058:	f6f405a3          	sb	a5,-149(s0)
    105c:	77f5                	lui	a5,0xffffd
    105e:	7ff78793          	addi	a5,a5,2047 # ffffd7ff <_eusrstack+0xdfff57ff>
    1062:	f6f41623          	sh	a5,-148(s0)
    1066:	479d                	li	a5,7
    1068:	f6f40723          	sb	a5,-146(s0)
    106c:	f2842783          	lw	a5,-216(s0)
    1070:	04e00613          	li	a2,78
    1074:	f6f40513          	addi	a0,s0,-145
    1078:	c1018593          	addi	a1,gp,-1008 # 2000000c <dataFrame>
    107c:	fa2ff0ef          	jal	ra,81e <memcpy>
	PRINT_STRUCT_BYTES(&frame, "%02X");
    1080:	6c85                	lui	s9,0x1
    1082:	07100b93          	li	s7,113
    1086:	f4c40793          	addi	a5,s0,-180
    108a:	97e2                	add	a5,a5,s8
    108c:	0007c583          	lbu	a1,0(a5)
    1090:	5a4c8513          	addi	a0,s9,1444 # 15a4 <LLE_IRQHandler+0xd6>
    1094:	0c05                	addi	s8,s8,1
    1096:	f50ff0ef          	jal	ra,7e6 <printf>
    109a:	ff7c16e3          	bne	s8,s7,1086 <main+0x6fa>
    109e:	4529                	li	a0,10
    10a0:	fecff0ef          	jal	ra,88c <putchar>
	printf("\n");
    10a4:	4529                	li	a0,10
    10a6:	fe6ff0ef          	jal	ra,88c <putchar>
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
    10aa:	8e89c737          	lui	a4,0x8e89c
    10ae:	ed670793          	addi	a5,a4,-298 # 8e89bed6 <_eusrstack+0x6e893ed6>
	BB->CRCINIT1 = 0x555555; // crc init
    10b2:	00555bb7          	lui	s7,0x555
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
    10b6:	f2f42823          	sw	a5,-208(s0)
	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
    10ba:	6c1d                	lui	s8,0x7
	BB->CRCINIT1 = 0x555555; // crc init
    10bc:	555b8793          	addi	a5,s7,1365 # 555555 <iSLER_mess.c.19bd7d4e+0x552b09>
	LL->LL4 &= 0xfffdffff;
    10c0:	7c81                	lui	s9,0xfffe0
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
    10c2:	6d39                	lui	s10,0xe
	for(int c = 0; c < sizeof(adv_channels); c++) {
    10c4:	4d81                	li	s11,0
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
    10c6:	4000c9b7          	lui	s3,0x4000c
	BB->CRCINIT1 = 0x555555; // crc init
    10ca:	f2f42623          	sw	a5,-212(s0)
	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
    10ce:	102c0c13          	addi	s8,s8,258 # 7102 <iSLER_mess.c.19bd7d4e+0x46b6>
	LL->LL4 &= 0xfffdffff;
    10d2:	1cfd                	addi	s9,s9,-1
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
    10d4:	200d0d13          	addi	s10,s10,512 # e200 <iSLER_mess.c.19bd7d4e+0xb7b4>
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
    10d8:	10098613          	addi	a2,s3,256 # 4000c100 <_eusrstack+0x20004100>
    10dc:	5654                	lw	a3,44(a2)
		Frame_TX((uint8_t*)&frame, sizeof(frame), adv_channels[c], PHY_MODE);
    10de:	f2042783          	lw	a5,-224(s0)
void Frame_TX(uint8_t adv[], size_t len, uint8_t channel, uint8_t phy_mode) {
    10e2:	f2242a23          	sw	sp,-204(s0)
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
    10e6:	9af1                	andi	a3,a3,-4
    10e8:	01b78733          	add	a4,a5,s11
    10ec:	0016e693          	ori	a3,a3,1
    10f0:	00074583          	lbu	a1,0(a4)
    10f4:	d654                	sw	a3,44(a2)
	RF->RF11 &= 0xfffffffd;
    10f6:	4000d6b7          	lui	a3,0x4000d
    10fa:	56d8                	lw	a4,44(a3)
	__attribute__((aligned(4))) uint8_t  ADV_BUF[len+2]; // for the advertisement, which is 37 bytes + 2 header bytes
    10fc:	7119                	addi	sp,sp,-128
	DevSetMode(DEVSETMODE_TX);
    10fe:	0da00513          	li	a0,218
	RF->RF11 &= 0xfffffffd;
    1102:	9b75                	andi	a4,a4,-3
    1104:	d6d8                	sw	a4,44(a3)
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
    1106:	1009a703          	lw	a4,256(s3)
    110a:	07f5f693          	andi	a3,a1,127
	__attribute__((aligned(4))) uint8_t  ADV_BUF[len+2]; // for the advertisement, which is 37 bytes + 2 header bytes
    110e:	8b8a                	mv	s7,sp
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
    1110:	f8077713          	andi	a4,a4,-128
    1114:	8f55                	or	a4,a4,a3
    1116:	10e9a023          	sw	a4,256(s3)
	DevSetMode(DEVSETMODE_TX);
    111a:	89eff0ef          	jal	ra,1b8 <DevSetMode>
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
    111e:	f3042783          	lw	a5,-208(s0)
    1122:	4000c737          	lui	a4,0x4000c
    1126:	10070613          	addi	a2,a4,256 # 4000c100 <_eusrstack+0x20004100>
    112a:	c61c                	sw	a5,8(a2)
	BB->CRCINIT1 = 0x555555; // crc init
    112c:	f2c42783          	lw	a5,-212(s0)
	memcpy(&ADV_BUF[2], adv, len);
    1130:	f4c40593          	addi	a1,s0,-180
    1134:	002b8513          	addi	a0,s7,2
	BB->CRCINIT1 = 0x555555; // crc init
    1138:	c25c                	sw	a5,4(a2)
	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
    113a:	018b9023          	sh	s8,0(s7)
	memcpy(&ADV_BUF[2], adv, len);
    113e:	07100613          	li	a2,113
    1142:	edcff0ef          	jal	ra,81e <memcpy>
	LL->FRAME_BUF = (uint32_t)ADV_BUF;
    1146:	20098713          	addi	a4,s3,512
    114a:	07772823          	sw	s7,112(a4)
    114e:	6705                	lui	a4,0x1
    1150:	bba70713          	addi	a4,a4,-1094 # bba <main+0x22e>
	for( int timeout = 3000; !(RF->RF26 & 0x1000000) && timeout >= 0; timeout-- );
    1154:	4000d637          	lui	a2,0x4000d
    1158:	010005b7          	lui	a1,0x1000
    115c:	5634                	lw	a3,104(a2)
    115e:	8eed                	and	a3,a3,a1
    1160:	e299                	bnez	a3,1166 <main+0x7da>
    1162:	177d                	addi	a4,a4,-1
    1164:	ff65                	bnez	a4,115c <main+0x7d0>
										  CTRL_CFG_PHY_1M; // default 1M for now
    1166:	1009a703          	lw	a4,256(s3)
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
    116a:	6685                	lui	a3,0x1
										  CTRL_CFG_PHY_1M; // default 1M for now
    116c:	10098613          	addi	a2,s3,256
    1170:	01577733          	and	a4,a4,s5
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
    1174:	8f55                	or	a4,a4,a3
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
    1176:	10e9a023          	sw	a4,256(s3)
	LL->LL4 &= 0xfffdffff;
    117a:	20098713          	addi	a4,s3,512
    117e:	4b14                	lw	a3,16(a4)
    1180:	0196f6b3          	and	a3,a3,s9
    1184:	cb14                	sw	a3,16(a4)
	LL->STATUS = LL_STATUS_TX;
    1186:	6689                	lui	a3,0x2
    1188:	c714                	sw	a3,8(a4)
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
    118a:	07a72223          	sw	s10,100(a4)
	BB->CTRL_CFG |= CTRL_CFG_START_TX;
    118e:	1009a703          	lw	a4,256(s3)
    1192:	008006b7          	lui	a3,0x800
    1196:	8f55                	or	a4,a4,a3
    1198:	10e9a023          	sw	a4,256(s3)
	BB->CTRL_TX &= 0xfffffffc;
    119c:	5658                	lw	a4,44(a2)
    119e:	9b71                	andi	a4,a4,-4
    11a0:	d658                	sw	a4,44(a2)
	LL->LL0 = 2; // Not sure what this does, but on RX it's 1
    11a2:	4709                	li	a4,2
    11a4:	20e9a023          	sw	a4,512(s3)
	while(LL->TMR); // wait for tx buffer to empty
    11a8:	20098713          	addi	a4,s3,512
    11ac:	5374                	lw	a3,100(a4)
    11ae:	feed                	bnez	a3,11a8 <main+0x81c>
	DevSetMode(0);
    11b0:	4501                	li	a0,0
    11b2:	806ff0ef          	jal	ra,1b8 <DevSetMode>
	if(LL->LL0 & 3) {
    11b6:	4000c7b7          	lui	a5,0x4000c
    11ba:	20078713          	addi	a4,a5,512 # 4000c200 <_eusrstack+0x20004200>
    11be:	4314                	lw	a3,0(a4)
    11c0:	8a8d                	andi	a3,a3,3
    11c2:	ca81                	beqz	a3,11d2 <main+0x846>
		LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    11c4:	4b34                	lw	a3,80(a4)
    11c6:	9ae1                	andi	a3,a3,-8
    11c8:	cb34                	sw	a3,80(a4)
		LL->LL0 |= 0x08;
    11ca:	4314                	lw	a3,0(a4)
    11cc:	0086e693          	ori	a3,a3,8
    11d0:	c314                	sw	a3,0(a4)
	for(int c = 0; c < sizeof(adv_channels); c++) {
    11d2:	0d85                	addi	s11,s11,1
    11d4:	470d                	li	a4,3
    11d6:	f3442103          	lw	sp,-204(s0)
    11da:	eeed9fe3          	bne	s11,a4,10d8 <main+0x74c>
				blink(1);
    11de:	4505                	li	a0,1
    11e0:	a5aff0ef          	jal	ra,43a <blink>
		*ref_time = now;
    11e4:	f3842b83          	lw	s7,-200(s0)
    // reset led_arr
    // ARRAY_SET_VALUE(led_arr, 0);
}

void Neo_task() {
    if (WS2812BLEDInUse || move_leds.is_enabled == 0) return;
    11e8:	c8818793          	addi	a5,gp,-888 # 20000084 <WS2812BLEDInUse>
    11ec:	4398                	lw	a4,0(a5)
    11ee:	de0717e3          	bnez	a4,fdc <main+0x650>
    11f2:	00a94703          	lbu	a4,10(s2)
    11f6:	de0703e3          	beqz	a4,fdc <main+0x650>
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
    11fa:	30002773          	csrr	a4,mstatus
	result &= ~0x88; __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
    11fe:	f7777713          	andi	a4,a4,-137
    1202:	30071073          	csrw	mstatus,a4
	WS2812BLEDInUse = 1;
    1206:	4705                	li	a4,1
    1208:	c398                	sw	a4,0(a5)
	R8_SPI0_INTER_EN &= ~RB_SPI_IE_DMA_END;
    120a:	40004c37          	lui	s8,0x40004
    120e:	002c4783          	lbu	a5,2(s8) # 40004002 <_eusrstack+0x1fffc002>
    1212:	0f77f793          	andi	a5,a5,247
    1216:	00fc0123          	sb	a5,2(s8)
	R8_SPI0_CTRL_CFG &= ~RB_SPI_DMA_ENABLE;
    121a:	001c4783          	lbu	a5,1(s8)
    121e:	0fe7f793          	andi	a5,a5,254
    1222:	00fc00a3          	sb	a5,1(s8)
	R16_SPI0_TOTAL_CNT = 0;
    1226:	000c1623          	sh	zero,12(s8)
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
    122a:	300027f3          	csrr	a5,mstatus
	result |= 0x88;  __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
    122e:	0887e793          	ori	a5,a5,136
    1232:	30079073          	csrw	mstatus,a5
	WS2812LEDs = leds;
    1236:	4719                	li	a4,6
    1238:	c8e1a823          	sw	a4,-880(gp) # 2000008c <WS2812LEDs>
	WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 0 );
    123c:	4501                	li	a0,0
	WS2812LEDPlace = -WS2812B_RESET_PERIOD;
    123e:	5779                	li	a4,-2
    1240:	c8e1a623          	sw	a4,-884(gp) # 20000088 <WS2812LEDPlace>
	WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 0 );
    1244:	84cff0ef          	jal	ra,290 <WS2812FillBuffSec.constprop.0>
	R16_SPI0_TOTAL_CNT = DMA_BUFFER_LEN * 2;
    1248:	06000793          	li	a5,96
    124c:	00fc1623          	sh	a5,12(s8)
	R16_SPI0_DMA_BEG = (uint32_t)WS2812dmabuff;
    1250:	f3c42783          	lw	a5,-196(s0)
    1254:	00fc1c23          	sh	a5,24(s8)
	R8_SPI0_INT_FLAG = RB_SPI_IF_CNT_END | RB_SPI_IF_DMA_END;
    1258:	47a5                	li	a5,9
    125a:	00fc0323          	sb	a5,6(s8)
	R8_SPI0_INTER_EN = RB_SPI_IE_DMA_END;
    125e:	47a1                	li	a5,8
    1260:	00fc0123          	sb	a5,2(s8)
	R8_SPI0_CTRL_CFG |= RB_SPI_DMA_ENABLE;
    1264:	001c4783          	lbu	a5,1(s8)
    1268:	0ff7f793          	andi	a5,a5,255
    126c:	0017e793          	ori	a5,a5,1
    1270:	00fc00a3          	sb	a5,1(s8)
    1274:	b3a5                	j	fdc <main+0x650>
	DevSetMode(0);
    1276:	4501                	li	a0,0
    1278:	f41fe0ef          	jal	ra,1b8 <DevSetMode>
	if(LL->LL0 & 3) {
    127c:	4000c7b7          	lui	a5,0x4000c
    1280:	2007a703          	lw	a4,512(a5) # 4000c200 <_eusrstack+0x20004200>
    1284:	20078693          	addi	a3,a5,512
    1288:	8b0d                	andi	a4,a4,3
    128a:	cb11                	beqz	a4,129e <main+0x912>
		LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    128c:	4ab8                	lw	a4,80(a3)
    128e:	9b61                	andi	a4,a4,-8
    1290:	cab8                	sw	a4,80(a3)
		LL->LL0 |= 0x08;
    1292:	2007a703          	lw	a4,512(a5)
    1296:	00876713          	ori	a4,a4,8
    129a:	20e7a023          	sw	a4,512(a5)
	LL->TMR = 0;
    129e:	4000ccb7          	lui	s9,0x4000c
    12a2:	200c8793          	addi	a5,s9,512 # 4000c200 <_eusrstack+0x20004200>
    12a6:	0607a223          	sw	zero,100(a5)
	RF->RF11 &= 0xfffffffd;
    12aa:	4000d737          	lui	a4,0x4000d
    12ae:	575c                	lw	a5,44(a4)
	DevSetMode(DEVSETMODE_RX);
    12b0:	0d900513          	li	a0,217
	RF->RF11 &= 0xfffffffd;
    12b4:	9bf5                	andi	a5,a5,-3
    12b6:	d75c                	sw	a5,44(a4)
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
    12b8:	100ca783          	lw	a5,256(s9)
    12bc:	f807f793          	andi	a5,a5,-128
    12c0:	0257e793          	ori	a5,a5,37
    12c4:	10fca023          	sw	a5,256(s9)
	DevSetMode(DEVSETMODE_RX);
    12c8:	ef1fe0ef          	jal	ra,1b8 <DevSetMode>
										  CTRL_CFG_PHY_1M; // default 1M for now
    12cc:	100ca783          	lw	a5,256(s9)
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
    12d0:	6705                	lui	a4,0x1
										  CTRL_CFG_PHY_1M; // default 1M for now
    12d2:	0157f7b3          	and	a5,a5,s5
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
    12d6:	8fd9                	or	a5,a5,a4
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
    12d8:	10fca023          	sw	a5,256(s9)
	BB->BB4 = (phy_mode < PHY_S2) ? 0x3722d0 : 0x3722df;
    12dc:	f2442783          	lw	a5,-220(s0)
    12e0:	10fca823          	sw	a5,272(s9)
#elif defined(CH32V208)
	BB->BB4 = (phy_mode < PHY_S2) ? 0x3222d0 : 0x34a4df;
#endif
	BB->BB5 = (phy_mode < PHY_S2) ? 0x8101901 : 0x8301ff1;
    12e4:	081027b7          	lui	a5,0x8102
    12e8:	90178793          	addi	a5,a5,-1791 # 8101901 <iSLER_mess.c.19bd7d4e+0x80feeb5>
    12ec:	10fcaa23          	sw	a5,276(s9)
	BB->BB6 = (phy_mode < PHY_S2) ? 0x31624 : 0x31619;
    12f0:	000317b7          	lui	a5,0x31
    12f4:	62478793          	addi	a5,a5,1572 # 31624 <iSLER_mess.c.19bd7d4e+0x2ebd8>
    12f8:	10fcac23          	sw	a5,280(s9)
	BB->BB8 = (phy_mode < PHY_S2) ? 0x90083 : 0x90086;
    12fc:	000907b7          	lui	a5,0x90
    1300:	08378793          	addi	a5,a5,131 # 90083 <iSLER_mess.c.19bd7d4e+0x8d637>
    1304:	12fca023          	sw	a5,288(s9)
	BB->BB9 = 0x1006310;
    1308:	010067b7          	lui	a5,0x1006
    130c:	31078793          	addi	a5,a5,784 # 1006310 <iSLER_mess.c.19bd7d4e+0x10038c4>
    1310:	12fca223          	sw	a5,292(s9)
	BB->BB10 = (phy_mode < PHY_S2) ? 0x28be : 0x28de;
    1314:	678d                	lui	a5,0x3
    1316:	8be78793          	addi	a5,a5,-1858 # 28be <ch32fun.c.e0983271+0xd2d>
    131a:	12fca423          	sw	a5,296(s9)
#elif defined(CH584_CH585) || defined(CH591_CH592)
	BB->BB6 = (BB->BB6 & 0xfffffc00) | ((phy_mode == PHY_2M) ? 0x13a : 0x132);
	BB->BB4 = (BB->BB4 & 0x00ffffff) | ((phy_mode == PHY_2M) ? 0x78000000 : 0x7f000000);
#endif

	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
    131e:	8e89c7b7          	lui	a5,0x8e89c
    1322:	ed678793          	addi	a5,a5,-298 # 8e89bed6 <_eusrstack+0x6e893ed6>
    1326:	10fca423          	sw	a5,264(s9)
	BB->CRCINIT1 = 0x555555; // crc init
    132a:	005557b7          	lui	a5,0x555
    132e:	55578793          	addi	a5,a5,1365 # 555555 <iSLER_mess.c.19bd7d4e+0x552b09>
    1332:	10fca223          	sw	a5,260(s9)
#endif

	//LL->LL1 = (LL->LL1 & 0xfffffffe) | 1; // 1: AUTO mode, to swap between RX <-> TX when either happened. 0: BASIC
	//LL->FRAME_BUF = (uint32_t)frame_info; // also this only in AUTO mode

	LL->LL0 = 1; // Not sure what this does, but on TX it's 2
    1336:	4785                	li	a5,1
    1338:	20fca023          	sw	a5,512(s9)
	rx_ready = 0;
    133c:	c9418713          	addi	a4,gp,-876 # 20000090 <rx_ready>
    1340:	00072023          	sw	zero,0(a4) # 1000 <main+0x674>
    1344:	c9418793          	addi	a5,gp,-876 # 20000090 <rx_ready>
			while(!rx_ready);
    1348:	4398                	lw	a4,0(a5)
    134a:	df7d                	beqz	a4,1348 <main+0x9bc>
	// for(int i= 0;i<6; i++) sender_mac[i] = frame[7-i];
	// printf("sender_mac\n");
	// PRINT_ARRAY(sender_mac, "%02x");
	// uint8_t target_mac[] = { BLE_AD_MAC(0x112233445566) };

	uint8_t target_mac[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };
    134c:	443327b7          	lui	a5,0x44332
    1350:	21178793          	addi	a5,a5,529 # 44332211 <_eusrstack+0x2432a211>
    1354:	f4f42623          	sw	a5,-180(s0)
    1358:	6799                	lui	a5,0x6
    135a:	65578793          	addi	a5,a5,1621 # 6655 <iSLER_mess.c.19bd7d4e+0x3c09>

	if (memcmp(rx_frame->mac, target_mac, 6) == 0) {
    135e:	4619                	li	a2,6
    1360:	f4c40593          	addi	a1,s0,-180
    1364:	00248513          	addi	a0,s1,2
	uint8_t target_mac[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };
    1368:	f4f41823          	sh	a5,-176(s0)
	if (memcmp(rx_frame->mac, target_mac, 6) == 0) {
    136c:	cceff0ef          	jal	ra,83a <memcmp>
    1370:	e6051ce3          	bnez	a0,11e8 <main+0x85c>
		// first 8 bytes contains: [RSSI x 1Byte] [len x 1Byte] [MAC x 6Bytes]
		// The first two bytes of the frame are metadata with RSSI and length
		PRINT_SEPARATOR();
    1374:	6505                	lui	a0,0x1
    1376:	5ac50513          	addi	a0,a0,1452 # 15ac <LLE_IRQHandler+0xde>
    137a:	ce6ff0ef          	jal	ra,860 <puts>
		printf("RSSI:%d len:%d MAC:", frame[0], frame[1]);
    137e:	0014c603          	lbu	a2,1(s1)
    1382:	0004c583          	lbu	a1,0(s1)
    1386:	6505                	lui	a0,0x1
    1388:	5d450513          	addi	a0,a0,1492 # 15d4 <LLE_IRQHandler+0x106>
    138c:	c5aff0ef          	jal	ra,7e6 <printf>
		PRINT_ARRAY(rx_frame->mac, "%02X");
    1390:	006b0c93          	addi	s9,s6,6 # 100006 <iSLER_mess.c.19bd7d4e+0xfd5ba>
		printf("RSSI:%d len:%d MAC:", frame[0], frame[1]);
    1394:	8c5a                	mv	s8,s6
		PRINT_ARRAY(rx_frame->mac, "%02X");
    1396:	6d05                	lui	s10,0x1
    1398:	002c4583          	lbu	a1,2(s8)
    139c:	5a4d0513          	addi	a0,s10,1444 # 15a4 <LLE_IRQHandler+0xd6>
    13a0:	0c05                	addi	s8,s8,1
    13a2:	c44ff0ef          	jal	ra,7e6 <printf>
    13a6:	ff8c99e3          	bne	s9,s8,1398 <main+0xa0c>
    13aa:	4529                	li	a0,10
    13ac:	ce0ff0ef          	jal	ra,88c <putchar>
		// printf("Raw Data: ");
		// PRINT_ARRAY_WITH_SIZE(frame, frame[1], "%02X");

		printf("preamble: %04X \n", rx_frame->dataFrame.preamble);
    13b0:	50cc                	lw	a1,36(s1)
    13b2:	6505                	lui	a0,0x1
    13b4:	5e850513          	addi	a0,a0,1512 # 15e8 <LLE_IRQHandler+0x11a>
    13b8:	81a1                	srli	a1,a1,0x8
    13ba:	05c2                	slli	a1,a1,0x10
    13bc:	81c1                	srli	a1,a1,0x10
    13be:	c28ff0ef          	jal	ra,7e6 <printf>
		printf("controlbit: %04X \n", rx_frame->dataFrame.control_bits);
    13c2:	0284c783          	lbu	a5,40(s1)
    13c6:	0274c583          	lbu	a1,39(s1)
    13ca:	6505                	lui	a0,0x1
    13cc:	07a2                	slli	a5,a5,0x8
    13ce:	8ddd                	or	a1,a1,a5
    13d0:	5fc50513          	addi	a0,a0,1532 # 15fc <LLE_IRQHandler+0x12e>
    13d4:	c12ff0ef          	jal	ra,7e6 <printf>
		printf("msgCode: %04X \n", rx_frame->dataFrame.msgCode);
    13d8:	548c                	lw	a1,40(s1)
    13da:	6505                	lui	a0,0x1
    13dc:	61050513          	addi	a0,a0,1552 # 1610 <LLE_IRQHandler+0x142>
    13e0:	81a1                	srli	a1,a1,0x8
    13e2:	05c2                	slli	a1,a1,0x10
    13e4:	81c1                	srli	a1,a1,0x10
    13e6:	c00ff0ef          	jal	ra,7e6 <printf>
		printf("groupId: %02X \n", rx_frame->dataFrame.group_id);
    13ea:	0314c583          	lbu	a1,49(s1)
    13ee:	6505                	lui	a0,0x1
    13f0:	62050513          	addi	a0,a0,1568 # 1620 <LLE_IRQHandler+0x152>
    13f4:	bf2ff0ef          	jal	ra,7e6 <printf>
				move_leds.is_enabled = 1;
    13f8:	4785                	li	a5,1
    13fa:	00f90523          	sb	a5,10(s2)
				move_leds.ref_index = 0;
				move_leds.ref_time = millis();
    13fe:	000a2783          	lw	a5,0(s4)
				blink(1);
    1402:	4505                	li	a0,1
				move_leds.ref_index = 0;
    1404:	000906a3          	sb	zero,13(s2)
				move_leds.ref_time = millis();
    1408:	00f92823          	sw	a5,16(s2)
				blink(1);
    140c:	82eff0ef          	jal	ra,43a <blink>
    1410:	bbe1                	j	11e8 <main+0x85c>

00001412 <SysTick_Handler>:
{
    1412:	1101                	addi	sp,sp,-32
    1414:	c63a                	sw	a4,12(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1416:	e000f737          	lui	a4,0xe000f
{
    141a:	c242                	sw	a6,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    141c:	01072803          	lw	a6,16(a4) # e000f010 <_eusrstack+0xc0007010>
{
    1420:	c43e                	sw	a5,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1422:	67bd                	lui	a5,0xf
{
    1424:	c046                	sw	a7,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1426:	a6078793          	addi	a5,a5,-1440 # ea60 <iSLER_mess.c.19bd7d4e+0xc014>
    142a:	01472883          	lw	a7,20(a4)
    142e:	97c2                	add	a5,a5,a6
{
    1430:	ce2a                	sw	a0,28(sp)
    1432:	c836                	sw	a3,16(sp)
    1434:	cc2e                	sw	a1,24(sp)
    1436:	ca32                	sw	a2,20(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1438:	0107b533          	sltu	a0,a5,a6
    143c:	cb1c                	sw	a5,16(a4)
    143e:	011506b3          	add	a3,a0,a7
    1442:	cb54                	sw	a3,20(a4)
	SysTick->SR = 0x00000000;
    1444:	00072223          	sw	zero,4(a4)
	systick_millis++;
    1448:	c9818793          	addi	a5,gp,-872 # 20000094 <systick_millis>
    144c:	4398                	lw	a4,0(a5)
}
    144e:	4572                	lw	a0,28(sp)
    1450:	45e2                	lw	a1,24(sp)
	systick_millis++;
    1452:	0705                	addi	a4,a4,1
    1454:	c398                	sw	a4,0(a5)
}
    1456:	4652                	lw	a2,20(sp)
    1458:	46c2                	lw	a3,16(sp)
    145a:	4732                	lw	a4,12(sp)
    145c:	47a2                	lw	a5,8(sp)
    145e:	4812                	lw	a6,4(sp)
    1460:	4882                	lw	a7,0(sp)
    1462:	6105                	addi	sp,sp,32
    1464:	30200073          	mret

00001468 <SPI0_IRQHandler>:
{
    1468:	715d                	addi	sp,sp,-80
    146a:	de22                	sw	s0,60(sp)
    146c:	c686                	sw	ra,76(sp)
    146e:	c496                	sw	t0,72(sp)
    1470:	c29a                	sw	t1,68(sp)
    1472:	c09e                	sw	t2,64(sp)
    1474:	dc2a                	sw	a0,56(sp)
    1476:	da2e                	sw	a1,52(sp)
    1478:	d832                	sw	a2,48(sp)
    147a:	d636                	sw	a3,44(sp)
    147c:	d43a                	sw	a4,40(sp)
    147e:	d23e                	sw	a5,36(sp)
    1480:	d042                	sw	a6,32(sp)
    1482:	ce46                	sw	a7,28(sp)
    1484:	cc72                	sw	t3,24(sp)
    1486:	ca76                	sw	t4,20(sp)
    1488:	c87a                	sw	t5,16(sp)
    148a:	c67e                	sw	t6,12(sp)
	uint8_t intf = R8_SPI0_INT_FLAG;
    148c:	40004437          	lui	s0,0x40004
    1490:	00644783          	lbu	a5,6(s0) # 40004006 <_eusrstack+0x1fffc006>
	if( (intf & RB_SPI_IF_DMA_END) )
    1494:	8ba1                	andi	a5,a5,8
    1496:	cb81                	beqz	a5,14a6 <SPI0_IRQHandler+0x3e>
		WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 1 );
    1498:	4505                	li	a0,1
    149a:	df7fe0ef          	jal	ra,290 <WS2812FillBuffSec.constprop.0>
		R16_SPI0_TOTAL_CNT = DMA_BUFFER_LEN * 2;
    149e:	06000793          	li	a5,96
    14a2:	00f41623          	sh	a5,12(s0)
}
    14a6:	5472                	lw	s0,60(sp)
    14a8:	40b6                	lw	ra,76(sp)
    14aa:	42a6                	lw	t0,72(sp)
    14ac:	4316                	lw	t1,68(sp)
    14ae:	4386                	lw	t2,64(sp)
    14b0:	5562                	lw	a0,56(sp)
    14b2:	55d2                	lw	a1,52(sp)
    14b4:	5642                	lw	a2,48(sp)
    14b6:	56b2                	lw	a3,44(sp)
    14b8:	5722                	lw	a4,40(sp)
    14ba:	5792                	lw	a5,36(sp)
    14bc:	5802                	lw	a6,32(sp)
    14be:	48f2                	lw	a7,28(sp)
    14c0:	4e62                	lw	t3,24(sp)
    14c2:	4ed2                	lw	t4,20(sp)
    14c4:	4f42                	lw	t5,16(sp)
    14c6:	4fb2                	lw	t6,12(sp)
    14c8:	6161                	addi	sp,sp,80
    14ca:	30200073          	mret

000014ce <LLE_IRQHandler>:
void LLE_IRQHandler() {
    14ce:	7139                	addi	sp,sp,-64
    14d0:	cc3e                	sw	a5,24(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    14d2:	4000c7b7          	lui	a5,0x4000c
    14d6:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
void LLE_IRQHandler() {
    14da:	d036                	sw	a3,32(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    14dc:	4794                	lw	a3,8(a5)
void LLE_IRQHandler() {
    14de:	ce3a                	sw	a4,28(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    14e0:	6711                	lui	a4,0x4
void LLE_IRQHandler() {
    14e2:	de06                	sw	ra,60(sp)
    14e4:	dc16                	sw	t0,56(sp)
    14e6:	da1a                	sw	t1,52(sp)
    14e8:	d81e                	sw	t2,48(sp)
    14ea:	d62a                	sw	a0,44(sp)
    14ec:	d42e                	sw	a1,40(sp)
    14ee:	d232                	sw	a2,36(sp)
    14f0:	ca42                	sw	a6,20(sp)
    14f2:	c846                	sw	a7,16(sp)
    14f4:	c672                	sw	t3,12(sp)
    14f6:	c476                	sw	t4,8(sp)
    14f8:	c27a                	sw	t5,4(sp)
    14fa:	c07e                	sw	t6,0(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    14fc:	8ef9                	and	a3,a3,a4
    14fe:	cea9                	beqz	a3,1558 <LLE_IRQHandler+0x8a>
    1500:	47d4                	lw	a3,12(a5)
    1502:	8ef9                	and	a3,a3,a4
    1504:	cab1                	beqz	a3,1558 <LLE_IRQHandler+0x8a>
		LL->LL26 = 0xffffffff;
    1506:	56fd                	li	a3,-1
    1508:	d7b4                	sw	a3,104(a5)
		LL->STATUS = 0x4000;
    150a:	c798                	sw	a4,8(a5)
	DevSetMode(0);
    150c:	4501                	li	a0,0
    150e:	cabfe0ef          	jal	ra,1b8 <DevSetMode>
	LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    1512:	4000c7b7          	lui	a5,0x4000c
    1516:	20078693          	addi	a3,a5,512 # 4000c200 <_eusrstack+0x20004200>
    151a:	4ab8                	lw	a4,80(a3)
}
    151c:	50f2                	lw	ra,60(sp)
    151e:	52e2                	lw	t0,56(sp)
	LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    1520:	9b61                	andi	a4,a4,-8
    1522:	cab8                	sw	a4,80(a3)
	LL->LL0 |= 0x08;
    1524:	2007a703          	lw	a4,512(a5)
}
    1528:	5352                	lw	t1,52(sp)
    152a:	53c2                	lw	t2,48(sp)
	LL->LL0 |= 0x08;
    152c:	00876713          	ori	a4,a4,8
    1530:	20e7a023          	sw	a4,512(a5)
	rx_ready = 1;
    1534:	4705                	li	a4,1
    1536:	c8e1aa23          	sw	a4,-876(gp) # 20000090 <rx_ready>
}
    153a:	5532                	lw	a0,44(sp)
    153c:	55a2                	lw	a1,40(sp)
    153e:	5612                	lw	a2,36(sp)
    1540:	5682                	lw	a3,32(sp)
    1542:	4772                	lw	a4,28(sp)
    1544:	47e2                	lw	a5,24(sp)
    1546:	4852                	lw	a6,20(sp)
    1548:	48c2                	lw	a7,16(sp)
    154a:	4e32                	lw	t3,12(sp)
    154c:	4ea2                	lw	t4,8(sp)
    154e:	4f12                	lw	t5,4(sp)
    1550:	4f82                	lw	t6,0(sp)
    1552:	6121                	addi	sp,sp,64
    1554:	30200073          	mret
		LL->STATUS &= LL->INT_EN;
    1558:	4000c7b7          	lui	a5,0x4000c
    155c:	20078713          	addi	a4,a5,512 # 4000c200 <_eusrstack+0x20004200>
    1560:	4750                	lw	a2,12(a4)
    1562:	4714                	lw	a3,8(a4)
		BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
    1564:	10078793          	addi	a5,a5,256
		LL->STATUS &= LL->INT_EN;
    1568:	8ef1                	and	a3,a3,a2
    156a:	c714                	sw	a3,8(a4)
		BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
    156c:	57d8                	lw	a4,44(a5)
    156e:	9b71                	andi	a4,a4,-4
    1570:	00176713          	ori	a4,a4,1
    1574:	d7d8                	sw	a4,44(a5)
    1576:	bf59                	j	150c <LLE_IRQHandler+0x3e>
    1578:	6562                	flw	fa0,24(sp)
    157a:	2d65                	jal	1c32 <ch32fun.c.e0983271+0xa1>
    157c:	3232                	fld	ft4,296(sp)
    157e:	0032                	c.slli	zero,0xc
	...
    158c:	000a                	c.slli	zero,0x2
    158e:	0000                	unimp
    1590:	7e2e                	flw	ft8,232(sp)
    1592:	6320                	flw	fs0,64(a4)
    1594:	3368                	fld	fa0,224(a4)
    1596:	6632                	flw	fa2,12(sp)
    1598:	6e75                	lui	t3,0x1d
    159a:	6920                	flw	fs0,80(a0)
    159c:	52454c53          	0x52454c53
    15a0:	7e20                	flw	fs0,120(a2)
    15a2:	002e                	c.slli	zero,0xb
    15a4:	3025                	jal	dcc <main+0x440>
    15a6:	5832                	lw	a6,44(sp)
    15a8:	0020                	addi	s0,sp,8
    15aa:	0000                	unimp
    15ac:	2d0a                	fld	fs10,128(sp)
    15ae:	2d2d                	jal	1be8 <ch32fun.c.e0983271+0x57>
    15b0:	2d2d                	jal	1bea <ch32fun.c.e0983271+0x59>
    15b2:	2d2d                	jal	1bec <ch32fun.c.e0983271+0x5b>
    15b4:	2d2d                	jal	1bee <ch32fun.c.e0983271+0x5d>
    15b6:	2d2d                	jal	1bf0 <ch32fun.c.e0983271+0x5f>
    15b8:	2d2d                	jal	1bf2 <ch32fun.c.e0983271+0x61>
    15ba:	2d2d                	jal	1bf4 <ch32fun.c.e0983271+0x63>
    15bc:	2d2d                	jal	1bf6 <ch32fun.c.e0983271+0x65>
    15be:	2d2d                	jal	1bf8 <ch32fun.c.e0983271+0x67>
    15c0:	2d2d                	jal	1bfa <ch32fun.c.e0983271+0x69>
    15c2:	2d2d                	jal	1bfc <ch32fun.c.e0983271+0x6b>
    15c4:	2d2d                	jal	1bfe <ch32fun.c.e0983271+0x6d>
    15c6:	2d2d                	jal	1c00 <ch32fun.c.e0983271+0x6f>
    15c8:	2d2d                	jal	1c02 <ch32fun.c.e0983271+0x71>
    15ca:	2d2d                	jal	1c04 <ch32fun.c.e0983271+0x73>
    15cc:	2d2d                	jal	1c06 <ch32fun.c.e0983271+0x75>
    15ce:	2d2d                	jal	1c08 <ch32fun.c.e0983271+0x77>
    15d0:	0000                	unimp
    15d2:	0000                	unimp
    15d4:	5352                	lw	t1,52(sp)
    15d6:	253a4953          	0x253a4953
    15da:	2064                	fld	fs1,192(s0)
    15dc:	656c                	flw	fa1,76(a0)
    15de:	3a6e                	fld	fs4,248(sp)
    15e0:	6425                	lui	s0,0x9
    15e2:	4d20                	lw	s0,88(a0)
    15e4:	4341                	li	t1,16
    15e6:	003a                	c.slli	zero,0xe
    15e8:	7270                	flw	fa2,100(a2)
    15ea:	6165                	addi	sp,sp,112
    15ec:	626d                	lui	tp,0x1b
    15ee:	656c                	flw	fa1,76(a0)
    15f0:	203a                	fld	ft0,392(sp)
    15f2:	3025                	jal	e1a <main+0x48e>
    15f4:	5834                	lw	a3,112(s0)
    15f6:	0a20                	addi	s0,sp,280
    15f8:	0000                	unimp
    15fa:	0000                	unimp
    15fc:	746e6f63          	bltu	t3,t1,1d5a <ch32fun.c.e0983271+0x1c9>
    1600:	6f72                	flw	ft10,28(sp)
    1602:	626c                	flw	fa1,68(a2)
    1604:	7469                	lui	s0,0xffffa
    1606:	203a                	fld	ft0,392(sp)
    1608:	3025                	jal	e30 <main+0x4a4>
    160a:	5834                	lw	a3,112(s0)
    160c:	0a20                	addi	s0,sp,280
    160e:	0000                	unimp
    1610:	736d                	lui	t1,0xffffb
    1612:	646f4367          	0x646f4367
    1616:	3a65                	jal	fce <main+0x642>
    1618:	2520                	fld	fs0,72(a0)
    161a:	3430                	fld	fa2,104(s0)
    161c:	2058                	fld	fa4,128(s0)
    161e:	000a                	c.slli	zero,0x2
    1620:	756f7267          	0x756f7267
    1624:	4970                	lw	a2,84(a0)
    1626:	3a64                	fld	fs1,240(a2)
    1628:	2520                	fld	fs0,72(a0)
    162a:	3230                	fld	fa2,96(a2)
    162c:	2058                	fld	fa4,128(s0)
    162e:	000a                	c.slli	zero,0x2

00001630 <bitquartets.0>:
    1630:	1111 7111 1711 7711 1171 7171 1771 7771     ...q...wq.qqq.qw
    1640:	1117 7117 1717 7717 1177 7177 1777 7777     ...q...ww.wqw.ww

00001650 <channel_map>:
    1650:	0201 0403 0605 0807 0a09 0d0c 0f0e 1110     ................
    1660:	1312 1514 1716 1918 1b1a 1d1c 1f1e 2120     .............. !
    1670:	2322 2524 0026 270b                         "#$%&..'
