
iSLER-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	1950006f          	j	994 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0a18                	addi	a4,sp,272
   a:	0000                	unimp
   c:	0a18                	addi	a4,sp,272
   e:	0000                	unimp
  10:	bda9                	j	fffffe6a <_eusrstack+0xdfff7e6a>
  12:	f3f9                	bnez	a5,ffffffd8 <_eusrstack+0xdfff7fd8>
  14:	0a18                	addi	a4,sp,272
	...
  1e:	0000                	unimp
  20:	0a18                	addi	a4,sp,272
  22:	0000                	unimp
  24:	0a18                	addi	a4,sp,272
	...
  2e:	0000                	unimp
  30:	190a                	slli	s2,s2,0x22
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0a18                	addi	a4,sp,272
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0a18                	addi	a4,sp,272
  42:	0000                	unimp
  44:	0a18                	addi	a4,sp,272
  46:	0000                	unimp
  48:	0a18                	addi	a4,sp,272
  4a:	0000                	unimp
  4c:	1960                	addi	s0,sp,188
  4e:	0000                	unimp
  50:	0a18                	addi	a4,sp,272
  52:	0000                	unimp
  54:	19c6                	slli	s3,s3,0x31
  56:	0000                	unimp
  58:	0a18                	addi	a4,sp,272
  5a:	0000                	unimp
  5c:	0000                	unimp
  5e:	0000                	unimp
  60:	0a18                	addi	a4,sp,272
  62:	0000                	unimp
  64:	0a18                	addi	a4,sp,272
  66:	0000                	unimp
  68:	0a18                	addi	a4,sp,272
  6a:	0000                	unimp
  6c:	0a18                	addi	a4,sp,272
  6e:	0000                	unimp
  70:	0a18                	addi	a4,sp,272
  72:	0000                	unimp
  74:	0a18                	addi	a4,sp,272
  76:	0000                	unimp
  78:	0a18                	addi	a4,sp,272
  7a:	0000                	unimp
  7c:	0a18                	addi	a4,sp,272
  7e:	0000                	unimp
  80:	0a18                	addi	a4,sp,272
  82:	0000                	unimp
  84:	0a18                	addi	a4,sp,272
  86:	0000                	unimp
  88:	0a18                	addi	a4,sp,272
  8a:	0000                	unimp
  8c:	0a18                	addi	a4,sp,272
	...

Disassembly of section .text:

00000090 <mini_pad>:
{
      90:	1101                	addi	sp,sp,-32
      92:	ca26                	sw	s1,20(sp)
      94:	c84a                	sw	s2,16(sp)
      96:	c64e                	sw	s3,12(sp)
      98:	ce06                	sw	ra,28(sp)
      9a:	cc22                	sw	s0,24(sp)
      9c:	84ae                	mv	s1,a1
      9e:	89aa                	mv	s3,a0
      a0:	85b2                	mv	a1,a2
	int overflow = 0;
      a2:	4901                	li	s2,0
	if(pad_to == 0) pad_to = len;
      a4:	caa5                	beqz	a3,114 <mini_pad+0x84>
	if(len > pad_to) {
      a6:	0096d463          	bge	a3,s1,ae <mini_pad+0x1e>
      aa:	84b6                	mv	s1,a3
		overflow = 1;
      ac:	4905                	li	s2,1
	for(i = pad_to - len; i > 0; i --) {
      ae:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
      b2:	00045363          	bgez	s0,b8 <mini_pad+0x28>
      b6:	4401                	li	s0,0
      b8:	853a                	mv	a0,a4
      ba:	8622                	mv	a2,s0
      bc:	35d000ef          	jal	ra,c18 <memset>
      c0:	872a                	mv	a4,a0
      c2:	008506b3          	add	a3,a0,s0
      c6:	4781                	li	a5,0
	for(i = len; i > 0; i --) {
      c8:	40f48633          	sub	a2,s1,a5
      cc:	04c04663          	bgtz	a2,118 <mini_pad+0x88>
      d0:	0004d363          	bgez	s1,d6 <mini_pad+0x46>
      d4:	4481                	li	s1,0
      d6:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
      da:	40e60533          	sub	a0,a2,a4
	if(overflow) {
      de:	02090463          	beqz	s2,106 <mini_pad+0x76>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
      e2:	02c77263          	bgeu	a4,a2,106 <mini_pad+0x76>
			*(pbuffer-- - 1) = '*';
      e6:	02a00793          	li	a5,42
      ea:	fef60fa3          	sb	a5,-1(a2)
      ee:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
      f2:	00d77a63          	bgeu	a4,a3,106 <mini_pad+0x76>
			*(pbuffer-- - 1) = '*';
      f6:	fef60f23          	sb	a5,-2(a2)
      fa:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
      fe:	00d77463          	bgeu	a4,a3,106 <mini_pad+0x76>
			*(pbuffer-- - 1) = '*';
     102:	fef60ea3          	sb	a5,-3(a2)
}
     106:	40f2                	lw	ra,28(sp)
     108:	4462                	lw	s0,24(sp)
     10a:	44d2                	lw	s1,20(sp)
     10c:	4942                	lw	s2,16(sp)
     10e:	49b2                	lw	s3,12(sp)
     110:	6105                	addi	sp,sp,32
     112:	8082                	ret
	if(pad_to == 0) pad_to = len;
     114:	86a6                	mv	a3,s1
     116:	bf61                	j	ae <mini_pad+0x1e>
		*(pbuffer++) = *(ptr++);
     118:	00f98633          	add	a2,s3,a5
     11c:	00064583          	lbu	a1,0(a2)
     120:	00f68633          	add	a2,a3,a5
     124:	0785                	addi	a5,a5,1
     126:	00b60023          	sb	a1,0(a2)
	for(i = len; i > 0; i --) {
     12a:	bf79                	j	c8 <mini_pad+0x38>

0000012c <DelaySysTick>:
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
#elif defined(CH32V20x) || defined(CH32V30x) || defined(CH32X03x) || defined(CH582_CH583) || defined(CH591_CH592)
	uint64_t targend = SysTick->CNT + n;
     12c:	e000f7b7          	lui	a5,0xe000f
     130:	4798                	lw	a4,8(a5)
     132:	47dc                	lw	a5,12(a5)
	while( ((int64_t)( SysTick->CNT - targend )) < 0 );
     134:	e000f837          	lui	a6,0xe000f
	uint64_t targend = SysTick->CNT + n;
     138:	00e505b3          	add	a1,a0,a4
     13c:	00a5b533          	sltu	a0,a1,a0
     140:	953e                	add	a0,a0,a5
	while( ((int64_t)( SysTick->CNT - targend )) < 0 );
     142:	00882603          	lw	a2,8(a6) # e000f008 <_eusrstack+0xc0007008>
     146:	00c82683          	lw	a3,12(a6)
     14a:	40b607b3          	sub	a5,a2,a1
     14e:	00f63733          	sltu	a4,a2,a5
     152:	40a687b3          	sub	a5,a3,a0
     156:	8f99                	sub	a5,a5,a4
     158:	fe07c5e3          	bltz	a5,142 <DelaySysTick+0x16>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     15c:	8082                	ret

0000015e <mini_itoa.part.0>:
	int	negative = 0;
     15e:	4881                	li	a7,0
	if (value < 0 && !unsig) {
     160:	00055663          	bgez	a0,16c <mini_itoa.part.0+0xe>
     164:	e681                	bnez	a3,16c <mini_itoa.part.0+0xe>
		value = -value;
     166:	40a00533          	neg	a0,a0
		negative = 1;
     16a:	4885                	li	a7,1
     16c:	06100793          	li	a5,97
     170:	c219                	beqz	a2,176 <mini_itoa.part.0+0x18>
     172:	04100793          	li	a5,65
	int	negative = 0;
     176:	883a                	mv	a6,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     178:	4e25                	li	t3,9
     17a:	ff678613          	addi	a2,a5,-10 # e000eff6 <_eusrstack+0xc0006ff6>
		int digit = value % radix;
     17e:	02b577b3          	remu	a5,a0,a1
     182:	832a                	mv	t1,a0
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     184:	0ff7f693          	andi	a3,a5,255
     188:	04fe6463          	bltu	t3,a5,1d0 <mini_itoa.part.0+0x72>
     18c:	03068693          	addi	a3,a3,48
     190:	0ff6f693          	andi	a3,a3,255
     194:	00d80023          	sb	a3,0(a6)
     198:	00180793          	addi	a5,a6,1
		value /= radix;
     19c:	02b55533          	divu	a0,a0,a1
	} while (value > 0);
     1a0:	02b37663          	bgeu	t1,a1,1cc <mini_itoa.part.0+0x6e>
	if (negative)
     1a4:	00088863          	beqz	a7,1b4 <mini_itoa.part.0+0x56>
		*(pbuffer++) = '-';
     1a8:	02d00693          	li	a3,45
     1ac:	00d78023          	sb	a3,0(a5)
     1b0:	00280793          	addi	a5,a6,2
	len = (pbuffer - buffer);
     1b4:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     1b8:	4609                	li	a2,2
	*(pbuffer) = '\0';
     1ba:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     1be:	4681                	li	a3,0
     1c0:	02c54633          	div	a2,a0,a2
     1c4:	17fd                	addi	a5,a5,-1
     1c6:	00c6c763          	blt	a3,a2,1d4 <mini_itoa.part.0+0x76>
}
     1ca:	8082                	ret
	} while (value > 0);
     1cc:	883e                	mv	a6,a5
     1ce:	bf45                	j	17e <mini_itoa.part.0+0x20>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     1d0:	96b2                	add	a3,a3,a2
     1d2:	bf7d                	j	190 <mini_itoa.part.0+0x32>
		char j = buffer[i];
     1d4:	00d705b3          	add	a1,a4,a3
		buffer[i] = buffer[len-i-1];
     1d8:	0007c883          	lbu	a7,0(a5)
		char j = buffer[i];
     1dc:	0005c803          	lbu	a6,0(a1)
	for (i = 0; i < len / 2; i++) {
     1e0:	0685                	addi	a3,a3,1
		buffer[i] = buffer[len-i-1];
     1e2:	01158023          	sb	a7,0(a1)
		buffer[len-i-1] = j;
     1e6:	01078023          	sb	a6,0(a5)
	for (i = 0; i < len / 2; i++) {
     1ea:	bfe9                	j	1c4 <mini_itoa.part.0+0x66>

000001ec <DevSetMode>:
}

void DevSetMode(uint16_t mode) {
#if !defined(CH571_CH573)
	if(mode) {
		BB->CTRL_CFG = DEVSETMODE_ON;
     1ec:	4000c737          	lui	a4,0x4000c
     1f0:	10072783          	lw	a5,256(a4) # 4000c100 <_eusrstack+0x20004100>
     1f4:	e7f7f793          	andi	a5,a5,-385
	if(mode) {
     1f8:	c115                	beqz	a0,21c <DevSetMode+0x30>
		BB->CTRL_CFG = DEVSETMODE_ON;
     1fa:	1007e793          	ori	a5,a5,256
     1fe:	10f72023          	sw	a5,256(a4)
		RF->RF2 |= 0x330000;
     202:	4000d737          	lui	a4,0x4000d
     206:	471c                	lw	a5,8(a4)
     208:	003306b7          	lui	a3,0x330
     20c:	8fd5                	or	a5,a5,a3
     20e:	c71c                	sw	a5,8(a4)
	mode = (mode == 0) ? 0x80 : mode;
#elif !defined(CH32V208)
	mode |= 0x30000;
#endif
#endif // ! CH571_CH573
	LL->CTRL_MOD = mode;
     210:	4000c7b7          	lui	a5,0x4000c
     214:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
     218:	cba8                	sw	a0,80(a5)
}
     21a:	8082                	ret
		BB->CTRL_CFG = DEVSETMODE_OFF;
     21c:	0807e793          	ori	a5,a5,128
     220:	10f72023          	sw	a5,256(a4) # 4000d100 <_eusrstack+0x20005100>
		RF->RF2 &= 0xffcdffff;
     224:	4000d6b7          	lui	a3,0x4000d
     228:	469c                	lw	a5,8(a3)
     22a:	ffce0737          	lui	a4,0xffce0
     22e:	177d                	addi	a4,a4,-1
     230:	8ff9                	and	a5,a5,a4
     232:	c69c                	sw	a5,8(a3)
	mode = (mode == 0) ? 0x80 : mode;
     234:	08000513          	li	a0,128
     238:	bfe1                	j	210 <DevSetMode+0x24>

0000023a <RFEND_TXCTune>:

uint32_t RFEND_TXCTune(uint8_t channel) {
	// 0xbf = 2401 MHz
	RF->RF1 &= 0xfffffffe;
     23a:	4000d737          	lui	a4,0x4000d
     23e:	435c                	lw	a5,4(a4)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
     240:	6689                	lui	a3,0x2
     242:	cec68693          	addi	a3,a3,-788 # 1cec <channel_map>
	RF->RF1 &= 0xfffffffe;
     246:	9bf9                	andi	a5,a5,-2
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
     248:	96aa                	add	a3,a3,a0
	RF->RF1 &= 0xfffffffe;
     24a:	c35c                	sw	a5,4(a4)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
     24c:	0006c783          	lbu	a5,0(a3)
     250:	66b1                	lui	a3,0xc
     252:	5f10                	lw	a2,56(a4)
     254:	f0068693          	addi	a3,a3,-256 # bf00 <iSLER_mess.c.731a8212+0x8d28>
     258:	07a2                	slli	a5,a5,0x8
     25a:	97b6                	add	a5,a5,a3
     25c:	7681                	lui	a3,0xfffe0
     25e:	0ff68693          	addi	a3,a3,255 # fffe00ff <_eusrstack+0xdffd80ff>
     262:	8e75                	and	a2,a2,a3
     264:	8fd1                	or	a5,a5,a2
     266:	df1c                	sw	a5,56(a4)
	RF->RF1 |= 1;
     268:	435c                	lw	a5,4(a4)

	LL->TMR = 8000;
	while(!(RF->TXCTUNE_CO_CTRL & (1 << 25)) || !(RF->TXCTUNE_CO_CTRL & (1 << 26))) {
     26a:	02000637          	lui	a2,0x2000
     26e:	040006b7          	lui	a3,0x4000
	RF->RF1 |= 1;
     272:	0017e793          	ori	a5,a5,1
     276:	c35c                	sw	a5,4(a4)
	LL->TMR = 8000;
     278:	4000c7b7          	lui	a5,0x4000c
     27c:	6709                	lui	a4,0x2
     27e:	f4070713          	addi	a4,a4,-192 # 1f40 <_data_lma+0x22c>
     282:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
     286:	d3f8                	sw	a4,100(a5)
		if(LL->TMR == 0) {
     288:	4000c5b7          	lui	a1,0x4000c
	while(!(RF->TXCTUNE_CO_CTRL & (1 << 25)) || !(RF->TXCTUNE_CO_CTRL & (1 << 26))) {
     28c:	4000d737          	lui	a4,0x4000d
     290:	09072783          	lw	a5,144(a4) # 4000d090 <_eusrstack+0x20005090>
     294:	8ff1                	and	a5,a5,a2
     296:	c789                	beqz	a5,2a0 <RFEND_TXCTune+0x66>
     298:	09072783          	lw	a5,144(a4)
     29c:	8ff5                	and	a5,a5,a3
     29e:	e789                	bnez	a5,2a8 <RFEND_TXCTune+0x6e>
		if(LL->TMR == 0) {
     2a0:	20058793          	addi	a5,a1,512 # 4000c200 <_eusrstack+0x20004200>
     2a4:	53fc                	lw	a5,100(a5)
     2a6:	f7ed                	bnez	a5,290 <RFEND_TXCTune+0x56>
			break;
		}
	}

	uint8_t nCO = (uint8_t)RF->TXCTUNE_CO_CTRL & 0x3f;
     2a8:	4000d7b7          	lui	a5,0x4000d
     2ac:	0907a503          	lw	a0,144(a5) # 4000d090 <_eusrstack+0x20005090>
	uint8_t nGA = (uint8_t)(RF->TXCTUNE_GA_CTRL >> 10) & 0x7f;
     2b0:	0947a783          	lw	a5,148(a5)

	// printf("nCO,nGA ch:%u idx:%u %u,%u\n", channel, channel_map[channel], nCO,nGA);

	return (nGA << 24) | nCO;
     2b4:	03f57513          	andi	a0,a0,63
	uint8_t nGA = (uint8_t)(RF->TXCTUNE_GA_CTRL >> 10) & 0x7f;
     2b8:	83a9                	srli	a5,a5,0xa
	return (nGA << 24) | nCO;
     2ba:	07f7f793          	andi	a5,a5,127
     2be:	07e2                	slli	a5,a5,0x18
}
     2c0:	8d5d                	or	a0,a0,a5
     2c2:	8082                	ret

000002c4 <blink>:
	.msgCode = 0xC1C2,
	.dest = {0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6},
	.group_id = 0x55,
};

void blink(int n) {
     2c4:	1101                	addi	sp,sp,-32
     2c6:	c84a                	sw	s2,16(sp)
	for(int i = n-1; i >= 0; i--) {
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
		Delay_Ms(33);
     2c8:	0003c937          	lui	s2,0x3c
void blink(int n) {
     2cc:	cc22                	sw	s0,24(sp)
     2ce:	ca26                	sw	s1,20(sp)
     2d0:	c64e                	sw	s3,12(sp)
     2d2:	ce06                	sw	ra,28(sp)
	for(int i = n-1; i >= 0; i--) {
     2d4:	fff50413          	addi	s0,a0,-1
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
     2d8:	400014b7          	lui	s1,0x40001
		Delay_Ms(33);
     2dc:	6cc90913          	addi	s2,s2,1740 # 3c6cc <iSLER_mess.c.731a8212+0x394f4>
	for(int i = n-1; i >= 0; i--) {
     2e0:	59fd                	li	s3,-1
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
     2e2:	0ac4a783          	lw	a5,172(s1) # 400010ac <_eusrstack+0x1fff90ac>
		Delay_Ms(33);
     2e6:	854a                	mv	a0,s2
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
     2e8:	1007e793          	ori	a5,a5,256
     2ec:	0af4a623          	sw	a5,172(s1)
		Delay_Ms(33);
     2f0:	3d35                	jal	12c <DelaySysTick>
		funDigitalWrite( LED, FUN_HIGH ); // Turn off LED
     2f2:	0a84a783          	lw	a5,168(s1)
     2f6:	1007e793          	ori	a5,a5,256
     2fa:	0af4a423          	sw	a5,168(s1)
		if(i) Delay_Ms(33);
     2fe:	c019                	beqz	s0,304 <blink+0x40>
     300:	854a                	mv	a0,s2
     302:	352d                	jal	12c <DelaySysTick>
	for(int i = n-1; i >= 0; i--) {
     304:	147d                	addi	s0,s0,-1
     306:	fd341ee3          	bne	s0,s3,2e2 <blink+0x1e>
	}
}
     30a:	40f2                	lw	ra,28(sp)
     30c:	4462                	lw	s0,24(sp)
     30e:	44d2                	lw	s1,20(sp)
     310:	4942                	lw	s2,16(sp)
     312:	49b2                	lw	s3,12(sp)
     314:	6105                	addi	sp,sp,32
     316:	8082                	ret

00000318 <Neo_render_colorFlashing.constprop.0>:
	systick_millis++;
}


int8_t systick_handleTimeout(uint32_t *ref_time, uint32_t duration) {
	uint32_t now = millis();
     318:	cdc1a603          	lw	a2,-804(gp) # 200000d8 <systick_millis>

    return led_arr[ledIdx].packed;
}

uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
    if (systick_handleTimeout(&fr->ref_time, fr->frame_duration)) {
     31c:	ca018693          	addi	a3,gp,-864 # 2000009c <leds_frame>
	if (now - *ref_time > duration) {
     320:	4a98                	lw	a4,16(a3)
     322:	42cc                	lw	a1,4(a3)
     324:	40e60733          	sub	a4,a2,a4
     328:	18818e13          	addi	t3,gp,392 # 20000584 <led_arr>
     32c:	0ce5f763          	bgeu	a1,a4,3fa <Neo_render_colorFlashing.constprop.0+0xe2>
     330:	ca018793          	addi	a5,gp,-864 # 2000009c <leds_frame>
void animation_step(animation_color_t* ani) {
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
}

RGB_t animation_currentColor(animation_color_t* ani) {
    return ani->colors[ani->ref_index];
     334:	cb818893          	addi	a7,gp,-840 # 200000b4 <color_ani>
        fr->frame_value += 1;
     338:	0097c703          	lbu	a4,9(a5)
     33c:	0058c583          	lbu	a1,5(a7)
		*ref_time = now;
     340:	cb90                	sw	a2,16(a5)
     342:	0008a603          	lw	a2,0(a7)
     346:	0705                	addi	a4,a4,1
     348:	0ff77713          	andi	a4,a4,255
     34c:	00259313          	slli	t1,a1,0x2
     350:	961a                	add	a2,a2,t1
     352:	00e784a3          	sb	a4,9(a5)
     356:	00062883          	lw	a7,0(a2) # 2000000 <iSLER_mess.c.731a8212+0x1ffce28>
     35a:	00064f83          	lbu	t6,0(a2)
     35e:	00164f03          	lbu	t5,1(a2)
     362:	00264e83          	lbu	t4,2(a2)
        RGB_t color = animation_currentColor(ani);

        for (int i=0; i < NR_LEDS; i++) {
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     366:	0ff00613          	li	a2,255
     36a:	02c70633          	mul	a2,a4,a2
uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
     36e:	1141                	addi	sp,sp,-16
     370:	c646                	sw	a7,12(sp)
     372:	c046                	sw	a7,0(sp)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     374:	06400893          	li	a7,100
     378:	18818693          	addi	a3,gp,392 # 20000584 <led_arr>
     37c:	018e0293          	addi	t0,t3,24
     380:	cb818813          	addi	a6,gp,-840 # 200000b4 <color_ani>
     384:	03164633          	div	a2,a2,a7
     388:	6889                	lui	a7,0x2
     38a:	bcc88893          	addi	a7,a7,-1076 # 1bcc <SIN_LUT>
     38e:	0ff67613          	andi	a2,a2,255
     392:	9646                	add	a2,a2,a7
     394:	00064603          	lbu	a2,0(a2)
     398:	02cf8333          	mul	t1,t6,a2
     39c:	02cf08b3          	mul	a7,t5,a2
     3a0:	40835313          	srai	t1,t1,0x8
     3a4:	02ce8633          	mul	a2,t4,a2
     3a8:	4088d893          	srai	a7,a7,0x8
     3ac:	8621                	srai	a2,a2,0x8
     3ae:	01f10023          	sb	t6,0(sp)
     3b2:	01e100a3          	sb	t5,1(sp)
     3b6:	01d10123          	sb	t4,2(sp)
     3ba:	4382                	lw	t2,0(sp)
     3bc:	c21e                	sw	t2,4(sp)
     3be:	00610223          	sb	t1,4(sp)
     3c2:	011102a3          	sb	a7,5(sp)
     3c6:	00c10323          	sb	a2,6(sp)
     3ca:	4392                	lw	t2,4(sp)
     3cc:	0076a023          	sw	t2,0(a3) # 4000000 <iSLER_mess.c.731a8212+0x3ffce28>
        for (int i=0; i < NR_LEDS; i++) {
     3d0:	0691                	addi	a3,a3,4
     3d2:	fcd29ee3          	bne	t0,a3,3ae <Neo_render_colorFlashing.constprop.0+0x96>
        }

        if (fr->frame_value >= 100) {
     3d6:	06300693          	li	a3,99
     3da:	00e6fb63          	bgeu	a3,a4,3f0 <Neo_render_colorFlashing.constprop.0+0xd8>
            fr->frame_value = 0;
     3de:	000784a3          	sb	zero,9(a5)
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     3e2:	00484783          	lbu	a5,4(a6)
     3e6:	0585                	addi	a1,a1,1
     3e8:	02f5e5b3          	rem	a1,a1,a5
     3ec:	00b802a3          	sb	a1,5(a6)

            animation_step(ani);
        }
    }

    return led_arr[ledIdx].packed;
     3f0:	050a                	slli	a0,a0,0x2
     3f2:	9572                	add	a0,a0,t3
}
     3f4:	4108                	lw	a0,0(a0)
     3f6:	0141                	addi	sp,sp,16
     3f8:	8082                	ret
    return led_arr[ledIdx].packed;
     3fa:	050a                	slli	a0,a0,0x2
     3fc:	9572                	add	a0,a0,t3
}
     3fe:	4108                	lw	a0,0(a0)
     400:	8082                	ret

00000402 <WS2812FillBuffSec.constprop.0>:
#define bMOSI PA14
#endif
#endif
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     402:	7159                	addi	sp,sp,-112
     404:	d0ca                	sw	s2,96(sp)
     406:	c6de                	sw	s7,76(sp)
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };
#endif

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
     408:	cd01ab83          	lw	s7,-816(gp) # 200000cc <WS2812LEDs>
	int place = WS2812LEDPlace;
     40c:	ccc18793          	addi	a5,gp,-820 # 200000c8 <WS2812LEDPlace>
     410:	439c                	lw	a5,0(a5)
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     412:	cece                	sw	s3,92(sp)
     414:	d2a6                	sw	s1,100(sp)
     416:	c0ea                	sw	s10,64(sp)
	int place = WS2812LEDPlace;
     418:	12818493          	addi	s1,gp,296 # 20000524 <WS2812dmabuff>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     41c:	d686                	sw	ra,108(sp)
     41e:	d4a2                	sw	s0,104(sp)
     420:	ccd2                	sw	s4,88(sp)
     422:	cad6                	sw	s5,84(sp)
     424:	c8da                	sw	s6,80(sp)
     426:	c4e2                	sw	s8,72(sp)
     428:	c2e6                	sw	s9,68(sp)
     42a:	de6e                	sw	s11,60(sp)
     42c:	c62a                	sw	a0,12(sp)
     42e:	00878d13          	addi	s10,a5,8
     432:	ccc18913          	addi	s2,gp,-820 # 200000c8 <WS2812LEDPlace>
     436:	12818993          	addi	s3,gp,296 # 20000524 <WS2812dmabuff>
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
     43a:	0607cf63          	bltz	a5,4b8 <WS2812FillBuffSec.constprop.0+0xb6>
     43e:	18818693          	addi	a3,gp,392 # 20000584 <led_arr>
     442:	00279713          	slli	a4,a5,0x2
    color_ani.ref_index = 0;
    ARRAY_SET_VALUE(led_arr, 0);
}

uint32_t WS2812BLEDCallback(int ledIdx){
    leds_frame.frame_duration = 70;
     446:	6a89                	lui	s5,0x2
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     448:	6b09                	lui	s6,0x2
     44a:	00e68a33          	add	s4,a3,a4
     44e:	8d3e                	mv	s10,a5
     450:	18818d93          	addi	s11,gp,392 # 20000584 <led_arr>
    leds_frame.frame_duration = 70;
     454:	ca018413          	addi	s0,gp,-864 # 2000009c <leds_frame>
     458:	a84a8a93          	addi	s5,s5,-1404 # 1a84 <LLE_IRQHandler+0xbe>
    return ani->colors[ani->ref_index];
     45c:	cb818c93          	addi	s9,gp,-840 # 200000b4 <color_ani>
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     460:	bccb0b13          	addi	s6,s6,-1076 # 1bcc <SIN_LUT>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
     464:	06098613          	addi	a2,s3,96
     468:	04c48a63          	beq	s1,a2,4bc <WS2812FillBuffSec.constprop.0+0xba>
	{
		if( place >= ledcount )
     46c:	077d4963          	blt	s10,s7,4de <WS2812FillBuffSec.constprop.0+0xdc>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
     470:	8e05                	sub	a2,a2,s1
     472:	4581                	li	a1,0
     474:	8526                	mv	a0,s1
     476:	7a2000ef          	jal	ra,c18 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
     47a:	47b2                	lw	a5,12(sp)
     47c:	c3a1                	beqz	a5,4bc <WS2812FillBuffSec.constprop.0+0xba>
			{
				if( place == ledcount )
     47e:	01ab9c63          	bne	s7,s10,496 <WS2812FillBuffSec.constprop.0+0x94>
				{
					// Take the DMA out of circular mode and let it expire.
#ifdef CH5xx
					R8_SPI0_INTER_EN &= ~RB_SPI_IE_DMA_END;  // Disable DMA end interrupt
     482:	40004737          	lui	a4,0x40004
     486:	00274783          	lbu	a5,2(a4) # 40004002 <_eusrstack+0x1fffc002>
     48a:	0f77f793          	andi	a5,a5,247
     48e:	00f70123          	sb	a5,2(a4)
#else
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
#endif
					WS2812BLEDInUse = 0;
     492:	cc01a423          	sw	zero,-824(gp) # 200000c4 <WS2812BLEDInUse>
				}
				place++;
     496:	0d05                	addi	s10,s10,1
     498:	a015                	j	4bc <WS2812FillBuffSec.constprop.0+0xba>
		(*ptr++) = 0;
     49a:	00049023          	sh	zero,0(s1)
		(*ptr++) = 0;
     49e:	00049123          	sh	zero,2(s1)
		(*ptr++) = 0;
     4a2:	00049223          	sh	zero,4(s1)
		(*ptr++) = 0;
     4a6:	00049323          	sh	zero,6(s1)
		(*ptr++) = 0;
     4aa:	00049423          	sh	zero,8(s1)
		place++;
     4ae:	0785                	addi	a5,a5,1
     4b0:	04b1                	addi	s1,s1,12
		(*ptr++) = 0;
     4b2:	fe049f23          	sh	zero,-2(s1)
     4b6:	b751                	j	43a <WS2812FillBuffSec.constprop.0+0x38>
	while( place < 0 && ptr != end )
     4b8:	ffa791e3          	bne	a5,s10,49a <WS2812FillBuffSec.constprop.0+0x98>
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
}
     4bc:	50b6                	lw	ra,108(sp)
     4be:	5426                	lw	s0,104(sp)
	WS2812LEDPlace = place;
     4c0:	01a92023          	sw	s10,0(s2)
}
     4c4:	5496                	lw	s1,100(sp)
     4c6:	5906                	lw	s2,96(sp)
     4c8:	49f6                	lw	s3,92(sp)
     4ca:	4a66                	lw	s4,88(sp)
     4cc:	4ad6                	lw	s5,84(sp)
     4ce:	4b46                	lw	s6,80(sp)
     4d0:	4bb6                	lw	s7,76(sp)
     4d2:	4c26                	lw	s8,72(sp)
     4d4:	4c96                	lw	s9,68(sp)
     4d6:	4d06                	lw	s10,64(sp)
     4d8:	5df2                	lw	s11,60(sp)
     4da:	6165                	addi	sp,sp,112
     4dc:	8082                	ret
    leds_frame.frame_duration = 70;
     4de:	04600793          	li	a5,70
     4e2:	c05c                	sw	a5,4(s0)
     4e4:	cb41c783          	lbu	a5,-844(gp) # 200000b0 <Neo_LedCmd>
     4e8:	4711                	li	a4,4
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     4ea:	001d0c13          	addi	s8,s10,1
     4ee:	17fd                	addi	a5,a5,-1
     4f0:	0ff7f793          	andi	a5,a5,255
     4f4:	2ef76e63          	bltu	a4,a5,7f0 <WS2812FillBuffSec.constprop.0+0x3ee>
     4f8:	078a                	slli	a5,a5,0x2
     4fa:	97d6                	add	a5,a5,s5
     4fc:	439c                	lw	a5,0(a5)
     4fe:	8782                	jr	a5
	uint32_t now = millis();
     500:	cdc1a703          	lw	a4,-804(gp) # 200000d8 <systick_millis>
	if (now - *ref_time > duration) {
     504:	481c                	lw	a5,16(s0)
     506:	04600613          	li	a2,70
     50a:	40f707b3          	sub	a5,a4,a5
     50e:	04f67463          	bgeu	a2,a5,556 <WS2812FillBuffSec.constprop.0+0x154>
		*ref_time = now;
     512:	c818                	sw	a4,16(s0)
     514:	85ee                	mv	a1,s11
        for (int i=0; i < NR_LEDS; i++) {
     516:	4601                	li	a2,0
}

RGB_t animation_colorAt(animation_color_t* ani, uint8_t steps, uint8_t index) {
    return ani->colors[(index/steps) % ani->num_colors];
     518:	4895                	li	a7,5
     51a:	4819                	li	a6,6
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     51c:	00e44703          	lbu	a4,14(s0)
     520:	004cc503          	lbu	a0,4(s9)
     524:	00c707b3          	add	a5,a4,a2
     528:	0ff7f793          	andi	a5,a5,255
     52c:	0317d7b3          	divu	a5,a5,a7
        for (int i=0; i < NR_LEDS; i++) {
     530:	0605                	addi	a2,a2,1
     532:	02a7e7b3          	rem	a5,a5,a0
     536:	000ca503          	lw	a0,0(s9)
     53a:	078a                	slli	a5,a5,0x2
     53c:	97aa                	add	a5,a5,a0
     53e:	439c                	lw	a5,0(a5)
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     540:	c19c                	sw	a5,0(a1)
     542:	cc3e                	sw	a5,24(sp)
     544:	d23e                	sw	a5,36(sp)
        for (int i=0; i < NR_LEDS; i++) {
     546:	0591                	addi	a1,a1,4
     548:	fd061ae3          	bne	a2,a6,51c <WS2812FillBuffSec.constprop.0+0x11a>
        fr->ref_index += fr->frame_step;
     54c:	00844783          	lbu	a5,8(s0)
     550:	973e                	add	a4,a4,a5
     552:	00e40723          	sb	a4,14(s0)
    return led_arr[ledIdx].packed;
     556:	000a2503          	lw	a0,0(s4)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     55a:	6709                	lui	a4,0x2
     55c:	00b55793          	srli	a5,a0,0xb
     560:	ccc70713          	addi	a4,a4,-820 # 1ccc <bitquartets.0>
     564:	8bf9                	andi	a5,a5,30
     566:	97ba                	add	a5,a5,a4
     568:	0007d783          	lhu	a5,0(a5)
		ptr += 6;
     56c:	04b1                	addi	s1,s1,12
     56e:	0a11                	addi	s4,s4,4
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     570:	fef49a23          	sh	a5,-12(s1)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     574:	00755793          	srli	a5,a0,0x7
     578:	8bf9                	andi	a5,a5,30
     57a:	97ba                	add	a5,a5,a4
     57c:	0007d783          	lhu	a5,0(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     580:	8d62                	mv	s10,s8
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     582:	fef49b23          	sh	a5,-10(s1)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
     586:	00355793          	srli	a5,a0,0x3
     58a:	8bf9                	andi	a5,a5,30
     58c:	97ba                	add	a5,a5,a4
     58e:	0007d783          	lhu	a5,0(a5)
     592:	fef49c23          	sh	a5,-8(s1)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
     596:	00f57793          	andi	a5,a0,15
     59a:	0786                	slli	a5,a5,0x1
     59c:	97ba                	add	a5,a5,a4
     59e:	0007d783          	lhu	a5,0(a5)
     5a2:	fef49d23          	sh	a5,-6(s1)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     5a6:	01355793          	srli	a5,a0,0x13
     5aa:	8bf9                	andi	a5,a5,30
     5ac:	97ba                	add	a5,a5,a4
     5ae:	0007d783          	lhu	a5,0(a5)
     5b2:	fef49e23          	sh	a5,-4(s1)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     5b6:	00f55793          	srli	a5,a0,0xf
     5ba:	8bf9                	andi	a5,a5,30
     5bc:	97ba                	add	a5,a5,a4
     5be:	0007d783          	lhu	a5,0(a5)
     5c2:	fef49f23          	sh	a5,-2(s1)
     5c6:	bd79                	j	464 <WS2812FillBuffSec.constprop.0+0x62>
	uint32_t now = millis();
     5c8:	cdc1a703          	lw	a4,-804(gp) # 200000d8 <systick_millis>
	if (now - *ref_time > duration) {
     5cc:	481c                	lw	a5,16(s0)
     5ce:	04600613          	li	a2,70
     5d2:	40f707b3          	sub	a5,a4,a5
     5d6:	f8f670e3          	bgeu	a2,a5,556 <WS2812FillBuffSec.constprop.0+0x154>
        led_arr[fr->prev_index] = COLOR_BLACK;       // Turn off previous LED
     5da:	00d44783          	lbu	a5,13(s0)
		*ref_time = now;
     5de:	c818                	sw	a4,16(s0)
    return ani->colors[ani->ref_index];
     5e0:	005cc703          	lbu	a4,5(s9)
     5e4:	000ca603          	lw	a2,0(s9)
     5e8:	078a                	slli	a5,a5,0x2
     5ea:	97ee                	add	a5,a5,s11
     5ec:	0007a023          	sw	zero,0(a5)
     5f0:	00271593          	slli	a1,a4,0x2
        led_arr[fr->ref_index] = animation_currentColor(ani);
     5f4:	00e44783          	lbu	a5,14(s0)
     5f8:	962e                	add	a2,a2,a1
     5fa:	420c                	lw	a1,0(a2)
     5fc:	00279613          	slli	a2,a5,0x2
     600:	966e                	add	a2,a2,s11
     602:	c20c                	sw	a1,0(a2)
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     604:	00844603          	lbu	a2,8(s0)
        fr->prev_index = fr->ref_index;
     608:	00f406a3          	sb	a5,13(s0)
     60c:	ce2e                	sw	a1,28(sp)
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     60e:	97b2                	add	a5,a5,a2
     610:	0ff7f793          	andi	a5,a5,255
        fr->ref_index = next_idx % NR_LEDS;
     614:	4619                	li	a2,6
     616:	02c7f633          	remu	a2,a5,a2
     61a:	d22e                	sw	a1,36(sp)
     61c:	00c40723          	sb	a2,14(s0)
        if (next_idx >= NR_LEDS) animation_step(ani);
     620:	4615                	li	a2,5
     622:	f2f67ae3          	bgeu	a2,a5,556 <WS2812FillBuffSec.constprop.0+0x154>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     626:	004cc783          	lbu	a5,4(s9)
     62a:	0705                	addi	a4,a4,1
     62c:	02f76733          	rem	a4,a4,a5
     630:	00ec82a3          	sb	a4,5(s9)
     634:	b70d                	j	556 <WS2812FillBuffSec.constprop.0+0x154>
	uint32_t now = millis();
     636:	cdc1a703          	lw	a4,-804(gp) # 200000d8 <systick_millis>
	if (now - *ref_time > duration) {
     63a:	481c                	lw	a5,16(s0)
     63c:	04600613          	li	a2,70
     640:	40f707b3          	sub	a5,a4,a5
     644:	f0f679e3          	bgeu	a2,a5,556 <WS2812FillBuffSec.constprop.0+0x154>
		*ref_time = now;
     648:	c818                	sw	a4,16(s0)
     64a:	856e                	mv	a0,s11
        for (int i = 0; i < NR_LEDS; i++) {
     64c:	4701                	li	a4,0
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     64e:	03100893          	li	a7,49
     652:	f9c00313          	li	t1,-100
     656:	06400e13          	li	t3,100
        for (int i = 0; i < NR_LEDS; i++) {
     65a:	4f99                	li	t6,6
    return ani->colors[ani->ref_index];
     65c:	005cc583          	lbu	a1,5(s9)
     660:	000ca783          	lw	a5,0(s9)
            uint8_t diff = fr->ref_index - i;
     664:	00e44603          	lbu	a2,14(s0)
     668:	00259813          	slli	a6,a1,0x2
     66c:	97c2                	add	a5,a5,a6
     66e:	0007c283          	lbu	t0,0(a5)
     672:	0017c383          	lbu	t2,1(a5)
     676:	0027c803          	lbu	a6,2(a5)
     67a:	40e607b3          	sub	a5,a2,a4
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     67e:	0ff7f793          	andi	a5,a5,255
     682:	02f28eb3          	mul	t4,t0,a5
     686:	4f01                	li	t5,0
     688:	031e8eb3          	mul	t4,t4,a7
     68c:	026ecd33          	div	s10,t4,t1
     690:	9d16                	add	s10,s10,t0
     692:	000d4863          	bltz	s10,6a2 <WS2812FillBuffSec.constprop.0+0x2a0>
     696:	03cecf33          	div	t5,t4,t3
     69a:	41e28f33          	sub	t5,t0,t5
     69e:	0fff7f13          	andi	t5,t5,255
     6a2:	027782b3          	mul	t0,a5,t2
     6a6:	4e81                	li	t4,0
     6a8:	031282b3          	mul	t0,t0,a7
     6ac:	0262cd33          	div	s10,t0,t1
     6b0:	9d1e                	add	s10,s10,t2
     6b2:	000d4863          	bltz	s10,6c2 <WS2812FillBuffSec.constprop.0+0x2c0>
     6b6:	03c2ceb3          	div	t4,t0,t3
     6ba:	41d38eb3          	sub	t4,t2,t4
     6be:	0ffefe93          	andi	t4,t4,255
     6c2:	030787b3          	mul	a5,a5,a6
     6c6:	4381                	li	t2,0
     6c8:	031787b3          	mul	a5,a5,a7
     6cc:	0267c2b3          	div	t0,a5,t1
     6d0:	92c2                	add	t0,t0,a6
     6d2:	0002c863          	bltz	t0,6e2 <WS2812FillBuffSec.constprop.0+0x2e0>
     6d6:	03c7c7b3          	div	a5,a5,t3
     6da:	40f807b3          	sub	a5,a6,a5
     6de:	0ff7f393          	andi	t2,a5,255
     6e2:	00271293          	slli	t0,a4,0x2
     6e6:	92ee                	add	t0,t0,s11
     6e8:	0002a023          	sw	zero,0(t0)
     6ec:	01e50023          	sb	t5,0(a0)
     6f0:	01d500a3          	sb	t4,1(a0)
     6f4:	00750123          	sb	t2,2(a0)
        for (int i = 0; i < NR_LEDS; i++) {
     6f8:	0705                	addi	a4,a4,1
     6fa:	0511                	addi	a0,a0,4
     6fc:	f7f710e3          	bne	a4,t6,65c <WS2812FillBuffSec.constprop.0+0x25a>
        uint8_t next_increment = fr->ref_index + fr->frame_step;
     700:	00844783          	lbu	a5,8(s0)
     704:	97b2                	add	a5,a5,a2
     706:	0ff7f793          	andi	a5,a5,255
        fr->ref_index = next_increment % NR_LEDS;
     70a:	02e7f733          	remu	a4,a5,a4
     70e:	00e40723          	sb	a4,14(s0)
        if (next_increment >= NR_LEDS) {
     712:	4715                	li	a4,5
     714:	e4f771e3          	bgeu	a4,a5,556 <WS2812FillBuffSec.constprop.0+0x154>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     718:	004cc783          	lbu	a5,4(s9)
     71c:	0585                	addi	a1,a1,1
     71e:	02f5e5b3          	rem	a1,a1,a5
     722:	00bc82a3          	sb	a1,5(s9)
     726:	bd05                	j	556 <WS2812FillBuffSec.constprop.0+0x154>
	uint32_t now = millis();
     728:	cdc1a703          	lw	a4,-804(gp) # 200000d8 <systick_millis>
	if (now - *ref_time > duration) {
     72c:	481c                	lw	a5,16(s0)
            break;
        case NEO_COLOR_FADE:
            return Neo_render_colorFade(&leds_frame, &color_ani, ledIdx);
            break;
        case NEO_SOLO_COLOR_FADE:
            leds_frame.frame_duration = 10;
     72e:	4629                	li	a2,10
     730:	c050                	sw	a2,4(s0)
     732:	40f707b3          	sub	a5,a4,a5
     736:	e2f670e3          	bgeu	a2,a5,556 <WS2812FillBuffSec.constprop.0+0x154>
		*ref_time = now;
     73a:	c818                	sw	a4,16(s0)
        fr->frame_value += 3;
     73c:	00944703          	lbu	a4,9(s0)
    return ani->colors[ani->ref_index];
     740:	005cc603          	lbu	a2,5(s9)
     744:	000ca783          	lw	a5,0(s9)
     748:	070d                	addi	a4,a4,3
     74a:	0ff77713          	andi	a4,a4,255
     74e:	00261593          	slli	a1,a2,0x2
     752:	97ae                	add	a5,a5,a1
     754:	00e404a3          	sb	a4,9(s0)
     758:	0007a883          	lw	a7,0(a5)
     75c:	0007c503          	lbu	a0,0(a5)
     760:	0017c583          	lbu	a1,1(a5)
     764:	0027c803          	lbu	a6,2(a5)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     768:	0ff00793          	li	a5,255
     76c:	02f707b3          	mul	a5,a4,a5
     770:	d246                	sw	a7,36(sp)
     772:	d646                	sw	a7,44(sp)
     774:	d046                	sw	a7,32(sp)
     776:	06400893          	li	a7,100
     77a:	0317c7b3          	div	a5,a5,a7
     77e:	0ff7f793          	andi	a5,a5,255
     782:	97da                	add	a5,a5,s6
     784:	0007c783          	lbu	a5,0(a5)
     788:	02f50533          	mul	a0,a0,a5
     78c:	02f585b3          	mul	a1,a1,a5
     790:	8521                	srai	a0,a0,0x8
     792:	02a10223          	sb	a0,36(sp)
     796:	02f807b3          	mul	a5,a6,a5
     79a:	85a1                	srai	a1,a1,0x8
     79c:	02b102a3          	sb	a1,37(sp)
     7a0:	87a1                	srai	a5,a5,0x8
     7a2:	02f10323          	sb	a5,38(sp)
     7a6:	00e44783          	lbu	a5,14(s0)
     7aa:	5512                	lw	a0,36(sp)
     7ac:	00279593          	slli	a1,a5,0x2
     7b0:	95ee                	add	a1,a1,s11
     7b2:	c188                	sw	a0,0(a1)
     7b4:	d42a                	sw	a0,40(sp)
        if (fr->frame_value >= 100) {
     7b6:	06300593          	li	a1,99
     7ba:	d8e5fee3          	bgeu	a1,a4,556 <WS2812FillBuffSec.constprop.0+0x154>
            uint8_t next_idx = fr->ref_index + fr->frame_step;
     7be:	00844703          	lbu	a4,8(s0)
            fr->frame_value = 0;
     7c2:	000404a3          	sb	zero,9(s0)
            uint8_t next_idx = fr->ref_index + fr->frame_step;
     7c6:	97ba                	add	a5,a5,a4
     7c8:	0ff7f793          	andi	a5,a5,255
            fr->ref_index = next_idx % NR_LEDS;
     7cc:	4719                	li	a4,6
     7ce:	02e7f733          	remu	a4,a5,a4
     7d2:	00e40723          	sb	a4,14(s0)
            if (next_idx >= NR_LEDS) {
     7d6:	4715                	li	a4,5
     7d8:	d6f77fe3          	bgeu	a4,a5,556 <WS2812FillBuffSec.constprop.0+0x154>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     7dc:	004cc783          	lbu	a5,4(s9)
     7e0:	0605                	addi	a2,a2,1
     7e2:	02f66633          	rem	a2,a2,a5
     7e6:	00cc82a3          	sb	a2,5(s9)
     7ea:	b3b5                	j	556 <WS2812FillBuffSec.constprop.0+0x154>
            return Neo_render_soloColorFade(&leds_frame, &color_ani, ledIdx);
            break;
        case NEO_COLOR_FLASHING:
            leds_frame.frame_duration = 10;
     7ec:	47a9                	li	a5,10
     7ee:	c05c                	sw	a5,4(s0)
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
            break;
        default:
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
     7f0:	856a                	mv	a0,s10
     7f2:	361d                	jal	318 <Neo_render_colorFlashing.constprop.0>
     7f4:	b39d                	j	55a <WS2812FillBuffSec.constprop.0+0x158>

000007f6 <WS2812BDMAStart.constprop.0>:

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
#endif

void WS2812BDMAStart( int leds )
     7f6:	1141                	addi	sp,sp,-16
     7f8:	c606                	sw	ra,12(sp)
     7fa:	c422                	sw	s0,8(sp)
}

// Disable Global Interrupt
RV_STATIC_INLINE void __disable_irq()
{
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
     7fc:	300027f3          	csrr	a5,mstatus
	result &= ~0x88; __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
     800:	f777f793          	andi	a5,a5,-137
     804:	30079073          	csrw	mstatus,a5
{
	// Enter critical section.
	__disable_irq();
	WS2812BLEDInUse = 1;
     808:	4705                	li	a4,1
     80a:	cce1a423          	sw	a4,-824(gp) # 200000c4 <WS2812BLEDInUse>
#ifdef CH5xx
	R8_SPI0_INTER_EN &= ~RB_SPI_IE_DMA_END;
     80e:	40004437          	lui	s0,0x40004
     812:	00244783          	lbu	a5,2(s0) # 40004002 <_eusrstack+0x1fffc002>
     816:	0f77f793          	andi	a5,a5,247
     81a:	00f40123          	sb	a5,2(s0)
	R8_SPI0_CTRL_CFG &= ~RB_SPI_DMA_ENABLE;
     81e:	00144783          	lbu	a5,1(s0)
     822:	0fe7f793          	andi	a5,a5,254
     826:	00f400a3          	sb	a5,1(s0)
	R16_SPI0_TOTAL_CNT = 0;
     82a:	00041623          	sh	zero,12(s0)
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
     82e:	300027f3          	csrr	a5,mstatus
	result |= 0x88;  __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
     832:	0887e793          	ori	a5,a5,136
     836:	30079073          	csrw	mstatus,a5
	DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
	DMA1_Channel3->CNTR  = 0;
	DMA1_Channel3->MADDR = (uint32_t)WS2812dmabuff;
#endif
  __enable_irq();
	WS2812LEDs = leds;
     83a:	4719                	li	a4,6
     83c:	cce1a823          	sw	a4,-816(gp) # 200000cc <WS2812LEDs>
	WS2812LEDPlace = -WS2812B_RESET_PERIOD;
	

#ifdef CH5xx
	WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 0 );
     840:	4501                	li	a0,0
	WS2812LEDPlace = -WS2812B_RESET_PERIOD;
     842:	5779                	li	a4,-2
     844:	cce1a623          	sw	a4,-820(gp) # 200000c8 <WS2812LEDPlace>
	WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 0 );
     848:	3e6d                	jal	402 <WS2812FillBuffSec.constprop.0>
	R16_SPI0_TOTAL_CNT = DMA_BUFFER_LEN * 2;
     84a:	06000793          	li	a5,96
     84e:	00f41623          	sh	a5,12(s0)
	R16_SPI0_DMA_BEG = (uint32_t)WS2812dmabuff;
     852:	12818793          	addi	a5,gp,296 # 20000524 <WS2812dmabuff>
     856:	07c2                	slli	a5,a5,0x10
     858:	83c1                	srli	a5,a5,0x10
     85a:	00f41c23          	sh	a5,24(s0)
	R8_SPI0_INT_FLAG = RB_SPI_IF_CNT_END | RB_SPI_IF_DMA_END;
     85e:	47a5                	li	a5,9
     860:	00f40323          	sb	a5,6(s0)
	R8_SPI0_INTER_EN = RB_SPI_IE_DMA_END;
     864:	47a1                	li	a5,8
     866:	00f40123          	sb	a5,2(s0)
	R8_SPI0_CTRL_CFG |= RB_SPI_DMA_ENABLE;
     86a:	00144783          	lbu	a5,1(s0)
     86e:	0ff7f793          	andi	a5,a5,255
     872:	0017e793          	ori	a5,a5,1
     876:	00f400a3          	sb	a5,1(s0)
#else
	WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 0 );
	DMA1_Channel3->CNTR = DMA_BUFFER_LEN; // Number of unique uint16_t entries.
	DMA1_Channel3->CFGR |= DMA_Mode_Circular;
#endif
}
     87a:	40b2                	lw	ra,12(sp)
     87c:	4422                	lw	s0,8(sp)
     87e:	0141                	addi	sp,sp,16
     880:	8082                	ret

00000882 <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     882:	e00007b7          	lui	a5,0xe0000
     886:	3807a783          	lw	a5,896(a5) # e0000380 <_eusrstack+0xbfff8380>
}
     88a:	8082                	ret

0000088c <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     88c:	e0000737          	lui	a4,0xe0000
     890:	38072783          	lw	a5,896(a4) # e0000380 <_eusrstack+0xbfff8380>
WEAK int _write(int fd, const char *buf, int size)
     894:	7139                	addi	sp,sp,-64
     896:	de06                	sw	ra,60(sp)
     898:	dc22                	sw	s0,56(sp)
     89a:	da26                	sw	s1,52(sp)
     89c:	d84a                	sw	s2,48(sp)
     89e:	d64e                	sw	s3,44(sp)
     8a0:	d452                	sw	s4,40(sp)
     8a2:	d256                	sw	s5,36(sp)
     8a4:	d05a                	sw	s6,32(sp)
     8a6:	ce5e                	sw	s7,28(sp)
     8a8:	cc62                	sw	s8,24(sp)
     8aa:	ca66                	sw	s9,20(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     8ac:	0c07f793          	andi	a5,a5,192
     8b0:	0c000693          	li	a3,192
     8b4:	0ad78a63          	beq	a5,a3,968 <_write.constprop.0+0xdc>
	char buffer[4] = { 0 };
     8b8:	c602                	sw	zero,12(sp)
     8ba:	842e                	mv	s0,a1
	if( size == 0 )
     8bc:	e9c5                	bnez	a1,96c <_write.constprop.0+0xe0>
		lastdmd = (*DMDATA0);
     8be:	38072783          	lw	a5,896(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     8c2:	c789                	beqz	a5,8cc <_write.constprop.0+0x40>
     8c4:	0807f793          	andi	a5,a5,128
     8c8:	e391                	bnez	a5,8cc <_write.constprop.0+0x40>
     8ca:	3f65                	jal	882 <internal_handle_input.constprop.0>
}
     8cc:	50f2                	lw	ra,60(sp)
     8ce:	8522                	mv	a0,s0
     8d0:	5462                	lw	s0,56(sp)
     8d2:	54d2                	lw	s1,52(sp)
     8d4:	5942                	lw	s2,48(sp)
     8d6:	59b2                	lw	s3,44(sp)
     8d8:	5a22                	lw	s4,40(sp)
     8da:	5a92                	lw	s5,36(sp)
     8dc:	5b02                	lw	s6,32(sp)
     8de:	4bf2                	lw	s7,28(sp)
     8e0:	4c62                	lw	s8,24(sp)
     8e2:	4cd2                	lw	s9,20(sp)
     8e4:	6121                	addi	sp,sp,64
     8e6:	8082                	ret
		int tosend = size - place;
     8e8:	40940cb3          	sub	s9,s0,s1
     8ec:	8966                	mv	s2,s9
     8ee:	019ad363          	bge	s5,s9,8f4 <_write.constprop.0+0x68>
     8f2:	491d                	li	s2,7
     8f4:	001b0793          	addi	a5,s6,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     8f8:	380a2703          	lw	a4,896(s4)
     8fc:	380a0693          	addi	a3,s4,896
     900:	08077613          	andi	a2,a4,128
     904:	ee21                	bnez	a2,95c <_write.constprop.0+0xd0>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     906:	c311                	beqz	a4,90a <_write.constprop.0+0x7e>
     908:	3fad                	jal	882 <internal_handle_input.constprop.0>
			buffer[t-3] = buf[t+place];
     90a:	4601                	li	a2,0
     90c:	019bd463          	bge	s7,s9,914 <_write.constprop.0+0x88>
     910:	ffd90613          	addi	a2,s2,-3
     914:	00348593          	addi	a1,s1,3
     918:	95ce                	add	a1,a1,s3
     91a:	0068                	addi	a0,sp,12
     91c:	2639                	jal	c2a <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     91e:	47b2                	lw	a5,12(sp)
     920:	00998733          	add	a4,s3,s1
     924:	38fa2223          	sw	a5,900(s4)
		t = 0;
     928:	4781                	li	a5,0
			buffer[t+1] = buf[t+place];
     92a:	00074603          	lbu	a2,0(a4)
     92e:	0785                	addi	a5,a5,1
     930:	0074                	addi	a3,sp,12
     932:	96be                	add	a3,a3,a5
     934:	00c68023          	sb	a2,0(a3)
		while( t < tosend && t < 3 )
     938:	00f90563          	beq	s2,a5,942 <_write.constprop.0+0xb6>
     93c:	0705                	addi	a4,a4,1
     93e:	ff8796e3          	bne	a5,s8,92a <_write.constprop.0+0x9e>
		buffer[0] = 0x80 | (tosend + 4);
     942:	00490793          	addi	a5,s2,4
     946:	f807e793          	ori	a5,a5,-128
     94a:	00f10623          	sb	a5,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     94e:	47b2                	lw	a5,12(sp)
		place += tosend;
     950:	94ca                	add	s1,s1,s2
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     952:	38fa2023          	sw	a5,896(s4)
	while( place < size )
     956:	f884c9e3          	blt	s1,s0,8e8 <_write.constprop.0+0x5c>
     95a:	bf8d                	j	8cc <_write.constprop.0+0x40>
			if( timeout-- == 0 )
     95c:	17fd                	addi	a5,a5,-1
     95e:	ffc9                	bnez	a5,8f8 <_write.constprop.0+0x6c>
				*DMDATA0 |= 0xc0;
     960:	429c                	lw	a5,0(a3)
     962:	0c07e793          	ori	a5,a5,192
     966:	c29c                	sw	a5,0(a3)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     968:	4401                	li	s0,0
     96a:	b78d                	j	8cc <_write.constprop.0+0x40>
     96c:	89aa                	mv	s3,a0
	if( size == 0 )
     96e:	4481                	li	s1,0
     970:	4a9d                	li	s5,7
		int tosend = size - place;
     972:	00100b37          	lui	s6,0x100
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     976:	e0000a37          	lui	s4,0xe0000
			buffer[t-3] = buf[t+place];
     97a:	4b89                	li	s7,2
		while( t < tosend && t < 3 )
     97c:	4c0d                	li	s8,3
     97e:	bfe1                	j	956 <_write.constprop.0+0xca>

00000980 <__puts_uart>:
{
     980:	1141                	addi	sp,sp,-16
     982:	c422                	sw	s0,8(sp)
     984:	c606                	sw	ra,12(sp)
     986:	842e                	mv	s0,a1
	_write( 0, s, len );
     988:	3711                	jal	88c <_write.constprop.0>
}
     98a:	40b2                	lw	ra,12(sp)
     98c:	8522                	mv	a0,s0
     98e:	4422                	lw	s0,8(sp)
     990:	0141                	addi	sp,sp,16
     992:	8082                	ret

00000994 <handle_reset>:
	asm volatile( "\n\
     994:	20000197          	auipc	gp,0x20000
     998:	a6818193          	addi	gp,gp,-1432 # 200003fc <__global_pointer$>
     99c:	20007117          	auipc	sp,0x20007
     9a0:	66410113          	addi	sp,sp,1636 # 20008000 <_eusrstack>
	asm volatile(
     9a4:	cc818513          	addi	a0,gp,-824 # 200000c4 <WS2812BLEDInUse>
     9a8:	1a018593          	addi	a1,gp,416 # 2000059c <_ebss>
     9ac:	00b57763          	bgeu	a0,a1,9ba <handle_reset+0x26>
     9b0:	00052023          	sw	zero,0(a0)
     9b4:	0511                	addi	a0,a0,4
     9b6:	feb56de3          	bltu	a0,a1,9b0 <handle_reset+0x1c>
     9ba:	00001517          	auipc	a0,0x1
     9be:	35a50513          	addi	a0,a0,858 # 1d14 <_data_lma>
     9c2:	c0418593          	addi	a1,gp,-1020 # 20000000 <color_arr>
     9c6:	cc818613          	addi	a2,gp,-824 # 200000c4 <WS2812BLEDInUse>
     9ca:	00c58a63          	beq	a1,a2,9de <handle_reset+0x4a>
     9ce:	00052283          	lw	t0,0(a0)
     9d2:	0055a023          	sw	t0,0(a1)
     9d6:	0511                	addi	a0,a0,4
     9d8:	0591                	addi	a1,a1,4
     9da:	fec5eae3          	bltu	a1,a2,9ce <handle_reset+0x3a>
	asm volatile(
     9de:	00000793          	li	a5,0
     9e2:	42fd                	li	t0,31
     9e4:	bc029073          	csrw	0xbc0,t0
     9e8:	6289                	lui	t0,0x2
     9ea:	88828293          	addi	t0,t0,-1912 # 1888 <main+0x910>
     9ee:	3002a073          	csrs	mstatus,t0
     9f2:	fffff297          	auipc	t0,0xfffff
     9f6:	60e28293          	addi	t0,t0,1550 # 0 <InterruptVector>
     9fa:	0032e293          	ori	t0,t0,3
     9fe:	30529073          	csrw	mtvec,t0
	SysTick->CTLR = 1;
     a02:	e000f7b7          	lui	a5,0xe000f
     a06:	4705                	li	a4,1
     a08:	c398                	sw	a4,0(a5)
	asm volatile(
     a0a:	6785                	lui	a5,0x1
     a0c:	f7878793          	addi	a5,a5,-136 # f78 <main>
     a10:	34179073          	csrw	mepc,a5
     a14:	30200073          	mret

00000a18 <ADC1_2_IRQHandler>:
	asm volatile( "1: j 1b" );
     a18:	a001                	j	a18 <ADC1_2_IRQHandler>

00000a1a <strlen>:
{
     a1a:	87aa                	mv	a5,a0
	for (; *s; s++);
     a1c:	0007c703          	lbu	a4,0(a5)
     a20:	e701                	bnez	a4,a28 <strlen+0xe>
}
     a22:	40a78533          	sub	a0,a5,a0
     a26:	8082                	ret
	for (; *s; s++);
     a28:	0785                	addi	a5,a5,1
     a2a:	bfcd                	j	a1c <strlen+0x2>

00000a2c <mini_vpprintf>:
{
     a2c:	7159                	addi	sp,sp,-112
     a2e:	d4a2                	sw	s0,104(sp)
     a30:	d2a6                	sw	s1,100(sp)
     a32:	d0ca                	sw	s2,96(sp)
     a34:	cece                	sw	s3,92(sp)
     a36:	ccd2                	sw	s4,88(sp)
     a38:	cad6                	sw	s5,84(sp)
     a3a:	c6de                	sw	s7,76(sp)
     a3c:	d686                	sw	ra,108(sp)
     a3e:	c8da                	sw	s6,80(sp)
     a40:	c4e2                	sw	s8,72(sp)
     a42:	c2e6                	sw	s9,68(sp)
     a44:	c0ea                	sw	s10,64(sp)
     a46:	84aa                	mv	s1,a0
     a48:	892e                	mv	s2,a1
     a4a:	8432                	mv	s0,a2
     a4c:	8bb6                	mv	s7,a3
	int n = 0;
     a4e:	4981                	li	s3,0
		if (ch!='%') {
     a50:	02500a13          	li	s4,37
				pad_to = pad_to * 10 + (ch - '0');
     a54:	4aa9                	li	s5,10
	while ((ch=*(fmt++))) {
     a56:	00044783          	lbu	a5,0(s0)
     a5a:	00140c13          	addi	s8,s0,1
     a5e:	00f107a3          	sb	a5,15(sp)
     a62:	e385                	bnez	a5,a82 <mini_vpprintf+0x56>
}
     a64:	50b6                	lw	ra,108(sp)
     a66:	5426                	lw	s0,104(sp)
     a68:	5496                	lw	s1,100(sp)
     a6a:	5906                	lw	s2,96(sp)
     a6c:	4a66                	lw	s4,88(sp)
     a6e:	4ad6                	lw	s5,84(sp)
     a70:	4b46                	lw	s6,80(sp)
     a72:	4bb6                	lw	s7,76(sp)
     a74:	4c26                	lw	s8,72(sp)
     a76:	4c96                	lw	s9,68(sp)
     a78:	4d06                	lw	s10,64(sp)
     a7a:	854e                	mv	a0,s3
     a7c:	49f6                	lw	s3,92(sp)
     a7e:	6165                	addi	sp,sp,112
     a80:	8082                	ret
		if (ch!='%') {
     a82:	01478c63          	beq	a5,s4,a9a <mini_vpprintf+0x6e>
			len = puts(&ch, len, buf);
     a86:	864a                	mv	a2,s2
     a88:	4585                	li	a1,1
     a8a:	00f10513          	addi	a0,sp,15
     a8e:	9482                	jalr	s1
     a90:	8b5e                	mv	s6,s7
	while ((ch=*(fmt++))) {
     a92:	8462                	mv	s0,s8
		n = n + len;
     a94:	99aa                	add	s3,s3,a0
     a96:	8bda                	mv	s7,s6
     a98:	bf7d                	j	a56 <mini_vpprintf+0x2a>
			ch=*(fmt++);
     a9a:	00144783          	lbu	a5,1(s0)
			if (ch == '0') pad_char = '0';
     a9e:	03000693          	li	a3,48
			ch=*(fmt++);
     aa2:	00240713          	addi	a4,s0,2
     aa6:	00f107a3          	sb	a5,15(sp)
			if (ch == '0') pad_char = '0';
     aaa:	03000c13          	li	s8,48
     aae:	06d79f63          	bne	a5,a3,b2c <mini_vpprintf+0x100>
				ch=*(fmt++);
     ab2:	843a                	mv	s0,a4
     ab4:	4d01                	li	s10,0
     ab6:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     ab8:	4625                	li	a2,9
     aba:	a801                	j	aca <mini_vpprintf+0x9e>
				pad_to = pad_to * 10 + (ch - '0');
     abc:	035d0d33          	mul	s10,s10,s5
				ch=*(fmt++);
     ac0:	00044783          	lbu	a5,0(s0)
     ac4:	0405                	addi	s0,s0,1
     ac6:	4705                	li	a4,1
				pad_to = pad_to * 10 + (ch - '0');
     ac8:	9d36                	add	s10,s10,a3
			while (ch >= '0' && ch <= '9') {
     aca:	fd078693          	addi	a3,a5,-48
     ace:	0ff6f593          	andi	a1,a3,255
     ad2:	feb675e3          	bgeu	a2,a1,abc <mini_vpprintf+0x90>
     ad6:	c319                	beqz	a4,adc <mini_vpprintf+0xb0>
     ad8:	00f107a3          	sb	a5,15(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     adc:	4761                	li	a4,24
     ade:	8cea                	mv	s9,s10
     ae0:	01a75363          	bge	a4,s10,ae6 <mini_vpprintf+0xba>
     ae4:	4ce1                	li	s9,24
			if (ch == 'l') {
     ae6:	06c00693          	li	a3,108
			char l = 0;
     aea:	4701                	li	a4,0
			if (ch == 'l') {
     aec:	00d79863          	bne	a5,a3,afc <mini_vpprintf+0xd0>
				ch=*(fmt++);
     af0:	00044783          	lbu	a5,0(s0)
				l = 1;
     af4:	4705                	li	a4,1
				ch=*(fmt++);
     af6:	0405                	addi	s0,s0,1
     af8:	00f107a3          	sb	a5,15(sp)
			switch (ch) {
     afc:	00f14683          	lbu	a3,15(sp)
     b00:	06400793          	li	a5,100
     b04:	06f68163          	beq	a3,a5,b66 <mini_vpprintf+0x13a>
     b08:	02d7e563          	bltu	a5,a3,b32 <mini_vpprintf+0x106>
     b0c:	05800793          	li	a5,88
     b10:	08f68e63          	beq	a3,a5,bac <mini_vpprintf+0x180>
     b14:	06300793          	li	a5,99
     b18:	0af68c63          	beq	a3,a5,bd0 <mini_vpprintf+0x1a4>
     b1c:	d6a1                	beqz	a3,a64 <mini_vpprintf+0x38>
					len = puts(&ch, len, buf);
     b1e:	864a                	mv	a2,s2
     b20:	4585                	li	a1,1
     b22:	00f10513          	addi	a0,sp,15
     b26:	9482                	jalr	s1
     b28:	8b5e                	mv	s6,s7
     b2a:	b7ad                	j	a94 <mini_vpprintf+0x68>
			char pad_char = ' ';
     b2c:	02000c13          	li	s8,32
     b30:	b749                	j	ab2 <mini_vpprintf+0x86>
			switch (ch) {
     b32:	07500793          	li	a5,117
     b36:	02f68863          	beq	a3,a5,b66 <mini_vpprintf+0x13a>
     b3a:	07800793          	li	a5,120
     b3e:	06f68763          	beq	a3,a5,bac <mini_vpprintf+0x180>
     b42:	07300793          	li	a5,115
     b46:	fcf69ce3          	bne	a3,a5,b1e <mini_vpprintf+0xf2>
					ptr = va_arg(va, char*);
     b4a:	004b8b13          	addi	s6,s7,4
     b4e:	000bab83          	lw	s7,0(s7)
					len = mini_strlen(ptr);
     b52:	855e                	mv	a0,s7
     b54:	35d9                	jal	a1a <strlen>
     b56:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     b58:	080d0963          	beqz	s10,bea <mini_vpprintf+0x1be>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     b5c:	1038                	addi	a4,sp,40
     b5e:	86e6                	mv	a3,s9
     b60:	8662                	mv	a2,s8
     b62:	855e                	mv	a0,s7
     b64:	a025                	j	b8c <mini_vpprintf+0x160>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     b66:	004b8b13          	addi	s6,s7,4
					if(l) {
     b6a:	cb05                	beqz	a4,b9a <mini_vpprintf+0x16e>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     b6c:	f8b68693          	addi	a3,a3,-117
     b70:	0818                	addi	a4,sp,16
     b72:	0016b693          	seqz	a3,a3
     b76:	000ba503          	lw	a0,0(s7)
     b7a:	4601                	li	a2,0
     b7c:	45a9                	li	a1,10
     b7e:	de0ff0ef          	jal	ra,15e <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     b82:	1038                	addi	a4,sp,40
     b84:	86e6                	mv	a3,s9
     b86:	8662                	mv	a2,s8
     b88:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     b8a:	0808                	addi	a0,sp,16
     b8c:	d04ff0ef          	jal	ra,90 <mini_pad>
     b90:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     b92:	864a                	mv	a2,s2
     b94:	1028                	addi	a0,sp,40
     b96:	9482                	jalr	s1
					break;
     b98:	bdf5                	j	a94 <mini_vpprintf+0x68>
						if(ch == 'u') {
     b9a:	07500793          	li	a5,117
     b9e:	0818                	addi	a4,sp,16
     ba0:	00f69463          	bne	a3,a5,ba8 <mini_vpprintf+0x17c>
	if (radix > 16)
     ba4:	4685                	li	a3,1
     ba6:	bfc1                	j	b76 <mini_vpprintf+0x14a>
     ba8:	4681                	li	a3,0
     baa:	b7f1                	j	b76 <mini_vpprintf+0x14a>
					if(l) {
     bac:	000ba503          	lw	a0,0(s7)
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     bb0:	fa868613          	addi	a2,a3,-88
     bb4:	0818                	addi	a4,sp,16
     bb6:	4685                	li	a3,1
     bb8:	00163613          	seqz	a2,a2
     bbc:	45c1                	li	a1,16
     bbe:	da0ff0ef          	jal	ra,15e <mini_itoa.part.0>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     bc2:	004b8b13          	addi	s6,s7,4
	if (radix > 16)
     bc6:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     bc8:	1038                	addi	a4,sp,40
     bca:	86e6                	mv	a3,s9
     bcc:	8662                	mv	a2,s8
     bce:	bf75                	j	b8a <mini_vpprintf+0x15e>
					ch = (char)(va_arg(va, int));
     bd0:	000ba783          	lw	a5,0(s7)
     bd4:	004b8b13          	addi	s6,s7,4
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     bd8:	1038                	addi	a4,sp,40
					ch = (char)(va_arg(va, int));
     bda:	00f107a3          	sb	a5,15(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     bde:	86e6                	mv	a3,s9
     be0:	8662                	mv	a2,s8
     be2:	4585                	li	a1,1
     be4:	00f10513          	addi	a0,sp,15
     be8:	b755                	j	b8c <mini_vpprintf+0x160>
						len = puts(ptr, len, buf);
     bea:	864a                	mv	a2,s2
     bec:	855e                	mv	a0,s7
     bee:	b765                	j	b96 <mini_vpprintf+0x16a>

00000bf0 <printf>:
{
     bf0:	7139                	addi	sp,sp,-64
     bf2:	d432                	sw	a2,40(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     bf4:	862a                	mv	a2,a0
     bf6:	6505                	lui	a0,0x1
{
     bf8:	d22e                	sw	a1,36(sp)
     bfa:	d636                	sw	a3,44(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     bfc:	4581                	li	a1,0
	va_start( args, format );
     bfe:	1054                	addi	a3,sp,36
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     c00:	98050513          	addi	a0,a0,-1664 # 980 <__puts_uart>
{
     c04:	ce06                	sw	ra,28(sp)
     c06:	d83a                	sw	a4,48(sp)
     c08:	da3e                	sw	a5,52(sp)
     c0a:	dc42                	sw	a6,56(sp)
     c0c:	de46                	sw	a7,60(sp)
	va_start( args, format );
     c0e:	c636                	sw	a3,12(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     c10:	3d31                	jal	a2c <mini_vpprintf>
}
     c12:	40f2                	lw	ra,28(sp)
     c14:	6121                	addi	sp,sp,64
     c16:	8082                	ret

00000c18 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     c18:	962a                	add	a2,a2,a0
     c1a:	87aa                	mv	a5,a0
     c1c:	00c79363          	bne	a5,a2,c22 <memset+0xa>
     c20:	8082                	ret
     c22:	00b78023          	sb	a1,0(a5)
     c26:	0785                	addi	a5,a5,1
     c28:	bfd5                	j	c1c <memset+0x4>

00000c2a <memcpy>:
{
     c2a:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     c2c:	00f61363          	bne	a2,a5,c32 <memcpy+0x8>
}
     c30:	8082                	ret
	for (; n; n--) *d++ = *s++;
     c32:	00f58733          	add	a4,a1,a5
     c36:	00074683          	lbu	a3,0(a4)
     c3a:	00f50733          	add	a4,a0,a5
     c3e:	0785                	addi	a5,a5,1
     c40:	00d70023          	sb	a3,0(a4)
     c44:	b7e5                	j	c2c <memcpy+0x2>

00000c46 <modiSLER_adv_data.constprop.0>:
) {
	dataFrame->data_len = data_len;
	memcpy(dataFrame->payload, cmd, data_len);
}

void modiSLER_adv_data(MESS_DataFrame_t *dataFrame) {
     c46:	716d                	addi	sp,sp,-272
     c48:	10112623          	sw	ra,268(sp)
     c4c:	10812423          	sw	s0,264(sp)
     c50:	10912223          	sw	s1,260(sp)
     c54:	0a00                	addi	s0,sp,272
     c56:	dfce                	sw	s3,252(sp)
     c58:	ddd2                	sw	s4,248(sp)
     c5a:	dbd6                	sw	s5,244(sp)
     c5c:	d9da                	sw	s6,240(sp)
     c5e:	d7de                	sw	s7,236(sp)
     c60:	d5e2                	sw	s8,232(sp)
     c62:	d3e6                	sw	s9,228(sp)
     c64:	cfee                	sw	s11,220(sp)
     c66:	11212023          	sw	s2,256(sp)
     c6a:	d1ea                	sw	s10,224(sp)
	if (!REPORT_ALL) return;

	iSLER_frame_t frame = {
     c6c:	443327b7          	lui	a5,0x44332
     c70:	21178793          	addi	a5,a5,529 # 44332211 <_eusrstack+0x2432a211>
     c74:	f0f42623          	sw	a5,-244(s0)
     c78:	6799                	lui	a5,0x6
     c7a:	65578793          	addi	a5,a5,1621 # 6655 <iSLER_mess.c.731a8212+0x347d>
     c7e:	f0f41823          	sh	a5,-240(s0)
     c82:	6589                	lui	a1,0x2
     c84:	10200793          	li	a5,258
     c88:	f0f41923          	sh	a5,-238(s0)
     c8c:	4621                	li	a2,8
     c8e:	4799                	li	a5,6
     c90:	a7058593          	addi	a1,a1,-1424 # 1a70 <LLE_IRQHandler+0xaa>
     c94:	f1740513          	addi	a0,s0,-233
     c98:	f0f40a23          	sb	a5,-236(s0)
     c9c:	3779                	jal	c2a <memcpy>
     c9e:	4631                	li	a2,12
     ca0:	4581                	li	a1,0
     ca2:	f1f40513          	addi	a0,s0,-225
     ca6:	3f8d                	jal	c18 <memset>
     ca8:	77f5                	lui	a5,0xffffd
     caa:	7ff78793          	addi	a5,a5,2047 # ffffd7ff <_eusrstack+0xdfff57ff>
     cae:	f2f41623          	sh	a5,-212(s0)
     cb2:	08e00613          	li	a2,142
     cb6:	479d                	li	a5,7
     cb8:	c1018593          	addi	a1,gp,-1008 # 2000000c <dataFrame>
     cbc:	f2f40513          	addi	a0,s0,-209

	// Uncomment to disable whitening to debug RF.
	//BB->CTRL_CFG |= (1<<6);
	DevSetMode(DEVSETMODE_TX);

	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
     cc0:	8e89ca37          	lui	s4,0x8e89c
	BB->CRCINIT1 = 0x555555; // crc init
     cc4:	00555ab7          	lui	s5,0x555
	BB->CRCPOLY1 = (BB->CRCPOLY1 & 0xff000000) | 0x80032d; // crc poly
	BB->CRCPOLY2 = (BB->CRCPOLY2 & 0xff000000) | 0x80032d;
#endif
	// LL->LL1 = (LL->LL1 & 0xfffffffe) | 1; // The "| 1" is for AUTO mode, to swap between RX <-> TX when either happened

	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
     cc8:	7b6d                	lui	s6,0xffffb

#if defined(CH582_CH583) || defined(CH32V208)
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
				   (phy_mode == PHY_S2) ? CTRL_CFG_PHY_CODED:
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
										  CTRL_CFG_PHY_1M; // default 1M for now
     cca:	7bc5                	lui	s7,0xffff1
#if defined(CH571_CH573)
	BB->BB11 = (BB->BB11 & 0xfffffffc); // |2 for RX
#endif

	// This clears bit 17 (If set, seems to have no impact.)
	LL->LL4 &= 0xfffdffff;
     ccc:	7c01                	lui	s8,0xfffe0

#if !defined(CH571_CH573)
	LL->STATUS = LL_STATUS_TX;
#endif
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
     cce:	6cd9                	lui	s9,0x16
     cd0:	f2f40723          	sb	a5,-210(s0)
	// PRINT_SEPARATOR();
	// printf("Frame: ");
	// PRINT_STRUCT_BYTES(&frame, "%02X");
	// printf("\n");

	for(int c = 0; c < sizeof(adv_channels); c++) {
     cd4:	4d81                	li	s11,0
	iSLER_frame_t frame = {
     cd6:	3f91                	jal	c2a <memcpy>
		Frame_TX((uint8_t*)&frame, sizeof(frame), adv_channels[c], PHY_MODE);
     cd8:	cc418993          	addi	s3,gp,-828 # 200000c0 <adv_channels>
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
     cdc:	4000c4b7          	lui	s1,0x4000c
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
     ce0:	ed6a0a13          	addi	s4,s4,-298 # 8e89bed6 <_eusrstack+0x6e893ed6>
	BB->CRCINIT1 = 0x555555; // crc init
     ce4:	555a8a93          	addi	s5,s5,1365 # 555555 <iSLER_mess.c.731a8212+0x55237d>
	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
     ce8:	102b0b13          	addi	s6,s6,258 # ffffb102 <_eusrstack+0xdfff3102>
										  CTRL_CFG_PHY_1M; // default 1M for now
     cec:	1bfd                	addi	s7,s7,-1
	LL->LL4 &= 0xfffdffff;
     cee:	1c7d                	addi	s8,s8,-1
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
     cf0:	200c8c93          	addi	s9,s9,512 # 16200 <iSLER_mess.c.731a8212+0x13028>
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
     cf4:	12c4a703          	lw	a4,300(s1) # 4000c12c <_eusrstack+0x2000412c>
void Frame_TX(uint8_t adv[], size_t len, uint8_t channel, uint8_t phy_mode) {
     cf8:	ee242e23          	sw	sp,-260(s0)
     cfc:	01b987b3          	add	a5,s3,s11
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
     d00:	9b71                	andi	a4,a4,-4
     d02:	00176713          	ori	a4,a4,1
     d06:	0007c603          	lbu	a2,0(a5)
     d0a:	12e4a623          	sw	a4,300(s1)
	RF->RF11 &= 0xfffffffd;
     d0e:	4000d737          	lui	a4,0x4000d
     d12:	575c                	lw	a5,44(a4)
	__attribute__((aligned(4))) uint8_t  ADV_BUF[len+2]; // for the advertisement, which is 37 bytes + 2 header bytes
     d14:	7131                	addi	sp,sp,-192
	DevSetMode(DEVSETMODE_TX);
     d16:	0da00513          	li	a0,218
	RF->RF11 &= 0xfffffffd;
     d1a:	9bf5                	andi	a5,a5,-3
     d1c:	d75c                	sw	a5,44(a4)
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
     d1e:	1004a783          	lw	a5,256(s1)
     d22:	07f67713          	andi	a4,a2,127
	__attribute__((aligned(4))) uint8_t  ADV_BUF[len+2]; // for the advertisement, which is 37 bytes + 2 header bytes
     d26:	8d0a                	mv	s10,sp
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
     d28:	f807f793          	andi	a5,a5,-128
     d2c:	8fd9                	or	a5,a5,a4
     d2e:	10f4a023          	sw	a5,256(s1)
	DevSetMode(DEVSETMODE_TX);
     d32:	cbaff0ef          	jal	ra,1ec <DevSetMode>
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
     d36:	1144a423          	sw	s4,264(s1)
	BB->CRCINIT1 = 0x555555; // crc init
     d3a:	1154a223          	sw	s5,260(s1)
	memcpy(&ADV_BUF[2], adv, len);
     d3e:	47d5                	li	a5,21
     d40:	f0f40aa3          	sb	a5,-235(s0)
     d44:	47a5                	li	a5,9
     d46:	f0f40b23          	sb	a5,-234(s0)
     d4a:	0b100613          	li	a2,177
     d4e:	f9100793          	li	a5,-111
	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
     d52:	016d1023          	sh	s6,0(s10)
	memcpy(&ADV_BUF[2], adv, len);
     d56:	f0c40593          	addi	a1,s0,-244
     d5a:	002d0513          	addi	a0,s10,2
     d5e:	f2f405a3          	sb	a5,-213(s0)
     d62:	35e1                	jal	c2a <memcpy>
	LL->FRAME_BUF = (uint32_t)ADV_BUF;
     d64:	20048793          	addi	a5,s1,512
     d68:	07a7a823          	sw	s10,112(a5)
     d6c:	6785                	lui	a5,0x1
     d6e:	bba78793          	addi	a5,a5,-1094 # bba <mini_vpprintf+0x18e>
	for( int timeout = 3000; !(RF->RF26 & 0x1000000) && timeout >= 0; timeout-- );
     d72:	4000d6b7          	lui	a3,0x4000d
     d76:	01000637          	lui	a2,0x1000
     d7a:	56b8                	lw	a4,104(a3)
     d7c:	8f71                	and	a4,a4,a2
     d7e:	e319                	bnez	a4,d84 <modiSLER_adv_data.constprop.0+0x13e>
     d80:	17fd                	addi	a5,a5,-1
     d82:	ffe5                	bnez	a5,d7a <modiSLER_adv_data.constprop.0+0x134>
										  CTRL_CFG_PHY_1M; // default 1M for now
     d84:	1004a783          	lw	a5,256(s1)
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
     d88:	6705                	lui	a4,0x1
										  CTRL_CFG_PHY_1M; // default 1M for now
     d8a:	10048693          	addi	a3,s1,256
     d8e:	0177f7b3          	and	a5,a5,s7
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
     d92:	8fd9                	or	a5,a5,a4
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
     d94:	10f4a023          	sw	a5,256(s1)
	LL->LL4 &= 0xfffdffff;
     d98:	20048793          	addi	a5,s1,512
     d9c:	4b98                	lw	a4,16(a5)
     d9e:	01877733          	and	a4,a4,s8
     da2:	cb98                	sw	a4,16(a5)
	LL->STATUS = LL_STATUS_TX;
     da4:	6709                	lui	a4,0x2
     da6:	c798                	sw	a4,8(a5)
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
     da8:	0797a223          	sw	s9,100(a5)

	BB->CTRL_CFG |= CTRL_CFG_START_TX;
     dac:	1004a783          	lw	a5,256(s1)
     db0:	00800737          	lui	a4,0x800
     db4:	8fd9                	or	a5,a5,a4
     db6:	10f4a023          	sw	a5,256(s1)
	BB->CTRL_TX &= 0xfffffffc;
     dba:	56dc                	lw	a5,44(a3)
     dbc:	9bf1                	andi	a5,a5,-4
     dbe:	d6dc                	sw	a5,44(a3)

	LL->LL0 = 2; // Not sure what this does, but on RX it's 1
     dc0:	4789                	li	a5,2
     dc2:	20f4a023          	sw	a5,512(s1)

	while(LL->TMR); // wait for tx buffer to empty
     dc6:	2644a783          	lw	a5,612(s1)
     dca:	fff5                	bnez	a5,dc6 <modiSLER_adv_data.constprop.0+0x180>
	DevSetMode(0);
     dcc:	4501                	li	a0,0
     dce:	c1eff0ef          	jal	ra,1ec <DevSetMode>
	if(LL->LL0 & 3) {
     dd2:	2004a783          	lw	a5,512(s1)
     dd6:	8b8d                	andi	a5,a5,3
     dd8:	cf81                	beqz	a5,df0 <modiSLER_adv_data.constprop.0+0x1aa>
		LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
     dda:	2504a783          	lw	a5,592(s1)
     dde:	9be1                	andi	a5,a5,-8
     de0:	24f4a823          	sw	a5,592(s1)
		LL->LL0 |= 0x08;
     de4:	2004a783          	lw	a5,512(s1)
     de8:	0087e793          	ori	a5,a5,8
     dec:	20f4a023          	sw	a5,512(s1)
	for(int c = 0; c < sizeof(adv_channels); c++) {
     df0:	0d85                	addi	s11,s11,1
     df2:	478d                	li	a5,3
     df4:	efc42103          	lw	sp,-260(s0)
     df8:	eefd9ee3          	bne	s11,a5,cf4 <modiSLER_adv_data.constprop.0+0xae>
	}
}
     dfc:	ef040113          	addi	sp,s0,-272
     e00:	10c12083          	lw	ra,268(sp)
     e04:	10812403          	lw	s0,264(sp)
     e08:	10412483          	lw	s1,260(sp)
     e0c:	10012903          	lw	s2,256(sp)
     e10:	59fe                	lw	s3,252(sp)
     e12:	5a6e                	lw	s4,248(sp)
     e14:	5ade                	lw	s5,244(sp)
     e16:	5b4e                	lw	s6,240(sp)
     e18:	5bbe                	lw	s7,236(sp)
     e1a:	5c2e                	lw	s8,232(sp)
     e1c:	5c9e                	lw	s9,228(sp)
     e1e:	5d0e                	lw	s10,224(sp)
     e20:	4dfe                	lw	s11,220(sp)
     e22:	6151                	addi	sp,sp,272
     e24:	8082                	ret

00000e26 <memcmp>:
{
     e26:	4701                	li	a4,0
	for (; n && *l == *r; n--, l++, r++);
     e28:	02e60063          	beq	a2,a4,e48 <memcmp+0x22>
     e2c:	00e507b3          	add	a5,a0,a4
     e30:	0705                	addi	a4,a4,1
     e32:	00e586b3          	add	a3,a1,a4
     e36:	0007c783          	lbu	a5,0(a5)
     e3a:	fff6c683          	lbu	a3,-1(a3) # 4000cfff <_eusrstack+0x20004fff>
     e3e:	fed785e3          	beq	a5,a3,e28 <memcmp+0x2>
	return n ? *l-*r : 0;
     e42:	40d78533          	sub	a0,a5,a3
}
     e46:	8082                	ret
	return n ? *l-*r : 0;
     e48:	4501                	li	a0,0
     e4a:	8082                	ret

00000e4c <puts>:
{
     e4c:	1141                	addi	sp,sp,-16
     e4e:	c606                	sw	ra,12(sp)
     e50:	c422                	sw	s0,8(sp)
     e52:	c226                	sw	s1,4(sp)
     e54:	84aa                	mv	s1,a0
	int sl = strlen( s );
     e56:	36d1                	jal	a1a <strlen>
     e58:	842a                	mv	s0,a0
	_write(0, s, sl );
     e5a:	85aa                	mv	a1,a0
     e5c:	8526                	mv	a0,s1
     e5e:	343d                	jal	88c <_write.constprop.0>
	_write(0, "\n", 1 );
     e60:	6509                	lui	a0,0x2
     e62:	4585                	li	a1,1
     e64:	b3050513          	addi	a0,a0,-1232 # 1b30 <LLE_IRQHandler+0x16a>
     e68:	3415                	jal	88c <_write.constprop.0>
}
     e6a:	40b2                	lw	ra,12(sp)
     e6c:	00140513          	addi	a0,s0,1
     e70:	4422                	lw	s0,8(sp)
     e72:	4492                	lw	s1,4(sp)
     e74:	0141                	addi	sp,sp,16
     e76:	8082                	ret

00000e78 <putchar>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     e78:	e00007b7          	lui	a5,0xe0000
     e7c:	3807a783          	lw	a5,896(a5) # e0000380 <_eusrstack+0xbfff8380>
     e80:	0c000713          	li	a4,192
     e84:	0c07f793          	andi	a5,a5,192
     e88:	04e78c63          	beq	a5,a4,ee0 <putchar+0x68>
{
     e8c:	1141                	addi	sp,sp,-16
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     e8e:	001007b7          	lui	a5,0x100
{
     e92:	c422                	sw	s0,8(sp)
     e94:	c606                	sw	ra,12(sp)
     e96:	842a                	mv	s0,a0
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     e98:	0785                	addi	a5,a5,1
	while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     e9a:	e00006b7          	lui	a3,0xe0000
     e9e:	3806a703          	lw	a4,896(a3) # e0000380 <_eusrstack+0xbfff8380>
     ea2:	38068613          	addi	a2,a3,896
     ea6:	08077593          	andi	a1,a4,128
     eaa:	e185                	bnez	a1,eca <putchar+0x52>
	if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     eac:	c311                	beqz	a4,eb0 <putchar+0x38>
     eae:	3ad1                	jal	882 <internal_handle_input.constprop.0>
	*DMDATA0 = 0x85 | ((const char)c<<8);
     eb0:	6541                	lui	a0,0x10
     eb2:	157d                	addi	a0,a0,-1
     eb4:	00841793          	slli	a5,s0,0x8
     eb8:	8fe9                	and	a5,a5,a0
     eba:	0857e793          	ori	a5,a5,133
     ebe:	e0000737          	lui	a4,0xe0000
     ec2:	38f72023          	sw	a5,896(a4) # e0000380 <_eusrstack+0xbfff8380>
	return 1;
     ec6:	4505                	li	a0,1
     ec8:	a801                	j	ed8 <putchar+0x60>
		if( timeout-- == 0 )
     eca:	17fd                	addi	a5,a5,-1
     ecc:	fbe9                	bnez	a5,e9e <putchar+0x26>
			*DMDATA0 |= 0xc0;
     ece:	421c                	lw	a5,0(a2)
     ed0:	4501                	li	a0,0
     ed2:	0c07e793          	ori	a5,a5,192
     ed6:	c21c                	sw	a5,0(a2)
}
     ed8:	40b2                	lw	ra,12(sp)
     eda:	4422                	lw	s0,8(sp)
     edc:	0141                	addi	sp,sp,16
     ede:	8082                	ret
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     ee0:	4501                	li	a0,0
}
     ee2:	8082                	ret

00000ee4 <SystemInit>:
			R8_CLK_SYS_CFG = sc;
		);
	}
#else // ch5xx EXCEPT ch570/2 ch584/5
	SYS_CLKTypeDef sc = CLK_SOURCE_CH5XX;
	SYS_SAFE_ACCESS(
     ee4:	400017b7          	lui	a5,0x40001
     ee8:	05700693          	li	a3,87
     eec:	04d78023          	sb	a3,64(a5) # 40001040 <_eusrstack+0x1fff9040>
     ef0:	fa800713          	li	a4,-88
     ef4:	04e78023          	sb	a4,64(a5)
     ef8:	0001                	nop
     efa:	0001                	nop
     efc:	04b7c603          	lbu	a2,75(a5)
     f00:	0df67613          	andi	a2,a2,223
     f04:	04c785a3          	sb	a2,75(a5)
     f08:	04078023          	sb	zero,64(a5)
     f0c:	0001                	nop
     f0e:	0001                	nop
		ADD_N_NOPS(4);
		R8_FLASH_CFG = 0X51;
	}
	else if(sc & 0x40) // PLL div
	{
		SYS_SAFE_ACCESS(
     f10:	04d78023          	sb	a3,64(a5)
     f14:	04e78023          	sb	a4,64(a5)
     f18:	0001                	nop
     f1a:	0001                	nop
     f1c:	00140637          	lui	a2,0x140
     f20:	04860613          	addi	a2,a2,72 # 140048 <iSLER_mess.c.731a8212+0x13ce70>
     f24:	c790                	sw	a2,8(a5)
     f26:	04078023          	sb	zero,64(a5)
     f2a:	0001                	nop
     f2c:	0001                	nop
			R32_CLK_SYS_CFG = (1 << 6) | (sc & 0x1f) | RB_TX_32M_PWR_EN | RB_PLL_PWR_EN;
		);
		ADD_N_NOPS(4);
     f2e:	0001                	nop
     f30:	0001                	nop
     f32:	0001                	nop
     f34:	0001                	nop
		R8_FLASH_CFG = 0x52;
     f36:	40002637          	lui	a2,0x40002
     f3a:	05200593          	li	a1,82
     f3e:	80b603a3          	sb	a1,-2041(a2) # 40001807 <_eusrstack+0x1fff9807>
		SYS_SAFE_ACCESS(
			R32_CLK_SYS_CFG |= RB_CLK_SYS_MOD;
		);
	}

	SYS_SAFE_ACCESS(
     f42:	04d78023          	sb	a3,64(a5)
     f46:	04e78023          	sb	a4,64(a5)
     f4a:	0001                	nop
     f4c:	0001                	nop
     f4e:	04b7c703          	lbu	a4,75(a5)
     f52:	f8076713          	ori	a4,a4,-128
     f56:	0ff77713          	andi	a4,a4,255
     f5a:	04e785a3          	sb	a4,75(a5)
     f5e:	04078023          	sb	zero,64(a5)
     f62:	0001                	nop
     f64:	0001                	nop
	*DMDATA1 = 0x00;
     f66:	e00007b7          	lui	a5,0xe0000
     f6a:	3807a223          	sw	zero,900(a5) # e0000384 <_eusrstack+0xbfff8384>
	*DMDATA0 = 0x80;
     f6e:	08000713          	li	a4,128
     f72:	38e7a023          	sw	a4,896(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     f76:	8082                	ret

00000f78 <main>:
				break;
		}
	}
}

int main() {
     f78:	7175                	addi	sp,sp,-144
     f7a:	c706                	sw	ra,140(sp)
     f7c:	c522                	sw	s0,136(sp)
     f7e:	c326                	sw	s1,132(sp)
     f80:	c14a                	sw	s2,128(sp)
     f82:	dece                	sw	s3,124(sp)
     f84:	dcd2                	sw	s4,120(sp)
     f86:	dad6                	sw	s5,116(sp)
     f88:	d8da                	sw	s6,112(sp)
     f8a:	d6de                	sw	s7,108(sp)
     f8c:	d4e2                	sw	s8,104(sp)
     f8e:	d2e6                	sw	s9,100(sp)
     f90:	d0ea                	sw	s10,96(sp)
     f92:	ceee                	sw	s11,92(sp)
	SystemInit();
     f94:	3f81                	jal	ee4 <SystemInit>
	SysTick->CTLR = 0x0000;
     f96:	e000f7b7          	lui	a5,0xe000f
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     f9a:	663d                	lui	a2,0xf
	SysTick->CTLR = 0x0000;
     f9c:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc0007000>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     fa0:	a5f60613          	addi	a2,a2,-1441 # ea5f <iSLER_mess.c.731a8212+0xb887>
     fa4:	cb90                	sw	a2,16(a5)
     fa6:	4681                	li	a3,0
     fa8:	cbd4                	sw	a3,20(a5)
	SysTick->CNT = 0x00000000;
     faa:	4681                	li	a3,0
     fac:	c794                	sw	a3,8(a5)
     fae:	4701                	li	a4,0
     fb0:	c7d8                	sw	a4,12(a5)
	systick_millis = 0x00000000;
     fb2:	cdc18713          	addi	a4,gp,-804 # 200000d8 <systick_millis>
     fb6:	00072023          	sw	zero,0(a4)
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
     fba:	4398                	lw	a4,0(a5)
}

// Enable Interrupt (by interrupt number)
RV_STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     fbc:	e000e637          	lui	a2,0xe000e
     fc0:	6d05                	lui	s10,0x1
     fc2:	00776713          	ori	a4,a4,7
     fc6:	c398                	sw	a4,0(a5)
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) |= (pin & ~PB);
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     &= ~(pin & ~PB);
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
		break;
	case GPIO_ModeOut_PP_5mA:
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     fc8:	400017b7          	lui	a5,0x40001
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     fcc:	11a62023          	sw	s10,256(a2) # e000e100 <_eusrstack+0xc0006100>
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     fd0:	08078793          	addi	a5,a5,128 # 40001080 <_eusrstack+0x1fff9080>
     fd4:	5bd8                	lw	a4,52(a5)
	LL->LL5 = 0x8c;
     fd6:	08c00693          	li	a3,140
	LL->LL7 = 0x76;
     fda:	07600593          	li	a1,118
     fde:	eff77713          	andi	a4,a4,-257
     fe2:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    |= (pin & ~PB);
     fe4:	5398                	lw	a4,32(a5)
	LL->STATE_BUF = (uint32_t)LLE_BUF;
     fe6:	ce818b13          	addi	s6,gp,-792 # 200000e4 <LLE_BUF>
     fea:	10076713          	ori	a4,a4,256
     fee:	d398                	sw	a4,32(a5)
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
     ff0:	5bd8                	lw	a4,52(a5)
	RF->RF10 = 0x480;
     ff2:	4000d437          	lui	s0,0x4000d
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
     ff6:	90000e37          	lui	t3,0x90000
     ffa:	bff77713          	andi	a4,a4,-1025
     ffe:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     |= (pin & ~PB);
    1000:	5b98                	lw	a4,48(a5)
    1002:	1e7d                	addi	t3,t3,-1
    1004:	20000eb7          	lui	t4,0x20000
    1008:	40076713          	ori	a4,a4,1024
    100c:	db98                	sw	a4,48(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
    100e:	5398                	lw	a4,32(a5)
	RF->RF18 |= 0x80000000;
    1010:	80000837          	lui	a6,0x80000
	RF->RF19 |= 0x2000000;
    1014:	02000f37          	lui	t5,0x2000
    1018:	bff77713          	andi	a4,a4,-1025
    101c:	d398                	sw	a4,32(a5)
	LL->LL5 = 0x8c;
    101e:	4000c7b7          	lui	a5,0x4000c
    1022:	20078713          	addi	a4,a5,512 # 4000c200 <_eusrstack+0x20004200>
    1026:	cb54                	sw	a3,20(a4)
	LL->LL7 = 0x76;
    1028:	cf4c                	sw	a1,28(a4)
	LL->LL9 = 0x8c;
    102a:	d354                	sw	a3,36(a4)
	LL->LL13 = 0x8c;
    102c:	db54                	sw	a3,52(a4)
	LL->LL17 = 0x8c;
    102e:	c374                	sw	a3,68(a4)
	LL->LL19 = 0x76;
    1030:	c76c                	sw	a1,76(a4)
	LL->LL11 = 0x3c;
    1032:	03c00693          	li	a3,60
    1036:	d754                	sw	a3,44(a4)
	LL->LL15 = 0x3c;
    1038:	df54                	sw	a3,60(a4)
	LL->INT_EN = 0xf00f;
    103a:	66bd                	lui	a3,0xf
    103c:	06bd                	addi	a3,a3,15
    103e:	c754                	sw	a3,12(a4)
	LL->STATE_BUF = (uint32_t)LLE_BUF;
    1040:	07672a23          	sw	s6,116(a4)
	LL->STATUS = 0xffffffff;
    1044:	56fd                	li	a3,-1
    1046:	c714                	sw	a3,8(a4)
	RF->RF10 = 0x480;
    1048:	48000713          	li	a4,1152
    104c:	d418                	sw	a4,40(s0)
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
    104e:	4438                	lw	a4,72(s0)
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
    1050:	f90006b7          	lui	a3,0xf9000
    1054:	16fd                	addi	a3,a3,-1
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
    1056:	01c77733          	and	a4,a4,t3
    105a:	01d76733          	or	a4,a4,t4
    105e:	c438                	sw	a4,72(s0)
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
    1060:	4438                	lw	a4,72(s0)
    1062:	040005b7          	lui	a1,0x4000
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
    1066:	78c5                	lui	a7,0xffff1
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
    1068:	8f75                	and	a4,a4,a3
    106a:	8f4d                	or	a4,a4,a1
    106c:	c438                	sw	a4,72(s0)
	RF->RF18 = (RF->RF18 & 0xfffffff0) | 9;
    106e:	4438                	lw	a4,72(s0)
	RF->RF18 &= 0xfff8ffff;
    1070:	fff905b7          	lui	a1,0xfff90
    1074:	15fd                	addi	a1,a1,-1
	RF->RF18 = (RF->RF18 & 0xfffffff0) | 9;
    1076:	9b41                	andi	a4,a4,-16
    1078:	00976713          	ori	a4,a4,9
    107c:	c438                	sw	a4,72(s0)
	RF->RF18 &= 0xfff8ffff;
    107e:	4438                	lw	a4,72(s0)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
    1080:	6511                	lui	a0,0x4
	RF->RF21 &= 0xffffefff;
    1082:	79fd                	lui	s3,0xfffff
	RF->RF18 &= 0xfff8ffff;
    1084:	8f6d                	and	a4,a4,a1
    1086:	c438                	sw	a4,72(s0)
	RF->RF18 |= 0x80000000;
    1088:	4438                	lw	a4,72(s0)
	RF->RF19 &= 0xfeffffff;
    108a:	ff0005b7          	lui	a1,0xff000
    108e:	15fd                	addi	a1,a1,-1
	RF->RF18 |= 0x80000000;
    1090:	01076733          	or	a4,a4,a6
    1094:	c438                	sw	a4,72(s0)
	RF->RF19 = (RF->RF19 & 0xfffffff8) | 3;
    1096:	4478                	lw	a4,76(s0)
	RF->RF21 &= 0xffffefff;
    1098:	19fd                	addi	s3,s3,-1
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
    109a:	1efd                	addi	t4,t4,-1
	RF->RF19 = (RF->RF19 & 0xfffffff8) | 3;
    109c:	9b61                	andi	a4,a4,-8
    109e:	00376713          	ori	a4,a4,3
    10a2:	c478                	sw	a4,76(s0)
	RF->RF19 = (RF->RF19 & 0xffffff8f) | 0x30;
    10a4:	4478                	lw	a4,76(s0)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
    10a6:	00020a37          	lui	s4,0x20
	BB->CTRL_CFG |= 0x800000;
    10aa:	10078793          	addi	a5,a5,256
	RF->RF19 = (RF->RF19 & 0xffffff8f) | 0x30;
    10ae:	f8f77713          	andi	a4,a4,-113
    10b2:	03076713          	ori	a4,a4,48
    10b6:	c478                	sw	a4,76(s0)
	RF->RF19 = (RF->RF19 & 0xfffff8ff) | 0x300;
    10b8:	4478                	lw	a4,76(s0)
	NVIC->VTFIDR[3] = 0x14;
    10ba:	4c51                	li	s8,20
    10bc:	cdc18493          	addi	s1,gp,-804 # 200000d8 <systick_millis>
	RF->RF19 = (RF->RF19 & 0xfffff8ff) | 0x300;
    10c0:	8ff77713          	andi	a4,a4,-1793
    10c4:	30076713          	ori	a4,a4,768
    10c8:	c478                	sw	a4,76(s0)
	RF->RF19 &= 0xfeffffff;
    10ca:	4478                	lw	a4,76(s0)
    10cc:	ce818913          	addi	s2,gp,-792 # 200000e4 <LLE_BUF>
		txctune_co[f] = tune | (tune << 4);
    10d0:	1d41                	addi	s10,s10,-16
	RF->RF19 &= 0xfeffffff;
    10d2:	8f6d                	and	a4,a4,a1
    10d4:	c478                	sw	a4,76(s0)
	RF->RF19 |= 0x2000000;
    10d6:	4478                	lw	a4,76(s0)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
    10d8:	fff88593          	addi	a1,a7,-1 # ffff0fff <_eusrstack+0xdffe8fff>
	RF->RF19 |= 0x2000000;
    10dc:	01e76733          	or	a4,a4,t5
    10e0:	c478                	sw	a4,76(s0)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
    10e2:	4838                	lw	a4,80(s0)
    10e4:	8f6d                	and	a4,a4,a1
    10e6:	8f49                	or	a4,a4,a0
    10e8:	c838                	sw	a4,80(s0)
	RF->RF21 = (RF->RF21 & 0xfffffff0) | 0xc;
    10ea:	05442303          	lw	t1,84(s0) # 4000d054 <_eusrstack+0x20005054>
    10ee:	ff037313          	andi	t1,t1,-16
    10f2:	00c36313          	ori	t1,t1,12
    10f6:	04642a23          	sw	t1,84(s0)
	RF->RF21 |= 0x80;
    10fa:	4878                	lw	a4,84(s0)
    10fc:	08076713          	ori	a4,a4,128
    1100:	c878                	sw	a4,84(s0)
	RF->RF21 &= 0xffffefff;
    1102:	4878                	lw	a4,84(s0)
    1104:	01377733          	and	a4,a4,s3
    1108:	c878                	sw	a4,84(s0)
	RF->RF15 = (RF->RF15 & 0xffff0fff) | 0x8000;
    110a:	03c42883          	lw	a7,60(s0)
    110e:	6721                	lui	a4,0x8
    1110:	00b8f8b3          	and	a7,a7,a1
    1114:	00e8e8b3          	or	a7,a7,a4
    1118:	03142e23          	sw	a7,60(s0)
	RF->RF15 = (RF->RF15 & 0xf8ffffff) | 0x2000000;
    111c:	5c48                	lw	a0,60(s0)
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
    111e:	40000737          	lui	a4,0x40000
	RF->RF15 = (RF->RF15 & 0xf8ffffff) | 0x2000000;
    1122:	8d75                	and	a0,a0,a3
    1124:	01e56533          	or	a0,a0,t5
    1128:	dc48                	sw	a0,60(s0)
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
    112a:	5c4c                	lw	a1,60(s0)
	RF->RF11 |= 0x700000;
    112c:	00700537          	lui	a0,0x700
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
    1130:	01d5f5b3          	and	a1,a1,t4
    1134:	8dd9                	or	a1,a1,a4
    1136:	dc4c                	sw	a1,60(s0)
	RF->RF11 |= 0x700000;
    1138:	5458                	lw	a4,44(s0)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
    113a:	fffd05b7          	lui	a1,0xfffd0
    113e:	15fd                	addi	a1,a1,-1
	RF->RF11 |= 0x700000;
    1140:	8f49                	or	a4,a4,a0
    1142:	d458                	sw	a4,44(s0)
	RF->RF11 &= 0xf8ffffff;
    1144:	5458                	lw	a4,44(s0)
    1146:	8ef9                	and	a3,a3,a4
    1148:	d454                	sw	a3,44(s0)
	RF->RF11 = (RF->RF11 & 0xffffcfff) | 0x2000;
    114a:	5454                	lw	a3,44(s0)
    114c:	7775                	lui	a4,0xffffd
    114e:	177d                	addi	a4,a4,-1
    1150:	8ef9                	and	a3,a3,a4
    1152:	6709                	lui	a4,0x2
    1154:	8ed9                	or	a3,a3,a4
    1156:	d454                	sw	a3,44(s0)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
    1158:	5454                	lw	a3,44(s0)
    115a:	8eed                	and	a3,a3,a1
    115c:	0146e6b3          	or	a3,a3,s4
    1160:	d454                	sw	a3,44(s0)
	RF->RF12 &= 0xfffffff0;
    1162:	5814                	lw	a3,48(s0)
    1164:	9ac1                	andi	a3,a3,-16
    1166:	d814                	sw	a3,48(s0)
	RF->RF12 &= 0xffffff0f;
    1168:	5814                	lw	a3,48(s0)
    116a:	f0f6f693          	andi	a3,a3,-241
    116e:	d814                	sw	a3,48(s0)
	RF->RF12 &= 0xfffff8ff;
    1170:	5814                	lw	a3,48(s0)
    1172:	8ff6f693          	andi	a3,a3,-1793
    1176:	d814                	sw	a3,48(s0)
	RF->RF12 |= 0x700000;
    1178:	5818                	lw	a4,48(s0)
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
    117a:	500006b7          	lui	a3,0x50000
	RF->RF12 |= 0x700000;
    117e:	8f49                	or	a4,a4,a0
    1180:	d818                	sw	a4,48(s0)
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
    1182:	5818                	lw	a4,48(s0)
	DevSetMode(DEVSETMODE_TUNE);
    1184:	0dd00513          	li	a0,221
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
    1188:	01c77733          	and	a4,a4,t3
    118c:	8f55                	or	a4,a4,a3
    118e:	d818                	sw	a4,48(s0)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xff07ffff) | RFEND_TXCTUNE_INIT;
    1190:	5c18                	lw	a4,56(s0)
    1192:	ff0806b7          	lui	a3,0xff080
    1196:	16fd                	addi	a3,a3,-1
    1198:	8f75                	and	a4,a4,a3
    119a:	008806b7          	lui	a3,0x880
    119e:	8f55                	or	a4,a4,a3
    11a0:	dc18                	sw	a4,56(s0)
	RF->TXTUNE_CTRL |= 0x80000000;
    11a2:	5c18                	lw	a4,56(s0)
	BB->CTRL_CFG |= 0x800000;
    11a4:	008006b7          	lui	a3,0x800
	RF->TXTUNE_CTRL |= 0x80000000;
    11a8:	01076833          	or	a6,a4,a6
    11ac:	03042c23          	sw	a6,56(s0)
	BB->CTRL_CFG |= 0x800000;
    11b0:	4398                	lw	a4,0(a5)
    11b2:	8f55                	or	a4,a4,a3
    11b4:	c398                	sw	a4,0(a5)
	BB->CTRL_CFG |= 0x10000000;
    11b6:	4398                	lw	a4,0(a5)
    11b8:	100006b7          	lui	a3,0x10000
    11bc:	8f55                	or	a4,a4,a3
    11be:	c398                	sw	a4,0(a5)
	BB->BB13 = 0x1d0;
    11c0:	1d000713          	li	a4,464
    11c4:	dbd8                	sw	a4,52(a5)
	BB->CTRL_TX = TxPower << 0x19 | CTRL_TX_TXPOWER;
    11c6:	a4011737          	lui	a4,0xa4011
    11ca:	e7870713          	addi	a4,a4,-392 # a4010e78 <_eusrstack+0x84008e78>
    11ce:	d7d8                	sw	a4,44(a5)
	BB->CTRL_TX = (BB->CTRL_TX & 0x81ffffff) | (TxPower & 0x3f) << 0x19;
    11d0:	57d8                	lw	a4,44(a5)
    11d2:	820006b7          	lui	a3,0x82000
    11d6:	16fd                	addi	a3,a3,-1
    11d8:	8f75                	and	a4,a4,a3
    11da:	240006b7          	lui	a3,0x24000
    11de:	8f55                	or	a4,a4,a3
    11e0:	d7d8                	sw	a4,44(a5)
	BB->BB8 = 0x90083;
    11e2:	00090737          	lui	a4,0x90
    11e6:	08370713          	addi	a4,a4,131 # 90083 <iSLER_mess.c.731a8212+0x8ceab>
    11ea:	d398                	sw	a4,32(a5)
	NVIC->VTFIDR[3] = 0x14;
    11ec:	058609a3          	sb	s8,83(a2)
	DevSetMode(DEVSETMODE_TUNE);
    11f0:	ffdfe0ef          	jal	ra,1ec <DevSetMode>
	RF->RF1 &= 0xfffffeff;
    11f4:	405c                	lw	a5,4(s0)
	uint32_t tune2401 = RFEND_TXCTune(37);
    11f6:	02500513          	li	a0,37
	RF->RF1 &= 0xfffffeff;
    11fa:	eff7f793          	andi	a5,a5,-257
    11fe:	c05c                	sw	a5,4(s0)
	RF->RF10 &= 0xffffefff;
    1200:	541c                	lw	a5,40(s0)
    1202:	0137f9b3          	and	s3,a5,s3
    1206:	03342423          	sw	s3,40(s0)
	RF->RF11 &= 0xffffffef;
    120a:	5458                	lw	a4,44(s0)
    120c:	9b3d                	andi	a4,a4,-17
    120e:	d458                	sw	a4,44(s0)
	RF->RF2 |= 0x20000;
    1210:	441c                	lw	a5,8(s0)
    1212:	0147e7b3          	or	a5,a5,s4
    1216:	c41c                	sw	a5,8(s0)
	RF->RF1 |= 0x10;
    1218:	405c                	lw	a5,4(s0)
    121a:	0107e793          	ori	a5,a5,16
    121e:	c05c                	sw	a5,4(s0)
	uint32_t tune2401 = RFEND_TXCTune(37);
    1220:	81aff0ef          	jal	ra,23a <RFEND_TXCTune>
    1224:	842a                	mv	s0,a0
	uint8_t nGA2401 = (uint8_t)(tune2401 >> 24) & 0x7f;
    1226:	01855b93          	srli	s7,a0,0x18
	uint32_t tune2480 = RFEND_TXCTune(39);
    122a:	02700513          	li	a0,39
    122e:	80cff0ef          	jal	ra,23a <RFEND_TXCTune>
    1232:	89aa                	mv	s3,a0
	uint8_t nGA2480 = (uint8_t)(tune2480 >> 24) & 0x7f;
    1234:	01855d93          	srli	s11,a0,0x18
	uint32_t tune2440 = RFEND_TXCTune(18);
    1238:	4549                	li	a0,18
    123a:	800ff0ef          	jal	ra,23a <RFEND_TXCTune>
	uint8_t nCO2440 = (uint8_t)(tune2440 & 0x3f);
    123e:	03f57c93          	andi	s9,a0,63
	uint8_t nGA2440 = (uint8_t)(tune2440 >> 24) & 0x7f;
    1242:	01855a93          	srli	s5,a0,0x18
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
    1246:	02400613          	li	a2,36
	uint32_t tune2440 = RFEND_TXCTune(18);
    124a:	8a2a                	mv	s4,a0
	uint32_t dCO0140 = nCO2401 - nCO2440;
    124c:	03f47413          	andi	s0,s0,63
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
    1250:	4581                	li	a1,0
    1252:	1068                	addi	a0,sp,44
	uint32_t dCO0140 = nCO2401 - nCO2440;
    1254:	41940433          	sub	s0,s0,s9
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
    1258:	d402                	sw	zero,40(sp)
    125a:	3a7d                	jal	c18 <memset>
    125c:	03840733          	mul	a4,s0,s8
	uint32_t dCO4080 = nCO2440 - nCO2480;
    1260:	03f9f993          	andi	s3,s3,63
	uint8_t nGA2401 = (uint8_t)(tune2401 >> 24) & 0x7f;
    1264:	07fbfb93          	andi	s7,s7,127
	uint8_t nGA2480 = (uint8_t)(tune2480 >> 24) & 0x7f;
    1268:	07fdfd93          	andi	s11,s11,127
	uint8_t nGA2440 = (uint8_t)(tune2440 >> 24) & 0x7f;
    126c:	07fafa93          	andi	s5,s5,127
	uint32_t dCO4080 = nCO2440 - nCO2480;
    1270:	413c89b3          	sub	s3,s9,s3
	for(int f = 0; f < int_points; f++) {
    1274:	4781                	li	a5,0
		tune = (dCO0140 * (int_points -f)) / int_points;
    1276:	4651                	li	a2,20
		txctune_co[f] = tune | (tune << 4);
    1278:	1034                	addi	a3,sp,40
    127a:	00f68533          	add	a0,a3,a5
		tune = (dCO0140 * (int_points -f)) / int_points;
    127e:	02c755b3          	divu	a1,a4,a2
	for(int f = 0; f < int_points; f++) {
    1282:	0785                	addi	a5,a5,1
    1284:	8f01                	sub	a4,a4,s0
		txctune_co[f] = tune | (tune << 4);
    1286:	00459693          	slli	a3,a1,0x4
    128a:	01a6f6b3          	and	a3,a3,s10
    128e:	8ecd                	or	a3,a3,a1
    1290:	00d50023          	sb	a3,0(a0) # 700000 <iSLER_mess.c.731a8212+0x6fce28>
	for(int f = 0; f < int_points; f++) {
    1294:	fec792e3          	bne	a5,a2,1278 <main+0x300>
		txctune_co[f] = tune | (tune << 4);
    1298:	6605                	lui	a2,0x1
	for(int f = 0; f < int_points; f++) {
    129a:	4681                	li	a3,0
		tune = (dCO4080 * (f -int_points)) / int_points;
    129c:	48d1                	li	a7,20
		txctune_co[f] = tune | (tune << 4);
    129e:	1641                	addi	a2,a2,-16
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
    12a0:	02800513          	li	a0,40
		tune = (dCO4080 * (f -int_points)) / int_points;
    12a4:	0316d5b3          	divu	a1,a3,a7
		txctune_co[f] = tune | (tune << 4);
    12a8:	1038                	addi	a4,sp,40
    12aa:	00f70833          	add	a6,a4,a5
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
    12ae:	0785                	addi	a5,a5,1
    12b0:	96ce                	add	a3,a3,s3
		txctune_co[f] = tune | (tune << 4);
    12b2:	00459713          	slli	a4,a1,0x4
    12b6:	8f71                	and	a4,a4,a2
    12b8:	8f4d                	or	a4,a4,a1
    12ba:	00e80023          	sb	a4,0(a6) # 80000000 <_eusrstack+0x5fff8000>
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
    12be:	fea793e3          	bne	a5,a0,12a4 <main+0x32c>
    12c2:	1034                	addi	a3,sp,40
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
    12c4:	4701                	li	a4,0
		RF->TXCTUNE_CO[i] = ((uint32_t*)txctune_co)[i];
    12c6:	4000d537          	lui	a0,0x4000d
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
    12ca:	4629                	li	a2,10
		RF->TXCTUNE_CO[i] = ((uint32_t*)txctune_co)[i];
    12cc:	428c                	lw	a1,0(a3)
    12ce:	02870793          	addi	a5,a4,40
    12d2:	078a                	slli	a5,a5,0x2
    12d4:	97aa                	add	a5,a5,a0
    12d6:	c38c                	sw	a1,0(a5)
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
    12d8:	0705                	addi	a4,a4,1
    12da:	0691                	addi	a3,a3,4
    12dc:	fec718e3          	bne	a4,a2,12cc <main+0x354>
	uint32_t dGA0140 = nGA2401 - nGA2440;
    12e0:	415b8bb3          	sub	s7,s7,s5
	uint32_t dGA4080 = nGA2440 - nGA2480;
    12e4:	4695                	li	a3,5
    12e6:	02db86b3          	mul	a3,s7,a3
		txctune_ga[f] = tune | (tune << 4);
    12ea:	6605                	lui	a2,0x1
	uint32_t dGA4080 = nGA2440 - nGA2480;
    12ec:	41ba8ab3          	sub	s5,s5,s11
	uint8_t txctune_ga[sizeof(RF->TXCTUNE_GA)] = {0};
    12f0:	ce02                	sw	zero,28(sp)
    12f2:	d002                	sw	zero,32(sp)
    12f4:	d202                	sw	zero,36(sp)
	for(int f = 1; f < int_points; f++) {
    12f6:	4785                	li	a5,1
		tune = (dGA0140 * (int_points -f)) / int_points;
    12f8:	4599                	li	a1,6
		txctune_ga[f] = tune | (tune << 4);
    12fa:	1641                	addi	a2,a2,-16
    12fc:	0878                	addi	a4,sp,28
		tune = (dGA0140 * (int_points -f)) / int_points;
    12fe:	02b6d533          	divu	a0,a3,a1
		txctune_ga[f] = tune | (tune << 4);
    1302:	00f70833          	add	a6,a4,a5
	for(int f = 1; f < int_points; f++) {
    1306:	0785                	addi	a5,a5,1
    1308:	417686b3          	sub	a3,a3,s7
		txctune_ga[f] = tune | (tune << 4);
    130c:	00451713          	slli	a4,a0,0x4
    1310:	8f71                	and	a4,a4,a2
    1312:	8f49                	or	a4,a4,a0
    1314:	00e80023          	sb	a4,0(a6)
	for(int f = 1; f < int_points; f++) {
    1318:	feb792e3          	bne	a5,a1,12fc <main+0x384>
		txctune_ga[f] = tune | (tune << 4);
    131c:	6605                	lui	a2,0x1
	for(int f = 1; f < int_points; f++) {
    131e:	4701                	li	a4,0
		tune = (dGA4080 * (f -int_points)) / int_points;
    1320:	4319                	li	t1,6
		txctune_ga[f] = tune | (tune << 4);
    1322:	ff060893          	addi	a7,a2,-16 # ff0 <main+0x78>
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
    1326:	452d                	li	a0,11
		tune = (dGA4080 * (f -int_points)) / int_points;
    1328:	026755b3          	divu	a1,a4,t1
		txctune_ga[f] = tune | (tune << 4);
    132c:	0874                	addi	a3,sp,28
    132e:	00f68833          	add	a6,a3,a5
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
    1332:	0785                	addi	a5,a5,1
    1334:	9756                	add	a4,a4,s5
		txctune_ga[f] = tune | (tune << 4);
    1336:	00459693          	slli	a3,a1,0x4
    133a:	0116f6b3          	and	a3,a3,a7
    133e:	8ecd                	or	a3,a3,a1
    1340:	00d80023          	sb	a3,0(a6)
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
    1344:	fea792e3          	bne	a5,a0,1328 <main+0x3b0>
		RF->TXCTUNE_GA[i] = ((uint32_t*)txctune_ga)[i];
    1348:	46f2                	lw	a3,28(sp)
    134a:	4000d7b7          	lui	a5,0x4000d
    134e:	08078713          	addi	a4,a5,128 # 4000d080 <_eusrstack+0x20005080>
    1352:	c734                	sw	a3,72(a4)
    1354:	5682                	lw	a3,32(sp)
    1356:	c774                	sw	a3,76(a4)
    1358:	5692                	lw	a3,36(sp)
    135a:	cb34                	sw	a3,80(a4)
	RF->RF1 &= 0xffffffef;
    135c:	43d8                	lw	a4,4(a5)
	RF->RF20 &= 0xfffeffff;
    135e:	76c1                	lui	a3,0xffff0
    1360:	16fd                	addi	a3,a3,-1
	RF->RF1 &= 0xffffffef;
    1362:	9b3d                	andi	a4,a4,-17
    1364:	c3d8                	sw	a4,4(a5)
	RF->RF1 &= 0xfffffffe;
    1366:	43d8                	lw	a4,4(a5)
    1368:	9b79                	andi	a4,a4,-2
    136a:	c3d8                	sw	a4,4(a5)
	RF->RF10 |= 0x1000;
    136c:	5798                	lw	a4,40(a5)
    136e:	8f51                	or	a4,a4,a2
    1370:	d798                	sw	a4,40(a5)
	RF->RF11 |= 0x10;
    1372:	57d8                	lw	a4,44(a5)
    1374:	01076713          	ori	a4,a4,16
    1378:	d7d8                	sw	a4,44(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xffffffc0) | (tune2440 & 0x3f);
    137a:	5f98                	lw	a4,56(a5)
    137c:	fc077713          	andi	a4,a4,-64
    1380:	01976733          	or	a4,a4,s9
    1384:	df98                	sw	a4,56(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0x80ffffff) | (tune2440 & 0x7f000000);
    1386:	5f88                	lw	a0,56(a5)
    1388:	81000737          	lui	a4,0x81000
    138c:	177d                	addi	a4,a4,-1
    138e:	8f69                	and	a4,a4,a0
    1390:	7f000537          	lui	a0,0x7f000
    1394:	00aa7533          	and	a0,s4,a0
    1398:	8d59                	or	a0,a0,a4
    139a:	df88                	sw	a0,56(a5)
	RF->RF1 |= 0x100;
    139c:	43d8                	lw	a4,4(a5)
    139e:	10076713          	ori	a4,a4,256
    13a2:	c3d8                	sw	a4,4(a5)
	RF->RF20 &= 0xfffeffff;
    13a4:	4bb8                	lw	a4,80(a5)
    13a6:	8f75                	and	a4,a4,a3
    13a8:	cbb8                	sw	a4,80(a5)
	RF->RF2 |= 0x200000;
    13aa:	4798                	lw	a4,8(a5)
    13ac:	002006b7          	lui	a3,0x200
    13b0:	8f55                	or	a4,a4,a3
    13b2:	c798                	sw	a4,8(a5)
	RF->RF3 = (RF->RF3 & 0xffffffef) | 0x10;
    13b4:	47d8                	lw	a4,12(a5)
	while(LL->TMR && ((RF->RXTUNE >> 8) & 1));
    13b6:	4000c6b7          	lui	a3,0x4000c
	RF->RF3 = (RF->RF3 & 0xffffffef) | 0x10;
    13ba:	01076713          	ori	a4,a4,16
    13be:	c7d8                	sw	a4,12(a5)
	RF->RF1 |= 0x1000;
    13c0:	43d8                	lw	a4,4(a5)
    13c2:	8f51                	or	a4,a4,a2
    13c4:	c3d8                	sw	a4,4(a5)
	LL->TMR = 100;
    13c6:	4000c7b7          	lui	a5,0x4000c
    13ca:	06400713          	li	a4,100
    13ce:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
    13d2:	d3f8                	sw	a4,100(a5)
	while(LL->TMR && ((RF->RXTUNE >> 8) & 1));
    13d4:	4000d737          	lui	a4,0x4000d
    13d8:	20068793          	addi	a5,a3,512 # 4000c200 <_eusrstack+0x20004200>
    13dc:	53fc                	lw	a5,100(a5)
    13de:	c791                	beqz	a5,13ea <main+0x472>
    13e0:	09c72783          	lw	a5,156(a4) # 4000d09c <_eusrstack+0x2000509c>
    13e4:	1007f793          	andi	a5,a5,256
    13e8:	fbe5                	bnez	a5,13d8 <main+0x460>
	tuneFilter = RF->RXTUNE & 0x1f;
    13ea:	4000d7b7          	lui	a5,0x4000d
    13ee:	08078713          	addi	a4,a5,128 # 4000d080 <_eusrstack+0x20005080>
    13f2:	4f54                	lw	a3,28(a4)
    13f4:	ce018713          	addi	a4,gp,-800 # 200000dc <tuneFilter>
    13f8:	8afd                	andi	a3,a3,31
    13fa:	c314                	sw	a3,0(a4)
	RF->RF20 |= 0x10000;
    13fc:	4bb4                	lw	a3,80(a5)
    13fe:	6641                	lui	a2,0x10
    1400:	8ed1                	or	a3,a3,a2
    1402:	cbb4                	sw	a3,80(a5)
	RF->RF20 = (RF->RF20 & 0xffffffe0) | tuneFilter;
    1404:	4bb4                	lw	a3,80(a5)
    1406:	4310                	lw	a2,0(a4)
    1408:	9a81                	andi	a3,a3,-32
    140a:	8ed1                	or	a3,a3,a2
    140c:	cbb4                	sw	a3,80(a5)
	RF->RF2 &= 0xffdfffff;
    140e:	4794                	lw	a3,8(a5)
    1410:	ffe00637          	lui	a2,0xffe00
    1414:	167d                	addi	a2,a2,-1
    1416:	8ef1                	and	a3,a3,a2
    1418:	c794                	sw	a3,8(a5)
	tuneFilter2M = (tuneFilter +2 < 0x1f) ? (tuneFilter +2) : 0x1f;
    141a:	4314                	lw	a3,0(a4)
    141c:	4679                	li	a2,30
    141e:	47fd                	li	a5,31
    1420:	0689                	addi	a3,a3,2
    1422:	00d66463          	bltu	a2,a3,142a <main+0x4b2>
    1426:	431c                	lw	a5,0(a4)
    1428:	0789                	addi	a5,a5,2
    142a:	cef1a223          	sw	a5,-796(gp) # 200000e0 <tuneFilter2M>
	RF->RF22 &= 0xfffeffff;
    142e:	4000d7b7          	lui	a5,0x4000d
    1432:	4fb8                	lw	a4,88(a5)
    1434:	76c1                	lui	a3,0xffff0
    1436:	16fd                	addi	a3,a3,-1
    1438:	8f75                	and	a4,a4,a3
    143a:	cfb8                	sw	a4,88(a5)
	RF->RF2 |= 0x10000;
    143c:	4798                	lw	a4,8(a5)
    143e:	66c1                	lui	a3,0x10
	DevSetMode(0);
    1440:	4501                	li	a0,0
	RF->RF2 |= 0x10000;
    1442:	8f55                	or	a4,a4,a3
    1444:	c798                	sw	a4,8(a5)
	RF->RF3 = (RF->RF3 & 0xfffffeff) | 0x100;
    1446:	47d8                	lw	a4,12(a5)
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
    1448:	ffef06b7          	lui	a3,0xffef0
    144c:	16fd                	addi	a3,a3,-1
	RF->RF3 = (RF->RF3 & 0xfffffeff) | 0x100;
    144e:	10076713          	ori	a4,a4,256
    1452:	c7d8                	sw	a4,12(a5)
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
    1454:	43d8                	lw	a4,4(a5)
	NVIC->IPRIOR[0x15] |= 0x80;
    1456:	e000e437          	lui	s0,0xe000e
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
    145a:	8f75                	and	a4,a4,a3
    145c:	001006b7          	lui	a3,0x100
    1460:	8f55                	or	a4,a4,a3
    1462:	c3d8                	sw	a4,4(a5)
	DevSetMode(0);
    1464:	d89fe0ef          	jal	ra,1ec <DevSetMode>
	NVIC->IPRIOR[0x15] |= 0x80;
    1468:	41544783          	lbu	a5,1045(s0) # e000e415 <_eusrstack+0xc0006415>
	funGpioInitAll();
	funPinMode(LED, GPIO_CFGLR_OUT_2Mhz_PP);
	funPinMode(INPUT1_PIN, GPIO_CFGLR_IN_PUPD);

	RFCoreInit(LL_TX_POWER_0_DBM);
	printf(".~ ch32fun iSLER ~.\n");
    146c:	6509                	lui	a0,0x2
    146e:	a9850513          	addi	a0,a0,-1384 # 1a98 <LLE_IRQHandler+0xd2>
    1472:	f807e793          	ori	a5,a5,-128
    1476:	0ff7f793          	andi	a5,a5,255
    147a:	40f40aa3          	sb	a5,1045(s0)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    147e:	002007b7          	lui	a5,0x200
    1482:	10f42023          	sw	a5,256(s0)
    1486:	32d9                	jal	e4c <puts>
	blink(5);
    1488:	4515                	li	a0,5
    148a:	e3bfe0ef          	jal	ra,2c4 <blink>
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
    148e:	400017b7          	lui	a5,0x40001
    1492:	08078793          	addi	a5,a5,128 # 40001080 <_eusrstack+0x1fff9080>
    1496:	5bd8                	lw	a4,52(a5)
    1498:	76f1                	lui	a3,0xffffc
    149a:	16fd                	addi	a3,a3,-1
    149c:	8f75                	and	a4,a4,a3
    149e:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    |= (pin & ~PB);
    14a0:	5398                	lw	a4,32(a5)
    14a2:	6691                	lui	a3,0x4
		.values = Neo_Event_list,
		.size = 5,
		.index = 0
	};

	Button_t button = {
    14a4:	4d01                	li	s10,0
    14a6:	8f55                	or	a4,a4,a3
    14a8:	d398                	sw	a4,32(a5)
void WS2812BDMAInit( )
{
	// Enable DMA + Peripherals
#ifdef CH5xx
	funPinMode( bMOSI, GPIO_CFGLR_OUT_2Mhz_PP );
	R8_SPI0_CLOCK_DIV = FUNCONF_SYSTEM_CORE_CLOCK / 3000000; // div = Fsys/3MHz
    14aa:	46d1                	li	a3,20
    14ac:	40004737          	lui	a4,0x40004
    14b0:	00d701a3          	sb	a3,3(a4) # 40004003 <_eusrstack+0x1fffc003>
	R8_SPI0_CTRL_MOD = RB_SPI_ALL_CLEAR;
    14b4:	4689                	li	a3,2
    14b6:	00d70023          	sb	a3,0(a4)
	R8_SPI0_CTRL_MOD = RB_SPI_MOSI_OE | RB_SPI_2WIRE_MOD;
    14ba:	04400693          	li	a3,68
    14be:	00d70023          	sb	a3,0(a4)
	R16_SPI0_DMA_END = ( (uint32_t)WS2812dmabuff + (DMA_BUFFER_LEN * 2) );
    14c2:	18818693          	addi	a3,gp,392 # 20000584 <led_arr>
    14c6:	06c2                	slli	a3,a3,0x10
    14c8:	82c1                	srli	a3,a3,0x10
    14ca:	00d71e23          	sh	a3,28(a4)
	R8_SPI0_CTRL_CFG |= RB_SPI_BIT_ORDER;
    14ce:	00174683          	lbu	a3,1(a4)
   uint32_t release_time;
   uint32_t press_time;
} Button_t;

void _reset_timers(uint8_t newState, Button_t *model) {
   model->btn_state = newState;
    14d2:	498d                	li	s3,3
	uint32_t sec_time = 0;
    14d4:	4d81                	li	s11,0
    14d6:	0ff6f693          	andi	a3,a3,255
    14da:	0206e693          	ori	a3,a3,32
    14de:	00d700a3          	sb	a3,1(a4)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    14e2:	00080737          	lui	a4,0x80
    14e6:	10e42023          	sw	a4,256(s0)
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
    14ea:	5bd8                	lw	a4,52(a5)

	button_setup(&button);

	while(1) {
		if (is_slave_device() == 0) {
			leds_frame.is_enabled = 1;
    14ec:	ca018a13          	addi	s4,gp,-864 # 2000009c <leds_frame>
    14f0:	9b3d                	andi	a4,a4,-17
    14f2:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     |= (pin & ~PB);
    14f4:	5b98                	lw	a4,48(a5)
	if (now - *ref_time > duration) {
    14f6:	6b85                	lui	s7,0x1
	dataFrame->data_len = data_len;
    14f8:	c1018413          	addi	s0,gp,-1008 # 2000000c <dataFrame>
    14fc:	01076713          	ori	a4,a4,16
    1500:	db98                	sw	a4,48(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
    1502:	5398                	lw	a4,32(a5)
    1504:	9b3d                	andi	a4,a4,-17
    1506:	d398                	sw	a4,32(a5)
   model->debounce_time = millis();
    1508:	0004ac03          	lw	s8,0(s1)
   model->release_time = millis();
    150c:	0004aa83          	lw	s5,0(s1)
	return funDigitalRead(INPUT1_PIN);
    1510:	400017b7          	lui	a5,0x40001
    1514:	0a47a783          	lw	a5,164(a5) # 400010a4 <_eusrstack+0x1fff90a4>
    1518:	4007f793          	andi	a5,a5,1024
		if (is_slave_device() == 0) {
    151c:	e3d9                	bnez	a5,15a2 <main+0x62a>
	uint32_t now = millis();
    151e:	0004ac83          	lw	s9,0(s1)
			leds_frame.is_enabled = 1;
    1522:	4785                	li	a5,1
	if (now - *ref_time > duration) {
    1524:	6705                	lui	a4,0x1
    1526:	00fa05a3          	sb	a5,11(s4) # 2000b <iSLER_mess.c.731a8212+0x1ce33>
    152a:	77070713          	addi	a4,a4,1904 # 1770 <main+0x7f8>
    152e:	41bc87b3          	sub	a5,s9,s11
    1532:	06f77863          	bgeu	a4,a5,15a2 <main+0x62a>

			if (systick_handleTimeout(&sec_time, 6000)) {
				blink(1);
    1536:	4505                	li	a0,1
    1538:	d8dfe0ef          	jal	ra,2c4 <blink>
				// stepper32_tick(&command_step, 1);
				// printf("Sending value: %08X\n", remote_cmd1.value1);

				remote_command_t remote_cmd1 = {
					.command = 0xF1,
					.value1 = counter++,
    153c:	cd418793          	addi	a5,gp,-812 # 200000d0 <counter>
    1540:	0007ad83          	lw	s11,0(a5)
					.value2 = sec_time
				};
				printf("[Master] Sending value1: %u, value2: %u\n", 
    1544:	6509                	lui	a0,0x2
    1546:	8666                	mv	a2,s9
					.value1 = counter++,
    1548:	001d8713          	addi	a4,s11,1
				printf("[Master] Sending value1: %u, value2: %u\n", 
    154c:	85ee                	mv	a1,s11
    154e:	aac50513          	addi	a0,a0,-1364 # 1aac <LLE_IRQHandler+0xe6>
					.value1 = counter++,
    1552:	c398                	sw	a4,0(a5)
				printf("[Master] Sending value1: %u, value2: %u\n", 
    1554:	e9cff0ef          	jal	ra,bf0 <printf>
    1558:	47a5                	li	a5,9
    155a:	00f406a3          	sb	a5,13(s0)
	memcpy(dataFrame->payload, cmd, data_len);
    155e:	57c5                	li	a5,-15
    1560:	00f40723          	sb	a5,14(s0)
    1564:	008dd793          	srli	a5,s11,0x8
    1568:	00f40823          	sb	a5,16(s0)
    156c:	010dd793          	srli	a5,s11,0x10
    1570:	00f408a3          	sb	a5,17(s0)
    1574:	008cd793          	srli	a5,s9,0x8
    1578:	00f40a23          	sb	a5,20(s0)
    157c:	010cd793          	srli	a5,s9,0x10
    1580:	01b407a3          	sb	s11,15(s0)
    1584:	00f40aa3          	sb	a5,21(s0)
    1588:	018ddd93          	srli	s11,s11,0x18
    158c:	018cd793          	srli	a5,s9,0x18
    1590:	01b40923          	sb	s11,18(s0)
    1594:	019409a3          	sb	s9,19(s0)
    1598:	00f40b23          	sb	a5,22(s0)
					remote_cmd1.value1, remote_cmd1.value2);

				modiSLER_loadCommand(&dataFrame, &remote_cmd1, sizeof(remote_cmd1));
				modiSLER_adv_data(&dataFrame);
    159c:	eaaff0ef          	jal	ra,c46 <modiSLER_adv_data.constprop.0>
		*ref_time = now;
    15a0:	8de6                	mv	s11,s9
			}
		}
		
		handle_receiving_frame(millis());
    15a2:	409c                	lw	a5,0(s1)
	}
}

void Frame_RX(uint8_t frame_info[], uint8_t channel, uint8_t phy_mode) {
	DevSetMode(0);
    15a4:	4501                	li	a0,0
    15a6:	8cbe                	mv	s9,a5
    15a8:	c45fe0ef          	jal	ra,1ec <DevSetMode>
	if(LL->LL0 & 3) {
    15ac:	4000c7b7          	lui	a5,0x4000c
    15b0:	2007a703          	lw	a4,512(a5) # 4000c200 <_eusrstack+0x20004200>
    15b4:	20078693          	addi	a3,a5,512
    15b8:	8b0d                	andi	a4,a4,3
    15ba:	cb11                	beqz	a4,15ce <main+0x656>
		LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    15bc:	4ab8                	lw	a4,80(a3)
    15be:	9b61                	andi	a4,a4,-8
    15c0:	cab8                	sw	a4,80(a3)
		LL->LL0 |= 0x08;
    15c2:	2007a703          	lw	a4,512(a5)
    15c6:	00876713          	ori	a4,a4,8
    15ca:	20e7a023          	sw	a4,512(a5)
	}
	LL->TMR = 0;
    15ce:	4000c737          	lui	a4,0x4000c
    15d2:	20070793          	addi	a5,a4,512 # 4000c200 <_eusrstack+0x20004200>
    15d6:	0607a223          	sw	zero,100(a5)
	RF->RF11 &= 0xfffffffd;
    15da:	4000d6b7          	lui	a3,0x4000d
    15de:	56dc                	lw	a5,44(a3)

	DevSetChannel(channel);
	DevSetMode(DEVSETMODE_RX);
    15e0:	0d900513          	li	a0,217
	RF->RF11 &= 0xfffffffd;
    15e4:	9bf5                	andi	a5,a5,-3
    15e6:	d6dc                	sw	a5,44(a3)
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
    15e8:	10072683          	lw	a3,256(a4)
    15ec:	f806f693          	andi	a3,a3,-128
    15f0:	0256e693          	ori	a3,a3,37
    15f4:	10d72023          	sw	a3,256(a4)
	DevSetMode(DEVSETMODE_RX);
    15f8:	bf5fe0ef          	jal	ra,1ec <DevSetMode>

#if defined(CH582_CH583) || defined(CH32V208)
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
				   (phy_mode == PHY_S2) ? CTRL_CFG_PHY_CODED:
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
										  CTRL_CFG_PHY_1M; // default 1M for now
    15fc:	4000c737          	lui	a4,0x4000c
    1600:	10072683          	lw	a3,256(a4) # 4000c100 <_eusrstack+0x20004100>
    1604:	7645                	lui	a2,0xffff1
    1606:	167d                	addi	a2,a2,-1
    1608:	8ef1                	and	a3,a3,a2
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
    160a:	0176e6b3          	or	a3,a3,s7
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
    160e:	10d72023          	sw	a3,256(a4)
	BB->BB7 = (BB->BB7 & 0xff00fc00) | ((phy_mode == PHY_2M) ? 0x7f00a0 : 0x79009c);
#elif defined(CH571_CH573)
	BB->BB11 = (BB->BB11 & 0xfffffffc) | 2; // no |2 for TX
#elif defined(CH582_CH583) || defined(CH32V208)
#if defined(CH582_CH583)
	BB->BB4 = (phy_mode < PHY_S2) ? 0x3722d0 : 0x3722df;
    1612:	4000c7b7          	lui	a5,0x4000c
    1616:	003726b7          	lui	a3,0x372
    161a:	10078793          	addi	a5,a5,256 # 4000c100 <_eusrstack+0x20004100>
    161e:	2d068693          	addi	a3,a3,720 # 3722d0 <iSLER_mess.c.731a8212+0x36f0f8>
    1622:	cb94                	sw	a3,16(a5)
#elif defined(CH32V208)
	BB->BB4 = (phy_mode < PHY_S2) ? 0x3222d0 : 0x34a4df;
#endif
	BB->BB5 = (phy_mode < PHY_S2) ? 0x8101901 : 0x8301ff1;
    1624:	081026b7          	lui	a3,0x8102
    1628:	90168693          	addi	a3,a3,-1791 # 8101901 <iSLER_mess.c.731a8212+0x80fe729>
    162c:	cbd4                	sw	a3,20(a5)
	BB->BB6 = (phy_mode < PHY_S2) ? 0x31624 : 0x31619;
    162e:	000316b7          	lui	a3,0x31
    1632:	62468693          	addi	a3,a3,1572 # 31624 <iSLER_mess.c.731a8212+0x2e44c>
    1636:	cf94                	sw	a3,24(a5)
	BB->BB8 = (phy_mode < PHY_S2) ? 0x90083 : 0x90086;
    1638:	000906b7          	lui	a3,0x90
    163c:	08368693          	addi	a3,a3,131 # 90083 <iSLER_mess.c.731a8212+0x8ceab>
    1640:	d394                	sw	a3,32(a5)
	BB->BB9 = 0x1006310;
    1642:	010066b7          	lui	a3,0x1006
    1646:	31068693          	addi	a3,a3,784 # 1006310 <iSLER_mess.c.731a8212+0x1003138>
    164a:	d3d4                	sw	a3,36(a5)
	BB->BB10 = (phy_mode < PHY_S2) ? 0x28be : 0x28de;
    164c:	668d                	lui	a3,0x3
    164e:	8be68693          	addi	a3,a3,-1858 # 28be <ch32fun.c.e0983271+0x5a1>
    1652:	d794                	sw	a3,40(a5)
#elif defined(CH584_CH585) || defined(CH591_CH592)
	BB->BB6 = (BB->BB6 & 0xfffffc00) | ((phy_mode == PHY_2M) ? 0x13a : 0x132);
	BB->BB4 = (BB->BB4 & 0x00ffffff) | ((phy_mode == PHY_2M) ? 0x78000000 : 0x7f000000);
#endif

	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
    1654:	8e89c6b7          	lui	a3,0x8e89c
    1658:	ed668693          	addi	a3,a3,-298 # 8e89bed6 <_eusrstack+0x6e893ed6>
    165c:	c794                	sw	a3,8(a5)
	BB->CRCINIT1 = 0x555555; // crc init
    165e:	005556b7          	lui	a3,0x555
    1662:	55568693          	addi	a3,a3,1365 # 555555 <iSLER_mess.c.731a8212+0x55237d>
    1666:	c3d4                	sw	a3,4(a5)
#endif

	//LL->LL1 = (LL->LL1 & 0xfffffffe) | 1; // 1: AUTO mode, to swap between RX <-> TX when either happened. 0: BASIC
	//LL->FRAME_BUF = (uint32_t)frame_info; // also this only in AUTO mode

	LL->LL0 = 1; // Not sure what this does, but on TX it's 2
    1668:	4785                	li	a5,1
    166a:	20f72023          	sw	a5,512(a4)
	rx_ready = 0;
    166e:	cd818713          	addi	a4,gp,-808 # 200000d4 <rx_ready>
    1672:	00072023          	sw	zero,0(a4)
    1676:	cd818793          	addi	a5,gp,-808 # 200000d4 <rx_ready>
	while(!rx_ready);
    167a:	4398                	lw	a4,0(a5)
    167c:	df7d                	beqz	a4,167a <main+0x702>

remote_command_t* modiSLER_rx_handler() {
	// The chip stores the incoming frame in LLE_BUF, defined in extralibs/iSLER.h
	uint8_t *frame = (uint8_t*)LLE_BUF;
	iSLER_frame_t* rx_frame = (iSLER_frame_t*)(frame + 2);
	uint8_t target_mac[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };
    167e:	443327b7          	lui	a5,0x44332
    1682:	21178793          	addi	a5,a5,529 # 44332211 <_eusrstack+0x2432a211>
    1686:	d43e                	sw	a5,40(sp)
    1688:	6799                	lui	a5,0x6
    168a:	65578793          	addi	a5,a5,1621 # 6655 <iSLER_mess.c.731a8212+0x347d>

	if (memcmp(rx_frame->mac, target_mac, 6) == 0) {
    168e:	4619                	li	a2,6
    1690:	102c                	addi	a1,sp,40
    1692:	00290513          	addi	a0,s2,2
	uint8_t target_mac[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };
    1696:	02f11623          	sh	a5,44(sp)
	if (memcmp(rx_frame->mac, target_mac, 6) == 0) {
    169a:	f8cff0ef          	jal	ra,e26 <memcmp>
    169e:	0c051163          	bnez	a0,1760 <main+0x7e8>
		// first 8 bytes contains: [RSSI x 1Byte] [len x 1Byte] [MAC x 6Bytes]
		// The first two bytes of the frame are metadata with RSSI and length
		PRINT_SEPARATOR();
    16a2:	6509                	lui	a0,0x2
    16a4:	ad850513          	addi	a0,a0,-1320 # 1ad8 <LLE_IRQHandler+0x112>
    16a8:	fa4ff0ef          	jal	ra,e4c <puts>
		printf("RSSI:%d len:%d MAC:", frame[0], frame[1]);
    16ac:	00194603          	lbu	a2,1(s2)
    16b0:	00094583          	lbu	a1,0(s2)
    16b4:	6509                	lui	a0,0x2
    16b6:	b0050513          	addi	a0,a0,-1280 # 1b00 <LLE_IRQHandler+0x13a>
    16ba:	d36ff0ef          	jal	ra,bf0 <printf>
    16be:	87da                	mv	a5,s6
		PRINT_ARRAY(rx_frame->mac, "%02X");
    16c0:	6689                	lui	a3,0x2
    16c2:	0027c583          	lbu	a1,2(a5)
    16c6:	b1468513          	addi	a0,a3,-1260 # 1b14 <LLE_IRQHandler+0x14e>
    16ca:	c43e                	sw	a5,8(sp)
    16cc:	d24ff0ef          	jal	ra,bf0 <printf>
    16d0:	47a2                	lw	a5,8(sp)
    16d2:	cee18713          	addi	a4,gp,-786 # 200000ea <LLE_BUF+0x6>
    16d6:	0785                	addi	a5,a5,1
    16d8:	6689                	lui	a3,0x2
    16da:	fef714e3          	bne	a4,a5,16c2 <main+0x74a>
    16de:	4529                	li	a0,10
    16e0:	f98ff0ef          	jal	ra,e78 <putchar>
		blink(1);
    16e4:	4505                	li	a0,1
    16e6:	bdffe0ef          	jal	ra,2c4 <blink>
		printf("Receiv Command: %02X\n", cmd->command);
    16ea:	03394583          	lbu	a1,51(s2)
    16ee:	6509                	lui	a0,0x2
    16f0:	b1c50513          	addi	a0,a0,-1252 # 1b1c <LLE_IRQHandler+0x156>
    16f4:	cfcff0ef          	jal	ra,bf0 <printf>
		switch (cmd->command) {
    16f8:	03394703          	lbu	a4,51(s2)
    16fc:	0f100693          	li	a3,241
    1700:	400017b7          	lui	a5,0x40001
    1704:	0ad70263          	beq	a4,a3,17a8 <main+0x830>
    1708:	0f200693          	li	a3,242
    170c:	10d70963          	beq	a4,a3,181e <main+0x8a6>
    1710:	0bb00693          	li	a3,187
    1714:	04d71663          	bne	a4,a3,1760 <main+0x7e8>
	return funDigitalRead(INPUT1_PIN);
    1718:	0a47a783          	lw	a5,164(a5) # 400010a4 <_eusrstack+0x1fff90a4>
    171c:	4007f793          	andi	a5,a5,1024
				if (is_slave_device() > 0) {
    1720:	c3a1                	beqz	a5,1760 <main+0x7e8>
					Neo_loadCommand(cmd->value1);
    1722:	03492783          	lw	a5,52(s2)
    printf("Neo_loadCommand: %02X\n", cmd);
    1726:	6509                	lui	a0,0x2
    1728:	b3450513          	addi	a0,a0,-1228 # 1b34 <LLE_IRQHandler+0x16e>
    172c:	0ff7f593          	andi	a1,a5,255
    1730:	c43e                	sw	a5,8(sp)
    1732:	cbeff0ef          	jal	ra,bf0 <printf>
    1736:	47a2                	lw	a5,8(sp)
    1738:	caf18a23          	sb	a5,-844(gp) # 200000b0 <Neo_LedCmd>
    leds_frame.is_enabled = 1;
    173c:	4785                	li	a5,1
    173e:	00fa05a3          	sb	a5,11(s4)
    leds_frame.ref_time = millis();
    1742:	409c                	lw	a5,0(s1)
    ARRAY_SET_VALUE(led_arr, 0);
    1744:	4661                	li	a2,24
    1746:	4581                	li	a1,0
    leds_frame.ref_time = millis();
    1748:	00fa2823          	sw	a5,16(s4)
    ARRAY_SET_VALUE(led_arr, 0);
    174c:	18818513          	addi	a0,gp,392 # 20000584 <led_arr>
    color_ani.ref_index = 0;
    1750:	ca018ea3          	sb	zero,-835(gp) # 200000b9 <color_ani+0x5>
    leds_frame.ref_index = 0;
    1754:	000a0723          	sb	zero,14(s4)
    ARRAY_SET_VALUE(led_arr, 0);
    1758:	cc0ff0ef          	jal	ra,c18 <memset>
					WS2812BDMAStart(NR_LEDS);
    175c:	89aff0ef          	jal	ra,7f6 <WS2812BDMAStart.constprop.0>
    }
}

void Neo_task() {
    if (WS2812BLEDInUse || leds_frame.is_enabled == 0) return;
    1760:	cc81a783          	lw	a5,-824(gp) # 200000c4 <WS2812BLEDInUse>
    1764:	e791                	bnez	a5,1770 <main+0x7f8>
    1766:	00ba4783          	lbu	a5,11(s4)
    176a:	c399                	beqz	a5,1770 <main+0x7f8>

    WS2812BDMAStart(NR_LEDS);
    176c:	88aff0ef          	jal	ra,7f6 <WS2812BDMAStart.constprop.0>
}

void button_task(Button_t *model, void (*handler)(Button_Event_e, uint32_t)) {
   if (model->pin == 0xFF) return;
   
   uint32_t now = millis();
    1770:	409c                	lw	a5,0(s1)
   uint8_t read = funDigitalRead(model->pin);
    1772:	40001737          	lui	a4,0x40001
    1776:	0a472703          	lw	a4,164(a4) # 400010a4 <_eusrstack+0x1fff90a4>

   // Debounce check
   if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    177a:	41878633          	sub	a2,a5,s8
    177e:	46cd                	li	a3,19
    1780:	02c6f163          	bgeu	a3,a2,17a2 <main+0x82a>
   model->debounce_time = now;

   switch (model->btn_state) {
    1784:	4689                	li	a3,2
   uint8_t read = funDigitalRead(model->pin);
    1786:	8b41                	andi	a4,a4,16
   switch (model->btn_state) {
    1788:	16d98363          	beq	s3,a3,18ee <main+0x976>
    178c:	468d                	li	a3,3
    178e:	0cd98063          	beq	s3,a3,184e <main+0x8d6>
    1792:	0e099463          	bnez	s3,187a <main+0x902>
            _reset_timers(BTN_DOWN, model);      // First Press  
         }
         break;

      case BTN_DOWN:
         if (read > 0) {
    1796:	c761                	beqz	a4,185e <main+0x8e6>
   model->debounce_time = millis();
    1798:	409c                	lw	a5,0(s1)
   model->btn_state = newState;
    179a:	4985                	li	s3,1
   model->release_time = millis();
    179c:	0004aa83          	lw	s5,0(s1)
    17a0:	a011                	j	17a4 <main+0x82c>
   if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    17a2:	87e2                	mv	a5,s8

         if (read < 1 && release_duration < TICK_CLICK_DUR) {
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

         } else if (release_duration > TICK_CLICK_DUR) {
    17a4:	8c3e                	mv	s8,a5
    17a6:	b3ad                	j	1510 <main+0x598>
	return funDigitalRead(INPUT1_PIN);
    17a8:	0a47a783          	lw	a5,164(a5)
    17ac:	4007f793          	andi	a5,a5,1024
				if (is_slave_device() > 0) {
    17b0:	dbc5                	beqz	a5,1760 <main+0x7e8>
						.value1 = cmd->value1,
    17b2:	03492583          	lw	a1,52(s2)
						.value2 = cmd->value2
    17b6:	03892603          	lw	a2,56(s2)
					printf("Sending value1: %u, value2: %u\n", 
    17ba:	6509                	lui	a0,0x2
    17bc:	b4c50513          	addi	a0,a0,-1204 # 1b4c <LLE_IRQHandler+0x186>
    17c0:	c632                	sw	a2,12(sp)
    17c2:	c42e                	sw	a1,8(sp)
    17c4:	c2cff0ef          	jal	ra,bf0 <printf>
					Delay_Ms(100);
    17c8:	000b7537          	lui	a0,0xb7
    17cc:	1b050513          	addi	a0,a0,432 # b71b0 <iSLER_mess.c.731a8212+0xb3fd8>
    17d0:	95dfe0ef          	jal	ra,12c <DelaySysTick>
	memcpy(dataFrame->payload, cmd, data_len);
    17d4:	45a2                	lw	a1,8(sp)
	dataFrame->data_len = data_len;
    17d6:	47a5                	li	a5,9
	memcpy(dataFrame->payload, cmd, data_len);
    17d8:	4632                	lw	a2,12(sp)
	dataFrame->data_len = data_len;
    17da:	00f406a3          	sb	a5,13(s0)
	memcpy(dataFrame->payload, cmd, data_len);
    17de:	57c9                	li	a5,-14
    17e0:	00f40723          	sb	a5,14(s0)
    17e4:	0085d793          	srli	a5,a1,0x8
    17e8:	00f40823          	sb	a5,16(s0)
    17ec:	0105d793          	srli	a5,a1,0x10
    17f0:	00f408a3          	sb	a5,17(s0)
    17f4:	00865793          	srli	a5,a2,0x8
    17f8:	00b407a3          	sb	a1,15(s0)
    17fc:	00c409a3          	sb	a2,19(s0)
    1800:	81e1                	srli	a1,a1,0x18
    1802:	00f40a23          	sb	a5,20(s0)
    1806:	01065793          	srli	a5,a2,0x10
    180a:	8261                	srli	a2,a2,0x18
    180c:	00b40923          	sb	a1,18(s0)
    1810:	00f40aa3          	sb	a5,21(s0)
    1814:	00c40b23          	sb	a2,22(s0)
					modiSLER_adv_data(&dataFrame);
    1818:	c2eff0ef          	jal	ra,c46 <modiSLER_adv_data.constprop.0>
    181c:	b791                	j	1760 <main+0x7e8>
	return funDigitalRead(INPUT1_PIN);
    181e:	0a47a783          	lw	a5,164(a5)
    1822:	4007f793          	andi	a5,a5,1024
				if (is_slave_device() == 0) {
    1826:	ff8d                	bnez	a5,1760 <main+0x7e8>
					printf("Received value1: %u, value2: %u\n", 
    1828:	03492583          	lw	a1,52(s2)
    182c:	03892603          	lw	a2,56(s2)
    1830:	6509                	lui	a0,0x2
    1832:	b6c50513          	addi	a0,a0,-1172 # 1b6c <LLE_IRQHandler+0x1a6>
    1836:	bbaff0ef          	jal	ra,bf0 <printf>
					printf("time_diff: %d\n", time - cmd->value2);
    183a:	03892583          	lw	a1,56(s2)
    183e:	6509                	lui	a0,0x2
    1840:	b9050513          	addi	a0,a0,-1136 # 1b90 <LLE_IRQHandler+0x1ca>
    1844:	40bc85b3          	sub	a1,s9,a1
    1848:	ba8ff0ef          	jal	ra,bf0 <printf>
    184c:	bf11                	j	1760 <main+0x7e8>
         if (read < 1) {
    184e:	fb39                	bnez	a4,17a4 <main+0x82c>
   model->debounce_time = millis();
    1850:	4098                	lw	a4,0(s1)
            model->press_time = now;
    1852:	8d3e                	mv	s10,a5
   model->release_time = millis();
    1854:	0004aa83          	lw	s5,0(s1)
   model->debounce_time = millis();
    1858:	87ba                	mv	a5,a4
   model->btn_state = newState;
    185a:	4981                	li	s3,0
    185c:	b7a1                	j	17a4 <main+0x82c>
            uint32_t press_duration = now - model->press_time;
    185e:	41a78733          	sub	a4,a5,s10
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1862:	fa0b8693          	addi	a3,s7,-96 # fa0 <main+0x28>
    1866:	f2e6ffe3          	bgeu	a3,a4,17a4 <main+0x82c>
			printf("Long Press\n"); break;
    186a:	6509                	lui	a0,0x2
    186c:	ba050513          	addi	a0,a0,-1120 # 1ba0 <LLE_IRQHandler+0x1da>
    1870:	c43e                	sw	a5,8(sp)
    1872:	ddaff0ef          	jal	ra,e4c <puts>
    1876:	47a2                	lw	a5,8(sp)
    1878:	b735                	j	17a4 <main+0x82c>
         uint32_t release_duration = now - model->release_time;
    187a:	415786b3          	sub	a3,a5,s5
         if (read < 1 && release_duration < TICK_CLICK_DUR) {
    187e:	eb11                	bnez	a4,1892 <main+0x91a>
    1880:	09f00713          	li	a4,159
    1884:	00d76763          	bltu	a4,a3,1892 <main+0x91a>
   model->debounce_time = millis();
    1888:	409c                	lw	a5,0(s1)
   model->btn_state = newState;
    188a:	4989                	li	s3,2
   model->release_time = millis();
    188c:	0004aa83          	lw	s5,0(s1)
    1890:	bf11                	j	17a4 <main+0x82c>
         } else if (release_duration > TICK_CLICK_DUR) {
    1892:	0a000713          	li	a4,160
    1896:	4985                	li	s3,1
    1898:	f0d776e3          	bgeu	a4,a3,17a4 <main+0x82c>
			printf("Single Click\n");
    189c:	6509                	lui	a0,0x2
	remote_command_t button_cmd = {
    189e:	020106a3          	sb	zero,45(sp)
    18a2:	02010723          	sb	zero,46(sp)
    18a6:	020107a3          	sb	zero,47(sp)
    18aa:	02010823          	sb	zero,48(sp)
			printf("Single Click\n");
    18ae:	bac50513          	addi	a0,a0,-1108 # 1bac <LLE_IRQHandler+0x1e6>
			printf("Double Click\n");
    18b2:	d9aff0ef          	jal	ra,e4c <puts>
	dataFrame->data_len = data_len;
    18b6:	47a5                	li	a5,9
    18b8:	00f406a3          	sb	a5,13(s0)
	memcpy(dataFrame->payload, cmd, data_len);
    18bc:	faa00793          	li	a5,-86
    18c0:	02f10423          	sb	a5,40(sp)
    18c4:	c1e18513          	addi	a0,gp,-994 # 2000001a <dataFrame+0xe>
    18c8:	4625                	li	a2,9
    18ca:	102c                	addi	a1,sp,40
    18cc:	033104a3          	sb	s3,41(sp)
    18d0:	02010523          	sb	zero,42(sp)
    18d4:	020105a3          	sb	zero,43(sp)
    18d8:	02010623          	sb	zero,44(sp)
    18dc:	b4eff0ef          	jal	ra,c2a <memcpy>
			modiSLER_adv_data(&dataFrame);
    18e0:	b66ff0ef          	jal	ra,c46 <modiSLER_adv_data.constprop.0>
   model->debounce_time = millis();
    18e4:	409c                	lw	a5,0(s1)
   model->btn_state = newState;
    18e6:	498d                	li	s3,3
   model->release_time = millis();
    18e8:	0004aa83          	lw	s5,0(s1)
    18ec:	bd65                	j	17a4 <main+0x82c>
         break;
      }

      case BTN_DOWN2:
         // Second release
         if (read > 0) {
    18ee:	ea070be3          	beqz	a4,17a4 <main+0x82c>
			printf("Double Click\n");
    18f2:	6509                	lui	a0,0x2
	remote_command_t button_cmd = {
    18f4:	020106a3          	sb	zero,45(sp)
    18f8:	02010723          	sb	zero,46(sp)
    18fc:	020107a3          	sb	zero,47(sp)
    1900:	02010823          	sb	zero,48(sp)
			printf("Double Click\n");
    1904:	bbc50513          	addi	a0,a0,-1092 # 1bbc <LLE_IRQHandler+0x1f6>
    1908:	b76d                	j	18b2 <main+0x93a>

0000190a <SysTick_Handler>:
{
    190a:	1101                	addi	sp,sp,-32
    190c:	c63a                	sw	a4,12(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    190e:	e000f737          	lui	a4,0xe000f
{
    1912:	c242                	sw	a6,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1914:	01072803          	lw	a6,16(a4) # e000f010 <_eusrstack+0xc0007010>
{
    1918:	c43e                	sw	a5,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    191a:	67bd                	lui	a5,0xf
{
    191c:	c046                	sw	a7,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    191e:	a6078793          	addi	a5,a5,-1440 # ea60 <iSLER_mess.c.731a8212+0xb888>
    1922:	01472883          	lw	a7,20(a4)
    1926:	97c2                	add	a5,a5,a6
{
    1928:	ce2a                	sw	a0,28(sp)
    192a:	c836                	sw	a3,16(sp)
    192c:	cc2e                	sw	a1,24(sp)
    192e:	ca32                	sw	a2,20(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1930:	0107b533          	sltu	a0,a5,a6
    1934:	cb1c                	sw	a5,16(a4)
    1936:	011506b3          	add	a3,a0,a7
    193a:	cb54                	sw	a3,20(a4)
	SysTick->SR = 0x00000000;
    193c:	00072223          	sw	zero,4(a4)
	systick_millis++;
    1940:	cdc18793          	addi	a5,gp,-804 # 200000d8 <systick_millis>
    1944:	4398                	lw	a4,0(a5)
}
    1946:	4572                	lw	a0,28(sp)
    1948:	45e2                	lw	a1,24(sp)
	systick_millis++;
    194a:	0705                	addi	a4,a4,1
    194c:	c398                	sw	a4,0(a5)
}
    194e:	4652                	lw	a2,20(sp)
    1950:	46c2                	lw	a3,16(sp)
    1952:	4732                	lw	a4,12(sp)
    1954:	47a2                	lw	a5,8(sp)
    1956:	4812                	lw	a6,4(sp)
    1958:	4882                	lw	a7,0(sp)
    195a:	6105                	addi	sp,sp,32
    195c:	30200073          	mret

00001960 <SPI0_IRQHandler>:
{
    1960:	715d                	addi	sp,sp,-80
    1962:	de22                	sw	s0,60(sp)
    1964:	c686                	sw	ra,76(sp)
    1966:	c496                	sw	t0,72(sp)
    1968:	c29a                	sw	t1,68(sp)
    196a:	c09e                	sw	t2,64(sp)
    196c:	dc2a                	sw	a0,56(sp)
    196e:	da2e                	sw	a1,52(sp)
    1970:	d832                	sw	a2,48(sp)
    1972:	d636                	sw	a3,44(sp)
    1974:	d43a                	sw	a4,40(sp)
    1976:	d23e                	sw	a5,36(sp)
    1978:	d042                	sw	a6,32(sp)
    197a:	ce46                	sw	a7,28(sp)
    197c:	cc72                	sw	t3,24(sp)
    197e:	ca76                	sw	t4,20(sp)
    1980:	c87a                	sw	t5,16(sp)
    1982:	c67e                	sw	t6,12(sp)
	uint8_t intf = R8_SPI0_INT_FLAG;
    1984:	40004437          	lui	s0,0x40004
    1988:	00644783          	lbu	a5,6(s0) # 40004006 <_eusrstack+0x1fffc006>
	if( (intf & RB_SPI_IF_DMA_END) )
    198c:	8ba1                	andi	a5,a5,8
    198e:	cb81                	beqz	a5,199e <SPI0_IRQHandler+0x3e>
		WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 1 );
    1990:	4505                	li	a0,1
    1992:	a71fe0ef          	jal	ra,402 <WS2812FillBuffSec.constprop.0>
		R16_SPI0_TOTAL_CNT = DMA_BUFFER_LEN * 2;
    1996:	06000793          	li	a5,96
    199a:	00f41623          	sh	a5,12(s0)
}
    199e:	5472                	lw	s0,60(sp)
    19a0:	40b6                	lw	ra,76(sp)
    19a2:	42a6                	lw	t0,72(sp)
    19a4:	4316                	lw	t1,68(sp)
    19a6:	4386                	lw	t2,64(sp)
    19a8:	5562                	lw	a0,56(sp)
    19aa:	55d2                	lw	a1,52(sp)
    19ac:	5642                	lw	a2,48(sp)
    19ae:	56b2                	lw	a3,44(sp)
    19b0:	5722                	lw	a4,40(sp)
    19b2:	5792                	lw	a5,36(sp)
    19b4:	5802                	lw	a6,32(sp)
    19b6:	48f2                	lw	a7,28(sp)
    19b8:	4e62                	lw	t3,24(sp)
    19ba:	4ed2                	lw	t4,20(sp)
    19bc:	4f42                	lw	t5,16(sp)
    19be:	4fb2                	lw	t6,12(sp)
    19c0:	6161                	addi	sp,sp,80
    19c2:	30200073          	mret

000019c6 <LLE_IRQHandler>:
void LLE_IRQHandler() {
    19c6:	7139                	addi	sp,sp,-64
    19c8:	cc3e                	sw	a5,24(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    19ca:	4000c7b7          	lui	a5,0x4000c
    19ce:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
void LLE_IRQHandler() {
    19d2:	d036                	sw	a3,32(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    19d4:	4794                	lw	a3,8(a5)
void LLE_IRQHandler() {
    19d6:	ce3a                	sw	a4,28(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    19d8:	6711                	lui	a4,0x4
void LLE_IRQHandler() {
    19da:	de06                	sw	ra,60(sp)
    19dc:	dc16                	sw	t0,56(sp)
    19de:	da1a                	sw	t1,52(sp)
    19e0:	d81e                	sw	t2,48(sp)
    19e2:	d62a                	sw	a0,44(sp)
    19e4:	d42e                	sw	a1,40(sp)
    19e6:	d232                	sw	a2,36(sp)
    19e8:	ca42                	sw	a6,20(sp)
    19ea:	c846                	sw	a7,16(sp)
    19ec:	c672                	sw	t3,12(sp)
    19ee:	c476                	sw	t4,8(sp)
    19f0:	c27a                	sw	t5,4(sp)
    19f2:	c07e                	sw	t6,0(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
    19f4:	8ef9                	and	a3,a3,a4
    19f6:	cea9                	beqz	a3,1a50 <LLE_IRQHandler+0x8a>
    19f8:	47d4                	lw	a3,12(a5)
    19fa:	8ef9                	and	a3,a3,a4
    19fc:	cab1                	beqz	a3,1a50 <LLE_IRQHandler+0x8a>
		LL->LL26 = 0xffffffff;
    19fe:	56fd                	li	a3,-1
    1a00:	d7b4                	sw	a3,104(a5)
		LL->STATUS = 0x4000;
    1a02:	c798                	sw	a4,8(a5)
	DevSetMode(0);
    1a04:	4501                	li	a0,0
    1a06:	fe6fe0ef          	jal	ra,1ec <DevSetMode>
	LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    1a0a:	4000c7b7          	lui	a5,0x4000c
    1a0e:	20078693          	addi	a3,a5,512 # 4000c200 <_eusrstack+0x20004200>
    1a12:	4ab8                	lw	a4,80(a3)
}
    1a14:	50f2                	lw	ra,60(sp)
    1a16:	52e2                	lw	t0,56(sp)
	LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
    1a18:	9b61                	andi	a4,a4,-8
    1a1a:	cab8                	sw	a4,80(a3)
	LL->LL0 |= 0x08;
    1a1c:	2007a703          	lw	a4,512(a5)
}
    1a20:	5352                	lw	t1,52(sp)
    1a22:	53c2                	lw	t2,48(sp)
	LL->LL0 |= 0x08;
    1a24:	00876713          	ori	a4,a4,8
    1a28:	20e7a023          	sw	a4,512(a5)
	rx_ready = 1;
    1a2c:	4705                	li	a4,1
    1a2e:	cce1ac23          	sw	a4,-808(gp) # 200000d4 <rx_ready>
}
    1a32:	5532                	lw	a0,44(sp)
    1a34:	55a2                	lw	a1,40(sp)
    1a36:	5612                	lw	a2,36(sp)
    1a38:	5682                	lw	a3,32(sp)
    1a3a:	4772                	lw	a4,28(sp)
    1a3c:	47e2                	lw	a5,24(sp)
    1a3e:	4852                	lw	a6,20(sp)
    1a40:	48c2                	lw	a7,16(sp)
    1a42:	4e32                	lw	t3,12(sp)
    1a44:	4ea2                	lw	t4,8(sp)
    1a46:	4f12                	lw	t5,4(sp)
    1a48:	4f82                	lw	t6,0(sp)
    1a4a:	6121                	addi	sp,sp,64
    1a4c:	30200073          	mret
		LL->STATUS &= LL->INT_EN;
    1a50:	4000c7b7          	lui	a5,0x4000c
    1a54:	20078713          	addi	a4,a5,512 # 4000c200 <_eusrstack+0x20004200>
    1a58:	4750                	lw	a2,12(a4)
    1a5a:	4714                	lw	a3,8(a4)
		BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
    1a5c:	10078793          	addi	a5,a5,256
		LL->STATUS &= LL->INT_EN;
    1a60:	8ef1                	and	a3,a3,a2
    1a62:	c714                	sw	a3,8(a4)
		BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
    1a64:	57d8                	lw	a4,44(a5)
    1a66:	9b71                	andi	a4,a4,-4
    1a68:	00176713          	ori	a4,a4,1
    1a6c:	d7d8                	sw	a4,44(a5)
    1a6e:	bf59                	j	1a04 <LLE_IRQHandler+0x3e>
    1a70:	6562                	flw	fa0,24(sp)
    1a72:	2d65                	jal	212a <_data_lma+0x416>
    1a74:	3535                	jal	18a0 <main+0x928>
    1a76:	0035                	c.nop	13
	...
    1a84:	0500                	addi	s0,sp,640
    1a86:	0000                	unimp
    1a88:	05c8                	addi	a0,sp,708
    1a8a:	0000                	unimp
    1a8c:	0636                	slli	a2,a2,0xd
    1a8e:	0000                	unimp
    1a90:	0728                	addi	a0,sp,904
    1a92:	0000                	unimp
    1a94:	07ec                	addi	a1,sp,972
    1a96:	0000                	unimp
    1a98:	7e2e                	flw	ft8,232(sp)
    1a9a:	6320                	flw	fs0,64(a4)
    1a9c:	3368                	fld	fa0,224(a4)
    1a9e:	6632                	flw	fa2,12(sp)
    1aa0:	6e75                	lui	t3,0x1d
    1aa2:	6920                	flw	fs0,80(a0)
    1aa4:	52454c53          	0x52454c53
    1aa8:	7e20                	flw	fs0,120(a2)
    1aaa:	002e                	c.slli	zero,0xb
    1aac:	73614d5b          	0x73614d5b
    1ab0:	6574                	flw	fa3,76(a0)
    1ab2:	5d72                	lw	s10,60(sp)
    1ab4:	5320                	lw	s0,96(a4)
    1ab6:	6e65                	lui	t3,0x19
    1ab8:	6964                	flw	fs1,84(a0)
    1aba:	676e                	flw	fa4,216(sp)
    1abc:	7620                	flw	fs0,104(a2)
    1abe:	6c61                	lui	s8,0x18
    1ac0:	6575                	lui	a0,0x1d
    1ac2:	3a31                	jal	13de <main+0x466>
    1ac4:	2520                	fld	fs0,72(a0)
    1ac6:	2c75                	jal	1d82 <_data_lma+0x6e>
    1ac8:	7620                	flw	fs0,104(a2)
    1aca:	6c61                	lui	s8,0x18
    1acc:	6575                	lui	a0,0x1d
    1ace:	3a32                	fld	fs4,296(sp)
    1ad0:	2520                	fld	fs0,72(a0)
    1ad2:	0a75                	addi	s4,s4,29
    1ad4:	0000                	unimp
    1ad6:	0000                	unimp
    1ad8:	2d0a                	fld	fs10,128(sp)
    1ada:	2d2d                	jal	2114 <_data_lma+0x400>
    1adc:	2d2d                	jal	2116 <_data_lma+0x402>
    1ade:	2d2d                	jal	2118 <_data_lma+0x404>
    1ae0:	2d2d                	jal	211a <_data_lma+0x406>
    1ae2:	2d2d                	jal	211c <_data_lma+0x408>
    1ae4:	2d2d                	jal	211e <_data_lma+0x40a>
    1ae6:	2d2d                	jal	2120 <_data_lma+0x40c>
    1ae8:	2d2d                	jal	2122 <_data_lma+0x40e>
    1aea:	2d2d                	jal	2124 <_data_lma+0x410>
    1aec:	2d2d                	jal	2126 <_data_lma+0x412>
    1aee:	2d2d                	jal	2128 <_data_lma+0x414>
    1af0:	2d2d                	jal	212a <_data_lma+0x416>
    1af2:	2d2d                	jal	212c <_data_lma+0x418>
    1af4:	2d2d                	jal	212e <_data_lma+0x41a>
    1af6:	2d2d                	jal	2130 <_data_lma+0x41c>
    1af8:	2d2d                	jal	2132 <_data_lma+0x41e>
    1afa:	2d2d                	jal	2134 <_data_lma+0x420>
    1afc:	0000                	unimp
    1afe:	0000                	unimp
    1b00:	5352                	lw	t1,52(sp)
    1b02:	253a4953          	0x253a4953
    1b06:	2064                	fld	fs1,192(s0)
    1b08:	656c                	flw	fa1,76(a0)
    1b0a:	3a6e                	fld	fs4,248(sp)
    1b0c:	6425                	lui	s0,0x9
    1b0e:	4d20                	lw	s0,88(a0)
    1b10:	4341                	li	t1,16
    1b12:	003a                	c.slli	zero,0xe
    1b14:	3025                	jal	133c <main+0x3c4>
    1b16:	5832                	lw	a6,44(sp)
    1b18:	0020                	addi	s0,sp,8
    1b1a:	0000                	unimp
    1b1c:	6552                	flw	fa0,20(sp)
    1b1e:	76696563          	bltu	s2,t1,2288 <_data_lma+0x574>
    1b22:	4320                	lw	s0,64(a4)
    1b24:	616d6d6f          	jal	s10,d813a <iSLER_mess.c.731a8212+0xd4f62>
    1b28:	646e                	flw	fs0,216(sp)
    1b2a:	203a                	fld	ft0,392(sp)
    1b2c:	3025                	jal	1354 <main+0x3dc>
    1b2e:	5832                	lw	a6,44(sp)
    1b30:	000a                	c.slli	zero,0x2
    1b32:	0000                	unimp
    1b34:	654e                	flw	fa0,208(sp)
    1b36:	6f6c5f6f          	jal	t5,c722c <iSLER_mess.c.731a8212+0xc4054>
    1b3a:	6461                	lui	s0,0x18
    1b3c:	6d6d6f43          	0x6d6d6f43
    1b40:	6e61                	lui	t3,0x18
    1b42:	3a64                	fld	fs1,240(a2)
    1b44:	2520                	fld	fs0,72(a0)
    1b46:	3230                	fld	fa2,96(a2)
    1b48:	0a58                	addi	a4,sp,276
    1b4a:	0000                	unimp
    1b4c:	646e6553          	0x646e6553
    1b50:	6e69                	lui	t3,0x1a
    1b52:	61762067          	0x61762067
    1b56:	756c                	flw	fa1,108(a0)
    1b58:	3165                	jal	1800 <main+0x888>
    1b5a:	203a                	fld	ft0,392(sp)
    1b5c:	7525                	lui	a0,0xfffe9
    1b5e:	202c                	fld	fa1,64(s0)
    1b60:	6176                	flw	ft2,92(sp)
    1b62:	756c                	flw	fa1,108(a0)
    1b64:	3265                	jal	150c <main+0x594>
    1b66:	203a                	fld	ft0,392(sp)
    1b68:	7525                	lui	a0,0xfffe9
    1b6a:	000a                	c.slli	zero,0x2
    1b6c:	6552                	flw	fa0,20(sp)
    1b6e:	76696563          	bltu	s2,t1,22d8 <_data_lma+0x5c4>
    1b72:	6465                	lui	s0,0x19
    1b74:	7620                	flw	fs0,104(a2)
    1b76:	6c61                	lui	s8,0x18
    1b78:	6575                	lui	a0,0x1d
    1b7a:	3a31                	jal	1496 <main+0x51e>
    1b7c:	2520                	fld	fs0,72(a0)
    1b7e:	2c75                	jal	1e3a <_data_lma+0x126>
    1b80:	7620                	flw	fs0,104(a2)
    1b82:	6c61                	lui	s8,0x18
    1b84:	6575                	lui	a0,0x1d
    1b86:	3a32                	fld	fs4,296(sp)
    1b88:	2520                	fld	fs0,72(a0)
    1b8a:	0a75                	addi	s4,s4,29
    1b8c:	0000                	unimp
    1b8e:	0000                	unimp
    1b90:	6974                	flw	fa3,84(a0)
    1b92:	656d                	lui	a0,0x1b
    1b94:	645f 6669 3a66      	0x3a666669645f
    1b9a:	2520                	fld	fs0,72(a0)
    1b9c:	0a64                	addi	s1,sp,284
    1b9e:	0000                	unimp
    1ba0:	6f4c                	flw	fa1,28(a4)
    1ba2:	676e                	flw	fa4,216(sp)
    1ba4:	5020                	lw	s0,96(s0)
    1ba6:	6572                	flw	fa0,28(sp)
    1ba8:	00007373          	csrrci	t1,ustatus,0
    1bac:	676e6953          	0x676e6953
    1bb0:	656c                	flw	fa1,76(a0)
    1bb2:	4320                	lw	s0,64(a4)
    1bb4:	696c                	flw	fa1,84(a0)
    1bb6:	00006b63          	bltu	zero,zero,1bcc <SIN_LUT>
    1bba:	0000                	unimp
    1bbc:	6f44                	flw	fs1,28(a4)
    1bbe:	6275                	lui	tp,0x1d
    1bc0:	656c                	flw	fa1,76(a0)
    1bc2:	4320                	lw	s0,64(a4)
    1bc4:	696c                	flw	fa1,84(a0)
    1bc6:	00006b63          	bltu	zero,zero,1bdc <SIN_LUT+0x10>
	...

00001bcc <SIN_LUT>:
    1bcc:	01010100 02020101 05040403 09080706     ................
    1bdc:	0e0d0b0a 14131110 1b1a1816 24211f1d     ..............!$
    1bec:	2d2a2826 3634312f 413e3c39 4c494744     &(*-/1469<>ADGIL
    1bfc:	5855524f 64615e5b 706d6a67 7d797673     ORUX[^adgjmpsvy}
    1c0c:	89868380 95928f8c a29f9c99 adaba8a5     ................
    1c1c:	b9b6b3b0 c4c1bebc cecbc9c6 d7d5d3d0     ................
    1c2c:	e0dedcda e8e6e4e2 eeedebe9 f4f3f1f0     ................
    1c3c:	f8f7f6f5 fcfbfaf9 fefefdfc fffffffe     ................
    1c4c:	ffffffff fdfefefe fafbfcfc f6f7f8f9     ................
    1c5c:	f1f3f4f5 ebedeef0 e4e6e8e9 dcdee0e2     ................
    1c6c:	d3d5d7da c9cbced0 bec1c4c6 b3b6b9bc     ................
    1c7c:	a8abadb0 9c9fa2a5 8f929599 8386898c     ................
    1c8c:	76797d80 6a6d7073 5e616467 5255585b     .}yvspmjgda^[XUR
    1c9c:	47494c4f 3c3e4144 31343639 282a2d2f     OLIGDA><9641/-*(
    1cac:	1f212426 181a1b1d 11131416 0b0d0e10     &$!.............
    1cbc:	0708090a 04040506 01020203 01010101     ................

00001ccc <bitquartets.0>:
    1ccc:	71111111 77111711 71711171 77711771     ...q...wq.qqq.qw
    1cdc:	71171117 77171717 71771177 77771777     ...q...ww.wqw.ww

00001cec <channel_map>:
    1cec:	04030201 08070605 0d0c0a09 11100f0e     ................
    1cfc:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    1d0c:	25242322 270b0026                       "#$%&..'
