
iSLER-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	4280006f          	j	428 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	04ac                	addi	a1,sp,584
   a:	0000                	unimp
   c:	04ac                	addi	a1,sp,584
   e:	0000                	unimp
  10:	bda9                	j	fffffe6a <_eusrstack+0xdfff7e6a>
  12:	f3f9                	bnez	a5,ffffffd8 <_eusrstack+0xdfff7fd8>
  14:	04ac                	addi	a1,sp,584
	...
  1e:	0000                	unimp
  20:	04ac                	addi	a1,sp,584
  22:	0000                	unimp
  24:	04ac                	addi	a1,sp,584
	...
  2e:	0000                	unimp
  30:	04ac                	addi	a1,sp,584
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	04ac                	addi	a1,sp,584
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	04ac                	addi	a1,sp,584
  42:	0000                	unimp
  44:	04ac                	addi	a1,sp,584
  46:	0000                	unimp
  48:	04ac                	addi	a1,sp,584
  4a:	0000                	unimp
  4c:	04ac                	addi	a1,sp,584
  4e:	0000                	unimp
  50:	04ac                	addi	a1,sp,584
  52:	0000                	unimp
  54:	0e4e                	slli	t3,t3,0x13
  56:	0000                	unimp
  58:	04ac                	addi	a1,sp,584
  5a:	0000                	unimp
  5c:	0000                	unimp
  5e:	0000                	unimp
  60:	04ac                	addi	a1,sp,584
  62:	0000                	unimp
  64:	04ac                	addi	a1,sp,584
  66:	0000                	unimp
  68:	04ac                	addi	a1,sp,584
  6a:	0000                	unimp
  6c:	04ac                	addi	a1,sp,584
  6e:	0000                	unimp
  70:	04ac                	addi	a1,sp,584
  72:	0000                	unimp
  74:	04ac                	addi	a1,sp,584
  76:	0000                	unimp
  78:	04ac                	addi	a1,sp,584
  7a:	0000                	unimp
  7c:	04ac                	addi	a1,sp,584
  7e:	0000                	unimp
  80:	04ac                	addi	a1,sp,584
  82:	0000                	unimp
  84:	04ac                	addi	a1,sp,584
  86:	0000                	unimp
  88:	04ac                	addi	a1,sp,584
  8a:	0000                	unimp
  8c:	04ac                	addi	a1,sp,584
	...

Disassembly of section .text:

00000090 <mini_pad>:
{
  90:	1101                	addi	sp,sp,-32
  92:	ca26                	sw	s1,20(sp)
  94:	c84a                	sw	s2,16(sp)
  96:	c64e                	sw	s3,12(sp)
  98:	ce06                	sw	ra,28(sp)
  9a:	cc22                	sw	s0,24(sp)
  9c:	84ae                	mv	s1,a1
  9e:	89aa                	mv	s3,a0
  a0:	85b2                	mv	a1,a2
	int overflow = 0;
  a2:	4901                	li	s2,0
	if(pad_to == 0) pad_to = len;
  a4:	c6bd                	beqz	a3,112 <mini_pad+0x82>
	if(len > pad_to) {
  a6:	0096d463          	bge	a3,s1,ae <mini_pad+0x1e>
  aa:	84b6                	mv	s1,a3
		overflow = 1;
  ac:	4905                	li	s2,1
	for(i = pad_to - len; i > 0; i --) {
  ae:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
  b2:	00045363          	bgez	s0,b8 <mini_pad+0x28>
  b6:	4401                	li	s0,0
  b8:	853a                	mv	a0,a4
  ba:	8622                	mv	a2,s0
  bc:	23e5                	jal	6a4 <memset>
  be:	872a                	mv	a4,a0
  c0:	008506b3          	add	a3,a0,s0
  c4:	4781                	li	a5,0
	for(i = len; i > 0; i --) {
  c6:	40f48633          	sub	a2,s1,a5
  ca:	04c04663          	bgtz	a2,116 <mini_pad+0x86>
  ce:	0004d363          	bgez	s1,d4 <mini_pad+0x44>
  d2:	4481                	li	s1,0
  d4:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
  d8:	40e60533          	sub	a0,a2,a4
	if(overflow) {
  dc:	02090463          	beqz	s2,104 <mini_pad+0x74>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
  e0:	02c77263          	bgeu	a4,a2,104 <mini_pad+0x74>
			*(pbuffer-- - 1) = '*';
  e4:	02a00793          	li	a5,42
  e8:	fef60fa3          	sb	a5,-1(a2)
  ec:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
  f0:	00d77a63          	bgeu	a4,a3,104 <mini_pad+0x74>
			*(pbuffer-- - 1) = '*';
  f4:	fef60f23          	sb	a5,-2(a2)
  f8:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
  fc:	00d77463          	bgeu	a4,a3,104 <mini_pad+0x74>
			*(pbuffer-- - 1) = '*';
 100:	fef60ea3          	sb	a5,-3(a2)
}
 104:	40f2                	lw	ra,28(sp)
 106:	4462                	lw	s0,24(sp)
 108:	44d2                	lw	s1,20(sp)
 10a:	4942                	lw	s2,16(sp)
 10c:	49b2                	lw	s3,12(sp)
 10e:	6105                	addi	sp,sp,32
 110:	8082                	ret
	if(pad_to == 0) pad_to = len;
 112:	86a6                	mv	a3,s1
 114:	bf69                	j	ae <mini_pad+0x1e>
		*(pbuffer++) = *(ptr++);
 116:	00f98633          	add	a2,s3,a5
 11a:	00064583          	lbu	a1,0(a2)
 11e:	00f68633          	add	a2,a3,a5
 122:	0785                	addi	a5,a5,1
 124:	00b60023          	sb	a1,0(a2)
	for(i = len; i > 0; i --) {
 128:	bf79                	j	c6 <mini_pad+0x36>

0000012a <DelaySysTick>:
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
#elif defined(CH32V20x) || defined(CH32V30x) || defined(CH32X03x) || defined(CH582_CH583) || defined(CH591_CH592)
	uint64_t targend = SysTick->CNT + n;
 12a:	e000f7b7          	lui	a5,0xe000f
 12e:	4798                	lw	a4,8(a5)
 130:	47dc                	lw	a5,12(a5)
	while( ((int64_t)( SysTick->CNT - targend )) < 0 );
 132:	e000f837          	lui	a6,0xe000f
	uint64_t targend = SysTick->CNT + n;
 136:	00e505b3          	add	a1,a0,a4
 13a:	00a5b533          	sltu	a0,a1,a0
 13e:	953e                	add	a0,a0,a5
	while( ((int64_t)( SysTick->CNT - targend )) < 0 );
 140:	00882603          	lw	a2,8(a6) # e000f008 <_eusrstack+0xc0007008>
 144:	00c82683          	lw	a3,12(a6)
 148:	40b607b3          	sub	a5,a2,a1
 14c:	00f63733          	sltu	a4,a2,a5
 150:	40a687b3          	sub	a5,a3,a0
 154:	8f99                	sub	a5,a5,a4
 156:	fe07c5e3          	bltz	a5,140 <DelaySysTick+0x16>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
 15a:	8082                	ret

0000015c <mini_itoa.part.0>:
	int	negative = 0;
 15c:	4881                	li	a7,0
	if (value < 0 && !unsig) {
 15e:	00055663          	bgez	a0,16a <mini_itoa.part.0+0xe>
 162:	e681                	bnez	a3,16a <mini_itoa.part.0+0xe>
		value = -value;
 164:	40a00533          	neg	a0,a0
		negative = 1;
 168:	4885                	li	a7,1
 16a:	06100793          	li	a5,97
 16e:	c219                	beqz	a2,174 <mini_itoa.part.0+0x18>
 170:	04100793          	li	a5,65
	int	negative = 0;
 174:	883a                	mv	a6,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 176:	4e25                	li	t3,9
 178:	ff678613          	addi	a2,a5,-10 # e000eff6 <_eusrstack+0xc0006ff6>
		int digit = value % radix;
 17c:	02b577b3          	remu	a5,a0,a1
 180:	832a                	mv	t1,a0
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 182:	0ff7f693          	andi	a3,a5,255
 186:	04fe6463          	bltu	t3,a5,1ce <mini_itoa.part.0+0x72>
 18a:	03068693          	addi	a3,a3,48
 18e:	0ff6f693          	andi	a3,a3,255
 192:	00d80023          	sb	a3,0(a6)
 196:	00180793          	addi	a5,a6,1
		value /= radix;
 19a:	02b55533          	divu	a0,a0,a1
	} while (value > 0);
 19e:	02b37663          	bgeu	t1,a1,1ca <mini_itoa.part.0+0x6e>
	if (negative)
 1a2:	00088863          	beqz	a7,1b2 <mini_itoa.part.0+0x56>
		*(pbuffer++) = '-';
 1a6:	02d00693          	li	a3,45
 1aa:	00d78023          	sb	a3,0(a5)
 1ae:	00280793          	addi	a5,a6,2
	len = (pbuffer - buffer);
 1b2:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
 1b6:	4609                	li	a2,2
	*(pbuffer) = '\0';
 1b8:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
 1bc:	4681                	li	a3,0
 1be:	02c54633          	div	a2,a0,a2
 1c2:	17fd                	addi	a5,a5,-1
 1c4:	00c6c763          	blt	a3,a2,1d2 <mini_itoa.part.0+0x76>
}
 1c8:	8082                	ret
	} while (value > 0);
 1ca:	883e                	mv	a6,a5
 1cc:	bf45                	j	17c <mini_itoa.part.0+0x20>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 1ce:	96b2                	add	a3,a3,a2
 1d0:	bf7d                	j	18e <mini_itoa.part.0+0x32>
		char j = buffer[i];
 1d2:	00d705b3          	add	a1,a4,a3
		buffer[i] = buffer[len-i-1];
 1d6:	0007c883          	lbu	a7,0(a5)
		char j = buffer[i];
 1da:	0005c803          	lbu	a6,0(a1)
	for (i = 0; i < len / 2; i++) {
 1de:	0685                	addi	a3,a3,1
		buffer[i] = buffer[len-i-1];
 1e0:	01158023          	sb	a7,0(a1)
		buffer[len-i-1] = j;
 1e4:	01078023          	sb	a6,0(a5)
	for (i = 0; i < len / 2; i++) {
 1e8:	bfe9                	j	1c2 <mini_itoa.part.0+0x66>

000001ea <DevSetMode>:
}

void DevSetMode(uint16_t mode) {
#if !defined(CH571_CH573)
	if(mode) {
		BB->CTRL_CFG = DEVSETMODE_ON;
 1ea:	4000c737          	lui	a4,0x4000c
 1ee:	10072783          	lw	a5,256(a4) # 4000c100 <_eusrstack+0x20004100>
 1f2:	e7f7f793          	andi	a5,a5,-385
	if(mode) {
 1f6:	c115                	beqz	a0,21a <DevSetMode+0x30>
		BB->CTRL_CFG = DEVSETMODE_ON;
 1f8:	1007e793          	ori	a5,a5,256
 1fc:	10f72023          	sw	a5,256(a4)
		RF->RF2 |= 0x330000;
 200:	4000d737          	lui	a4,0x4000d
 204:	471c                	lw	a5,8(a4)
 206:	003306b7          	lui	a3,0x330
 20a:	8fd5                	or	a5,a5,a3
 20c:	c71c                	sw	a5,8(a4)
	mode = (mode == 0) ? 0x80 : mode;
#elif !defined(CH32V208)
	mode |= 0x30000;
#endif
#endif // ! CH571_CH573
	LL->CTRL_MOD = mode;
 20e:	4000c7b7          	lui	a5,0x4000c
 212:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
 216:	cba8                	sw	a0,80(a5)
}
 218:	8082                	ret
		BB->CTRL_CFG = DEVSETMODE_OFF;
 21a:	0807e793          	ori	a5,a5,128
 21e:	10f72023          	sw	a5,256(a4) # 4000d100 <_eusrstack+0x20005100>
		RF->RF2 &= 0xffcdffff;
 222:	4000d6b7          	lui	a3,0x4000d
 226:	469c                	lw	a5,8(a3)
 228:	ffce0737          	lui	a4,0xffce0
 22c:	177d                	addi	a4,a4,-1
 22e:	8ff9                	and	a5,a5,a4
 230:	c69c                	sw	a5,8(a3)
	mode = (mode == 0) ? 0x80 : mode;
 232:	08000513          	li	a0,128
 236:	bfe1                	j	20e <DevSetMode+0x24>

00000238 <RFEND_TXCTune>:

uint32_t RFEND_TXCTune(uint8_t channel) {
	// 0xbf = 2401 MHz
	RF->RF1 &= 0xfffffffe;
 238:	4000d737          	lui	a4,0x4000d
 23c:	435c                	lw	a5,4(a4)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
 23e:	6685                	lui	a3,0x1
 240:	f4c68693          	addi	a3,a3,-180 # f4c <channel_map>
	RF->RF1 &= 0xfffffffe;
 244:	9bf9                	andi	a5,a5,-2
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
 246:	96aa                	add	a3,a3,a0
	RF->RF1 &= 0xfffffffe;
 248:	c35c                	sw	a5,4(a4)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xfffe00ff) | (0xbf00 + (channel_map[channel] << 8));
 24a:	0006c783          	lbu	a5,0(a3)
 24e:	66b1                	lui	a3,0xc
 250:	5f10                	lw	a2,56(a4)
 252:	f0068693          	addi	a3,a3,-256 # bf00 <iSLER_mess.c.1a5a8056+0x9c10>
 256:	07a2                	slli	a5,a5,0x8
 258:	97b6                	add	a5,a5,a3
 25a:	7681                	lui	a3,0xfffe0
 25c:	0ff68693          	addi	a3,a3,255 # fffe00ff <_eusrstack+0xdffd80ff>
 260:	8e75                	and	a2,a2,a3
 262:	8fd1                	or	a5,a5,a2
 264:	df1c                	sw	a5,56(a4)
	RF->RF1 |= 1;
 266:	435c                	lw	a5,4(a4)

	LL->TMR = 8000;
	while(!(RF->TXCTUNE_CO_CTRL & (1 << 25)) || !(RF->TXCTUNE_CO_CTRL & (1 << 26))) {
 268:	02000637          	lui	a2,0x2000
 26c:	040006b7          	lui	a3,0x4000
	RF->RF1 |= 1;
 270:	0017e793          	ori	a5,a5,1
 274:	c35c                	sw	a5,4(a4)
	LL->TMR = 8000;
 276:	4000c7b7          	lui	a5,0x4000c
 27a:	6709                	lui	a4,0x2
 27c:	f4070713          	addi	a4,a4,-192 # 1f40 <ch32fun.c.e0983271+0xb0b>
 280:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
 284:	d3f8                	sw	a4,100(a5)
		if(LL->TMR == 0) {
 286:	4000c5b7          	lui	a1,0x4000c
	while(!(RF->TXCTUNE_CO_CTRL & (1 << 25)) || !(RF->TXCTUNE_CO_CTRL & (1 << 26))) {
 28a:	4000d737          	lui	a4,0x4000d
 28e:	09072783          	lw	a5,144(a4) # 4000d090 <_eusrstack+0x20005090>
 292:	8ff1                	and	a5,a5,a2
 294:	c789                	beqz	a5,29e <RFEND_TXCTune+0x66>
 296:	09072783          	lw	a5,144(a4)
 29a:	8ff5                	and	a5,a5,a3
 29c:	e789                	bnez	a5,2a6 <RFEND_TXCTune+0x6e>
		if(LL->TMR == 0) {
 29e:	20058793          	addi	a5,a1,512 # 4000c200 <_eusrstack+0x20004200>
 2a2:	53fc                	lw	a5,100(a5)
 2a4:	f7ed                	bnez	a5,28e <RFEND_TXCTune+0x56>
			break;
		}
	}

	uint8_t nCO = (uint8_t)RF->TXCTUNE_CO_CTRL & 0x3f;
 2a6:	4000d7b7          	lui	a5,0x4000d
 2aa:	0907a503          	lw	a0,144(a5) # 4000d090 <_eusrstack+0x20005090>
	uint8_t nGA = (uint8_t)(RF->TXCTUNE_GA_CTRL >> 10) & 0x7f;
 2ae:	0947a783          	lw	a5,148(a5)

	// printf("nCO,nGA ch:%u idx:%u %u,%u\n", channel, channel_map[channel], nCO,nGA);

	return (nGA << 24) | nCO;
 2b2:	03f57513          	andi	a0,a0,63
	uint8_t nGA = (uint8_t)(RF->TXCTUNE_GA_CTRL >> 10) & 0x7f;
 2b6:	83a9                	srli	a5,a5,0xa
	return (nGA << 24) | nCO;
 2b8:	07f7f793          	andi	a5,a5,127
 2bc:	07e2                	slli	a5,a5,0x18
}
 2be:	8d5d                	or	a0,a0,a5
 2c0:	8082                	ret

000002c2 <blink>:

uint8_t hex_lut[] = "0123456789ABCDEF";
uint8_t dev_name[] = "ch32fun888";


void blink(int n) {
 2c2:	1101                	addi	sp,sp,-32
 2c4:	c84a                	sw	s2,16(sp)
	for(int i = n-1; i >= 0; i--) {
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
		Delay_Ms(33);
 2c6:	0003c937          	lui	s2,0x3c
void blink(int n) {
 2ca:	cc22                	sw	s0,24(sp)
 2cc:	ca26                	sw	s1,20(sp)
 2ce:	c64e                	sw	s3,12(sp)
 2d0:	ce06                	sw	ra,28(sp)
	for(int i = n-1; i >= 0; i--) {
 2d2:	fff50413          	addi	s0,a0,-1
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
 2d6:	400014b7          	lui	s1,0x40001
		Delay_Ms(33);
 2da:	6cc90913          	addi	s2,s2,1740 # 3c6cc <iSLER_mess.c.1a5a8056+0x3a3dc>
	for(int i = n-1; i >= 0; i--) {
 2de:	59fd                	li	s3,-1
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
 2e0:	0ac4a783          	lw	a5,172(s1) # 400010ac <_eusrstack+0x1fff90ac>
		Delay_Ms(33);
 2e4:	854a                	mv	a0,s2
		funDigitalWrite( LED, FUN_LOW ); // Turn on LED
 2e6:	1007e793          	ori	a5,a5,256
 2ea:	0af4a623          	sw	a5,172(s1)
		Delay_Ms(33);
 2ee:	3d35                	jal	12a <DelaySysTick>
		funDigitalWrite( LED, FUN_HIGH ); // Turn off LED
 2f0:	0a84a783          	lw	a5,168(s1)
 2f4:	1007e793          	ori	a5,a5,256
 2f8:	0af4a423          	sw	a5,168(s1)
		if(i) Delay_Ms(33);
 2fc:	c019                	beqz	s0,302 <blink+0x40>
 2fe:	854a                	mv	a0,s2
 300:	352d                	jal	12a <DelaySysTick>
	for(int i = n-1; i >= 0; i--) {
 302:	147d                	addi	s0,s0,-1
 304:	fd341ee3          	bne	s0,s3,2e0 <blink+0x1e>
	}
}
 308:	40f2                	lw	ra,28(sp)
 30a:	4462                	lw	s0,24(sp)
 30c:	44d2                	lw	s1,20(sp)
 30e:	4942                	lw	s2,16(sp)
 310:	49b2                	lw	s3,12(sp)
 312:	6105                	addi	sp,sp,32
 314:	8082                	ret

00000316 <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
 316:	e00007b7          	lui	a5,0xe0000
 31a:	3807a783          	lw	a5,896(a5) # e0000380 <_eusrstack+0xbfff8380>
}
 31e:	8082                	ret

00000320 <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
 320:	e0000737          	lui	a4,0xe0000
 324:	38072783          	lw	a5,896(a4) # e0000380 <_eusrstack+0xbfff8380>
WEAK int _write(int fd, const char *buf, int size)
 328:	7139                	addi	sp,sp,-64
 32a:	de06                	sw	ra,60(sp)
 32c:	dc22                	sw	s0,56(sp)
 32e:	da26                	sw	s1,52(sp)
 330:	d84a                	sw	s2,48(sp)
 332:	d64e                	sw	s3,44(sp)
 334:	d452                	sw	s4,40(sp)
 336:	d256                	sw	s5,36(sp)
 338:	d05a                	sw	s6,32(sp)
 33a:	ce5e                	sw	s7,28(sp)
 33c:	cc62                	sw	s8,24(sp)
 33e:	ca66                	sw	s9,20(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
 340:	0c07f793          	andi	a5,a5,192
 344:	0c000693          	li	a3,192
 348:	0ad78a63          	beq	a5,a3,3fc <_write.constprop.0+0xdc>
	char buffer[4] = { 0 };
 34c:	c602                	sw	zero,12(sp)
 34e:	842e                	mv	s0,a1
	if( size == 0 )
 350:	e9c5                	bnez	a1,400 <_write.constprop.0+0xe0>
		lastdmd = (*DMDATA0);
 352:	38072783          	lw	a5,896(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
 356:	c789                	beqz	a5,360 <_write.constprop.0+0x40>
 358:	0807f793          	andi	a5,a5,128
 35c:	e391                	bnez	a5,360 <_write.constprop.0+0x40>
 35e:	3f65                	jal	316 <internal_handle_input.constprop.0>
}
 360:	50f2                	lw	ra,60(sp)
 362:	8522                	mv	a0,s0
 364:	5462                	lw	s0,56(sp)
 366:	54d2                	lw	s1,52(sp)
 368:	5942                	lw	s2,48(sp)
 36a:	59b2                	lw	s3,44(sp)
 36c:	5a22                	lw	s4,40(sp)
 36e:	5a92                	lw	s5,36(sp)
 370:	5b02                	lw	s6,32(sp)
 372:	4bf2                	lw	s7,28(sp)
 374:	4c62                	lw	s8,24(sp)
 376:	4cd2                	lw	s9,20(sp)
 378:	6121                	addi	sp,sp,64
 37a:	8082                	ret
		int tosend = size - place;
 37c:	40940cb3          	sub	s9,s0,s1
 380:	8966                	mv	s2,s9
 382:	019ad363          	bge	s5,s9,388 <_write.constprop.0+0x68>
 386:	491d                	li	s2,7
 388:	001b0793          	addi	a5,s6,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
 38c:	380a2703          	lw	a4,896(s4)
 390:	380a0693          	addi	a3,s4,896
 394:	08077613          	andi	a2,a4,128
 398:	ee21                	bnez	a2,3f0 <_write.constprop.0+0xd0>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
 39a:	c311                	beqz	a4,39e <_write.constprop.0+0x7e>
 39c:	3fad                	jal	316 <internal_handle_input.constprop.0>
			buffer[t-3] = buf[t+place];
 39e:	4601                	li	a2,0
 3a0:	019bd463          	bge	s7,s9,3a8 <_write.constprop.0+0x88>
 3a4:	ffd90613          	addi	a2,s2,-3
 3a8:	00348593          	addi	a1,s1,3
 3ac:	95ce                	add	a1,a1,s3
 3ae:	0068                	addi	a0,sp,12
 3b0:	2619                	jal	6b6 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
 3b2:	47b2                	lw	a5,12(sp)
 3b4:	00998733          	add	a4,s3,s1
 3b8:	38fa2223          	sw	a5,900(s4)
		t = 0;
 3bc:	4781                	li	a5,0
			buffer[t+1] = buf[t+place];
 3be:	00074603          	lbu	a2,0(a4)
 3c2:	0785                	addi	a5,a5,1
 3c4:	0074                	addi	a3,sp,12
 3c6:	96be                	add	a3,a3,a5
 3c8:	00c68023          	sb	a2,0(a3) # 4000000 <iSLER_mess.c.1a5a8056+0x3ffdd10>
		while( t < tosend && t < 3 )
 3cc:	00f90563          	beq	s2,a5,3d6 <_write.constprop.0+0xb6>
 3d0:	0705                	addi	a4,a4,1
 3d2:	ff8796e3          	bne	a5,s8,3be <_write.constprop.0+0x9e>
		buffer[0] = 0x80 | (tosend + 4);
 3d6:	00490793          	addi	a5,s2,4
 3da:	f807e793          	ori	a5,a5,-128
 3de:	00f10623          	sb	a5,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
 3e2:	47b2                	lw	a5,12(sp)
		place += tosend;
 3e4:	94ca                	add	s1,s1,s2
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
 3e6:	38fa2023          	sw	a5,896(s4)
	while( place < size )
 3ea:	f884c9e3          	blt	s1,s0,37c <_write.constprop.0+0x5c>
 3ee:	bf8d                	j	360 <_write.constprop.0+0x40>
			if( timeout-- == 0 )
 3f0:	17fd                	addi	a5,a5,-1
 3f2:	ffc9                	bnez	a5,38c <_write.constprop.0+0x6c>
				*DMDATA0 |= 0xc0;
 3f4:	429c                	lw	a5,0(a3)
 3f6:	0c07e793          	ori	a5,a5,192
 3fa:	c29c                	sw	a5,0(a3)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
 3fc:	4401                	li	s0,0
 3fe:	b78d                	j	360 <_write.constprop.0+0x40>
 400:	89aa                	mv	s3,a0
	if( size == 0 )
 402:	4481                	li	s1,0
 404:	4a9d                	li	s5,7
		int tosend = size - place;
 406:	00100b37          	lui	s6,0x100
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
 40a:	e0000a37          	lui	s4,0xe0000
			buffer[t-3] = buf[t+place];
 40e:	4b89                	li	s7,2
		while( t < tosend && t < 3 )
 410:	4c0d                	li	s8,3
 412:	bfe1                	j	3ea <_write.constprop.0+0xca>

00000414 <__puts_uart>:
{
 414:	1141                	addi	sp,sp,-16
 416:	c422                	sw	s0,8(sp)
 418:	c606                	sw	ra,12(sp)
 41a:	842e                	mv	s0,a1
	_write( 0, s, len );
 41c:	3711                	jal	320 <_write.constprop.0>
}
 41e:	40b2                	lw	ra,12(sp)
 420:	8522                	mv	a0,s0
 422:	4422                	lw	s0,8(sp)
 424:	0141                	addi	sp,sp,16
 426:	8082                	ret

00000428 <handle_reset>:
	asm volatile( "\n\
 428:	20000197          	auipc	gp,0x20000
 42c:	fd418193          	addi	gp,gp,-44 # 200003fc <__global_pointer$>
 430:	20008117          	auipc	sp,0x20008
 434:	bd010113          	addi	sp,sp,-1072 # 20008000 <_eusrstack>
	asm volatile(
 438:	c0818513          	addi	a0,gp,-1016 # 20000004 <rx_ready>
 43c:	05418593          	addi	a1,gp,84 # 20000450 <_ebss>
 440:	00b57763          	bgeu	a0,a1,44e <handle_reset+0x26>
 444:	00052023          	sw	zero,0(a0)
 448:	0511                	addi	a0,a0,4
 44a:	feb56de3          	bltu	a0,a1,444 <handle_reset+0x1c>
 44e:	00001517          	auipc	a0,0x1
 452:	b2650513          	addi	a0,a0,-1242 # f74 <_data_lma>
 456:	c0418593          	addi	a1,gp,-1020 # 20000000 <adv_channels>
 45a:	c0818613          	addi	a2,gp,-1016 # 20000004 <rx_ready>
 45e:	00c58a63          	beq	a1,a2,472 <handle_reset+0x4a>
 462:	00052283          	lw	t0,0(a0)
 466:	0055a023          	sw	t0,0(a1)
 46a:	0511                	addi	a0,a0,4
 46c:	0591                	addi	a1,a1,4
 46e:	fec5eae3          	bltu	a1,a2,462 <handle_reset+0x3a>
	asm volatile(
 472:	00000793          	li	a5,0
 476:	42fd                	li	t0,31
 478:	bc029073          	csrw	0xbc0,t0
 47c:	6289                	lui	t0,0x2
 47e:	88828293          	addi	t0,t0,-1912 # 1888 <ch32fun.c.e0983271+0x453>
 482:	3002a073          	csrs	mstatus,t0
 486:	00000297          	auipc	t0,0x0
 48a:	b7a28293          	addi	t0,t0,-1158 # 0 <InterruptVector>
 48e:	0032e293          	ori	t0,t0,3
 492:	30529073          	csrw	mtvec,t0
	SysTick->CTLR = 1;
 496:	e000f7b7          	lui	a5,0xe000f
 49a:	4705                	li	a4,1
 49c:	c398                	sw	a4,0(a5)
	asm volatile(
 49e:	6785                	lui	a5,0x1
 4a0:	97878793          	addi	a5,a5,-1672 # 978 <main>
 4a4:	34179073          	csrw	mepc,a5
 4a8:	30200073          	mret

000004ac <ADC1_2_IRQHandler>:
	asm volatile( "1: j 1b" );
 4ac:	a001                	j	4ac <ADC1_2_IRQHandler>

000004ae <strlen>:
{
 4ae:	87aa                	mv	a5,a0
	for (; *s; s++);
 4b0:	0007c703          	lbu	a4,0(a5)
 4b4:	e701                	bnez	a4,4bc <strlen+0xe>
}
 4b6:	40a78533          	sub	a0,a5,a0
 4ba:	8082                	ret
	for (; *s; s++);
 4bc:	0785                	addi	a5,a5,1
 4be:	bfcd                	j	4b0 <strlen+0x2>

000004c0 <mini_vpprintf>:
{
 4c0:	7159                	addi	sp,sp,-112
 4c2:	d4a2                	sw	s0,104(sp)
 4c4:	d2a6                	sw	s1,100(sp)
 4c6:	d0ca                	sw	s2,96(sp)
 4c8:	cece                	sw	s3,92(sp)
 4ca:	ccd2                	sw	s4,88(sp)
 4cc:	cad6                	sw	s5,84(sp)
 4ce:	c6de                	sw	s7,76(sp)
 4d0:	d686                	sw	ra,108(sp)
 4d2:	c8da                	sw	s6,80(sp)
 4d4:	c4e2                	sw	s8,72(sp)
 4d6:	c2e6                	sw	s9,68(sp)
 4d8:	c0ea                	sw	s10,64(sp)
 4da:	84aa                	mv	s1,a0
 4dc:	892e                	mv	s2,a1
 4de:	8432                	mv	s0,a2
 4e0:	8bb6                	mv	s7,a3
	int n = 0;
 4e2:	4981                	li	s3,0
		if (ch!='%') {
 4e4:	02500a13          	li	s4,37
				pad_to = pad_to * 10 + (ch - '0');
 4e8:	4aa9                	li	s5,10
	while ((ch=*(fmt++))) {
 4ea:	00044783          	lbu	a5,0(s0)
 4ee:	00140c13          	addi	s8,s0,1
 4f2:	00f107a3          	sb	a5,15(sp)
 4f6:	e385                	bnez	a5,516 <mini_vpprintf+0x56>
}
 4f8:	50b6                	lw	ra,108(sp)
 4fa:	5426                	lw	s0,104(sp)
 4fc:	5496                	lw	s1,100(sp)
 4fe:	5906                	lw	s2,96(sp)
 500:	4a66                	lw	s4,88(sp)
 502:	4ad6                	lw	s5,84(sp)
 504:	4b46                	lw	s6,80(sp)
 506:	4bb6                	lw	s7,76(sp)
 508:	4c26                	lw	s8,72(sp)
 50a:	4c96                	lw	s9,68(sp)
 50c:	4d06                	lw	s10,64(sp)
 50e:	854e                	mv	a0,s3
 510:	49f6                	lw	s3,92(sp)
 512:	6165                	addi	sp,sp,112
 514:	8082                	ret
		if (ch!='%') {
 516:	01478c63          	beq	a5,s4,52e <mini_vpprintf+0x6e>
			len = puts(&ch, len, buf);
 51a:	864a                	mv	a2,s2
 51c:	4585                	li	a1,1
 51e:	00f10513          	addi	a0,sp,15
 522:	9482                	jalr	s1
 524:	8b5e                	mv	s6,s7
	while ((ch=*(fmt++))) {
 526:	8462                	mv	s0,s8
		n = n + len;
 528:	99aa                	add	s3,s3,a0
 52a:	8bda                	mv	s7,s6
 52c:	bf7d                	j	4ea <mini_vpprintf+0x2a>
			ch=*(fmt++);
 52e:	00144783          	lbu	a5,1(s0)
			if (ch == '0') pad_char = '0';
 532:	03000693          	li	a3,48
			ch=*(fmt++);
 536:	00240713          	addi	a4,s0,2
 53a:	00f107a3          	sb	a5,15(sp)
			if (ch == '0') pad_char = '0';
 53e:	03000c13          	li	s8,48
 542:	06d79f63          	bne	a5,a3,5c0 <mini_vpprintf+0x100>
				ch=*(fmt++);
 546:	843a                	mv	s0,a4
 548:	4d01                	li	s10,0
 54a:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
 54c:	4625                	li	a2,9
 54e:	a801                	j	55e <mini_vpprintf+0x9e>
				pad_to = pad_to * 10 + (ch - '0');
 550:	035d0d33          	mul	s10,s10,s5
				ch=*(fmt++);
 554:	00044783          	lbu	a5,0(s0)
 558:	0405                	addi	s0,s0,1
 55a:	4705                	li	a4,1
				pad_to = pad_to * 10 + (ch - '0');
 55c:	9d36                	add	s10,s10,a3
			while (ch >= '0' && ch <= '9') {
 55e:	fd078693          	addi	a3,a5,-48
 562:	0ff6f593          	andi	a1,a3,255
 566:	feb675e3          	bgeu	a2,a1,550 <mini_vpprintf+0x90>
 56a:	c319                	beqz	a4,570 <mini_vpprintf+0xb0>
 56c:	00f107a3          	sb	a5,15(sp)
			if(pad_to > (signed int) sizeof(bf)) {
 570:	4761                	li	a4,24
 572:	8cea                	mv	s9,s10
 574:	01a75363          	bge	a4,s10,57a <mini_vpprintf+0xba>
 578:	4ce1                	li	s9,24
			if (ch == 'l') {
 57a:	06c00693          	li	a3,108
			char l = 0;
 57e:	4701                	li	a4,0
			if (ch == 'l') {
 580:	00d79863          	bne	a5,a3,590 <mini_vpprintf+0xd0>
				ch=*(fmt++);
 584:	00044783          	lbu	a5,0(s0)
				l = 1;
 588:	4705                	li	a4,1
				ch=*(fmt++);
 58a:	0405                	addi	s0,s0,1
 58c:	00f107a3          	sb	a5,15(sp)
			switch (ch) {
 590:	00f14683          	lbu	a3,15(sp)
 594:	06400793          	li	a5,100
 598:	06f68163          	beq	a3,a5,5fa <mini_vpprintf+0x13a>
 59c:	02d7e563          	bltu	a5,a3,5c6 <mini_vpprintf+0x106>
 5a0:	05800793          	li	a5,88
 5a4:	08f68c63          	beq	a3,a5,63c <mini_vpprintf+0x17c>
 5a8:	06300793          	li	a5,99
 5ac:	0af68963          	beq	a3,a5,65e <mini_vpprintf+0x19e>
 5b0:	d6a1                	beqz	a3,4f8 <mini_vpprintf+0x38>
					len = puts(&ch, len, buf);
 5b2:	864a                	mv	a2,s2
 5b4:	4585                	li	a1,1
 5b6:	00f10513          	addi	a0,sp,15
 5ba:	9482                	jalr	s1
 5bc:	8b5e                	mv	s6,s7
 5be:	b7ad                	j	528 <mini_vpprintf+0x68>
			char pad_char = ' ';
 5c0:	02000c13          	li	s8,32
 5c4:	b749                	j	546 <mini_vpprintf+0x86>
			switch (ch) {
 5c6:	07500793          	li	a5,117
 5ca:	02f68863          	beq	a3,a5,5fa <mini_vpprintf+0x13a>
 5ce:	07800793          	li	a5,120
 5d2:	06f68563          	beq	a3,a5,63c <mini_vpprintf+0x17c>
 5d6:	07300793          	li	a5,115
 5da:	fcf69ce3          	bne	a3,a5,5b2 <mini_vpprintf+0xf2>
					ptr = va_arg(va, char*);
 5de:	004b8b13          	addi	s6,s7,4
 5e2:	000bab83          	lw	s7,0(s7)
					len = mini_strlen(ptr);
 5e6:	855e                	mv	a0,s7
 5e8:	35d9                	jal	4ae <strlen>
 5ea:	85aa                	mv	a1,a0
					if (pad_to > 0) {
 5ec:	080d0663          	beqz	s10,678 <mini_vpprintf+0x1b8>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
 5f0:	1038                	addi	a4,sp,40
 5f2:	86e6                	mv	a3,s9
 5f4:	8662                	mv	a2,s8
 5f6:	855e                	mv	a0,s7
 5f8:	a01d                	j	61e <mini_vpprintf+0x15e>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 5fa:	004b8b13          	addi	s6,s7,4
					if(l) {
 5fe:	c715                	beqz	a4,62a <mini_vpprintf+0x16a>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 600:	f8b68693          	addi	a3,a3,-117
 604:	0818                	addi	a4,sp,16
 606:	0016b693          	seqz	a3,a3
 60a:	000ba503          	lw	a0,0(s7)
 60e:	4601                	li	a2,0
 610:	45a9                	li	a1,10
 612:	36a9                	jal	15c <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 614:	1038                	addi	a4,sp,40
 616:	86e6                	mv	a3,s9
 618:	8662                	mv	a2,s8
 61a:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 61c:	0808                	addi	a0,sp,16
 61e:	3c8d                	jal	90 <mini_pad>
 620:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
 622:	864a                	mv	a2,s2
 624:	1028                	addi	a0,sp,40
 626:	9482                	jalr	s1
					break;
 628:	b701                	j	528 <mini_vpprintf+0x68>
						if(ch == 'u') {
 62a:	07500793          	li	a5,117
 62e:	0818                	addi	a4,sp,16
 630:	00f69463          	bne	a3,a5,638 <mini_vpprintf+0x178>
	if (radix > 16)
 634:	4685                	li	a3,1
 636:	bfd1                	j	60a <mini_vpprintf+0x14a>
 638:	4681                	li	a3,0
 63a:	bfc1                	j	60a <mini_vpprintf+0x14a>
					if(l) {
 63c:	000ba503          	lw	a0,0(s7)
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
 640:	fa868613          	addi	a2,a3,-88
 644:	0818                	addi	a4,sp,16
 646:	4685                	li	a3,1
 648:	00163613          	seqz	a2,a2
 64c:	45c1                	li	a1,16
 64e:	3639                	jal	15c <mini_itoa.part.0>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 650:	004b8b13          	addi	s6,s7,4
	if (radix > 16)
 654:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 656:	1038                	addi	a4,sp,40
 658:	86e6                	mv	a3,s9
 65a:	8662                	mv	a2,s8
 65c:	b7c1                	j	61c <mini_vpprintf+0x15c>
					ch = (char)(va_arg(va, int));
 65e:	000ba783          	lw	a5,0(s7)
 662:	004b8b13          	addi	s6,s7,4
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
 666:	1038                	addi	a4,sp,40
					ch = (char)(va_arg(va, int));
 668:	00f107a3          	sb	a5,15(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
 66c:	86e6                	mv	a3,s9
 66e:	8662                	mv	a2,s8
 670:	4585                	li	a1,1
 672:	00f10513          	addi	a0,sp,15
 676:	b765                	j	61e <mini_vpprintf+0x15e>
						len = puts(ptr, len, buf);
 678:	864a                	mv	a2,s2
 67a:	855e                	mv	a0,s7
 67c:	b76d                	j	626 <mini_vpprintf+0x166>

0000067e <printf>:
{
 67e:	7139                	addi	sp,sp,-64
 680:	d432                	sw	a2,40(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 682:	862a                	mv	a2,a0
{
 684:	d22e                	sw	a1,36(sp)
 686:	d636                	sw	a3,44(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 688:	4581                	li	a1,0
	va_start( args, format );
 68a:	1054                	addi	a3,sp,36
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 68c:	41400513          	li	a0,1044
{
 690:	ce06                	sw	ra,28(sp)
 692:	d83a                	sw	a4,48(sp)
 694:	da3e                	sw	a5,52(sp)
 696:	dc42                	sw	a6,56(sp)
 698:	de46                	sw	a7,60(sp)
	va_start( args, format );
 69a:	c636                	sw	a3,12(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 69c:	3515                	jal	4c0 <mini_vpprintf>
}
 69e:	40f2                	lw	ra,28(sp)
 6a0:	6121                	addi	sp,sp,64
 6a2:	8082                	ret

000006a4 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
 6a4:	962a                	add	a2,a2,a0
 6a6:	87aa                	mv	a5,a0
 6a8:	00c79363          	bne	a5,a2,6ae <memset+0xa>
 6ac:	8082                	ret
 6ae:	00b78023          	sb	a1,0(a5)
 6b2:	0785                	addi	a5,a5,1
 6b4:	bfd5                	j	6a8 <memset+0x4>

000006b6 <memcpy>:
{
 6b6:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
 6b8:	00f61363          	bne	a2,a5,6be <memcpy+0x8>
}
 6bc:	8082                	ret
	for (; n; n--) *d++ = *s++;
 6be:	00f58733          	add	a4,a1,a5
 6c2:	00074683          	lbu	a3,0(a4)
 6c6:	00f50733          	add	a4,a0,a5
 6ca:	0785                	addi	a5,a5,1
 6cc:	00d70023          	sb	a3,0(a4)
 6d0:	b7e5                	j	6b8 <memcpy+0x2>

000006d2 <send_adv_data.constprop.0>:

void send_adv_data(uint8_t *data, size_t data_len) {
 6d2:	710d                	addi	sp,sp,-352
 6d4:	14112e23          	sw	ra,348(sp)
 6d8:	14812c23          	sw	s0,344(sp)
 6dc:	14912a23          	sw	s1,340(sp)
 6e0:	1280                	addi	s0,sp,352
 6e2:	15312623          	sw	s3,332(sp)
 6e6:	15412423          	sw	s4,328(sp)
 6ea:	15512223          	sw	s5,324(sp)
 6ee:	15612023          	sw	s6,320(sp)
 6f2:	13712e23          	sw	s7,316(sp)
 6f6:	13812c23          	sw	s8,312(sp)
 6fa:	13912a23          	sw	s9,308(sp)
 6fe:	13b12623          	sw	s11,300(sp)
 702:	15212823          	sw	s2,336(sp)
 706:	13a12823          	sw	s10,304(sp)
 70a:	84aa                	mv	s1,a0
	if (!REPORT_ALL) return;
	blink(1);
 70c:	4505                	li	a0,1
 70e:	3e55                	jal	2c2 <blink>

	uint8_t adv_data[MAX_PACKET_LEN];

	uint8_t dev_header[] = {
 710:	6585                	lui	a1,0x1
 712:	462d                	li	a2,11
 714:	f0858593          	addi	a1,a1,-248 # f08 <LLE_IRQHandler+0xba>
 718:	eb440513          	addi	a0,s0,-332
 71c:	3f69                	jal	6b6 <memcpy>
	};

	size_t adv_len = 0;

	//! copy from dev_header
	memcpy(&adv_data[adv_len], dev_header, sizeof(dev_header));
 71e:	462d                	li	a2,11
 720:	eb440593          	addi	a1,s0,-332
 724:	ec040513          	addi	a0,s0,-320
 728:	3779                	jal	6b6 <memcpy>
	adv_len += sizeof(dev_header);

	//! copy from dev_name
	memcpy(&adv_data[adv_len], dev_name, sizeof(dev_name));
 72a:	6585                	lui	a1,0x1
 72c:	462d                	li	a2,11
 72e:	f1458593          	addi	a1,a1,-236 # f14 <LLE_IRQHandler+0xc6>
 732:	ecb40513          	addi	a0,s0,-309
 736:	3741                	jal	6b6 <memcpy>
		data_len + 3, 			// Length: including the AD Type and Company ID bytes
		0xFF, 						// AD Type: Manufacturer Data
		0xD7, 0x07, 				// Company ID (WCH)
	};

	memcpy(&adv_data[adv_len], data_header, sizeof(data_header));
 738:	f1500793          	li	a5,-235
	adv_len += sizeof(data_header);

	//! copy from data
	memcpy(&adv_data[adv_len], data, data_len);
 73c:	85a6                	mv	a1,s1
	memcpy(&adv_data[adv_len], data_header, sizeof(data_header));
 73e:	ecf41b23          	sh	a5,-298(s0)
	memcpy(&adv_data[adv_len], data, data_len);
 742:	4649                	li	a2,18
	memcpy(&adv_data[adv_len], data_header, sizeof(data_header));
 744:	7d700793          	li	a5,2007
	memcpy(&adv_data[adv_len], data, data_len);
 748:	eda40513          	addi	a0,s0,-294
	memcpy(&adv_data[adv_len], data_header, sizeof(data_header));
 74c:	ecf41c23          	sh	a5,-296(s0)
	memcpy(&adv_data[adv_len], data, data_len);
 750:	379d                	jal	6b6 <memcpy>
	adv_len += data_len;

	printf("adv len: %d\n", adv_len);
 752:	6505                	lui	a0,0x1
 754:	02c00593          	li	a1,44
 758:	ef850513          	addi	a0,a0,-264 # ef8 <LLE_IRQHandler+0xaa>

	// Uncomment to disable whitening to debug RF.
	//BB->CTRL_CFG |= (1<<6);
	DevSetMode(DEVSETMODE_TX);

	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
 75c:	8e89ca37          	lui	s4,0x8e89c
	BB->CRCINIT1 = 0x555555; // crc init
 760:	00555ab7          	lui	s5,0x555
	BB->CRCPOLY1 = (BB->CRCPOLY1 & 0xff000000) | 0x80032d; // crc poly
	BB->CRCPOLY2 = (BB->CRCPOLY2 & 0xff000000) | 0x80032d;
#endif
	// LL->LL1 = (LL->LL1 & 0xfffffffe) | 1; // The "| 1" is for AUTO mode, to swap between RX <-> TX when either happened

	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
 764:	6b0d                	lui	s6,0x3

#if defined(CH582_CH583) || defined(CH32V208)
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
				   (phy_mode == PHY_S2) ? CTRL_CFG_PHY_CODED:
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
										  CTRL_CFG_PHY_1M; // default 1M for now
 766:	7bc5                	lui	s7,0xffff1
#if defined(CH571_CH573)
	BB->BB11 = (BB->BB11 & 0xfffffffc); // |2 for RX
#endif

	// This clears bit 17 (If set, seems to have no impact.)
	LL->LL4 &= 0xfffdffff;
 768:	7c01                	lui	s8,0xfffe0

#if !defined(CH571_CH573)
	LL->STATUS = LL_STATUS_TX;
#endif
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
 76a:	6c99                	lui	s9,0x6
 76c:	3f09                	jal	67e <printf>

	for(int c = 0; c < sizeof(adv_channels); c++) {
 76e:	4d81                	li	s11,0
		Frame_TX(adv_data, adv_len, adv_channels[c], PHY_MODE);
 770:	c0418993          	addi	s3,gp,-1020 # 20000000 <adv_channels>
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
 774:	4000c4b7          	lui	s1,0x4000c
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
 778:	ed6a0a13          	addi	s4,s4,-298 # 8e89bed6 <_eusrstack+0x6e893ed6>
	BB->CRCINIT1 = 0x555555; // crc init
 77c:	555a8a93          	addi	s5,s5,1365 # 555555 <iSLER_mess.c.1a5a8056+0x553265>
	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
 780:	c02b0b13          	addi	s6,s6,-1022 # 2c02 <iSLER_mess.c.1a5a8056+0x912>
										  CTRL_CFG_PHY_1M; // default 1M for now
 784:	1bfd                	addi	s7,s7,-1
	LL->LL4 &= 0xfffdffff;
 786:	1c7d                	addi	s8,s8,-1
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
 788:	800c8c93          	addi	s9,s9,-2048 # 5800 <iSLER_mess.c.1a5a8056+0x3510>
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
 78c:	12c4a703          	lw	a4,300(s1) # 4000c12c <_eusrstack+0x2000412c>
void Frame_TX(uint8_t adv[], size_t len, uint8_t channel, uint8_t phy_mode) {
 790:	ea242623          	sw	sp,-340(s0)
 794:	01b987b3          	add	a5,s3,s11
	BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
 798:	9b71                	andi	a4,a4,-4
 79a:	00176713          	ori	a4,a4,1
 79e:	0007c603          	lbu	a2,0(a5)
 7a2:	12e4a623          	sw	a4,300(s1)
	RF->RF11 &= 0xfffffffd;
 7a6:	4000d737          	lui	a4,0x4000d
 7aa:	575c                	lw	a5,44(a4)
	__attribute__((aligned(4))) uint8_t  ADV_BUF[len+2]; // for the advertisement, which is 37 bytes + 2 header bytes
 7ac:	7179                	addi	sp,sp,-48
	DevSetMode(DEVSETMODE_TX);
 7ae:	0da00513          	li	a0,218
	RF->RF11 &= 0xfffffffd;
 7b2:	9bf5                	andi	a5,a5,-3
 7b4:	d75c                	sw	a5,44(a4)
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
 7b6:	1004a783          	lw	a5,256(s1)
 7ba:	07f67713          	andi	a4,a2,127
	__attribute__((aligned(4))) uint8_t  ADV_BUF[len+2]; // for the advertisement, which is 37 bytes + 2 header bytes
 7be:	8d0a                	mv	s10,sp
	BB->CTRL_CFG = (BB->CTRL_CFG & 0xffffff80) | (channel & 0x7f);
 7c0:	f807f793          	andi	a5,a5,-128
 7c4:	8fd9                	or	a5,a5,a4
 7c6:	10f4a023          	sw	a5,256(s1)
	DevSetMode(DEVSETMODE_TX);
 7ca:	3405                	jal	1ea <DevSetMode>
	BB->ACCESSADDRESS1 = 0x8E89BED6; // access address
 7cc:	1144a423          	sw	s4,264(s1)
	BB->CRCINIT1 = 0x555555; // crc init
 7d0:	1154a223          	sw	s5,260(s1)
	memcpy(&ADV_BUF[2], adv, len);
 7d4:	02c00613          	li	a2,44
	ADV_BUF[0] = 0x02; // PDU 0x00, 0x02, 0x06 seem to work, with only 0x02 showing up on the phone
 7d8:	016d1023          	sh	s6,0(s10)
	memcpy(&ADV_BUF[2], adv, len);
 7dc:	ec040593          	addi	a1,s0,-320
 7e0:	002d0513          	addi	a0,s10,2
 7e4:	3dc9                	jal	6b6 <memcpy>
	LL->FRAME_BUF = (uint32_t)ADV_BUF;
 7e6:	20048793          	addi	a5,s1,512
 7ea:	07a7a823          	sw	s10,112(a5)
 7ee:	6785                	lui	a5,0x1
 7f0:	bba78793          	addi	a5,a5,-1094 # bba <main+0x242>
	for( int timeout = 3000; !(RF->RF26 & 0x1000000) && timeout >= 0; timeout-- );
 7f4:	4000d6b7          	lui	a3,0x4000d
 7f8:	01000637          	lui	a2,0x1000
 7fc:	56b8                	lw	a4,104(a3)
 7fe:	8f71                	and	a4,a4,a2
 800:	e319                	bnez	a4,806 <send_adv_data.constprop.0+0x134>
 802:	17fd                	addi	a5,a5,-1
 804:	ffe5                	bnez	a5,7fc <send_adv_data.constprop.0+0x12a>
										  CTRL_CFG_PHY_1M; // default 1M for now
 806:	1004a783          	lw	a5,256(s1)
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
 80a:	6705                	lui	a4,0x1
										  CTRL_CFG_PHY_1M; // default 1M for now
 80c:	10048693          	addi	a3,s1,256
 810:	0177f7b3          	and	a5,a5,s7
				   (phy_mode == PHY_S8) ? CTRL_CFG_PHY_CODED:
 814:	8fd9                	or	a5,a5,a4
	BB->CTRL_CFG = (phy_mode == PHY_2M) ? CTRL_CFG_PHY_2M:
 816:	10f4a023          	sw	a5,256(s1)
	LL->LL4 &= 0xfffdffff;
 81a:	20048793          	addi	a5,s1,512
 81e:	4b98                	lw	a4,16(a5)
 820:	01877733          	and	a4,a4,s8
 824:	cb98                	sw	a4,16(a5)
	LL->STATUS = LL_STATUS_TX;
 826:	6709                	lui	a4,0x2
 828:	c798                	sw	a4,8(a5)
	LL->TMR = (uint32_t)(len *512); // needs optimisation, per phy mode
 82a:	0797a223          	sw	s9,100(a5)

	BB->CTRL_CFG |= CTRL_CFG_START_TX;
 82e:	1004a783          	lw	a5,256(s1)
 832:	00800737          	lui	a4,0x800
 836:	8fd9                	or	a5,a5,a4
 838:	10f4a023          	sw	a5,256(s1)
	BB->CTRL_TX &= 0xfffffffc;
 83c:	56dc                	lw	a5,44(a3)
 83e:	9bf1                	andi	a5,a5,-4
 840:	d6dc                	sw	a5,44(a3)

	LL->LL0 = 2; // Not sure what this does, but on RX it's 1
 842:	4789                	li	a5,2
 844:	20f4a023          	sw	a5,512(s1)

	while(LL->TMR); // wait for tx buffer to empty
 848:	2644a783          	lw	a5,612(s1)
 84c:	fff5                	bnez	a5,848 <send_adv_data.constprop.0+0x176>
	DevSetMode(0);
 84e:	4501                	li	a0,0
 850:	3a69                	jal	1ea <DevSetMode>
	if(LL->LL0 & 3) {
 852:	2004a783          	lw	a5,512(s1)
 856:	8b8d                	andi	a5,a5,3
 858:	cf81                	beqz	a5,870 <send_adv_data.constprop.0+0x19e>
		LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
 85a:	2504a783          	lw	a5,592(s1)
 85e:	9be1                	andi	a5,a5,-8
 860:	24f4a823          	sw	a5,592(s1)
		LL->LL0 |= 0x08;
 864:	2004a783          	lw	a5,512(s1)
 868:	0087e793          	ori	a5,a5,8
 86c:	20f4a023          	sw	a5,512(s1)
	for(int c = 0; c < sizeof(adv_channels); c++) {
 870:	0d85                	addi	s11,s11,1
 872:	478d                	li	a5,3
 874:	eac42103          	lw	sp,-340(s0)
 878:	f0fd9ae3          	bne	s11,a5,78c <send_adv_data.constprop.0+0xba>
	}
}
 87c:	ea040113          	addi	sp,s0,-352
 880:	15c12083          	lw	ra,348(sp)
 884:	15812403          	lw	s0,344(sp)
 888:	15412483          	lw	s1,340(sp)
 88c:	15012903          	lw	s2,336(sp)
 890:	14c12983          	lw	s3,332(sp)
 894:	14812a03          	lw	s4,328(sp)
 898:	14412a83          	lw	s5,324(sp)
 89c:	14012b03          	lw	s6,320(sp)
 8a0:	13c12b83          	lw	s7,316(sp)
 8a4:	13812c03          	lw	s8,312(sp)
 8a8:	13412c83          	lw	s9,308(sp)
 8ac:	13012d03          	lw	s10,304(sp)
 8b0:	12c12d83          	lw	s11,300(sp)
 8b4:	6135                	addi	sp,sp,352
 8b6:	8082                	ret

000008b8 <puts>:
{
 8b8:	1141                	addi	sp,sp,-16
 8ba:	c606                	sw	ra,12(sp)
 8bc:	c422                	sw	s0,8(sp)
 8be:	c226                	sw	s1,4(sp)
 8c0:	84aa                	mv	s1,a0
	int sl = strlen( s );
 8c2:	36f5                	jal	4ae <strlen>
 8c4:	842a                	mv	s0,a0
	_write(0, s, sl );
 8c6:	85aa                	mv	a1,a0
 8c8:	8526                	mv	a0,s1
 8ca:	3c99                	jal	320 <_write.constprop.0>
	_write(0, "\n", 1 );
 8cc:	6505                	lui	a0,0x1
 8ce:	4585                	li	a1,1
 8d0:	f2050513          	addi	a0,a0,-224 # f20 <LLE_IRQHandler+0xd2>
 8d4:	34b1                	jal	320 <_write.constprop.0>
}
 8d6:	40b2                	lw	ra,12(sp)
 8d8:	00140513          	addi	a0,s0,1
 8dc:	4422                	lw	s0,8(sp)
 8de:	4492                	lw	s1,4(sp)
 8e0:	0141                	addi	sp,sp,16
 8e2:	8082                	ret

000008e4 <SystemInit>:
			R8_CLK_SYS_CFG = sc;
		);
	}
#else // ch5xx EXCEPT ch570/2 ch584/5
	SYS_CLKTypeDef sc = CLK_SOURCE_CH5XX;
	SYS_SAFE_ACCESS(
 8e4:	400017b7          	lui	a5,0x40001
 8e8:	05700693          	li	a3,87
 8ec:	04d78023          	sb	a3,64(a5) # 40001040 <_eusrstack+0x1fff9040>
 8f0:	fa800713          	li	a4,-88
 8f4:	04e78023          	sb	a4,64(a5)
 8f8:	0001                	nop
 8fa:	0001                	nop
 8fc:	04b7c603          	lbu	a2,75(a5)
 900:	0df67613          	andi	a2,a2,223
 904:	04c785a3          	sb	a2,75(a5)
 908:	04078023          	sb	zero,64(a5)
 90c:	0001                	nop
 90e:	0001                	nop
		ADD_N_NOPS(4);
		R8_FLASH_CFG = 0X51;
	}
	else if(sc & 0x40) // PLL div
	{
		SYS_SAFE_ACCESS(
 910:	04d78023          	sb	a3,64(a5)
 914:	04e78023          	sb	a4,64(a5)
 918:	0001                	nop
 91a:	0001                	nop
 91c:	00140637          	lui	a2,0x140
 920:	04860613          	addi	a2,a2,72 # 140048 <iSLER_mess.c.1a5a8056+0x13dd58>
 924:	c790                	sw	a2,8(a5)
 926:	04078023          	sb	zero,64(a5)
 92a:	0001                	nop
 92c:	0001                	nop
			R32_CLK_SYS_CFG = (1 << 6) | (sc & 0x1f) | RB_TX_32M_PWR_EN | RB_PLL_PWR_EN;
		);
		ADD_N_NOPS(4);
 92e:	0001                	nop
 930:	0001                	nop
 932:	0001                	nop
 934:	0001                	nop
		R8_FLASH_CFG = 0x52;
 936:	40002637          	lui	a2,0x40002
 93a:	05200593          	li	a1,82
 93e:	80b603a3          	sb	a1,-2041(a2) # 40001807 <_eusrstack+0x1fff9807>
		SYS_SAFE_ACCESS(
			R32_CLK_SYS_CFG |= RB_CLK_SYS_MOD;
		);
	}

	SYS_SAFE_ACCESS(
 942:	04d78023          	sb	a3,64(a5)
 946:	04e78023          	sb	a4,64(a5)
 94a:	0001                	nop
 94c:	0001                	nop
 94e:	04b7c703          	lbu	a4,75(a5)
 952:	f8076713          	ori	a4,a4,-128
 956:	0ff77713          	andi	a4,a4,255
 95a:	04e785a3          	sb	a4,75(a5)
 95e:	04078023          	sb	zero,64(a5)
 962:	0001                	nop
 964:	0001                	nop
	*DMDATA1 = 0x00;
 966:	e00007b7          	lui	a5,0xe0000
 96a:	3807a223          	sw	zero,900(a5) # e0000384 <_eusrstack+0xbfff8384>
	*DMDATA0 = 0x80;
 96e:	08000713          	li	a4,128
 972:	38e7a023          	sw	a4,896(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
 976:	8082                	ret

00000978 <main>:


int main()
{
 978:	7159                	addi	sp,sp,-112
 97a:	d686                	sw	ra,108(sp)
 97c:	d4a2                	sw	s0,104(sp)
 97e:	d2a6                	sw	s1,100(sp)
 980:	d0ca                	sw	s2,96(sp)
 982:	cece                	sw	s3,92(sp)
 984:	ccd2                	sw	s4,88(sp)
 986:	cad6                	sw	s5,84(sp)
 988:	c8da                	sw	s6,80(sp)
 98a:	c6de                	sw	s7,76(sp)
	SystemInit();
 98c:	3fa1                	jal	8e4 <SystemInit>
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) |= (pin & ~PB);
		*(&R32_PA_PU + OFFSET_FOR_GPIOB(pin))     &= ~(pin & ~PB);
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    &= ~(pin & ~PB);
		break;
	case GPIO_ModeOut_PP_5mA:
		*(&R32_PA_PD_DRV + OFFSET_FOR_GPIOB(pin)) &= ~(pin & ~PB);
 98e:	400017b7          	lui	a5,0x40001
 992:	08078793          	addi	a5,a5,128 # 40001080 <_eusrstack+0x1fff9080>
 996:	5bd8                	lw	a4,52(a5)
	LL->LL5 = 0x8c;
 998:	08c00693          	li	a3,140
	LL->LL7 = 0x76;
 99c:	07600613          	li	a2,118
 9a0:	eff77713          	andi	a4,a4,-257
 9a4:	dbd8                	sw	a4,52(a5)
		*(&R32_PA_DIR + OFFSET_FOR_GPIOB(pin))    |= (pin & ~PB);
 9a6:	5398                	lw	a4,32(a5)
	RF->RF10 = 0x480;
 9a8:	4000d437          	lui	s0,0x4000d
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
 9ac:	90000337          	lui	t1,0x90000
 9b0:	10076713          	ori	a4,a4,256
 9b4:	d398                	sw	a4,32(a5)
	LL->LL5 = 0x8c;
 9b6:	4000c7b7          	lui	a5,0x4000c
 9ba:	20078713          	addi	a4,a5,512 # 4000c200 <_eusrstack+0x20004200>
 9be:	cb54                	sw	a3,20(a4)
	LL->LL7 = 0x76;
 9c0:	cf50                	sw	a2,28(a4)
	LL->LL9 = 0x8c;
 9c2:	d354                	sw	a3,36(a4)
	LL->LL13 = 0x8c;
 9c4:	db54                	sw	a3,52(a4)
	LL->LL17 = 0x8c;
 9c6:	c374                	sw	a3,68(a4)
	LL->LL19 = 0x76;
 9c8:	c770                	sw	a2,76(a4)
	LL->LL11 = 0x3c;
 9ca:	03c00693          	li	a3,60
 9ce:	d754                	sw	a3,44(a4)
	LL->LL15 = 0x3c;
 9d0:	df54                	sw	a3,60(a4)
	LL->INT_EN = 0xf00f;
 9d2:	66bd                	lui	a3,0xf
 9d4:	06bd                	addi	a3,a3,15
 9d6:	c754                	sw	a3,12(a4)
	LL->STATE_BUF = (uint32_t)LLE_BUF;
 9d8:	c1418693          	addi	a3,gp,-1004 # 20000010 <LLE_BUF>
 9dc:	db74                	sw	a3,116(a4)
	LL->STATUS = 0xffffffff;
 9de:	56fd                	li	a3,-1
 9e0:	c714                	sw	a3,8(a4)
	RF->RF10 = 0x480;
 9e2:	48000713          	li	a4,1152
 9e6:	d418                	sw	a4,40(s0)
	RF->RF18 = (RF->RF18 & 0x8fffffff) | 0x20000000;
 9e8:	4438                	lw	a4,72(s0)
 9ea:	137d                	addi	t1,t1,-1
 9ec:	20000e37          	lui	t3,0x20000
 9f0:	00677733          	and	a4,a4,t1
 9f4:	01c76733          	or	a4,a4,t3
 9f8:	c438                	sw	a4,72(s0)
	RF->RF18 = (RF->RF18 & 0xf8ffffff) | 0x4000000;
 9fa:	4438                	lw	a4,72(s0)
 9fc:	f90006b7          	lui	a3,0xf9000
 a00:	16fd                	addi	a3,a3,-1
 a02:	8f75                	and	a4,a4,a3
 a04:	04000637          	lui	a2,0x4000
 a08:	8f51                	or	a4,a4,a2
 a0a:	c438                	sw	a4,72(s0)
	RF->RF18 = (RF->RF18 & 0xfffffff0) | 9;
 a0c:	4438                	lw	a4,72(s0)
	RF->RF18 &= 0xfff8ffff;
 a0e:	fff90637          	lui	a2,0xfff90
 a12:	167d                	addi	a2,a2,-1
	RF->RF18 = (RF->RF18 & 0xfffffff0) | 9;
 a14:	9b41                	andi	a4,a4,-16
 a16:	00976713          	ori	a4,a4,9
 a1a:	c438                	sw	a4,72(s0)
	RF->RF18 &= 0xfff8ffff;
 a1c:	4438                	lw	a4,72(s0)
	RF->RF18 |= 0x80000000;
 a1e:	800008b7          	lui	a7,0x80000
	RF->RF19 |= 0x2000000;
 a22:	02000eb7          	lui	t4,0x2000
	RF->RF18 &= 0xfff8ffff;
 a26:	8f71                	and	a4,a4,a2
 a28:	c438                	sw	a4,72(s0)
	RF->RF18 |= 0x80000000;
 a2a:	4438                	lw	a4,72(s0)
	RF->RF19 &= 0xfeffffff;
 a2c:	ff000637          	lui	a2,0xff000
 a30:	167d                	addi	a2,a2,-1
	RF->RF18 |= 0x80000000;
 a32:	01176733          	or	a4,a4,a7
 a36:	c438                	sw	a4,72(s0)
	RF->RF19 = (RF->RF19 & 0xfffffff8) | 3;
 a38:	4478                	lw	a4,76(s0)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
 a3a:	7545                	lui	a0,0xffff1
	RF->RF21 &= 0xffffefff;
 a3c:	74fd                	lui	s1,0xfffff
	RF->RF19 = (RF->RF19 & 0xfffffff8) | 3;
 a3e:	9b61                	andi	a4,a4,-8
 a40:	00376713          	ori	a4,a4,3
 a44:	c478                	sw	a4,76(s0)
	RF->RF19 = (RF->RF19 & 0xffffff8f) | 0x30;
 a46:	4478                	lw	a4,76(s0)
	RF->RF21 &= 0xffffefff;
 a48:	14fd                	addi	s1,s1,-1
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
 a4a:	1e7d                	addi	t3,t3,-1
	RF->RF19 = (RF->RF19 & 0xffffff8f) | 0x30;
 a4c:	f8f77713          	andi	a4,a4,-113
 a50:	03076713          	ori	a4,a4,48
 a54:	c478                	sw	a4,76(s0)
	RF->RF19 = (RF->RF19 & 0xfffff8ff) | 0x300;
 a56:	4478                	lw	a4,76(s0)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
 a58:	00020937          	lui	s2,0x20
	BB->CTRL_CFG |= 0x800000;
 a5c:	10078793          	addi	a5,a5,256
	RF->RF19 = (RF->RF19 & 0xfffff8ff) | 0x300;
 a60:	8ff77713          	andi	a4,a4,-1793
 a64:	30076713          	ori	a4,a4,768
 a68:	c478                	sw	a4,76(s0)
	RF->RF19 &= 0xfeffffff;
 a6a:	4478                	lw	a4,76(s0)
	NVIC->VTFIDR[3] = 0x14;
 a6c:	49d1                	li	s3,20
	RF->RF19 &= 0xfeffffff;
 a6e:	8f71                	and	a4,a4,a2
 a70:	c478                	sw	a4,76(s0)
	RF->RF19 |= 0x2000000;
 a72:	4478                	lw	a4,76(s0)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
 a74:	6611                	lui	a2,0x4
	RF->RF19 |= 0x2000000;
 a76:	01d76733          	or	a4,a4,t4
 a7a:	c478                	sw	a4,76(s0)
	RF->RF20 = (RF->RF20 & 0xffff0fff) | 0x4000;
 a7c:	05042803          	lw	a6,80(s0) # 4000d050 <_eusrstack+0x20005050>
 a80:	fff50713          	addi	a4,a0,-1 # ffff0fff <_eusrstack+0xdffe8fff>
 a84:	00e87833          	and	a6,a6,a4
 a88:	00c86833          	or	a6,a6,a2
 a8c:	05042823          	sw	a6,80(s0)
	RF->RF21 = (RF->RF21 & 0xfffffff0) | 0xc;
 a90:	05442803          	lw	a6,84(s0)
 a94:	ff087813          	andi	a6,a6,-16
 a98:	00c86813          	ori	a6,a6,12
 a9c:	05042a23          	sw	a6,84(s0)
	RF->RF21 |= 0x80;
 aa0:	4870                	lw	a2,84(s0)
 aa2:	08066613          	ori	a2,a2,128
 aa6:	c870                	sw	a2,84(s0)
	RF->RF21 &= 0xffffefff;
 aa8:	4870                	lw	a2,84(s0)
 aaa:	8e65                	and	a2,a2,s1
 aac:	c870                	sw	a2,84(s0)
	RF->RF15 = (RF->RF15 & 0xffff0fff) | 0x8000;
 aae:	5c48                	lw	a0,60(s0)
 ab0:	8d79                	and	a0,a0,a4
 ab2:	6721                	lui	a4,0x8
 ab4:	8d59                	or	a0,a0,a4
 ab6:	dc48                	sw	a0,60(s0)
	RF->RF15 = (RF->RF15 & 0xf8ffffff) | 0x2000000;
 ab8:	5c4c                	lw	a1,60(s0)
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
 aba:	40000737          	lui	a4,0x40000
	DevSetMode(DEVSETMODE_TUNE);
 abe:	0dd00513          	li	a0,221
	RF->RF15 = (RF->RF15 & 0xf8ffffff) | 0x2000000;
 ac2:	8df5                	and	a1,a1,a3
 ac4:	01d5e5b3          	or	a1,a1,t4
 ac8:	dc4c                	sw	a1,60(s0)
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
 aca:	5c50                	lw	a2,60(s0)
	RF->RF11 |= 0x700000;
 acc:	007005b7          	lui	a1,0x700
	RF->RF15 = (RF->RF15 & 0x1fffffff) | 0x40000000;
 ad0:	01c67633          	and	a2,a2,t3
 ad4:	8e59                	or	a2,a2,a4
 ad6:	dc50                	sw	a2,60(s0)
	RF->RF11 |= 0x700000;
 ad8:	5450                	lw	a2,44(s0)
	RF->RF11 = (RF->RF11 & 0xffffcfff) | 0x2000;
 ada:	6709                	lui	a4,0x2
	RF->RF11 |= 0x700000;
 adc:	8e4d                	or	a2,a2,a1
 ade:	d450                	sw	a2,44(s0)
	RF->RF11 &= 0xf8ffffff;
 ae0:	5450                	lw	a2,44(s0)
 ae2:	8ef1                	and	a3,a3,a2
 ae4:	d454                	sw	a3,44(s0)
	RF->RF11 = (RF->RF11 & 0xffffcfff) | 0x2000;
 ae6:	5454                	lw	a3,44(s0)
 ae8:	7675                	lui	a2,0xffffd
 aea:	167d                	addi	a2,a2,-1
 aec:	8ef1                	and	a3,a3,a2
 aee:	8ed9                	or	a3,a3,a4
 af0:	d454                	sw	a3,44(s0)
	RF->RF11 = (RF->RF11 & 0xfffcffff) | 0x20000;
 af2:	5454                	lw	a3,44(s0)
 af4:	fffd0637          	lui	a2,0xfffd0
 af8:	167d                	addi	a2,a2,-1
 afa:	8ef1                	and	a3,a3,a2
 afc:	0126e6b3          	or	a3,a3,s2
 b00:	d454                	sw	a3,44(s0)
	RF->RF12 &= 0xfffffff0;
 b02:	5814                	lw	a3,48(s0)
 b04:	9ac1                	andi	a3,a3,-16
 b06:	d814                	sw	a3,48(s0)
	RF->RF12 &= 0xffffff0f;
 b08:	5814                	lw	a3,48(s0)
 b0a:	f0f6f693          	andi	a3,a3,-241
 b0e:	d814                	sw	a3,48(s0)
	RF->RF12 &= 0xfffff8ff;
 b10:	5814                	lw	a3,48(s0)
 b12:	8ff6f693          	andi	a3,a3,-1793
 b16:	d814                	sw	a3,48(s0)
	RF->RF12 |= 0x700000;
 b18:	5818                	lw	a4,48(s0)
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
 b1a:	500006b7          	lui	a3,0x50000
	RF->RF12 |= 0x700000;
 b1e:	8f4d                	or	a4,a4,a1
 b20:	d818                	sw	a4,48(s0)
	RF->RF12 = (RF->RF12 & 0x8fffffff) | 0x50000000;
 b22:	5818                	lw	a4,48(s0)
 b24:	00677733          	and	a4,a4,t1
 b28:	8f55                	or	a4,a4,a3
 b2a:	d818                	sw	a4,48(s0)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xff07ffff) | RFEND_TXCTUNE_INIT;
 b2c:	5c18                	lw	a4,56(s0)
 b2e:	ff0806b7          	lui	a3,0xff080
 b32:	16fd                	addi	a3,a3,-1
 b34:	8f75                	and	a4,a4,a3
 b36:	008806b7          	lui	a3,0x880
 b3a:	8f55                	or	a4,a4,a3
 b3c:	dc18                	sw	a4,56(s0)
	RF->TXTUNE_CTRL |= 0x80000000;
 b3e:	5c18                	lw	a4,56(s0)
	BB->CTRL_CFG |= 0x800000;
 b40:	008006b7          	lui	a3,0x800
	RF->TXTUNE_CTRL |= 0x80000000;
 b44:	011768b3          	or	a7,a4,a7
 b48:	03142c23          	sw	a7,56(s0)
	BB->CTRL_CFG |= 0x800000;
 b4c:	4398                	lw	a4,0(a5)
 b4e:	8f55                	or	a4,a4,a3
 b50:	c398                	sw	a4,0(a5)
	BB->CTRL_CFG |= 0x10000000;
 b52:	4398                	lw	a4,0(a5)
 b54:	100006b7          	lui	a3,0x10000
 b58:	8f55                	or	a4,a4,a3
 b5a:	c398                	sw	a4,0(a5)
	BB->BB13 = 0x1d0;
 b5c:	1d000713          	li	a4,464
 b60:	dbd8                	sw	a4,52(a5)
	BB->CTRL_TX = TxPower << 0x19 | CTRL_TX_TXPOWER;
 b62:	a4011737          	lui	a4,0xa4011
 b66:	e7870713          	addi	a4,a4,-392 # a4010e78 <_eusrstack+0x84008e78>
 b6a:	d7d8                	sw	a4,44(a5)
	BB->CTRL_TX = (BB->CTRL_TX & 0x81ffffff) | (TxPower & 0x3f) << 0x19;
 b6c:	57d8                	lw	a4,44(a5)
 b6e:	820006b7          	lui	a3,0x82000
 b72:	16fd                	addi	a3,a3,-1
 b74:	8f75                	and	a4,a4,a3
 b76:	240006b7          	lui	a3,0x24000
 b7a:	8f55                	or	a4,a4,a3
 b7c:	d7d8                	sw	a4,44(a5)
	BB->BB8 = 0x90083;
 b7e:	00090737          	lui	a4,0x90
 b82:	08370713          	addi	a4,a4,131 # 90083 <iSLER_mess.c.1a5a8056+0x8dd93>
 b86:	d398                	sw	a4,32(a5)
	NVIC->VTFIDR[3] = 0x14;
 b88:	e000e7b7          	lui	a5,0xe000e
 b8c:	053789a3          	sb	s3,83(a5) # e000e053 <_eusrstack+0xc0006053>
	DevSetMode(DEVSETMODE_TUNE);
 b90:	e5aff0ef          	jal	ra,1ea <DevSetMode>
	RF->RF1 &= 0xfffffeff;
 b94:	4058                	lw	a4,4(s0)
	uint32_t tune2401 = RFEND_TXCTune(37);
 b96:	02500513          	li	a0,37
	RF->RF1 &= 0xfffffeff;
 b9a:	eff77713          	andi	a4,a4,-257
 b9e:	c058                	sw	a4,4(s0)
	RF->RF10 &= 0xffffefff;
 ba0:	5418                	lw	a4,40(s0)
 ba2:	8cf9                	and	s1,s1,a4
 ba4:	d404                	sw	s1,40(s0)
	RF->RF11 &= 0xffffffef;
 ba6:	5458                	lw	a4,44(s0)
 ba8:	9b3d                	andi	a4,a4,-17
 baa:	d458                	sw	a4,44(s0)
	RF->RF2 |= 0x20000;
 bac:	441c                	lw	a5,8(s0)
 bae:	0127e7b3          	or	a5,a5,s2
 bb2:	c41c                	sw	a5,8(s0)
	RF->RF1 |= 0x10;
 bb4:	405c                	lw	a5,4(s0)
 bb6:	0107e793          	ori	a5,a5,16
 bba:	c05c                	sw	a5,4(s0)
	uint32_t tune2401 = RFEND_TXCTune(37);
 bbc:	e7cff0ef          	jal	ra,238 <RFEND_TXCTune>
	uint8_t nGA2401 = (uint8_t)(tune2401 >> 24) & 0x7f;
 bc0:	01855713          	srli	a4,a0,0x18
	uint32_t tune2401 = RFEND_TXCTune(37);
 bc4:	842a                	mv	s0,a0
	uint32_t tune2480 = RFEND_TXCTune(39);
 bc6:	02700513          	li	a0,39
	uint8_t nGA2401 = (uint8_t)(tune2401 >> 24) & 0x7f;
 bca:	07f77b13          	andi	s6,a4,127
	uint32_t tune2480 = RFEND_TXCTune(39);
 bce:	e6aff0ef          	jal	ra,238 <RFEND_TXCTune>
	uint8_t nGA2480 = (uint8_t)(tune2480 >> 24) & 0x7f;
 bd2:	01855913          	srli	s2,a0,0x18
	uint32_t tune2480 = RFEND_TXCTune(39);
 bd6:	8a2a                	mv	s4,a0
	uint32_t tune2440 = RFEND_TXCTune(18);
 bd8:	4549                	li	a0,18
 bda:	e5eff0ef          	jal	ra,238 <RFEND_TXCTune>
	uint8_t nCO2440 = (uint8_t)(tune2440 & 0x3f);
 bde:	03f57a93          	andi	s5,a0,63
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
 be2:	02400613          	li	a2,36
 be6:	4581                	li	a1,0
	uint8_t nGA2480 = (uint8_t)(tune2480 >> 24) & 0x7f;
 be8:	07f97b93          	andi	s7,s2,127
	uint32_t tune2440 = RFEND_TXCTune(18);
 bec:	84aa                	mv	s1,a0
	uint8_t nGA2440 = (uint8_t)(tune2440 >> 24) & 0x7f;
 bee:	01855913          	srli	s2,a0,0x18
	uint32_t dCO0140 = nCO2401 - nCO2440;
 bf2:	03f47413          	andi	s0,s0,63
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
 bf6:	0868                	addi	a0,sp,28
	uint32_t dCO0140 = nCO2401 - nCO2440;
 bf8:	41540433          	sub	s0,s0,s5
	uint8_t txctune_co[sizeof(RF->TXCTUNE_CO)] = {0};
 bfc:	cc02                	sw	zero,24(sp)
 bfe:	345d                	jal	6a4 <memset>
 c00:	03340733          	mul	a4,s0,s3
	uint32_t dCO4080 = nCO2440 - nCO2480;
 c04:	03fa7a13          	andi	s4,s4,63
		txctune_co[f] = tune | (tune << 4);
 c08:	6605                	lui	a2,0x1
	uint8_t nGA2440 = (uint8_t)(tune2440 >> 24) & 0x7f;
 c0a:	07f97913          	andi	s2,s2,127
	uint32_t dCO4080 = nCO2440 - nCO2480;
 c0e:	414a8a33          	sub	s4,s5,s4
	for(int f = 0; f < int_points; f++) {
 c12:	4781                	li	a5,0
		tune = (dCO0140 * (int_points -f)) / int_points;
 c14:	45d1                	li	a1,20
		txctune_co[f] = tune | (tune << 4);
 c16:	1641                	addi	a2,a2,-16
 c18:	0834                	addi	a3,sp,24
 c1a:	00f68833          	add	a6,a3,a5
		tune = (dCO0140 * (int_points -f)) / int_points;
 c1e:	02b75533          	divu	a0,a4,a1
	for(int f = 0; f < int_points; f++) {
 c22:	0785                	addi	a5,a5,1
 c24:	8f01                	sub	a4,a4,s0
		txctune_co[f] = tune | (tune << 4);
 c26:	00451693          	slli	a3,a0,0x4
 c2a:	8ef1                	and	a3,a3,a2
 c2c:	8ec9                	or	a3,a3,a0
 c2e:	00d80023          	sb	a3,0(a6)
	for(int f = 0; f < int_points; f++) {
 c32:	feb793e3          	bne	a5,a1,c18 <main+0x2a0>
		txctune_co[f] = tune | (tune << 4);
 c36:	6605                	lui	a2,0x1
	for(int f = 0; f < int_points; f++) {
 c38:	4681                	li	a3,0
		tune = (dCO4080 * (f -int_points)) / int_points;
 c3a:	48d1                	li	a7,20
		txctune_co[f] = tune | (tune << 4);
 c3c:	1641                	addi	a2,a2,-16
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
 c3e:	02800513          	li	a0,40
		tune = (dCO4080 * (f -int_points)) / int_points;
 c42:	0316d5b3          	divu	a1,a3,a7
		txctune_co[f] = tune | (tune << 4);
 c46:	0838                	addi	a4,sp,24
 c48:	00f70833          	add	a6,a4,a5
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
 c4c:	0785                	addi	a5,a5,1
 c4e:	96d2                	add	a3,a3,s4
		txctune_co[f] = tune | (tune << 4);
 c50:	00459713          	slli	a4,a1,0x4
 c54:	8f71                	and	a4,a4,a2
 c56:	8f4d                	or	a4,a4,a1
 c58:	00e80023          	sb	a4,0(a6)
	for(int f = int_points; f < sizeof(RF->TXCTUNE_CO); f++) {
 c5c:	fea793e3          	bne	a5,a0,c42 <main+0x2ca>
 c60:	0834                	addi	a3,sp,24
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
 c62:	4701                	li	a4,0
		RF->TXCTUNE_CO[i] = ((uint32_t*)txctune_co)[i];
 c64:	4000d537          	lui	a0,0x4000d
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
 c68:	4629                	li	a2,10
		RF->TXCTUNE_CO[i] = ((uint32_t*)txctune_co)[i];
 c6a:	428c                	lw	a1,0(a3)
 c6c:	02870793          	addi	a5,a4,40
 c70:	078a                	slli	a5,a5,0x2
 c72:	97aa                	add	a5,a5,a0
 c74:	c38c                	sw	a1,0(a5)
	for(int i = 0; i < sizeof(txctune_co) /4; i++) {
 c76:	0705                	addi	a4,a4,1
 c78:	0691                	addi	a3,a3,4
 c7a:	fec718e3          	bne	a4,a2,c6a <main+0x2f2>
	uint32_t dGA0140 = nGA2401 - nGA2440;
 c7e:	412b0733          	sub	a4,s6,s2
	uint32_t dGA4080 = nGA2440 - nGA2480;
 c82:	4695                	li	a3,5
 c84:	02d706b3          	mul	a3,a4,a3
		txctune_ga[f] = tune | (tune << 4);
 c88:	6585                	lui	a1,0x1
	uint32_t dGA4080 = nGA2440 - nGA2480;
 c8a:	41790933          	sub	s2,s2,s7
	uint8_t txctune_ga[sizeof(RF->TXCTUNE_GA)] = {0};
 c8e:	c602                	sw	zero,12(sp)
 c90:	c802                	sw	zero,16(sp)
 c92:	ca02                	sw	zero,20(sp)
	for(int f = 1; f < int_points; f++) {
 c94:	4785                	li	a5,1
		tune = (dGA0140 * (int_points -f)) / int_points;
 c96:	4519                	li	a0,6
		txctune_ga[f] = tune | (tune << 4);
 c98:	15c1                	addi	a1,a1,-16
 c9a:	0070                	addi	a2,sp,12
		tune = (dGA0140 * (int_points -f)) / int_points;
 c9c:	02a6d833          	divu	a6,a3,a0
		txctune_ga[f] = tune | (tune << 4);
 ca0:	00f608b3          	add	a7,a2,a5
	for(int f = 1; f < int_points; f++) {
 ca4:	0785                	addi	a5,a5,1
 ca6:	8e99                	sub	a3,a3,a4
		txctune_ga[f] = tune | (tune << 4);
 ca8:	00481613          	slli	a2,a6,0x4
 cac:	8e6d                	and	a2,a2,a1
 cae:	01066633          	or	a2,a2,a6
 cb2:	00c88023          	sb	a2,0(a7) # 80000000 <_eusrstack+0x5fff8000>
	for(int f = 1; f < int_points; f++) {
 cb6:	fea792e3          	bne	a5,a0,c9a <main+0x322>
		txctune_ga[f] = tune | (tune << 4);
 cba:	6605                	lui	a2,0x1
	for(int f = 1; f < int_points; f++) {
 cbc:	4701                	li	a4,0
		tune = (dGA4080 * (f -int_points)) / int_points;
 cbe:	4319                	li	t1,6
		txctune_ga[f] = tune | (tune << 4);
 cc0:	ff060893          	addi	a7,a2,-16 # ff0 <_data_lma+0x7c>
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
 cc4:	452d                	li	a0,11
		tune = (dGA4080 * (f -int_points)) / int_points;
 cc6:	026755b3          	divu	a1,a4,t1
		txctune_ga[f] = tune | (tune << 4);
 cca:	0074                	addi	a3,sp,12
 ccc:	00f68833          	add	a6,a3,a5
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
 cd0:	0785                	addi	a5,a5,1
 cd2:	974a                	add	a4,a4,s2
		txctune_ga[f] = tune | (tune << 4);
 cd4:	00459693          	slli	a3,a1,0x4
 cd8:	0116f6b3          	and	a3,a3,a7
 cdc:	8ecd                	or	a3,a3,a1
 cde:	00d80023          	sb	a3,0(a6)
	for(int f = int_points; f < sizeof(RF->TXCTUNE_GA) -1; f++) {
 ce2:	fea792e3          	bne	a5,a0,cc6 <main+0x34e>
		RF->TXCTUNE_GA[i] = ((uint32_t*)txctune_ga)[i];
 ce6:	46b2                	lw	a3,12(sp)
 ce8:	4000d7b7          	lui	a5,0x4000d
 cec:	08078713          	addi	a4,a5,128 # 4000d080 <_eusrstack+0x20005080>
 cf0:	c734                	sw	a3,72(a4)
 cf2:	46c2                	lw	a3,16(sp)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0x80ffffff) | (tune2440 & 0x7f000000);
 cf4:	7f000537          	lui	a0,0x7f000
 cf8:	8ce9                	and	s1,s1,a0
		RF->TXCTUNE_GA[i] = ((uint32_t*)txctune_ga)[i];
 cfa:	c774                	sw	a3,76(a4)
 cfc:	46d2                	lw	a3,20(sp)
 cfe:	cb34                	sw	a3,80(a4)
	RF->RF1 &= 0xffffffef;
 d00:	43d8                	lw	a4,4(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0x80ffffff) | (tune2440 & 0x7f000000);
 d02:	810006b7          	lui	a3,0x81000
 d06:	16fd                	addi	a3,a3,-1
	RF->RF1 &= 0xffffffef;
 d08:	9b3d                	andi	a4,a4,-17
 d0a:	c3d8                	sw	a4,4(a5)
	RF->RF1 &= 0xfffffffe;
 d0c:	43d8                	lw	a4,4(a5)
 d0e:	9b79                	andi	a4,a4,-2
 d10:	c3d8                	sw	a4,4(a5)
	RF->RF10 |= 0x1000;
 d12:	5798                	lw	a4,40(a5)
 d14:	8f51                	or	a4,a4,a2
 d16:	d798                	sw	a4,40(a5)
	RF->RF11 |= 0x10;
 d18:	57d8                	lw	a4,44(a5)
 d1a:	01076713          	ori	a4,a4,16
 d1e:	d7d8                	sw	a4,44(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0xffffffc0) | (tune2440 & 0x3f);
 d20:	5f98                	lw	a4,56(a5)
 d22:	fc077713          	andi	a4,a4,-64
 d26:	01576733          	or	a4,a4,s5
 d2a:	df98                	sw	a4,56(a5)
	RF->TXTUNE_CTRL = (RF->TXTUNE_CTRL & 0x80ffffff) | (tune2440 & 0x7f000000);
 d2c:	5f98                	lw	a4,56(a5)
 d2e:	8f75                	and	a4,a4,a3
 d30:	8cd9                	or	s1,s1,a4
 d32:	df84                	sw	s1,56(a5)
	RF->RF1 |= 0x100;
 d34:	43d8                	lw	a4,4(a5)
	RF->RF20 &= 0xfffeffff;
 d36:	76c1                	lui	a3,0xffff0
 d38:	16fd                	addi	a3,a3,-1
	RF->RF1 |= 0x100;
 d3a:	10076713          	ori	a4,a4,256
 d3e:	c3d8                	sw	a4,4(a5)
	RF->RF20 &= 0xfffeffff;
 d40:	4bb8                	lw	a4,80(a5)
 d42:	8f75                	and	a4,a4,a3
 d44:	cbb8                	sw	a4,80(a5)
	RF->RF2 |= 0x200000;
 d46:	4798                	lw	a4,8(a5)
 d48:	002006b7          	lui	a3,0x200
 d4c:	8f55                	or	a4,a4,a3
 d4e:	c798                	sw	a4,8(a5)
	RF->RF3 = (RF->RF3 & 0xffffffef) | 0x10;
 d50:	47d8                	lw	a4,12(a5)
	while(LL->TMR && ((RF->RXTUNE >> 8) & 1));
 d52:	4000c6b7          	lui	a3,0x4000c
	RF->RF3 = (RF->RF3 & 0xffffffef) | 0x10;
 d56:	01076713          	ori	a4,a4,16
 d5a:	c7d8                	sw	a4,12(a5)
	RF->RF1 |= 0x1000;
 d5c:	43d8                	lw	a4,4(a5)
 d5e:	8f51                	or	a4,a4,a2
 d60:	c3d8                	sw	a4,4(a5)
	LL->TMR = 100;
 d62:	4000c7b7          	lui	a5,0x4000c
 d66:	06400713          	li	a4,100
 d6a:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
 d6e:	d3f8                	sw	a4,100(a5)
	while(LL->TMR && ((RF->RXTUNE >> 8) & 1));
 d70:	4000d737          	lui	a4,0x4000d
 d74:	20068793          	addi	a5,a3,512 # 4000c200 <_eusrstack+0x20004200>
 d78:	53fc                	lw	a5,100(a5)
 d7a:	c791                	beqz	a5,d86 <main+0x40e>
 d7c:	09c72783          	lw	a5,156(a4) # 4000d09c <_eusrstack+0x2000509c>
 d80:	1007f793          	andi	a5,a5,256
 d84:	fbe5                	bnez	a5,d74 <main+0x3fc>
	tuneFilter = RF->RXTUNE & 0x1f;
 d86:	4000d7b7          	lui	a5,0x4000d
 d8a:	08078713          	addi	a4,a5,128 # 4000d080 <_eusrstack+0x20005080>
 d8e:	4f54                	lw	a3,28(a4)
 d90:	c0c18713          	addi	a4,gp,-1012 # 20000008 <tuneFilter>
 d94:	8afd                	andi	a3,a3,31
 d96:	c314                	sw	a3,0(a4)
	RF->RF20 |= 0x10000;
 d98:	4bb4                	lw	a3,80(a5)
 d9a:	6641                	lui	a2,0x10
 d9c:	8ed1                	or	a3,a3,a2
 d9e:	cbb4                	sw	a3,80(a5)
	RF->RF20 = (RF->RF20 & 0xffffffe0) | tuneFilter;
 da0:	4bb4                	lw	a3,80(a5)
 da2:	4310                	lw	a2,0(a4)
 da4:	9a81                	andi	a3,a3,-32
 da6:	8ed1                	or	a3,a3,a2
 da8:	cbb4                	sw	a3,80(a5)
	RF->RF2 &= 0xffdfffff;
 daa:	4794                	lw	a3,8(a5)
 dac:	ffe00637          	lui	a2,0xffe00
 db0:	167d                	addi	a2,a2,-1
 db2:	8ef1                	and	a3,a3,a2
 db4:	c794                	sw	a3,8(a5)
	tuneFilter2M = (tuneFilter +2 < 0x1f) ? (tuneFilter +2) : 0x1f;
 db6:	4314                	lw	a3,0(a4)
 db8:	4679                	li	a2,30
 dba:	47fd                	li	a5,31
 dbc:	0689                	addi	a3,a3,2
 dbe:	00d66463          	bltu	a2,a3,dc6 <main+0x44e>
 dc2:	431c                	lw	a5,0(a4)
 dc4:	0789                	addi	a5,a5,2
 dc6:	c0f1a823          	sw	a5,-1008(gp) # 2000000c <tuneFilter2M>
	RF->RF22 &= 0xfffeffff;
 dca:	4000d7b7          	lui	a5,0x4000d
 dce:	4fb8                	lw	a4,88(a5)
 dd0:	76c1                	lui	a3,0xffff0
 dd2:	16fd                	addi	a3,a3,-1
 dd4:	8f75                	and	a4,a4,a3
 dd6:	cfb8                	sw	a4,88(a5)
	RF->RF2 |= 0x10000;
 dd8:	4798                	lw	a4,8(a5)
 dda:	66c1                	lui	a3,0x10
	DevSetMode(0);
 ddc:	4501                	li	a0,0
	RF->RF2 |= 0x10000;
 dde:	8f55                	or	a4,a4,a3
 de0:	c798                	sw	a4,8(a5)
	RF->RF3 = (RF->RF3 & 0xfffffeff) | 0x100;
 de2:	47d8                	lw	a4,12(a5)
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
 de4:	ffef06b7          	lui	a3,0xffef0
 de8:	16fd                	addi	a3,a3,-1
	RF->RF3 = (RF->RF3 & 0xfffffeff) | 0x100;
 dea:	10076713          	ori	a4,a4,256
 dee:	c7d8                	sw	a4,12(a5)
	RF->RF1 = (RF->RF1 & 0xfffeffff) | 0x100000;
 df0:	43d8                	lw	a4,4(a5)
	// }

	while(1) {
		uint8_t data[] = "I like ble 777777";
		send_adv_data(data, sizeof(data));
        Delay_Ms(1000);
 df2:	00727437          	lui	s0,0x727
		uint8_t data[] = "I like ble 777777";
 df6:	6485                	lui	s1,0x1
 df8:	8f75                	and	a4,a4,a3
 dfa:	001006b7          	lui	a3,0x100
 dfe:	8f55                	or	a4,a4,a3
 e00:	c3d8                	sw	a4,4(a5)
	DevSetMode(0);
 e02:	be8ff0ef          	jal	ra,1ea <DevSetMode>
	NVIC->IPRIOR[0x15] |= 0x80;
 e06:	e000e737          	lui	a4,0xe000e
 e0a:	41574783          	lbu	a5,1045(a4) # e000e415 <_eusrstack+0xc0006415>
	blink(5);
 e0e:	4515                	li	a0,5
        Delay_Ms(1000);
 e10:	0e040413          	addi	s0,s0,224 # 7270e0 <iSLER_mess.c.1a5a8056+0x724df0>
 e14:	f807e793          	ori	a5,a5,-128
 e18:	0ff7f793          	andi	a5,a5,255
 e1c:	40f70aa3          	sb	a5,1045(a4)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 e20:	002007b7          	lui	a5,0x200
 e24:	10f72023          	sw	a5,256(a4)
	blink(5);
 e28:	c9aff0ef          	jal	ra,2c2 <blink>
	printf(".~ ch32fun iSLER ~.\n");
 e2c:	6505                	lui	a0,0x1
 e2e:	f2450513          	addi	a0,a0,-220 # f24 <LLE_IRQHandler+0xd6>
 e32:	3459                	jal	8b8 <puts>
		uint8_t data[] = "I like ble 777777";
 e34:	4649                	li	a2,18
 e36:	f3848593          	addi	a1,s1,-200 # f38 <LLE_IRQHandler+0xea>
 e3a:	0828                	addi	a0,sp,24
 e3c:	87bff0ef          	jal	ra,6b6 <memcpy>
		send_adv_data(data, sizeof(data));
 e40:	0828                	addi	a0,sp,24
 e42:	891ff0ef          	jal	ra,6d2 <send_adv_data.constprop.0>
        Delay_Ms(1000);
 e46:	8522                	mv	a0,s0
 e48:	ae2ff0ef          	jal	ra,12a <DelaySysTick>
	while(1) {
 e4c:	b7e5                	j	e34 <main+0x4bc>

00000e4e <LLE_IRQHandler>:
void LLE_IRQHandler() {
 e4e:	7139                	addi	sp,sp,-64
 e50:	cc3e                	sw	a5,24(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
 e52:	4000c7b7          	lui	a5,0x4000c
 e56:	20078793          	addi	a5,a5,512 # 4000c200 <_eusrstack+0x20004200>
void LLE_IRQHandler() {
 e5a:	d036                	sw	a3,32(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
 e5c:	4794                	lw	a3,8(a5)
void LLE_IRQHandler() {
 e5e:	ce3a                	sw	a4,28(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
 e60:	6711                	lui	a4,0x4
void LLE_IRQHandler() {
 e62:	de06                	sw	ra,60(sp)
 e64:	dc16                	sw	t0,56(sp)
 e66:	da1a                	sw	t1,52(sp)
 e68:	d81e                	sw	t2,48(sp)
 e6a:	d62a                	sw	a0,44(sp)
 e6c:	d42e                	sw	a1,40(sp)
 e6e:	d232                	sw	a2,36(sp)
 e70:	ca42                	sw	a6,20(sp)
 e72:	c846                	sw	a7,16(sp)
 e74:	c672                	sw	t3,12(sp)
 e76:	c476                	sw	t4,8(sp)
 e78:	c27a                	sw	t5,4(sp)
 e7a:	c07e                	sw	t6,0(sp)
	if((LL->STATUS & (1<<14)) && (LL->INT_EN & (1<<14))) {
 e7c:	8ef9                	and	a3,a3,a4
 e7e:	cea9                	beqz	a3,ed8 <LLE_IRQHandler+0x8a>
 e80:	47d4                	lw	a3,12(a5)
 e82:	8ef9                	and	a3,a3,a4
 e84:	cab1                	beqz	a3,ed8 <LLE_IRQHandler+0x8a>
		LL->LL26 = 0xffffffff;
 e86:	56fd                	li	a3,-1
 e88:	d7b4                	sw	a3,104(a5)
		LL->STATUS = 0x4000;
 e8a:	c798                	sw	a4,8(a5)
	DevSetMode(0);
 e8c:	4501                	li	a0,0
 e8e:	b5cff0ef          	jal	ra,1ea <DevSetMode>
	LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
 e92:	4000c7b7          	lui	a5,0x4000c
 e96:	20078693          	addi	a3,a5,512 # 4000c200 <_eusrstack+0x20004200>
 e9a:	4ab8                	lw	a4,80(a3)
}
 e9c:	50f2                	lw	ra,60(sp)
 e9e:	52e2                	lw	t0,56(sp)
	LL->CTRL_MOD &= CTRL_MOD_RFSTOP;
 ea0:	9b61                	andi	a4,a4,-8
 ea2:	cab8                	sw	a4,80(a3)
	LL->LL0 |= 0x08;
 ea4:	2007a703          	lw	a4,512(a5)
}
 ea8:	5352                	lw	t1,52(sp)
 eaa:	53c2                	lw	t2,48(sp)
	LL->LL0 |= 0x08;
 eac:	00876713          	ori	a4,a4,8
 eb0:	20e7a023          	sw	a4,512(a5)
	rx_ready = 1;
 eb4:	4705                	li	a4,1
 eb6:	c0e1a423          	sw	a4,-1016(gp) # 20000004 <rx_ready>
}
 eba:	5532                	lw	a0,44(sp)
 ebc:	55a2                	lw	a1,40(sp)
 ebe:	5612                	lw	a2,36(sp)
 ec0:	5682                	lw	a3,32(sp)
 ec2:	4772                	lw	a4,28(sp)
 ec4:	47e2                	lw	a5,24(sp)
 ec6:	4852                	lw	a6,20(sp)
 ec8:	48c2                	lw	a7,16(sp)
 eca:	4e32                	lw	t3,12(sp)
 ecc:	4ea2                	lw	t4,8(sp)
 ece:	4f12                	lw	t5,4(sp)
 ed0:	4f82                	lw	t6,0(sp)
 ed2:	6121                	addi	sp,sp,64
 ed4:	30200073          	mret
		LL->STATUS &= LL->INT_EN;
 ed8:	4000c7b7          	lui	a5,0x4000c
 edc:	20078713          	addi	a4,a5,512 # 4000c200 <_eusrstack+0x20004200>
 ee0:	4750                	lw	a2,12(a4)
 ee2:	4714                	lw	a3,8(a4)
		BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
 ee4:	10078793          	addi	a5,a5,256
		LL->STATUS &= LL->INT_EN;
 ee8:	8ef1                	and	a3,a3,a2
 eea:	c714                	sw	a3,8(a4)
		BB->CTRL_TX = (BB->CTRL_TX & 0xfffffffc) | 1;
 eec:	57d8                	lw	a4,44(a5)
 eee:	9b71                	andi	a4,a4,-4
 ef0:	00176713          	ori	a4,a4,1
 ef4:	d7d8                	sw	a4,44(a5)
 ef6:	bf59                	j	e8c <LLE_IRQHandler+0x3e>
 ef8:	6461                	lui	s0,0x18
 efa:	2076                	fld	ft0,344(sp)
 efc:	656c                	flw	fa1,76(a0)
 efe:	3a6e                	fld	fs4,248(sp)
 f00:	2520                	fld	fs0,72(a0)
 f02:	0a64                	addi	s1,sp,284
 f04:	0000                	unimp
 f06:	0000                	unimp
 f08:	5566                	lw	a0,120(sp)
 f0a:	3344                	fld	fs1,160(a4)
 f0c:	1122                	slli	sp,sp,0x28
 f0e:	0102                	c.slli64	sp
 f10:	0c06                	slli	s8,s8,0x1
 f12:	0009                	c.nop	2
 f14:	32336863          	bltu	t1,gp,1244 <_data_lma+0x2d0>
 f18:	7566                	flw	fa0,120(sp)
 f1a:	386e                	fld	fa6,248(sp)
 f1c:	3838                	fld	fa4,112(s0)
 f1e:	0000                	unimp
 f20:	000a                	c.slli	zero,0x2
 f22:	0000                	unimp
 f24:	7e2e                	flw	ft8,232(sp)
 f26:	6320                	flw	fs0,64(a4)
 f28:	3368                	fld	fa0,224(a4)
 f2a:	6632                	flw	fa2,12(sp)
 f2c:	6e75                	lui	t3,0x1d
 f2e:	6920                	flw	fs0,80(a0)
 f30:	52454c53          	0x52454c53
 f34:	7e20                	flw	fs0,120(a2)
 f36:	002e                	c.slli	zero,0xb
 f38:	2049                	jal	fba <_data_lma+0x46>
 f3a:	696c                	flw	fa1,84(a0)
 f3c:	6220656b          	0x6220656b
 f40:	656c                	flw	fa1,76(a0)
 f42:	3720                	fld	fs0,104(a4)
 f44:	37373737          	lui	a4,0x37373
 f48:	00000037          	lui	zero,0x0

00000f4c <channel_map>:
 f4c:	04030201 08070605 0d0c0a09 11100f0e     ................
 f5c:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
 f6c:	25242322 270b0026                       "#$%&..'
