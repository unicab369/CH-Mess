#include "ch32fun.h"
#include "util_operations.h"
#include "color_utilities.h"


static const unsigned char SIN_LUT[] = {
    0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x03, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 
	0x0a, 0x0b, 0x0d, 0x0e, 0x10, 0x11, 0x13, 0x14, 0x16, 0x18, 0x1a, 0x1b, 0x1d, 0x1f, 0x21, 0x24, 
	0x26, 0x28, 0x2a, 0x2d, 0x2f, 0x31, 0x34, 0x36, 0x39, 0x3c, 0x3e, 0x41, 0x44, 0x47, 0x49, 0x4c, 
	0x4f, 0x52, 0x55, 0x58, 0x5b, 0x5e, 0x61, 0x64, 0x67, 0x6a, 0x6d, 0x70, 0x73, 0x76, 0x79, 0x7d, 
	0x80, 0x83, 0x86, 0x89, 0x8c, 0x8f, 0x92, 0x95, 0x99, 0x9c, 0x9f, 0xa2, 0xa5, 0xa8, 0xab, 0xad, 
	0xb0, 0xb3, 0xb6, 0xb9, 0xbc, 0xbe, 0xc1, 0xc4, 0xc6, 0xc9, 0xcb, 0xce, 0xd0, 0xd3, 0xd5, 0xd7, 
	0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xe9, 0xeb, 0xed, 0xee, 0xf0, 0xf1, 0xf3, 0xf4, 
	0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfc, 0xfd, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfd, 0xfc, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 
	0xf5, 0xf4, 0xf3, 0xf1, 0xf0, 0xee, 0xed, 0xeb, 0xe9, 0xe8, 0xe6, 0xe4, 0xe2, 0xe0, 0xde, 0xdc, 
	0xda, 0xd7, 0xd5, 0xd3, 0xd0, 0xce, 0xcb, 0xc9, 0xc6, 0xc4, 0xc1, 0xbe, 0xbc, 0xb9, 0xb6, 0xb3, 
	0xb0, 0xad, 0xab, 0xa8, 0xa5, 0xa2, 0x9f, 0x9c, 0x99, 0x95, 0x92, 0x8f, 0x8c, 0x89, 0x86, 0x83, 
	0x80, 0x7d, 0x79, 0x76, 0x73, 0x70, 0x6d, 0x6a, 0x67, 0x64, 0x61, 0x5e, 0x5b, 0x58, 0x55, 0x52, 
	0x4f, 0x4c, 0x49, 0x47, 0x44, 0x41, 0x3e, 0x3c, 0x39, 0x36, 0x34, 0x31, 0x2f, 0x2d, 0x2a, 0x28, 
	0x26, 0x24, 0x21, 0x1f, 0x1d, 0x1b, 0x1a, 0x18, 0x16, 0x14, 0x13, 0x11, 0x10, 0x0e, 0x0d, 0x0b, 
	0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x04, 0x03, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 
};

typedef union {
    struct {
        uint8_t R, G, B;
    };
    uint32_t packed;
} RGB_t;

#define MAKE_COLOR_FROM32(hex)      (RGB_t){ .R = hex & 0xFF, .G = (hex>>8) & 0xFF, .B = (hex>>16) & 0xFF }
#define MAKE_COLOR_RGB(r, g, b)     (RGB_t){ .R = r, .G = g, .B = b }
#define MAKE_COLOR_WHITE(value)     MAKE_COLOR_RGB(value, value, value)
#define COLOR_BLACK                 MAKE_COLOR_RGB(0x00, 0x00, 0x00)

#define COLOR_RED_HIGH              MAKE_COLOR_RGB(0xFF, 0x00, 0x00)
#define COLOR_RED_MED               MAKE_COLOR_RGB(0x77, 0x00, 0x00)
#define COLOR_RED_LOW               MAKE_COLOR_RGB(0x33, 0x00, 0x00)

#define COLOR_GREEN_HIGH            MAKE_COLOR_RGB(0x00, 0xFF, 0x00)
#define COLOR_GREEN_MED             MAKE_COLOR_RGB(0x00, 0x77, 0x00)
#define COLOR_GREEN_LOW             MAKE_COLOR_RGB(0x00, 0x33, 0x00)

#define COLOR_BLUE_HIGH             MAKE_COLOR_RGB(0x00, 0x00, 0xFF)
#define COLOR_BLUE_MED              MAKE_COLOR_RGB(0x00, 0x00, 0x77)
#define COLOR_BLUE_LOW              MAKE_COLOR_RGB(0x00, 0x00, 0x33)

#define COLOR_MAGENTA_HIGH          MAKE_COLOR_RGB(0xFF, 0x00, 0xFF)
#define COLOR_CYAN_HIGH             MAKE_COLOR_RGB(0x00, 0xFF, 0xFF)
#define COLOR_YELLOW_HIGH           MAKE_COLOR_RGB(0xFF, 0xFF, 0x00)

#define COLOR_EQUAL(a, b)           ((a).packed == (b).packed)


#define DECREMENT_OR_ZERO(value, decr) (((value) > (decr)) ? ((value) - (decr)) : 0)

#define DECREMENT_PERCENTAGE(value, perc) ((uint8_t)MAX(0, (value) - ((value) * (perc)) / 100))


#define COLOR_DECREMENT(color_t, perc) \
    MAKE_COLOR_RGB( \
        DECREMENT_PERCENTAGE(color_t.R, perc), \
        DECREMENT_PERCENTAGE(color_t.G, perc), \
        DECREMENT_PERCENTAGE(color_t.B, perc) \
    )

#define COLOR_SET_BRIGHTNESS(color, percent) \
    ({ \
        RGB_t result = color; \
        uint8_t lut_index = (percent * 255) / 100; \
        uint8_t factor = SIN_LUT[lut_index]; \
        result.R = ((uint16_t)result.R * factor) >> 8; \
        result.G = ((uint16_t)result.G * factor) >> 8; \
        result.B = ((uint16_t)result.B * factor) >> 8; \
        result; \
    })
