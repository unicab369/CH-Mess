
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	3250006f          	j	b24 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0bf2                	slli	s7,s7,0x1c
   a:	0000                	unimp
   c:	0b9a                	slli	s7,s7,0x6
	...
  2e:	0000                	unimp
  30:	1b28                	addi	a0,sp,440
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0b9a                	slli	s7,s7,0x6
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0b9a                	slli	s7,s7,0x6
  42:	0000                	unimp
  44:	0b9a                	slli	s7,s7,0x6
  46:	0000                	unimp
  48:	0b9a                	slli	s7,s7,0x6
  4a:	0000                	unimp
  4c:	0b9a                	slli	s7,s7,0x6
  4e:	0000                	unimp
  50:	0b9a                	slli	s7,s7,0x6
  52:	0000                	unimp
  54:	0b9a                	slli	s7,s7,0x6
  56:	0000                	unimp
  58:	0b9a                	slli	s7,s7,0x6
  5a:	0000                	unimp
  5c:	0b9a                	slli	s7,s7,0x6
  5e:	0000                	unimp
  60:	1f74                	addi	a3,sp,956
  62:	0000                	unimp
  64:	003c                	addi	a5,sp,8
  66:	2000                	fld	fs0,0(s0)
  68:	0b9a                	slli	s7,s7,0x6
  6a:	0000                	unimp
  6c:	0b9a                	slli	s7,s7,0x6
  6e:	0000                	unimp
  70:	0b9a                	slli	s7,s7,0x6
  72:	0000                	unimp
  74:	0b9a                	slli	s7,s7,0x6
  76:	0000                	unimp
  78:	1b5a                	slli	s6,s6,0x36
  7a:	0000                	unimp
  7c:	1cfa                	slli	s9,s9,0x3e
  7e:	0000                	unimp
  80:	0b9a                	slli	s7,s7,0x6
  82:	0000                	unimp
  84:	0b9a                	slli	s7,s7,0x6
  86:	0000                	unimp
  88:	0b9a                	slli	s7,s7,0x6
  8a:	0000                	unimp
  8c:	0b9a                	slli	s7,s7,0x6
  8e:	0000                	unimp
  90:	0b9a                	slli	s7,s7,0x6
  92:	0000                	unimp
  94:	0b9a                	slli	s7,s7,0x6
  96:	0000                	unimp
  98:	0b9a                	slli	s7,s7,0x6
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
      a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
      a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
      a8:	862e                	mv	a2,a1
      aa:	85aa                	mv	a1,a0
      ac:	557d                	li	a0,-1
      ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
      b0:	4685                	li	a3,1
      b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
      b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
      ba:	0606                	slli	a2,a2,0x1
      bc:	0686                	slli	a3,a3,0x1
      be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
      c2:	4501                	li	a0,0
      c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
      c8:	8d91                	sub	a1,a1,a2
      ca:	8d55                	or	a0,a0,a3
      cc:	8285                	srli	a3,a3,0x1
      ce:	8205                	srli	a2,a2,0x1
      d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
      d2:	8082                	ret

000000d4 <__umodsi3>:
      d4:	8286                	mv	t0,ra
      d6:	3fc9                	jal	a8 <__hidden___udivsi3>
      d8:	852e                	mv	a0,a1
      da:	8282                	jr	t0
      dc:	40a00533          	neg	a0,a0
      e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
      e4:	40b005b3          	neg	a1,a1
      e8:	b7c1                	j	a8 <__hidden___udivsi3>
      ea:	40b005b3          	neg	a1,a1
      ee:	8286                	mv	t0,ra
      f0:	3f65                	jal	a8 <__hidden___udivsi3>
      f2:	40a00533          	neg	a0,a0
      f6:	8282                	jr	t0

000000f8 <__modsi3>:
      f8:	8286                	mv	t0,ra
      fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
      fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
     102:	375d                	jal	a8 <__hidden___udivsi3>
     104:	852e                	mv	a0,a1
     106:	8282                	jr	t0
     108:	40b005b3          	neg	a1,a1
     10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
     110:	40a00533          	neg	a0,a0
     114:	3f51                	jal	a8 <__hidden___udivsi3>
     116:	40b00533          	neg	a0,a1
     11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
{
     11e:	1131                	addi	sp,sp,-20
     120:	c426                	sw	s1,8(sp)
     122:	c806                	sw	ra,16(sp)
     124:	c622                	sw	s0,12(sp)
     126:	84ae                	mv	s1,a1
     128:	87aa                	mv	a5,a0
     12a:	85b2                	mv	a1,a2
	int overflow = 0;
     12c:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     12e:	cab5                	beqz	a3,1a2 <mini_pad+0x84>
	if(len > pad_to) {
     130:	0096d463          	bge	a3,s1,138 <mini_pad+0x1a>
     134:	84b6                	mv	s1,a3
		overflow = 1;
     136:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     138:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     13c:	00045363          	bgez	s0,142 <mini_pad+0x24>
     140:	4401                	li	s0,0
     142:	8622                	mv	a2,s0
     144:	853a                	mv	a0,a4
     146:	c23e                	sw	a5,4(sp)
     148:	c01a                	sw	t1,0(sp)
     14a:	6a3000ef          	jal	ra,fec <memset>
     14e:	4302                	lw	t1,0(sp)
     150:	4792                	lw	a5,4(sp)
     152:	872a                	mv	a4,a0
     154:	008506b3          	add	a3,a0,s0
     158:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     15a:	40c485b3          	sub	a1,s1,a2
     15e:	04b04463          	bgtz	a1,1a6 <mini_pad+0x88>
     162:	0004d363          	bgez	s1,168 <mini_pad+0x4a>
     166:	4481                	li	s1,0
     168:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     16c:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     170:	02030463          	beqz	t1,198 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     174:	02c77263          	bgeu	a4,a2,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     178:	02a00793          	li	a5,42
     17c:	fef60fa3          	sb	a5,-1(a2)
     180:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     184:	00d77a63          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     188:	fef60f23          	sb	a5,-2(a2)
     18c:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     190:	00d77463          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     194:	fef60ea3          	sb	a5,-3(a2)
}
     198:	40c2                	lw	ra,16(sp)
     19a:	4432                	lw	s0,12(sp)
     19c:	44a2                	lw	s1,8(sp)
     19e:	0151                	addi	sp,sp,20
     1a0:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1a2:	86a6                	mv	a3,s1
     1a4:	bf51                	j	138 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1a6:	00c785b3          	add	a1,a5,a2
     1aa:	0005c503          	lbu	a0,0(a1)
     1ae:	00c685b3          	add	a1,a3,a2
     1b2:	0605                	addi	a2,a2,1
     1b4:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1b8:	b74d                	j	15a <mini_pad+0x3c>

000001ba <_puts>:
{
     1ba:	832a                	mv	t1,a0
     1bc:	852e                	mv	a0,a1
	if(!buf) return len;
     1be:	ce01                	beqz	a2,1d6 <_puts+0x1c>
	char * p0 = b->buffer;
     1c0:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1c4:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1c6:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1c8:	00a74863          	blt	a4,a0,1d8 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1cc:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1d0:	4248                	lw	a0,4(a2)
     1d2:	40550533          	sub	a0,a0,t0
}
     1d6:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1d8:	4614                	lw	a3,8(a2)
     1da:	fff68593          	addi	a1,a3,-1
     1de:	4214                	lw	a3,0(a2)
     1e0:	96ae                	add	a3,a3,a1
     1e2:	fed785e3          	beq	a5,a3,1cc <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1e6:	00178693          	addi	a3,a5,1
     1ea:	c254                	sw	a3,4(a2)
     1ec:	00e306b3          	add	a3,t1,a4
     1f0:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     1f4:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     1f6:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     1fa:	b7f1                	j	1c6 <_puts+0xc>

000001fc <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     1fc:	e0000737          	lui	a4,0xe0000
     200:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     204:	0f470693          	addi	a3,a4,244
     208:	0807f793          	andi	a5,a5,128
     20c:	fbf5                	bnez	a5,200 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     20e:	783027b7          	lui	a5,0x78302
     212:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     216:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     218:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     21a:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     21e:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     220:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     222:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     226:	0807f793          	andi	a5,a5,128
     22a:	ffe5                	bnez	a5,222 <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     22c:	00e557b3          	srl	a5,a0,a4
     230:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     234:	03000793          	li	a5,48
     238:	00d35463          	bge	t1,a3,240 <PrintHex+0x44>
     23c:	05700793          	li	a5,87
     240:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     242:	07a2                	slli	a5,a5,0x8
     244:	0857e793          	ori	a5,a5,133
     248:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     24c:	1771                	addi	a4,a4,-4
     24e:	fcb71ae3          	bne	a4,a1,222 <PrintHex+0x26>
}
     252:	8082                	ret

00000254 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     254:	1101                	addi	sp,sp,-32
     256:	ce06                	sw	ra,28(sp)
     258:	cc22                	sw	s0,24(sp)
     25a:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     25c:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     25e:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     260:	00055763          	bgez	a0,26e <mini_itoa.part.0+0x1a>
     264:	e689                	bnez	a3,26e <mini_itoa.part.0+0x1a>
		negative = 1;
     266:	4785                	li	a5,1
		value = -value;
     268:	40a00333          	neg	t1,a0
		negative = 1;
     26c:	c03e                	sw	a5,0(sp)
     26e:	06100413          	li	s0,97
     272:	c219                	beqz	a2,278 <mini_itoa.part.0+0x24>
     274:	04100413          	li	s0,65
	int	negative = 0;
     278:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     27a:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     27c:	851a                	mv	a0,t1
     27e:	c83a                	sw	a4,16(sp)
     280:	c21a                	sw	t1,4(sp)
     282:	c62e                	sw	a1,12(sp)
     284:	c41a                	sw	t1,8(sp)
     286:	35b9                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     288:	47a5                	li	a5,9
     28a:	4322                	lw	t1,8(sp)
     28c:	45b2                	lw	a1,12(sp)
     28e:	4742                	lw	a4,16(sp)
     290:	0ff57693          	andi	a3,a0,255
     294:	06a7e163          	bltu	a5,a0,2f6 <mini_itoa.part.0+0xa2>
     298:	03068693          	addi	a3,a3,48
     29c:	0ff6f693          	andi	a3,a3,255
     2a0:	00148793          	addi	a5,s1,1
     2a4:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2a8:	851a                	mv	a0,t1
     2aa:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2ac:	c63e                	sw	a5,12(sp)
		value /= radix;
     2ae:	c42e                	sw	a1,8(sp)
     2b0:	3be5                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
     2b2:	4692                	lw	a3,4(sp)
     2b4:	45a2                	lw	a1,8(sp)
     2b6:	47b2                	lw	a5,12(sp)
     2b8:	4742                	lw	a4,16(sp)
		value /= radix;
     2ba:	832a                	mv	t1,a0
	} while (value > 0);
     2bc:	02b6fb63          	bgeu	a3,a1,2f2 <mini_itoa.part.0+0x9e>
	if (negative)
     2c0:	4682                	lw	a3,0(sp)
     2c2:	c699                	beqz	a3,2d0 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2c4:	02d00693          	li	a3,45
     2c8:	00d78023          	sb	a3,0(a5)
     2cc:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2d0:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2d4:	01f55693          	srli	a3,a0,0x1f
     2d8:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2da:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2de:	8685                	srai	a3,a3,0x1
     2e0:	4601                	li	a2,0
     2e2:	17fd                	addi	a5,a5,-1
     2e4:	00d64b63          	blt	a2,a3,2fa <mini_itoa.part.0+0xa6>
}
     2e8:	40f2                	lw	ra,28(sp)
     2ea:	4462                	lw	s0,24(sp)
     2ec:	44d2                	lw	s1,20(sp)
     2ee:	6105                	addi	sp,sp,32
     2f0:	8082                	ret
	} while (value > 0);
     2f2:	84be                	mv	s1,a5
     2f4:	b761                	j	27c <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2f6:	96a2                	add	a3,a3,s0
     2f8:	b755                	j	29c <mini_itoa.part.0+0x48>
		char j = buffer[i];
     2fa:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     2fe:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     302:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     306:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     308:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     30c:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     310:	bfc9                	j	2e2 <mini_itoa.part.0+0x8e>

00000312 <prefill_pixel>:
	ssd1306_renderArea(0, 7, 0, SSD1306_W);
}

//! compute pixel
void prefill_pixel(uint8_t x, uint8_t y) {
    if (x >= SSD1306_W || y >= SSD1306_H) return; // Skip if out of bounds
     312:	01851793          	slli	a5,a0,0x18
     316:	87e1                	srai	a5,a5,0x18
     318:	0207ca63          	bltz	a5,34c <prefill_pixel+0x3a>
     31c:	03f00793          	li	a5,63
     320:	02b7e663          	bltu	a5,a1,34c <prefill_pixel+0x3a>
    M_Page_Mask mask = page_masks[y];
     324:	00159793          	slli	a5,a1,0x1
     328:	11418593          	addi	a1,gp,276 # 20000510 <page_masks>
     32c:	95be                	add	a1,a1,a5
    frame_buffer[mask.page][x] |= mask.bitmask;
     32e:	0005c783          	lbu	a5,0(a1)
     332:	00779713          	slli	a4,a5,0x7
     336:	ce818793          	addi	a5,gp,-792 # 200000e4 <frame_buffer>
     33a:	97ba                	add	a5,a5,a4
     33c:	953e                	add	a0,a0,a5
     33e:	00054703          	lbu	a4,0(a0)
     342:	0015c783          	lbu	a5,1(a1)
     346:	8fd9                	or	a5,a5,a4
     348:	00f50023          	sb	a5,0(a0)
}
     34c:	8082                	ret

0000034e <prefill_fastHorLine>:
//! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


//! compute_fastHorLine
void prefill_fastHorLine(uint8_t y, uint8_t x0, uint8_t x1) {
    if (y >= SSD1306_H) return;
     34e:	03f00793          	li	a5,63
     352:	04a7e163          	bltu	a5,a0,394 <prefill_fastHorLine+0x46>
    
	// Clamp x-coordinates
	if (x0 >= SSD1306_W) x0 = SSD1306_W_LIMIT;
     356:	01859793          	slli	a5,a1,0x18
     35a:	87e1                	srai	a5,a5,0x18
     35c:	0007d463          	bgez	a5,364 <prefill_fastHorLine+0x16>
     360:	07f00593          	li	a1,127
	if (x1 >= SSD1306_W) x1 = SSD1306_W_LIMIT;
     364:	01861793          	slli	a5,a2,0x18
     368:	87e1                	srai	a5,a5,0x18
     36a:	0007d463          	bgez	a5,372 <prefill_fastHorLine+0x24>
     36e:	07f00613          	li	a2,127

    M_Page_Mask mask = page_masks[y];
     372:	00151793          	slli	a5,a0,0x1
     376:	11418513          	addi	a0,gp,276 # 20000510 <page_masks>
     37a:	953e                	add	a0,a0,a5
     37c:	00054783          	lbu	a5,0(a0)
     380:	00154683          	lbu	a3,1(a0)
    for (uint8_t x = x0; x <= x1; x++) {
     384:	079e                	slli	a5,a5,0x7
     386:	00b78733          	add	a4,a5,a1
     38a:	ce818793          	addi	a5,gp,-792 # 200000e4 <frame_buffer>
     38e:	97ba                	add	a5,a5,a4
     390:	00b67363          	bgeu	a2,a1,396 <prefill_fastHorLine+0x48>
        frame_buffer[mask.page][x] |= mask.bitmask;
    }
}
     394:	8082                	ret
        frame_buffer[mask.page][x] |= mask.bitmask;
     396:	0007c703          	lbu	a4,0(a5)
    for (uint8_t x = x0; x <= x1; x++) {
     39a:	0585                	addi	a1,a1,1
     39c:	0ff5f593          	andi	a1,a1,255
        frame_buffer[mask.page][x] |= mask.bitmask;
     3a0:	8f55                	or	a4,a4,a3
     3a2:	00e78023          	sb	a4,0(a5)
    for (uint8_t x = x0; x <= x1; x++) {
     3a6:	0785                	addi	a5,a5,1
     3a8:	b7e5                	j	390 <prefill_fastHorLine+0x42>

000003aa <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     3aa:	400057b7          	lui	a5,0x40005
     3ae:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     3b2:	40078793          	addi	a5,a5,1024
     3b6:	10077713          	andi	a4,a4,256
     3ba:	cf09                	beqz	a4,3d4 <i2c_error+0x2a>
     3bc:	0147d703          	lhu	a4,20(a5)
     3c0:	4505                	li	a0,1
     3c2:	0742                	slli	a4,a4,0x10
     3c4:	8341                	srli	a4,a4,0x10
     3c6:	eff77713          	andi	a4,a4,-257
     3ca:	0742                	slli	a4,a4,0x10
     3cc:	8341                	srli	a4,a4,0x10
     3ce:	00e79a23          	sh	a4,20(a5)
     3d2:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     3d4:	0147d703          	lhu	a4,20(a5)
     3d8:	40077713          	andi	a4,a4,1024
     3dc:	cf09                	beqz	a4,3f6 <i2c_error+0x4c>
     3de:	0147d703          	lhu	a4,20(a5)
     3e2:	4509                	li	a0,2
     3e4:	0742                	slli	a4,a4,0x10
     3e6:	8341                	srli	a4,a4,0x10
     3e8:	bff77713          	andi	a4,a4,-1025
     3ec:	0742                	slli	a4,a4,0x10
     3ee:	8341                	srli	a4,a4,0x10
     3f0:	00e79a23          	sh	a4,20(a5)
     3f4:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     3f6:	0147d703          	lhu	a4,20(a5)
     3fa:	20077713          	andi	a4,a4,512
     3fe:	cf09                	beqz	a4,418 <i2c_error+0x6e>
     400:	0147d703          	lhu	a4,20(a5)
     404:	450d                	li	a0,3
     406:	0742                	slli	a4,a4,0x10
     408:	8341                	srli	a4,a4,0x10
     40a:	dff77713          	andi	a4,a4,-513
     40e:	0742                	slli	a4,a4,0x10
     410:	8341                	srli	a4,a4,0x10
     412:	00e79a23          	sh	a4,20(a5)
     416:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     418:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     41c:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     41e:	832d                	srli	a4,a4,0xb
     420:	8b05                	andi	a4,a4,1
     422:	cf01                	beqz	a4,43a <i2c_error+0x90>
     424:	0147d703          	lhu	a4,20(a5)
     428:	76fd                	lui	a3,0xfffff
     42a:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     42e:	0742                	slli	a4,a4,0x10
     430:	8341                	srli	a4,a4,0x10
     432:	8f75                	and	a4,a4,a3
     434:	00e79a23          	sh	a4,20(a5)
     438:	4511                	li	a0,4
}
     43a:	8082                	ret

0000043c <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     43c:	1151                	addi	sp,sp,-12
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     43e:	6789                	lui	a5,0x2
{
     440:	c222                	sw	s0,4(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     442:	71078793          	addi	a5,a5,1808 # 2710 <_data_lma+0x3cc>
{
     446:	c026                	sw	s1,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     448:	c6f1ae23          	sw	a5,-900(gp) # 20000078 <_i2c_timeout>
{
     44c:	c406                	sw	ra,8(sp)
     44e:	84aa                	mv	s1,a0
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     450:	4681                	li	a3,0
     452:	c7c18413          	addi	s0,gp,-900 # 20000078 <_i2c_timeout>
     456:	40005637          	lui	a2,0x40005
     45a:	41865703          	lhu	a4,1048(a2) # 40005418 <_eusrstack+0x20004c18>
     45e:	8b09                	andi	a4,a4,2
     460:	e709                	bnez	a4,46a <i2c_ping+0x2e>
     462:	c291                	beqz	a3,466 <i2c_ping+0x2a>
     464:	c01c                	sw	a5,0(s0)
	i2c_err_t i2c_ret = I2C_OK;
     466:	4501                	li	a0,0
     468:	a809                	j	47a <i2c_ping+0x3e>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     46a:	17fd                	addi	a5,a5,-1
     46c:	4685                	li	a3,1
     46e:	f7f5                	bnez	a5,45a <i2c_ping+0x1e>
     470:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
     474:	3f1d                	jal	3aa <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     476:	e111                	bnez	a0,47a <i2c_ping+0x3e>
     478:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     47a:	40005737          	lui	a4,0x40005
     47e:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     482:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     486:	07c2                	slli	a5,a5,0x10
     488:	83c1                	srli	a5,a5,0x10
     48a:	1007e793          	ori	a5,a5,256
     48e:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     492:	00030737          	lui	a4,0x30
     496:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     498:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     49c:	01079613          	slli	a2,a5,0x10
     4a0:	4185d783          	lhu	a5,1048(a1)
     4a4:	8241                	srli	a2,a2,0x10
     4a6:	07c2                	slli	a5,a5,0x10
     4a8:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     4aa:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     4ac:	fee796e3          	bne	a5,a4,498 <i2c_ping+0x5c>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     4b0:	e531                	bnez	a0,4fc <i2c_ping+0xc0>
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     4b2:	0486                	slli	s1,s1,0x1
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     4b4:	6789                	lui	a5,0x2
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     4b6:	40959823          	sh	s1,1040(a1)
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     4ba:	71078793          	addi	a5,a5,1808 # 2710 <_data_lma+0x3cc>
	return (status & status_mask) == status_mask; 
     4be:	000706b7          	lui	a3,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     4c2:	c01c                	sw	a5,0(s0)
     4c4:	4581                	li	a1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     4c6:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     4ca:	08268693          	addi	a3,a3,130 # 70082 <lib_i2c.c.bfb73fe7+0x665d7>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     4ce:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     4d2:	01071613          	slli	a2,a4,0x10
     4d6:	41835703          	lhu	a4,1048(t1)
     4da:	8241                	srli	a2,a2,0x10
     4dc:	0742                	slli	a4,a4,0x10
     4de:	8f51                	or	a4,a4,a2
	return (status & status_mask) == status_mask; 
     4e0:	8f75                	and	a4,a4,a3
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     4e2:	00d71563          	bne	a4,a3,4ec <i2c_ping+0xb0>
     4e6:	c999                	beqz	a1,4fc <i2c_ping+0xc0>
     4e8:	c01c                	sw	a5,0(s0)
     4ea:	a809                	j	4fc <i2c_ping+0xc0>
     4ec:	17fd                	addi	a5,a5,-1
     4ee:	4585                	li	a1,1
     4f0:	fff9                	bnez	a5,4ce <i2c_ping+0x92>
     4f2:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
     4f6:	3d55                	jal	3aa <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     4f8:	e111                	bnez	a0,4fc <i2c_ping+0xc0>
     4fa:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     4fc:	40005737          	lui	a4,0x40005
     500:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     504:	40a2                	lw	ra,8(sp)
     506:	4412                	lw	s0,4(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     508:	07c2                	slli	a5,a5,0x10
     50a:	83c1                	srli	a5,a5,0x10
     50c:	2007e793          	ori	a5,a5,512
     510:	40f71023          	sh	a5,1024(a4)
}
     514:	4482                	lw	s1,0(sp)
     516:	0131                	addi	sp,sp,12
     518:	8082                	ret

0000051a <prefill_line.constprop.0>:
		}
	}
}

//! compute line (Bresenham's algorithm)
void prefill_line(M_Point p0, M_Point p1, uint8_t thickness) {
     51a:	fdc10113          	addi	sp,sp,-36
     51e:	00855693          	srli	a3,a0,0x8
     522:	0ff57313          	andi	t1,a0,255
    // Clamp coordinates to display bounds
    p0.x = (p0.x < SSD1306_W) ? p0.x : SSD1306_W_LIMIT;
     526:	0562                	slli	a0,a0,0x18
void prefill_line(M_Point p0, M_Point p1, uint8_t thickness) {
     528:	0085d713          	srli	a4,a1,0x8
     52c:	d022                	sw	s0,32(sp)
     52e:	ce26                	sw	s1,28(sp)
    p0.x = (p0.x < SSD1306_W) ? p0.x : SSD1306_W_LIMIT;
     530:	8561                	srai	a0,a0,0x18
     532:	0ff6f693          	andi	a3,a3,255
     536:	0ff5f293          	andi	t0,a1,255
     53a:	0ff77713          	andi	a4,a4,255
     53e:	00055463          	bgez	a0,546 <prefill_line.constprop.0+0x2c>
     542:	07f00313          	li	t1,127
    p0.y = (p0.y < SSD1306_H) ? p0.y : SSD1306_H_LIMIT;
     546:	03f00613          	li	a2,63
     54a:	0ff6f793          	andi	a5,a3,255
     54e:	00d67463          	bgeu	a2,a3,556 <prefill_line.constprop.0+0x3c>
     552:	03f00793          	li	a5,63
    p1.x = (p1.x < SSD1306_W) ? p1.x : SSD1306_W_LIMIT;
     556:	01829693          	slli	a3,t0,0x18
     55a:	86e1                	srai	a3,a3,0x18
     55c:	0006d463          	bgez	a3,564 <prefill_line.constprop.0+0x4a>
     560:	07f00293          	li	t0,127
    p1.y = (p1.y < SSD1306_H) ? p1.y : SSD1306_H_LIMIT;
     564:	03f00693          	li	a3,63
     568:	0ff77593          	andi	a1,a4,255
     56c:	00e6f463          	bgeu	a3,a4,574 <prefill_line.constprop.0+0x5a>
     570:	03f00593          	li	a1,63

    // Bresenham's line algorithm
    int16_t dx = abs(p1.x - p0.x);
     574:	406286b3          	sub	a3,t0,t1
     578:	41f6d713          	srai	a4,a3,0x1f
     57c:	8eb9                	xor	a3,a3,a4
     57e:	8e99                	sub	a3,a3,a4
     580:	01069713          	slli	a4,a3,0x10
     584:	8741                	srai	a4,a4,0x10
     586:	c23a                	sw	a4,4(sp)
    int16_t dy = -abs(p1.y - p0.y);
     588:	40f58733          	sub	a4,a1,a5
     58c:	41f75513          	srai	a0,a4,0x1f
     590:	00e54633          	xor	a2,a0,a4
     594:	8e09                	sub	a2,a2,a0
     596:	0642                	slli	a2,a2,0x10
     598:	8241                	srli	a2,a2,0x10
     59a:	40c00733          	neg	a4,a2
     59e:	0742                	slli	a4,a4,0x10
     5a0:	8741                	srai	a4,a4,0x10
     5a2:	c43a                	sw	a4,8(sp)
    int16_t sx = p0.x < p1.x ? 1 : -1;
     5a4:	4405                	li	s0,1
     5a6:	00536363          	bltu	t1,t0,5ac <prefill_line.constprop.0+0x92>
     5aa:	547d                	li	s0,-1
    int16_t sy = p0.y < p1.y ? 1 : -1;
     5ac:	4485                	li	s1,1
     5ae:	00b7e363          	bltu	a5,a1,5b4 <prefill_line.constprop.0+0x9a>
     5b2:	54fd                	li	s1,-1
    int16_t err = dx + dy;
     5b4:	01069713          	slli	a4,a3,0x10
     5b8:	8341                	srli	a4,a4,0x10
	while (1) {
		// Draw the pixel(s)
		if (thickness == 1) {
			// Fast path for single-pixel
			if (p0.x < SSD1306_W && p0.y < SSD1306_H) {
                M_Page_Mask mask = page_masks[p0.y];
     5ba:	11418513          	addi	a0,gp,276 # 20000510 <page_masks>
    int16_t err = dx + dy;
     5be:	c03a                	sw	a4,0(sp)
                M_Page_Mask mask = page_masks[p0.y];
     5c0:	c62a                	sw	a0,12(sp)
    int16_t err = dx + dy;
     5c2:	8f11                	sub	a4,a4,a2
     5c4:	0742                	slli	a4,a4,0x10
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     5c6:	ce818513          	addi	a0,gp,-792 # 200000e4 <frame_buffer>
    int16_t err = dx + dy;
     5ca:	8741                	srai	a4,a4,0x10
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     5cc:	c82a                	sw	a0,16(sp)
			if (p0.x < SSD1306_W && p0.y < SSD1306_H) {
     5ce:	01831513          	slli	a0,t1,0x18
     5d2:	8561                	srai	a0,a0,0x18
     5d4:	02055163          	bgez	a0,5f6 <prefill_line.constprop.0+0xdc>
			}
		}

		// Bresenham Advance
		if (p0.x == p1.x && p0.y == p1.y) break;
		e2 = err << 1; // e2 = 2*err via bit shift
     5d8:	00171513          	slli	a0,a4,0x1
		if (e2 >= dy) { err += dy; p0.x += sx; }
     5dc:	43a2                	lw	t2,8(sp)
		e2 = err << 1; // e2 = 2*err via bit shift
     5de:	0542                	slli	a0,a0,0x10
     5e0:	8541                	srai	a0,a0,0x10
		if (e2 >= dy) { err += dy; p0.x += sx; }
     5e2:	04755963          	bge	a0,t2,634 <prefill_line.constprop.0+0x11a>
		if (e2 <= dx) { err += dx; p0.y += sy; }
     5e6:	4682                	lw	a3,0(sp)
     5e8:	97a6                	add	a5,a5,s1
     5ea:	0ff7f793          	andi	a5,a5,255
     5ee:	9736                	add	a4,a4,a3
     5f0:	0742                	slli	a4,a4,0x10
     5f2:	8741                	srai	a4,a4,0x10
     5f4:	bfe9                	j	5ce <prefill_line.constprop.0+0xb4>
			if (p0.x < SSD1306_W && p0.y < SSD1306_H) {
     5f6:	03f00513          	li	a0,63
     5fa:	02f56463          	bltu	a0,a5,622 <prefill_line.constprop.0+0x108>
                M_Page_Mask mask = page_masks[p0.y];
     5fe:	4532                	lw	a0,12(sp)
     600:	00179393          	slli	t2,a5,0x1
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     604:	46c2                	lw	a3,16(sp)
                M_Page_Mask mask = page_masks[p0.y];
     606:	93aa                	add	t2,t2,a0
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     608:	0003c503          	lbu	a0,0(t2)
     60c:	0013c383          	lbu	t2,1(t2)
     610:	051e                	slli	a0,a0,0x7
     612:	9536                	add	a0,a0,a3
     614:	951a                	add	a0,a0,t1
     616:	00054683          	lbu	a3,0(a0)
     61a:	00d3e3b3          	or	t2,t2,a3
     61e:	00750023          	sb	t2,0(a0)
		if (p0.x == p1.x && p0.y == p1.y) break;
     622:	fa629be3          	bne	t0,t1,5d8 <prefill_line.constprop.0+0xbe>
     626:	faf599e3          	bne	a1,a5,5d8 <prefill_line.constprop.0+0xbe>
	}
}
     62a:	5402                	lw	s0,32(sp)
     62c:	44f2                	lw	s1,28(sp)
     62e:	02410113          	addi	sp,sp,36
     632:	8082                	ret
		if (e2 <= dx) { err += dx; p0.y += sy; }
     634:	4692                	lw	a3,4(sp)
     636:	8f11                	sub	a4,a4,a2
		if (e2 >= dy) { err += dy; p0.x += sx; }
     638:	0742                	slli	a4,a4,0x10
     63a:	9322                	add	t1,t1,s0
     63c:	8741                	srai	a4,a4,0x10
     63e:	0ff37313          	andi	t1,t1,255
		if (e2 <= dx) { err += dx; p0.y += sy; }
     642:	f8a6c6e3          	blt	a3,a0,5ce <prefill_line.constprop.0+0xb4>
     646:	b745                	j	5e6 <prefill_line.constprop.0+0xcc>

00000648 <prefill_poly.part.0.constprop.0>:
//! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//! ***** Polygon Methods *****
//! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//! compute poligon
void prefill_poly(M_Point *pts, uint8_t num_pts, uint8_t thickness) {
     648:	1131                	addi	sp,sp,-20
     64a:	c426                	sw	s1,8(sp)
        prefill_line(pts[i], pts[i+1], thickness);
     64c:	64c1                	lui	s1,0x10
void prefill_poly(M_Point *pts, uint8_t num_pts, uint8_t thickness) {
     64e:	c622                	sw	s0,12(sp)
     650:	c806                	sw	ra,16(sp)
     652:	87aa                	mv	a5,a0
     654:	842e                	mv	s0,a1
    for (uint8_t i = 0; i < num_pts - 1; i++) {
     656:	4701                	li	a4,0
        prefill_line(pts[i], pts[i+1], thickness);
     658:	14fd                	addi	s1,s1,-1
     65a:	00171693          	slli	a3,a4,0x1
     65e:	96be                	add	a3,a3,a5
     660:	0036c583          	lbu	a1,3(a3)
     664:	0026c603          	lbu	a2,2(a3)
     668:	0016c503          	lbu	a0,1(a3)
     66c:	05a2                	slli	a1,a1,0x8
     66e:	8dd1                	or	a1,a1,a2
     670:	0006c603          	lbu	a2,0(a3)
     674:	0522                	slli	a0,a0,0x8
     676:	8de5                	and	a1,a1,s1
     678:	8d51                	or	a0,a0,a2
     67a:	8d65                	and	a0,a0,s1
     67c:	c23a                	sw	a4,4(sp)
     67e:	c03e                	sw	a5,0(sp)
     680:	3d69                	jal	51a <prefill_line.constprop.0>
    for (uint8_t i = 0; i < num_pts - 1; i++) {
     682:	4712                	lw	a4,4(sp)
     684:	fff40693          	addi	a3,s0,-1
     688:	4782                	lw	a5,0(sp)
     68a:	0705                	addi	a4,a4,1
     68c:	0ff77713          	andi	a4,a4,255
     690:	fcd745e3          	blt	a4,a3,65a <prefill_poly.part.0.constprop.0+0x12>
    if (num_pts < 3) return;  // Need at least 3 points for a polygon
    prefill_lines(pts, num_pts, thickness);
    prefill_line(pts[num_pts-1], pts[0], thickness);
     694:	0406                	slli	s0,s0,0x1
     696:	1479                	addi	s0,s0,-2
     698:	943e                	add	s0,s0,a5
     69a:	0017c583          	lbu	a1,1(a5)
     69e:	00144503          	lbu	a0,1(s0)
     6a2:	0007c703          	lbu	a4,0(a5)
     6a6:	00044783          	lbu	a5,0(s0)
     6aa:	05a2                	slli	a1,a1,0x8
     6ac:	0522                	slli	a0,a0,0x8
}
     6ae:	4432                	lw	s0,12(sp)
    prefill_line(pts[num_pts-1], pts[0], thickness);
     6b0:	8dd9                	or	a1,a1,a4
     6b2:	8d5d                	or	a0,a0,a5
}
     6b4:	40c2                	lw	ra,16(sp)
    prefill_line(pts[num_pts-1], pts[0], thickness);
     6b6:	8de5                	and	a1,a1,s1
     6b8:	8d65                	and	a0,a0,s1
}
     6ba:	44a2                	lw	s1,8(sp)
     6bc:	0151                	addi	sp,sp,20
    prefill_line(pts[num_pts-1], pts[0], thickness);
     6be:	bdb1                	j	51a <prefill_line.constprop.0>

000006c0 <prefill_verLine.constprop.0>:
void prefill_verLine(
     6c0:	1161                	addi	sp,sp,-8
    if (x >= SSD1306_W) return;
     6c2:	01851793          	slli	a5,a0,0x18
void prefill_verLine(
     6c6:	c222                	sw	s0,4(sp)
     6c8:	00b11023          	sh	a1,0(sp)
    if (x >= SSD1306_W) return;
     6cc:	87e1                	srai	a5,a5,0x18
     6ce:	0607c363          	bltz	a5,734 <prefill_verLine.constprop.0+0x74>
     6d2:	00014683          	lbu	a3,0(sp)
     6d6:	03f00593          	li	a1,63
     6da:	00114703          	lbu	a4,1(sp)
     6de:	0ff6f793          	andi	a5,a3,255
     6e2:	00d5f463          	bgeu	a1,a3,6ea <prefill_verLine.constprop.0+0x2a>
     6e6:	03f00793          	li	a5,63
     6ea:	03f00593          	li	a1,63
     6ee:	0ff77693          	andi	a3,a4,255
     6f2:	00e5f463          	bgeu	a1,a4,6fa <prefill_verLine.constprop.0+0x3a>
     6f6:	03f00693          	li	a3,63
	if (y_limit.l0 > y_limit.l1) {
     6fa:	00f6f563          	bgeu	a3,a5,704 <prefill_verLine.constprop.0+0x44>
     6fe:	873e                	mv	a4,a5
     700:	87b6                	mv	a5,a3
     702:	86ba                	mv	a3,a4
    uint8_t x_end = x + thickness - 1;
     704:	167d                	addi	a2,a2,-1
     706:	962a                	add	a2,a2,a0
     708:	0ff67713          	andi	a4,a2,255
    if (x_end >= SSD1306_W) x_end = SSD1306_W_LIMIT;
     70c:	0662                	slli	a2,a2,0x18
     70e:	8661                	srai	a2,a2,0x18
     710:	02064563          	bltz	a2,73a <prefill_verLine.constprop.0+0x7a>
	if (x_end < x) return;  // Skip if thickness causes overflow
     714:	02a76063          	bltu	a4,a0,734 <prefill_verLine.constprop.0+0x74>
	uint8_t x_len = x_end - x + 1;  // Precompute length
     718:	40a705b3          	sub	a1,a4,a0
     71c:	0585                	addi	a1,a1,1
     71e:	00179613          	slli	a2,a5,0x1
     722:	11418713          	addi	a4,gp,276 # 20000510 <page_masks>
     726:	0ff5f593          	andi	a1,a1,255
     72a:	963a                	add	a2,a2,a4
		uint8_t* row_start = &frame_buffer[mask.page][x];  	// Get row pointer
     72c:	ce818313          	addi	t1,gp,-792 # 200000e4 <frame_buffer>
	for (uint8_t y_pos = y_limit.l0; y_pos <= y_limit.l1; y_pos++) {
     730:	00f6f863          	bgeu	a3,a5,740 <prefill_verLine.constprop.0+0x80>
}
     734:	4412                	lw	s0,4(sp)
     736:	0121                	addi	sp,sp,8
     738:	8082                	ret
    if (x_end >= SSD1306_W) x_end = SSD1306_W_LIMIT;
     73a:	07f00713          	li	a4,127
     73e:	bfe9                	j	718 <prefill_verLine.constprop.0+0x58>
		uint8_t* row_start = &frame_buffer[mask.page][x];  	// Get row pointer
     740:	00064703          	lbu	a4,0(a2)
		M_Page_Mask mask = page_masks[y_pos];
     744:	00164283          	lbu	t0,1(a2)
		uint8_t* row_start = &frame_buffer[mask.page][x];  	// Get row pointer
     748:	071e                	slli	a4,a4,0x7
     74a:	972a                	add	a4,a4,a0
     74c:	971a                	add	a4,a4,t1
     74e:	00e58433          	add	s0,a1,a4
		for (uint8_t i = 0; i < x_len; i++) {
     752:	00871763          	bne	a4,s0,760 <prefill_verLine.constprop.0+0xa0>
	for (uint8_t y_pos = y_limit.l0; y_pos <= y_limit.l1; y_pos++) {
     756:	0785                	addi	a5,a5,1
     758:	0ff7f793          	andi	a5,a5,255
     75c:	0609                	addi	a2,a2,2
     75e:	bfc9                	j	730 <prefill_verLine.constprop.0+0x70>
			row_start[i] |= mask.bitmask;  					// Sequential access
     760:	00074383          	lbu	t2,0(a4)
     764:	0705                	addi	a4,a4,1
     766:	0072e3b3          	or	t2,t0,t2
     76a:	fe770fa3          	sb	t2,-1(a4)
     76e:	b7d5                	j	752 <prefill_verLine.constprop.0+0x92>

00000770 <prefill_horLine.constprop.0>:
void prefill_horLine(
     770:	1171                	addi	sp,sp,-4
     772:	00b11023          	sh	a1,0(sp)
    if (y >= SSD1306_H) return;
     776:	03f00793          	li	a5,63
     77a:	04a7e863          	bltu	a5,a0,7ca <prefill_horLine.constprop.0+0x5a>
     77e:	00014783          	lbu	a5,0(sp)
    if (x_limit.l0 >= SSD1306_W) x_limit.l0 = SSD1306_W_LIMIT;
     782:	01879713          	slli	a4,a5,0x18
     786:	8761                	srai	a4,a4,0x18
     788:	00075463          	bgez	a4,790 <prefill_horLine.constprop.0+0x20>
     78c:	07f00793          	li	a5,127
     790:	00114683          	lbu	a3,1(sp)
    if (x_limit.l1 >= SSD1306_W) x_limit.l1 = SSD1306_W_LIMIT;
     794:	01869713          	slli	a4,a3,0x18
     798:	8761                	srai	a4,a4,0x18
     79a:	02074a63          	bltz	a4,7ce <prefill_horLine.constprop.0+0x5e>
	if (x_limit.l0 > x_limit.l1) {
     79e:	00f6f563          	bgeu	a3,a5,7a8 <prefill_horLine.constprop.0+0x38>
     7a2:	873e                	mv	a4,a5
     7a4:	87b6                	mv	a5,a3
     7a6:	86ba                	mv	a3,a4
        M_Page_Mask mask = page_masks[y_pos];
     7a8:	00151713          	slli	a4,a0,0x1
     7ac:	11418513          	addi	a0,gp,276 # 20000510 <page_masks>
     7b0:	953a                	add	a0,a0,a4
     7b2:	00054703          	lbu	a4,0(a0)
     7b6:	00154583          	lbu	a1,1(a0)
     7ba:	071e                	slli	a4,a4,0x7
     7bc:	00f70633          	add	a2,a4,a5
     7c0:	ce818713          	addi	a4,gp,-792 # 200000e4 <frame_buffer>
     7c4:	9732                	add	a4,a4,a2
        for (uint8_t x_pos = x_limit.l0; x_pos <= x_limit.l1; x_pos++) {
     7c6:	00f6f763          	bgeu	a3,a5,7d4 <prefill_horLine.constprop.0+0x64>
}
     7ca:	0111                	addi	sp,sp,4
     7cc:	8082                	ret
    if (x_limit.l1 >= SSD1306_W) x_limit.l1 = SSD1306_W_LIMIT;
     7ce:	07f00693          	li	a3,127
     7d2:	bfd9                	j	7a8 <prefill_horLine.constprop.0+0x38>
            frame_buffer[mask.page][x_pos] |= mask.bitmask;
     7d4:	00074603          	lbu	a2,0(a4)
        for (uint8_t x_pos = x_limit.l0; x_pos <= x_limit.l1; x_pos++) {
     7d8:	0785                	addi	a5,a5,1
     7da:	0ff7f793          	andi	a5,a5,255
            frame_buffer[mask.page][x_pos] |= mask.bitmask;
     7de:	8e4d                	or	a2,a2,a1
     7e0:	00c70023          	sb	a2,0(a4)
     7e4:	0705                	addi	a4,a4,1
     7e6:	b7c5                	j	7c6 <prefill_horLine.constprop.0+0x56>

000007e8 <internal_handle_input.constprop.0>:
void handle_debug_input( int numbytes, uint8_t * data ) __attribute__((weak));
void handle_debug_input( int numbytes, uint8_t * data ) { (void)numbytes; (void)data; }

static void internal_handle_input( volatile uint32_t * dmdata0 )
{
	uint32_t dmd0 = *dmdata0;
     7e8:	e00007b7          	lui	a5,0xe0000
     7ec:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 && bytes < 16 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
     7f0:	8082                	ret

000007f2 <_write.constprop.0>:
//     status word = 0xcx = timed out.
// declare as weak to allow overriding.
WEAK int _write(int fd, const char *buf, int size)
{
	(void)fd;
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     7f2:	e0000737          	lui	a4,0xe0000
     7f6:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     7fa:	1111                	addi	sp,sp,-28
     7fc:	cc06                	sw	ra,24(sp)
     7fe:	ca22                	sw	s0,20(sp)
     800:	c826                	sw	s1,16(sp)
     802:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     804:	0c07f793          	andi	a5,a5,192
     808:	0c000693          	li	a3,192
     80c:	0cd78963          	beq	a5,a3,8de <_write.constprop.0+0xec>

	char buffer[4] = { 0 };
     810:	c602                	sw	zero,12(sp)
     812:	842e                	mv	s0,a1
	int place = 0;
	uint32_t lastdmd;
	uint32_t timeout = FUNCONF_DEBUGPRINTF_TIMEOUT; // Give up after ~120ms

	if( size == 0 )
     814:	e5f9                	bnez	a1,8e2 <_write.constprop.0+0xf0>
	{
		lastdmd = (*DMDATA0);
     816:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     81a:	c789                	beqz	a5,824 <_write.constprop.0+0x32>
     81c:	0807f793          	andi	a5,a5,128
     820:	e391                	bnez	a5,824 <_write.constprop.0+0x32>
     822:	37d9                	jal	7e8 <internal_handle_input.constprop.0>

		//buf += tosend;
		place += tosend;
	}
	return size;
}
     824:	40e2                	lw	ra,24(sp)
     826:	8522                	mv	a0,s0
     828:	4452                	lw	s0,20(sp)
     82a:	44c2                	lw	s1,16(sp)
     82c:	0171                	addi	sp,sp,28
     82e:	8082                	ret
		int tosend = size - place;
     830:	409405b3          	sub	a1,s0,s1
     834:	469d                	li	a3,7
     836:	872e                	mv	a4,a1
     838:	00b6d363          	bge	a3,a1,83e <_write.constprop.0+0x4c>
     83c:	471d                	li	a4,7
     83e:	001006b7          	lui	a3,0x100
     842:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     844:	e0000537          	lui	a0,0xe0000
     848:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     84c:	0f450313          	addi	t1,a0,244
     850:	08067293          	andi	t0,a2,128
     854:	06029d63          	bnez	t0,8ce <_write.constprop.0+0xdc>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     858:	c611                	beqz	a2,864 <_write.constprop.0+0x72>
     85a:	c43a                	sw	a4,8(sp)
     85c:	c22e                	sw	a1,4(sp)
     85e:	3769                	jal	7e8 <internal_handle_input.constprop.0>
     860:	4722                	lw	a4,8(sp)
     862:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     864:	4689                	li	a3,2
     866:	4601                	li	a2,0
     868:	00b6d463          	bge	a3,a1,870 <_write.constprop.0+0x7e>
     86c:	ffd70613          	addi	a2,a4,-3
     870:	4782                	lw	a5,0(sp)
     872:	00348593          	addi	a1,s1,3 # 10003 <lib_i2c.c.bfb73fe7+0x6558>
     876:	0068                	addi	a0,sp,12
     878:	95be                	add	a1,a1,a5
     87a:	c23a                	sw	a4,4(sp)
     87c:	796000ef          	jal	ra,1012 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     880:	4632                	lw	a2,12(sp)
     882:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     884:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     886:	e00006b7          	lui	a3,0xe0000
     88a:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     88e:	458d                	li	a1,3
     890:	00978633          	add	a2,a5,s1
		t = 0;
     894:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     896:	00064303          	lbu	t1,0(a2)
     89a:	0685                	addi	a3,a3,1
     89c:	007c                	addi	a5,sp,12
     89e:	00d78533          	add	a0,a5,a3
     8a2:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     8a6:	00d70563          	beq	a4,a3,8b0 <_write.constprop.0+0xbe>
     8aa:	0605                	addi	a2,a2,1
     8ac:	feb695e3          	bne	a3,a1,896 <_write.constprop.0+0xa4>
		buffer[0] = 0x80 | (tosend + 4);
     8b0:	00470693          	addi	a3,a4,4
     8b4:	f806e693          	ori	a3,a3,-128
     8b8:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     8bc:	4632                	lw	a2,12(sp)
     8be:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     8c2:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     8c4:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     8c8:	f684c4e3          	blt	s1,s0,830 <_write.constprop.0+0x3e>
     8cc:	bfa1                	j	824 <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     8ce:	16fd                	addi	a3,a3,-1
     8d0:	fea5                	bnez	a3,848 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     8d2:	00032783          	lw	a5,0(t1)
     8d6:	0c07e793          	ori	a5,a5,192
     8da:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     8de:	4401                	li	s0,0
     8e0:	b791                	j	824 <_write.constprop.0+0x32>
	if( size == 0 )
     8e2:	4481                	li	s1,0
     8e4:	b7d5                	j	8c8 <_write.constprop.0+0xd6>

000008e6 <__puts_uart>:
{
     8e6:	1151                	addi	sp,sp,-12
     8e8:	c222                	sw	s0,4(sp)
     8ea:	c406                	sw	ra,8(sp)
     8ec:	842e                	mv	s0,a1
	_write( 0, s, len );
     8ee:	3711                	jal	7f2 <_write.constprop.0>
}
     8f0:	40a2                	lw	ra,8(sp)
     8f2:	8522                	mv	a0,s0
     8f4:	4412                	lw	s0,4(sp)
     8f6:	0131                	addi	sp,sp,12
     8f8:	8082                	ret

000008fa <prefill_solid_poly>:
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
    // ===== [1] EDGE EXTRACTION =====
    struct Edge {
        uint8_t y_start, y_end;
        int16_t x_start, dx_dy;
    } edges[num_pts];
     8fa:	00159713          	slli	a4,a1,0x1
     8fe:	972e                	add	a4,a4,a1
     900:	0706                	slli	a4,a4,0x1
     902:	070d                	addi	a4,a4,3
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
     904:	fc810113          	addi	sp,sp,-56
    } edges[num_pts];
     908:	8309                	srli	a4,a4,0x2
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
     90a:	d822                	sw	s0,48(sp)
     90c:	d626                	sw	s1,44(sp)
     90e:	1820                	addi	s0,sp,56
     910:	da06                	sw	ra,52(sp)
    } edges[num_pts];
     912:	070a                	slli	a4,a4,0x2

    uint8_t edge_count = 0;
    uint8_t y_min = 255, y_max = 0;

    // Build edge table and find Y bounds
    for (uint8_t i = 0, j = num_pts-1; i < num_pts; j = i++) {
     914:	fff58613          	addi	a2,a1,-1
    } edges[num_pts];
     918:	40e10133          	sub	sp,sp,a4
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
     91c:	fca42c23          	sw	a0,-40(s0)
     920:	87ae                	mv	a5,a1
    } edges[num_pts];
     922:	fe242023          	sw	sp,-32(s0)
    for (uint8_t i = 0, j = num_pts-1; i < num_pts; j = i++) {
     926:	0ff67613          	andi	a2,a2,255
     92a:	86aa                	mv	a3,a0
     92c:	fe042223          	sw	zero,-28(s0)
    uint8_t y_min = 255, y_max = 0;
     930:	fe042423          	sw	zero,-24(s0)
    uint8_t edge_count = 0;
     934:	4301                	li	t1,0
    uint8_t y_min = 255, y_max = 0;
     936:	0ff00493          	li	s1,255
        // Skip horizontal edges (don't affect filling)
        if (pts[i].y == pts[j].y) continue;
     93a:	fd842583          	lw	a1,-40(s0)
     93e:	0606                	slli	a2,a2,0x1
     940:	0016c703          	lbu	a4,1(a3)
     944:	962e                	add	a2,a2,a1
     946:	00164583          	lbu	a1,1(a2)
     94a:	08b70e63          	beq	a4,a1,9e6 <prefill_solid_poly+0xec>
        if (pts[i].y < pts[j].y) {
            y0 = pts[i].y; y1 = pts[j].y;
            x0 = pts[i].x;
        } else {
            y0 = pts[j].y; y1 = pts[i].y;
            x0 = pts[j].x;
     94e:	00064603          	lbu	a2,0(a2)
            x0 = pts[i].x;
     952:	0006c383          	lbu	t2,0(a3)
            x0 = pts[j].x;
     956:	fcc42e23          	sw	a2,-36(s0)
        if (pts[i].y < pts[j].y) {
     95a:	0ab77c63          	bgeu	a4,a1,a12 <prefill_solid_poly+0x118>
            x0 = pts[i].x;
     95e:	01039093          	slli	ra,t2,0x10
     962:	4100d093          	srai	ra,ra,0x10
     966:	852e                	mv	a0,a1
     968:	82ba                	mv	t0,a4
        }

        // Update global Y bounds
        y_min = y0 < y_min ? y0 : y_min;
     96a:	8616                	mv	a2,t0
     96c:	0054f363          	bgeu	s1,t0,972 <prefill_solid_poly+0x78>
     970:	8626                	mv	a2,s1
     972:	0ff67493          	andi	s1,a2,255
        y_max = y1 > y_max ? y1 : y_max;
     976:	fe842603          	lw	a2,-24(s0)
     97a:	fca40a23          	sb	a0,-44(s0)
     97e:	00c57463          	bgeu	a0,a2,986 <prefill_solid_poly+0x8c>
     982:	fcc40a23          	sb	a2,-44(s0)
     986:	fcf42423          	sw	a5,-56(s0)
     98a:	fd444783          	lbu	a5,-44(s0)

        // Store edge (dx/dy as fixed-point 8.8)
        edges[edge_count++] = (struct Edge){
     98e:	00130613          	addi	a2,t1,1
            .y_start = y0,
            .y_end = y1,
            .x_start = x0 << 8,
     992:	00a2                	slli	ra,ra,0x8
        y_max = y1 > y_max ? y1 : y_max;
     994:	fef42423          	sw	a5,-24(s0)
        edges[edge_count++] = (struct Edge){
     998:	0ff67793          	andi	a5,a2,255
     99c:	fcf42a23          	sw	a5,-44(s0)
     9a0:	00131613          	slli	a2,t1,0x1
     9a4:	fe042783          	lw	a5,-32(s0)
     9a8:	9332                	add	t1,t1,a2
     9aa:	0306                	slli	t1,t1,0x1
     9ac:	933e                	add	t1,t1,a5
            .dx_dy = ((pts[j].x - pts[i].x) << 8) / (pts[j].y - pts[i].y)
     9ae:	fdc42783          	lw	a5,-36(s0)
        edges[edge_count++] = (struct Edge){
     9b2:	00a300a3          	sb	a0,1(t1)
     9b6:	00530023          	sb	t0,0(t1)
            .dx_dy = ((pts[j].x - pts[i].x) << 8) / (pts[j].y - pts[i].y)
     9ba:	40778533          	sub	a0,a5,t2
        edges[edge_count++] = (struct Edge){
     9be:	00131123          	sh	ra,2(t1)
            .dx_dy = ((pts[j].x - pts[i].x) << 8) / (pts[j].y - pts[i].y)
     9c2:	8d99                	sub	a1,a1,a4
     9c4:	0522                	slli	a0,a0,0x8
     9c6:	fcd42623          	sw	a3,-52(s0)
        edges[edge_count++] = (struct Edge){
     9ca:	fc642823          	sw	t1,-48(s0)
            .dx_dy = ((pts[j].x - pts[i].x) << 8) / (pts[j].y - pts[i].y)
     9ce:	ed2ff0ef          	jal	ra,a0 <__divsi3>
        edges[edge_count++] = (struct Edge){
     9d2:	fd042303          	lw	t1,-48(s0)
     9d6:	fc842783          	lw	a5,-56(s0)
     9da:	fcc42683          	lw	a3,-52(s0)
     9de:	00a31223          	sh	a0,4(t1)
     9e2:	fd442303          	lw	t1,-44(s0)
    for (uint8_t i = 0, j = num_pts-1; i < num_pts; j = i++) {
     9e6:	fe442703          	lw	a4,-28(s0)
     9ea:	fe442603          	lw	a2,-28(s0)
     9ee:	0689                	addi	a3,a3,2
     9f0:	0705                	addi	a4,a4,1
     9f2:	0ff77713          	andi	a4,a4,255
     9f6:	00e79b63          	bne	a5,a4,a0c <prefill_solid_poly+0x112>
        };
    }

    // ===== [2] SCANLINE PROCESSING =====
    for (uint8_t y = y_min; y <= y_max; y++) {
     9fa:	fe842783          	lw	a5,-24(s0)
     9fe:	1097eb63          	bltu	a5,s1,b14 <prefill_solid_poly+0x21a>
     a02:	fe042783          	lw	a5,-32(s0)
        uint8_t x_list[8];  // Supports 4 edge crossings (99% of cases)
        uint8_t x_count = 0;

        // Collect active edges
        for (uint8_t e = 0; e < edge_count; e++) {
     a06:	4681                	li	a3,0
        uint8_t x_count = 0;
     a08:	4701                	li	a4,0
     a0a:	a0b1                	j	a56 <prefill_solid_poly+0x15c>
    for (uint8_t i = 0, j = num_pts-1; i < num_pts; j = i++) {
     a0c:	fee42223          	sw	a4,-28(s0)
     a10:	b72d                	j	93a <prefill_solid_poly+0x40>
            x0 = pts[j].x;
     a12:	fdc41083          	lh	ra,-36(s0)
     a16:	853a                	mv	a0,a4
     a18:	82ae                	mv	t0,a1
     a1a:	bf81                	j	96a <prefill_solid_poly+0x70>
            if (y >= edges[e].y_start && y < edges[e].y_end) {
     a1c:	0007c603          	lbu	a2,0(a5)
     a20:	02c4e763          	bltu	s1,a2,a4e <prefill_solid_poly+0x154>
     a24:	0017c603          	lbu	a2,1(a5)
     a28:	02c4f363          	bgeu	s1,a2,a4e <prefill_solid_poly+0x154>
                x_list[x_count++] = edges[e].x_start >> 8;
     a2c:	00279603          	lh	a2,2(a5)
     a30:	ff440513          	addi	a0,s0,-12
     a34:	95aa                	add	a1,a1,a0
     a36:	40865513          	srai	a0,a2,0x8
     a3a:	fea58c23          	sb	a0,-8(a1)
                edges[e].x_start += edges[e].dx_dy;  // Step X
     a3e:	0047d583          	lhu	a1,4(a5)
                x_list[x_count++] = edges[e].x_start >> 8;
     a42:	0705                	addi	a4,a4,1
     a44:	0ff77713          	andi	a4,a4,255
                edges[e].x_start += edges[e].dx_dy;  // Step X
     a48:	962e                	add	a2,a2,a1
     a4a:	00c79123          	sh	a2,2(a5)
        for (uint8_t e = 0; e < edge_count; e++) {
     a4e:	0685                	addi	a3,a3,1
     a50:	0ff6f693          	andi	a3,a3,255
     a54:	0799                	addi	a5,a5,6
                x_list[x_count++] = edges[e].x_start >> 8;
     a56:	85ba                	mv	a1,a4
        for (uint8_t e = 0; e < edge_count; e++) {
     a58:	fcd312e3          	bne	t1,a3,a1c <prefill_solid_poly+0x122>
     a5c:	fec40613          	addi	a2,s0,-20
            }
        }

        // Insertion sort (optimal for small N)
        for (uint8_t i = 1; i < x_count; i++) {
     a60:	4685                	li	a3,1
            uint8_t val = x_list[i];
            int8_t j = i-1;
            while (j >= 0 && x_list[j] > val) {
     a62:	53fd                	li	t2,-1
        for (uint8_t i = 1; i < x_count; i++) {
     a64:	00e6eb63          	bltu	a3,a4,a7a <prefill_solid_poly+0x180>
            }
            x_list[j+1] = val;
        }

        // Fill between pairs (with bounds checking)
        for (uint8_t i = 0; i+1 < x_count; i += 2) {
     a68:	4781                	li	a5,0
     a6a:	00178693          	addi	a3,a5,1
     a6e:	04e6c663          	blt	a3,a4,aba <prefill_solid_poly+0x1c0>
    for (uint8_t y = y_min; y <= y_max; y++) {
     a72:	0485                	addi	s1,s1,1
     a74:	0ff4f493          	andi	s1,s1,255
     a78:	b749                	j	9fa <prefill_solid_poly+0x100>
            uint8_t val = x_list[i];
     a7a:	fff68793          	addi	a5,a3,-1
     a7e:	00164503          	lbu	a0,1(a2)
            int8_t j = i-1;
     a82:	07e2                	slli	a5,a5,0x18
     a84:	87e1                	srai	a5,a5,0x18
            uint8_t val = x_list[i];
     a86:	85b2                	mv	a1,a2
            while (j >= 0 && x_list[j] > val) {
     a88:	0005c283          	lbu	t0,0(a1)
     a8c:	00557a63          	bgeu	a0,t0,aa0 <prefill_solid_poly+0x1a6>
                x_list[j+1] = x_list[j];
     a90:	17fd                	addi	a5,a5,-1
     a92:	07e2                	slli	a5,a5,0x18
     a94:	005580a3          	sb	t0,1(a1)
                j--;
     a98:	87e1                	srai	a5,a5,0x18
            while (j >= 0 && x_list[j] > val) {
     a9a:	15fd                	addi	a1,a1,-1
     a9c:	fe7796e3          	bne	a5,t2,a88 <prefill_solid_poly+0x18e>
            x_list[j+1] = val;
     aa0:	0785                	addi	a5,a5,1
     aa2:	07e2                	slli	a5,a5,0x18
     aa4:	87e1                	srai	a5,a5,0x18
     aa6:	ff440593          	addi	a1,s0,-12
     aaa:	97ae                	add	a5,a5,a1
        for (uint8_t i = 1; i < x_count; i++) {
     aac:	0685                	addi	a3,a3,1
            x_list[j+1] = val;
     aae:	fea78c23          	sb	a0,-8(a5)
        for (uint8_t i = 1; i < x_count; i++) {
     ab2:	0ff6f693          	andi	a3,a3,255
     ab6:	0605                	addi	a2,a2,1
     ab8:	b775                	j	a64 <prefill_solid_poly+0x16a>
            uint8_t x1 = x_list[i] < SSD1306_W ? x_list[i] : SSD1306_W-1;
     aba:	ff440613          	addi	a2,s0,-12
     abe:	963e                	add	a2,a2,a5
     ac0:	ff864583          	lbu	a1,-8(a2)
     ac4:	01859613          	slli	a2,a1,0x18
     ac8:	8661                	srai	a2,a2,0x18
     aca:	00065463          	bgez	a2,ad2 <prefill_solid_poly+0x1d8>
     ace:	07f00593          	li	a1,127
            uint8_t x2 = x_list[i+1] < SSD1306_W ? x_list[i+1] : SSD1306_W-1;
     ad2:	ff440613          	addi	a2,s0,-12
     ad6:	96b2                	add	a3,a3,a2
     ad8:	ff86c603          	lbu	a2,-8(a3)
     adc:	01861693          	slli	a3,a2,0x18
     ae0:	86e1                	srai	a3,a3,0x18
     ae2:	0006d463          	bgez	a3,aea <prefill_solid_poly+0x1f0>
     ae6:	07f00613          	li	a2,127
            if (x1 < x2) prefill_fastHorLine(y, x1, x2);
     aea:	02c5f163          	bgeu	a1,a2,b0c <prefill_solid_poly+0x212>
     aee:	8526                	mv	a0,s1
     af0:	fcf42c23          	sw	a5,-40(s0)
     af4:	fce42e23          	sw	a4,-36(s0)
     af8:	fe642223          	sw	t1,-28(s0)
     afc:	853ff0ef          	jal	ra,34e <prefill_fastHorLine>
     b00:	fd842783          	lw	a5,-40(s0)
     b04:	fdc42703          	lw	a4,-36(s0)
     b08:	fe442303          	lw	t1,-28(s0)
        for (uint8_t i = 0; i+1 < x_count; i += 2) {
     b0c:	0789                	addi	a5,a5,2
     b0e:	0ff7f793          	andi	a5,a5,255
     b12:	bfa1                	j	a6a <prefill_solid_poly+0x170>
        }
    }
}
     b14:	fc840113          	addi	sp,s0,-56
     b18:	50d2                	lw	ra,52(sp)
     b1a:	5442                	lw	s0,48(sp)
     b1c:	54b2                	lw	s1,44(sp)
     b1e:	03810113          	addi	sp,sp,56
     b22:	8082                	ret

00000b24 <handle_reset>:
	asm volatile( "\n\
     b24:	20000197          	auipc	gp,0x20000
     b28:	8d818193          	addi	gp,gp,-1832 # 200003fc <__global_pointer$>
     b2c:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     b30:	6509                	lui	a0,0x2
     b32:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x5f6>
     b36:	30051073          	csrw	mstatus,a0
     b3a:	468d                	li	a3,3
     b3c:	fffff517          	auipc	a0,0xfffff
     b40:	4c450513          	addi	a0,a0,1220 # 0 <InterruptVector>
     b44:	8d55                	or	a0,a0,a3
     b46:	30551073          	csrw	mtvec,a0
asm volatile(
     b4a:	c7018513          	addi	a0,gp,-912 # 2000006c <WS2812BLEDInUse>
     b4e:	1a818593          	addi	a1,gp,424 # 200005a4 <_ebss>
     b52:	4601                	li	a2,0
     b54:	00b55663          	bge	a0,a1,b60 <handle_reset+0x3c>
     b58:	c110                	sw	a2,0(a0)
     b5a:	0511                	addi	a0,a0,4
     b5c:	feb54ee3          	blt	a0,a1,b58 <handle_reset+0x34>
     b60:	00001517          	auipc	a0,0x1
     b64:	7e450513          	addi	a0,a0,2020 # 2344 <_data_lma>
     b68:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_aht21>
     b6c:	1ffff617          	auipc	a2,0x1ffff
     b70:	50060613          	addi	a2,a2,1280 # 2000006c <WS2812BLEDInUse>
     b74:	00c58863          	beq	a1,a2,b84 <handle_reset+0x60>
     b78:	4114                	lw	a3,0(a0)
     b7a:	c194                	sw	a3,0(a1)
     b7c:	0511                	addi	a0,a0,4
     b7e:	0591                	addi	a1,a1,4
     b80:	fec59ae3          	bne	a1,a2,b74 <handle_reset+0x50>
	SysTick->CTLR = 5;
     b84:	e000f7b7          	lui	a5,0xe000f
     b88:	4715                	li	a4,5
     b8a:	c398                	sw	a4,0(a5)
asm volatile(
     b8c:	6785                	lui	a5,0x1
     b8e:	28a78793          	addi	a5,a5,650 # 128a <main>
     b92:	34179073          	csrw	mepc,a5
     b96:	30200073          	mret

00000b9a <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     b9a:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     b9e:	e5eff0ef          	jal	ra,1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     ba2:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     ba6:	e56ff0ef          	jal	ra,1fc <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     baa:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     bae:	e4eff0ef          	jal	ra,1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     bb2:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     bb6:	e46ff0ef          	jal	ra,1fc <PrintHex>
	while( (*DMDATA0) & 0x80 );
     bba:	e0000737          	lui	a4,0xe0000
     bbe:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     bc2:	0f470693          	addi	a3,a4,244
     bc6:	0807f793          	andi	a5,a5,128
     bca:	fbf5                	bnez	a5,bbe <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     bcc:	6785                	lui	a5,0x1
     bce:	a8578793          	addi	a5,a5,-1403 # a85 <prefill_solid_poly+0x18b>
     bd2:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     bd4:	e0000737          	lui	a4,0xe0000
     bd8:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     bdc:	0f470693          	addi	a3,a4,244
     be0:	0807f793          	andi	a5,a5,128
     be4:	fbf5                	bnez	a5,bd8 <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     be6:	aaaab7b7          	lui	a5,0xaaaab
     bea:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     bee:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     bf0:	a001                	j	bf0 <ADC1_2_IRQHandler+0x56>

00000bf2 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     bf2:	40021737          	lui	a4,0x40021
     bf6:	471c                	lw	a5,8(a4)
     bf8:	008006b7          	lui	a3,0x800
     bfc:	8fd5                	or	a5,a5,a3
     bfe:	c71c                	sw	a5,8(a4)

00000c00 <strlen>:
{
     c00:	87aa                	mv	a5,a0
	for (; *s; s++);
     c02:	0007c703          	lbu	a4,0(a5)
     c06:	e701                	bnez	a4,c0e <strlen+0xe>
}
     c08:	40a78533          	sub	a0,a5,a0
     c0c:	8082                	ret
	for (; *s; s++);
     c0e:	0785                	addi	a5,a5,1
     c10:	bfcd                	j	c02 <strlen+0x2>

00000c12 <mini_vpprintf>:
{
     c12:	fa410113          	addi	sp,sp,-92
     c16:	c8a6                	sw	s1,80(sp)
     c18:	cc86                	sw	ra,88(sp)
     c1a:	caa2                	sw	s0,84(sp)
     c1c:	c02a                	sw	a0,0(sp)
     c1e:	c22e                	sw	a1,4(sp)
     c20:	84b2                	mv	s1,a2
     c22:	87b6                	mv	a5,a3
	int n = 0;
     c24:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     c26:	0004c703          	lbu	a4,0(s1)
     c2a:	00148413          	addi	s0,s1,1
     c2e:	00e10fa3          	sb	a4,31(sp)
     c32:	eb01                	bnez	a4,c42 <mini_vpprintf+0x30>
}
     c34:	40e6                	lw	ra,88(sp)
     c36:	4456                	lw	s0,84(sp)
     c38:	4542                	lw	a0,16(sp)
     c3a:	44c6                	lw	s1,80(sp)
     c3c:	05c10113          	addi	sp,sp,92
     c40:	8082                	ret
		if (ch!='%') {
     c42:	02500693          	li	a3,37
     c46:	00d70f63          	beq	a4,a3,c64 <mini_vpprintf+0x52>
     c4a:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     c4c:	4612                	lw	a2,4(sp)
     c4e:	4782                	lw	a5,0(sp)
     c50:	4585                	li	a1,1
     c52:	01f10513          	addi	a0,sp,31
     c56:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     c58:	84a2                	mv	s1,s0
		n = n + len;
     c5a:	47c2                	lw	a5,16(sp)
     c5c:	97aa                	add	a5,a5,a0
     c5e:	c83e                	sw	a5,16(sp)
     c60:	47a2                	lw	a5,8(sp)
     c62:	b7d1                	j	c26 <mini_vpprintf+0x14>
			ch=*(fmt++);
     c64:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     c68:	03000613          	li	a2,48
			ch=*(fmt++);
     c6c:	00248713          	addi	a4,s1,2
     c70:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     c74:	03000413          	li	s0,48
     c78:	08c69063          	bne	a3,a2,cf8 <mini_vpprintf+0xe6>
				ch=*(fmt++);
     c7c:	84ba                	mv	s1,a4
     c7e:	4601                	li	a2,0
     c80:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     c82:	4525                	li	a0,9
     c84:	a811                	j	c98 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     c86:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     c8a:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     c8c:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     c8e:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     c92:	0706                	slli	a4,a4,0x1
     c94:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     c96:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     c98:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.bfb73fe7+0x7f6525>
     c9c:	0ff5f313          	andi	t1,a1,255
     ca0:	fe6573e3          	bgeu	a0,t1,c86 <mini_vpprintf+0x74>
     ca4:	c219                	beqz	a2,caa <mini_vpprintf+0x98>
     ca6:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     caa:	c63a                	sw	a4,12(sp)
     cac:	4661                	li	a2,24
     cae:	00e65363          	bge	a2,a4,cb4 <mini_vpprintf+0xa2>
     cb2:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     cb4:	06c00593          	li	a1,108
			char l = 0;
     cb8:	4601                	li	a2,0
			if (ch == 'l') {
     cba:	00b69863          	bne	a3,a1,cca <mini_vpprintf+0xb8>
				ch=*(fmt++);
     cbe:	0004c683          	lbu	a3,0(s1)
				l = 1;
     cc2:	4605                	li	a2,1
				ch=*(fmt++);
     cc4:	0485                	addi	s1,s1,1
     cc6:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     cca:	01f14683          	lbu	a3,31(sp)
     cce:	06400593          	li	a1,100
     cd2:	06b68363          	beq	a3,a1,d38 <mini_vpprintf+0x126>
     cd6:	02d5e463          	bltu	a1,a3,cfe <mini_vpprintf+0xec>
     cda:	05800713          	li	a4,88
     cde:	0ae68263          	beq	a3,a4,d82 <mini_vpprintf+0x170>
     ce2:	06300713          	li	a4,99
     ce6:	0ce68063          	beq	a3,a4,da6 <mini_vpprintf+0x194>
     cea:	d6a9                	beqz	a3,c34 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     cec:	4612                	lw	a2,4(sp)
     cee:	c43e                	sw	a5,8(sp)
     cf0:	4585                	li	a1,1
     cf2:	01f10513          	addi	a0,sp,31
     cf6:	a88d                	j	d68 <mini_vpprintf+0x156>
			char pad_char = ' ';
     cf8:	02000413          	li	s0,32
     cfc:	b741                	j	c7c <mini_vpprintf+0x6a>
			switch (ch) {
     cfe:	07500593          	li	a1,117
     d02:	02b68b63          	beq	a3,a1,d38 <mini_vpprintf+0x126>
     d06:	07800613          	li	a2,120
     d0a:	06c68c63          	beq	a3,a2,d82 <mini_vpprintf+0x170>
     d0e:	07300613          	li	a2,115
     d12:	fcc69de3          	bne	a3,a2,cec <mini_vpprintf+0xda>
     d16:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     d18:	00478713          	addi	a4,a5,4
     d1c:	439c                	lw	a5,0(a5)
     d1e:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     d20:	853e                	mv	a0,a5
     d22:	ca3e                	sw	a5,20(sp)
     d24:	3df1                	jal	c00 <strlen>
					if (pad_to > 0) {
     d26:	4762                	lw	a4,24(sp)
     d28:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     d2a:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     d2c:	cb51                	beqz	a4,dc0 <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     d2e:	46b2                	lw	a3,12(sp)
     d30:	1838                	addi	a4,sp,56
     d32:	8622                	mv	a2,s0
     d34:	853e                	mv	a0,a5
     d36:	a025                	j	d5e <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     d38:	00478713          	addi	a4,a5,4
     d3c:	c43a                	sw	a4,8(sp)
					if(l) {
     d3e:	ca05                	beqz	a2,d6e <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     d40:	f8b68693          	addi	a3,a3,-117
     d44:	1018                	addi	a4,sp,32
     d46:	0016b693          	seqz	a3,a3
     d4a:	4388                	lw	a0,0(a5)
     d4c:	4601                	li	a2,0
     d4e:	45a9                	li	a1,10
     d50:	d04ff0ef          	jal	ra,254 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     d54:	46b2                	lw	a3,12(sp)
     d56:	1838                	addi	a4,sp,56
     d58:	8622                	mv	a2,s0
     d5a:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     d5c:	1008                	addi	a0,sp,32
     d5e:	bc0ff0ef          	jal	ra,11e <mini_pad>
					len = puts(bf, len, buf);
     d62:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     d64:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     d66:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     d68:	4782                	lw	a5,0(sp)
     d6a:	9782                	jalr	a5
					break;
     d6c:	b5fd                	j	c5a <mini_vpprintf+0x48>
						if(ch == 'u') {
     d6e:	07500713          	li	a4,117
     d72:	00e69563          	bne	a3,a4,d7c <mini_vpprintf+0x16a>
	if (radix > 16)
     d76:	1018                	addi	a4,sp,32
     d78:	4685                	li	a3,1
     d7a:	bfc1                	j	d4a <mini_vpprintf+0x138>
     d7c:	1018                	addi	a4,sp,32
     d7e:	4681                	li	a3,0
     d80:	b7e9                	j	d4a <mini_vpprintf+0x138>
					if(l) {
     d82:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     d84:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     d88:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     d8c:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     d8e:	4685                	li	a3,1
     d90:	1018                	addi	a4,sp,32
     d92:	00163613          	seqz	a2,a2
     d96:	45c1                	li	a1,16
     d98:	cbcff0ef          	jal	ra,254 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     d9c:	46b2                	lw	a3,12(sp)
     d9e:	85aa                	mv	a1,a0
     da0:	1838                	addi	a4,sp,56
     da2:	8622                	mv	a2,s0
     da4:	bf65                	j	d5c <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     da6:	00478713          	addi	a4,a5,4
     daa:	439c                	lw	a5,0(a5)
     dac:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     dae:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     db0:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     db4:	1838                	addi	a4,sp,56
     db6:	8622                	mv	a2,s0
     db8:	4585                	li	a1,1
     dba:	01f10513          	addi	a0,sp,31
     dbe:	b745                	j	d5e <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     dc0:	4612                	lw	a2,4(sp)
     dc2:	853e                	mv	a0,a5
     dc4:	b755                	j	d68 <mini_vpprintf+0x156>

00000dc6 <printf>:
{
     dc6:	fdc10113          	addi	sp,sp,-36
     dca:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     dcc:	862a                	mv	a2,a0
     dce:	6505                	lui	a0,0x1
{
     dd0:	c82e                	sw	a1,16(sp)
     dd2:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     dd4:	4581                	li	a1,0
	va_start( args, format );
     dd6:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     dd8:	8e650513          	addi	a0,a0,-1818 # 8e6 <__puts_uart>
{
     ddc:	c606                	sw	ra,12(sp)
     dde:	ce3a                	sw	a4,28(sp)
     de0:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     de2:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     de4:	353d                	jal	c12 <mini_vpprintf>
}
     de6:	40b2                	lw	ra,12(sp)
     de8:	02410113          	addi	sp,sp,36
     dec:	8082                	ret

00000dee <ssd1306_i2c_error>:
/*
* error handler
*/
uint8_t ssd1306_i2c_error(uint8_t err) {
	// report error
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     dee:	00251793          	slli	a5,a0,0x2
     df2:	6509                	lui	a0,0x2
     df4:	30450513          	addi	a0,a0,772 # 2304 <errstr>
     df8:	953e                	add	a0,a0,a5
     dfa:	410c                	lw	a1,0(a0)
     dfc:	6509                	lui	a0,0x2
uint8_t ssd1306_i2c_error(uint8_t err) {
     dfe:	1151                	addi	sp,sp,-12
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     e00:	00450513          	addi	a0,a0,4 # 2004 <DMA1_Channel3_IRQHandler+0x90>
uint8_t ssd1306_i2c_error(uint8_t err) {
     e04:	c406                	sw	ra,8(sp)
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     e06:	37c1                	jal	dc6 <printf>
	RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
     e08:	400217b7          	lui	a5,0x40021
     e0c:	4b98                	lw	a4,16(a5)
     e0e:	002006b7          	lui	a3,0x200
	ssd1306_i2c_setup();	// reset & initialize I2C
	return 1;
}
     e12:	40a2                	lw	ra,8(sp)
	RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
     e14:	8f55                	or	a4,a4,a3
     e16:	cb98                	sw	a4,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     e18:	4b98                	lw	a4,16(a5)
     e1a:	ffe006b7          	lui	a3,0xffe00
     e1e:	16fd                	addi	a3,a3,-1
     e20:	8f75                	and	a4,a4,a3
     e22:	cb98                	sw	a4,16(a5)
	tempreg = I2C1->CTLR2;
     e24:	40005737          	lui	a4,0x40005
     e28:	40475783          	lhu	a5,1028(a4) # 40005404 <_eusrstack+0x20004c04>
}
     e2c:	4505                	li	a0,1
	tempreg = I2C1->CTLR2;
     e2e:	07c2                	slli	a5,a5,0x10
     e30:	83c1                	srli	a5,a5,0x10
	tempreg &= ~I2C_CTLR2_FREQ;
     e32:	fc07f793          	andi	a5,a5,-64
	tempreg |= (FUNCONF_SYSTEM_CORE_CLOCK/SSD1306_I2C_PRERATE)&I2C_CTLR2_FREQ;
     e36:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = tempreg;
     e3a:	40f71223          	sh	a5,1028(a4)
	I2C1->CKCFGR = tempreg;
     e3e:	77f1                	lui	a5,0xffffc
     e40:	0785                	addi	a5,a5,1
     e42:	40f71e23          	sh	a5,1052(a4)
	I2C1->CTLR1 |= I2C_CTLR1_PE;
     e46:	40075783          	lhu	a5,1024(a4)
     e4a:	07c2                	slli	a5,a5,0x10
     e4c:	83c1                	srli	a5,a5,0x10
     e4e:	0017e793          	ori	a5,a5,1
     e52:	40f71023          	sh	a5,1024(a4)
	I2C1->CTLR1 |= I2C_CTLR1_ACK;
     e56:	40075783          	lhu	a5,1024(a4)
     e5a:	07c2                	slli	a5,a5,0x10
     e5c:	83c1                	srli	a5,a5,0x10
     e5e:	4007e793          	ori	a5,a5,1024
     e62:	40f71023          	sh	a5,1024(a4)
}
     e66:	0131                	addi	sp,sp,12
     e68:	8082                	ret

00000e6a <ssd1306_i2c_send.constprop.0>:
}
#else
/*
* low-level packet send for blocking polled operation via i2c
*/
uint8_t ssd1306_i2c_send(uint8_t addr, const uint8_t *data, int sz) {
     e6a:	67e1                	lui	a5,0x18
     e6c:	6a178793          	addi	a5,a5,1697 # 186a1 <lib_i2c.c.bfb73fe7+0xebf6>
	int32_t timeout;
	
	// wait for not busy
	timeout = TIMEOUT_MAX;
	while((I2C1->STAR2 & I2C_STAR2_BUSY) && (timeout--));
     e70:	40005637          	lui	a2,0x40005
     e74:	41865683          	lhu	a3,1048(a2) # 40005418 <_eusrstack+0x20004c18>
     e78:	40060713          	addi	a4,a2,1024
     e7c:	8a89                	andi	a3,a3,2
     e7e:	c6c5                	beqz	a3,f26 <ssd1306_i2c_send.constprop.0+0xbc>
     e80:	17fd                	addi	a5,a5,-1
     e82:	fbed                	bnez	a5,e74 <ssd1306_i2c_send.constprop.0+0xa>
	if(timeout==-1) return ssd1306_i2c_error(0);
     e84:	4501                	li	a0,0
     e86:	a005                	j	ea6 <ssd1306_i2c_send.constprop.0+0x3c>
	// send 7-bit address + write flag
	I2C1->DATAR = addr<<1;

	// wait for transmit condition
	timeout = TIMEOUT_MAX;
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     e88:	177d                	addi	a4,a4,-1
     e8a:	e331                	bnez	a4,ece <ssd1306_i2c_send.constprop.0+0x64>
	if(timeout==-1) return ssd1306_i2c_error(2);
     e8c:	4509                	li	a0,2
     e8e:	a821                	j	ea6 <ssd1306_i2c_send.constprop.0+0x3c>

	// send data one byte at a time
	while(sz--) {
     e90:	873e                	mv	a4,a5
		// wait for TX Empty
		timeout = TIMEOUT_MAX;
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     e92:	41435683          	lhu	a3,1044(t1)
     e96:	40030613          	addi	a2,t1,1024
     e9a:	0806f693          	andi	a3,a3,128
     e9e:	e689                	bnez	a3,ea8 <ssd1306_i2c_send.constprop.0+0x3e>
     ea0:	177d                	addi	a4,a4,-1
     ea2:	fb65                	bnez	a4,e92 <ssd1306_i2c_send.constprop.0+0x28>
		if(timeout==-1)
			return ssd1306_i2c_error(3);
     ea4:	450d                	li	a0,3
	if(timeout==-1) return ssd1306_i2c_error(0);
     ea6:	b7a1                	j	dee <ssd1306_i2c_error>
		
		// send command
		I2C1->DATAR = *data++;
     ea8:	00054703          	lbu	a4,0(a0)
     eac:	0505                	addi	a0,a0,1
     eae:	00e61823          	sh	a4,16(a2)
     eb2:	a081                	j	ef2 <ssd1306_i2c_send.constprop.0+0x88>
	I2C1->DATAR = addr<<1;
     eb4:	07800793          	li	a5,120
     eb8:	6761                	lui	a4,0x18
	return (status & event_mask) == event_mask;
     eba:	000706b7          	lui	a3,0x70
	I2C1->DATAR = addr<<1;
     ebe:	00f61823          	sh	a5,16(a2)
     ec2:	6a170713          	addi	a4,a4,1697 # 186a1 <lib_i2c.c.bfb73fe7+0xebf6>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     ec6:	40005337          	lui	t1,0x40005
	return (status & event_mask) == event_mask;
     eca:	08268693          	addi	a3,a3,130 # 70082 <lib_i2c.c.bfb73fe7+0x665d7>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     ece:	41435783          	lhu	a5,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     ed2:	01079613          	slli	a2,a5,0x10
     ed6:	41835783          	lhu	a5,1048(t1)
     eda:	8241                	srli	a2,a2,0x10
     edc:	07c2                	slli	a5,a5,0x10
     ede:	8fd1                	or	a5,a5,a2
	return (status & event_mask) == event_mask;
     ee0:	8ff5                	and	a5,a5,a3
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     ee2:	fad793e3          	bne	a5,a3,e88 <ssd1306_i2c_send.constprop.0+0x1e>
     ee6:	67e1                	lui	a5,0x18
     ee8:	95aa                	add	a1,a1,a0
     eea:	6a178793          	addi	a5,a5,1697 # 186a1 <lib_i2c.c.bfb73fe7+0xebf6>
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     eee:	40005337          	lui	t1,0x40005
	while(sz--) {
     ef2:	f8b51fe3          	bne	a0,a1,e90 <ssd1306_i2c_send.constprop.0+0x26>
	return (status & event_mask) == event_mask;
     ef6:	00070637          	lui	a2,0x70
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     efa:	40005537          	lui	a0,0x40005
	return (status & event_mask) == event_mask;
     efe:	08460613          	addi	a2,a2,132 # 70084 <lib_i2c.c.bfb73fe7+0x665d9>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     f02:	41455703          	lhu	a4,1044(a0) # 40005414 <_eusrstack+0x20004c14>
     f06:	40050693          	addi	a3,a0,1024
     f0a:	01071593          	slli	a1,a4,0x10
     f0e:	0186d703          	lhu	a4,24(a3)
     f12:	81c1                	srli	a1,a1,0x10
     f14:	0742                	slli	a4,a4,0x10
     f16:	8f4d                	or	a4,a4,a1
	return (status & event_mask) == event_mask;
     f18:	8f71                	and	a4,a4,a2
	}

	// wait for tx complete
	timeout = TIMEOUT_MAX;
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (timeout--));
     f1a:	04c70a63          	beq	a4,a2,f6e <ssd1306_i2c_send.constprop.0+0x104>
     f1e:	17fd                	addi	a5,a5,-1
     f20:	f3ed                	bnez	a5,f02 <ssd1306_i2c_send.constprop.0+0x98>
	if(timeout==-1) return ssd1306_i2c_error(4);
     f22:	4511                	li	a0,4
     f24:	b749                	j	ea6 <ssd1306_i2c_send.constprop.0+0x3c>
	I2C1->CTLR1 |= I2C_CTLR1_START;
     f26:	00075783          	lhu	a5,0(a4)
	return (status & event_mask) == event_mask;
     f2a:	000306b7          	lui	a3,0x30
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     f2e:	400052b7          	lui	t0,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     f32:	07c2                	slli	a5,a5,0x10
     f34:	83c1                	srli	a5,a5,0x10
     f36:	1007e793          	ori	a5,a5,256
     f3a:	00f71023          	sh	a5,0(a4)
     f3e:	6761                	lui	a4,0x18
     f40:	6a170713          	addi	a4,a4,1697 # 186a1 <lib_i2c.c.bfb73fe7+0xebf6>
	return (status & event_mask) == event_mask;
     f44:	0685                	addi	a3,a3,1
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     f46:	4142d783          	lhu	a5,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     f4a:	40028613          	addi	a2,t0,1024
     f4e:	01079313          	slli	t1,a5,0x10
     f52:	01865783          	lhu	a5,24(a2)
     f56:	01035313          	srli	t1,t1,0x10
     f5a:	07c2                	slli	a5,a5,0x10
     f5c:	0067e7b3          	or	a5,a5,t1
	return (status & event_mask) == event_mask;
     f60:	8ff5                	and	a5,a5,a3
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_MODE_SELECT)) && (timeout--));
     f62:	f4d789e3          	beq	a5,a3,eb4 <ssd1306_i2c_send.constprop.0+0x4a>
     f66:	177d                	addi	a4,a4,-1
     f68:	ff79                	bnez	a4,f46 <ssd1306_i2c_send.constprop.0+0xdc>
	if(timeout==-1) return ssd1306_i2c_error(1);
     f6a:	4505                	li	a0,1
     f6c:	bf2d                	j	ea6 <ssd1306_i2c_send.constprop.0+0x3c>

	// set STOP condition
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     f6e:	0006d783          	lhu	a5,0(a3) # 30000 <lib_i2c.c.bfb73fe7+0x26555>
	return 0;
}
     f72:	4501                	li	a0,0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     f74:	07c2                	slli	a5,a5,0x10
     f76:	83c1                	srli	a5,a5,0x10
     f78:	2007e793          	ori	a5,a5,512
     f7c:	00f69023          	sh	a5,0(a3)
}
     f80:	8082                	ret

00000f82 <ssd1306_cmd>:
	.addr = 0x3c,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     f82:	7179                	addi	sp,sp,-48
	uint8_t pkt[33];
	
	/* build command or data packets */
	if(cmd) {
		pkt[0] = 0;
		pkt[1] = *data;
     f84:	00a100a3          	sb	a0,1(sp)
	}
	else{
		pkt[0] = 0x40;
		memcpy(&pkt[1], data, sz);
	}
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     f88:	4589                	li	a1,2
     f8a:	850a                	mv	a0,sp
     f8c:	d606                	sw	ra,44(sp)
		pkt[0] = 0;
     f8e:	00010023          	sb	zero,0(sp)
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     f92:	3de1                	jal	e6a <ssd1306_i2c_send.constprop.0>
	return ssd1306_pkt_send(&cmd, 1, 1);
}
     f94:	50b2                	lw	ra,44(sp)
     f96:	6145                	addi	sp,sp,48
     f98:	8082                	ret

00000f9a <mini_vsnprintf>:
{
     f9a:	1121                	addi	sp,sp,-24
     f9c:	ca06                	sw	ra,20(sp)
     f9e:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
     fa0:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
     fa2:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
     fa4:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
     fa6:	c185                	beqz	a1,fc6 <mini_vsnprintf+0x2c>
     fa8:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
     faa:	858a                	mv	a1,sp
     fac:	e111                	bnez	a0,fb0 <mini_vsnprintf+0x16>
     fae:	4581                	li	a1,0
     fb0:	1ba00513          	li	a0,442
     fb4:	39b9                	jal	c12 <mini_vpprintf>
	if(buffer == (void*) 0) {
     fb6:	c401                	beqz	s0,fbe <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
     fb8:	4512                	lw	a0,4(sp)
     fba:	4782                	lw	a5,0(sp)
     fbc:	8d1d                	sub	a0,a0,a5
}
     fbe:	40d2                	lw	ra,20(sp)
     fc0:	4442                	lw	s0,16(sp)
     fc2:	0161                	addi	sp,sp,24
     fc4:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
     fc6:	4401                	li	s0,0
     fc8:	b7dd                	j	fae <mini_vsnprintf+0x14>

00000fca <sprintf>:
{
     fca:	1101                	addi	sp,sp,-32
     fcc:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fce:	862e                	mv	a2,a1
     fd0:	800005b7          	lui	a1,0x80000
{
     fd4:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fd6:	fff5c593          	not	a1,a1
	va_start( args, format );
     fda:	0814                	addi	a3,sp,16
{
     fdc:	c606                	sw	ra,12(sp)
     fde:	cc3a                	sw	a4,24(sp)
     fe0:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
     fe2:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fe4:	3f5d                	jal	f9a <mini_vsnprintf>
}
     fe6:	40b2                	lw	ra,12(sp)
     fe8:	6105                	addi	sp,sp,32
     fea:	8082                	ret

00000fec <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     fec:	962a                	add	a2,a2,a0
     fee:	87aa                	mv	a5,a0
     ff0:	00c79363          	bne	a5,a2,ff6 <memset+0xa>
     ff4:	8082                	ret
     ff6:	00b78023          	sb	a1,0(a5)
     ffa:	0785                	addi	a5,a5,1
     ffc:	bfd5                	j	ff0 <memset+0x4>

00000ffe <strcpy>:
{
     ffe:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
    1000:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
    1004:	00e78023          	sb	a4,0(a5)
    1008:	e311                	bnez	a4,100c <strcpy+0xe>
}
    100a:	8082                	ret
	for (; (*d=*s); s++, d++);
    100c:	0585                	addi	a1,a1,1
    100e:	0785                	addi	a5,a5,1
    1010:	bfc5                	j	1000 <strcpy+0x2>

00001012 <memcpy>:
{
    1012:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
    1014:	00f61363          	bne	a2,a5,101a <memcpy+0x8>
}
    1018:	8082                	ret
	for (; n; n--) *d++ = *s++;
    101a:	00f58733          	add	a4,a1,a5
    101e:	00074683          	lbu	a3,0(a4)
    1022:	00f50733          	add	a4,a0,a5
    1026:	0785                	addi	a5,a5,1
    1028:	00d70023          	sb	a3,0(a4)
    102c:	b7e5                	j	1014 <memcpy+0x2>

0000102e <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
    102e:	7179                	addi	sp,sp,-48
    1030:	d422                	sw	s0,40(sp)
		pkt[0] = 0x40;
    1032:	04000793          	li	a5,64
    1036:	842e                	mv	s0,a1
		memcpy(&pkt[1], data, sz);
    1038:	862e                	mv	a2,a1
    103a:	85aa                	mv	a1,a0
    103c:	00110513          	addi	a0,sp,1
    1040:	d606                	sw	ra,44(sp)
		pkt[0] = 0x40;
    1042:	00f10023          	sb	a5,0(sp)
		memcpy(&pkt[1], data, sz);
    1046:	37f1                	jal	1012 <memcpy>
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
    1048:	00140593          	addi	a1,s0,1
    104c:	850a                	mv	a0,sp
    104e:	3d31                	jal	e6a <ssd1306_i2c_send.constprop.0>
	uint8_t pkt[33];
	// pkt[0] = 0;
	// pkt[1] = *data;
	// return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
	return ssd1306_pkt_send(data, sz, 0);
}
    1050:	50b2                	lw	ra,44(sp)
    1052:	5422                	lw	s0,40(sp)
    1054:	6145                	addi	sp,sp,48
    1056:	8082                	ret

00001058 <ssd1306_renderFrame>:
void ssd1306_renderFrame() {
    1058:	1131                	addi	sp,sp,-20
	ssd1306_cmd(SSD1306_COLUMNADDR);
    105a:	02100513          	li	a0,33
void ssd1306_renderFrame() {
    105e:	c806                	sw	ra,16(sp)
    1060:	c622                	sw	s0,12(sp)
    1062:	c426                	sw	s1,8(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1064:	3f39                	jal	f82 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1066:	4501                	li	a0,0
    1068:	3f29                	jal	f82 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    106a:	07f00513          	li	a0,127
    106e:	3f11                	jal	f82 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1070:	02200513          	li	a0,34
    1074:	3739                	jal	f82 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1076:	4501                	li	a0,0
    1078:	3729                	jal	f82 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    107a:	451d                	li	a0,7
    107c:	3719                	jal	f82 <ssd1306_cmd>
    107e:	4401                	li	s0,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    1080:	ce818493          	addi	s1,gp,-792 # 200000e4 <frame_buffer>
void ssd1306_renderFrame() {
    1084:	4501                	li	a0,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    1086:	00848733          	add	a4,s1,s0
    108a:	02050793          	addi	a5,a0,32
    108e:	01079593          	slli	a1,a5,0x10
    1092:	81c1                	srli	a1,a1,0x10
    1094:	8d89                	sub	a1,a1,a0
    1096:	953a                	add	a0,a0,a4
    1098:	c23e                	sw	a5,4(sp)
    109a:	c03a                	sw	a4,0(sp)
    109c:	3f49                	jal	102e <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    109e:	4792                	lw	a5,4(sp)
    10a0:	4702                	lw	a4,0(sp)
    10a2:	853e                	mv	a0,a5
    10a4:	08000793          	li	a5,128
    10a8:	fef511e3          	bne	a0,a5,108a <ssd1306_renderFrame+0x32>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    10ac:	08040413          	addi	s0,s0,128
    10b0:	40000793          	li	a5,1024
    10b4:	fcf418e3          	bne	s0,a5,1084 <ssd1306_renderFrame+0x2c>
}
    10b8:	40c2                	lw	ra,16(sp)
    10ba:	4432                	lw	s0,12(sp)
    10bc:	44a2                	lw	s1,8(sp)
    10be:	0151                	addi	sp,sp,20
    10c0:	8082                	ret

000010c2 <ssd1306_print_str_at.constprop.0>:
void ssd1306_print_str_at(
    10c2:	1151                	addi	sp,sp,-12
    10c4:	c222                	sw	s0,4(sp)
    10c6:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    10c8:	02100513          	li	a0,33
void ssd1306_print_str_at(
    10cc:	c406                	sw	ra,8(sp)
    10ce:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    10d0:	3d4d                	jal	f82 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    10d2:	4501                	li	a0,0
    10d4:	357d                	jal	f82 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    10d6:	07f00513          	li	a0,127
    10da:	3565                	jal	f82 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    10dc:	02200513          	li	a0,34
    10e0:	354d                	jal	f82 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    10e2:	8522                	mv	a0,s0
    10e4:	3d79                	jal	f82 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    10e6:	8522                	mv	a0,s0
    10e8:	3d69                	jal	f82 <ssd1306_cmd>
    10ea:	4465                	li	s0,25
    10ec:	19418493          	addi	s1,gp,404 # 20000590 <str_output>
		if (*str) {
    10f0:	0004c783          	lbu	a5,0(s1)
    10f4:	c78d                	beqz	a5,111e <ssd1306_print_str_at.constprop.0+0x5c>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    10f6:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    10f8:	0ff7f793          	andi	a5,a5,255
    10fc:	6709                	lui	a4,0x2
    10fe:	00279693          	slli	a3,a5,0x2
    1102:	10870513          	addi	a0,a4,264 # 2108 <FONT_7x5>
    1106:	97b6                	add	a5,a5,a3
    1108:	4595                	li	a1,5
    110a:	953e                	add	a0,a0,a5
    110c:	370d                	jal	102e <ssd1306_data.isra.0>
			str++;
    110e:	0485                	addi	s1,s1,1
	for (int i=0; i<25; i++) {
    1110:	147d                	addi	s0,s0,-1
    1112:	fc79                	bnez	s0,10f0 <ssd1306_print_str_at.constprop.0+0x2e>
}
    1114:	40a2                	lw	ra,8(sp)
    1116:	4412                	lw	s0,4(sp)
    1118:	4482                	lw	s1,0(sp)
    111a:	0131                	addi	sp,sp,12
    111c:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    111e:	6789                	lui	a5,0x2
    1120:	4595                	li	a1,5
    1122:	10878513          	addi	a0,a5,264 # 2108 <FONT_7x5>
    1126:	3721                	jal	102e <ssd1306_data.isra.0>
    1128:	b7e5                	j	1110 <ssd1306_print_str_at.constprop.0+0x4e>

0000112a <puts>:
{
    112a:	1151                	addi	sp,sp,-12
    112c:	c406                	sw	ra,8(sp)
    112e:	c222                	sw	s0,4(sp)
    1130:	c026                	sw	s1,0(sp)
    1132:	84aa                	mv	s1,a0
	int sl = strlen( s );
    1134:	34f1                	jal	c00 <strlen>
    1136:	842a                	mv	s0,a0
	_write(0, s, sl );
    1138:	85aa                	mv	a1,a0
    113a:	8526                	mv	a0,s1
    113c:	eb6ff0ef          	jal	ra,7f2 <_write.constprop.0>
	_write(0, "\n", 1 );
    1140:	6509                	lui	a0,0x2
    1142:	4585                	li	a1,1
    1144:	03450513          	addi	a0,a0,52 # 2034 <DMA1_Channel3_IRQHandler+0xc0>
    1148:	eaaff0ef          	jal	ra,7f2 <_write.constprop.0>
}
    114c:	40a2                	lw	ra,8(sp)
    114e:	00140513          	addi	a0,s0,1
    1152:	4412                	lw	s0,4(sp)
    1154:	4482                	lw	s1,0(sp)
    1156:	0131                	addi	sp,sp,12
    1158:	8082                	ret

0000115a <putchar>:

// single to debug intf
WEAK int putchar(int c)
{
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    115a:	e00007b7          	lui	a5,0xe0000
    115e:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
    1162:	0c000713          	li	a4,192
    1166:	0c07f793          	andi	a5,a5,192
    116a:	04e78d63          	beq	a5,a4,11c4 <putchar+0x6a>
{
    116e:	1151                	addi	sp,sp,-12
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1170:	001007b7          	lui	a5,0x100
{
    1174:	c222                	sw	s0,4(sp)
    1176:	c406                	sw	ra,8(sp)
    1178:	842a                	mv	s0,a0
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    117a:	0785                	addi	a5,a5,1

	int timeout = FUNCONF_DEBUGPRINTF_TIMEOUT;
	uint32_t lastdmd = 0;

	while( ( lastdmd = (*DMDATA0) ) & 0x80 )
    117c:	e00006b7          	lui	a3,0xe0000
    1180:	0f46a703          	lw	a4,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
    1184:	0f468613          	addi	a2,a3,244
    1188:	08077593          	andi	a1,a4,128
    118c:	e18d                	bnez	a1,11ae <putchar+0x54>
			return 0;
		}
	}

	// Simply seeking input.
	if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
    118e:	c319                	beqz	a4,1194 <putchar+0x3a>
    1190:	e58ff0ef          	jal	ra,7e8 <internal_handle_input.constprop.0>

	// Write out character.
	*DMDATA0 = 0x85 | ((const char)c<<8);
    1194:	6541                	lui	a0,0x10
    1196:	157d                	addi	a0,a0,-1
    1198:	00841793          	slli	a5,s0,0x8
    119c:	8fe9                	and	a5,a5,a0
    119e:	0857e793          	ori	a5,a5,133
    11a2:	e0000737          	lui	a4,0xe0000
    11a6:	0ef72a23          	sw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
	return 1;
    11aa:	4505                	li	a0,1
    11ac:	a801                	j	11bc <putchar+0x62>
		if( timeout-- == 0 )
    11ae:	17fd                	addi	a5,a5,-1
    11b0:	fbe1                	bnez	a5,1180 <putchar+0x26>
			*DMDATA0 |= 0xc0;
    11b2:	421c                	lw	a5,0(a2)
    11b4:	4501                	li	a0,0
    11b6:	0c07e793          	ori	a5,a5,192
    11ba:	c21c                	sw	a5,0(a2)
}
    11bc:	40a2                	lw	ra,8(sp)
    11be:	4412                	lw	s0,4(sp)
    11c0:	0131                	addi	sp,sp,12
    11c2:	8082                	ret
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    11c4:	4501                	li	a0,0
}
    11c6:	8082                	ret

000011c8 <i2c_scan_callback>:
	if (i2c_ping(0x3C) != I2C_OK) return;
	ssd1306_print_str_at(str, line, 0);
}

void i2c_scan_callback(const uint8_t addr) {
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    11c8:	c525                	beqz	a0,1230 <i2c_scan_callback+0x68>
    11ca:	07f00793          	li	a5,127
    11ce:	862a                	mv	a2,a0
    11d0:	06f50063          	beq	a0,a5,1230 <i2c_scan_callback+0x68>
void i2c_scan_callback(const uint8_t addr) {
    11d4:	1151                	addi	sp,sp,-12
    11d6:	c026                	sw	s1,0(sp)
	
	static int line = 1;
	sprintf(str_output, "I2C: 0x%02X", addr);
    11d8:	6589                	lui	a1,0x2
    11da:	03858593          	addi	a1,a1,56 # 2038 <DMA1_Channel3_IRQHandler+0xc4>
    11de:	19418513          	addi	a0,gp,404 # 20000590 <str_output>
void i2c_scan_callback(const uint8_t addr) {
    11e2:	c406                	sw	ra,8(sp)
    11e4:	c222                	sw	s0,4(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    11e6:	33d5                	jal	fca <sprintf>
	printf("%s\n", str_output);
    11e8:	19418513          	addi	a0,gp,404 # 20000590 <str_output>
    11ec:	3f3d                	jal	112a <puts>
	modI2C_display(str_output, line++);
    11ee:	c1c18793          	addi	a5,gp,-996 # 20000018 <line.7>
    11f2:	4380                	lw	s0,0(a5)
    11f4:	00140713          	addi	a4,s0,1
    11f8:	c398                	sw	a4,0(a5)
	if (line != 7) { printf(str); printf("\n"); }
    11fa:	0ff47713          	andi	a4,s0,255
    11fe:	479d                	li	a5,7
    1200:	00f70763          	beq	a4,a5,120e <i2c_scan_callback+0x46>
    1204:	19418513          	addi	a0,gp,404 # 20000590 <str_output>
    1208:	3e7d                	jal	dc6 <printf>
    120a:	4529                	li	a0,10
    120c:	37b9                	jal	115a <putchar>
	if (i2c_ping(0x3C) != I2C_OK) return;
    120e:	03c00513          	li	a0,60
    1212:	a2aff0ef          	jal	ra,43c <i2c_ping>
    1216:	e901                	bnez	a0,1226 <i2c_scan_callback+0x5e>
	ssd1306_print_str_at(str, line, 0);
    1218:	0ff47513          	andi	a0,s0,255
}
    121c:	4412                	lw	s0,4(sp)
    121e:	40a2                	lw	ra,8(sp)
    1220:	4482                	lw	s1,0(sp)
    1222:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    1224:	bd79                	j	10c2 <ssd1306_print_str_at.constprop.0>
}
    1226:	40a2                	lw	ra,8(sp)
    1228:	4412                	lw	s0,4(sp)
    122a:	4482                	lw	s1,0(sp)
    122c:	0131                	addi	sp,sp,12
    122e:	8082                	ret
    1230:	8082                	ret

00001232 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    1232:	400227b7          	lui	a5,0x40022
    1236:	4705                	li	a4,1
    1238:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    123a:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    123e:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    1242:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1246:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.bfb73fe7+0x10765d6>
    124a:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#ifndef CH5xx
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    124c:	009f0737          	lui	a4,0x9f0
    1250:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH5xx)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    1252:	020006b7          	lui	a3,0x2000
    1256:	40021737          	lui	a4,0x40021
    125a:	431c                	lw	a5,0(a4)
    125c:	8ff5                	and	a5,a5,a3
    125e:	dff5                	beqz	a5,125a <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1260:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1262:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1266:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    1268:	0027e793          	ori	a5,a5,2
    126c:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    126e:	4721                	li	a4,8
    1270:	42dc                	lw	a5,4(a3)
    1272:	8bb1                	andi	a5,a5,12
    1274:	fee79ee3          	bne	a5,a4,1270 <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    1278:	e00007b7          	lui	a5,0xe0000
    127c:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    1280:	08000713          	li	a4,128
    1284:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    1288:	8082                	ret

0000128a <main>:

#include "ST7735/modTFT.h"
#include "Storage/modStorage.h"

int main()
{
    128a:	f7c10113          	addi	sp,sp,-132
    128e:	c106                	sw	ra,128(sp)
    1290:	dea2                	sw	s0,124(sp)
    1292:	dca6                	sw	s1,120(sp)
	uint32_t time_ref = 0;

	M_Encoder encoder_a = {0, 0, 0};
	M_Button button_a = {0xC0, BUTTON_IDLE, 0, 0, 0, 0, 0, 0};

	SystemInit();
    1294:	3f79                	jal	1232 <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    1296:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    129a:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    129c:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    12a0:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.bfb73fe7+0x20d4>
    12a4:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    12a6:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    12aa:	c8418713          	addi	a4,gp,-892 # 20000080 <systick_millis>
    12ae:	00072023          	sw	zero,0(a4)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    12b2:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    12b4:	6605                	lui	a2,0x1
    12b6:	00776713          	ori	a4,a4,7
    12ba:	c398                	sw	a4,0(a5)
    12bc:	e000e737          	lui	a4,0xe000e
    12c0:	10c72023          	sw	a2,256(a4) # e000e100 <_eusrstack+0xc000d900>
	uint32_t targend = SysTick->CNT + n;
    12c4:	4798                	lw	a4,8(a5)
    12c6:	004947b7          	lui	a5,0x494
    12ca:	e0078793          	addi	a5,a5,-512 # 493e00 <lib_i2c.c.bfb73fe7+0x48a355>
    12ce:	973e                	add	a4,a4,a5
    12d0:	c8418793          	addi	a5,gp,-892 # 20000080 <systick_millis>
    12d4:	de3e                	sw	a5,60(sp)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
    12d6:	e000f6b7          	lui	a3,0xe000f
    12da:	469c                	lw	a5,8(a3)
    12dc:	8f99                	sub	a5,a5,a4
    12de:	fe07cee3          	bltz	a5,12da <main+0x50>
*/


void modEncoder_setup(M_Encoder *model) {
	//! Enable GPIOC, TIM2, and AFIO *very important!*
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    12e2:	40021737          	lui	a4,0x40021
    12e6:	4f1c                	lw	a5,24(a4)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	// PD3 is T2CH1_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    12e8:	7645                	lui	a2,0xffff1
    12ea:	167d                	addi	a2,a2,-1
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    12ec:	0317e793          	ori	a5,a5,49
    12f0:	cf1c                	sw	a5,24(a4)
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    12f2:	4f5c                	lw	a5,28(a4)
    12f4:	0017e793          	ori	a5,a5,1
    12f8:	cf5c                	sw	a5,28(a4)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
    12fa:	400107b7          	lui	a5,0x40010
    12fe:	43d4                	lw	a3,4(a5)
    1300:	c3d4                	sw	a3,4(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    1302:	400117b7          	lui	a5,0x40011
    1306:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    130a:	4394                	lw	a3,0(a5)
    130c:	8ef1                	and	a3,a3,a2
    130e:	c394                	sw	a3,0(a5)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*3); 		//set new ones
    1310:	4394                	lw	a3,0(a5)
    1312:	6621                	lui	a2,0x8
    1314:	8ed1                	or	a3,a3,a2
    1316:	c394                	sw	a3,0(a5)
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    1318:	47d4                	lw	a3,12(a5)

	// PD4 is T2CH2_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    131a:	fff10637          	lui	a2,0xfff10
    131e:	167d                	addi	a2,a2,-1
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    1320:	0046e693          	ori	a3,a3,4
    1324:	c7d4                	sw	a3,12(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    1326:	4394                	lw	a3,0(a5)
    1328:	8ef1                	and	a3,a3,a2
    132a:	c394                	sw	a3,0(a5)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*4); 		//set new ones
    132c:	4394                	lw	a3,0(a5)
    132e:	00080637          	lui	a2,0x80
    1332:	8ed1                	or	a3,a3,a2
    1334:	c394                	sw	a3,0(a5)
	GPIOD->OUTDR |= 1<<4;							//1 = pull-up, 0 = pull-down
    1336:	47d4                	lw	a3,12(a5)
    1338:	0106e693          	ori	a3,a3,16
    133c:	c7d4                	sw	a3,12(a5)
	// //# added
	// GPIOC->CFGLR &= ~(0xf<<(4*0));
	// GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*0);

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    133e:	4b1c                	lw	a5,16(a4)
    1340:	0017e793          	ori	a5,a5,1
    1344:	cb1c                	sw	a5,16(a4)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    1346:	4b1c                	lw	a5,16(a4)
    1348:	9bf9                	andi	a5,a5,-2
    134a:	cb1c                	sw	a5,16(a4)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
    134c:	400007b7          	lui	a5,0x40000
    1350:	0087d703          	lhu	a4,8(a5) # 40000008 <_eusrstack+0x1ffff808>
    1354:	0742                	slli	a4,a4,0x10
    1356:	8341                	srli	a4,a4,0x10
    1358:	00376713          	ori	a4,a4,3
    135c:	00e79423          	sh	a4,8(a5)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
    1360:	7765                	lui	a4,0xffff9
    1362:	177d                	addi	a4,a4,-1
    1364:	02e79223          	sh	a4,36(a5)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
    1368:	0147d703          	lhu	a4,20(a5)
    136c:	0742                	slli	a4,a4,0x10
    136e:	8341                	srli	a4,a4,0x10
    1370:	00176713          	ori	a4,a4,1
    1374:	00e79a23          	sh	a4,20(a5)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
    1378:	0007d703          	lhu	a4,0(a5)
    137c:	0742                	slli	a4,a4,0x10
    137e:	8341                	srli	a4,a4,0x10
    1380:	00176713          	ori	a4,a4,1
    1384:	00e79023          	sh	a4,0(a5)

	model->initial_count = TIM2->CNT;
    1388:	0247d703          	lhu	a4,36(a5)
	model->last_count = TIM2->CNT;
    138c:	0247d783          	lhu	a5,36(a5)
	if(dev->regb == 0) dev->regb = 1;
    1390:	c0418793          	addi	a5,gp,-1020 # 20000000 <dev_aht21>
    1394:	00a7c683          	lbu	a3,10(a5)
    1398:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_aht21>
    139c:	4785                	li	a5,1
    139e:	c681                	beqz	a3,13a6 <main+0x11c>
	if(dev->regb  > 4) dev->regb = 4;
    13a0:	4791                	li	a5,4
    13a2:	00d7f463          	bgeu	a5,a3,13aa <main+0x120>
    13a6:	00f70523          	sb	a5,10(a4) # ffff900a <_eusrstack+0xdfff880a>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    13aa:	400217b7          	lui	a5,0x40021
    13ae:	4b90                	lw	a2,16(a5)
    13b0:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    13b4:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    13b8:	8e49                	or	a2,a2,a0
    13ba:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    13bc:	4b90                	lw	a2,16(a5)
    13be:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    13c0:	6405                	lui	s0,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    13c2:	8e6d                	and	a2,a2,a1
    13c4:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    13c6:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    13c8:	fbc00637          	lui	a2,0xfbc00
    13cc:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    13ce:	8ec9                	or	a3,a3,a0
    13d0:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    13d2:	4f94                	lw	a3,24(a5)
    13d4:	0116e693          	ori	a3,a3,17
    13d8:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    13da:	400107b7          	lui	a5,0x40010
    13de:	43d4                	lw	a3,4(a5)
    13e0:	8ef1                	and	a3,a3,a2
    13e2:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    13e4:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    13e6:	767d                	lui	a2,0xfffff
    13e8:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    13ec:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    13ee:	400117b7          	lui	a5,0x40011
    13f2:	4394                	lw	a3,0(a5)
    13f4:	f0f6f693          	andi	a3,a3,-241
    13f8:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    13fa:	4394                	lw	a3,0(a5)
    13fc:	0d06e693          	ori	a3,a3,208
    1400:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1402:	4394                	lw	a3,0(a5)
    1404:	8ef1                	and	a3,a3,a2
    1406:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1408:	4394                	lw	a3,0(a5)
    140a:	d0040613          	addi	a2,s0,-768 # d00 <mini_vpprintf+0xee>
    140e:	8ed1                	or	a3,a3,a2
    1410:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    1412:	400056b7          	lui	a3,0x40005
    1416:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
    141a:	07c2                	slli	a5,a5,0x10
    141c:	83c1                	srli	a5,a5,0x10
    141e:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    1422:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    1426:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
    142a:	431c                	lw	a5,0(a4)
    142c:	6761                	lui	a4,0x18
    142e:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.bfb73fe7+0xebf5>
    1432:	00179593          	slli	a1,a5,0x1
    1436:	34f76463          	bltu	a4,a5,177e <main+0x4f4>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    143a:	02dc7537          	lui	a0,0x2dc7
    143e:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bfb73fe7+0x2dbd155>
    1442:	c67fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    1446:	147d                	addi	s0,s0,-1
    1448:	8d61                	and	a0,a0,s0
    144a:	0542                	slli	a0,a0,0x10
    144c:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    144e:	40005737          	lui	a4,0x40005
    1452:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    1456:	40075783          	lhu	a5,1024(a4)
    145a:	07c2                	slli	a5,a5,0x10
    145c:	83c1                	srli	a5,a5,0x10
    145e:	0017e793          	ori	a5,a5,1
    1462:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    1466:	f45fe0ef          	jal	ra,3aa <i2c_error>

void modI2C_setup() {
	if(i2c_init(&dev_aht21) != I2C_OK) {
    146a:	32050863          	beqz	a0,179a <main+0x510>
		printf("Failed to init I2C\n");
    146e:	6509                	lui	a0,0x2
    1470:	04450513          	addi	a0,a0,68 # 2044 <DMA1_Channel3_IRQHandler+0xd0>
    1474:	395d                	jal	112a <puts>
	ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1476:	4781                	li	a5,0
    1478:	4601                	li	a2,0
		uint32_t now = millis();

		// button_run(&button_a, button_onChanged);
		// modEncoder_task(now, &encoder_a, encoder_onChanged);

		if (now - sec_time > 2000) {
    147a:	7d000713          	li	a4,2000
		uint32_t now = millis();
    147e:	56f2                	lw	a3,60(sp)
    1480:	4294                	lw	a3,0(a3)
    1482:	c636                	sw	a3,12(sp)
		if (now - sec_time > 2000) {
    1484:	8e9d                	sub	a3,a3,a5
    1486:	fed77ce3          	bgeu	a4,a3,147e <main+0x1f4>
			sec_time = now;

			modI2C_task2(counter++);
    148a:	00160793          	addi	a5,a2,1
    148e:	d83e                	sw	a5,48(sp)

	// SetupI2CSlave(0xFE, i2c_registers, sizeof(i2c_registers), onI2C_SlaveWrite, onI2C_SlaveRead, false);
}

void modI2C_task2(uint32_t counter) {
	sprintf(str_output, "counter %lu", counter);
    1490:	6589                	lui	a1,0x2
    1492:	0a058593          	addi	a1,a1,160 # 20a0 <DMA1_Channel3_IRQHandler+0x12c>
    1496:	19418513          	addi	a0,gp,404 # 20000590 <str_output>
    149a:	3e05                	jal	fca <sprintf>
	if (i2c_ping(0x3C) != I2C_OK) return;
    149c:	03c00513          	li	a0,60
    14a0:	f9dfe0ef          	jal	ra,43c <i2c_ping>
    14a4:	e119                	bnez	a0,14aa <main+0x220>
	ssd1306_print_str_at(str, line, 0);
    14a6:	451d                	li	a0,7
    14a8:	3929                	jal	10c2 <ssd1306_print_str_at.constprop.0>
	// Increment the milliseconds count
	systick_millis++;
}

uint32_t get_runTime(void *handler(void)) {
	uint32_t now = micros();
    14aa:	e000f7b7          	lui	a5,0xe000f
    14ae:	4788                	lw	a0,8(a5)
    14b0:	03000593          	li	a1,48
		p0.x = SSD1306_W_LIMIT - p0.x;
		area.w = SSD1306_W_LIMIT - area.w;
	}

	// Draw rectangle with optional fill
	Limit hLimit = { l0: p0.x, l1: x_end };
    14b4:	6419                	lui	s0,0x6
    14b6:	bf3fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    14ba:	da2a                	sw	a0,52(sp)
    14bc:	4495                	li	s1,5

void test_polys() {
    int y = 0;

    //! rectangles
    for (int8_t i = 0; i<4; i++) {
    14be:	4781                	li	a5,0
	Limit hLimit = { l0: p0.x, l1: x_end };
    14c0:	35440413          	addi	s0,s0,852 # 6354 <ch32_mess.c.af9dd7e9+0x23d8>
		uint8_t should_fill = i > 1 ? 1 : 0;
		prefill_rect((M_Point){ 84, y }, (Area) { 15, 5 }, should_fill, 0);
    14c4:	ffb48513          	addi	a0,s1,-5
	Limit hLimit = { l0: p0.x, l1: x_end };
    14c8:	04811c23          	sh	s0,88(sp)
    if (fill) {
    14cc:	4705                	li	a4,1
    14ce:	0ff57513          	andi	a0,a0,255
    14d2:	3af75663          	bge	a4,a5,187e <main+0x5f4>
			prefill_horLine(y_pos, hLimit, 1, 0);
    14d6:	45e6                	lw	a1,88(sp)
    14d8:	c23e                	sw	a5,4(sp)
    14da:	c02a                	sw	a0,0(sp)
    14dc:	a94ff0ef          	jal	ra,770 <prefill_horLine.constprop.0>
		for (uint8_t y_pos = p0.y; y_pos <= y_end; y_pos++) {
    14e0:	4502                	lw	a0,0(sp)
    14e2:	4792                	lw	a5,4(sp)
    14e4:	0505                	addi	a0,a0,1
    14e6:	0ff57513          	andi	a0,a0,255
    14ea:	fea4f6e3          	bgeu	s1,a0,14d6 <main+0x24c>
    for (int8_t i = 0; i<4; i++) {
    14ee:	0785                	addi	a5,a5,1
    14f0:	049d                	addi	s1,s1,7
    14f2:	07e2                	slli	a5,a5,0x18
    14f4:	0ff4f493          	andi	s1,s1,255
    14f8:	02100713          	li	a4,33
    14fc:	87e1                	srai	a5,a5,0x18
    14fe:	fce493e3          	bne	s1,a4,14c4 <main+0x23a>
		y += 7;
	}

    //! zigzag
    M_Point zigzag[] = {
    1502:	0f3217b7          	lui	a5,0xf321
    1506:	83c78793          	addi	a5,a5,-1988 # f32083c <lib_i2c.c.bfb73fe7+0xf316d91>
    150a:	ccbe                	sw	a5,88(sp)
    150c:	004617b7          	lui	a5,0x461
    1510:	85078793          	addi	a5,a5,-1968 # 460850 <lib_i2c.c.bfb73fe7+0x456da5>
    1514:	cebe                	sw	a5,92(sp)
        (M_Point) { 70, 0 },
        (M_Point) { 70, 20 }
    };

    uint8_t pt_count = sizeof(zigzag)/sizeof(M_Point);
    prefill_solid_poly(zigzag, pt_count);
    1516:	08a0                	addi	s0,sp,88
    M_Point zigzag[] = {
    1518:	6785                	lui	a5,0x1
    151a:	44678793          	addi	a5,a5,1094 # 1446 <main+0x1bc>
    prefill_solid_poly(zigzag, pt_count);
    151e:	4595                	li	a1,5
    1520:	8522                	mv	a0,s0
    M_Point zigzag[] = {
    1522:	06f11023          	sh	a5,96(sp)
    prefill_solid_poly(zigzag, pt_count);
    1526:	bd4ff0ef          	jal	ra,8fa <prefill_solid_poly>

    M_Point zigzag2[4];
    memcpy(zigzag2, zigzag, sizeof(zigzag));  // Fast copy
    152a:	4629                	li	a2,10
    152c:	85a2                	mv	a1,s0
    152e:	0088                	addi	a0,sp,64
    1530:	34cd                	jal	1012 <memcpy>

    for (int i = 0; i < sizeof(zigzag)/sizeof(M_Point); i++) {
    1532:	009c                	addi	a5,sp,64
    1534:	04a10693          	addi	a3,sp,74
        zigzag2[i].y += 24;  // Add 20 to each x-coordinate
    1538:	0017c703          	lbu	a4,1(a5)
    for (int i = 0; i < sizeof(zigzag)/sizeof(M_Point); i++) {
    153c:	0789                	addi	a5,a5,2
        zigzag2[i].y += 24;  // Add 20 to each x-coordinate
    153e:	0761                	addi	a4,a4,24
    1540:	fee78fa3          	sb	a4,-1(a5)
    for (int i = 0; i < sizeof(zigzag)/sizeof(M_Point); i++) {
    1544:	fef69ae3          	bne	a3,a5,1538 <main+0x2ae>
    }
    prefill_poly(zigzag2, pt_count, 1);
    1548:	4595                	li	a1,5
    154a:	0088                	addi	a0,sp,64
    154c:	8fcff0ef          	jal	ra,648 <prefill_poly.part.0.constprop.0>


    // Concave polygon: Star (22px tall)
    M_Point star[] = {
    1550:	6589                	lui	a1,0x2
    1552:	4651                	li	a2,20
    1554:	ff058593          	addi	a1,a1,-16 # 1ff0 <DMA1_Channel3_IRQHandler+0x7c>
    1558:	10c8                	addi	a0,sp,100
    155a:	3c65                	jal	1012 <memcpy>
        {18 , 52}   // Bottom-right
    };

    //! star
    pt_count = sizeof(star)/sizeof(M_Point);
    prefill_solid_poly(star, pt_count);
    155c:	45a9                	li	a1,10
    155e:	10c8                	addi	a0,sp,100
    1560:	b9aff0ef          	jal	ra,8fa <prefill_solid_poly>

    // Shift star right by 25px
    for (int i = 0; i < sizeof(star)/sizeof(M_Point); i++) {
    1564:	10dc                	addi	a5,sp,100
        star[i].x += 25;  // Add 20 to each x-coordinate
    1566:	0007c703          	lbu	a4,0(a5)
    for (int i = 0; i < sizeof(star)/sizeof(M_Point); i++) {
    156a:	0789                	addi	a5,a5,2
        star[i].x += 25;  // Add 20 to each x-coordinate
    156c:	0765                	addi	a4,a4,25
    156e:	fee78f23          	sb	a4,-2(a5)
    for (int i = 0; i < sizeof(star)/sizeof(M_Point); i++) {
    1572:	18b8                	addi	a4,sp,120
    1574:	fef719e3          	bne	a4,a5,1566 <main+0x2dc>
    }
    prefill_poly(star, pt_count, 1);
    1578:	45a9                	li	a1,10
    157a:	10c8                	addi	a0,sp,100
    157c:	8ccff0ef          	jal	ra,648 <prefill_poly.part.0.constprop.0>

    //! quad
    pt_count = sizeof(quad)/sizeof(M_Point);
    prefill_solid_poly(quad, pt_count);
    1580:	c2018493          	addi	s1,gp,-992 # 2000001c <quad_t.6>
    1584:	4591                	li	a1,4
    1586:	c2018513          	addi	a0,gp,-992 # 2000001c <quad_t.6>
    158a:	b70ff0ef          	jal	ra,8fa <prefill_solid_poly>

    // Shift quad right by 25px
    M_Point quad2[4];
    memcpy(quad2, quad, sizeof(quad));  // Fast copy
    158e:	409c                	lw	a5,0(s1)
    1590:	c4be                	sw	a5,72(sp)
    1592:	40dc                	lw	a5,4(s1)
    1594:	0884                	addi	s1,sp,80
    1596:	c6be                	sw	a5,76(sp)

    for (int i = 0; i < sizeof(quad)/sizeof(M_Point); i++) {
    1598:	00bc                	addi	a5,sp,72
    159a:	853e                	mv	a0,a5
        quad2[i].x += 25;  // Add 20 to each x-coordinate
    159c:	0007c703          	lbu	a4,0(a5)
    for (int i = 0; i < sizeof(quad)/sizeof(M_Point); i++) {
    15a0:	0789                	addi	a5,a5,2
        quad2[i].x += 25;  // Add 20 to each x-coordinate
    15a2:	0765                	addi	a4,a4,25
    15a4:	fee78f23          	sb	a4,-2(a5)
    for (int i = 0; i < sizeof(quad)/sizeof(M_Point); i++) {
    15a8:	fef49ae3          	bne	s1,a5,159c <main+0x312>
    }
    prefill_poly(quad2, pt_count, 1);
    15ac:	4591                	li	a1,4
    15ae:	89aff0ef          	jal	ra,648 <prefill_poly.part.0.constprop.0>

    //! hourglass
    pt_count = sizeof(hourglass)/sizeof(M_Point);
    prefill_solid_poly(hourglass, pt_count);
    15b2:	4591                	li	a1,4
    15b4:	c1418513          	addi	a0,gp,-1004 # 20000010 <hourglass.5>
    15b8:	b42ff0ef          	jal	ra,8fa <prefill_solid_poly>

    // Shift hourglass right by 25px
    M_Point hourglass2[4];
    memcpy(hourglass2, hourglass, sizeof(hourglass));  // Fast copy
    15bc:	c1418793          	addi	a5,gp,-1004 # 20000010 <hourglass.5>
    15c0:	4398                	lw	a4,0(a5)
    15c2:	43dc                	lw	a5,4(a5)
    15c4:	c8ba                	sw	a4,80(sp)
    15c6:	cabe                	sw	a5,84(sp)

    for (int i = 0; i < sizeof(hourglass)/sizeof(M_Point); i++) {
    15c8:	87a6                	mv	a5,s1
        hourglass2[i].x += 25;  // Add 20 to each x-coordinate
    15ca:	0007c703          	lbu	a4,0(a5)
    for (int i = 0; i < sizeof(hourglass)/sizeof(M_Point); i++) {
    15ce:	0789                	addi	a5,a5,2
        hourglass2[i].x += 25;  // Add 20 to each x-coordinate
    15d0:	0765                	addi	a4,a4,25
    15d2:	fee78f23          	sb	a4,-2(a5)
    for (int i = 0; i < sizeof(hourglass)/sizeof(M_Point); i++) {
    15d6:	fef41ae3          	bne	s0,a5,15ca <main+0x340>
    }
    prefill_poly(hourglass2, pt_count, 1);
    15da:	4591                	li	a1,4
    15dc:	8526                	mv	a0,s1
    15de:	86aff0ef          	jal	ra,648 <prefill_poly.part.0.constprop.0>


void test_circles() {
    int y = 0;

    for (int8_t i = 0; i<4; i++) {
    15e2:	47b1                	li	a5,12
    15e4:	c03e                	sw	a5,0(sp)
    15e6:	c402                	sw	zero,8(sp)
		uint8_t should_fill = i > 1 ? 1 : 0;
		prefill_circle((M_Point){ 110, y }, 5, should_fill);
    15e8:	4782                	lw	a5,0(sp)
    int16_t err = 2 - 2 * radius;
    15ea:	56e1                	li	a3,-8
    int16_t y = 0;
    15ec:	4701                	li	a4,0
    15ee:	ff478313          	addi	t1,a5,-12
    15f2:	0ff37313          	andi	t1,t1,255
    int16_t x = -radius;
    15f6:	57ed                	li	a5,-5
        uint8_t x_start 	= p0.x + x;
    15f8:	0ff7f413          	andi	s0,a5,255
    15fc:	06e40613          	addi	a2,s0,110
		if (fill) {
    1600:	44a2                	lw	s1,8(sp)
        uint8_t x_start 	= p0.x + x;
    1602:	0ff67613          	andi	a2,a2,255
        uint8_t y_top   	= p0.y - y;
    1606:	0ff77513          	andi	a0,a4,255
        uint8_t x_end   	= p0.x - x;
    160a:	06e00593          	li	a1,110
        uint8_t x_start 	= p0.x + x;
    160e:	c232                	sw	a2,4(sp)
        uint8_t y_top   	= p0.y - y;
    1610:	40a302b3          	sub	t0,t1,a0
        uint8_t x_end   	= p0.x - x;
    1614:	40858633          	sub	a2,a1,s0
        uint8_t y_bottom 	= p0.y + y;
    1618:	006503b3          	add	t2,a0,t1
		if (fill) {
    161c:	4085                	li	ra,1
        uint8_t x_end   	= p0.x - x;
    161e:	0ff67613          	andi	a2,a2,255
        uint8_t y_top   	= p0.y - y;
    1622:	0ff2f293          	andi	t0,t0,255
        uint8_t y_bottom 	= p0.y + y;
    1626:	0ff3f393          	andi	t2,t2,255
		if (fill) {
    162a:	2890da63          	bge	ra,s1,18be <main+0x634>
            prefill_fastHorLine(y_top, x_start, x_end);     // Top half
    162e:	4592                	lw	a1,4(sp)
    1630:	8516                	mv	a0,t0
    1632:	d21a                	sw	t1,36(sp)
    1634:	d03a                	sw	a4,32(sp)
    1636:	ce36                	sw	a3,28(sp)
    1638:	ca3e                	sw	a5,20(sp)
    163a:	cc1e                	sw	t2,24(sp)
    163c:	c832                	sw	a2,16(sp)
    163e:	d11fe0ef          	jal	ra,34e <prefill_fastHorLine>
            prefill_fastHorLine(y_bottom, x_start, x_end);  // Bottom half
    1642:	43e2                	lw	t2,24(sp)
    1644:	4642                	lw	a2,16(sp)
    1646:	4592                	lw	a1,4(sp)
    1648:	851e                	mv	a0,t2
    164a:	d05fe0ef          	jal	ra,34e <prefill_fastHorLine>
    164e:	47d2                	lw	a5,20(sp)
    1650:	46f2                	lw	a3,28(sp)
    1652:	5702                	lw	a4,32(sp)
    1654:	5312                	lw	t1,36(sp)
        if (e2 <= y) {
    1656:	2ed74663          	blt	a4,a3,1942 <main+0x6b8>
            err += ++y * 2 + 1;
    165a:	0705                	addi	a4,a4,1
    165c:	0742                	slli	a4,a4,0x10
    165e:	8741                	srai	a4,a4,0x10
    1660:	00171613          	slli	a2,a4,0x1
    1664:	0605                	addi	a2,a2,1
    1666:	9636                	add	a2,a2,a3
    1668:	0642                	slli	a2,a2,0x10
            if (-x == y && e2 <= x) e2 = 0;
    166a:	40f005b3          	neg	a1,a5
            err += ++y * 2 + 1;
    166e:	8641                	srai	a2,a2,0x10
            if (-x == y && e2 <= x) e2 = 0;
    1670:	00b71563          	bne	a4,a1,167a <main+0x3f0>
    1674:	00d7c563          	blt	a5,a3,167e <main+0x3f4>
    1678:	4681                	li	a3,0
        if (e2 > x) err += ++x * 2 + 1;
    167a:	24d7d063          	bge	a5,a3,18ba <main+0x630>
    167e:	0785                	addi	a5,a5,1
    1680:	07c2                	slli	a5,a5,0x10
    1682:	87c1                	srai	a5,a5,0x10
    1684:	00179693          	slli	a3,a5,0x1
    1688:	0685                	addi	a3,a3,1
    168a:	9636                	add	a2,a2,a3
    168c:	0642                	slli	a2,a2,0x10
    } while (x <= 0);
    168e:	4685                	li	a3,1
        if (e2 > x) err += ++x * 2 + 1;
    1690:	8641                	srai	a2,a2,0x10
    } while (x <= 0);
    1692:	22d79463          	bne	a5,a3,18ba <main+0x630>

        if (i > 1) {
    1696:	4722                	lw	a4,8(sp)
    1698:	3ae7dd63          	bge	a5,a4,1a52 <main+0x7c8>
                M_Page_Mask mask_t = page_masks[y_top];
    169c:	11418713          	addi	a4,gp,276 # 20000510 <page_masks>
        if (i > 1) {
    16a0:	67c1                	lui	a5,0x10
                M_Page_Mask mask_t = page_masks[y_top];
    16a2:	d43a                	sw	a4,40(sp)
        if (i > 1) {
    16a4:	ff978593          	addi	a1,a5,-7 # fff9 <lib_i2c.c.bfb73fe7+0x654e>
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    16a8:	ce818713          	addi	a4,gp,-792 # 200000e4 <frame_buffer>
    for (uint8_t r = radius; r >= inner_r; r--) {
    16ac:	17f1                	addi	a5,a5,-4
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    16ae:	d63a                	sw	a4,44(sp)
    for (uint8_t r = radius; r >= inner_r; r--) {
    16b0:	dc3e                	sw	a5,56(sp)
    16b2:	00158713          	addi	a4,a1,1
    16b6:	0706                	slli	a4,a4,0x1
        int16_t x = -r;
    16b8:	01059293          	slli	t0,a1,0x10
    16bc:	0742                	slli	a4,a4,0x10
    16be:	4102d293          	srai	t0,t0,0x10
    16c2:	8741                	srai	a4,a4,0x10
        int16_t y = 0;
    16c4:	4401                	li	s0,0
            int16_t x_start = p0.x + x;
    16c6:	01029513          	slli	a0,t0,0x10
    16ca:	8141                	srli	a0,a0,0x10
    16cc:	05a50793          	addi	a5,a0,90
    16d0:	01079693          	slli	a3,a5,0x10
    16d4:	07c2                	slli	a5,a5,0x10
    16d6:	87c1                	srai	a5,a5,0x10
    16d8:	c83e                	sw	a5,16(sp)
            int16_t x_end   = p0.x - x;
    16da:	05a00793          	li	a5,90
            int16_t x_start = p0.x + x;
    16de:	82c1                	srli	a3,a3,0x10
            int16_t x_end   = p0.x - x;
    16e0:	8f89                	sub	a5,a5,a0
			int16_t x_left  = x_start - 1;
    16e2:	05950613          	addi	a2,a0,89
            int16_t x_start = p0.x + x;
    16e6:	c236                	sw	a3,4(sp)
            int16_t x_end   = p0.x - x;
    16e8:	01079693          	slli	a3,a5,0x10
    16ec:	07c2                	slli	a5,a5,0x10
    16ee:	87c1                	srai	a5,a5,0x10
			int16_t x_left  = x_start - 1;
    16f0:	01061313          	slli	t1,a2,0x10
            int16_t x_end   = p0.x - x;
    16f4:	82c1                	srli	a3,a3,0x10
			int16_t x_left  = x_start - 1;
    16f6:	01035313          	srli	t1,t1,0x10
            int16_t x_end   = p0.x - x;
    16fa:	cc3e                	sw	a5,24(sp)
            int16_t y_top    = p0.y - y;
    16fc:	4782                	lw	a5,0(sp)
            int16_t x_end   = p0.x - x;
    16fe:	ca36                	sw	a3,20(sp)
            int16_t y_top    = p0.y - y;
    1700:	01041493          	slli	s1,s0,0x10
            int16_t y_bottom = p0.y + y;
    1704:	4682                	lw	a3,0(sp)
			int16_t x_left  = x_start - 1;
    1706:	ce1a                	sw	t1,28(sp)
            int16_t x_right = x_end + 1;
    1708:	05b00313          	li	t1,91
            int16_t y_top    = p0.y - y;
    170c:	80c1                	srli	s1,s1,0x10
            int16_t x_right = x_end + 1;
    170e:	40a30333          	sub	t1,t1,a0
    1712:	01031393          	slli	t2,t1,0x10
            int16_t y_top    = p0.y - y;
    1716:	8f85                	sub	a5,a5,s1
            int16_t x_right = x_end + 1;
    1718:	0342                	slli	t1,t1,0x10
    171a:	41035313          	srai	t1,t1,0x10
            int16_t y_top    = p0.y - y;
    171e:	07c2                	slli	a5,a5,0x10
            int16_t y_bottom = p0.y + y;
    1720:	96a6                	add	a3,a3,s1
            int16_t x_right = x_end + 1;
    1722:	0103d393          	srli	t2,t2,0x10
            int16_t y_bottom = p0.y + y;
    1726:	06c2                	slli	a3,a3,0x10
			int16_t x_left  = x_start - 1;
    1728:	0642                	slli	a2,a2,0x10
            int16_t x_right = x_end + 1;
    172a:	d21a                	sw	t1,36(sp)
            int16_t y_top    = p0.y - y;
    172c:	83c1                	srli	a5,a5,0x10
            int16_t x_right = x_end + 1;
    172e:	d01e                	sw	t2,32(sp)
            if (y_top >= 0 && y_top < SSD1306_H) {
    1730:	03f00313          	li	t1,63
            int16_t y_bottom = p0.y + y;
    1734:	82c1                	srli	a3,a3,0x10
			int16_t x_left  = x_start - 1;
    1736:	8641                	srai	a2,a2,0x10
            if (y_top >= 0 && y_top < SSD1306_H) {
    1738:	24f36763          	bltu	t1,a5,1986 <main+0x6fc>
                M_Page_Mask mask_t = page_masks[y_top];
    173c:	5322                	lw	t1,40(sp)
    173e:	0786                	slli	a5,a5,0x1
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    1740:	53b2                	lw	t2,44(sp)
                M_Page_Mask mask_t = page_masks[y_top];
    1742:	979a                	add	a5,a5,t1
    1744:	0017c303          	lbu	t1,1(a5)
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    1748:	0007c783          	lbu	a5,0(a5)
                if (x_left >= 0 && x_left < SSD1306_W) 		row_t[x_left]  |= mask_t.bitmask;
    174c:	40f2                	lw	ra,28(sp)
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    174e:	079e                	slli	a5,a5,0x7
    1750:	979e                	add	a5,a5,t2
                if (x_left >= 0 && x_left < SSD1306_W) 		row_t[x_left]  |= mask_t.bitmask;
    1752:	07f00393          	li	t2,127
    1756:	1e13ea63          	bltu	t2,ra,194a <main+0x6c0>
    175a:	00c780b3          	add	ra,a5,a2
    175e:	0000c383          	lbu	t2,0(ra)
    1762:	007363b3          	or	t2,t1,t2
    1766:	00708023          	sb	t2,0(ra)
                if (x_start >= 0 && x_start < SSD1306_W) 	row_t[x_start] |= mask_t.bitmask;
    176a:	43c2                	lw	t2,16(sp)
    176c:	007780b3          	add	ra,a5,t2
    1770:	0000c383          	lbu	t2,0(ra)
    1774:	007363b3          	or	t2,t1,t2
    1778:	00708023          	sb	t2,0(ra)
    177c:	aad1                	j	1950 <main+0x6c6>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    177e:	02dc7537          	lui	a0,0x2dc7
    1782:	95be                	add	a1,a1,a5
    1784:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bfb73fe7+0x2dbd155>
    1788:	921fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    178c:	147d                	addi	s0,s0,-1
    178e:	8d61                	and	a0,a0,s0
    1790:	0542                	slli	a0,a0,0x10
    1792:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    1794:	67a1                	lui	a5,0x8
    1796:	8d5d                	or	a0,a0,a5
    1798:	b95d                	j	144e <main+0x1c4>
		printf("----Scanning I2C Bus for Devices---\n");
    179a:	6509                	lui	a0,0x2
    179c:	05850513          	addi	a0,a0,88 # 2058 <DMA1_Channel3_IRQHandler+0xe4>
    17a0:	3269                	jal	112a <puts>
{
	// If the callback function is null, exit
	if(callback == NULL) return;

	// Scan through every address, getting a ping() response
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    17a2:	4401                	li	s0,0
		// If the address responds, call the callback function
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    17a4:	8522                	mv	a0,s0
    17a6:	c97fe0ef          	jal	ra,43c <i2c_ping>
    17aa:	e119                	bnez	a0,17b0 <main+0x526>
    17ac:	8522                	mv	a0,s0
    17ae:	3c29                	jal	11c8 <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    17b0:	0405                	addi	s0,s0,1
    17b2:	0ff47413          	andi	s0,s0,255
    17b6:	07f00793          	li	a5,127
    17ba:	fef415e3          	bne	s0,a5,17a4 <main+0x51a>
		printf("----Done Scanning----\n\n");
    17be:	6509                	lui	a0,0x2
    17c0:	07c50513          	addi	a0,a0,124 # 207c <DMA1_Channel3_IRQHandler+0x108>
    17c4:	967ff0ef          	jal	ra,112a <puts>
		if (i2c_ping(0x3C) == I2C_OK) {
    17c8:	03c00513          	li	a0,60
    17cc:	c71fe0ef          	jal	ra,43c <i2c_ping>
    17d0:	ca0513e3          	bnez	a0,1476 <main+0x1ec>
    17d4:	11418713          	addi	a4,gp,276 # 20000510 <page_masks>
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    17d8:	4781                	li	a5,0
		page_masks[y].bitmask    = 1 << (y & 0x07);    // (y % 8)
    17da:	4585                	li	a1,1
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    17dc:	04000613          	li	a2,64
		page_masks[y].page       = y >> 3;             // (y / 8)
    17e0:	0037d693          	srli	a3,a5,0x3
    17e4:	00d70023          	sb	a3,0(a4)
		page_masks[y].bitmask    = 1 << (y & 0x07);    // (y % 8)
    17e8:	0077f693          	andi	a3,a5,7
    17ec:	00d596b3          	sll	a3,a1,a3
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    17f0:	0785                	addi	a5,a5,1
		page_masks[y].bitmask    = 1 << (y & 0x07);    // (y % 8)
    17f2:	00d700a3          	sb	a3,1(a4)
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    17f6:	0ff7f793          	andi	a5,a5,255
    17fa:	0709                	addi	a4,a4,2
    17fc:	fec792e3          	bne	a5,a2,17e0 <main+0x556>
    1800:	6489                	lui	s1,0x2
    1802:	c8018023          	sb	zero,-896(gp) # 2000007c <ssd1306_buffer>
    1806:	32848493          	addi	s1,s1,808 # 2328 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    180a:	0004c503          	lbu	a0,0(s1)
    180e:	0ff00793          	li	a5,255
    1812:	02f51e63          	bne	a0,a5,184e <main+0x5c4>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    1816:	02100513          	li	a0,33
    181a:	f68ff0ef          	jal	ra,f82 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    181e:	4501                	li	a0,0
    1820:	f62ff0ef          	jal	ra,f82 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    1824:	07f00513          	li	a0,127
    1828:	f5aff0ef          	jal	ra,f82 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    182c:	02200513          	li	a0,34
    1830:	f52ff0ef          	jal	ra,f82 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    1834:	4501                	li	a0,0
    1836:	f4cff0ef          	jal	ra,f82 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    183a:	451d                	li	a0,7
    183c:	f46ff0ef          	jal	ra,f82 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    1840:	02000593          	li	a1,32
    1844:	c8018513          	addi	a0,gp,-896 # 2000007c <ssd1306_buffer>
    1848:	fe6ff0ef          	jal	ra,102e <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    184c:	a029                	j	1856 <main+0x5cc>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    184e:	0485                	addi	s1,s1,1
    1850:	f32ff0ef          	jal	ra,f82 <ssd1306_cmd>
    1854:	d95d                	beqz	a0,180a <main+0x580>
	memset(frame_buffer, 0, sizeof(frame_buffer));
    1856:	40000613          	li	a2,1024
    185a:	4581                	li	a1,0
    185c:	ce818513          	addi	a0,gp,-792 # 200000e4 <frame_buffer>
    1860:	f8cff0ef          	jal	ra,fec <memset>
	ssd1306_renderFrame();
    1864:	ff4ff0ef          	jal	ra,1058 <ssd1306_renderFrame>
			sprintf(str_output, "Hello Bee!");
    1868:	6589                	lui	a1,0x2
    186a:	09458593          	addi	a1,a1,148 # 2094 <DMA1_Channel3_IRQHandler+0x120>
    186e:	19418513          	addi	a0,gp,404 # 20000590 <str_output>
    1872:	f8cff0ef          	jal	ra,ffe <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    1876:	4501                	li	a0,0
    1878:	84bff0ef          	jal	ra,10c2 <ssd1306_print_str_at.constprop.0>
    187c:	beed                	j	1476 <main+0x1ec>
        prefill_horLine(p0.y, hLimit, 1, 0);     	// Top edge
    187e:	45e6                	lw	a1,88(sp)
		Limit vLimit = { l0: p0.y + 1, l1: y_end - 1 };
    1880:	ffc48713          	addi	a4,s1,-4
    1884:	06e10223          	sb	a4,100(sp)
    1888:	fff48713          	addi	a4,s1,-1
    188c:	c03e                	sw	a5,0(sp)
    188e:	06e102a3          	sb	a4,101(sp)
        prefill_horLine(p0.y, hLimit, 1, 0);     	// Top edge
    1892:	edffe0ef          	jal	ra,770 <prefill_horLine.constprop.0>
        prefill_horLine(y_end, hLimit, 1, 0);    	// Bottom edge
    1896:	45e6                	lw	a1,88(sp)
    1898:	8526                	mv	a0,s1
    189a:	ed7fe0ef          	jal	ra,770 <prefill_horLine.constprop.0>
        prefill_verLine(p0.x, vLimit, 1, 0); 		// Left edge
    189e:	5596                	lw	a1,100(sp)
    18a0:	4605                	li	a2,1
    18a2:	05400513          	li	a0,84
    18a6:	e1bfe0ef          	jal	ra,6c0 <prefill_verLine.constprop.0>
        prefill_verLine(x_end, vLimit, 1, 0); 		// Right edge
    18aa:	5596                	lw	a1,100(sp)
    18ac:	4605                	li	a2,1
    18ae:	06300513          	li	a0,99
    18b2:	e0ffe0ef          	jal	ra,6c0 <prefill_verLine.constprop.0>
    18b6:	4782                	lw	a5,0(sp)
    18b8:	b91d                	j	14ee <main+0x264>
    for (int8_t i = 0; i<4; i++) {
    18ba:	86b2                	mv	a3,a2
    18bc:	bb35                	j	15f8 <main+0x36e>
			uint8_t xy_start 	= p0.x + y;
    18be:	06e50093          	addi	ra,a0,110
			uint8_t xy_end   	= p0.x - y;
    18c2:	8d89                	sub	a1,a1,a0
    18c4:	d23e                	sw	a5,36(sp)
			uint8_t xy_start 	= p0.x + y;
    18c6:	0ff0f793          	andi	a5,ra,255
			prefill_pixel(x_end		, y_bottom); 	// Octant 1
    18ca:	8532                	mv	a0,a2
			uint8_t xy_start 	= p0.x + y;
    18cc:	c83e                	sw	a5,16(sp)
			uint8_t xy_end   	= p0.x - y;
    18ce:	0ff5f793          	andi	a5,a1,255
			prefill_pixel(x_end		, y_bottom); 	// Octant 1
    18d2:	859e                	mv	a1,t2
			uint8_t yx_start 	= p0.y + x;
    18d4:	006404b3          	add	s1,s0,t1
    18d8:	dc3a                	sw	a4,56(sp)
			uint8_t yx_end   	= p0.y - x;
    18da:	40830433          	sub	s0,t1,s0
    18de:	d636                	sw	a3,44(sp)
			uint8_t xy_end   	= p0.x - y;
    18e0:	ca3e                	sw	a5,20(sp)
			uint8_t yx_end   	= p0.y - x;
    18e2:	d01a                	sw	t1,32(sp)
			prefill_pixel(x_end		, y_bottom); 	// Octant 1
    18e4:	ce32                	sw	a2,28(sp)
    18e6:	d416                	sw	t0,40(sp)
    18e8:	cc1e                	sw	t2,24(sp)
    18ea:	a29fe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(x_start	, y_bottom); 	// Octant 2
    18ee:	43e2                	lw	t2,24(sp)
    18f0:	4512                	lw	a0,4(sp)
			uint8_t yx_start 	= p0.y + x;
    18f2:	0ff4f493          	andi	s1,s1,255
			prefill_pixel(x_start	, y_bottom); 	// Octant 2
    18f6:	859e                	mv	a1,t2
    18f8:	a1bfe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(x_start	, y_top); 		// Octant 3
    18fc:	52a2                	lw	t0,40(sp)
    18fe:	4512                	lw	a0,4(sp)
			uint8_t yx_end   	= p0.y - x;
    1900:	0ff47413          	andi	s0,s0,255
			prefill_pixel(x_start	, y_top); 		// Octant 3
    1904:	8596                	mv	a1,t0
    1906:	cc16                	sw	t0,24(sp)
    1908:	a0bfe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(x_end		, y_top); 		// Octant 4
    190c:	42e2                	lw	t0,24(sp)
    190e:	4672                	lw	a2,28(sp)
    1910:	8596                	mv	a1,t0
    1912:	8532                	mv	a0,a2
    1914:	9fffe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(xy_end	, yx_start); 	// Octant 5
    1918:	4552                	lw	a0,20(sp)
    191a:	85a6                	mv	a1,s1
    191c:	9f7fe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(xy_start	, yx_start); 	// Octant 6
    1920:	4542                	lw	a0,16(sp)
    1922:	85a6                	mv	a1,s1
    1924:	9effe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(xy_start	, yx_end); 		// Octant 7
    1928:	4542                	lw	a0,16(sp)
    192a:	85a2                	mv	a1,s0
    192c:	9e7fe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(xy_end	, yx_end); 		// Octant 8
    1930:	4552                	lw	a0,20(sp)
    1932:	85a2                	mv	a1,s0
    1934:	9dffe0ef          	jal	ra,312 <prefill_pixel>
    1938:	5762                	lw	a4,56(sp)
    193a:	56b2                	lw	a3,44(sp)
    193c:	5792                	lw	a5,36(sp)
    193e:	5302                	lw	t1,32(sp)
    1940:	bb19                	j	1656 <main+0x3cc>
        if (e2 <= y) {
    1942:	8636                	mv	a2,a3
    1944:	bb1d                	j	167a <main+0x3f0>
        if (i > 1) {
    1946:	873e                	mv	a4,a5
    1948:	bbbd                	j	16c6 <main+0x43c>
                if (x_start >= 0 && x_start < SSD1306_W) 	row_t[x_start] |= mask_t.bitmask;
    194a:	4092                	lw	ra,4(sp)
    194c:	e013ffe3          	bgeu	t2,ra,176a <main+0x4e0>
                if (x_end >= 0 && x_end < SSD1306_W) 		row_t[x_end]   |= mask_t.bitmask;
    1950:	40d2                	lw	ra,20(sp)
    1952:	07f00393          	li	t2,127
    1956:	0013eb63          	bltu	t2,ra,196c <main+0x6e2>
    195a:	43e2                	lw	t2,24(sp)
    195c:	007780b3          	add	ra,a5,t2
    1960:	0000c383          	lbu	t2,0(ra)
    1964:	007363b3          	or	t2,t1,t2
    1968:	00708023          	sb	t2,0(ra)
                if (x_right >= 0 && x_right < SSD1306_W) 	row_t[x_right] |= mask_t.bitmask;
    196c:	5082                	lw	ra,32(sp)
    196e:	07f00393          	li	t2,127
    1972:	0013ea63          	bltu	t2,ra,1986 <main+0x6fc>
    1976:	5392                	lw	t2,36(sp)
    1978:	979e                	add	a5,a5,t2
    197a:	0007c383          	lbu	t2,0(a5) # 8000 <ch32_mess.c.af9dd7e9+0x4084>
    197e:	00736333          	or	t1,t1,t2
    1982:	00678023          	sb	t1,0(a5)
            if (y_bottom >= 0 && y_bottom < SSD1306_H) {
    1986:	03f00793          	li	a5,63
    198a:	08d7e063          	bltu	a5,a3,1a0a <main+0x780>
                M_Page_Mask mask_b = page_masks[y_bottom];
    198e:	57a2                	lw	a5,40(sp)
    1990:	0686                	slli	a3,a3,0x1
                if (x_left >= 0 && x_left < SSD1306_W) 		row_b[x_left]  |= mask_b.bitmask;
    1992:	43f2                	lw	t2,28(sp)
                M_Page_Mask mask_b = page_masks[y_bottom];
    1994:	96be                	add	a3,a3,a5
                uint8_t* row_b = frame_base + (mask_b.page * SSD1306_W);
    1996:	0006c783          	lbu	a5,0(a3)
                M_Page_Mask mask_b = page_masks[y_bottom];
    199a:	0016c303          	lbu	t1,1(a3)
                uint8_t* row_b = frame_base + (mask_b.page * SSD1306_W);
    199e:	56b2                	lw	a3,44(sp)
    19a0:	079e                	slli	a5,a5,0x7
    19a2:	97b6                	add	a5,a5,a3
                if (x_left >= 0 && x_left < SSD1306_W) 		row_b[x_left]  |= mask_b.bitmask;
    19a4:	07f00693          	li	a3,127
    19a8:	0276e363          	bltu	a3,t2,19ce <main+0x744>
    19ac:	963e                	add	a2,a2,a5
    19ae:	00064683          	lbu	a3,0(a2)
    19b2:	00d366b3          	or	a3,t1,a3
    19b6:	00d60023          	sb	a3,0(a2)
                if (x_start >= 0 && x_start < SSD1306_W) 	row_b[x_start] |= mask_b.bitmask;
    19ba:	46c2                	lw	a3,16(sp)
    19bc:	00d78633          	add	a2,a5,a3
    19c0:	00064683          	lbu	a3,0(a2)
    19c4:	00d366b3          	or	a3,t1,a3
    19c8:	00d60023          	sb	a3,0(a2)
    19cc:	a021                	j	19d4 <main+0x74a>
    19ce:	4612                	lw	a2,4(sp)
    19d0:	fec6f5e3          	bgeu	a3,a2,19ba <main+0x730>
                if (x_end >= 0 && x_end < SSD1306_W) 		row_b[x_end]   |= mask_b.bitmask;
    19d4:	4652                	lw	a2,20(sp)
    19d6:	07f00693          	li	a3,127
    19da:	00c6eb63          	bltu	a3,a2,19f0 <main+0x766>
    19de:	46e2                	lw	a3,24(sp)
    19e0:	00d78633          	add	a2,a5,a3
    19e4:	00064683          	lbu	a3,0(a2)
    19e8:	00d366b3          	or	a3,t1,a3
    19ec:	00d60023          	sb	a3,0(a2)
                if (x_right >= 0 && x_right < SSD1306_W) 	row_b[x_right] |= mask_b.bitmask;
    19f0:	5602                	lw	a2,32(sp)
    19f2:	07f00693          	li	a3,127
    19f6:	00c6ea63          	bltu	a3,a2,1a0a <main+0x780>
    19fa:	5692                	lw	a3,36(sp)
    19fc:	97b6                	add	a5,a5,a3
    19fe:	0007c683          	lbu	a3,0(a5)
    1a02:	00d366b3          	or	a3,t1,a3
    1a06:	00d78023          	sb	a3,0(a5)
            if (e2 <= y) err += ++y * 2 + 1;  // y*2+1
    1a0a:	87ba                	mv	a5,a4
    1a0c:	00e44d63          	blt	s0,a4,1a26 <main+0x79c>
    1a10:	00148793          	addi	a5,s1,1
    1a14:	01079413          	slli	s0,a5,0x10
    1a18:	8441                	srai	s0,s0,0x10
    1a1a:	00141793          	slli	a5,s0,0x1
    1a1e:	0785                	addi	a5,a5,1
    1a20:	97ba                	add	a5,a5,a4
    1a22:	07c2                	slli	a5,a5,0x10
    1a24:	87c1                	srai	a5,a5,0x10
            if (e2 > x)  err += ++x * 2 + 1;  // x*2+1
    1a26:	f2e2d0e3          	bge	t0,a4,1946 <main+0x6bc>
    1a2a:	0505                	addi	a0,a0,1
    1a2c:	01051293          	slli	t0,a0,0x10
    1a30:	4102d293          	srai	t0,t0,0x10
    1a34:	00129713          	slli	a4,t0,0x1
    1a38:	0705                	addi	a4,a4,1
    1a3a:	97ba                	add	a5,a5,a4
    1a3c:	07c2                	slli	a5,a5,0x10
        } while (x <= 0);
    1a3e:	4705                	li	a4,1
            if (e2 > x)  err += ++x * 2 + 1;  // x*2+1
    1a40:	87c1                	srai	a5,a5,0x10
        } while (x <= 0);
    1a42:	f0e292e3          	bne	t0,a4,1946 <main+0x6bc>
    for (uint8_t r = radius; r >= inner_r; r--) {
    1a46:	0585                	addi	a1,a1,1
    1a48:	57e2                	lw	a5,56(sp)
    1a4a:	05c2                	slli	a1,a1,0x10
    1a4c:	81c1                	srli	a1,a1,0x10
    1a4e:	c6f592e3          	bne	a1,a5,16b2 <main+0x428>
    for (int8_t i = 0; i<4; i++) {
    1a52:	47a2                	lw	a5,8(sp)
    1a54:	0785                	addi	a5,a5,1
    1a56:	07e2                	slli	a5,a5,0x18
    1a58:	87e1                	srai	a5,a5,0x18
    1a5a:	c43e                	sw	a5,8(sp)
    1a5c:	4782                	lw	a5,0(sp)
    1a5e:	07b9                	addi	a5,a5,14
    1a60:	07c2                	slli	a5,a5,0x10
    1a62:	83c1                	srli	a5,a5,0x10
    1a64:	c03e                	sw	a5,0(sp)
    1a66:	4702                	lw	a4,0(sp)
    1a68:	04400793          	li	a5,68
    1a6c:	b6f71ee3          	bne	a4,a5,15e8 <main+0x35e>
    1a70:	4401                	li	s0,0
		Limit limit = { l0: 0, l1: myvalues[i] };
    1a72:	6489                	lui	s1,0x2
	for(int8_t i = 0; i<sizeof(myvalues); i++) {
    1a74:	00241513          	slli	a0,s0,0x2
    1a78:	47c1                	li	a5,16
    1a7a:	0ff57513          	andi	a0,a0,255
    1a7e:	08f41663          	bne	s0,a5,1b0a <main+0x880>
    1a82:	04000413          	li	s0,64
    1a86:	0ff47793          	andi	a5,s0,255
		M_Point point_a0 = { x: x, y: 0 };
    1a8a:	00179713          	slli	a4,a5,0x1
    1a8e:	f8070713          	addi	a4,a4,-128
    1a92:	04e10423          	sb	a4,72(sp)
		M_Point point_a1 = { x: SSD1306_W, y: y };
    1a96:	f8000713          	li	a4,-128
    1a9a:	04e10823          	sb	a4,80(sp)
    1a9e:	04f108a3          	sb	a5,81(sp)
		M_Point point_a0 = { x: x, y: 0 };
    1aa2:	040104a3          	sb	zero,73(sp)
		M_Point point_b0 = { x: SSD1306_W-x, y: SSD1306_H };
    1aa6:	40f00733          	neg	a4,a5
		prefill_line(point_a0, point_a1, 1);
    1aaa:	45c6                	lw	a1,80(sp)
    1aac:	4526                	lw	a0,72(sp)
		M_Point point_b0 = { x: SSD1306_W-x, y: SSD1306_H };
    1aae:	0706                	slli	a4,a4,0x1
    1ab0:	04e10c23          	sb	a4,88(sp)
    1ab4:	04000713          	li	a4,64
		M_Point point_b1 = { x: 0, y: SSD1306_H-y };
    1ab8:	40f707b3          	sub	a5,a4,a5
    1abc:	06f102a3          	sb	a5,101(sp)
		M_Point point_b0 = { x: SSD1306_W-x, y: SSD1306_H };
    1ac0:	04e10ca3          	sb	a4,89(sp)
		M_Point point_b1 = { x: 0, y: SSD1306_H-y };
    1ac4:	06010223          	sb	zero,100(sp)
		prefill_line(point_a0, point_a1, 1);
    1ac8:	a53fe0ef          	jal	ra,51a <prefill_line.constprop.0>
		prefill_line(point_b0, point_b1, 1);
    1acc:	5596                	lw	a1,100(sp)
    1ace:	4566                	lw	a0,88(sp)
		y+= SSD1306_H/8;
    1ad0:	0421                	addi	s0,s0,8
		prefill_line(point_b0, point_b1, 1);
    1ad2:	a49fe0ef          	jal	ra,51a <prefill_line.constprop.0>
    for(uint8_t x=0;x<SSD1306_W;x+=16) {
    1ad6:	08000793          	li	a5,128
    1ada:	faf416e3          	bne	s0,a5,1a86 <main+0x7fc>
	// ssd1306_print_str_at("testing 55554fdafadfafa", 4, 0);
	// ssd1306_print_str_at("testing 66664fdafadfafa", 5, 0);
	// ssd1306_print_str_at("testing 77774fdafadfafa", 6, 0);
	// ssd1306_print_str_at("testing 88884fdafadfafa", 7, 0);

	ssd1306_renderFrame();
    1ade:	d7aff0ef          	jal	ra,1058 <ssd1306_renderFrame>
	handler();
	return micros() - now;
    1ae2:	e000f7b7          	lui	a5,0xe000f
    1ae6:	4788                	lw	a0,8(a5)
    1ae8:	03000593          	li	a1,48
    1aec:	dbcfe0ef          	jal	ra,a8 <__hidden___udivsi3>

			// // modJoystick_task();
			// // dma_uart_tx(message, sizeof(message) - 1);

			uint32_t runtime_i2c = get_runTime(ssd1306_draw_test);
			sprintf(str_output, "I2C runtime: %lu us", runtime_i2c);
    1af0:	57d2                	lw	a5,52(sp)
    1af2:	6589                	lui	a1,0x2
    1af4:	0ac58593          	addi	a1,a1,172 # 20ac <DMA1_Channel3_IRQHandler+0x138>
    1af8:	40f50633          	sub	a2,a0,a5
    1afc:	19418513          	addi	a0,gp,404 # 20000590 <str_output>
    1b00:	ccaff0ef          	jal	ra,fca <sprintf>
		uint32_t now = millis();
    1b04:	47b2                	lw	a5,12(sp)
			modI2C_task2(counter++);
    1b06:	5642                	lw	a2,48(sp)
    1b08:	ba8d                	j	147a <main+0x1f0>
		Limit limit = { l0: 0, l1: myvalues[i] };
    1b0a:	31848793          	addi	a5,s1,792 # 2318 <myvalues>
    1b0e:	97a2                	add	a5,a5,s0
    1b10:	0007c783          	lbu	a5,0(a5) # e000f000 <_eusrstack+0xc000e800>
    1b14:	06010223          	sb	zero,100(sp)
		prefill_verLine(y, limit, 3, 0);
    1b18:	460d                	li	a2,3
		Limit limit = { l0: 0, l1: myvalues[i] };
    1b1a:	06f102a3          	sb	a5,101(sp)
		prefill_verLine(y, limit, 3, 0);
    1b1e:	5596                	lw	a1,100(sp)
    1b20:	0405                	addi	s0,s0,1
    1b22:	b9ffe0ef          	jal	ra,6c0 <prefill_verLine.constprop.0>
	for(int8_t i = 0; i<sizeof(myvalues); i++) {
    1b26:	b7b9                	j	1a74 <main+0x7ea>

00001b28 <SysTick_Handler>:
{
    1b28:	1151                	addi	sp,sp,-12
    1b2a:	c03e                	sw	a5,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1b2c:	e000f7b7          	lui	a5,0xe000f
{
    1b30:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1b32:	4b98                	lw	a4,16(a5)
{
    1b34:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1b36:	66b1                	lui	a3,0xc
    1b38:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.bfb73fe7+0x20d5>
    1b3c:	9736                	add	a4,a4,a3
    1b3e:	cb98                	sw	a4,16(a5)
	SysTick->SR = 0x00000000;
    1b40:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>
	systick_millis++;
    1b44:	c8418793          	addi	a5,gp,-892 # 20000080 <systick_millis>
    1b48:	4398                	lw	a4,0(a5)
}
    1b4a:	46a2                	lw	a3,8(sp)
	systick_millis++;
    1b4c:	0705                	addi	a4,a4,1
    1b4e:	c398                	sw	a4,0(a5)
}
    1b50:	4712                	lw	a4,4(sp)
    1b52:	4782                	lw	a5,0(sp)
    1b54:	0131                	addi	sp,sp,12
    1b56:	30200073          	mret

00001b5a <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    1b5a:	7179                	addi	sp,sp,-48
    1b5c:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    1b5e:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    1b62:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    1b64:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    1b68:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    1b6c:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    1b70:	cc26                	sw	s1,24(sp)
    1b72:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    1b74:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    1b78:	d416                	sw	t0,40(sp)
    1b7a:	d21a                	sw	t1,36(sp)
    1b7c:	d01e                	sw	t2,32(sp)
    1b7e:	ce22                	sw	s0,28(sp)
    1b80:	ca2a                	sw	a0,20(sp)
    1b82:	c82e                	sw	a1,16(sp)
    1b84:	c632                	sw	a2,12(sp)
    1b86:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    1b88:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    1b8a:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    1b8c:	c305                	beqz	a4,1bac <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    1b8e:	0e818713          	addi	a4,gp,232 # 200004e4 <i2c_slave_state>
    1b92:	4685                	li	a3,1
    1b94:	07c2                	slli	a5,a5,0x10
    1b96:	83c1                	srli	a5,a5,0x10
    1b98:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1b9c:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1ba0:	839d                	srli	a5,a5,0x7
    1ba2:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1ba4:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1ba8:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    1bac:	0404f793          	andi	a5,s1,64
    1bb0:	c795                	beqz	a5,1bdc <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    1bb2:	0e818793          	addi	a5,gp,232 # 200004e4 <i2c_slave_state>
    1bb6:	0007c703          	lbu	a4,0(a5)
    1bba:	c379                	beqz	a4,1c80 <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
    1bbc:	40005737          	lui	a4,0x40005
    1bc0:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    1bc4:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    1bc8:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    1bcc:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    1bd0:	0ff77713          	andi	a4,a4,255
    1bd4:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    1bd8:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    1bdc:	0804f793          	andi	a5,s1,128
    1be0:	c7a1                	beqz	a5,1c28 <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    1be2:	0e818793          	addi	a5,gp,232 # 200004e4 <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    1be6:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1bea:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    1bee:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    1bf2:	400057b7          	lui	a5,0x40005
    1bf6:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    1bfa:	0e818413          	addi	s0,gp,232 # 200004e4 <i2c_slave_state>
    1bfe:	cb79                	beqz	a4,1cd4 <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1c00:	01044703          	lbu	a4,16(s0)
    1c04:	0ee57663          	bgeu	a0,a4,1cf0 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    1c08:	4458                	lw	a4,12(s0)
    1c0a:	972a                	add	a4,a4,a0
    1c0c:	00074703          	lbu	a4,0(a4)
    1c10:	0ff77713          	andi	a4,a4,255
    1c14:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    1c18:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    1c1a:	c391                	beqz	a5,1c1e <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    1c1c:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    1c1e:	00244783          	lbu	a5,2(s0)
    1c22:	0785                	addi	a5,a5,1
    1c24:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    1c28:	88c1                	andi	s1,s1,16
    1c2a:	cc85                	beqz	s1,1c62 <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    1c2c:	40005737          	lui	a4,0x40005
    1c30:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    1c34:	07c2                	slli	a5,a5,0x10
    1c36:	83c1                	srli	a5,a5,0x10
    1c38:	dff7f793          	andi	a5,a5,-513
    1c3c:	07c2                	slli	a5,a5,0x10
    1c3e:	83c1                	srli	a5,a5,0x10
    1c40:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
    1c44:	0e818793          	addi	a5,gp,232 # 200004e4 <i2c_slave_state>
    1c48:	02a7c703          	lbu	a4,42(a5)
    1c4c:	c74d                	beqz	a4,1cf6 <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
    1c4e:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    1c50:	cb09                	beqz	a4,1c62 <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    1c52:	0017c503          	lbu	a0,1(a5)
    1c56:	0027c583          	lbu	a1,2(a5)
    1c5a:	8d89                	sub	a1,a1,a0
    1c5c:	0ff5f593          	andi	a1,a1,255
    1c60:	9702                	jalr	a4
            }
        }
    }
}
    1c62:	4472                	lw	s0,28(sp)
    1c64:	50b2                	lw	ra,44(sp)
    1c66:	52a2                	lw	t0,40(sp)
    1c68:	5312                	lw	t1,36(sp)
    1c6a:	5382                	lw	t2,32(sp)
    1c6c:	44e2                	lw	s1,24(sp)
    1c6e:	4552                	lw	a0,20(sp)
    1c70:	45c2                	lw	a1,16(sp)
    1c72:	4632                	lw	a2,12(sp)
    1c74:	46a2                	lw	a3,8(sp)
    1c76:	4712                	lw	a4,4(sp)
    1c78:	4782                	lw	a5,0(sp)
    1c7a:	6145                	addi	sp,sp,48
    1c7c:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    1c80:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    1c84:	4705                	li	a4,1
    1c86:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    1c8a:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    1c8e:	c695                	beqz	a3,1cba <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    1c90:	0107c683          	lbu	a3,16(a5)
    1c94:	f4d774e3          	bgeu	a4,a3,1bdc <I2C1_EV_IRQHandler+0x82>
    1c98:	0287c683          	lbu	a3,40(a5)
    1c9c:	f2a1                	bnez	a3,1bdc <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    1c9e:	400056b7          	lui	a3,0x40005
    1ca2:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1ca6:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    1ca8:	96ba                	add	a3,a3,a4
    1caa:	0ff67613          	andi	a2,a2,255
    1cae:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    1cb2:	0705                	addi	a4,a4,1
    1cb4:	00e78123          	sb	a4,2(a5)
    1cb8:	b715                	j	1bdc <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    1cba:	0087c683          	lbu	a3,8(a5)
    1cbe:	f0d77fe3          	bgeu	a4,a3,1bdc <I2C1_EV_IRQHandler+0x82>
    1cc2:	01c7c683          	lbu	a3,28(a5)
    1cc6:	fa99                	bnez	a3,1bdc <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    1cc8:	400056b7          	lui	a3,0x40005
    1ccc:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1cd0:	43d4                	lw	a3,4(a5)
    1cd2:	bfd9                	j	1ca8 <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    1cd4:	00844703          	lbu	a4,8(s0)
    1cd8:	00e57c63          	bgeu	a0,a4,1cf0 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    1cdc:	4058                	lw	a4,4(s0)
    1cde:	972a                	add	a4,a4,a0
    1ce0:	00074703          	lbu	a4,0(a4)
    1ce4:	0ff77713          	andi	a4,a4,255
    1ce8:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    1cec:	4c1c                	lw	a5,24(s0)
    1cee:	b735                	j	1c1a <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    1cf0:	00079823          	sh	zero,16(a5)
    1cf4:	bf15                	j	1c28 <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    1cf6:	4bd8                	lw	a4,20(a5)
    1cf8:	bfa1                	j	1c50 <I2C1_EV_IRQHandler+0xf6>

00001cfa <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    1cfa:	1151                	addi	sp,sp,-12
    1cfc:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1cfe:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
    1d02:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1d04:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    1d08:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1d0a:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1d0e:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
    1d12:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1d14:	cf89                	beqz	a5,1d2e <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    1d16:	41475783          	lhu	a5,1044(a4)
    1d1a:	40070713          	addi	a4,a4,1024
    1d1e:	07c2                	slli	a5,a5,0x10
    1d20:	83c1                	srli	a5,a5,0x10
    1d22:	eff7f793          	andi	a5,a5,-257
    1d26:	07c2                	slli	a5,a5,0x10
    1d28:	83c1                	srli	a5,a5,0x10
    1d2a:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    1d2e:	2006f793          	andi	a5,a3,512
    1d32:	cf89                	beqz	a5,1d4c <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    1d34:	40005737          	lui	a4,0x40005
    1d38:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    1d3c:	07c2                	slli	a5,a5,0x10
    1d3e:	83c1                	srli	a5,a5,0x10
    1d40:	dff7f793          	andi	a5,a5,-513
    1d44:	07c2                	slli	a5,a5,0x10
    1d46:	83c1                	srli	a5,a5,0x10
    1d48:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    1d4c:	4006f693          	andi	a3,a3,1024
    1d50:	ce89                	beqz	a3,1d6a <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    1d52:	40005737          	lui	a4,0x40005
    1d56:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    1d5a:	07c2                	slli	a5,a5,0x10
    1d5c:	83c1                	srli	a5,a5,0x10
    1d5e:	bff7f793          	andi	a5,a5,-1025
    1d62:	07c2                	slli	a5,a5,0x10
    1d64:	83c1                	srli	a5,a5,0x10
    1d66:	40f71a23          	sh	a5,1044(a4)
    }
}
    1d6a:	46a2                	lw	a3,8(sp)
    1d6c:	4712                	lw	a4,4(sp)
    1d6e:	4782                	lw	a5,0(sp)
    1d70:	0131                	addi	sp,sp,12
    1d72:	30200073          	mret

00001d76 <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    1d76:	fdc10113          	addi	sp,sp,-36
    1d7a:	ce22                	sw	s0,28(sp)
    1d7c:	d006                	sw	ra,32(sp)
    1d7e:	cc26                	sw	s1,24(sp)
    1d80:	842a                	mv	s0,a0
	if( tween <= 0 ) return hexa;
    1d82:	0ac05f63          	blez	a2,1e40 <TweenHexColors+0xca>
	if( tween >= 255 ) return hexb;
    1d86:	0fe00793          	li	a5,254
    1d8a:	84ae                	mv	s1,a1
    1d8c:	0cc7c163          	blt	a5,a2,1e4e <TweenHexColors+0xd8>
	int32_t aamt = 255-tween;
    1d90:	0ff00293          	li	t0,255
    1d94:	40c282b3          	sub	t0,t0,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1d98:	8596                	mv	a1,t0
    1d9a:	0ff57513          	andi	a0,a0,255
    1d9e:	c216                	sw	t0,4(sp)
	int32_t aamt = 255-tween;
    1da0:	c032                	sw	a2,0(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1da2:	1fffe097          	auipc	ra,0x1fffe
    1da6:	286080e7          	jalr	646(ra) # 20000028 <FastMultiply>
    1daa:	4602                	lw	a2,0(sp)
    1dac:	ca2a                	sw	a0,20(sp)
    1dae:	0ff4f513          	andi	a0,s1,255
    1db2:	85b2                	mv	a1,a2
    1db4:	1fffe097          	auipc	ra,0x1fffe
    1db8:	274080e7          	jalr	628(ra) # 20000028 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1dbc:	4292                	lw	t0,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1dbe:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    1dc0:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1dc4:	8596                	mv	a1,t0
    1dc6:	0ff57513          	andi	a0,a0,255
    1dca:	c616                	sw	t0,12(sp)
    1dcc:	1fffe097          	auipc	ra,0x1fffe
    1dd0:	25c080e7          	jalr	604(ra) # 20000028 <FastMultiply>
    1dd4:	4602                	lw	a2,0(sp)
    1dd6:	c42a                	sw	a0,8(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    1dd8:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1ddc:	85b2                	mv	a1,a2
    1dde:	0ff57513          	andi	a0,a0,255
    1de2:	c232                	sw	a2,4(sp)
    1de4:	1fffe097          	auipc	ra,0x1fffe
    1de8:	244080e7          	jalr	580(ra) # 20000028 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1dec:	42b2                	lw	t0,12(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1dee:	c02a                	sw	a0,0(sp)
	int32_t hag = (hexa>>16) & 0xff;
    1df0:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1df4:	8596                	mv	a1,t0
    1df6:	0ff57513          	andi	a0,a0,255
    1dfa:	1fffe097          	auipc	ra,0x1fffe
    1dfe:	22e080e7          	jalr	558(ra) # 20000028 <FastMultiply>
    1e02:	4612                	lw	a2,4(sp)
    1e04:	842a                	mv	s0,a0
	int32_t hbg = (hexb>>16) & 0xff;
    1e06:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e0a:	85b2                	mv	a1,a2
    1e0c:	0ff57513          	andi	a0,a0,255
    1e10:	1fffe097          	auipc	ra,0x1fffe
    1e14:	218080e7          	jalr	536(ra) # 20000028 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e18:	4342                	lw	t1,16(sp)
    1e1a:	47d2                	lw	a5,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e1c:	4682                	lw	a3,0(sp)
    1e1e:	4722                	lw	a4,8(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e20:	979a                	add	a5,a5,t1
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e22:	942a                	add	s0,s0,a0
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e24:	9736                	add	a4,a4,a3
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e26:	08078793          	addi	a5,a5,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e2a:	08070713          	addi	a4,a4,128
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e2e:	08040413          	addi	s0,s0,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e32:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    1e34:	f0077713          	andi	a4,a4,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e38:	8021                	srli	s0,s0,0x8
	return b | (r<<8) | (g<<16);
    1e3a:	8fd9                	or	a5,a5,a4
    1e3c:	0442                	slli	s0,s0,0x10
    1e3e:	8c5d                	or	s0,s0,a5
}
    1e40:	5082                	lw	ra,32(sp)
    1e42:	8522                	mv	a0,s0
    1e44:	4472                	lw	s0,28(sp)
    1e46:	44e2                	lw	s1,24(sp)
    1e48:	02410113          	addi	sp,sp,36
    1e4c:	8082                	ret
	if( tween >= 255 ) return hexb;
    1e4e:	842e                	mv	s0,a1
    1e50:	bfc5                	j	1e40 <TweenHexColors+0xca>

00001e52 <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1e52:	1111                	addi	sp,sp,-28
    1e54:	c826                	sw	s1,16(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    1e56:	c781a483          	lw	s1,-904(gp) # 20000074 <WS2812LEDs>
	int place = WS2812LEDPlace;
    1e5a:	c7418713          	addi	a4,gp,-908 # 20000070 <WS2812LEDPlace>
    1e5e:	4318                	lw	a4,0(a4)
    1e60:	c7418613          	addi	a2,gp,-908 # 20000070 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1e64:	ca22                	sw	s0,20(sp)
    1e66:	cc06                	sw	ra,24(sp)
    1e68:	87aa                	mv	a5,a0
    1e6a:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
    1e6c:	03050693          	addi	a3,a0,48
    1e70:	c032                	sw	a2,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    1e72:	04074a63          	bltz	a4,1ec6 <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    1e76:	04f68a63          	beq	a3,a5,1eca <WS2812FillBuffSec.constprop.0+0x78>
	{
		if( place >= ledcount )
    1e7a:	04974f63          	blt	a4,s1,1ed8 <WS2812FillBuffSec.constprop.0+0x86>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    1e7e:	40f68633          	sub	a2,a3,a5
    1e82:	4581                	li	a1,0
    1e84:	853e                	mv	a0,a5
    1e86:	c23a                	sw	a4,4(sp)
    1e88:	964ff0ef          	jal	ra,fec <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    1e8c:	4712                	lw	a4,4(sp)
    1e8e:	cc15                	beqz	s0,1eca <WS2812FillBuffSec.constprop.0+0x78>
			{
				if( place == ledcount )
    1e90:	00e49a63          	bne	s1,a4,1ea4 <WS2812FillBuffSec.constprop.0+0x52>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    1e94:	400206b7          	lui	a3,0x40020
    1e98:	5a9c                	lw	a5,48(a3)
    1e9a:	fdf7f793          	andi	a5,a5,-33
    1e9e:	da9c                	sw	a5,48(a3)
					WS2812BLEDInUse = 0;
    1ea0:	c601a823          	sw	zero,-912(gp) # 2000006c <WS2812BLEDInUse>
				}
				place++;
    1ea4:	0705                	addi	a4,a4,1
    1ea6:	a015                	j	1eca <WS2812FillBuffSec.constprop.0+0x78>
		(*ptr++) = 0;
    1ea8:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
    1eac:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    1eb0:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    1eb4:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    1eb8:	00079423          	sh	zero,8(a5)
		place++;
    1ebc:	0705                	addi	a4,a4,1
    1ebe:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
    1ec0:	fe079f23          	sh	zero,-2(a5)
    1ec4:	b77d                	j	1e72 <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
    1ec6:	fef691e3          	bne	a3,a5,1ea8 <WS2812FillBuffSec.constprop.0+0x56>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
    1eca:	4782                	lw	a5,0(sp)
}
    1ecc:	40e2                	lw	ra,24(sp)
    1ece:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
    1ed0:	c398                	sw	a4,0(a5)
}
    1ed2:	44c2                	lw	s1,16(sp)
    1ed4:	0171                	addi	sp,sp,28
    1ed6:	8082                	ret
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    1ed8:	c2818613          	addi	a2,gp,-984 # 20000024 <tween>
    1edc:	4210                	lw	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1ede:	00170293          	addi	t0,a4,1
    1ee2:	9732                	add	a4,a4,a2
    1ee4:	0ff00613          	li	a2,255
    1ee8:	00e04363          	bgtz	a4,1eee <WS2812FillBuffSec.constprop.0+0x9c>
    1eec:	4601                	li	a2,0
    1eee:	007f45b7          	lui	a1,0x7f4
    1ef2:	650d                	lui	a0,0x3
    1ef4:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.bfb73fe7+0x7ea595>
    1ef8:	0ff50513          	addi	a0,a0,255 # 30ff <ch32fun.c.61965c5e+0x30b>
    1efc:	c616                	sw	t0,12(sp)
    1efe:	c43e                	sw	a5,8(sp)
    1f00:	c236                	sw	a3,4(sp)
    1f02:	3d95                	jal	1d76 <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1f04:	00b55613          	srli	a2,a0,0xb
    1f08:	6709                	lui	a4,0x2
    1f0a:	2e470713          	addi	a4,a4,740 # 22e4 <bitquartets.8>
    1f0e:	8a79                	andi	a2,a2,30
    1f10:	963a                	add	a2,a2,a4
    1f12:	47a2                	lw	a5,8(sp)
    1f14:	00065603          	lhu	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1f18:	42b2                	lw	t0,12(sp)
    1f1a:	4692                	lw	a3,4(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1f1c:	00c79023          	sh	a2,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1f20:	00755613          	srli	a2,a0,0x7
    1f24:	8a79                	andi	a2,a2,30
    1f26:	963a                	add	a2,a2,a4
    1f28:	00065603          	lhu	a2,0(a2)
		ptr += 6;
    1f2c:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1f2e:	fec79b23          	sh	a2,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    1f32:	00355613          	srli	a2,a0,0x3
    1f36:	8a79                	andi	a2,a2,30
    1f38:	963a                	add	a2,a2,a4
    1f3a:	00065603          	lhu	a2,0(a2)
    1f3e:	fec79c23          	sh	a2,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    1f42:	00f57613          	andi	a2,a0,15
    1f46:	0606                	slli	a2,a2,0x1
    1f48:	963a                	add	a2,a2,a4
    1f4a:	00065603          	lhu	a2,0(a2)
    1f4e:	fec79d23          	sh	a2,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f52:	01355613          	srli	a2,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1f56:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f58:	8a79                	andi	a2,a2,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1f5a:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f5c:	963a                	add	a2,a2,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1f5e:	953a                	add	a0,a0,a4
    1f60:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f64:	00065603          	lhu	a2,0(a2)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1f68:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f6c:	fec79e23          	sh	a2,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1f70:	8716                	mv	a4,t0
    1f72:	b711                	j	1e76 <WS2812FillBuffSec.constprop.0+0x24>

00001f74 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    1f74:	fcc10113          	addi	sp,sp,-52
    1f78:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    1f7a:	400207b7          	lui	a5,0x40020
    1f7e:	439c                	lw	a5,0(a5)
{
    1f80:	d022                	sw	s0,32(sp)
    1f82:	ce26                	sw	s1,28(sp)
    1f84:	d806                	sw	ra,48(sp)
    1f86:	d616                	sw	t0,44(sp)
    1f88:	d41a                	sw	t1,40(sp)
    1f8a:	d21e                	sw	t2,36(sp)
    1f8c:	cc2a                	sw	a0,24(sp)
    1f8e:	ca2e                	sw	a1,20(sp)
    1f90:	c832                	sw	a2,16(sp)
    1f92:	c636                	sw	a3,12(sp)
    1f94:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    1f96:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    1f98:	40020437          	lui	s0,0x40020
    1f9c:	10000493          	li	s1,256
    1fa0:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    1fa2:	4782                	lw	a5,0(sp)
    1fa4:	4007f793          	andi	a5,a5,1024
    1fa8:	c789                	beqz	a5,1fb2 <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    1faa:	4585                	li	a1,1
    1fac:	c8818513          	addi	a0,gp,-888 # 20000084 <WS2812dmabuff>
    1fb0:	354d                	jal	1e52 <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    1fb2:	4782                	lw	a5,0(sp)
    1fb4:	2007f793          	andi	a5,a5,512
    1fb8:	c789                	beqz	a5,1fc2 <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    1fba:	4581                	li	a1,0
    1fbc:	cb818513          	addi	a0,gp,-840 # 200000b4 <WS2812dmabuff+0x30>
    1fc0:	3d49                	jal	1e52 <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    1fc2:	401c                	lw	a5,0(s0)
    1fc4:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    1fc6:	4782                	lw	a5,0(sp)
    1fc8:	1007f793          	andi	a5,a5,256
    1fcc:	fbf1                	bnez	a5,1fa0 <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    1fce:	5402                	lw	s0,32(sp)
    1fd0:	50c2                	lw	ra,48(sp)
    1fd2:	52b2                	lw	t0,44(sp)
    1fd4:	5322                	lw	t1,40(sp)
    1fd6:	5392                	lw	t2,36(sp)
    1fd8:	44f2                	lw	s1,28(sp)
    1fda:	4562                	lw	a0,24(sp)
    1fdc:	45d2                	lw	a1,20(sp)
    1fde:	4642                	lw	a2,16(sp)
    1fe0:	46b2                	lw	a3,12(sp)
    1fe2:	4722                	lw	a4,8(sp)
    1fe4:	4792                	lw	a5,4(sp)
    1fe6:	03410113          	addi	sp,sp,52
    1fea:	30200073          	mret
    1fee:	0000                	unimp
    1ff0:	000c                	0xc
    1ff2:	0810                	addi	a2,sp,16
    1ff4:	0818                	addi	a4,sp,16
    1ff6:	0e12                	slli	t3,t3,0x4
    1ff8:	1616                	slli	a2,a2,0x25
    1ffa:	100c                	addi	a1,sp,32
    1ffc:	1602                	slli	a2,a2,0x20
    1ffe:	0e06                	slli	t3,t3,0x1
    2000:	0800                	addi	s0,sp,16
    2002:	0808                	addi	a0,sp,16
    2004:	31647373          	csrrci	t1,0x316,8
    2008:	5f363033          	0x5f363033
    200c:	3269                	jal	1996 <main+0x70c>
    200e:	72655f63          	bge	a0,t1,274c <_data_lma+0x408>
    2012:	6f72                	flw	ft10,28(sp)
    2014:	2072                	fld	ft0,280(sp)
    2016:	202d                	jal	2040 <DMA1_Channel3_IRQHandler+0xcc>
    2018:	6974                	flw	fa3,84(a0)
    201a:	656d                	lui	a0,0x1b
    201c:	2074756f          	jal	a0,49a22 <lib_i2c.c.bfb73fe7+0x3ff77>
    2020:	74696177          	0x74696177
    2024:	6e69                	lui	t3,0x1a
    2026:	6f662067          	0x6f662067
    202a:	2072                	fld	ft0,280(sp)
    202c:	7325                	lui	t1,0xfffe9
    202e:	0d0a                	slli	s10,s10,0x2
    2030:	0000                	unimp
    2032:	0000                	unimp
    2034:	000a                	c.slli	zero,0x2
    2036:	0000                	unimp
    2038:	3249                	jal	19ba <main+0x730>
    203a:	30203a43          	fmadd.s	fs4,ft0,ft2,ft6,rup
    203e:	2578                	fld	fa4,200(a0)
    2040:	3230                	fld	fa2,96(a2)
    2042:	0058                	addi	a4,sp,4
    2044:	6146                	flw	ft2,80(sp)
    2046:	6c69                	lui	s8,0x1a
    2048:	6465                	lui	s0,0x19
    204a:	7420                	flw	fs0,104(s0)
    204c:	6e69206f          	j	94732 <lib_i2c.c.bfb73fe7+0x8ac87>
    2050:	7469                	lui	s0,0xffffa
    2052:	4920                	lw	s0,80(a0)
    2054:	4332                	lw	t1,12(sp)
    2056:	0000                	unimp
    2058:	2d2d                	jal	2692 <_data_lma+0x34e>
    205a:	2d2d                	jal	2694 <_data_lma+0x350>
    205c:	6e616353          	0x6e616353
    2060:	696e                	flw	fs2,216(sp)
    2062:	676e                	flw	fa4,216(sp)
    2064:	4920                	lw	s0,80(a0)
    2066:	4332                	lw	t1,12(sp)
    2068:	4220                	lw	s0,64(a2)
    206a:	7375                	lui	t1,0xffffd
    206c:	6620                	flw	fs0,72(a2)
    206e:	4420726f          	jal	tp,94b0 <ch32_mess.c.af9dd7e9+0x5534>
    2072:	7665                	lui	a2,0xffff9
    2074:	6369                	lui	t1,0x1a
    2076:	7365                	lui	t1,0xffff9
    2078:	2d2d                	jal	26b2 <_data_lma+0x36e>
    207a:	002d                	c.nop	11
    207c:	2d2d                	jal	26b6 <_data_lma+0x372>
    207e:	2d2d                	jal	26b8 <_data_lma+0x374>
    2080:	6f44                	flw	fs1,28(a4)
    2082:	656e                	flw	fa0,216(sp)
    2084:	5320                	lw	s0,96(a4)
    2086:	6e6e6163          	bltu	t3,t1,2768 <_data_lma+0x424>
    208a:	6e69                	lui	t3,0x1a
    208c:	2d2d2d67          	0x2d2d2d67
    2090:	0a2d                	addi	s4,s4,11
    2092:	0000                	unimp
    2094:	6548                	flw	fa0,12(a0)
    2096:	6c6c                	flw	fa1,92(s0)
    2098:	6542206f          	j	246ec <lib_i2c.c.bfb73fe7+0x1ac41>
    209c:	2165                	jal	2544 <_data_lma+0x200>
    209e:	0000                	unimp
    20a0:	6e756f63          	bltu	a0,t2,279e <_data_lma+0x45a>
    20a4:	6574                	flw	fa3,76(a0)
    20a6:	2072                	fld	ft0,280(sp)
    20a8:	6c25                	lui	s8,0x9
    20aa:	0075                	c.nop	29
    20ac:	3249                	jal	1a2e <main+0x7a4>
    20ae:	75722043          	0x75722043
    20b2:	746e                	flw	fs0,248(sp)
    20b4:	6d69                	lui	s10,0x1a
    20b6:	3a65                	jal	1a6e <main+0x7e4>
    20b8:	2520                	fld	fs0,72(a0)
    20ba:	756c                	flw	fa1,108(a0)
    20bc:	7520                	flw	fs0,104(a0)
    20be:	6f6e0073          	0x6f6e0073
    20c2:	2074                	fld	fa3,192(s0)
    20c4:	7562                	flw	fa0,56(sp)
    20c6:	00007973          	csrrci	s2,ustatus,0
    20ca:	0000                	unimp
    20cc:	616d                	addi	sp,sp,240
    20ce:	72657473          	csrrci	s0,0x726,10
    20d2:	6d20                	flw	fs0,88(a0)
    20d4:	0065646f          	jal	s0,580da <lib_i2c.c.bfb73fe7+0x4e62f>
    20d8:	7274                	flw	fa3,100(a2)
    20da:	6e61                	lui	t3,0x18
    20dc:	74696d73          	csrrsi	s10,0x746,18
    20e0:	6d20                	flw	fs0,88(a0)
    20e2:	0065646f          	jal	s0,580e8 <lib_i2c.c.bfb73fe7+0x4e63d>
    20e6:	0000                	unimp
    20e8:	7874                	flw	fa3,116(s0)
    20ea:	6520                	flw	fs0,72(a0)
    20ec:	706d                	c.lui	zero,0xffffb
    20ee:	7974                	flw	fa3,116(a0)
    20f0:	0000                	unimp
    20f2:	0000                	unimp
    20f4:	7274                	flw	fa3,100(a2)
    20f6:	6e61                	lui	t3,0x18
    20f8:	74696d73          	csrrsi	s10,0x746,18
    20fc:	6320                	flw	fs0,64(a4)
    20fe:	6c706d6f          	jal	s10,8fc4 <ch32_mess.c.af9dd7e9+0x5048>
    2102:	7465                	lui	s0,0xffff9
    2104:	0065                	c.nop	25
	...

00002108 <FONT_7x5>:
    2108:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    2118:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    2128:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    2138:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    2148:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    2158:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    2168:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    2178:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    2188:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    2198:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    21a8:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    21b8:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    21c8:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    21d8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    21e8:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    21f8:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    2208:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    2218:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    2228:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    2238:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    2248:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    2258:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    2268:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    2278:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    2288:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    2298:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    22a8:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    22b8:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    22c8:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    22d8:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

000022e4 <bitquartets.8>:
    22e4:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    22f4:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

00002304 <errstr>:
    2304:	20c0 0000 20cc 0000 20d8 0000 20e8 0000     . ... ... ... ..
    2314:	20f4 0000                                   . ..

00002318 <myvalues>:
    2318:	321e 283c 3214 0a1e 0a23 1e14 3228 143c     .2<(.2..#...(2<.

00002328 <ssd1306_init_array>:
    2328:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    2338:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......

Disassembly of section .data:

20000000 <dev_aht21>:
20000000:	1a80 0006 0000 0000 0038 0001 0000 0000     ........8.......

20000010 <hourglass.5>:
20000010:	2606 2612 3406 3412                         .&.&.4.4

20000018 <line.7>:
20000018:	0001 0000                                   ....

2000001c <quad_t.6>:
2000001c:	1806 1812 2216 2202                         ....."."

20000024 <tween>:
20000024:	ff42 ffff                                   B...

20000028 <FastMultiply>:
{
20000028:	87aa                	mv	a5,a0
	uint32_t ret = 0;
2000002a:	4501                	li	a0,0
		if( multiplicand & 1 )
2000002c:	0015f713          	andi	a4,a1,1
20000030:	c311                	beqz	a4,20000034 <FastMultiply+0xc>
			ret += mutliplicant;
20000032:	953e                	add	a0,a0,a5
		multiplicand>>=1;
20000034:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
20000036:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000038:	f9f5                	bnez	a1,2000002c <FastMultiply+0x4>
}
2000003a:	8082                	ret

2000003c <DMA1_Channel4_IRQHandler>:

// DMA transfer completion interrupt. It will fire when the DMA transfer is
// complete. We use it just to blink the LED
__attribute__((interrupt)) __attribute__((section(".srodata")))
void DMA1_Channel4_IRQHandler(void)
{
2000003c:	1151                	addi	sp,sp,-12
2000003e:	c23a                	sw	a4,4(sp)
	// Clear flag
	DMA1->INTFCR |= DMA_CTCIF4;
20000040:	40020737          	lui	a4,0x40020
{
20000044:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000046:	435c                	lw	a5,4(a4)
{
20000048:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000004a:	6689                	lui	a3,0x2
2000004c:	8fd5                	or	a5,a5,a3
2000004e:	c35c                	sw	a5,4(a4)

	// Blink LED
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000050:	400117b7          	lui	a5,0x40011
20000054:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000058:	47d8                	lw	a4,12(a5)
}
2000005a:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
2000005c:	04074713          	xori	a4,a4,64
20000060:	c7d8                	sw	a4,12(a5)
}
20000062:	4712                	lw	a4,4(sp)
20000064:	4782                	lw	a5,0(sp)
20000066:	0131                	addi	sp,sp,12
20000068:	30200073          	mret
