
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	4a90006f          	j	ca8 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0d76                	slli	s10,s10,0x1d
   a:	0000                	unimp
   c:	0d1e                	slli	s10,s10,0x7
	...
  2e:	0000                	unimp
  30:	1b12                	slli	s6,s6,0x24
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d1e                	slli	s10,s10,0x7
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0d1e                	slli	s10,s10,0x7
  42:	0000                	unimp
  44:	0d1e                	slli	s10,s10,0x7
  46:	0000                	unimp
  48:	0d1e                	slli	s10,s10,0x7
  4a:	0000                	unimp
  4c:	0d1e                	slli	s10,s10,0x7
  4e:	0000                	unimp
  50:	0d1e                	slli	s10,s10,0x7
  52:	0000                	unimp
  54:	0d1e                	slli	s10,s10,0x7
  56:	0000                	unimp
  58:	0d1e                	slli	s10,s10,0x7
  5a:	0000                	unimp
  5c:	0d1e                	slli	s10,s10,0x7
  5e:	0000                	unimp
  60:	1f5e                	slli	t5,t5,0x37
  62:	0000                	unimp
  64:	0044                	addi	s1,sp,4
  66:	2000                	fld	fs0,0(s0)
  68:	0d1e                	slli	s10,s10,0x7
  6a:	0000                	unimp
  6c:	0d1e                	slli	s10,s10,0x7
  6e:	0000                	unimp
  70:	0d1e                	slli	s10,s10,0x7
  72:	0000                	unimp
  74:	0d1e                	slli	s10,s10,0x7
  76:	0000                	unimp
  78:	1b44                	addi	s1,sp,436
  7a:	0000                	unimp
  7c:	1ce4                	addi	s1,sp,636
  7e:	0000                	unimp
  80:	0d1e                	slli	s10,s10,0x7
  82:	0000                	unimp
  84:	0d1e                	slli	s10,s10,0x7
  86:	0000                	unimp
  88:	0d1e                	slli	s10,s10,0x7
  8a:	0000                	unimp
  8c:	0d1e                	slli	s10,s10,0x7
  8e:	0000                	unimp
  90:	0d1e                	slli	s10,s10,0x7
  92:	0000                	unimp
  94:	0d1e                	slli	s10,s10,0x7
  96:	0000                	unimp
  98:	0d1e                	slli	s10,s10,0x7
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
      a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
      a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
      a8:	862e                	mv	a2,a1
      aa:	85aa                	mv	a1,a0
      ac:	557d                	li	a0,-1
      ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
      b0:	4685                	li	a3,1
      b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
      b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
      ba:	0606                	slli	a2,a2,0x1
      bc:	0686                	slli	a3,a3,0x1
      be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
      c2:	4501                	li	a0,0
      c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
      c8:	8d91                	sub	a1,a1,a2
      ca:	8d55                	or	a0,a0,a3
      cc:	8285                	srli	a3,a3,0x1
      ce:	8205                	srli	a2,a2,0x1
      d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
      d2:	8082                	ret

000000d4 <__umodsi3>:
      d4:	8286                	mv	t0,ra
      d6:	3fc9                	jal	a8 <__hidden___udivsi3>
      d8:	852e                	mv	a0,a1
      da:	8282                	jr	t0
      dc:	40a00533          	neg	a0,a0
      e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
      e4:	40b005b3          	neg	a1,a1
      e8:	b7c1                	j	a8 <__hidden___udivsi3>
      ea:	40b005b3          	neg	a1,a1
      ee:	8286                	mv	t0,ra
      f0:	3f65                	jal	a8 <__hidden___udivsi3>
      f2:	40a00533          	neg	a0,a0
      f6:	8282                	jr	t0

000000f8 <__modsi3>:
      f8:	8286                	mv	t0,ra
      fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
      fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
     102:	375d                	jal	a8 <__hidden___udivsi3>
     104:	852e                	mv	a0,a1
     106:	8282                	jr	t0
     108:	40b005b3          	neg	a1,a1
     10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
     110:	40a00533          	neg	a0,a0
     114:	3f51                	jal	a8 <__hidden___udivsi3>
     116:	40b00533          	neg	a0,a1
     11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
{
     11e:	1131                	addi	sp,sp,-20
     120:	c426                	sw	s1,8(sp)
     122:	c806                	sw	ra,16(sp)
     124:	c622                	sw	s0,12(sp)
     126:	84ae                	mv	s1,a1
     128:	87aa                	mv	a5,a0
     12a:	85b2                	mv	a1,a2
	int overflow = 0;
     12c:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     12e:	cab5                	beqz	a3,1a2 <mini_pad+0x84>
	if(len > pad_to) {
     130:	0096d463          	bge	a3,s1,138 <mini_pad+0x1a>
     134:	84b6                	mv	s1,a3
		overflow = 1;
     136:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     138:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     13c:	00045363          	bgez	s0,142 <mini_pad+0x24>
     140:	4401                	li	s0,0
     142:	8622                	mv	a2,s0
     144:	853a                	mv	a0,a4
     146:	c23e                	sw	a5,4(sp)
     148:	c01a                	sw	t1,0(sp)
     14a:	67b000ef          	jal	ra,fc4 <memset>
     14e:	4302                	lw	t1,0(sp)
     150:	4792                	lw	a5,4(sp)
     152:	872a                	mv	a4,a0
     154:	008506b3          	add	a3,a0,s0
     158:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     15a:	40c485b3          	sub	a1,s1,a2
     15e:	04b04463          	bgtz	a1,1a6 <mini_pad+0x88>
     162:	0004d363          	bgez	s1,168 <mini_pad+0x4a>
     166:	4481                	li	s1,0
     168:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     16c:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     170:	02030463          	beqz	t1,198 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     174:	02c77263          	bgeu	a4,a2,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     178:	02a00793          	li	a5,42
     17c:	fef60fa3          	sb	a5,-1(a2)
     180:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     184:	00d77a63          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     188:	fef60f23          	sb	a5,-2(a2)
     18c:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     190:	00d77463          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     194:	fef60ea3          	sb	a5,-3(a2)
}
     198:	40c2                	lw	ra,16(sp)
     19a:	4432                	lw	s0,12(sp)
     19c:	44a2                	lw	s1,8(sp)
     19e:	0151                	addi	sp,sp,20
     1a0:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1a2:	86a6                	mv	a3,s1
     1a4:	bf51                	j	138 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1a6:	00c785b3          	add	a1,a5,a2
     1aa:	0005c503          	lbu	a0,0(a1)
     1ae:	00c685b3          	add	a1,a3,a2
     1b2:	0605                	addi	a2,a2,1
     1b4:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1b8:	b74d                	j	15a <mini_pad+0x3c>

000001ba <_puts>:
{
     1ba:	832a                	mv	t1,a0
     1bc:	852e                	mv	a0,a1
	if(!buf) return len;
     1be:	ce01                	beqz	a2,1d6 <_puts+0x1c>
	char * p0 = b->buffer;
     1c0:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1c4:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1c6:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1c8:	00a74863          	blt	a4,a0,1d8 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1cc:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1d0:	4248                	lw	a0,4(a2)
     1d2:	40550533          	sub	a0,a0,t0
}
     1d6:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1d8:	4614                	lw	a3,8(a2)
     1da:	fff68593          	addi	a1,a3,-1
     1de:	4214                	lw	a3,0(a2)
     1e0:	96ae                	add	a3,a3,a1
     1e2:	fed785e3          	beq	a5,a3,1cc <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1e6:	00178693          	addi	a3,a5,1
     1ea:	c254                	sw	a3,4(a2)
     1ec:	00e306b3          	add	a3,t1,a4
     1f0:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     1f4:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     1f6:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     1fa:	b7f1                	j	1c6 <_puts+0xc>

000001fc <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     1fc:	e0000737          	lui	a4,0xe0000
     200:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     204:	0f470693          	addi	a3,a4,244
     208:	0807f793          	andi	a5,a5,128
     20c:	fbf5                	bnez	a5,200 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     20e:	783027b7          	lui	a5,0x78302
     212:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     216:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     218:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     21a:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     21e:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     220:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     222:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     226:	0807f793          	andi	a5,a5,128
     22a:	ffe5                	bnez	a5,222 <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     22c:	00e557b3          	srl	a5,a0,a4
     230:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     234:	03000793          	li	a5,48
     238:	00d35463          	bge	t1,a3,240 <PrintHex+0x44>
     23c:	05700793          	li	a5,87
     240:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     242:	07a2                	slli	a5,a5,0x8
     244:	0857e793          	ori	a5,a5,133
     248:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     24c:	1771                	addi	a4,a4,-4
     24e:	fcb71ae3          	bne	a4,a1,222 <PrintHex+0x26>
}
     252:	8082                	ret

00000254 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     254:	1101                	addi	sp,sp,-32
     256:	ce06                	sw	ra,28(sp)
     258:	cc22                	sw	s0,24(sp)
     25a:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     25c:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     25e:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     260:	00055763          	bgez	a0,26e <mini_itoa.part.0+0x1a>
     264:	e689                	bnez	a3,26e <mini_itoa.part.0+0x1a>
		negative = 1;
     266:	4785                	li	a5,1
		value = -value;
     268:	40a00333          	neg	t1,a0
		negative = 1;
     26c:	c03e                	sw	a5,0(sp)
     26e:	06100413          	li	s0,97
     272:	c219                	beqz	a2,278 <mini_itoa.part.0+0x24>
     274:	04100413          	li	s0,65
	int	negative = 0;
     278:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     27a:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     27c:	851a                	mv	a0,t1
     27e:	c83a                	sw	a4,16(sp)
     280:	c21a                	sw	t1,4(sp)
     282:	c62e                	sw	a1,12(sp)
     284:	c41a                	sw	t1,8(sp)
     286:	35b9                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     288:	47a5                	li	a5,9
     28a:	4322                	lw	t1,8(sp)
     28c:	45b2                	lw	a1,12(sp)
     28e:	4742                	lw	a4,16(sp)
     290:	0ff57693          	andi	a3,a0,255
     294:	06a7e163          	bltu	a5,a0,2f6 <mini_itoa.part.0+0xa2>
     298:	03068693          	addi	a3,a3,48
     29c:	0ff6f693          	andi	a3,a3,255
     2a0:	00148793          	addi	a5,s1,1
     2a4:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2a8:	851a                	mv	a0,t1
     2aa:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2ac:	c63e                	sw	a5,12(sp)
		value /= radix;
     2ae:	c42e                	sw	a1,8(sp)
     2b0:	3be5                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
     2b2:	4692                	lw	a3,4(sp)
     2b4:	45a2                	lw	a1,8(sp)
     2b6:	47b2                	lw	a5,12(sp)
     2b8:	4742                	lw	a4,16(sp)
		value /= radix;
     2ba:	832a                	mv	t1,a0
	} while (value > 0);
     2bc:	02b6fb63          	bgeu	a3,a1,2f2 <mini_itoa.part.0+0x9e>
	if (negative)
     2c0:	4682                	lw	a3,0(sp)
     2c2:	c699                	beqz	a3,2d0 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2c4:	02d00693          	li	a3,45
     2c8:	00d78023          	sb	a3,0(a5)
     2cc:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2d0:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2d4:	01f55693          	srli	a3,a0,0x1f
     2d8:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2da:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2de:	8685                	srai	a3,a3,0x1
     2e0:	4601                	li	a2,0
     2e2:	17fd                	addi	a5,a5,-1
     2e4:	00d64b63          	blt	a2,a3,2fa <mini_itoa.part.0+0xa6>
}
     2e8:	40f2                	lw	ra,28(sp)
     2ea:	4462                	lw	s0,24(sp)
     2ec:	44d2                	lw	s1,20(sp)
     2ee:	6105                	addi	sp,sp,32
     2f0:	8082                	ret
	} while (value > 0);
     2f2:	84be                	mv	s1,a5
     2f4:	b761                	j	27c <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2f6:	96a2                	add	a3,a3,s0
     2f8:	b755                	j	29c <mini_itoa.part.0+0x48>
		char j = buffer[i];
     2fa:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     2fe:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     302:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     306:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     308:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     30c:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     310:	bfc9                	j	2e2 <mini_itoa.part.0+0x8e>

00000312 <prefill_pixel>:
	ssd1306_renderArea(0, 7, 0, SSD1306_W);
}

//! compute pixel
void prefill_pixel(uint8_t x, uint8_t y) {
    if (x >= SSD1306_W || y >= SSD1306_H) return; // Skip if out of bounds
     312:	01851793          	slli	a5,a0,0x18
     316:	87e1                	srai	a5,a5,0x18
     318:	0207ca63          	bltz	a5,34c <prefill_pixel+0x3a>
     31c:	03f00793          	li	a5,63
     320:	02b7e663          	bltu	a5,a1,34c <prefill_pixel+0x3a>
    M_Page_Mask mask = page_masks[y];
     324:	00159793          	slli	a5,a1,0x1
     328:	11c18593          	addi	a1,gp,284 # 20000518 <page_masks>
     32c:	95be                	add	a1,a1,a5
    frame_buffer[mask.page][x] |= mask.bitmask;
     32e:	0005c783          	lbu	a5,0(a1)
     332:	00779713          	slli	a4,a5,0x7
     336:	cf018793          	addi	a5,gp,-784 # 200000ec <frame_buffer>
     33a:	97ba                	add	a5,a5,a4
     33c:	953e                	add	a0,a0,a5
     33e:	00054703          	lbu	a4,0(a0)
     342:	0015c783          	lbu	a5,1(a1)
     346:	8fd9                	or	a5,a5,a4
     348:	00f50023          	sb	a5,0(a0)
}
     34c:	8082                	ret

0000034e <prefill_fastHorLine>:
//! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


//! compute_fastHorLine
void prefill_fastHorLine(uint8_t y, uint8_t x0, uint8_t x1) {
    if (y >= SSD1306_H) return;
     34e:	03f00793          	li	a5,63
     352:	04a7e163          	bltu	a5,a0,394 <prefill_fastHorLine+0x46>
    
	// Clamp x-coordinates
	if (x0 >= SSD1306_W) x0 = SSD1306_W_LIMIT;
     356:	01859793          	slli	a5,a1,0x18
     35a:	87e1                	srai	a5,a5,0x18
     35c:	0007d463          	bgez	a5,364 <prefill_fastHorLine+0x16>
     360:	07f00593          	li	a1,127
	if (x1 >= SSD1306_W) x1 = SSD1306_W_LIMIT;
     364:	01861793          	slli	a5,a2,0x18
     368:	87e1                	srai	a5,a5,0x18
     36a:	0007d463          	bgez	a5,372 <prefill_fastHorLine+0x24>
     36e:	07f00613          	li	a2,127

    M_Page_Mask mask = page_masks[y];
     372:	00151793          	slli	a5,a0,0x1
     376:	11c18513          	addi	a0,gp,284 # 20000518 <page_masks>
     37a:	953e                	add	a0,a0,a5
     37c:	00054783          	lbu	a5,0(a0)
     380:	00154683          	lbu	a3,1(a0)
    for (uint8_t x = x0; x <= x1; x++) {
     384:	079e                	slli	a5,a5,0x7
     386:	00b78733          	add	a4,a5,a1
     38a:	cf018793          	addi	a5,gp,-784 # 200000ec <frame_buffer>
     38e:	97ba                	add	a5,a5,a4
     390:	00b67363          	bgeu	a2,a1,396 <prefill_fastHorLine+0x48>
        frame_buffer[mask.page][x] |= mask.bitmask;
    }
}
     394:	8082                	ret
        frame_buffer[mask.page][x] |= mask.bitmask;
     396:	0007c703          	lbu	a4,0(a5)
    for (uint8_t x = x0; x <= x1; x++) {
     39a:	0585                	addi	a1,a1,1
     39c:	0ff5f593          	andi	a1,a1,255
        frame_buffer[mask.page][x] |= mask.bitmask;
     3a0:	8f55                	or	a4,a4,a3
     3a2:	00e78023          	sb	a4,0(a5)
    for (uint8_t x = x0; x <= x1; x++) {
     3a6:	0785                	addi	a5,a5,1
     3a8:	b7e5                	j	390 <prefill_fastHorLine+0x42>

000003aa <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     3aa:	400057b7          	lui	a5,0x40005
     3ae:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     3b2:	40078793          	addi	a5,a5,1024
     3b6:	10077713          	andi	a4,a4,256
     3ba:	cf09                	beqz	a4,3d4 <i2c_error+0x2a>
     3bc:	0147d703          	lhu	a4,20(a5)
     3c0:	4505                	li	a0,1
     3c2:	0742                	slli	a4,a4,0x10
     3c4:	8341                	srli	a4,a4,0x10
     3c6:	eff77713          	andi	a4,a4,-257
     3ca:	0742                	slli	a4,a4,0x10
     3cc:	8341                	srli	a4,a4,0x10
     3ce:	00e79a23          	sh	a4,20(a5)
     3d2:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     3d4:	0147d703          	lhu	a4,20(a5)
     3d8:	40077713          	andi	a4,a4,1024
     3dc:	cf09                	beqz	a4,3f6 <i2c_error+0x4c>
     3de:	0147d703          	lhu	a4,20(a5)
     3e2:	4509                	li	a0,2
     3e4:	0742                	slli	a4,a4,0x10
     3e6:	8341                	srli	a4,a4,0x10
     3e8:	bff77713          	andi	a4,a4,-1025
     3ec:	0742                	slli	a4,a4,0x10
     3ee:	8341                	srli	a4,a4,0x10
     3f0:	00e79a23          	sh	a4,20(a5)
     3f4:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     3f6:	0147d703          	lhu	a4,20(a5)
     3fa:	20077713          	andi	a4,a4,512
     3fe:	cf09                	beqz	a4,418 <i2c_error+0x6e>
     400:	0147d703          	lhu	a4,20(a5)
     404:	450d                	li	a0,3
     406:	0742                	slli	a4,a4,0x10
     408:	8341                	srli	a4,a4,0x10
     40a:	dff77713          	andi	a4,a4,-513
     40e:	0742                	slli	a4,a4,0x10
     410:	8341                	srli	a4,a4,0x10
     412:	00e79a23          	sh	a4,20(a5)
     416:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     418:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     41c:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     41e:	832d                	srli	a4,a4,0xb
     420:	8b05                	andi	a4,a4,1
     422:	cf01                	beqz	a4,43a <i2c_error+0x90>
     424:	0147d703          	lhu	a4,20(a5)
     428:	76fd                	lui	a3,0xfffff
     42a:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     42e:	0742                	slli	a4,a4,0x10
     430:	8341                	srli	a4,a4,0x10
     432:	8f75                	and	a4,a4,a3
     434:	00e79a23          	sh	a4,20(a5)
     438:	4511                	li	a0,4
}
     43a:	8082                	ret

0000043c <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     43c:	415c                	lw	a5,4(a0)
     43e:	e7b1                	bnez	a5,48a <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     440:	00855783          	lhu	a5,8(a0)
     444:	40005737          	lui	a4,0x40005
     448:	0786                	slli	a5,a5,0x1
     44a:	0fe7f793          	andi	a5,a5,254
     44e:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     452:	6789                	lui	a5,0x2
     454:	71078793          	addi	a5,a5,1808 # 2710 <_data_lma+0x470>
	return (status & status_mask) == status_mask; 
     458:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     45c:	c8f1a223          	sw	a5,-892(gp) # 20000080 <_i2c_timeout>
     460:	4501                	li	a0,0
     462:	c8418693          	addi	a3,gp,-892 # 20000080 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     466:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     46a:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.bfb73fe7+0x665db>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     46e:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     472:	01071593          	slli	a1,a4,0x10
     476:	41835703          	lhu	a4,1048(t1)
     47a:	81c1                	srli	a1,a1,0x10
     47c:	0742                	slli	a4,a4,0x10
     47e:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     480:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     482:	00c71663          	bne	a4,a2,48e <i2c_send_addr_write+0x52>
     486:	c111                	beqz	a0,48a <i2c_send_addr_write+0x4e>
     488:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     48a:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     48c:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     48e:	17fd                	addi	a5,a5,-1
     490:	4505                	li	a0,1
     492:	fff1                	bnez	a5,46e <i2c_send_addr_write+0x32>
{
     494:	1151                	addi	sp,sp,-12
     496:	c406                	sw	ra,8(sp)
     498:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     49c:	3739                	jal	3aa <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     49e:	e111                	bnez	a0,4a2 <i2c_send_addr_write+0x66>
     4a0:	4515                	li	a0,5
}
     4a2:	40a2                	lw	ra,8(sp)
     4a4:	0131                	addi	sp,sp,12
     4a6:	8082                	ret

000004a8 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     4a8:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4aa:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     4ac:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4ae:	71078793          	addi	a5,a5,1808 # 2710 <_data_lma+0x470>
     4b2:	c8f1a223          	sw	a5,-892(gp) # 20000080 <_i2c_timeout>
{
     4b6:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     4b8:	c002                	sw	zero,0(sp)
     4ba:	c202                	sw	zero,4(sp)
     4bc:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4c0:	4601                	li	a2,0
     4c2:	c8418713          	addi	a4,gp,-892 # 20000080 <_i2c_timeout>
     4c6:	400055b7          	lui	a1,0x40005
     4ca:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     4ce:	8a89                	andi	a3,a3,2
     4d0:	e689                	bnez	a3,4da <i2c_ping+0x32>
     4d2:	c211                	beqz	a2,4d6 <i2c_ping+0x2e>
     4d4:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
     4d6:	4501                	li	a0,0
     4d8:	a809                	j	4ea <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4da:	17fd                	addi	a5,a5,-1
     4dc:	4605                	li	a2,1
     4de:	f7f5                	bnez	a5,4ca <i2c_ping+0x22>
     4e0:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
     4e4:	35d9                	jal	3aa <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     4e6:	e111                	bnez	a0,4ea <i2c_ping+0x42>
     4e8:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4ea:	40005737          	lui	a4,0x40005
     4ee:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     4f2:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4f6:	07c2                	slli	a5,a5,0x10
     4f8:	83c1                	srli	a5,a5,0x10
     4fa:	1007e793          	ori	a5,a5,256
     4fe:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     502:	00030737          	lui	a4,0x30
     506:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     508:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     50c:	01079693          	slli	a3,a5,0x10
     510:	4185d783          	lhu	a5,1048(a1)
     514:	82c1                	srli	a3,a3,0x10
     516:	07c2                	slli	a5,a5,0x10
     518:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     51a:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     51c:	fee796e3          	bne	a5,a4,508 <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     520:	e119                	bnez	a0,526 <i2c_ping+0x7e>
     522:	850a                	mv	a0,sp
     524:	3f21                	jal	43c <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     526:	40005737          	lui	a4,0x40005
     52a:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     52e:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     530:	07c2                	slli	a5,a5,0x10
     532:	83c1                	srli	a5,a5,0x10
     534:	2007e793          	ori	a5,a5,512
     538:	40f71023          	sh	a5,1024(a4)
}
     53c:	0161                	addi	sp,sp,24
     53e:	8082                	ret

00000540 <prefill_line.constprop.0>:
		}
	}
}

//! compute line (Bresenham's algorithm)
void prefill_line(M_Point p0, M_Point p1, uint8_t thickness) {
     540:	fdc10113          	addi	sp,sp,-36
     544:	00855693          	srli	a3,a0,0x8
     548:	0ff57313          	andi	t1,a0,255
    // Clamp coordinates to display bounds
    p0.x = (p0.x < SSD1306_W) ? p0.x : SSD1306_W_LIMIT;
     54c:	0562                	slli	a0,a0,0x18
void prefill_line(M_Point p0, M_Point p1, uint8_t thickness) {
     54e:	0085d713          	srli	a4,a1,0x8
     552:	d022                	sw	s0,32(sp)
     554:	ce26                	sw	s1,28(sp)
    p0.x = (p0.x < SSD1306_W) ? p0.x : SSD1306_W_LIMIT;
     556:	8561                	srai	a0,a0,0x18
     558:	0ff6f693          	andi	a3,a3,255
     55c:	0ff5f293          	andi	t0,a1,255
     560:	0ff77713          	andi	a4,a4,255
     564:	00055463          	bgez	a0,56c <prefill_line.constprop.0+0x2c>
     568:	07f00313          	li	t1,127
    p0.y = (p0.y < SSD1306_H) ? p0.y : SSD1306_H_LIMIT;
     56c:	03f00613          	li	a2,63
     570:	0ff6f793          	andi	a5,a3,255
     574:	00d67463          	bgeu	a2,a3,57c <prefill_line.constprop.0+0x3c>
     578:	03f00793          	li	a5,63
    p1.x = (p1.x < SSD1306_W) ? p1.x : SSD1306_W_LIMIT;
     57c:	01829693          	slli	a3,t0,0x18
     580:	86e1                	srai	a3,a3,0x18
     582:	0006d463          	bgez	a3,58a <prefill_line.constprop.0+0x4a>
     586:	07f00293          	li	t0,127
    p1.y = (p1.y < SSD1306_H) ? p1.y : SSD1306_H_LIMIT;
     58a:	03f00693          	li	a3,63
     58e:	0ff77593          	andi	a1,a4,255
     592:	00e6f463          	bgeu	a3,a4,59a <prefill_line.constprop.0+0x5a>
     596:	03f00593          	li	a1,63

    // Bresenham's line algorithm
    int16_t dx = abs(p1.x - p0.x);
     59a:	406286b3          	sub	a3,t0,t1
     59e:	41f6d713          	srai	a4,a3,0x1f
     5a2:	8eb9                	xor	a3,a3,a4
     5a4:	8e99                	sub	a3,a3,a4
     5a6:	01069713          	slli	a4,a3,0x10
     5aa:	8741                	srai	a4,a4,0x10
     5ac:	c23a                	sw	a4,4(sp)
    int16_t dy = -abs(p1.y - p0.y);
     5ae:	40f58733          	sub	a4,a1,a5
     5b2:	41f75513          	srai	a0,a4,0x1f
     5b6:	00e54633          	xor	a2,a0,a4
     5ba:	8e09                	sub	a2,a2,a0
     5bc:	0642                	slli	a2,a2,0x10
     5be:	8241                	srli	a2,a2,0x10
     5c0:	40c00733          	neg	a4,a2
     5c4:	0742                	slli	a4,a4,0x10
     5c6:	8741                	srai	a4,a4,0x10
     5c8:	c43a                	sw	a4,8(sp)
    int16_t sx = p0.x < p1.x ? 1 : -1;
     5ca:	4405                	li	s0,1
     5cc:	00536363          	bltu	t1,t0,5d2 <prefill_line.constprop.0+0x92>
     5d0:	547d                	li	s0,-1
    int16_t sy = p0.y < p1.y ? 1 : -1;
     5d2:	4485                	li	s1,1
     5d4:	00b7e363          	bltu	a5,a1,5da <prefill_line.constprop.0+0x9a>
     5d8:	54fd                	li	s1,-1
    int16_t err = dx + dy;
     5da:	01069713          	slli	a4,a3,0x10
     5de:	8341                	srli	a4,a4,0x10
	while (1) {
		// Draw the pixel(s)
		if (thickness == 1) {
			// Fast path for single-pixel
			if (p0.x < SSD1306_W && p0.y < SSD1306_H) {
                M_Page_Mask mask = page_masks[p0.y];
     5e0:	11c18513          	addi	a0,gp,284 # 20000518 <page_masks>
    int16_t err = dx + dy;
     5e4:	c03a                	sw	a4,0(sp)
                M_Page_Mask mask = page_masks[p0.y];
     5e6:	c62a                	sw	a0,12(sp)
    int16_t err = dx + dy;
     5e8:	8f11                	sub	a4,a4,a2
     5ea:	0742                	slli	a4,a4,0x10
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     5ec:	cf018513          	addi	a0,gp,-784 # 200000ec <frame_buffer>
    int16_t err = dx + dy;
     5f0:	8741                	srai	a4,a4,0x10
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     5f2:	c82a                	sw	a0,16(sp)
			if (p0.x < SSD1306_W && p0.y < SSD1306_H) {
     5f4:	01831513          	slli	a0,t1,0x18
     5f8:	8561                	srai	a0,a0,0x18
     5fa:	02055163          	bgez	a0,61c <prefill_line.constprop.0+0xdc>
			}
		}

		// Bresenham Advance
		if (p0.x == p1.x && p0.y == p1.y) break;
		e2 = err << 1; // e2 = 2*err via bit shift
     5fe:	00171513          	slli	a0,a4,0x1
		if (e2 >= dy) { err += dy; p0.x += sx; }
     602:	43a2                	lw	t2,8(sp)
		e2 = err << 1; // e2 = 2*err via bit shift
     604:	0542                	slli	a0,a0,0x10
     606:	8541                	srai	a0,a0,0x10
		if (e2 >= dy) { err += dy; p0.x += sx; }
     608:	04755963          	bge	a0,t2,65a <prefill_line.constprop.0+0x11a>
		if (e2 <= dx) { err += dx; p0.y += sy; }
     60c:	4682                	lw	a3,0(sp)
     60e:	97a6                	add	a5,a5,s1
     610:	0ff7f793          	andi	a5,a5,255
     614:	9736                	add	a4,a4,a3
     616:	0742                	slli	a4,a4,0x10
     618:	8741                	srai	a4,a4,0x10
     61a:	bfe9                	j	5f4 <prefill_line.constprop.0+0xb4>
			if (p0.x < SSD1306_W && p0.y < SSD1306_H) {
     61c:	03f00513          	li	a0,63
     620:	02f56463          	bltu	a0,a5,648 <prefill_line.constprop.0+0x108>
                M_Page_Mask mask = page_masks[p0.y];
     624:	4532                	lw	a0,12(sp)
     626:	00179393          	slli	t2,a5,0x1
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     62a:	46c2                	lw	a3,16(sp)
                M_Page_Mask mask = page_masks[p0.y];
     62c:	93aa                	add	t2,t2,a0
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     62e:	0003c503          	lbu	a0,0(t2)
     632:	0013c383          	lbu	t2,1(t2)
     636:	051e                	slli	a0,a0,0x7
     638:	9536                	add	a0,a0,a3
     63a:	951a                	add	a0,a0,t1
     63c:	00054683          	lbu	a3,0(a0)
     640:	00d3e3b3          	or	t2,t2,a3
     644:	00750023          	sb	t2,0(a0)
		if (p0.x == p1.x && p0.y == p1.y) break;
     648:	fa629be3          	bne	t0,t1,5fe <prefill_line.constprop.0+0xbe>
     64c:	faf599e3          	bne	a1,a5,5fe <prefill_line.constprop.0+0xbe>
	}
}
     650:	5402                	lw	s0,32(sp)
     652:	44f2                	lw	s1,28(sp)
     654:	02410113          	addi	sp,sp,36
     658:	8082                	ret
		if (e2 <= dx) { err += dx; p0.y += sy; }
     65a:	4692                	lw	a3,4(sp)
     65c:	8f11                	sub	a4,a4,a2
		if (e2 >= dy) { err += dy; p0.x += sx; }
     65e:	0742                	slli	a4,a4,0x10
     660:	9322                	add	t1,t1,s0
     662:	8741                	srai	a4,a4,0x10
     664:	0ff37313          	andi	t1,t1,255
		if (e2 <= dx) { err += dx; p0.y += sy; }
     668:	f8a6c6e3          	blt	a3,a0,5f4 <prefill_line.constprop.0+0xb4>
     66c:	b745                	j	60c <prefill_line.constprop.0+0xcc>

0000066e <prefill_poly.part.0.constprop.0>:
//! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//! ***** Polygon Methods *****
//! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//! compute poligon
void prefill_poly(M_Point *pts, uint8_t num_pts, uint8_t thickness) {
     66e:	1131                	addi	sp,sp,-20
     670:	c426                	sw	s1,8(sp)
        prefill_line(pts[i], pts[i+1], thickness);
     672:	64c1                	lui	s1,0x10
void prefill_poly(M_Point *pts, uint8_t num_pts, uint8_t thickness) {
     674:	c622                	sw	s0,12(sp)
     676:	c806                	sw	ra,16(sp)
     678:	87aa                	mv	a5,a0
     67a:	842e                	mv	s0,a1
    for (uint8_t i = 0; i < num_pts - 1; i++) {
     67c:	4701                	li	a4,0
        prefill_line(pts[i], pts[i+1], thickness);
     67e:	14fd                	addi	s1,s1,-1
     680:	00171693          	slli	a3,a4,0x1
     684:	96be                	add	a3,a3,a5
     686:	0036c583          	lbu	a1,3(a3)
     68a:	0026c603          	lbu	a2,2(a3)
     68e:	0016c503          	lbu	a0,1(a3)
     692:	05a2                	slli	a1,a1,0x8
     694:	8dd1                	or	a1,a1,a2
     696:	0006c603          	lbu	a2,0(a3)
     69a:	0522                	slli	a0,a0,0x8
     69c:	8de5                	and	a1,a1,s1
     69e:	8d51                	or	a0,a0,a2
     6a0:	8d65                	and	a0,a0,s1
     6a2:	c23a                	sw	a4,4(sp)
     6a4:	c03e                	sw	a5,0(sp)
     6a6:	3d69                	jal	540 <prefill_line.constprop.0>
    for (uint8_t i = 0; i < num_pts - 1; i++) {
     6a8:	4712                	lw	a4,4(sp)
     6aa:	fff40693          	addi	a3,s0,-1
     6ae:	4782                	lw	a5,0(sp)
     6b0:	0705                	addi	a4,a4,1
     6b2:	0ff77713          	andi	a4,a4,255
     6b6:	fcd745e3          	blt	a4,a3,680 <prefill_poly.part.0.constprop.0+0x12>
    if (num_pts < 3) return;  // Need at least 3 points for a polygon
    prefill_lines(pts, num_pts, thickness);
    prefill_line(pts[num_pts-1], pts[0], thickness);
     6ba:	0406                	slli	s0,s0,0x1
     6bc:	1479                	addi	s0,s0,-2
     6be:	943e                	add	s0,s0,a5
     6c0:	0017c583          	lbu	a1,1(a5)
     6c4:	00144503          	lbu	a0,1(s0)
     6c8:	0007c703          	lbu	a4,0(a5)
     6cc:	00044783          	lbu	a5,0(s0)
     6d0:	05a2                	slli	a1,a1,0x8
     6d2:	0522                	slli	a0,a0,0x8
}
     6d4:	4432                	lw	s0,12(sp)
    prefill_line(pts[num_pts-1], pts[0], thickness);
     6d6:	8dd9                	or	a1,a1,a4
     6d8:	8d5d                	or	a0,a0,a5
}
     6da:	40c2                	lw	ra,16(sp)
    prefill_line(pts[num_pts-1], pts[0], thickness);
     6dc:	8de5                	and	a1,a1,s1
     6de:	8d65                	and	a0,a0,s1
}
     6e0:	44a2                	lw	s1,8(sp)
     6e2:	0151                	addi	sp,sp,20
    prefill_line(pts[num_pts-1], pts[0], thickness);
     6e4:	bdb1                	j	540 <prefill_line.constprop.0>

000006e6 <prefill_verLine.constprop.0>:
void prefill_verLine(
     6e6:	1161                	addi	sp,sp,-8
    if (x >= SSD1306_W) return;
     6e8:	01851793          	slli	a5,a0,0x18
void prefill_verLine(
     6ec:	c222                	sw	s0,4(sp)
     6ee:	00b11023          	sh	a1,0(sp)
    if (x >= SSD1306_W) return;
     6f2:	87e1                	srai	a5,a5,0x18
     6f4:	0607c363          	bltz	a5,75a <prefill_verLine.constprop.0+0x74>
     6f8:	00014683          	lbu	a3,0(sp)
     6fc:	03f00593          	li	a1,63
     700:	00114703          	lbu	a4,1(sp)
     704:	0ff6f793          	andi	a5,a3,255
     708:	00d5f463          	bgeu	a1,a3,710 <prefill_verLine.constprop.0+0x2a>
     70c:	03f00793          	li	a5,63
     710:	03f00593          	li	a1,63
     714:	0ff77693          	andi	a3,a4,255
     718:	00e5f463          	bgeu	a1,a4,720 <prefill_verLine.constprop.0+0x3a>
     71c:	03f00693          	li	a3,63
	if (y_limit.l0 > y_limit.l1) {
     720:	00f6f563          	bgeu	a3,a5,72a <prefill_verLine.constprop.0+0x44>
     724:	873e                	mv	a4,a5
     726:	87b6                	mv	a5,a3
     728:	86ba                	mv	a3,a4
    uint8_t x_end = x + thickness - 1;
     72a:	167d                	addi	a2,a2,-1
     72c:	962a                	add	a2,a2,a0
     72e:	0ff67713          	andi	a4,a2,255
    if (x_end >= SSD1306_W) x_end = SSD1306_W_LIMIT;
     732:	0662                	slli	a2,a2,0x18
     734:	8661                	srai	a2,a2,0x18
     736:	02064563          	bltz	a2,760 <prefill_verLine.constprop.0+0x7a>
	if (x_end < x) return;  // Skip if thickness causes overflow
     73a:	02a76063          	bltu	a4,a0,75a <prefill_verLine.constprop.0+0x74>
	uint8_t x_len = x_end - x + 1;  // Precompute length
     73e:	40a705b3          	sub	a1,a4,a0
     742:	0585                	addi	a1,a1,1
     744:	00179613          	slli	a2,a5,0x1
     748:	11c18713          	addi	a4,gp,284 # 20000518 <page_masks>
     74c:	0ff5f593          	andi	a1,a1,255
     750:	963a                	add	a2,a2,a4
		uint8_t* row_start = &frame_buffer[mask.page][x];  	// Get row pointer
     752:	cf018313          	addi	t1,gp,-784 # 200000ec <frame_buffer>
	for (uint8_t y_pos = y_limit.l0; y_pos <= y_limit.l1; y_pos++) {
     756:	00f6f863          	bgeu	a3,a5,766 <prefill_verLine.constprop.0+0x80>
}
     75a:	4412                	lw	s0,4(sp)
     75c:	0121                	addi	sp,sp,8
     75e:	8082                	ret
    if (x_end >= SSD1306_W) x_end = SSD1306_W_LIMIT;
     760:	07f00713          	li	a4,127
     764:	bfe9                	j	73e <prefill_verLine.constprop.0+0x58>
		uint8_t* row_start = &frame_buffer[mask.page][x];  	// Get row pointer
     766:	00064703          	lbu	a4,0(a2)
		M_Page_Mask mask = page_masks[y_pos];
     76a:	00164283          	lbu	t0,1(a2)
		uint8_t* row_start = &frame_buffer[mask.page][x];  	// Get row pointer
     76e:	071e                	slli	a4,a4,0x7
     770:	972a                	add	a4,a4,a0
     772:	971a                	add	a4,a4,t1
     774:	00e58433          	add	s0,a1,a4
		for (uint8_t i = 0; i < x_len; i++) {
     778:	00871763          	bne	a4,s0,786 <prefill_verLine.constprop.0+0xa0>
	for (uint8_t y_pos = y_limit.l0; y_pos <= y_limit.l1; y_pos++) {
     77c:	0785                	addi	a5,a5,1
     77e:	0ff7f793          	andi	a5,a5,255
     782:	0609                	addi	a2,a2,2
     784:	bfc9                	j	756 <prefill_verLine.constprop.0+0x70>
			row_start[i] |= mask.bitmask;  					// Sequential access
     786:	00074383          	lbu	t2,0(a4)
     78a:	0705                	addi	a4,a4,1
     78c:	0072e3b3          	or	t2,t0,t2
     790:	fe770fa3          	sb	t2,-1(a4)
     794:	b7d5                	j	778 <prefill_verLine.constprop.0+0x92>

00000796 <prefill_horLine.constprop.0>:
void prefill_horLine(
     796:	1171                	addi	sp,sp,-4
     798:	00b11023          	sh	a1,0(sp)
    if (y >= SSD1306_H) return;
     79c:	03f00793          	li	a5,63
     7a0:	04a7e863          	bltu	a5,a0,7f0 <prefill_horLine.constprop.0+0x5a>
     7a4:	00014783          	lbu	a5,0(sp)
    if (x_limit.l0 >= SSD1306_W) x_limit.l0 = SSD1306_W_LIMIT;
     7a8:	01879713          	slli	a4,a5,0x18
     7ac:	8761                	srai	a4,a4,0x18
     7ae:	00075463          	bgez	a4,7b6 <prefill_horLine.constprop.0+0x20>
     7b2:	07f00793          	li	a5,127
     7b6:	00114683          	lbu	a3,1(sp)
    if (x_limit.l1 >= SSD1306_W) x_limit.l1 = SSD1306_W_LIMIT;
     7ba:	01869713          	slli	a4,a3,0x18
     7be:	8761                	srai	a4,a4,0x18
     7c0:	02074a63          	bltz	a4,7f4 <prefill_horLine.constprop.0+0x5e>
	if (x_limit.l0 > x_limit.l1) {
     7c4:	00f6f563          	bgeu	a3,a5,7ce <prefill_horLine.constprop.0+0x38>
     7c8:	873e                	mv	a4,a5
     7ca:	87b6                	mv	a5,a3
     7cc:	86ba                	mv	a3,a4
        M_Page_Mask mask = page_masks[y_pos];
     7ce:	00151713          	slli	a4,a0,0x1
     7d2:	11c18513          	addi	a0,gp,284 # 20000518 <page_masks>
     7d6:	953a                	add	a0,a0,a4
     7d8:	00054703          	lbu	a4,0(a0)
     7dc:	00154583          	lbu	a1,1(a0)
     7e0:	071e                	slli	a4,a4,0x7
     7e2:	00f70633          	add	a2,a4,a5
     7e6:	cf018713          	addi	a4,gp,-784 # 200000ec <frame_buffer>
     7ea:	9732                	add	a4,a4,a2
        for (uint8_t x_pos = x_limit.l0; x_pos <= x_limit.l1; x_pos++) {
     7ec:	00f6f763          	bgeu	a3,a5,7fa <prefill_horLine.constprop.0+0x64>
}
     7f0:	0111                	addi	sp,sp,4
     7f2:	8082                	ret
    if (x_limit.l1 >= SSD1306_W) x_limit.l1 = SSD1306_W_LIMIT;
     7f4:	07f00693          	li	a3,127
     7f8:	bfd9                	j	7ce <prefill_horLine.constprop.0+0x38>
            frame_buffer[mask.page][x_pos] |= mask.bitmask;
     7fa:	00074603          	lbu	a2,0(a4)
        for (uint8_t x_pos = x_limit.l0; x_pos <= x_limit.l1; x_pos++) {
     7fe:	0785                	addi	a5,a5,1
     800:	0ff7f793          	andi	a5,a5,255
            frame_buffer[mask.page][x_pos] |= mask.bitmask;
     804:	8e4d                	or	a2,a2,a1
     806:	00c70023          	sb	a2,0(a4)
     80a:	0705                	addi	a4,a4,1
     80c:	b7c5                	j	7ec <prefill_horLine.constprop.0+0x56>

0000080e <i2c_write_raw.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     80e:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     810:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     812:	71078793          	addi	a5,a5,1808 # 2710 <_data_lma+0x470>
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     816:	c626                	sw	s1,12(sp)
     818:	c22e                	sw	a1,4(sp)
     81a:	ca06                	sw	ra,20(sp)
     81c:	c822                	sw	s0,16(sp)
     81e:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     820:	c8f1a223          	sw	a5,-892(gp) # 20000080 <_i2c_timeout>
     824:	4601                	li	a2,0
     826:	c8418493          	addi	s1,gp,-892 # 20000080 <_i2c_timeout>
     82a:	400055b7          	lui	a1,0x40005
     82e:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     832:	8a89                	andi	a3,a3,2
     834:	e6bd                	bnez	a3,8a2 <i2c_write_raw.constprop.0+0x94>
     836:	c211                	beqz	a2,83a <i2c_write_raw.constprop.0+0x2c>
     838:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     83a:	400056b7          	lui	a3,0x40005
     83e:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     842:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     846:	07c2                	slli	a5,a5,0x10
     848:	83c1                	srli	a5,a5,0x10
     84a:	1007e793          	ori	a5,a5,256
     84e:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     852:	000306b7          	lui	a3,0x30
     856:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     858:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     85c:	01079613          	slli	a2,a5,0x10
     860:	4185d783          	lhu	a5,1048(a1)
     864:	8241                	srli	a2,a2,0x10
     866:	07c2                	slli	a5,a5,0x10
     868:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     86a:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     86c:	fed796e3          	bne	a5,a3,858 <i2c_write_raw.constprop.0+0x4a>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     870:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
     874:	36e1                	jal	43c <i2c_send_addr_write>
     876:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     878:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
     87a:	e91d                	bnez	a0,8b0 <i2c_write_raw.constprop.0+0xa2>
		while(cbyte < len)
     87c:	4792                	lw	a5,4(sp)
     87e:	02f67963          	bgeu	a2,a5,8b0 <i2c_write_raw.constprop.0+0xa2>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     882:	6689                	lui	a3,0x2
     884:	71068693          	addi	a3,a3,1808 # 2710 <_data_lma+0x470>
     888:	c094                	sw	a3,0(s1)
     88a:	4501                	li	a0,0
     88c:	40005337          	lui	t1,0x40005
     890:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     894:	0805f593          	andi	a1,a1,128
     898:	c5b9                	beqz	a1,8e6 <i2c_write_raw.constprop.0+0xd8>
     89a:	c111                	beqz	a0,89e <i2c_write_raw.constprop.0+0x90>
     89c:	c094                	sw	a3,0(s1)
     89e:	4501                	li	a0,0
     8a0:	a8a9                	j	8fa <i2c_write_raw.constprop.0+0xec>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     8a2:	17fd                	addi	a5,a5,-1
     8a4:	4605                	li	a2,1
     8a6:	f7c1                	bnez	a5,82e <i2c_write_raw.constprop.0+0x20>
	i2c_err_t i2c_err = i2c_error();
     8a8:	3609                	jal	3aa <i2c_error>
     8aa:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     8ac:	e111                	bnez	a0,8b0 <i2c_write_raw.constprop.0+0xa2>
     8ae:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     8b0:	6689                	lui	a3,0x2
     8b2:	71068693          	addi	a3,a3,1808 # 2710 <_data_lma+0x470>
	return (status & status_mask) == status_mask; 
     8b6:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     8ba:	c094                	sw	a3,0(s1)
     8bc:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     8be:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     8c2:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.bfb73fe7+0x665dd>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     8c6:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     8ca:	01061513          	slli	a0,a2,0x10
     8ce:	4182d603          	lhu	a2,1048(t0)
     8d2:	8141                	srli	a0,a0,0x10
     8d4:	0642                	slli	a2,a2,0x10
     8d6:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     8d8:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     8da:	04b61363          	bne	a2,a1,920 <i2c_write_raw.constprop.0+0x112>
     8de:	04030a63          	beqz	t1,932 <i2c_write_raw.constprop.0+0x124>
     8e2:	c094                	sw	a3,0(s1)
     8e4:	a0b9                	j	932 <i2c_write_raw.constprop.0+0x124>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     8e6:	16fd                	addi	a3,a3,-1
     8e8:	4505                	li	a0,1
     8ea:	f2dd                	bnez	a3,890 <i2c_write_raw.constprop.0+0x82>
     8ec:	c432                	sw	a2,8(sp)
     8ee:	0004a023          	sw	zero,0(s1) # 10000 <lib_i2c.c.bfb73fe7+0x6559>
	i2c_err_t i2c_err = i2c_error();
     8f2:	3c65                	jal	3aa <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     8f4:	4622                	lw	a2,8(sp)
     8f6:	e111                	bnez	a0,8fa <i2c_write_raw.constprop.0+0xec>
     8f8:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     8fa:	4782                	lw	a5,0(sp)
     8fc:	00c786b3          	add	a3,a5,a2
     900:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     904:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     906:	400056b7          	lui	a3,0x40005
     90a:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     90e:	0ff67613          	andi	a2,a2,255
     912:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     914:	e501                	bnez	a0,91c <i2c_write_raw.constprop.0+0x10e>
     916:	3c51                	jal	3aa <i2c_error>
     918:	4622                	lw	a2,8(sp)
     91a:	d12d                	beqz	a0,87c <i2c_write_raw.constprop.0+0x6e>
     91c:	842a                	mv	s0,a0
     91e:	bf49                	j	8b0 <i2c_write_raw.constprop.0+0xa2>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     920:	16fd                	addi	a3,a3,-1
     922:	4305                	li	t1,1
     924:	f2cd                	bnez	a3,8c6 <i2c_write_raw.constprop.0+0xb8>
     926:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     92a:	3441                	jal	3aa <i2c_error>
     92c:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     92e:	e111                	bnez	a0,932 <i2c_write_raw.constprop.0+0x124>
     930:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     932:	400056b7          	lui	a3,0x40005
     936:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     93a:	40d2                	lw	ra,20(sp)
     93c:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     93e:	0742                	slli	a4,a4,0x10
}
     940:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     942:	8341                	srli	a4,a4,0x10
     944:	20076713          	ori	a4,a4,512
     948:	40e69023          	sh	a4,1024(a3)
}
     94c:	44b2                	lw	s1,12(sp)
     94e:	0161                	addi	sp,sp,24
     950:	8082                	ret

00000952 <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     952:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     954:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     958:	4589                	li	a1,2
     95a:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     95c:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     95e:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     962:	3575                	jal	80e <i2c_write_raw.constprop.0>
	// return ssd1306_pkt_send(&cmd, 1, 1);
}
     964:	40b2                	lw	ra,12(sp)
     966:	0ff57513          	andi	a0,a0,255
     96a:	0141                	addi	sp,sp,16
     96c:	8082                	ret

0000096e <internal_handle_input.constprop.0>:
void handle_debug_input( int numbytes, uint8_t * data ) __attribute__((weak));
void handle_debug_input( int numbytes, uint8_t * data ) { (void)numbytes; (void)data; }

static void internal_handle_input( volatile uint32_t * dmdata0 )
{
	uint32_t dmd0 = *dmdata0;
     96e:	e00007b7          	lui	a5,0xe0000
     972:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 && bytes < 16 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
     976:	8082                	ret

00000978 <_write.constprop.0>:
//     status word = 0xcx = timed out.
// declare as weak to allow overriding.
WEAK int _write(int fd, const char *buf, int size)
{
	(void)fd;
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     978:	e0000737          	lui	a4,0xe0000
     97c:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     980:	1111                	addi	sp,sp,-28
     982:	cc06                	sw	ra,24(sp)
     984:	ca22                	sw	s0,20(sp)
     986:	c826                	sw	s1,16(sp)
     988:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     98a:	0c07f793          	andi	a5,a5,192
     98e:	0c000693          	li	a3,192
     992:	0cd78863          	beq	a5,a3,a62 <_write.constprop.0+0xea>

	char buffer[4] = { 0 };
     996:	c602                	sw	zero,12(sp)
     998:	842e                	mv	s0,a1
	int place = 0;
	uint32_t lastdmd;
	uint32_t timeout = FUNCONF_DEBUGPRINTF_TIMEOUT; // Give up after ~120ms

	if( size == 0 )
     99a:	e5f1                	bnez	a1,a66 <_write.constprop.0+0xee>
	{
		lastdmd = (*DMDATA0);
     99c:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     9a0:	c789                	beqz	a5,9aa <_write.constprop.0+0x32>
     9a2:	0807f793          	andi	a5,a5,128
     9a6:	e391                	bnez	a5,9aa <_write.constprop.0+0x32>
     9a8:	37d9                	jal	96e <internal_handle_input.constprop.0>

		//buf += tosend;
		place += tosend;
	}
	return size;
}
     9aa:	40e2                	lw	ra,24(sp)
     9ac:	8522                	mv	a0,s0
     9ae:	4452                	lw	s0,20(sp)
     9b0:	44c2                	lw	s1,16(sp)
     9b2:	0171                	addi	sp,sp,28
     9b4:	8082                	ret
		int tosend = size - place;
     9b6:	409405b3          	sub	a1,s0,s1
     9ba:	469d                	li	a3,7
     9bc:	872e                	mv	a4,a1
     9be:	00b6d363          	bge	a3,a1,9c4 <_write.constprop.0+0x4c>
     9c2:	471d                	li	a4,7
     9c4:	001006b7          	lui	a3,0x100
     9c8:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     9ca:	e0000537          	lui	a0,0xe0000
     9ce:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     9d2:	0f450313          	addi	t1,a0,244
     9d6:	08067293          	andi	t0,a2,128
     9da:	06029c63          	bnez	t0,a52 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     9de:	c611                	beqz	a2,9ea <_write.constprop.0+0x72>
     9e0:	c43a                	sw	a4,8(sp)
     9e2:	c22e                	sw	a1,4(sp)
     9e4:	3769                	jal	96e <internal_handle_input.constprop.0>
     9e6:	4722                	lw	a4,8(sp)
     9e8:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     9ea:	4689                	li	a3,2
     9ec:	4601                	li	a2,0
     9ee:	00b6d463          	bge	a3,a1,9f6 <_write.constprop.0+0x7e>
     9f2:	ffd70613          	addi	a2,a4,-3
     9f6:	4782                	lw	a5,0(sp)
     9f8:	00348593          	addi	a1,s1,3
     9fc:	0068                	addi	a0,sp,12
     9fe:	95be                	add	a1,a1,a5
     a00:	c23a                	sw	a4,4(sp)
     a02:	23e5                	jal	fea <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     a04:	4632                	lw	a2,12(sp)
     a06:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     a08:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     a0a:	e00006b7          	lui	a3,0xe0000
     a0e:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     a12:	458d                	li	a1,3
     a14:	00978633          	add	a2,a5,s1
		t = 0;
     a18:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     a1a:	00064303          	lbu	t1,0(a2)
     a1e:	0685                	addi	a3,a3,1
     a20:	007c                	addi	a5,sp,12
     a22:	00d78533          	add	a0,a5,a3
     a26:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     a2a:	00d70563          	beq	a4,a3,a34 <_write.constprop.0+0xbc>
     a2e:	0605                	addi	a2,a2,1
     a30:	feb695e3          	bne	a3,a1,a1a <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     a34:	00470693          	addi	a3,a4,4
     a38:	f806e693          	ori	a3,a3,-128
     a3c:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     a40:	4632                	lw	a2,12(sp)
     a42:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     a46:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     a48:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     a4c:	f684c5e3          	blt	s1,s0,9b6 <_write.constprop.0+0x3e>
     a50:	bfa9                	j	9aa <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     a52:	16fd                	addi	a3,a3,-1
     a54:	fead                	bnez	a3,9ce <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     a56:	00032783          	lw	a5,0(t1)
     a5a:	0c07e793          	ori	a5,a5,192
     a5e:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     a62:	4401                	li	s0,0
     a64:	b799                	j	9aa <_write.constprop.0+0x32>
	if( size == 0 )
     a66:	4481                	li	s1,0
     a68:	b7d5                	j	a4c <_write.constprop.0+0xd4>

00000a6a <__puts_uart>:
{
     a6a:	1151                	addi	sp,sp,-12
     a6c:	c222                	sw	s0,4(sp)
     a6e:	c406                	sw	ra,8(sp)
     a70:	842e                	mv	s0,a1
	_write( 0, s, len );
     a72:	3719                	jal	978 <_write.constprop.0>
}
     a74:	40a2                	lw	ra,8(sp)
     a76:	8522                	mv	a0,s0
     a78:	4412                	lw	s0,4(sp)
     a7a:	0131                	addi	sp,sp,12
     a7c:	8082                	ret

00000a7e <prefill_solid_poly>:
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
    // ===== [1] EDGE EXTRACTION =====
    struct Edge {
        uint8_t y_start, y_end;
        int16_t x_start, dx_dy;
    } edges[num_pts];
     a7e:	00159713          	slli	a4,a1,0x1
     a82:	972e                	add	a4,a4,a1
     a84:	0706                	slli	a4,a4,0x1
     a86:	070d                	addi	a4,a4,3
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
     a88:	fc810113          	addi	sp,sp,-56
    } edges[num_pts];
     a8c:	8309                	srli	a4,a4,0x2
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
     a8e:	d822                	sw	s0,48(sp)
     a90:	d626                	sw	s1,44(sp)
     a92:	1820                	addi	s0,sp,56
     a94:	da06                	sw	ra,52(sp)
    } edges[num_pts];
     a96:	070a                	slli	a4,a4,0x2

    uint8_t edge_count = 0;
    uint8_t y_min = 255, y_max = 0;

    // Build edge table and find Y bounds
    for (uint8_t i = 0, j = num_pts-1; i < num_pts; j = i++) {
     a98:	fff58613          	addi	a2,a1,-1
    } edges[num_pts];
     a9c:	40e10133          	sub	sp,sp,a4
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
     aa0:	fca42c23          	sw	a0,-40(s0)
     aa4:	87ae                	mv	a5,a1
    } edges[num_pts];
     aa6:	fe242023          	sw	sp,-32(s0)
    for (uint8_t i = 0, j = num_pts-1; i < num_pts; j = i++) {
     aaa:	0ff67613          	andi	a2,a2,255
     aae:	86aa                	mv	a3,a0
     ab0:	fe042223          	sw	zero,-28(s0)
    uint8_t y_min = 255, y_max = 0;
     ab4:	fe042423          	sw	zero,-24(s0)
    uint8_t edge_count = 0;
     ab8:	4301                	li	t1,0
    uint8_t y_min = 255, y_max = 0;
     aba:	0ff00493          	li	s1,255
        // Skip horizontal edges (don't affect filling)
        if (pts[i].y == pts[j].y) continue;
     abe:	fd842583          	lw	a1,-40(s0)
     ac2:	0606                	slli	a2,a2,0x1
     ac4:	0016c703          	lbu	a4,1(a3)
     ac8:	962e                	add	a2,a2,a1
     aca:	00164583          	lbu	a1,1(a2)
     ace:	08b70e63          	beq	a4,a1,b6a <prefill_solid_poly+0xec>
        if (pts[i].y < pts[j].y) {
            y0 = pts[i].y; y1 = pts[j].y;
            x0 = pts[i].x;
        } else {
            y0 = pts[j].y; y1 = pts[i].y;
            x0 = pts[j].x;
     ad2:	00064603          	lbu	a2,0(a2)
            x0 = pts[i].x;
     ad6:	0006c383          	lbu	t2,0(a3)
            x0 = pts[j].x;
     ada:	fcc42e23          	sw	a2,-36(s0)
        if (pts[i].y < pts[j].y) {
     ade:	0ab77c63          	bgeu	a4,a1,b96 <prefill_solid_poly+0x118>
            x0 = pts[i].x;
     ae2:	01039093          	slli	ra,t2,0x10
     ae6:	4100d093          	srai	ra,ra,0x10
     aea:	852e                	mv	a0,a1
     aec:	82ba                	mv	t0,a4
        }

        // Update global Y bounds
        y_min = y0 < y_min ? y0 : y_min;
     aee:	8616                	mv	a2,t0
     af0:	0054f363          	bgeu	s1,t0,af6 <prefill_solid_poly+0x78>
     af4:	8626                	mv	a2,s1
     af6:	0ff67493          	andi	s1,a2,255
        y_max = y1 > y_max ? y1 : y_max;
     afa:	fe842603          	lw	a2,-24(s0)
     afe:	fca40a23          	sb	a0,-44(s0)
     b02:	00c57463          	bgeu	a0,a2,b0a <prefill_solid_poly+0x8c>
     b06:	fcc40a23          	sb	a2,-44(s0)
     b0a:	fcf42423          	sw	a5,-56(s0)
     b0e:	fd444783          	lbu	a5,-44(s0)

        // Store edge (dx/dy as fixed-point 8.8)
        edges[edge_count++] = (struct Edge){
     b12:	00130613          	addi	a2,t1,1
            .y_start = y0,
            .y_end = y1,
            .x_start = x0 << 8,
     b16:	00a2                	slli	ra,ra,0x8
        y_max = y1 > y_max ? y1 : y_max;
     b18:	fef42423          	sw	a5,-24(s0)
        edges[edge_count++] = (struct Edge){
     b1c:	0ff67793          	andi	a5,a2,255
     b20:	fcf42a23          	sw	a5,-44(s0)
     b24:	00131613          	slli	a2,t1,0x1
     b28:	fe042783          	lw	a5,-32(s0)
     b2c:	9332                	add	t1,t1,a2
     b2e:	0306                	slli	t1,t1,0x1
     b30:	933e                	add	t1,t1,a5
            .dx_dy = ((pts[j].x - pts[i].x) << 8) / (pts[j].y - pts[i].y)
     b32:	fdc42783          	lw	a5,-36(s0)
        edges[edge_count++] = (struct Edge){
     b36:	00a300a3          	sb	a0,1(t1)
     b3a:	00530023          	sb	t0,0(t1)
            .dx_dy = ((pts[j].x - pts[i].x) << 8) / (pts[j].y - pts[i].y)
     b3e:	40778533          	sub	a0,a5,t2
        edges[edge_count++] = (struct Edge){
     b42:	00131123          	sh	ra,2(t1)
            .dx_dy = ((pts[j].x - pts[i].x) << 8) / (pts[j].y - pts[i].y)
     b46:	8d99                	sub	a1,a1,a4
     b48:	0522                	slli	a0,a0,0x8
     b4a:	fcd42623          	sw	a3,-52(s0)
        edges[edge_count++] = (struct Edge){
     b4e:	fc642823          	sw	t1,-48(s0)
            .dx_dy = ((pts[j].x - pts[i].x) << 8) / (pts[j].y - pts[i].y)
     b52:	d4eff0ef          	jal	ra,a0 <__divsi3>
        edges[edge_count++] = (struct Edge){
     b56:	fd042303          	lw	t1,-48(s0)
     b5a:	fc842783          	lw	a5,-56(s0)
     b5e:	fcc42683          	lw	a3,-52(s0)
     b62:	00a31223          	sh	a0,4(t1)
     b66:	fd442303          	lw	t1,-44(s0)
    for (uint8_t i = 0, j = num_pts-1; i < num_pts; j = i++) {
     b6a:	fe442703          	lw	a4,-28(s0)
     b6e:	fe442603          	lw	a2,-28(s0)
     b72:	0689                	addi	a3,a3,2
     b74:	0705                	addi	a4,a4,1
     b76:	0ff77713          	andi	a4,a4,255
     b7a:	00e79b63          	bne	a5,a4,b90 <prefill_solid_poly+0x112>
        };
    }

    // ===== [2] SCANLINE PROCESSING =====
    for (uint8_t y = y_min; y <= y_max; y++) {
     b7e:	fe842783          	lw	a5,-24(s0)
     b82:	1097eb63          	bltu	a5,s1,c98 <prefill_solid_poly+0x21a>
     b86:	fe042783          	lw	a5,-32(s0)
        uint8_t x_list[8];  // Supports 4 edge crossings (99% of cases)
        uint8_t x_count = 0;

        // Collect active edges
        for (uint8_t e = 0; e < edge_count; e++) {
     b8a:	4681                	li	a3,0
        uint8_t x_count = 0;
     b8c:	4701                	li	a4,0
     b8e:	a0b1                	j	bda <prefill_solid_poly+0x15c>
    for (uint8_t i = 0, j = num_pts-1; i < num_pts; j = i++) {
     b90:	fee42223          	sw	a4,-28(s0)
     b94:	b72d                	j	abe <prefill_solid_poly+0x40>
            x0 = pts[j].x;
     b96:	fdc41083          	lh	ra,-36(s0)
     b9a:	853a                	mv	a0,a4
     b9c:	82ae                	mv	t0,a1
     b9e:	bf81                	j	aee <prefill_solid_poly+0x70>
            if (y >= edges[e].y_start && y < edges[e].y_end) {
     ba0:	0007c603          	lbu	a2,0(a5)
     ba4:	02c4e763          	bltu	s1,a2,bd2 <prefill_solid_poly+0x154>
     ba8:	0017c603          	lbu	a2,1(a5)
     bac:	02c4f363          	bgeu	s1,a2,bd2 <prefill_solid_poly+0x154>
                x_list[x_count++] = edges[e].x_start >> 8;
     bb0:	00279603          	lh	a2,2(a5)
     bb4:	ff440513          	addi	a0,s0,-12
     bb8:	95aa                	add	a1,a1,a0
     bba:	40865513          	srai	a0,a2,0x8
     bbe:	fea58c23          	sb	a0,-8(a1)
                edges[e].x_start += edges[e].dx_dy;  // Step X
     bc2:	0047d583          	lhu	a1,4(a5)
                x_list[x_count++] = edges[e].x_start >> 8;
     bc6:	0705                	addi	a4,a4,1
     bc8:	0ff77713          	andi	a4,a4,255
                edges[e].x_start += edges[e].dx_dy;  // Step X
     bcc:	962e                	add	a2,a2,a1
     bce:	00c79123          	sh	a2,2(a5)
        for (uint8_t e = 0; e < edge_count; e++) {
     bd2:	0685                	addi	a3,a3,1
     bd4:	0ff6f693          	andi	a3,a3,255
     bd8:	0799                	addi	a5,a5,6
                x_list[x_count++] = edges[e].x_start >> 8;
     bda:	85ba                	mv	a1,a4
        for (uint8_t e = 0; e < edge_count; e++) {
     bdc:	fcd312e3          	bne	t1,a3,ba0 <prefill_solid_poly+0x122>
     be0:	fec40613          	addi	a2,s0,-20
            }
        }

        // Insertion sort (optimal for small N)
        for (uint8_t i = 1; i < x_count; i++) {
     be4:	4685                	li	a3,1
            uint8_t val = x_list[i];
            int8_t j = i-1;
            while (j >= 0 && x_list[j] > val) {
     be6:	53fd                	li	t2,-1
        for (uint8_t i = 1; i < x_count; i++) {
     be8:	00e6eb63          	bltu	a3,a4,bfe <prefill_solid_poly+0x180>
            }
            x_list[j+1] = val;
        }

        // Fill between pairs (with bounds checking)
        for (uint8_t i = 0; i+1 < x_count; i += 2) {
     bec:	4781                	li	a5,0
     bee:	00178693          	addi	a3,a5,1
     bf2:	04e6c663          	blt	a3,a4,c3e <prefill_solid_poly+0x1c0>
    for (uint8_t y = y_min; y <= y_max; y++) {
     bf6:	0485                	addi	s1,s1,1
     bf8:	0ff4f493          	andi	s1,s1,255
     bfc:	b749                	j	b7e <prefill_solid_poly+0x100>
            uint8_t val = x_list[i];
     bfe:	fff68793          	addi	a5,a3,-1
     c02:	00164503          	lbu	a0,1(a2)
            int8_t j = i-1;
     c06:	07e2                	slli	a5,a5,0x18
     c08:	87e1                	srai	a5,a5,0x18
            uint8_t val = x_list[i];
     c0a:	85b2                	mv	a1,a2
            while (j >= 0 && x_list[j] > val) {
     c0c:	0005c283          	lbu	t0,0(a1)
     c10:	00557a63          	bgeu	a0,t0,c24 <prefill_solid_poly+0x1a6>
                x_list[j+1] = x_list[j];
     c14:	17fd                	addi	a5,a5,-1
     c16:	07e2                	slli	a5,a5,0x18
     c18:	005580a3          	sb	t0,1(a1)
                j--;
     c1c:	87e1                	srai	a5,a5,0x18
            while (j >= 0 && x_list[j] > val) {
     c1e:	15fd                	addi	a1,a1,-1
     c20:	fe7796e3          	bne	a5,t2,c0c <prefill_solid_poly+0x18e>
            x_list[j+1] = val;
     c24:	0785                	addi	a5,a5,1
     c26:	07e2                	slli	a5,a5,0x18
     c28:	87e1                	srai	a5,a5,0x18
     c2a:	ff440593          	addi	a1,s0,-12
     c2e:	97ae                	add	a5,a5,a1
        for (uint8_t i = 1; i < x_count; i++) {
     c30:	0685                	addi	a3,a3,1
            x_list[j+1] = val;
     c32:	fea78c23          	sb	a0,-8(a5)
        for (uint8_t i = 1; i < x_count; i++) {
     c36:	0ff6f693          	andi	a3,a3,255
     c3a:	0605                	addi	a2,a2,1
     c3c:	b775                	j	be8 <prefill_solid_poly+0x16a>
            uint8_t x1 = x_list[i] < SSD1306_W ? x_list[i] : SSD1306_W-1;
     c3e:	ff440613          	addi	a2,s0,-12
     c42:	963e                	add	a2,a2,a5
     c44:	ff864583          	lbu	a1,-8(a2)
     c48:	01859613          	slli	a2,a1,0x18
     c4c:	8661                	srai	a2,a2,0x18
     c4e:	00065463          	bgez	a2,c56 <prefill_solid_poly+0x1d8>
     c52:	07f00593          	li	a1,127
            uint8_t x2 = x_list[i+1] < SSD1306_W ? x_list[i+1] : SSD1306_W-1;
     c56:	ff440613          	addi	a2,s0,-12
     c5a:	96b2                	add	a3,a3,a2
     c5c:	ff86c603          	lbu	a2,-8(a3)
     c60:	01861693          	slli	a3,a2,0x18
     c64:	86e1                	srai	a3,a3,0x18
     c66:	0006d463          	bgez	a3,c6e <prefill_solid_poly+0x1f0>
     c6a:	07f00613          	li	a2,127
            if (x1 < x2) prefill_fastHorLine(y, x1, x2);
     c6e:	02c5f163          	bgeu	a1,a2,c90 <prefill_solid_poly+0x212>
     c72:	8526                	mv	a0,s1
     c74:	fcf42c23          	sw	a5,-40(s0)
     c78:	fce42e23          	sw	a4,-36(s0)
     c7c:	fe642223          	sw	t1,-28(s0)
     c80:	eceff0ef          	jal	ra,34e <prefill_fastHorLine>
     c84:	fd842783          	lw	a5,-40(s0)
     c88:	fdc42703          	lw	a4,-36(s0)
     c8c:	fe442303          	lw	t1,-28(s0)
        for (uint8_t i = 0; i+1 < x_count; i += 2) {
     c90:	0789                	addi	a5,a5,2
     c92:	0ff7f793          	andi	a5,a5,255
     c96:	bfa1                	j	bee <prefill_solid_poly+0x170>
        }
    }
}
     c98:	fc840113          	addi	sp,s0,-56
     c9c:	50d2                	lw	ra,52(sp)
     c9e:	5442                	lw	s0,48(sp)
     ca0:	54b2                	lw	s1,44(sp)
     ca2:	03810113          	addi	sp,sp,56
     ca6:	8082                	ret

00000ca8 <handle_reset>:
	asm volatile( "\n\
     ca8:	1ffff197          	auipc	gp,0x1ffff
     cac:	75418193          	addi	gp,gp,1876 # 200003fc <__global_pointer$>
     cb0:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     cb4:	6509                	lui	a0,0x2
     cb6:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x60c>
     cba:	30051073          	csrw	mstatus,a0
     cbe:	468d                	li	a3,3
     cc0:	fffff517          	auipc	a0,0xfffff
     cc4:	34050513          	addi	a0,a0,832 # 0 <InterruptVector>
     cc8:	8d55                	or	a0,a0,a3
     cca:	30551073          	csrw	mtvec,a0
asm volatile(
     cce:	c7818513          	addi	a0,gp,-904 # 20000074 <WS2812BLEDInUse>
     cd2:	1b018593          	addi	a1,gp,432 # 200005ac <_ebss>
     cd6:	4601                	li	a2,0
     cd8:	00b55663          	bge	a0,a1,ce4 <handle_reset+0x3c>
     cdc:	c110                	sw	a2,0(a0)
     cde:	0511                	addi	a0,a0,4
     ce0:	feb54ee3          	blt	a0,a1,cdc <handle_reset+0x34>
     ce4:	00001517          	auipc	a0,0x1
     ce8:	5bc50513          	addi	a0,a0,1468 # 22a0 <_data_lma>
     cec:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_aht21>
     cf0:	1ffff617          	auipc	a2,0x1ffff
     cf4:	38460613          	addi	a2,a2,900 # 20000074 <WS2812BLEDInUse>
     cf8:	00c58863          	beq	a1,a2,d08 <handle_reset+0x60>
     cfc:	4114                	lw	a3,0(a0)
     cfe:	c194                	sw	a3,0(a1)
     d00:	0511                	addi	a0,a0,4
     d02:	0591                	addi	a1,a1,4
     d04:	fec59ae3          	bne	a1,a2,cf8 <handle_reset+0x50>
	SysTick->CTLR = 5;
     d08:	e000f7b7          	lui	a5,0xe000f
     d0c:	4715                	li	a4,5
     d0e:	c398                	sw	a4,0(a5)
asm volatile(
     d10:	6785                	lui	a5,0x1
     d12:	27478793          	addi	a5,a5,628 # 1274 <main>
     d16:	34179073          	csrw	mepc,a5
     d1a:	30200073          	mret

00000d1e <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     d1e:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     d22:	cdaff0ef          	jal	ra,1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     d26:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     d2a:	cd2ff0ef          	jal	ra,1fc <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     d2e:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     d32:	ccaff0ef          	jal	ra,1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     d36:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     d3a:	cc2ff0ef          	jal	ra,1fc <PrintHex>
	while( (*DMDATA0) & 0x80 );
     d3e:	e0000737          	lui	a4,0xe0000
     d42:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     d46:	0f470693          	addi	a3,a4,244
     d4a:	0807f793          	andi	a5,a5,128
     d4e:	fbf5                	bnez	a5,d42 <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     d50:	6785                	lui	a5,0x1
     d52:	a8578793          	addi	a5,a5,-1403 # a85 <prefill_solid_poly+0x7>
     d56:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     d58:	e0000737          	lui	a4,0xe0000
     d5c:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     d60:	0f470693          	addi	a3,a4,244
     d64:	0807f793          	andi	a5,a5,128
     d68:	fbf5                	bnez	a5,d5c <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     d6a:	aaaab7b7          	lui	a5,0xaaaab
     d6e:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     d72:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     d74:	a001                	j	d74 <ADC1_2_IRQHandler+0x56>

00000d76 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     d76:	40021737          	lui	a4,0x40021
     d7a:	471c                	lw	a5,8(a4)
     d7c:	008006b7          	lui	a3,0x800
     d80:	8fd5                	or	a5,a5,a3
     d82:	c71c                	sw	a5,8(a4)

00000d84 <strlen>:
{
     d84:	87aa                	mv	a5,a0
	for (; *s; s++);
     d86:	0007c703          	lbu	a4,0(a5)
     d8a:	e701                	bnez	a4,d92 <strlen+0xe>
}
     d8c:	40a78533          	sub	a0,a5,a0
     d90:	8082                	ret
	for (; *s; s++);
     d92:	0785                	addi	a5,a5,1
     d94:	bfcd                	j	d86 <strlen+0x2>

00000d96 <mini_vpprintf>:
{
     d96:	fa410113          	addi	sp,sp,-92
     d9a:	c8a6                	sw	s1,80(sp)
     d9c:	cc86                	sw	ra,88(sp)
     d9e:	caa2                	sw	s0,84(sp)
     da0:	c02a                	sw	a0,0(sp)
     da2:	c22e                	sw	a1,4(sp)
     da4:	84b2                	mv	s1,a2
     da6:	87b6                	mv	a5,a3
	int n = 0;
     da8:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     daa:	0004c703          	lbu	a4,0(s1)
     dae:	00148413          	addi	s0,s1,1
     db2:	00e10fa3          	sb	a4,31(sp)
     db6:	eb01                	bnez	a4,dc6 <mini_vpprintf+0x30>
}
     db8:	40e6                	lw	ra,88(sp)
     dba:	4456                	lw	s0,84(sp)
     dbc:	4542                	lw	a0,16(sp)
     dbe:	44c6                	lw	s1,80(sp)
     dc0:	05c10113          	addi	sp,sp,92
     dc4:	8082                	ret
		if (ch!='%') {
     dc6:	02500693          	li	a3,37
     dca:	00d70f63          	beq	a4,a3,de8 <mini_vpprintf+0x52>
     dce:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     dd0:	4612                	lw	a2,4(sp)
     dd2:	4782                	lw	a5,0(sp)
     dd4:	4585                	li	a1,1
     dd6:	01f10513          	addi	a0,sp,31
     dda:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     ddc:	84a2                	mv	s1,s0
		n = n + len;
     dde:	47c2                	lw	a5,16(sp)
     de0:	97aa                	add	a5,a5,a0
     de2:	c83e                	sw	a5,16(sp)
     de4:	47a2                	lw	a5,8(sp)
     de6:	b7d1                	j	daa <mini_vpprintf+0x14>
			ch=*(fmt++);
     de8:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     dec:	03000613          	li	a2,48
			ch=*(fmt++);
     df0:	00248713          	addi	a4,s1,2
     df4:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     df8:	03000413          	li	s0,48
     dfc:	08c69063          	bne	a3,a2,e7c <mini_vpprintf+0xe6>
				ch=*(fmt++);
     e00:	84ba                	mv	s1,a4
     e02:	4601                	li	a2,0
     e04:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     e06:	4525                	li	a0,9
     e08:	a811                	j	e1c <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     e0a:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     e0e:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     e10:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     e12:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     e16:	0706                	slli	a4,a4,0x1
     e18:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     e1a:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     e1c:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.bfb73fe7+0x7f6529>
     e20:	0ff5f313          	andi	t1,a1,255
     e24:	fe6573e3          	bgeu	a0,t1,e0a <mini_vpprintf+0x74>
     e28:	c219                	beqz	a2,e2e <mini_vpprintf+0x98>
     e2a:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     e2e:	c63a                	sw	a4,12(sp)
     e30:	4661                	li	a2,24
     e32:	00e65363          	bge	a2,a4,e38 <mini_vpprintf+0xa2>
     e36:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     e38:	06c00593          	li	a1,108
			char l = 0;
     e3c:	4601                	li	a2,0
			if (ch == 'l') {
     e3e:	00b69863          	bne	a3,a1,e4e <mini_vpprintf+0xb8>
				ch=*(fmt++);
     e42:	0004c683          	lbu	a3,0(s1)
				l = 1;
     e46:	4605                	li	a2,1
				ch=*(fmt++);
     e48:	0485                	addi	s1,s1,1
     e4a:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     e4e:	01f14683          	lbu	a3,31(sp)
     e52:	06400593          	li	a1,100
     e56:	06b68363          	beq	a3,a1,ebc <mini_vpprintf+0x126>
     e5a:	02d5e463          	bltu	a1,a3,e82 <mini_vpprintf+0xec>
     e5e:	05800713          	li	a4,88
     e62:	0ae68263          	beq	a3,a4,f06 <mini_vpprintf+0x170>
     e66:	06300713          	li	a4,99
     e6a:	0ce68063          	beq	a3,a4,f2a <mini_vpprintf+0x194>
     e6e:	d6a9                	beqz	a3,db8 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     e70:	4612                	lw	a2,4(sp)
     e72:	c43e                	sw	a5,8(sp)
     e74:	4585                	li	a1,1
     e76:	01f10513          	addi	a0,sp,31
     e7a:	a88d                	j	eec <mini_vpprintf+0x156>
			char pad_char = ' ';
     e7c:	02000413          	li	s0,32
     e80:	b741                	j	e00 <mini_vpprintf+0x6a>
			switch (ch) {
     e82:	07500593          	li	a1,117
     e86:	02b68b63          	beq	a3,a1,ebc <mini_vpprintf+0x126>
     e8a:	07800613          	li	a2,120
     e8e:	06c68c63          	beq	a3,a2,f06 <mini_vpprintf+0x170>
     e92:	07300613          	li	a2,115
     e96:	fcc69de3          	bne	a3,a2,e70 <mini_vpprintf+0xda>
     e9a:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     e9c:	00478713          	addi	a4,a5,4
     ea0:	439c                	lw	a5,0(a5)
     ea2:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     ea4:	853e                	mv	a0,a5
     ea6:	ca3e                	sw	a5,20(sp)
     ea8:	3df1                	jal	d84 <strlen>
					if (pad_to > 0) {
     eaa:	4762                	lw	a4,24(sp)
     eac:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     eae:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     eb0:	cb51                	beqz	a4,f44 <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     eb2:	46b2                	lw	a3,12(sp)
     eb4:	1838                	addi	a4,sp,56
     eb6:	8622                	mv	a2,s0
     eb8:	853e                	mv	a0,a5
     eba:	a025                	j	ee2 <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     ebc:	00478713          	addi	a4,a5,4
     ec0:	c43a                	sw	a4,8(sp)
					if(l) {
     ec2:	ca05                	beqz	a2,ef2 <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     ec4:	f8b68693          	addi	a3,a3,-117
     ec8:	1018                	addi	a4,sp,32
     eca:	0016b693          	seqz	a3,a3
     ece:	4388                	lw	a0,0(a5)
     ed0:	4601                	li	a2,0
     ed2:	45a9                	li	a1,10
     ed4:	b80ff0ef          	jal	ra,254 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ed8:	46b2                	lw	a3,12(sp)
     eda:	1838                	addi	a4,sp,56
     edc:	8622                	mv	a2,s0
     ede:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ee0:	1008                	addi	a0,sp,32
     ee2:	a3cff0ef          	jal	ra,11e <mini_pad>
					len = puts(bf, len, buf);
     ee6:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ee8:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     eea:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     eec:	4782                	lw	a5,0(sp)
     eee:	9782                	jalr	a5
					break;
     ef0:	b5fd                	j	dde <mini_vpprintf+0x48>
						if(ch == 'u') {
     ef2:	07500713          	li	a4,117
     ef6:	00e69563          	bne	a3,a4,f00 <mini_vpprintf+0x16a>
	if (radix > 16)
     efa:	1018                	addi	a4,sp,32
     efc:	4685                	li	a3,1
     efe:	bfc1                	j	ece <mini_vpprintf+0x138>
     f00:	1018                	addi	a4,sp,32
     f02:	4681                	li	a3,0
     f04:	b7e9                	j	ece <mini_vpprintf+0x138>
					if(l) {
     f06:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f08:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     f0c:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f10:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     f12:	4685                	li	a3,1
     f14:	1018                	addi	a4,sp,32
     f16:	00163613          	seqz	a2,a2
     f1a:	45c1                	li	a1,16
     f1c:	b38ff0ef          	jal	ra,254 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     f20:	46b2                	lw	a3,12(sp)
     f22:	85aa                	mv	a1,a0
     f24:	1838                	addi	a4,sp,56
     f26:	8622                	mv	a2,s0
     f28:	bf65                	j	ee0 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     f2a:	00478713          	addi	a4,a5,4
     f2e:	439c                	lw	a5,0(a5)
     f30:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     f32:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     f34:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     f38:	1838                	addi	a4,sp,56
     f3a:	8622                	mv	a2,s0
     f3c:	4585                	li	a1,1
     f3e:	01f10513          	addi	a0,sp,31
     f42:	b745                	j	ee2 <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     f44:	4612                	lw	a2,4(sp)
     f46:	853e                	mv	a0,a5
     f48:	b755                	j	eec <mini_vpprintf+0x156>

00000f4a <printf>:
{
     f4a:	fdc10113          	addi	sp,sp,-36
     f4e:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f50:	862a                	mv	a2,a0
     f52:	6505                	lui	a0,0x1
{
     f54:	c82e                	sw	a1,16(sp)
     f56:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f58:	4581                	li	a1,0
	va_start( args, format );
     f5a:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f5c:	a6a50513          	addi	a0,a0,-1430 # a6a <__puts_uart>
{
     f60:	c606                	sw	ra,12(sp)
     f62:	ce3a                	sw	a4,28(sp)
     f64:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     f66:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f68:	353d                	jal	d96 <mini_vpprintf>
}
     f6a:	40b2                	lw	ra,12(sp)
     f6c:	02410113          	addi	sp,sp,36
     f70:	8082                	ret

00000f72 <mini_vsnprintf>:
{
     f72:	1121                	addi	sp,sp,-24
     f74:	ca06                	sw	ra,20(sp)
     f76:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
     f78:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
     f7a:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
     f7c:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
     f7e:	c185                	beqz	a1,f9e <mini_vsnprintf+0x2c>
     f80:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
     f82:	858a                	mv	a1,sp
     f84:	e111                	bnez	a0,f88 <mini_vsnprintf+0x16>
     f86:	4581                	li	a1,0
     f88:	1ba00513          	li	a0,442
     f8c:	3529                	jal	d96 <mini_vpprintf>
	if(buffer == (void*) 0) {
     f8e:	c401                	beqz	s0,f96 <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
     f90:	4512                	lw	a0,4(sp)
     f92:	4782                	lw	a5,0(sp)
     f94:	8d1d                	sub	a0,a0,a5
}
     f96:	40d2                	lw	ra,20(sp)
     f98:	4442                	lw	s0,16(sp)
     f9a:	0161                	addi	sp,sp,24
     f9c:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
     f9e:	4401                	li	s0,0
     fa0:	b7dd                	j	f86 <mini_vsnprintf+0x14>

00000fa2 <sprintf>:
{
     fa2:	1101                	addi	sp,sp,-32
     fa4:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fa6:	862e                	mv	a2,a1
     fa8:	800005b7          	lui	a1,0x80000
{
     fac:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fae:	fff5c593          	not	a1,a1
	va_start( args, format );
     fb2:	0814                	addi	a3,sp,16
{
     fb4:	c606                	sw	ra,12(sp)
     fb6:	cc3a                	sw	a4,24(sp)
     fb8:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
     fba:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fbc:	3f5d                	jal	f72 <mini_vsnprintf>
}
     fbe:	40b2                	lw	ra,12(sp)
     fc0:	6105                	addi	sp,sp,32
     fc2:	8082                	ret

00000fc4 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     fc4:	962a                	add	a2,a2,a0
     fc6:	87aa                	mv	a5,a0
     fc8:	00c79363          	bne	a5,a2,fce <memset+0xa>
     fcc:	8082                	ret
     fce:	00b78023          	sb	a1,0(a5)
     fd2:	0785                	addi	a5,a5,1
     fd4:	bfd5                	j	fc8 <memset+0x4>

00000fd6 <strcpy>:
{
     fd6:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
     fd8:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
     fdc:	00e78023          	sb	a4,0(a5)
     fe0:	e311                	bnez	a4,fe4 <strcpy+0xe>
}
     fe2:	8082                	ret
	for (; (*d=*s); s++, d++);
     fe4:	0585                	addi	a1,a1,1
     fe6:	0785                	addi	a5,a5,1
     fe8:	bfc5                	j	fd8 <strcpy+0x2>

00000fea <memcpy>:
{
     fea:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     fec:	00f61363          	bne	a2,a5,ff2 <memcpy+0x8>
}
     ff0:	8082                	ret
	for (; n; n--) *d++ = *s++;
     ff2:	00f58733          	add	a4,a1,a5
     ff6:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
     ffa:	00f50733          	add	a4,a0,a5
     ffe:	0785                	addi	a5,a5,1
    1000:	00d70023          	sb	a3,0(a4)
    1004:	b7e5                	j	fec <memcpy+0x2>

00001006 <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1006:	7179                	addi	sp,sp,-48
    1008:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
    100a:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
    100e:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
    1010:	862e                	mv	a2,a1
    1012:	85aa                	mv	a1,a0
    1014:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1018:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    101a:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    101e:	37f1                	jal	fea <memcpy>

	// pkt[0] = 0;
	// pkt[1] = *data;
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    1020:	00140593          	addi	a1,s0,1
    1024:	850a                	mv	a0,sp
    1026:	fe8ff0ef          	jal	ra,80e <i2c_write_raw.constprop.0>
	// return ssd1306_pkt_send(data, sz, 0);
}
    102a:	50b2                	lw	ra,44(sp)
    102c:	5422                	lw	s0,40(sp)
    102e:	6145                	addi	sp,sp,48
    1030:	8082                	ret

00001032 <ssd1306_renderFrame>:
void ssd1306_renderFrame() {
    1032:	1131                	addi	sp,sp,-20
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1034:	02100513          	li	a0,33
void ssd1306_renderFrame() {
    1038:	c806                	sw	ra,16(sp)
    103a:	c622                	sw	s0,12(sp)
    103c:	c426                	sw	s1,8(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    103e:	3a11                	jal	952 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1040:	4501                	li	a0,0
    1042:	3a01                	jal	952 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1044:	07f00513          	li	a0,127
    1048:	3229                	jal	952 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    104a:	02200513          	li	a0,34
    104e:	3211                	jal	952 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1050:	4501                	li	a0,0
    1052:	901ff0ef          	jal	ra,952 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1056:	451d                	li	a0,7
    1058:	8fbff0ef          	jal	ra,952 <ssd1306_cmd>
    105c:	4401                	li	s0,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    105e:	cf018493          	addi	s1,gp,-784 # 200000ec <frame_buffer>
void ssd1306_renderFrame() {
    1062:	4501                	li	a0,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    1064:	00848733          	add	a4,s1,s0
    1068:	02050793          	addi	a5,a0,32
    106c:	01079593          	slli	a1,a5,0x10
    1070:	81c1                	srli	a1,a1,0x10
    1072:	8d89                	sub	a1,a1,a0
    1074:	953a                	add	a0,a0,a4
    1076:	c23e                	sw	a5,4(sp)
    1078:	c03a                	sw	a4,0(sp)
    107a:	3771                	jal	1006 <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    107c:	4792                	lw	a5,4(sp)
    107e:	4702                	lw	a4,0(sp)
    1080:	853e                	mv	a0,a5
    1082:	08000793          	li	a5,128
    1086:	fef511e3          	bne	a0,a5,1068 <ssd1306_renderFrame+0x36>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    108a:	08040413          	addi	s0,s0,128
    108e:	40000793          	li	a5,1024
    1092:	fcf418e3          	bne	s0,a5,1062 <ssd1306_renderFrame+0x30>
}
    1096:	40c2                	lw	ra,16(sp)
    1098:	4432                	lw	s0,12(sp)
    109a:	44a2                	lw	s1,8(sp)
    109c:	0151                	addi	sp,sp,20
    109e:	8082                	ret

000010a0 <ssd1306_print_str_at.constprop.0>:
void ssd1306_print_str_at(
    10a0:	1151                	addi	sp,sp,-12
    10a2:	c222                	sw	s0,4(sp)
    10a4:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    10a6:	02100513          	li	a0,33
void ssd1306_print_str_at(
    10aa:	c406                	sw	ra,8(sp)
    10ac:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    10ae:	8a5ff0ef          	jal	ra,952 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    10b2:	4501                	li	a0,0
    10b4:	89fff0ef          	jal	ra,952 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    10b8:	07f00513          	li	a0,127
    10bc:	897ff0ef          	jal	ra,952 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    10c0:	02200513          	li	a0,34
    10c4:	88fff0ef          	jal	ra,952 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    10c8:	8522                	mv	a0,s0
    10ca:	889ff0ef          	jal	ra,952 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    10ce:	8522                	mv	a0,s0
    10d0:	883ff0ef          	jal	ra,952 <ssd1306_cmd>
    10d4:	4465                	li	s0,25
    10d6:	19c18493          	addi	s1,gp,412 # 20000598 <str_output>
		if (*str) {
    10da:	0004c783          	lbu	a5,0(s1)
    10de:	c78d                	beqz	a5,1108 <ssd1306_print_str_at.constprop.0+0x68>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    10e0:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    10e2:	0ff7f793          	andi	a5,a5,255
    10e6:	6709                	lui	a4,0x2
    10e8:	00279693          	slli	a3,a5,0x2
    10ec:	07870513          	addi	a0,a4,120 # 2078 <FONT_7x5>
    10f0:	97b6                	add	a5,a5,a3
    10f2:	4595                	li	a1,5
    10f4:	953e                	add	a0,a0,a5
    10f6:	3f01                	jal	1006 <ssd1306_data.isra.0>
			str++;
    10f8:	0485                	addi	s1,s1,1
	for (int i=0; i<25; i++) {
    10fa:	147d                	addi	s0,s0,-1
    10fc:	fc79                	bnez	s0,10da <ssd1306_print_str_at.constprop.0+0x3a>
}
    10fe:	40a2                	lw	ra,8(sp)
    1100:	4412                	lw	s0,4(sp)
    1102:	4482                	lw	s1,0(sp)
    1104:	0131                	addi	sp,sp,12
    1106:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    1108:	6789                	lui	a5,0x2
    110a:	4595                	li	a1,5
    110c:	07878513          	addi	a0,a5,120 # 2078 <FONT_7x5>
    1110:	3ddd                	jal	1006 <ssd1306_data.isra.0>
    1112:	b7e5                	j	10fa <ssd1306_print_str_at.constprop.0+0x5a>

00001114 <puts>:
{
    1114:	1151                	addi	sp,sp,-12
    1116:	c406                	sw	ra,8(sp)
    1118:	c222                	sw	s0,4(sp)
    111a:	c026                	sw	s1,0(sp)
    111c:	84aa                	mv	s1,a0
	int sl = strlen( s );
    111e:	319d                	jal	d84 <strlen>
    1120:	842a                	mv	s0,a0
	_write(0, s, sl );
    1122:	85aa                	mv	a1,a0
    1124:	8526                	mv	a0,s1
    1126:	853ff0ef          	jal	ra,978 <_write.constprop.0>
	_write(0, "\n", 1 );
    112a:	6509                	lui	a0,0x2
    112c:	4585                	li	a1,1
    112e:	fec50513          	addi	a0,a0,-20 # 1fec <DMA1_Channel3_IRQHandler+0x8e>
    1132:	847ff0ef          	jal	ra,978 <_write.constprop.0>
}
    1136:	40a2                	lw	ra,8(sp)
    1138:	00140513          	addi	a0,s0,1
    113c:	4412                	lw	s0,4(sp)
    113e:	4482                	lw	s1,0(sp)
    1140:	0131                	addi	sp,sp,12
    1142:	8082                	ret

00001144 <putchar>:

// single to debug intf
WEAK int putchar(int c)
{
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1144:	e00007b7          	lui	a5,0xe0000
    1148:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
    114c:	0c000713          	li	a4,192
    1150:	0c07f793          	andi	a5,a5,192
    1154:	04e78d63          	beq	a5,a4,11ae <putchar+0x6a>
{
    1158:	1151                	addi	sp,sp,-12
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    115a:	001007b7          	lui	a5,0x100
{
    115e:	c222                	sw	s0,4(sp)
    1160:	c406                	sw	ra,8(sp)
    1162:	842a                	mv	s0,a0
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1164:	0785                	addi	a5,a5,1

	int timeout = FUNCONF_DEBUGPRINTF_TIMEOUT;
	uint32_t lastdmd = 0;

	while( ( lastdmd = (*DMDATA0) ) & 0x80 )
    1166:	e00006b7          	lui	a3,0xe0000
    116a:	0f46a703          	lw	a4,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
    116e:	0f468613          	addi	a2,a3,244
    1172:	08077593          	andi	a1,a4,128
    1176:	e18d                	bnez	a1,1198 <putchar+0x54>
			return 0;
		}
	}

	// Simply seeking input.
	if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
    1178:	c319                	beqz	a4,117e <putchar+0x3a>
    117a:	ff4ff0ef          	jal	ra,96e <internal_handle_input.constprop.0>

	// Write out character.
	*DMDATA0 = 0x85 | ((const char)c<<8);
    117e:	6541                	lui	a0,0x10
    1180:	157d                	addi	a0,a0,-1
    1182:	00841793          	slli	a5,s0,0x8
    1186:	8fe9                	and	a5,a5,a0
    1188:	0857e793          	ori	a5,a5,133
    118c:	e0000737          	lui	a4,0xe0000
    1190:	0ef72a23          	sw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
	return 1;
    1194:	4505                	li	a0,1
    1196:	a801                	j	11a6 <putchar+0x62>
		if( timeout-- == 0 )
    1198:	17fd                	addi	a5,a5,-1
    119a:	fbe1                	bnez	a5,116a <putchar+0x26>
			*DMDATA0 |= 0xc0;
    119c:	421c                	lw	a5,0(a2)
    119e:	4501                	li	a0,0
    11a0:	0c07e793          	ori	a5,a5,192
    11a4:	c21c                	sw	a5,0(a2)
}
    11a6:	40a2                	lw	ra,8(sp)
    11a8:	4412                	lw	s0,4(sp)
    11aa:	0131                	addi	sp,sp,12
    11ac:	8082                	ret
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    11ae:	4501                	li	a0,0
}
    11b0:	8082                	ret

000011b2 <i2c_scan_callback>:
	if (i2c_ping(0x3C) != I2C_OK) return;
	ssd1306_print_str_at(str, line, 0);
}

void i2c_scan_callback(const uint8_t addr) {
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    11b2:	c525                	beqz	a0,121a <i2c_scan_callback+0x68>
    11b4:	07f00793          	li	a5,127
    11b8:	862a                	mv	a2,a0
    11ba:	06f50063          	beq	a0,a5,121a <i2c_scan_callback+0x68>
void i2c_scan_callback(const uint8_t addr) {
    11be:	1151                	addi	sp,sp,-12
    11c0:	c026                	sw	s1,0(sp)
	
	static int line = 1;
	sprintf(str_output, "I2C: 0x%02X", addr);
    11c2:	6589                	lui	a1,0x2
    11c4:	ff058593          	addi	a1,a1,-16 # 1ff0 <DMA1_Channel3_IRQHandler+0x92>
    11c8:	19c18513          	addi	a0,gp,412 # 20000598 <str_output>
void i2c_scan_callback(const uint8_t addr) {
    11cc:	c406                	sw	ra,8(sp)
    11ce:	c222                	sw	s0,4(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    11d0:	3bc9                	jal	fa2 <sprintf>
	printf("%s\n", str_output);
    11d2:	19c18513          	addi	a0,gp,412 # 20000598 <str_output>
    11d6:	3f3d                	jal	1114 <puts>
	modI2C_display(str_output, line++);
    11d8:	c2418793          	addi	a5,gp,-988 # 20000020 <line.7>
    11dc:	4380                	lw	s0,0(a5)
    11de:	00140713          	addi	a4,s0,1
    11e2:	c398                	sw	a4,0(a5)
	if (line != 7) { printf(str); printf("\n"); }
    11e4:	0ff47713          	andi	a4,s0,255
    11e8:	479d                	li	a5,7
    11ea:	00f70763          	beq	a4,a5,11f8 <i2c_scan_callback+0x46>
    11ee:	19c18513          	addi	a0,gp,412 # 20000598 <str_output>
    11f2:	3ba1                	jal	f4a <printf>
    11f4:	4529                	li	a0,10
    11f6:	37b9                	jal	1144 <putchar>
	if (i2c_ping(0x3C) != I2C_OK) return;
    11f8:	03c00513          	li	a0,60
    11fc:	aacff0ef          	jal	ra,4a8 <i2c_ping>
    1200:	e901                	bnez	a0,1210 <i2c_scan_callback+0x5e>
	ssd1306_print_str_at(str, line, 0);
    1202:	0ff47513          	andi	a0,s0,255
}
    1206:	4412                	lw	s0,4(sp)
    1208:	40a2                	lw	ra,8(sp)
    120a:	4482                	lw	s1,0(sp)
    120c:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    120e:	bd49                	j	10a0 <ssd1306_print_str_at.constprop.0>
}
    1210:	40a2                	lw	ra,8(sp)
    1212:	4412                	lw	s0,4(sp)
    1214:	4482                	lw	s1,0(sp)
    1216:	0131                	addi	sp,sp,12
    1218:	8082                	ret
    121a:	8082                	ret

0000121c <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    121c:	400227b7          	lui	a5,0x40022
    1220:	4705                	li	a4,1
    1222:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    1224:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1228:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    122c:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1230:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.bfb73fe7+0x10765da>
    1234:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#ifndef CH5xx
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    1236:	009f0737          	lui	a4,0x9f0
    123a:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH5xx)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    123c:	020006b7          	lui	a3,0x2000
    1240:	40021737          	lui	a4,0x40021
    1244:	431c                	lw	a5,0(a4)
    1246:	8ff5                	and	a5,a5,a3
    1248:	dff5                	beqz	a5,1244 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    124a:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    124c:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1250:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    1252:	0027e793          	ori	a5,a5,2
    1256:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1258:	4721                	li	a4,8
    125a:	42dc                	lw	a5,4(a3)
    125c:	8bb1                	andi	a5,a5,12
    125e:	fee79ee3          	bne	a5,a4,125a <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    1262:	e00007b7          	lui	a5,0xe0000
    1266:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    126a:	08000713          	li	a4,128
    126e:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    1272:	8082                	ret

00001274 <main>:

#include "ST7735/modTFT.h"
#include "Storage/modStorage.h"

int main()
{
    1274:	f7c10113          	addi	sp,sp,-132
    1278:	c106                	sw	ra,128(sp)
    127a:	dea2                	sw	s0,124(sp)
    127c:	dca6                	sw	s1,120(sp)
	uint32_t time_ref = 0;

	M_Encoder encoder_a = {0, 0, 0};
	M_Button button_a = {0xC0, BUTTON_IDLE, 0, 0, 0, 0, 0, 0};

	SystemInit();
    127e:	3f79                	jal	121c <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    1280:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1284:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    1286:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    128a:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.bfb73fe7+0x20d8>
    128e:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    1290:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    1294:	c8c18713          	addi	a4,gp,-884 # 20000088 <systick_millis>
    1298:	00072023          	sw	zero,0(a4)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    129c:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    129e:	6605                	lui	a2,0x1
    12a0:	00776713          	ori	a4,a4,7
    12a4:	c398                	sw	a4,0(a5)
    12a6:	e000e737          	lui	a4,0xe000e
    12aa:	10c72023          	sw	a2,256(a4) # e000e100 <_eusrstack+0xc000d900>
	uint32_t targend = SysTick->CNT + n;
    12ae:	4798                	lw	a4,8(a5)
    12b0:	004947b7          	lui	a5,0x494
    12b4:	e0078793          	addi	a5,a5,-512 # 493e00 <lib_i2c.c.bfb73fe7+0x48a359>
    12b8:	973e                	add	a4,a4,a5
    12ba:	c8c18793          	addi	a5,gp,-884 # 20000088 <systick_millis>
    12be:	de3e                	sw	a5,60(sp)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
    12c0:	e000f6b7          	lui	a3,0xe000f
    12c4:	469c                	lw	a5,8(a3)
    12c6:	8f99                	sub	a5,a5,a4
    12c8:	fe07cee3          	bltz	a5,12c4 <main+0x50>
*/


void modEncoder_setup(M_Encoder *model) {
	//! Enable GPIOC, TIM2, and AFIO *very important!*
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    12cc:	40021737          	lui	a4,0x40021
    12d0:	4f1c                	lw	a5,24(a4)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	// PD3 is T2CH1_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    12d2:	7645                	lui	a2,0xffff1
    12d4:	167d                	addi	a2,a2,-1
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    12d6:	0317e793          	ori	a5,a5,49
    12da:	cf1c                	sw	a5,24(a4)
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    12dc:	4f5c                	lw	a5,28(a4)
    12de:	0017e793          	ori	a5,a5,1
    12e2:	cf5c                	sw	a5,28(a4)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
    12e4:	400107b7          	lui	a5,0x40010
    12e8:	43d4                	lw	a3,4(a5)
    12ea:	c3d4                	sw	a3,4(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    12ec:	400117b7          	lui	a5,0x40011
    12f0:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    12f4:	4394                	lw	a3,0(a5)
    12f6:	8ef1                	and	a3,a3,a2
    12f8:	c394                	sw	a3,0(a5)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*3); 		//set new ones
    12fa:	4394                	lw	a3,0(a5)
    12fc:	6621                	lui	a2,0x8
    12fe:	8ed1                	or	a3,a3,a2
    1300:	c394                	sw	a3,0(a5)
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    1302:	47d4                	lw	a3,12(a5)

	// PD4 is T2CH2_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    1304:	fff10637          	lui	a2,0xfff10
    1308:	167d                	addi	a2,a2,-1
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    130a:	0046e693          	ori	a3,a3,4
    130e:	c7d4                	sw	a3,12(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    1310:	4394                	lw	a3,0(a5)
    1312:	8ef1                	and	a3,a3,a2
    1314:	c394                	sw	a3,0(a5)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*4); 		//set new ones
    1316:	4394                	lw	a3,0(a5)
    1318:	00080637          	lui	a2,0x80
    131c:	8ed1                	or	a3,a3,a2
    131e:	c394                	sw	a3,0(a5)
	GPIOD->OUTDR |= 1<<4;							//1 = pull-up, 0 = pull-down
    1320:	47d4                	lw	a3,12(a5)
    1322:	0106e693          	ori	a3,a3,16
    1326:	c7d4                	sw	a3,12(a5)
	// //# added
	// GPIOC->CFGLR &= ~(0xf<<(4*0));
	// GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*0);

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    1328:	4b1c                	lw	a5,16(a4)
    132a:	0017e793          	ori	a5,a5,1
    132e:	cb1c                	sw	a5,16(a4)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    1330:	4b1c                	lw	a5,16(a4)
    1332:	9bf9                	andi	a5,a5,-2
    1334:	cb1c                	sw	a5,16(a4)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
    1336:	400007b7          	lui	a5,0x40000
    133a:	0087d703          	lhu	a4,8(a5) # 40000008 <_eusrstack+0x1ffff808>
    133e:	0742                	slli	a4,a4,0x10
    1340:	8341                	srli	a4,a4,0x10
    1342:	00376713          	ori	a4,a4,3
    1346:	00e79423          	sh	a4,8(a5)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
    134a:	7765                	lui	a4,0xffff9
    134c:	177d                	addi	a4,a4,-1
    134e:	02e79223          	sh	a4,36(a5)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
    1352:	0147d703          	lhu	a4,20(a5)
    1356:	0742                	slli	a4,a4,0x10
    1358:	8341                	srli	a4,a4,0x10
    135a:	00176713          	ori	a4,a4,1
    135e:	00e79a23          	sh	a4,20(a5)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
    1362:	0007d703          	lhu	a4,0(a5)
    1366:	0742                	slli	a4,a4,0x10
    1368:	8341                	srli	a4,a4,0x10
    136a:	00176713          	ori	a4,a4,1
    136e:	00e79023          	sh	a4,0(a5)

	model->initial_count = TIM2->CNT;
    1372:	0247d703          	lhu	a4,36(a5)
	model->last_count = TIM2->CNT;
    1376:	0247d783          	lhu	a5,36(a5)
	if(dev->regb == 0) dev->regb = 1;
    137a:	c0418793          	addi	a5,gp,-1020 # 20000000 <dev_aht21>
    137e:	00a7c683          	lbu	a3,10(a5)
    1382:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_aht21>
    1386:	4785                	li	a5,1
    1388:	c681                	beqz	a3,1390 <main+0x11c>
	if(dev->regb  > 4) dev->regb = 4;
    138a:	4791                	li	a5,4
    138c:	00d7f463          	bgeu	a5,a3,1394 <main+0x120>
    1390:	00f70523          	sb	a5,10(a4) # ffff900a <_eusrstack+0xdfff880a>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1394:	400217b7          	lui	a5,0x40021
    1398:	4b90                	lw	a2,16(a5)
    139a:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    139e:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    13a2:	8e49                	or	a2,a2,a0
    13a4:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    13a6:	4b90                	lw	a2,16(a5)
    13a8:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    13aa:	6405                	lui	s0,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    13ac:	8e6d                	and	a2,a2,a1
    13ae:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    13b0:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    13b2:	fbc00637          	lui	a2,0xfbc00
    13b6:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    13b8:	8ec9                	or	a3,a3,a0
    13ba:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    13bc:	4f94                	lw	a3,24(a5)
    13be:	0116e693          	ori	a3,a3,17
    13c2:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    13c4:	400107b7          	lui	a5,0x40010
    13c8:	43d4                	lw	a3,4(a5)
    13ca:	8ef1                	and	a3,a3,a2
    13cc:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    13ce:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    13d0:	767d                	lui	a2,0xfffff
    13d2:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    13d6:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    13d8:	400117b7          	lui	a5,0x40011
    13dc:	4394                	lw	a3,0(a5)
    13de:	f0f6f693          	andi	a3,a3,-241
    13e2:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    13e4:	4394                	lw	a3,0(a5)
    13e6:	0d06e693          	ori	a3,a3,208
    13ea:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    13ec:	4394                	lw	a3,0(a5)
    13ee:	8ef1                	and	a3,a3,a2
    13f0:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    13f2:	4394                	lw	a3,0(a5)
    13f4:	d0040613          	addi	a2,s0,-768 # d00 <handle_reset+0x58>
    13f8:	8ed1                	or	a3,a3,a2
    13fa:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    13fc:	400056b7          	lui	a3,0x40005
    1400:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
    1404:	07c2                	slli	a5,a5,0x10
    1406:	83c1                	srli	a5,a5,0x10
    1408:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    140c:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    1410:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
    1414:	431c                	lw	a5,0(a4)
    1416:	6761                	lui	a4,0x18
    1418:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.bfb73fe7+0xebf9>
    141c:	00179593          	slli	a1,a5,0x1
    1420:	34f76463          	bltu	a4,a5,1768 <main+0x4f4>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    1424:	02dc7537          	lui	a0,0x2dc7
    1428:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bfb73fe7+0x2dbd159>
    142c:	c7dfe0ef          	jal	ra,a8 <__hidden___udivsi3>
    1430:	147d                	addi	s0,s0,-1
    1432:	8d61                	and	a0,a0,s0
    1434:	0542                	slli	a0,a0,0x10
    1436:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    1438:	40005737          	lui	a4,0x40005
    143c:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    1440:	40075783          	lhu	a5,1024(a4)
    1444:	07c2                	slli	a5,a5,0x10
    1446:	83c1                	srli	a5,a5,0x10
    1448:	0017e793          	ori	a5,a5,1
    144c:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    1450:	f5bfe0ef          	jal	ra,3aa <i2c_error>

void modI2C_setup() {
	if(i2c_init(&dev_aht21) != I2C_OK) {
    1454:	32050863          	beqz	a0,1784 <main+0x510>
		printf("Failed to init I2C\n");
    1458:	6509                	lui	a0,0x2
    145a:	ffc50513          	addi	a0,a0,-4 # 1ffc <DMA1_Channel3_IRQHandler+0x9e>
    145e:	395d                	jal	1114 <puts>
	ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1460:	4781                	li	a5,0
    1462:	4601                	li	a2,0
		uint32_t now = millis();

		// button_run(&button_a, button_onChanged);
		// modEncoder_task(now, &encoder_a, encoder_onChanged);

		if (now - sec_time > 2000) {
    1464:	7d000713          	li	a4,2000
		uint32_t now = millis();
    1468:	56f2                	lw	a3,60(sp)
    146a:	4294                	lw	a3,0(a3)
    146c:	c636                	sw	a3,12(sp)
		if (now - sec_time > 2000) {
    146e:	8e9d                	sub	a3,a3,a5
    1470:	fed77ce3          	bgeu	a4,a3,1468 <main+0x1f4>
			sec_time = now;

			modI2C_task2(counter++);
    1474:	00160793          	addi	a5,a2,1
    1478:	d83e                	sw	a5,48(sp)

	// SetupI2CSlave(0xFE, i2c_registers, sizeof(i2c_registers), onI2C_SlaveWrite, onI2C_SlaveRead, false);
}

void modI2C_task2(uint32_t counter) {
	sprintf(str_output, "counter %lu", counter);
    147a:	6589                	lui	a1,0x2
    147c:	05858593          	addi	a1,a1,88 # 2058 <DMA1_Channel3_IRQHandler+0xfa>
    1480:	19c18513          	addi	a0,gp,412 # 20000598 <str_output>
    1484:	3e39                	jal	fa2 <sprintf>
	if (i2c_ping(0x3C) != I2C_OK) return;
    1486:	03c00513          	li	a0,60
    148a:	81eff0ef          	jal	ra,4a8 <i2c_ping>
    148e:	e119                	bnez	a0,1494 <main+0x220>
	ssd1306_print_str_at(str, line, 0);
    1490:	451d                	li	a0,7
    1492:	3139                	jal	10a0 <ssd1306_print_str_at.constprop.0>
	// Increment the milliseconds count
	systick_millis++;
}

uint32_t get_runTime(void *handler(void)) {
	uint32_t now = micros();
    1494:	e000f7b7          	lui	a5,0xe000f
    1498:	4788                	lw	a0,8(a5)
    149a:	03000593          	li	a1,48
		p0.x = SSD1306_W_LIMIT - p0.x;
		area.w = SSD1306_W_LIMIT - area.w;
	}

	// Draw rectangle with optional fill
	Limit hLimit = { l0: p0.x, l1: x_end };
    149e:	6419                	lui	s0,0x6
    14a0:	c09fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    14a4:	da2a                	sw	a0,52(sp)
    14a6:	4495                	li	s1,5

void test_polys() {
    int y = 0;

    //! rectangles
    for (int8_t i = 0; i<4; i++) {
    14a8:	4781                	li	a5,0
	Limit hLimit = { l0: p0.x, l1: x_end };
    14aa:	35440413          	addi	s0,s0,852 # 6354 <ch32_mess.c.eabace0f+0x23f0>
		uint8_t should_fill = i > 1 ? 1 : 0;
		prefill_rect((M_Point){ 84, y }, (Area) { 15, 5 }, should_fill, 0);
    14ae:	ffb48513          	addi	a0,s1,-5
	Limit hLimit = { l0: p0.x, l1: x_end };
    14b2:	04811c23          	sh	s0,88(sp)
    if (fill) {
    14b6:	4705                	li	a4,1
    14b8:	0ff57513          	andi	a0,a0,255
    14bc:	3af75663          	bge	a4,a5,1868 <main+0x5f4>
			prefill_horLine(y_pos, hLimit, 1, 0);
    14c0:	45e6                	lw	a1,88(sp)
    14c2:	c23e                	sw	a5,4(sp)
    14c4:	c02a                	sw	a0,0(sp)
    14c6:	ad0ff0ef          	jal	ra,796 <prefill_horLine.constprop.0>
		for (uint8_t y_pos = p0.y; y_pos <= y_end; y_pos++) {
    14ca:	4502                	lw	a0,0(sp)
    14cc:	4792                	lw	a5,4(sp)
    14ce:	0505                	addi	a0,a0,1
    14d0:	0ff57513          	andi	a0,a0,255
    14d4:	fea4f6e3          	bgeu	s1,a0,14c0 <main+0x24c>
    for (int8_t i = 0; i<4; i++) {
    14d8:	0785                	addi	a5,a5,1
    14da:	049d                	addi	s1,s1,7
    14dc:	07e2                	slli	a5,a5,0x18
    14de:	0ff4f493          	andi	s1,s1,255
    14e2:	02100713          	li	a4,33
    14e6:	87e1                	srai	a5,a5,0x18
    14e8:	fce493e3          	bne	s1,a4,14ae <main+0x23a>
		y += 7;
	}

    //! zigzag
    M_Point zigzag[] = {
    14ec:	0f3217b7          	lui	a5,0xf321
    14f0:	83c78793          	addi	a5,a5,-1988 # f32083c <lib_i2c.c.bfb73fe7+0xf316d95>
    14f4:	ccbe                	sw	a5,88(sp)
    14f6:	004617b7          	lui	a5,0x461
    14fa:	85078793          	addi	a5,a5,-1968 # 460850 <lib_i2c.c.bfb73fe7+0x456da9>
    14fe:	cebe                	sw	a5,92(sp)
        (M_Point) { 70, 0 },
        (M_Point) { 70, 20 }
    };

    uint8_t pt_count = sizeof(zigzag)/sizeof(M_Point);
    prefill_solid_poly(zigzag, pt_count);
    1500:	08a0                	addi	s0,sp,88
    M_Point zigzag[] = {
    1502:	6785                	lui	a5,0x1
    1504:	44678793          	addi	a5,a5,1094 # 1446 <main+0x1d2>
    prefill_solid_poly(zigzag, pt_count);
    1508:	4595                	li	a1,5
    150a:	8522                	mv	a0,s0
    M_Point zigzag[] = {
    150c:	06f11023          	sh	a5,96(sp)
    prefill_solid_poly(zigzag, pt_count);
    1510:	d6eff0ef          	jal	ra,a7e <prefill_solid_poly>

    M_Point zigzag2[4];
    memcpy(zigzag2, zigzag, sizeof(zigzag));  // Fast copy
    1514:	4629                	li	a2,10
    1516:	85a2                	mv	a1,s0
    1518:	0088                	addi	a0,sp,64
    151a:	3cc1                	jal	fea <memcpy>

    for (int i = 0; i < sizeof(zigzag)/sizeof(M_Point); i++) {
    151c:	009c                	addi	a5,sp,64
    151e:	04a10693          	addi	a3,sp,74
        zigzag2[i].y += 24;  // Add 20 to each x-coordinate
    1522:	0017c703          	lbu	a4,1(a5)
    for (int i = 0; i < sizeof(zigzag)/sizeof(M_Point); i++) {
    1526:	0789                	addi	a5,a5,2
        zigzag2[i].y += 24;  // Add 20 to each x-coordinate
    1528:	0761                	addi	a4,a4,24
    152a:	fee78fa3          	sb	a4,-1(a5)
    for (int i = 0; i < sizeof(zigzag)/sizeof(M_Point); i++) {
    152e:	fef69ae3          	bne	a3,a5,1522 <main+0x2ae>
    }
    prefill_poly(zigzag2, pt_count, 1);
    1532:	4595                	li	a1,5
    1534:	0088                	addi	a0,sp,64
    1536:	938ff0ef          	jal	ra,66e <prefill_poly.part.0.constprop.0>


    // Concave polygon: Star (22px tall)
    M_Point star[] = {
    153a:	6589                	lui	a1,0x2
    153c:	4651                	li	a2,20
    153e:	fd858593          	addi	a1,a1,-40 # 1fd8 <DMA1_Channel3_IRQHandler+0x7a>
    1542:	10c8                	addi	a0,sp,100
    1544:	345d                	jal	fea <memcpy>
        {18 , 52}   // Bottom-right
    };

    //! star
    pt_count = sizeof(star)/sizeof(M_Point);
    prefill_solid_poly(star, pt_count);
    1546:	45a9                	li	a1,10
    1548:	10c8                	addi	a0,sp,100
    154a:	d34ff0ef          	jal	ra,a7e <prefill_solid_poly>

    // Shift star right by 25px
    for (int i = 0; i < sizeof(star)/sizeof(M_Point); i++) {
    154e:	10dc                	addi	a5,sp,100
        star[i].x += 25;  // Add 20 to each x-coordinate
    1550:	0007c703          	lbu	a4,0(a5)
    for (int i = 0; i < sizeof(star)/sizeof(M_Point); i++) {
    1554:	0789                	addi	a5,a5,2
        star[i].x += 25;  // Add 20 to each x-coordinate
    1556:	0765                	addi	a4,a4,25
    1558:	fee78f23          	sb	a4,-2(a5)
    for (int i = 0; i < sizeof(star)/sizeof(M_Point); i++) {
    155c:	18b8                	addi	a4,sp,120
    155e:	fef719e3          	bne	a4,a5,1550 <main+0x2dc>
    }
    prefill_poly(star, pt_count, 1);
    1562:	45a9                	li	a1,10
    1564:	10c8                	addi	a0,sp,100
    1566:	908ff0ef          	jal	ra,66e <prefill_poly.part.0.constprop.0>

    //! quad
    pt_count = sizeof(quad)/sizeof(M_Point);
    prefill_solid_poly(quad, pt_count);
    156a:	c2818493          	addi	s1,gp,-984 # 20000024 <quad_t.6>
    156e:	4591                	li	a1,4
    1570:	c2818513          	addi	a0,gp,-984 # 20000024 <quad_t.6>
    1574:	d0aff0ef          	jal	ra,a7e <prefill_solid_poly>

    // Shift quad right by 25px
    M_Point quad2[4];
    memcpy(quad2, quad, sizeof(quad));  // Fast copy
    1578:	409c                	lw	a5,0(s1)
    157a:	c4be                	sw	a5,72(sp)
    157c:	40dc                	lw	a5,4(s1)
    157e:	0884                	addi	s1,sp,80
    1580:	c6be                	sw	a5,76(sp)

    for (int i = 0; i < sizeof(quad)/sizeof(M_Point); i++) {
    1582:	00bc                	addi	a5,sp,72
    1584:	853e                	mv	a0,a5
        quad2[i].x += 25;  // Add 20 to each x-coordinate
    1586:	0007c703          	lbu	a4,0(a5)
    for (int i = 0; i < sizeof(quad)/sizeof(M_Point); i++) {
    158a:	0789                	addi	a5,a5,2
        quad2[i].x += 25;  // Add 20 to each x-coordinate
    158c:	0765                	addi	a4,a4,25
    158e:	fee78f23          	sb	a4,-2(a5)
    for (int i = 0; i < sizeof(quad)/sizeof(M_Point); i++) {
    1592:	fef49ae3          	bne	s1,a5,1586 <main+0x312>
    }
    prefill_poly(quad2, pt_count, 1);
    1596:	4591                	li	a1,4
    1598:	8d6ff0ef          	jal	ra,66e <prefill_poly.part.0.constprop.0>

    //! hourglass
    pt_count = sizeof(hourglass)/sizeof(M_Point);
    prefill_solid_poly(hourglass, pt_count);
    159c:	4591                	li	a1,4
    159e:	c1c18513          	addi	a0,gp,-996 # 20000018 <hourglass.5>
    15a2:	cdcff0ef          	jal	ra,a7e <prefill_solid_poly>

    // Shift hourglass right by 25px
    M_Point hourglass2[4];
    memcpy(hourglass2, hourglass, sizeof(hourglass));  // Fast copy
    15a6:	c1c18793          	addi	a5,gp,-996 # 20000018 <hourglass.5>
    15aa:	4398                	lw	a4,0(a5)
    15ac:	43dc                	lw	a5,4(a5)
    15ae:	c8ba                	sw	a4,80(sp)
    15b0:	cabe                	sw	a5,84(sp)

    for (int i = 0; i < sizeof(hourglass)/sizeof(M_Point); i++) {
    15b2:	87a6                	mv	a5,s1
        hourglass2[i].x += 25;  // Add 20 to each x-coordinate
    15b4:	0007c703          	lbu	a4,0(a5)
    for (int i = 0; i < sizeof(hourglass)/sizeof(M_Point); i++) {
    15b8:	0789                	addi	a5,a5,2
        hourglass2[i].x += 25;  // Add 20 to each x-coordinate
    15ba:	0765                	addi	a4,a4,25
    15bc:	fee78f23          	sb	a4,-2(a5)
    for (int i = 0; i < sizeof(hourglass)/sizeof(M_Point); i++) {
    15c0:	fef41ae3          	bne	s0,a5,15b4 <main+0x340>
    }
    prefill_poly(hourglass2, pt_count, 1);
    15c4:	4591                	li	a1,4
    15c6:	8526                	mv	a0,s1
    15c8:	8a6ff0ef          	jal	ra,66e <prefill_poly.part.0.constprop.0>


void test_circles() {
    int y = 0;

    for (int8_t i = 0; i<4; i++) {
    15cc:	47b1                	li	a5,12
    15ce:	c03e                	sw	a5,0(sp)
    15d0:	c402                	sw	zero,8(sp)
		uint8_t should_fill = i > 1 ? 1 : 0;
		prefill_circle((M_Point){ 110, y }, 5, should_fill);
    15d2:	4782                	lw	a5,0(sp)
    int16_t err = 2 - 2 * radius;
    15d4:	56e1                	li	a3,-8
    int16_t y = 0;
    15d6:	4701                	li	a4,0
    15d8:	ff478313          	addi	t1,a5,-12
    15dc:	0ff37313          	andi	t1,t1,255
    int16_t x = -radius;
    15e0:	57ed                	li	a5,-5
        uint8_t x_start 	= p0.x + x;
    15e2:	0ff7f413          	andi	s0,a5,255
    15e6:	06e40613          	addi	a2,s0,110
		if (fill) {
    15ea:	44a2                	lw	s1,8(sp)
        uint8_t x_start 	= p0.x + x;
    15ec:	0ff67613          	andi	a2,a2,255
        uint8_t y_top   	= p0.y - y;
    15f0:	0ff77513          	andi	a0,a4,255
        uint8_t x_end   	= p0.x - x;
    15f4:	06e00593          	li	a1,110
        uint8_t x_start 	= p0.x + x;
    15f8:	c232                	sw	a2,4(sp)
        uint8_t y_top   	= p0.y - y;
    15fa:	40a302b3          	sub	t0,t1,a0
        uint8_t x_end   	= p0.x - x;
    15fe:	40858633          	sub	a2,a1,s0
        uint8_t y_bottom 	= p0.y + y;
    1602:	006503b3          	add	t2,a0,t1
		if (fill) {
    1606:	4085                	li	ra,1
        uint8_t x_end   	= p0.x - x;
    1608:	0ff67613          	andi	a2,a2,255
        uint8_t y_top   	= p0.y - y;
    160c:	0ff2f293          	andi	t0,t0,255
        uint8_t y_bottom 	= p0.y + y;
    1610:	0ff3f393          	andi	t2,t2,255
		if (fill) {
    1614:	2890da63          	bge	ra,s1,18a8 <main+0x634>
            prefill_fastHorLine(y_top, x_start, x_end);     // Top half
    1618:	4592                	lw	a1,4(sp)
    161a:	8516                	mv	a0,t0
    161c:	d21a                	sw	t1,36(sp)
    161e:	d03a                	sw	a4,32(sp)
    1620:	ce36                	sw	a3,28(sp)
    1622:	ca3e                	sw	a5,20(sp)
    1624:	cc1e                	sw	t2,24(sp)
    1626:	c832                	sw	a2,16(sp)
    1628:	d27fe0ef          	jal	ra,34e <prefill_fastHorLine>
            prefill_fastHorLine(y_bottom, x_start, x_end);  // Bottom half
    162c:	43e2                	lw	t2,24(sp)
    162e:	4642                	lw	a2,16(sp)
    1630:	4592                	lw	a1,4(sp)
    1632:	851e                	mv	a0,t2
    1634:	d1bfe0ef          	jal	ra,34e <prefill_fastHorLine>
    1638:	47d2                	lw	a5,20(sp)
    163a:	46f2                	lw	a3,28(sp)
    163c:	5702                	lw	a4,32(sp)
    163e:	5312                	lw	t1,36(sp)
        if (e2 <= y) {
    1640:	2ed74663          	blt	a4,a3,192c <main+0x6b8>
            err += ++y * 2 + 1;
    1644:	0705                	addi	a4,a4,1
    1646:	0742                	slli	a4,a4,0x10
    1648:	8741                	srai	a4,a4,0x10
    164a:	00171613          	slli	a2,a4,0x1
    164e:	0605                	addi	a2,a2,1
    1650:	9636                	add	a2,a2,a3
    1652:	0642                	slli	a2,a2,0x10
            if (-x == y && e2 <= x) e2 = 0;
    1654:	40f005b3          	neg	a1,a5
            err += ++y * 2 + 1;
    1658:	8641                	srai	a2,a2,0x10
            if (-x == y && e2 <= x) e2 = 0;
    165a:	00b71563          	bne	a4,a1,1664 <main+0x3f0>
    165e:	00d7c563          	blt	a5,a3,1668 <main+0x3f4>
    1662:	4681                	li	a3,0
        if (e2 > x) err += ++x * 2 + 1;
    1664:	24d7d063          	bge	a5,a3,18a4 <main+0x630>
    1668:	0785                	addi	a5,a5,1
    166a:	07c2                	slli	a5,a5,0x10
    166c:	87c1                	srai	a5,a5,0x10
    166e:	00179693          	slli	a3,a5,0x1
    1672:	0685                	addi	a3,a3,1
    1674:	9636                	add	a2,a2,a3
    1676:	0642                	slli	a2,a2,0x10
    } while (x <= 0);
    1678:	4685                	li	a3,1
        if (e2 > x) err += ++x * 2 + 1;
    167a:	8641                	srai	a2,a2,0x10
    } while (x <= 0);
    167c:	22d79463          	bne	a5,a3,18a4 <main+0x630>

        if (i > 1) {
    1680:	4722                	lw	a4,8(sp)
    1682:	3ae7dd63          	bge	a5,a4,1a3c <main+0x7c8>
                M_Page_Mask mask_t = page_masks[y_top];
    1686:	11c18713          	addi	a4,gp,284 # 20000518 <page_masks>
        if (i > 1) {
    168a:	67c1                	lui	a5,0x10
                M_Page_Mask mask_t = page_masks[y_top];
    168c:	d43a                	sw	a4,40(sp)
        if (i > 1) {
    168e:	ff978593          	addi	a1,a5,-7 # fff9 <lib_i2c.c.bfb73fe7+0x6552>
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    1692:	cf018713          	addi	a4,gp,-784 # 200000ec <frame_buffer>
    for (uint8_t r = radius; r >= inner_r; r--) {
    1696:	17f1                	addi	a5,a5,-4
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    1698:	d63a                	sw	a4,44(sp)
    for (uint8_t r = radius; r >= inner_r; r--) {
    169a:	dc3e                	sw	a5,56(sp)
    169c:	00158713          	addi	a4,a1,1
    16a0:	0706                	slli	a4,a4,0x1
        int16_t x = -r;
    16a2:	01059293          	slli	t0,a1,0x10
    16a6:	0742                	slli	a4,a4,0x10
    16a8:	4102d293          	srai	t0,t0,0x10
    16ac:	8741                	srai	a4,a4,0x10
        int16_t y = 0;
    16ae:	4401                	li	s0,0
            int16_t x_start = p0.x + x;
    16b0:	01029513          	slli	a0,t0,0x10
    16b4:	8141                	srli	a0,a0,0x10
    16b6:	05a50793          	addi	a5,a0,90
    16ba:	01079693          	slli	a3,a5,0x10
    16be:	07c2                	slli	a5,a5,0x10
    16c0:	87c1                	srai	a5,a5,0x10
    16c2:	c83e                	sw	a5,16(sp)
            int16_t x_end   = p0.x - x;
    16c4:	05a00793          	li	a5,90
            int16_t x_start = p0.x + x;
    16c8:	82c1                	srli	a3,a3,0x10
            int16_t x_end   = p0.x - x;
    16ca:	8f89                	sub	a5,a5,a0
			int16_t x_left  = x_start - 1;
    16cc:	05950613          	addi	a2,a0,89
            int16_t x_start = p0.x + x;
    16d0:	c236                	sw	a3,4(sp)
            int16_t x_end   = p0.x - x;
    16d2:	01079693          	slli	a3,a5,0x10
    16d6:	07c2                	slli	a5,a5,0x10
    16d8:	87c1                	srai	a5,a5,0x10
			int16_t x_left  = x_start - 1;
    16da:	01061313          	slli	t1,a2,0x10
            int16_t x_end   = p0.x - x;
    16de:	82c1                	srli	a3,a3,0x10
			int16_t x_left  = x_start - 1;
    16e0:	01035313          	srli	t1,t1,0x10
            int16_t x_end   = p0.x - x;
    16e4:	cc3e                	sw	a5,24(sp)
            int16_t y_top    = p0.y - y;
    16e6:	4782                	lw	a5,0(sp)
            int16_t x_end   = p0.x - x;
    16e8:	ca36                	sw	a3,20(sp)
            int16_t y_top    = p0.y - y;
    16ea:	01041493          	slli	s1,s0,0x10
            int16_t y_bottom = p0.y + y;
    16ee:	4682                	lw	a3,0(sp)
			int16_t x_left  = x_start - 1;
    16f0:	ce1a                	sw	t1,28(sp)
            int16_t x_right = x_end + 1;
    16f2:	05b00313          	li	t1,91
            int16_t y_top    = p0.y - y;
    16f6:	80c1                	srli	s1,s1,0x10
            int16_t x_right = x_end + 1;
    16f8:	40a30333          	sub	t1,t1,a0
    16fc:	01031393          	slli	t2,t1,0x10
            int16_t y_top    = p0.y - y;
    1700:	8f85                	sub	a5,a5,s1
            int16_t x_right = x_end + 1;
    1702:	0342                	slli	t1,t1,0x10
    1704:	41035313          	srai	t1,t1,0x10
            int16_t y_top    = p0.y - y;
    1708:	07c2                	slli	a5,a5,0x10
            int16_t y_bottom = p0.y + y;
    170a:	96a6                	add	a3,a3,s1
            int16_t x_right = x_end + 1;
    170c:	0103d393          	srli	t2,t2,0x10
            int16_t y_bottom = p0.y + y;
    1710:	06c2                	slli	a3,a3,0x10
			int16_t x_left  = x_start - 1;
    1712:	0642                	slli	a2,a2,0x10
            int16_t x_right = x_end + 1;
    1714:	d21a                	sw	t1,36(sp)
            int16_t y_top    = p0.y - y;
    1716:	83c1                	srli	a5,a5,0x10
            int16_t x_right = x_end + 1;
    1718:	d01e                	sw	t2,32(sp)
            if (y_top >= 0 && y_top < SSD1306_H) {
    171a:	03f00313          	li	t1,63
            int16_t y_bottom = p0.y + y;
    171e:	82c1                	srli	a3,a3,0x10
			int16_t x_left  = x_start - 1;
    1720:	8641                	srai	a2,a2,0x10
            if (y_top >= 0 && y_top < SSD1306_H) {
    1722:	24f36763          	bltu	t1,a5,1970 <main+0x6fc>
                M_Page_Mask mask_t = page_masks[y_top];
    1726:	5322                	lw	t1,40(sp)
    1728:	0786                	slli	a5,a5,0x1
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    172a:	53b2                	lw	t2,44(sp)
                M_Page_Mask mask_t = page_masks[y_top];
    172c:	979a                	add	a5,a5,t1
    172e:	0017c303          	lbu	t1,1(a5)
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    1732:	0007c783          	lbu	a5,0(a5)
                if (x_left >= 0 && x_left < SSD1306_W) 		row_t[x_left]  |= mask_t.bitmask;
    1736:	40f2                	lw	ra,28(sp)
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    1738:	079e                	slli	a5,a5,0x7
    173a:	979e                	add	a5,a5,t2
                if (x_left >= 0 && x_left < SSD1306_W) 		row_t[x_left]  |= mask_t.bitmask;
    173c:	07f00393          	li	t2,127
    1740:	1e13ea63          	bltu	t2,ra,1934 <main+0x6c0>
    1744:	00c780b3          	add	ra,a5,a2
    1748:	0000c383          	lbu	t2,0(ra)
    174c:	007363b3          	or	t2,t1,t2
    1750:	00708023          	sb	t2,0(ra)
                if (x_start >= 0 && x_start < SSD1306_W) 	row_t[x_start] |= mask_t.bitmask;
    1754:	43c2                	lw	t2,16(sp)
    1756:	007780b3          	add	ra,a5,t2
    175a:	0000c383          	lbu	t2,0(ra)
    175e:	007363b3          	or	t2,t1,t2
    1762:	00708023          	sb	t2,0(ra)
    1766:	aad1                	j	193a <main+0x6c6>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    1768:	02dc7537          	lui	a0,0x2dc7
    176c:	95be                	add	a1,a1,a5
    176e:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bfb73fe7+0x2dbd159>
    1772:	937fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    1776:	147d                	addi	s0,s0,-1
    1778:	8d61                	and	a0,a0,s0
    177a:	0542                	slli	a0,a0,0x10
    177c:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    177e:	67a1                	lui	a5,0x8
    1780:	8d5d                	or	a0,a0,a5
    1782:	b95d                	j	1438 <main+0x1c4>
		printf("----Scanning I2C Bus for Devices---\n");
    1784:	6509                	lui	a0,0x2
    1786:	01050513          	addi	a0,a0,16 # 2010 <DMA1_Channel3_IRQHandler+0xb2>
    178a:	3269                	jal	1114 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    178c:	4401                	li	s0,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    178e:	8522                	mv	a0,s0
    1790:	d19fe0ef          	jal	ra,4a8 <i2c_ping>
    1794:	e119                	bnez	a0,179a <main+0x526>
    1796:	8522                	mv	a0,s0
    1798:	3c29                	jal	11b2 <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    179a:	0405                	addi	s0,s0,1
    179c:	0ff47413          	andi	s0,s0,255
    17a0:	07f00793          	li	a5,127
    17a4:	fef415e3          	bne	s0,a5,178e <main+0x51a>
		printf("----Done Scanning----\n\n");
    17a8:	6509                	lui	a0,0x2
    17aa:	03450513          	addi	a0,a0,52 # 2034 <DMA1_Channel3_IRQHandler+0xd6>
    17ae:	967ff0ef          	jal	ra,1114 <puts>
		if (i2c_ping(0x3C) == I2C_OK) {
    17b2:	03c00513          	li	a0,60
    17b6:	cf3fe0ef          	jal	ra,4a8 <i2c_ping>
    17ba:	ca0513e3          	bnez	a0,1460 <main+0x1ec>
    17be:	11c18713          	addi	a4,gp,284 # 20000518 <page_masks>
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    17c2:	4781                	li	a5,0
		page_masks[y].bitmask    = 1 << (y & 0x07);    // (y % 8)
    17c4:	4585                	li	a1,1
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    17c6:	04000613          	li	a2,64
		page_masks[y].page       = y >> 3;             // (y / 8)
    17ca:	0037d693          	srli	a3,a5,0x3
    17ce:	00d70023          	sb	a3,0(a4)
		page_masks[y].bitmask    = 1 << (y & 0x07);    // (y % 8)
    17d2:	0077f693          	andi	a3,a5,7
    17d6:	00d596b3          	sll	a3,a1,a3
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    17da:	0785                	addi	a5,a5,1
		page_masks[y].bitmask    = 1 << (y & 0x07);    // (y % 8)
    17dc:	00d700a3          	sb	a3,1(a4)
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    17e0:	0ff7f793          	andi	a5,a5,255
    17e4:	0709                	addi	a4,a4,2
    17e6:	fec792e3          	bne	a5,a2,17ca <main+0x556>
    17ea:	6489                	lui	s1,0x2
    17ec:	c8018423          	sb	zero,-888(gp) # 20000084 <ssd1306_buffer>
    17f0:	28448493          	addi	s1,s1,644 # 2284 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    17f4:	0004c503          	lbu	a0,0(s1)
    17f8:	0ff00793          	li	a5,255
    17fc:	02f51e63          	bne	a0,a5,1838 <main+0x5c4>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    1800:	02100513          	li	a0,33
    1804:	94eff0ef          	jal	ra,952 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    1808:	4501                	li	a0,0
    180a:	948ff0ef          	jal	ra,952 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    180e:	07f00513          	li	a0,127
    1812:	940ff0ef          	jal	ra,952 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    1816:	02200513          	li	a0,34
    181a:	938ff0ef          	jal	ra,952 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    181e:	4501                	li	a0,0
    1820:	932ff0ef          	jal	ra,952 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    1824:	451d                	li	a0,7
    1826:	92cff0ef          	jal	ra,952 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    182a:	02000593          	li	a1,32
    182e:	c8818513          	addi	a0,gp,-888 # 20000084 <ssd1306_buffer>
    1832:	fd4ff0ef          	jal	ra,1006 <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    1836:	a029                	j	1840 <main+0x5cc>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    1838:	0485                	addi	s1,s1,1
    183a:	918ff0ef          	jal	ra,952 <ssd1306_cmd>
    183e:	d95d                	beqz	a0,17f4 <main+0x580>
	memset(frame_buffer, 0, sizeof(frame_buffer));
    1840:	40000613          	li	a2,1024
    1844:	4581                	li	a1,0
    1846:	cf018513          	addi	a0,gp,-784 # 200000ec <frame_buffer>
    184a:	f7aff0ef          	jal	ra,fc4 <memset>
	ssd1306_renderFrame();
    184e:	fe4ff0ef          	jal	ra,1032 <ssd1306_renderFrame>
			sprintf(str_output, "Hello Bee!");
    1852:	6589                	lui	a1,0x2
    1854:	04c58593          	addi	a1,a1,76 # 204c <DMA1_Channel3_IRQHandler+0xee>
    1858:	19c18513          	addi	a0,gp,412 # 20000598 <str_output>
    185c:	f7aff0ef          	jal	ra,fd6 <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    1860:	4501                	li	a0,0
    1862:	83fff0ef          	jal	ra,10a0 <ssd1306_print_str_at.constprop.0>
    1866:	beed                	j	1460 <main+0x1ec>
        prefill_horLine(p0.y, hLimit, 1, 0);     	// Top edge
    1868:	45e6                	lw	a1,88(sp)
		Limit vLimit = { l0: p0.y + 1, l1: y_end - 1 };
    186a:	ffc48713          	addi	a4,s1,-4
    186e:	06e10223          	sb	a4,100(sp)
    1872:	fff48713          	addi	a4,s1,-1
    1876:	c03e                	sw	a5,0(sp)
    1878:	06e102a3          	sb	a4,101(sp)
        prefill_horLine(p0.y, hLimit, 1, 0);     	// Top edge
    187c:	f1bfe0ef          	jal	ra,796 <prefill_horLine.constprop.0>
        prefill_horLine(y_end, hLimit, 1, 0);    	// Bottom edge
    1880:	45e6                	lw	a1,88(sp)
    1882:	8526                	mv	a0,s1
    1884:	f13fe0ef          	jal	ra,796 <prefill_horLine.constprop.0>
        prefill_verLine(p0.x, vLimit, 1, 0); 		// Left edge
    1888:	5596                	lw	a1,100(sp)
    188a:	4605                	li	a2,1
    188c:	05400513          	li	a0,84
    1890:	e57fe0ef          	jal	ra,6e6 <prefill_verLine.constprop.0>
        prefill_verLine(x_end, vLimit, 1, 0); 		// Right edge
    1894:	5596                	lw	a1,100(sp)
    1896:	4605                	li	a2,1
    1898:	06300513          	li	a0,99
    189c:	e4bfe0ef          	jal	ra,6e6 <prefill_verLine.constprop.0>
    18a0:	4782                	lw	a5,0(sp)
    18a2:	b91d                	j	14d8 <main+0x264>
    for (int8_t i = 0; i<4; i++) {
    18a4:	86b2                	mv	a3,a2
    18a6:	bb35                	j	15e2 <main+0x36e>
			uint8_t xy_start 	= p0.x + y;
    18a8:	06e50093          	addi	ra,a0,110
			uint8_t xy_end   	= p0.x - y;
    18ac:	8d89                	sub	a1,a1,a0
    18ae:	d23e                	sw	a5,36(sp)
			uint8_t xy_start 	= p0.x + y;
    18b0:	0ff0f793          	andi	a5,ra,255
			prefill_pixel(x_end		, y_bottom); 	// Octant 1
    18b4:	8532                	mv	a0,a2
			uint8_t xy_start 	= p0.x + y;
    18b6:	c83e                	sw	a5,16(sp)
			uint8_t xy_end   	= p0.x - y;
    18b8:	0ff5f793          	andi	a5,a1,255
			prefill_pixel(x_end		, y_bottom); 	// Octant 1
    18bc:	859e                	mv	a1,t2
			uint8_t yx_start 	= p0.y + x;
    18be:	006404b3          	add	s1,s0,t1
    18c2:	dc3a                	sw	a4,56(sp)
			uint8_t yx_end   	= p0.y - x;
    18c4:	40830433          	sub	s0,t1,s0
    18c8:	d636                	sw	a3,44(sp)
			uint8_t xy_end   	= p0.x - y;
    18ca:	ca3e                	sw	a5,20(sp)
			uint8_t yx_end   	= p0.y - x;
    18cc:	d01a                	sw	t1,32(sp)
			prefill_pixel(x_end		, y_bottom); 	// Octant 1
    18ce:	ce32                	sw	a2,28(sp)
    18d0:	d416                	sw	t0,40(sp)
    18d2:	cc1e                	sw	t2,24(sp)
    18d4:	a3ffe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(x_start	, y_bottom); 	// Octant 2
    18d8:	43e2                	lw	t2,24(sp)
    18da:	4512                	lw	a0,4(sp)
			uint8_t yx_start 	= p0.y + x;
    18dc:	0ff4f493          	andi	s1,s1,255
			prefill_pixel(x_start	, y_bottom); 	// Octant 2
    18e0:	859e                	mv	a1,t2
    18e2:	a31fe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(x_start	, y_top); 		// Octant 3
    18e6:	52a2                	lw	t0,40(sp)
    18e8:	4512                	lw	a0,4(sp)
			uint8_t yx_end   	= p0.y - x;
    18ea:	0ff47413          	andi	s0,s0,255
			prefill_pixel(x_start	, y_top); 		// Octant 3
    18ee:	8596                	mv	a1,t0
    18f0:	cc16                	sw	t0,24(sp)
    18f2:	a21fe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(x_end		, y_top); 		// Octant 4
    18f6:	42e2                	lw	t0,24(sp)
    18f8:	4672                	lw	a2,28(sp)
    18fa:	8596                	mv	a1,t0
    18fc:	8532                	mv	a0,a2
    18fe:	a15fe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(xy_end	, yx_start); 	// Octant 5
    1902:	4552                	lw	a0,20(sp)
    1904:	85a6                	mv	a1,s1
    1906:	a0dfe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(xy_start	, yx_start); 	// Octant 6
    190a:	4542                	lw	a0,16(sp)
    190c:	85a6                	mv	a1,s1
    190e:	a05fe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(xy_start	, yx_end); 		// Octant 7
    1912:	4542                	lw	a0,16(sp)
    1914:	85a2                	mv	a1,s0
    1916:	9fdfe0ef          	jal	ra,312 <prefill_pixel>
			prefill_pixel(xy_end	, yx_end); 		// Octant 8
    191a:	4552                	lw	a0,20(sp)
    191c:	85a2                	mv	a1,s0
    191e:	9f5fe0ef          	jal	ra,312 <prefill_pixel>
    1922:	5762                	lw	a4,56(sp)
    1924:	56b2                	lw	a3,44(sp)
    1926:	5792                	lw	a5,36(sp)
    1928:	5302                	lw	t1,32(sp)
    192a:	bb19                	j	1640 <main+0x3cc>
        if (e2 <= y) {
    192c:	8636                	mv	a2,a3
    192e:	bb1d                	j	1664 <main+0x3f0>
        if (i > 1) {
    1930:	873e                	mv	a4,a5
    1932:	bbbd                	j	16b0 <main+0x43c>
                if (x_start >= 0 && x_start < SSD1306_W) 	row_t[x_start] |= mask_t.bitmask;
    1934:	4092                	lw	ra,4(sp)
    1936:	e013ffe3          	bgeu	t2,ra,1754 <main+0x4e0>
                if (x_end >= 0 && x_end < SSD1306_W) 		row_t[x_end]   |= mask_t.bitmask;
    193a:	40d2                	lw	ra,20(sp)
    193c:	07f00393          	li	t2,127
    1940:	0013eb63          	bltu	t2,ra,1956 <main+0x6e2>
    1944:	43e2                	lw	t2,24(sp)
    1946:	007780b3          	add	ra,a5,t2
    194a:	0000c383          	lbu	t2,0(ra)
    194e:	007363b3          	or	t2,t1,t2
    1952:	00708023          	sb	t2,0(ra)
                if (x_right >= 0 && x_right < SSD1306_W) 	row_t[x_right] |= mask_t.bitmask;
    1956:	5082                	lw	ra,32(sp)
    1958:	07f00393          	li	t2,127
    195c:	0013ea63          	bltu	t2,ra,1970 <main+0x6fc>
    1960:	5392                	lw	t2,36(sp)
    1962:	979e                	add	a5,a5,t2
    1964:	0007c383          	lbu	t2,0(a5) # 8000 <ch32_mess.c.eabace0f+0x409c>
    1968:	00736333          	or	t1,t1,t2
    196c:	00678023          	sb	t1,0(a5)
            if (y_bottom >= 0 && y_bottom < SSD1306_H) {
    1970:	03f00793          	li	a5,63
    1974:	08d7e063          	bltu	a5,a3,19f4 <main+0x780>
                M_Page_Mask mask_b = page_masks[y_bottom];
    1978:	57a2                	lw	a5,40(sp)
    197a:	0686                	slli	a3,a3,0x1
                if (x_left >= 0 && x_left < SSD1306_W) 		row_b[x_left]  |= mask_b.bitmask;
    197c:	43f2                	lw	t2,28(sp)
                M_Page_Mask mask_b = page_masks[y_bottom];
    197e:	96be                	add	a3,a3,a5
                uint8_t* row_b = frame_base + (mask_b.page * SSD1306_W);
    1980:	0006c783          	lbu	a5,0(a3)
                M_Page_Mask mask_b = page_masks[y_bottom];
    1984:	0016c303          	lbu	t1,1(a3)
                uint8_t* row_b = frame_base + (mask_b.page * SSD1306_W);
    1988:	56b2                	lw	a3,44(sp)
    198a:	079e                	slli	a5,a5,0x7
    198c:	97b6                	add	a5,a5,a3
                if (x_left >= 0 && x_left < SSD1306_W) 		row_b[x_left]  |= mask_b.bitmask;
    198e:	07f00693          	li	a3,127
    1992:	0276e363          	bltu	a3,t2,19b8 <main+0x744>
    1996:	963e                	add	a2,a2,a5
    1998:	00064683          	lbu	a3,0(a2)
    199c:	00d366b3          	or	a3,t1,a3
    19a0:	00d60023          	sb	a3,0(a2)
                if (x_start >= 0 && x_start < SSD1306_W) 	row_b[x_start] |= mask_b.bitmask;
    19a4:	46c2                	lw	a3,16(sp)
    19a6:	00d78633          	add	a2,a5,a3
    19aa:	00064683          	lbu	a3,0(a2)
    19ae:	00d366b3          	or	a3,t1,a3
    19b2:	00d60023          	sb	a3,0(a2)
    19b6:	a021                	j	19be <main+0x74a>
    19b8:	4612                	lw	a2,4(sp)
    19ba:	fec6f5e3          	bgeu	a3,a2,19a4 <main+0x730>
                if (x_end >= 0 && x_end < SSD1306_W) 		row_b[x_end]   |= mask_b.bitmask;
    19be:	4652                	lw	a2,20(sp)
    19c0:	07f00693          	li	a3,127
    19c4:	00c6eb63          	bltu	a3,a2,19da <main+0x766>
    19c8:	46e2                	lw	a3,24(sp)
    19ca:	00d78633          	add	a2,a5,a3
    19ce:	00064683          	lbu	a3,0(a2)
    19d2:	00d366b3          	or	a3,t1,a3
    19d6:	00d60023          	sb	a3,0(a2)
                if (x_right >= 0 && x_right < SSD1306_W) 	row_b[x_right] |= mask_b.bitmask;
    19da:	5602                	lw	a2,32(sp)
    19dc:	07f00693          	li	a3,127
    19e0:	00c6ea63          	bltu	a3,a2,19f4 <main+0x780>
    19e4:	5692                	lw	a3,36(sp)
    19e6:	97b6                	add	a5,a5,a3
    19e8:	0007c683          	lbu	a3,0(a5)
    19ec:	00d366b3          	or	a3,t1,a3
    19f0:	00d78023          	sb	a3,0(a5)
            if (e2 <= y) err += ++y * 2 + 1;  // y*2+1
    19f4:	87ba                	mv	a5,a4
    19f6:	00e44d63          	blt	s0,a4,1a10 <main+0x79c>
    19fa:	00148793          	addi	a5,s1,1
    19fe:	01079413          	slli	s0,a5,0x10
    1a02:	8441                	srai	s0,s0,0x10
    1a04:	00141793          	slli	a5,s0,0x1
    1a08:	0785                	addi	a5,a5,1
    1a0a:	97ba                	add	a5,a5,a4
    1a0c:	07c2                	slli	a5,a5,0x10
    1a0e:	87c1                	srai	a5,a5,0x10
            if (e2 > x)  err += ++x * 2 + 1;  // x*2+1
    1a10:	f2e2d0e3          	bge	t0,a4,1930 <main+0x6bc>
    1a14:	0505                	addi	a0,a0,1
    1a16:	01051293          	slli	t0,a0,0x10
    1a1a:	4102d293          	srai	t0,t0,0x10
    1a1e:	00129713          	slli	a4,t0,0x1
    1a22:	0705                	addi	a4,a4,1
    1a24:	97ba                	add	a5,a5,a4
    1a26:	07c2                	slli	a5,a5,0x10
        } while (x <= 0);
    1a28:	4705                	li	a4,1
            if (e2 > x)  err += ++x * 2 + 1;  // x*2+1
    1a2a:	87c1                	srai	a5,a5,0x10
        } while (x <= 0);
    1a2c:	f0e292e3          	bne	t0,a4,1930 <main+0x6bc>
    for (uint8_t r = radius; r >= inner_r; r--) {
    1a30:	0585                	addi	a1,a1,1
    1a32:	57e2                	lw	a5,56(sp)
    1a34:	05c2                	slli	a1,a1,0x10
    1a36:	81c1                	srli	a1,a1,0x10
    1a38:	c6f592e3          	bne	a1,a5,169c <main+0x428>
    for (int8_t i = 0; i<4; i++) {
    1a3c:	47a2                	lw	a5,8(sp)
    1a3e:	0785                	addi	a5,a5,1
    1a40:	07e2                	slli	a5,a5,0x18
    1a42:	87e1                	srai	a5,a5,0x18
    1a44:	c43e                	sw	a5,8(sp)
    1a46:	4782                	lw	a5,0(sp)
    1a48:	07b9                	addi	a5,a5,14
    1a4a:	07c2                	slli	a5,a5,0x10
    1a4c:	83c1                	srli	a5,a5,0x10
    1a4e:	c03e                	sw	a5,0(sp)
    1a50:	4702                	lw	a4,0(sp)
    1a52:	04400793          	li	a5,68
    1a56:	b6f71ee3          	bne	a4,a5,15d2 <main+0x35e>
    1a5a:	4401                	li	s0,0
		Limit limit = { l0: 0, l1: myvalues[i] };
    1a5c:	6489                	lui	s1,0x2
	for(int8_t i = 0; i<sizeof(myvalues); i++) {
    1a5e:	00241513          	slli	a0,s0,0x2
    1a62:	47c1                	li	a5,16
    1a64:	0ff57513          	andi	a0,a0,255
    1a68:	08f41663          	bne	s0,a5,1af4 <main+0x880>
    1a6c:	04000413          	li	s0,64
    1a70:	0ff47793          	andi	a5,s0,255
		M_Point point_a0 = { x: x, y: 0 };
    1a74:	00179713          	slli	a4,a5,0x1
    1a78:	f8070713          	addi	a4,a4,-128
    1a7c:	04e10423          	sb	a4,72(sp)
		M_Point point_a1 = { x: SSD1306_W, y: y };
    1a80:	f8000713          	li	a4,-128
    1a84:	04e10823          	sb	a4,80(sp)
    1a88:	04f108a3          	sb	a5,81(sp)
		M_Point point_a0 = { x: x, y: 0 };
    1a8c:	040104a3          	sb	zero,73(sp)
		M_Point point_b0 = { x: SSD1306_W-x, y: SSD1306_H };
    1a90:	40f00733          	neg	a4,a5
		prefill_line(point_a0, point_a1, 1);
    1a94:	45c6                	lw	a1,80(sp)
    1a96:	4526                	lw	a0,72(sp)
		M_Point point_b0 = { x: SSD1306_W-x, y: SSD1306_H };
    1a98:	0706                	slli	a4,a4,0x1
    1a9a:	04e10c23          	sb	a4,88(sp)
    1a9e:	04000713          	li	a4,64
		M_Point point_b1 = { x: 0, y: SSD1306_H-y };
    1aa2:	40f707b3          	sub	a5,a4,a5
    1aa6:	06f102a3          	sb	a5,101(sp)
		M_Point point_b0 = { x: SSD1306_W-x, y: SSD1306_H };
    1aaa:	04e10ca3          	sb	a4,89(sp)
		M_Point point_b1 = { x: 0, y: SSD1306_H-y };
    1aae:	06010223          	sb	zero,100(sp)
		prefill_line(point_a0, point_a1, 1);
    1ab2:	a8ffe0ef          	jal	ra,540 <prefill_line.constprop.0>
		prefill_line(point_b0, point_b1, 1);
    1ab6:	5596                	lw	a1,100(sp)
    1ab8:	4566                	lw	a0,88(sp)
		y+= SSD1306_H/8;
    1aba:	0421                	addi	s0,s0,8
		prefill_line(point_b0, point_b1, 1);
    1abc:	a85fe0ef          	jal	ra,540 <prefill_line.constprop.0>
    for(uint8_t x=0;x<SSD1306_W;x+=16) {
    1ac0:	08000793          	li	a5,128
    1ac4:	faf416e3          	bne	s0,a5,1a70 <main+0x7fc>
	// ssd1306_print_str_at("testing 55554fdafadfafa", 4, 0);
	// ssd1306_print_str_at("testing 66664fdafadfafa", 5, 0);
	// ssd1306_print_str_at("testing 77774fdafadfafa", 6, 0);
	// ssd1306_print_str_at("testing 88884fdafadfafa", 7, 0);

	ssd1306_renderFrame();
    1ac8:	d6aff0ef          	jal	ra,1032 <ssd1306_renderFrame>
	handler();
	return micros() - now;
    1acc:	e000f7b7          	lui	a5,0xe000f
    1ad0:	4788                	lw	a0,8(a5)
    1ad2:	03000593          	li	a1,48
    1ad6:	dd2fe0ef          	jal	ra,a8 <__hidden___udivsi3>

			// // modJoystick_task();
			// // dma_uart_tx(message, sizeof(message) - 1);

			uint32_t runtime_i2c = get_runTime(ssd1306_draw_test);
			sprintf(str_output, "I2C runtime: %lu us", runtime_i2c);
    1ada:	57d2                	lw	a5,52(sp)
    1adc:	6589                	lui	a1,0x2
    1ade:	06458593          	addi	a1,a1,100 # 2064 <DMA1_Channel3_IRQHandler+0x106>
    1ae2:	40f50633          	sub	a2,a0,a5
    1ae6:	19c18513          	addi	a0,gp,412 # 20000598 <str_output>
    1aea:	cb8ff0ef          	jal	ra,fa2 <sprintf>
		uint32_t now = millis();
    1aee:	47b2                	lw	a5,12(sp)
			modI2C_task2(counter++);
    1af0:	5642                	lw	a2,48(sp)
    1af2:	ba8d                	j	1464 <main+0x1f0>
		Limit limit = { l0: 0, l1: myvalues[i] };
    1af4:	27448793          	addi	a5,s1,628 # 2274 <myvalues>
    1af8:	97a2                	add	a5,a5,s0
    1afa:	0007c783          	lbu	a5,0(a5) # e000f000 <_eusrstack+0xc000e800>
    1afe:	06010223          	sb	zero,100(sp)
		prefill_verLine(y, limit, 3, 0);
    1b02:	460d                	li	a2,3
		Limit limit = { l0: 0, l1: myvalues[i] };
    1b04:	06f102a3          	sb	a5,101(sp)
		prefill_verLine(y, limit, 3, 0);
    1b08:	5596                	lw	a1,100(sp)
    1b0a:	0405                	addi	s0,s0,1
    1b0c:	bdbfe0ef          	jal	ra,6e6 <prefill_verLine.constprop.0>
	for(int8_t i = 0; i<sizeof(myvalues); i++) {
    1b10:	b7b9                	j	1a5e <main+0x7ea>

00001b12 <SysTick_Handler>:
{
    1b12:	1151                	addi	sp,sp,-12
    1b14:	c03e                	sw	a5,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1b16:	e000f7b7          	lui	a5,0xe000f
{
    1b1a:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1b1c:	4b98                	lw	a4,16(a5)
{
    1b1e:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1b20:	66b1                	lui	a3,0xc
    1b22:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.bfb73fe7+0x20d9>
    1b26:	9736                	add	a4,a4,a3
    1b28:	cb98                	sw	a4,16(a5)
	SysTick->SR = 0x00000000;
    1b2a:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>
	systick_millis++;
    1b2e:	c8c18793          	addi	a5,gp,-884 # 20000088 <systick_millis>
    1b32:	4398                	lw	a4,0(a5)
}
    1b34:	46a2                	lw	a3,8(sp)
	systick_millis++;
    1b36:	0705                	addi	a4,a4,1
    1b38:	c398                	sw	a4,0(a5)
}
    1b3a:	4712                	lw	a4,4(sp)
    1b3c:	4782                	lw	a5,0(sp)
    1b3e:	0131                	addi	sp,sp,12
    1b40:	30200073          	mret

00001b44 <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    1b44:	7179                	addi	sp,sp,-48
    1b46:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    1b48:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    1b4c:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    1b4e:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    1b52:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    1b56:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    1b5a:	cc26                	sw	s1,24(sp)
    1b5c:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    1b5e:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    1b62:	d416                	sw	t0,40(sp)
    1b64:	d21a                	sw	t1,36(sp)
    1b66:	d01e                	sw	t2,32(sp)
    1b68:	ce22                	sw	s0,28(sp)
    1b6a:	ca2a                	sw	a0,20(sp)
    1b6c:	c82e                	sw	a1,16(sp)
    1b6e:	c632                	sw	a2,12(sp)
    1b70:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    1b72:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    1b74:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    1b76:	c305                	beqz	a4,1b96 <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    1b78:	0f018713          	addi	a4,gp,240 # 200004ec <i2c_slave_state>
    1b7c:	4685                	li	a3,1
    1b7e:	07c2                	slli	a5,a5,0x10
    1b80:	83c1                	srli	a5,a5,0x10
    1b82:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1b86:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1b8a:	839d                	srli	a5,a5,0x7
    1b8c:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1b8e:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1b92:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    1b96:	0404f793          	andi	a5,s1,64
    1b9a:	c795                	beqz	a5,1bc6 <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    1b9c:	0f018793          	addi	a5,gp,240 # 200004ec <i2c_slave_state>
    1ba0:	0007c703          	lbu	a4,0(a5)
    1ba4:	c379                	beqz	a4,1c6a <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
    1ba6:	40005737          	lui	a4,0x40005
    1baa:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    1bae:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    1bb2:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    1bb6:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    1bba:	0ff77713          	andi	a4,a4,255
    1bbe:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    1bc2:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    1bc6:	0804f793          	andi	a5,s1,128
    1bca:	c7a1                	beqz	a5,1c12 <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    1bcc:	0f018793          	addi	a5,gp,240 # 200004ec <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    1bd0:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1bd4:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    1bd8:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    1bdc:	400057b7          	lui	a5,0x40005
    1be0:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    1be4:	0f018413          	addi	s0,gp,240 # 200004ec <i2c_slave_state>
    1be8:	cb79                	beqz	a4,1cbe <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1bea:	01044703          	lbu	a4,16(s0)
    1bee:	0ee57663          	bgeu	a0,a4,1cda <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    1bf2:	4458                	lw	a4,12(s0)
    1bf4:	972a                	add	a4,a4,a0
    1bf6:	00074703          	lbu	a4,0(a4)
    1bfa:	0ff77713          	andi	a4,a4,255
    1bfe:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    1c02:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    1c04:	c391                	beqz	a5,1c08 <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    1c06:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    1c08:	00244783          	lbu	a5,2(s0)
    1c0c:	0785                	addi	a5,a5,1
    1c0e:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    1c12:	88c1                	andi	s1,s1,16
    1c14:	cc85                	beqz	s1,1c4c <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    1c16:	40005737          	lui	a4,0x40005
    1c1a:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    1c1e:	07c2                	slli	a5,a5,0x10
    1c20:	83c1                	srli	a5,a5,0x10
    1c22:	dff7f793          	andi	a5,a5,-513
    1c26:	07c2                	slli	a5,a5,0x10
    1c28:	83c1                	srli	a5,a5,0x10
    1c2a:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
    1c2e:	0f018793          	addi	a5,gp,240 # 200004ec <i2c_slave_state>
    1c32:	02a7c703          	lbu	a4,42(a5)
    1c36:	c74d                	beqz	a4,1ce0 <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
    1c38:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    1c3a:	cb09                	beqz	a4,1c4c <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    1c3c:	0017c503          	lbu	a0,1(a5)
    1c40:	0027c583          	lbu	a1,2(a5)
    1c44:	8d89                	sub	a1,a1,a0
    1c46:	0ff5f593          	andi	a1,a1,255
    1c4a:	9702                	jalr	a4
            }
        }
    }
}
    1c4c:	4472                	lw	s0,28(sp)
    1c4e:	50b2                	lw	ra,44(sp)
    1c50:	52a2                	lw	t0,40(sp)
    1c52:	5312                	lw	t1,36(sp)
    1c54:	5382                	lw	t2,32(sp)
    1c56:	44e2                	lw	s1,24(sp)
    1c58:	4552                	lw	a0,20(sp)
    1c5a:	45c2                	lw	a1,16(sp)
    1c5c:	4632                	lw	a2,12(sp)
    1c5e:	46a2                	lw	a3,8(sp)
    1c60:	4712                	lw	a4,4(sp)
    1c62:	4782                	lw	a5,0(sp)
    1c64:	6145                	addi	sp,sp,48
    1c66:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    1c6a:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    1c6e:	4705                	li	a4,1
    1c70:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    1c74:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    1c78:	c695                	beqz	a3,1ca4 <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    1c7a:	0107c683          	lbu	a3,16(a5)
    1c7e:	f4d774e3          	bgeu	a4,a3,1bc6 <I2C1_EV_IRQHandler+0x82>
    1c82:	0287c683          	lbu	a3,40(a5)
    1c86:	f2a1                	bnez	a3,1bc6 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    1c88:	400056b7          	lui	a3,0x40005
    1c8c:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1c90:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    1c92:	96ba                	add	a3,a3,a4
    1c94:	0ff67613          	andi	a2,a2,255
    1c98:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    1c9c:	0705                	addi	a4,a4,1
    1c9e:	00e78123          	sb	a4,2(a5)
    1ca2:	b715                	j	1bc6 <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    1ca4:	0087c683          	lbu	a3,8(a5)
    1ca8:	f0d77fe3          	bgeu	a4,a3,1bc6 <I2C1_EV_IRQHandler+0x82>
    1cac:	01c7c683          	lbu	a3,28(a5)
    1cb0:	fa99                	bnez	a3,1bc6 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    1cb2:	400056b7          	lui	a3,0x40005
    1cb6:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1cba:	43d4                	lw	a3,4(a5)
    1cbc:	bfd9                	j	1c92 <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    1cbe:	00844703          	lbu	a4,8(s0)
    1cc2:	00e57c63          	bgeu	a0,a4,1cda <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    1cc6:	4058                	lw	a4,4(s0)
    1cc8:	972a                	add	a4,a4,a0
    1cca:	00074703          	lbu	a4,0(a4)
    1cce:	0ff77713          	andi	a4,a4,255
    1cd2:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    1cd6:	4c1c                	lw	a5,24(s0)
    1cd8:	b735                	j	1c04 <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    1cda:	00079823          	sh	zero,16(a5)
    1cde:	bf15                	j	1c12 <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    1ce0:	4bd8                	lw	a4,20(a5)
    1ce2:	bfa1                	j	1c3a <I2C1_EV_IRQHandler+0xf6>

00001ce4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    1ce4:	1151                	addi	sp,sp,-12
    1ce6:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1ce8:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
    1cec:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1cee:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    1cf2:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1cf4:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1cf8:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
    1cfc:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1cfe:	cf89                	beqz	a5,1d18 <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    1d00:	41475783          	lhu	a5,1044(a4)
    1d04:	40070713          	addi	a4,a4,1024
    1d08:	07c2                	slli	a5,a5,0x10
    1d0a:	83c1                	srli	a5,a5,0x10
    1d0c:	eff7f793          	andi	a5,a5,-257
    1d10:	07c2                	slli	a5,a5,0x10
    1d12:	83c1                	srli	a5,a5,0x10
    1d14:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    1d18:	2006f793          	andi	a5,a3,512
    1d1c:	cf89                	beqz	a5,1d36 <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    1d1e:	40005737          	lui	a4,0x40005
    1d22:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    1d26:	07c2                	slli	a5,a5,0x10
    1d28:	83c1                	srli	a5,a5,0x10
    1d2a:	dff7f793          	andi	a5,a5,-513
    1d2e:	07c2                	slli	a5,a5,0x10
    1d30:	83c1                	srli	a5,a5,0x10
    1d32:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    1d36:	4006f693          	andi	a3,a3,1024
    1d3a:	ce89                	beqz	a3,1d54 <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    1d3c:	40005737          	lui	a4,0x40005
    1d40:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    1d44:	07c2                	slli	a5,a5,0x10
    1d46:	83c1                	srli	a5,a5,0x10
    1d48:	bff7f793          	andi	a5,a5,-1025
    1d4c:	07c2                	slli	a5,a5,0x10
    1d4e:	83c1                	srli	a5,a5,0x10
    1d50:	40f71a23          	sh	a5,1044(a4)
    }
}
    1d54:	46a2                	lw	a3,8(sp)
    1d56:	4712                	lw	a4,4(sp)
    1d58:	4782                	lw	a5,0(sp)
    1d5a:	0131                	addi	sp,sp,12
    1d5c:	30200073          	mret

00001d60 <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    1d60:	fdc10113          	addi	sp,sp,-36
    1d64:	ce22                	sw	s0,28(sp)
    1d66:	d006                	sw	ra,32(sp)
    1d68:	cc26                	sw	s1,24(sp)
    1d6a:	842a                	mv	s0,a0
	if( tween <= 0 ) return hexa;
    1d6c:	0ac05f63          	blez	a2,1e2a <TweenHexColors+0xca>
	if( tween >= 255 ) return hexb;
    1d70:	0fe00793          	li	a5,254
    1d74:	84ae                	mv	s1,a1
    1d76:	0cc7c163          	blt	a5,a2,1e38 <TweenHexColors+0xd8>
	int32_t aamt = 255-tween;
    1d7a:	0ff00293          	li	t0,255
    1d7e:	40c282b3          	sub	t0,t0,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1d82:	8596                	mv	a1,t0
    1d84:	0ff57513          	andi	a0,a0,255
    1d88:	c216                	sw	t0,4(sp)
	int32_t aamt = 255-tween;
    1d8a:	c032                	sw	a2,0(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1d8c:	1fffe097          	auipc	ra,0x1fffe
    1d90:	2a4080e7          	jalr	676(ra) # 20000030 <FastMultiply>
    1d94:	4602                	lw	a2,0(sp)
    1d96:	ca2a                	sw	a0,20(sp)
    1d98:	0ff4f513          	andi	a0,s1,255
    1d9c:	85b2                	mv	a1,a2
    1d9e:	1fffe097          	auipc	ra,0x1fffe
    1da2:	292080e7          	jalr	658(ra) # 20000030 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1da6:	4292                	lw	t0,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1da8:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    1daa:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1dae:	8596                	mv	a1,t0
    1db0:	0ff57513          	andi	a0,a0,255
    1db4:	c616                	sw	t0,12(sp)
    1db6:	1fffe097          	auipc	ra,0x1fffe
    1dba:	27a080e7          	jalr	634(ra) # 20000030 <FastMultiply>
    1dbe:	4602                	lw	a2,0(sp)
    1dc0:	c42a                	sw	a0,8(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    1dc2:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1dc6:	85b2                	mv	a1,a2
    1dc8:	0ff57513          	andi	a0,a0,255
    1dcc:	c232                	sw	a2,4(sp)
    1dce:	1fffe097          	auipc	ra,0x1fffe
    1dd2:	262080e7          	jalr	610(ra) # 20000030 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1dd6:	42b2                	lw	t0,12(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1dd8:	c02a                	sw	a0,0(sp)
	int32_t hag = (hexa>>16) & 0xff;
    1dda:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1dde:	8596                	mv	a1,t0
    1de0:	0ff57513          	andi	a0,a0,255
    1de4:	1fffe097          	auipc	ra,0x1fffe
    1de8:	24c080e7          	jalr	588(ra) # 20000030 <FastMultiply>
    1dec:	4612                	lw	a2,4(sp)
    1dee:	842a                	mv	s0,a0
	int32_t hbg = (hexb>>16) & 0xff;
    1df0:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1df4:	85b2                	mv	a1,a2
    1df6:	0ff57513          	andi	a0,a0,255
    1dfa:	1fffe097          	auipc	ra,0x1fffe
    1dfe:	236080e7          	jalr	566(ra) # 20000030 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e02:	4342                	lw	t1,16(sp)
    1e04:	47d2                	lw	a5,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e06:	4682                	lw	a3,0(sp)
    1e08:	4722                	lw	a4,8(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e0a:	979a                	add	a5,a5,t1
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e0c:	942a                	add	s0,s0,a0
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e0e:	9736                	add	a4,a4,a3
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e10:	08078793          	addi	a5,a5,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e14:	08070713          	addi	a4,a4,128
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e18:	08040413          	addi	s0,s0,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e1c:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    1e1e:	f0077713          	andi	a4,a4,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e22:	8021                	srli	s0,s0,0x8
	return b | (r<<8) | (g<<16);
    1e24:	8fd9                	or	a5,a5,a4
    1e26:	0442                	slli	s0,s0,0x10
    1e28:	8c5d                	or	s0,s0,a5
}
    1e2a:	5082                	lw	ra,32(sp)
    1e2c:	8522                	mv	a0,s0
    1e2e:	4472                	lw	s0,28(sp)
    1e30:	44e2                	lw	s1,24(sp)
    1e32:	02410113          	addi	sp,sp,36
    1e36:	8082                	ret
	if( tween >= 255 ) return hexb;
    1e38:	842e                	mv	s0,a1
    1e3a:	bfc5                	j	1e2a <TweenHexColors+0xca>

00001e3c <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1e3c:	1111                	addi	sp,sp,-28
    1e3e:	c826                	sw	s1,16(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    1e40:	c801a483          	lw	s1,-896(gp) # 2000007c <WS2812LEDs>
	int place = WS2812LEDPlace;
    1e44:	c7c18713          	addi	a4,gp,-900 # 20000078 <WS2812LEDPlace>
    1e48:	4318                	lw	a4,0(a4)
    1e4a:	c7c18613          	addi	a2,gp,-900 # 20000078 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1e4e:	ca22                	sw	s0,20(sp)
    1e50:	cc06                	sw	ra,24(sp)
    1e52:	87aa                	mv	a5,a0
    1e54:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
    1e56:	03050693          	addi	a3,a0,48
    1e5a:	c032                	sw	a2,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    1e5c:	04074a63          	bltz	a4,1eb0 <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    1e60:	04f68a63          	beq	a3,a5,1eb4 <WS2812FillBuffSec.constprop.0+0x78>
	{
		if( place >= ledcount )
    1e64:	04974f63          	blt	a4,s1,1ec2 <WS2812FillBuffSec.constprop.0+0x86>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    1e68:	40f68633          	sub	a2,a3,a5
    1e6c:	4581                	li	a1,0
    1e6e:	853e                	mv	a0,a5
    1e70:	c23a                	sw	a4,4(sp)
    1e72:	952ff0ef          	jal	ra,fc4 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    1e76:	4712                	lw	a4,4(sp)
    1e78:	cc15                	beqz	s0,1eb4 <WS2812FillBuffSec.constprop.0+0x78>
			{
				if( place == ledcount )
    1e7a:	00e49a63          	bne	s1,a4,1e8e <WS2812FillBuffSec.constprop.0+0x52>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    1e7e:	400206b7          	lui	a3,0x40020
    1e82:	5a9c                	lw	a5,48(a3)
    1e84:	fdf7f793          	andi	a5,a5,-33
    1e88:	da9c                	sw	a5,48(a3)
					WS2812BLEDInUse = 0;
    1e8a:	c601ac23          	sw	zero,-904(gp) # 20000074 <WS2812BLEDInUse>
				}
				place++;
    1e8e:	0705                	addi	a4,a4,1
    1e90:	a015                	j	1eb4 <WS2812FillBuffSec.constprop.0+0x78>
		(*ptr++) = 0;
    1e92:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
    1e96:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    1e9a:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    1e9e:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    1ea2:	00079423          	sh	zero,8(a5)
		place++;
    1ea6:	0705                	addi	a4,a4,1
    1ea8:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
    1eaa:	fe079f23          	sh	zero,-2(a5)
    1eae:	b77d                	j	1e5c <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
    1eb0:	fef691e3          	bne	a3,a5,1e92 <WS2812FillBuffSec.constprop.0+0x56>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
    1eb4:	4782                	lw	a5,0(sp)
}
    1eb6:	40e2                	lw	ra,24(sp)
    1eb8:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
    1eba:	c398                	sw	a4,0(a5)
}
    1ebc:	44c2                	lw	s1,16(sp)
    1ebe:	0171                	addi	sp,sp,28
    1ec0:	8082                	ret
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    1ec2:	c3018613          	addi	a2,gp,-976 # 2000002c <tween>
    1ec6:	4210                	lw	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1ec8:	00170293          	addi	t0,a4,1
    1ecc:	9732                	add	a4,a4,a2
    1ece:	0ff00613          	li	a2,255
    1ed2:	00e04363          	bgtz	a4,1ed8 <WS2812FillBuffSec.constprop.0+0x9c>
    1ed6:	4601                	li	a2,0
    1ed8:	007f45b7          	lui	a1,0x7f4
    1edc:	650d                	lui	a0,0x3
    1ede:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.bfb73fe7+0x7ea599>
    1ee2:	0ff50513          	addi	a0,a0,255 # 30ff <ch32fun.c.61965c5e+0x323>
    1ee6:	c616                	sw	t0,12(sp)
    1ee8:	c43e                	sw	a5,8(sp)
    1eea:	c236                	sw	a3,4(sp)
    1eec:	3d95                	jal	1d60 <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1eee:	00b55613          	srli	a2,a0,0xb
    1ef2:	6709                	lui	a4,0x2
    1ef4:	25470713          	addi	a4,a4,596 # 2254 <bitquartets.8>
    1ef8:	8a79                	andi	a2,a2,30
    1efa:	963a                	add	a2,a2,a4
    1efc:	47a2                	lw	a5,8(sp)
    1efe:	00065603          	lhu	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1f02:	42b2                	lw	t0,12(sp)
    1f04:	4692                	lw	a3,4(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1f06:	00c79023          	sh	a2,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1f0a:	00755613          	srli	a2,a0,0x7
    1f0e:	8a79                	andi	a2,a2,30
    1f10:	963a                	add	a2,a2,a4
    1f12:	00065603          	lhu	a2,0(a2)
		ptr += 6;
    1f16:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1f18:	fec79b23          	sh	a2,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    1f1c:	00355613          	srli	a2,a0,0x3
    1f20:	8a79                	andi	a2,a2,30
    1f22:	963a                	add	a2,a2,a4
    1f24:	00065603          	lhu	a2,0(a2)
    1f28:	fec79c23          	sh	a2,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    1f2c:	00f57613          	andi	a2,a0,15
    1f30:	0606                	slli	a2,a2,0x1
    1f32:	963a                	add	a2,a2,a4
    1f34:	00065603          	lhu	a2,0(a2)
    1f38:	fec79d23          	sh	a2,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f3c:	01355613          	srli	a2,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1f40:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f42:	8a79                	andi	a2,a2,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1f44:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f46:	963a                	add	a2,a2,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1f48:	953a                	add	a0,a0,a4
    1f4a:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f4e:	00065603          	lhu	a2,0(a2)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1f52:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f56:	fec79e23          	sh	a2,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1f5a:	8716                	mv	a4,t0
    1f5c:	b711                	j	1e60 <WS2812FillBuffSec.constprop.0+0x24>

00001f5e <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    1f5e:	fcc10113          	addi	sp,sp,-52
    1f62:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    1f64:	400207b7          	lui	a5,0x40020
    1f68:	439c                	lw	a5,0(a5)
{
    1f6a:	d022                	sw	s0,32(sp)
    1f6c:	ce26                	sw	s1,28(sp)
    1f6e:	d806                	sw	ra,48(sp)
    1f70:	d616                	sw	t0,44(sp)
    1f72:	d41a                	sw	t1,40(sp)
    1f74:	d21e                	sw	t2,36(sp)
    1f76:	cc2a                	sw	a0,24(sp)
    1f78:	ca2e                	sw	a1,20(sp)
    1f7a:	c832                	sw	a2,16(sp)
    1f7c:	c636                	sw	a3,12(sp)
    1f7e:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    1f80:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    1f82:	40020437          	lui	s0,0x40020
    1f86:	10000493          	li	s1,256
    1f8a:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    1f8c:	4782                	lw	a5,0(sp)
    1f8e:	4007f793          	andi	a5,a5,1024
    1f92:	c789                	beqz	a5,1f9c <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    1f94:	4585                	li	a1,1
    1f96:	c9018513          	addi	a0,gp,-880 # 2000008c <WS2812dmabuff>
    1f9a:	354d                	jal	1e3c <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    1f9c:	4782                	lw	a5,0(sp)
    1f9e:	2007f793          	andi	a5,a5,512
    1fa2:	c789                	beqz	a5,1fac <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    1fa4:	4581                	li	a1,0
    1fa6:	cc018513          	addi	a0,gp,-832 # 200000bc <WS2812dmabuff+0x30>
    1faa:	3d49                	jal	1e3c <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    1fac:	401c                	lw	a5,0(s0)
    1fae:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    1fb0:	4782                	lw	a5,0(sp)
    1fb2:	1007f793          	andi	a5,a5,256
    1fb6:	fbf1                	bnez	a5,1f8a <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    1fb8:	5402                	lw	s0,32(sp)
    1fba:	50c2                	lw	ra,48(sp)
    1fbc:	52b2                	lw	t0,44(sp)
    1fbe:	5322                	lw	t1,40(sp)
    1fc0:	5392                	lw	t2,36(sp)
    1fc2:	44f2                	lw	s1,28(sp)
    1fc4:	4562                	lw	a0,24(sp)
    1fc6:	45d2                	lw	a1,20(sp)
    1fc8:	4642                	lw	a2,16(sp)
    1fca:	46b2                	lw	a3,12(sp)
    1fcc:	4722                	lw	a4,8(sp)
    1fce:	4792                	lw	a5,4(sp)
    1fd0:	03410113          	addi	sp,sp,52
    1fd4:	30200073          	mret
    1fd8:	000c                	0xc
    1fda:	0810                	addi	a2,sp,16
    1fdc:	0818                	addi	a4,sp,16
    1fde:	0e12                	slli	t3,t3,0x4
    1fe0:	1616                	slli	a2,a2,0x25
    1fe2:	100c                	addi	a1,sp,32
    1fe4:	1602                	slli	a2,a2,0x20
    1fe6:	0e06                	slli	t3,t3,0x1
    1fe8:	0800                	addi	s0,sp,16
    1fea:	0808                	addi	a0,sp,16
    1fec:	000a                	c.slli	zero,0x2
    1fee:	0000                	unimp
    1ff0:	3249                	jal	1972 <main+0x6fe>
    1ff2:	30203a43          	fmadd.s	fs4,ft0,ft2,ft6,rup
    1ff6:	2578                	fld	fa4,200(a0)
    1ff8:	3230                	fld	fa2,96(a2)
    1ffa:	0058                	addi	a4,sp,4
    1ffc:	6146                	flw	ft2,80(sp)
    1ffe:	6c69                	lui	s8,0x1a
    2000:	6465                	lui	s0,0x19
    2002:	7420                	flw	fs0,104(s0)
    2004:	6e69206f          	j	946ea <lib_i2c.c.bfb73fe7+0x8ac43>
    2008:	7469                	lui	s0,0xffffa
    200a:	4920                	lw	s0,80(a0)
    200c:	4332                	lw	t1,12(sp)
    200e:	0000                	unimp
    2010:	2d2d                	jal	264a <_data_lma+0x3aa>
    2012:	2d2d                	jal	264c <_data_lma+0x3ac>
    2014:	6e616353          	0x6e616353
    2018:	696e                	flw	fs2,216(sp)
    201a:	676e                	flw	fa4,216(sp)
    201c:	4920                	lw	s0,80(a0)
    201e:	4332                	lw	t1,12(sp)
    2020:	4220                	lw	s0,64(a2)
    2022:	7375                	lui	t1,0xffffd
    2024:	6620                	flw	fs0,72(a2)
    2026:	4420726f          	jal	tp,9468 <ch32_mess.c.eabace0f+0x5504>
    202a:	7665                	lui	a2,0xffff9
    202c:	6369                	lui	t1,0x1a
    202e:	7365                	lui	t1,0xffff9
    2030:	2d2d                	jal	266a <_data_lma+0x3ca>
    2032:	002d                	c.nop	11
    2034:	2d2d                	jal	266e <_data_lma+0x3ce>
    2036:	2d2d                	jal	2670 <_data_lma+0x3d0>
    2038:	6f44                	flw	fs1,28(a4)
    203a:	656e                	flw	fa0,216(sp)
    203c:	5320                	lw	s0,96(a4)
    203e:	6e6e6163          	bltu	t3,t1,2720 <_data_lma+0x480>
    2042:	6e69                	lui	t3,0x1a
    2044:	2d2d2d67          	0x2d2d2d67
    2048:	0a2d                	addi	s4,s4,11
    204a:	0000                	unimp
    204c:	6548                	flw	fa0,12(a0)
    204e:	6c6c                	flw	fa1,92(s0)
    2050:	6542206f          	j	246a4 <lib_i2c.c.bfb73fe7+0x1abfd>
    2054:	2165                	jal	24fc <_data_lma+0x25c>
    2056:	0000                	unimp
    2058:	6e756f63          	bltu	a0,t2,2756 <_data_lma+0x4b6>
    205c:	6574                	flw	fa3,76(a0)
    205e:	2072                	fld	ft0,280(sp)
    2060:	6c25                	lui	s8,0x9
    2062:	0075                	c.nop	29
    2064:	3249                	jal	19e6 <main+0x772>
    2066:	75722043          	0x75722043
    206a:	746e                	flw	fs0,248(sp)
    206c:	6d69                	lui	s10,0x1a
    206e:	3a65                	jal	1a26 <main+0x7b2>
    2070:	2520                	fld	fs0,72(a0)
    2072:	756c                	flw	fa1,108(a0)
    2074:	7520                	flw	fs0,104(a0)
    2076:	          	ecall

00002078 <FONT_7x5>:
    2078:	00000000 5f000000 07000000 14000700     ......._........
    2088:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
    2098:	00502255 00000305 41221c00 22410000     U"P......."A..A"
    20a8:	2a08001c 08082a1c 08083e08 00305000     ...*.*...>...P0.
    20b8:	08080800 60000808 20000060 02040810     .......``.. ....
    20c8:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
    20d8:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
    20e8:	01304949 03050971 49494936 49490636     II0.q...6III6.II
    20f8:	36001e29 00000036 00003656 22140800     )..66...V6....."
    2108:	14141441 22411414 02000814 06095101     A.....A".....Q..
    2118:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
    2128:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
    2138:	3e010109 32514141 0808087f 7f41007f     ...>AAQ2......A.
    2148:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
    2158:	04027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
    2168:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
    2178:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
    2188:	7f1f2040 7f201820 14081463 78040363     @ .. . .c...c..x
    2198:	51610304 00434549 41417f00 10080402     ..aQIEC...AA....
    21a8:	7f414120 02040000 40040201 40404040      AA........@@@@@
    21b8:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
    21c8:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
    21d8:	08020109 3c545414 0404087f 7d440078     .....TT<....x.D}
    21e8:	40200040 00003d44 4428107f 407f4100     @. @D=....(D.A.@
    21f8:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
    2208:	1414147c 14140808 087c7c18 48080404     |........||....H
    2218:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
    2228:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
    2238:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
    2248:	36410000 08080008 00081c2a              ..A6....*...

00002254 <bitquartets.8>:
    2254:	888e8888 88ee88e8 8e8e8e88 8eee8ee8     ................
    2264:	e88ee888 e8eee8e8 ee8eee88 eeeeeee8     ................

00002274 <myvalues>:
    2274:	283c321e 0a1e3214 1e140a23 143c3228     .2<(.2..#...(2<.

00002284 <ssd1306_init_array>:
    2284:	a880d5ae 4000d33f 0020148d 12dac8a1     ....?..@.. .....
    2294:	f1d98f81 a6a440db 0000ffaf              .....@......

Disassembly of section .data:

20000000 <dev_aht21>:
20000000:	00061a80 00000000 00010038              ........8...

2000000c <dev_ssd1306>:
2000000c:	000186a0 00000000 0001003c              ........<...

20000018 <hourglass.5>:
20000018:	26122606 34123406                       .&.&.4.4

20000020 <line.7>:
20000020:	00000001                                ....

20000024 <quad_t.6>:
20000024:	18121806 22022216                       ....."."

2000002c <tween>:
2000002c:	ffffff42                                B...

20000030 <FastMultiply>:
{
20000030:	87aa                	mv	a5,a0
	uint32_t ret = 0;
20000032:	4501                	li	a0,0
		if( multiplicand & 1 )
20000034:	0015f713          	andi	a4,a1,1
20000038:	c311                	beqz	a4,2000003c <FastMultiply+0xc>
			ret += mutliplicant;
2000003a:	953e                	add	a0,a0,a5
		multiplicand>>=1;
2000003c:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
2000003e:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000040:	f9f5                	bnez	a1,20000034 <FastMultiply+0x4>
}
20000042:	8082                	ret

20000044 <DMA1_Channel4_IRQHandler>:

// DMA transfer completion interrupt. It will fire when the DMA transfer is
// complete. We use it just to blink the LED
__attribute__((interrupt)) __attribute__((section(".srodata")))
void DMA1_Channel4_IRQHandler(void)
{
20000044:	1151                	addi	sp,sp,-12
20000046:	c23a                	sw	a4,4(sp)
	// Clear flag
	DMA1->INTFCR |= DMA_CTCIF4;
20000048:	40020737          	lui	a4,0x40020
{
2000004c:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000004e:	435c                	lw	a5,4(a4)
{
20000050:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000052:	6689                	lui	a3,0x2
20000054:	8fd5                	or	a5,a5,a3
20000056:	c35c                	sw	a5,4(a4)

	// Blink LED
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000058:	400117b7          	lui	a5,0x40011
2000005c:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000060:	47d8                	lw	a4,12(a5)
}
20000062:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000064:	04074713          	xori	a4,a4,64
20000068:	c7d8                	sw	a4,12(a5)
}
2000006a:	4712                	lw	a4,4(sp)
2000006c:	4782                	lw	a5,0(sp)
2000006e:	0131                	addi	sp,sp,12
20000070:	30200073          	mret
