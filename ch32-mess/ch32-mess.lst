
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	7850006f          	j	f84 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	1052                	c.slli	zero,0x34
   a:	0000                	unimp
   c:	0ffa                	slli	t6,t6,0x1e
	...
  2e:	0000                	unimp
  30:	29c0                	fld	fs0,144(a1)
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0ffa                	slli	t6,t6,0x1e
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0ffa                	slli	t6,t6,0x1e
  42:	0000                	unimp
  44:	0ffa                	slli	t6,t6,0x1e
  46:	0000                	unimp
  48:	0ffa                	slli	t6,t6,0x1e
  4a:	0000                	unimp
  4c:	0ffa                	slli	t6,t6,0x1e
  4e:	0000                	unimp
  50:	0ffa                	slli	t6,t6,0x1e
  52:	0000                	unimp
  54:	0ffa                	slli	t6,t6,0x1e
  56:	0000                	unimp
  58:	0ffa                	slli	t6,t6,0x1e
  5a:	0000                	unimp
  5c:	0ffa                	slli	t6,t6,0x1e
  5e:	0000                	unimp
  60:	2946                	fld	fs2,80(sp)
  62:	0000                	unimp
  64:	005c                	addi	a5,sp,4
  66:	2000                	fld	fs0,0(s0)
  68:	0ffa                	slli	t6,t6,0x1e
  6a:	0000                	unimp
  6c:	0ffa                	slli	t6,t6,0x1e
  6e:	0000                	unimp
  70:	0ffa                	slli	t6,t6,0x1e
  72:	0000                	unimp
  74:	0ffa                	slli	t6,t6,0x1e
  76:	0000                	unimp
  78:	29f2                	fld	fs3,280(sp)
  7a:	0000                	unimp
  7c:	2b92                	fld	fs7,256(sp)
  7e:	0000                	unimp
  80:	0ffa                	slli	t6,t6,0x1e
  82:	0000                	unimp
  84:	0ffa                	slli	t6,t6,0x1e
  86:	0000                	unimp
  88:	0ffa                	slli	t6,t6,0x1e
  8a:	0000                	unimp
  8c:	0ffa                	slli	t6,t6,0x1e
  8e:	0000                	unimp
  90:	0ffa                	slli	t6,t6,0x1e
  92:	0000                	unimp
  94:	0ffa                	slli	t6,t6,0x1e
  96:	0000                	unimp
  98:	0ffa                	slli	t6,t6,0x1e
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	andi	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srli	a1,a1,0x1
      ae:	0606                	slli	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	slli	a2,a2,0x1
      d4:	0686                	slli	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srli	a3,a3,0x1
      e6:	8205                	srli	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
{
     136:	1131                	addi	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
	int overflow = 0;
     144:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     146:	cab5                	beqz	a3,1ba <mini_pad+0x84>
	if(len > pad_to) {
     148:	0096d463          	bge	a3,s1,150 <mini_pad+0x1a>
     14c:	84b6                	mv	s1,a3
		overflow = 1;
     14e:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     150:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     154:	00045363          	bgez	s0,15a <mini_pad+0x24>
     158:	4401                	li	s0,0
     15a:	8622                	mv	a2,s0
     15c:	853a                	mv	a0,a4
     15e:	c23e                	sw	a5,4(sp)
     160:	c01a                	sw	t1,0(sp)
     162:	14e010ef          	jal	ra,12b0 <memset>
     166:	4302                	lw	t1,0(sp)
     168:	4792                	lw	a5,4(sp)
     16a:	872a                	mv	a4,a0
     16c:	008506b3          	add	a3,a0,s0
     170:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     172:	40c485b3          	sub	a1,s1,a2
     176:	04b04463          	bgtz	a1,1be <mini_pad+0x88>
     17a:	0004d363          	bgez	s1,180 <mini_pad+0x4a>
     17e:	4481                	li	s1,0
     180:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     184:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     188:	02030463          	beqz	t1,1b0 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     18c:	02c77263          	bgeu	a4,a2,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     190:	02a00793          	li	a5,42
     194:	fef60fa3          	sb	a5,-1(a2)
     198:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     19c:	00d77a63          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1a0:	fef60f23          	sb	a5,-2(a2)
     1a4:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     1a8:	00d77463          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1ac:	fef60ea3          	sb	a5,-3(a2)
}
     1b0:	40c2                	lw	ra,16(sp)
     1b2:	4432                	lw	s0,12(sp)
     1b4:	44a2                	lw	s1,8(sp)
     1b6:	0151                	addi	sp,sp,20
     1b8:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1ba:	86a6                	mv	a3,s1
     1bc:	bf51                	j	150 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1be:	00c785b3          	add	a1,a5,a2
     1c2:	0005c503          	lbu	a0,0(a1)
     1c6:	00c685b3          	add	a1,a3,a2
     1ca:	0605                	addi	a2,a2,1
     1cc:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1d0:	b74d                	j	172 <mini_pad+0x3c>

000001d2 <_puts>:
{
     1d2:	832a                	mv	t1,a0
     1d4:	852e                	mv	a0,a1
	if(!buf) return len;
     1d6:	ce01                	beqz	a2,1ee <_puts+0x1c>
	char * p0 = b->buffer;
     1d8:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1dc:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1de:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1e0:	00a74863          	blt	a4,a0,1f0 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1e4:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1e8:	4248                	lw	a0,4(a2)
     1ea:	40550533          	sub	a0,a0,t0
}
     1ee:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1f0:	4614                	lw	a3,8(a2)
     1f2:	fff68593          	addi	a1,a3,-1
     1f6:	4214                	lw	a3,0(a2)
     1f8:	96ae                	add	a3,a3,a1
     1fa:	fed785e3          	beq	a5,a3,1e4 <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1fe:	00178693          	addi	a3,a5,1
     202:	c254                	sw	a3,4(a2)
     204:	00e306b3          	add	a3,t1,a4
     208:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     20c:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     20e:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     212:	b7f1                	j	1de <_puts+0xc>

00000214 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     214:	e0000737          	lui	a4,0xe0000
     218:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     21c:	0f470693          	addi	a3,a4,244
     220:	0807f793          	andi	a5,a5,128
     224:	fbf5                	bnez	a5,218 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     226:	783027b7          	lui	a5,0x78302
     22a:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     22e:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     230:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     232:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     236:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     238:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     23a:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     23e:	0807f793          	andi	a5,a5,128
     242:	ffe5                	bnez	a5,23a <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     244:	00e557b3          	srl	a5,a0,a4
     248:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     24c:	03000793          	li	a5,48
     250:	00d35463          	bge	t1,a3,258 <PrintHex+0x44>
     254:	05700793          	li	a5,87
     258:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     25a:	07a2                	slli	a5,a5,0x8
     25c:	0857e793          	ori	a5,a5,133
     260:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     264:	1771                	addi	a4,a4,-4
     266:	fcb71ae3          	bne	a4,a1,23a <PrintHex+0x26>
}
     26a:	8082                	ret

0000026c <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     26c:	e000f7b7          	lui	a5,0xe000f
     270:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     272:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     276:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     278:	471c                	lw	a5,8(a4)
     27a:	8f89                	sub	a5,a5,a0
     27c:	fe07cee3          	bltz	a5,278 <DelaySysTick+0xc>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     280:	8082                	ret

00000282 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     282:	1101                	addi	sp,sp,-32
     284:	ce06                	sw	ra,28(sp)
     286:	cc22                	sw	s0,24(sp)
     288:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     28a:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     28c:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     28e:	00055763          	bgez	a0,29c <mini_itoa.part.0+0x1a>
     292:	e689                	bnez	a3,29c <mini_itoa.part.0+0x1a>
		negative = 1;
     294:	4785                	li	a5,1
		value = -value;
     296:	40a00333          	neg	t1,a0
		negative = 1;
     29a:	c03e                	sw	a5,0(sp)
     29c:	06100413          	li	s0,97
     2a0:	c219                	beqz	a2,2a6 <mini_itoa.part.0+0x24>
     2a2:	04100413          	li	s0,65
	int	negative = 0;
     2a6:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2a8:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     2aa:	851a                	mv	a0,t1
     2ac:	c83a                	sw	a4,16(sp)
     2ae:	c21a                	sw	t1,4(sp)
     2b0:	c62e                	sw	a1,12(sp)
     2b2:	c41a                	sw	t1,8(sp)
     2b4:	3d25                	jal	ec <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2b6:	47a5                	li	a5,9
     2b8:	4322                	lw	t1,8(sp)
     2ba:	45b2                	lw	a1,12(sp)
     2bc:	4742                	lw	a4,16(sp)
     2be:	0ff57693          	andi	a3,a0,255
     2c2:	06a7e163          	bltu	a5,a0,324 <mini_itoa.part.0+0xa2>
     2c6:	03068693          	addi	a3,a3,48
     2ca:	0ff6f693          	andi	a3,a3,255
     2ce:	00148793          	addi	a5,s1,1
     2d2:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2d6:	851a                	mv	a0,t1
     2d8:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2da:	c63e                	sw	a5,12(sp)
		value /= radix;
     2dc:	c42e                	sw	a1,8(sp)
     2de:	33cd                	jal	c0 <__hidden___udivsi3>
	} while (value > 0);
     2e0:	4692                	lw	a3,4(sp)
     2e2:	45a2                	lw	a1,8(sp)
     2e4:	47b2                	lw	a5,12(sp)
     2e6:	4742                	lw	a4,16(sp)
		value /= radix;
     2e8:	832a                	mv	t1,a0
	} while (value > 0);
     2ea:	02b6fb63          	bgeu	a3,a1,320 <mini_itoa.part.0+0x9e>
	if (negative)
     2ee:	4682                	lw	a3,0(sp)
     2f0:	c699                	beqz	a3,2fe <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2f2:	02d00693          	li	a3,45
     2f6:	00d78023          	sb	a3,0(a5) # e000f000 <_eusrstack+0xc000e800>
     2fa:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2fe:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     302:	01f55693          	srli	a3,a0,0x1f
     306:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     308:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     30c:	8685                	srai	a3,a3,0x1
     30e:	4601                	li	a2,0
     310:	17fd                	addi	a5,a5,-1
     312:	00d64b63          	blt	a2,a3,328 <mini_itoa.part.0+0xa6>
}
     316:	40f2                	lw	ra,28(sp)
     318:	4462                	lw	s0,24(sp)
     31a:	44d2                	lw	s1,20(sp)
     31c:	6105                	addi	sp,sp,32
     31e:	8082                	ret
	} while (value > 0);
     320:	84be                	mv	s1,a5
     322:	b761                	j	2aa <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     324:	96a2                	add	a3,a3,s0
     326:	b755                	j	2ca <mini_itoa.part.0+0x48>
		char j = buffer[i];
     328:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     32c:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     330:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     334:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     336:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     33a:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     33e:	bfc9                	j	310 <mini_itoa.part.0+0x8e>

00000340 <SPI_send>:
    DMA1_Channel3->CFGR &= ~DMA_CFGR1_EN;  // Turn off channel
}

static void SPI_send(uint8_t data) {
    // Send byte
    SPI1->DATAR = data;
     340:	400137b7          	lui	a5,0x40013
     344:	00a79623          	sh	a0,12(a5) # 4001300c <_eusrstack+0x2001280c>

    // Waiting for transmission complete
    while (!(SPI1->STATR & SPI_STATR_TXE)) ;
     348:	40013737          	lui	a4,0x40013
     34c:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     350:	8b89                	andi	a5,a5,2
     352:	dfed                	beqz	a5,34c <SPI_send+0xc>
}
     354:	8082                	ret

00000356 <write_cmd_8>:
#define ST7735_MADCTL_MY  0x80  // Bit 7 - Y-Mirror


static uint8_t DC_PIN;

void INTF_SPI_DC_LOW()  { funDigitalWrite(DC_PIN, 0); }
     356:	400117b7          	lui	a5,0x40011
     35a:	80078793          	addi	a5,a5,-2048 # 40010800 <_eusrstack+0x20010000>
     35e:	6741                	lui	a4,0x10
     360:	cb98                	sw	a4,16(a5)
void INTF_SPI_DC_LOW();
void INTF_SPI_DC_HIGH();

static void write_cmd_8(uint8_t cmd) {
    INTF_SPI_DC_LOW();      // Command Mode
    SPI_send(cmd);
     362:	bff9                	j	340 <SPI_send>

00000364 <INTF_SPI_DC_HIGH>:
void INTF_SPI_DC_HIGH() { funDigitalWrite(DC_PIN, 1); }
     364:	400117b7          	lui	a5,0x40011
     368:	80078793          	addi	a5,a5,-2048 # 40010800 <_eusrstack+0x20010000>
     36c:	4705                	li	a4,1
     36e:	cb98                	sw	a4,16(a5)
     370:	8082                	ret

00000372 <write_data_16>:
static void write_data_8(uint8_t data) {
    INTF_SPI_DC_HIGH();     // Data Mode
    SPI_send(data);
}

static void write_data_16(uint16_t data) {
     372:	1151                	addi	sp,sp,-12
     374:	c406                	sw	ra,8(sp)
     376:	c222                	sw	s0,4(sp)
     378:	842a                	mv	s0,a0
    INTF_SPI_DC_HIGH();     // Data Mode
     37a:	37ed                	jal	364 <INTF_SPI_DC_HIGH>
    SPI_send(data >> 8);
     37c:	00845513          	srli	a0,s0,0x8
     380:	37c1                	jal	340 <SPI_send>
    SPI_send(data);
     382:	0ff47513          	andi	a0,s0,255
}
     386:	4412                	lw	s0,4(sp)
     388:	40a2                	lw	ra,8(sp)
     38a:	0131                	addi	sp,sp,12
    SPI_send(data);
     38c:	bf55                	j	340 <SPI_send>

0000038e <INTF_TFT_SET_WINDOW>:

void INTF_TFT_SET_WINDOW(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     38e:	1131                	addi	sp,sp,-20
     390:	c22a                	sw	a0,4(sp)
    INTF_TFT_START_WRITE();

    write_cmd_8(ST7735_CASET);
     392:	02a00513          	li	a0,42
void INTF_TFT_SET_WINDOW(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     396:	c806                	sw	ra,16(sp)
     398:	c622                	sw	s0,12(sp)
     39a:	c426                	sw	s1,8(sp)
     39c:	8436                	mv	s0,a3
     39e:	84ae                	mv	s1,a1
     3a0:	c032                	sw	a2,0(sp)
    write_cmd_8(ST7735_CASET);
     3a2:	3f55                	jal	356 <write_cmd_8>
    write_data_16(x0);
     3a4:	4792                	lw	a5,4(sp)
     3a6:	853e                	mv	a0,a5
     3a8:	37e9                	jal	372 <write_data_16>
    write_data_16(x1);
     3aa:	4602                	lw	a2,0(sp)
     3ac:	8532                	mv	a0,a2
     3ae:	37d1                	jal	372 <write_data_16>
    write_cmd_8(ST7735_RASET);
     3b0:	02b00513          	li	a0,43
     3b4:	374d                	jal	356 <write_cmd_8>
    write_data_16(y0);
     3b6:	8526                	mv	a0,s1
     3b8:	3f6d                	jal	372 <write_data_16>
    write_data_16(y1);
     3ba:	8522                	mv	a0,s0
     3bc:	3f5d                	jal	372 <write_data_16>
    write_cmd_8(ST7735_RAMWR);
}
     3be:	4432                	lw	s0,12(sp)
     3c0:	40c2                	lw	ra,16(sp)
     3c2:	44a2                	lw	s1,8(sp)
    write_cmd_8(ST7735_RAMWR);
     3c4:	02c00513          	li	a0,44
}
     3c8:	0151                	addi	sp,sp,20
    write_cmd_8(ST7735_RAMWR);
     3ca:	b771                	j	356 <write_cmd_8>

000003cc <tft_draw_pixel>:
                            }

//! draw pixel
void tft_draw_pixel(
    uint16_t x, uint16_t y, uint16_t color
) {
     3cc:	1151                	addi	sp,sp,-12
    x += TFT_X_OFFSET;
     3ce:	0505                	addi	a0,a0,1
    y += TFT_Y_OFFSET;
     3d0:	05e9                	addi	a1,a1,26
) {
     3d2:	c222                	sw	s0,4(sp)
    y += TFT_Y_OFFSET;
     3d4:	01059693          	slli	a3,a1,0x10
) {
     3d8:	8432                	mv	s0,a2
    x += TFT_X_OFFSET;
     3da:	01051613          	slli	a2,a0,0x10
     3de:	8241                	srli	a2,a2,0x10
    y += TFT_Y_OFFSET;
     3e0:	82c1                	srli	a3,a3,0x10

    INTF_TFT_SET_WINDOW(x, y, x, y);
     3e2:	8532                	mv	a0,a2
     3e4:	85b6                	mv	a1,a3
) {
     3e6:	c406                	sw	ra,8(sp)
    INTF_TFT_SET_WINDOW(x, y, x, y);
     3e8:	375d                	jal	38e <INTF_TFT_SET_WINDOW>

    INTF_TFT_END_WRITE();
}

void INTF_TFT_SEND_COLOR(uint16_t color) {
    write_data_16(color);
     3ea:	8522                	mv	a0,s0
    INTF_TFT_SEND_COLOR(color);
}
     3ec:	4412                	lw	s0,4(sp)
     3ee:	40a2                	lw	ra,8(sp)
     3f0:	0131                	addi	sp,sp,12
     3f2:	b741                	j	372 <write_data_16>

000003f4 <INTF_TFT_SEND_BUFF>:
void INTF_TFT_SEND_BUFF(const uint8_t* buffer, uint16_t size, uint16_t repeat) {
     3f4:	1141                	addi	sp,sp,-16
     3f6:	c422                	sw	s0,8(sp)
     3f8:	c226                	sw	s1,4(sp)
     3fa:	c02a                	sw	a0,0(sp)
     3fc:	84ae                	mv	s1,a1
     3fe:	8432                	mv	s0,a2
     400:	c606                	sw	ra,12(sp)
    INTF_SPI_DC_HIGH();
     402:	378d                	jal	364 <INTF_SPI_DC_HIGH>
    DMA1_Channel3->MADDR = (uint32_t)buffer;
     404:	4502                	lw	a0,0(sp)
     406:	400207b7          	lui	a5,0x40020
        DMA1->INTFCR = DMA1_FLAG_TC3;
     40a:	400206b7          	lui	a3,0x40020
    DMA1_Channel3->MADDR = (uint32_t)buffer;
     40e:	dfc8                	sw	a0,60(a5)
    DMA1_Channel3->CNTR  = size;
     410:	dbc4                	sw	s1,52(a5)
    DMA1_Channel3->CFGR |= DMA_CFGR1_EN;  // Turn on channel
     412:	5b98                	lw	a4,48(a5)
        DMA1->INTFCR = DMA1_FLAG_TC3;
     414:	20000613          	li	a2,512
    DMA1_Channel3->CFGR |= DMA_CFGR1_EN;  // Turn on channel
     418:	00176713          	ori	a4,a4,1
     41c:	db98                	sw	a4,48(a5)
    while (repeat--) {
     41e:	67c1                	lui	a5,0x10
     420:	17fd                	addi	a5,a5,-1
     422:	147d                	addi	s0,s0,-1
     424:	0442                	slli	s0,s0,0x10
     426:	8041                	srli	s0,s0,0x10
     428:	00f41c63          	bne	s0,a5,440 <INTF_TFT_SEND_BUFF+0x4c>
    DMA1_Channel3->CFGR &= ~DMA_CFGR1_EN;  // Turn off channel
     42c:	40020737          	lui	a4,0x40020
     430:	5b1c                	lw	a5,48(a4)
}
     432:	40b2                	lw	ra,12(sp)
     434:	4422                	lw	s0,8(sp)
     436:	9bf9                	andi	a5,a5,-2
     438:	db1c                	sw	a5,48(a4)
     43a:	4492                	lw	s1,4(sp)
     43c:	0141                	addi	sp,sp,16
     43e:	8082                	ret
        DMA1->INTFCR = DMA1_FLAG_TC3;
     440:	c2d0                	sw	a2,4(a3)
        while (!(DMA1->INTFR & DMA1_FLAG_TC3))
     442:	4298                	lw	a4,0(a3)
     444:	20077713          	andi	a4,a4,512
     448:	df6d                	beqz	a4,442 <INTF_TFT_SEND_BUFF+0x4e>
     44a:	bfe1                	j	422 <INTF_TFT_SEND_BUFF+0x2e>

0000044c <tft_print>:
void tft_print(const char* str) {
     44c:	1131                	addi	sp,sp,-20
     44e:	c622                	sw	s0,12(sp)
     450:	c806                	sw	ra,16(sp)
     452:	c426                	sw	s1,8(sp)
     454:	842a                	mv	s0,a0
    while (*str) {
     456:	00044783          	lbu	a5,0(s0)
     45a:	e791                	bnez	a5,466 <tft_print+0x1a>
}
     45c:	40c2                	lw	ra,16(sp)
     45e:	4432                	lw	s0,12(sp)
     460:	44a2                	lw	s1,8(sp)
     462:	0151                	addi	sp,sp,20
     464:	8082                	ret
    const unsigned char* start = &font[c + (c << 2)];
     466:	00279713          	slli	a4,a5,0x2
     46a:	97ba                	add	a5,a5,a4
        tft_print_char(*str++, 7, font_width, 0xFFFF, 0x0000); // 7x5 font size
     46c:	0405                	addi	s0,s0,1
    const unsigned char* start = &font[c + (c << 2)];
     46e:	c03e                	sw	a5,0(sp)
     470:	4301                	li	t1,0
    uint16_t sz = 0;
     472:	4681                	li	a3,0
     474:	e5c18513          	addi	a0,gp,-420 # 20000258 <_frame_buffer>
                _frame_buffer[sz++] = color >> 8;
     478:	53fd                	li	t2,-1
     47a:	4785                	li	a5,1
     47c:	006797b3          	sll	a5,a5,t1
     480:	c23e                	sw	a5,4(sp)
            if ((*(start + j)) & (0x01 << i)) {
     482:	8636                	mv	a2,a3
     484:	4581                	li	a1,0
     486:	4282                	lw	t0,0(sp)
     488:	608d                	lui	ra,0x3
     48a:	06008093          	addi	ra,ra,96 # 3060 <font>
     48e:	92ae                	add	t0,t0,a1
     490:	9286                	add	t0,t0,ra
     492:	0002c283          	lbu	t0,0(t0)
     496:	4092                	lw	ra,4(sp)
     498:	00160793          	addi	a5,a2,1
                _frame_buffer[sz++] = color >> 8;
     49c:	8732                	mv	a4,a2
                _frame_buffer[sz++] = color;
     49e:	0609                	addi	a2,a2,2
     4a0:	07c2                	slli	a5,a5,0x10
     4a2:	0642                	slli	a2,a2,0x10
            if ((*(start + j)) & (0x01 << i)) {
     4a4:	0012f2b3          	and	t0,t0,ra
     4a8:	83c1                	srli	a5,a5,0x10
                _frame_buffer[sz++] = color;
     4aa:	8241                	srli	a2,a2,0x10
                _frame_buffer[sz++] = color >> 8;
     4ac:	972a                	add	a4,a4,a0
            if ((*(start + j)) & (0x01 << i)) {
     4ae:	06028163          	beqz	t0,510 <tft_print+0xc4>
                _frame_buffer[sz++] = color >> 8;
     4b2:	00770023          	sb	t2,0(a4) # 40020000 <_eusrstack+0x2001f800>
                _frame_buffer[sz++] = color;
     4b6:	97aa                	add	a5,a5,a0
     4b8:	00778023          	sb	t2,0(a5) # 10000 <lib_i2c.c.d894f163+0x61ee>
        for (uint8_t j = 0; j < width; j++) {
     4bc:	0585                	addi	a1,a1,1
     4be:	4795                	li	a5,5
     4c0:	fcf593e3          	bne	a1,a5,486 <tft_print+0x3a>
                _frame_buffer[sz++] = color;
     4c4:	06a9                	addi	a3,a3,10
     4c6:	06c2                	slli	a3,a3,0x10
     4c8:	82c1                	srli	a3,a3,0x10
    for (uint8_t i = 0; i < height; i++) {
     4ca:	04600793          	li	a5,70
     4ce:	0305                	addi	t1,t1,1
     4d0:	faf695e3          	bne	a3,a5,47a <tft_print+0x2e>
    INTF_TFT_SET_WINDOW(_cursor_x, _cursor_y, _cursor_x + width - 1, _cursor_y + height - 1);
     4d4:	ca418713          	addi	a4,gp,-860 # 200000a0 <_cursor_x>
     4d8:	00075783          	lhu	a5,0(a4)
     4dc:	ca61d583          	lhu	a1,-858(gp) # 200000a2 <_cursor_y>
     4e0:	00478613          	addi	a2,a5,4
     4e4:	00658693          	addi	a3,a1,6
     4e8:	06c2                	slli	a3,a3,0x10
     4ea:	0642                	slli	a2,a2,0x10
     4ec:	853e                	mv	a0,a5
     4ee:	82c1                	srli	a3,a3,0x10
     4f0:	8241                	srli	a2,a2,0x10
     4f2:	c03e                	sw	a5,0(sp)
     4f4:	3d69                	jal	38e <INTF_TFT_SET_WINDOW>
    INTF_TFT_SEND_BUFF(_frame_buffer, sz, 1);
     4f6:	4605                	li	a2,1
     4f8:	04600593          	li	a1,70
     4fc:	e5c18513          	addi	a0,gp,-420 # 20000258 <_frame_buffer>
     500:	3dd5                	jal	3f4 <INTF_TFT_SEND_BUFF>
        _cursor_x += font_width + 1;
     502:	4782                	lw	a5,0(sp)
     504:	ca418713          	addi	a4,gp,-860 # 200000a0 <_cursor_x>
     508:	0799                	addi	a5,a5,6
     50a:	00f71023          	sh	a5,0(a4)
     50e:	b7a1                	j	456 <tft_print+0xa>
                _frame_buffer[sz++] = bg_color >> 8;
     510:	00070023          	sb	zero,0(a4)
                _frame_buffer[sz++] = bg_color;
     514:	97aa                	add	a5,a5,a0
     516:	00078023          	sb	zero,0(a5)
     51a:	b74d                	j	4bc <tft_print+0x70>

0000051c <_draw_fast_vLine>:

//! private
static void _draw_fast_vLine(
    int16_t x, int16_t y, int16_t h, uint16_t color
) {
     51c:	1151                	addi	sp,sp,-12
     51e:	c222                	sw	s0,4(sp)
    x += TFT_X_OFFSET;
    y += TFT_Y_OFFSET;
     520:	05e9                	addi	a1,a1,26
) {
     522:	8432                	mv	s0,a2
    x += TFT_X_OFFSET;
     524:	00150613          	addi	a2,a0,1
) {
     528:	c026                	sw	s1,0(sp)
    x += TFT_X_OFFSET;
     52a:	0642                	slli	a2,a2,0x10
    y += TFT_Y_OFFSET;
     52c:	05c2                	slli	a1,a1,0x10
) {
     52e:	c406                	sw	ra,8(sp)
    x += TFT_X_OFFSET;
     530:	8241                	srli	a2,a2,0x10
    y += TFT_Y_OFFSET;
     532:	81c1                	srli	a1,a1,0x10

    uint16_t sz = 0;
    for (int16_t j = 0; j < h; j++) {
        _buffer[sz++] = color >> 8;
     534:	0086d513          	srli	a0,a3,0x8
     538:	d1c18713          	addi	a4,gp,-740 # 20000118 <_buffer>
    for (int16_t j = 0; j < h; j++) {
     53c:	4781                	li	a5,0
     53e:	0287c863          	blt	a5,s0,56e <_draw_fast_vLine+0x52>
        _buffer[sz++] = color;
    }

    INTF_TFT_SET_WINDOW(x, y, x, y + h - 1);
     542:	fff40693          	addi	a3,s0,-1
     546:	96ae                	add	a3,a3,a1
     548:	06c2                	slli	a3,a3,0x10
     54a:	82c1                	srli	a3,a3,0x10
     54c:	8532                	mv	a0,a2
     54e:	3581                	jal	38e <INTF_TFT_SET_WINDOW>
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     550:	85a2                	mv	a1,s0
     552:	00045363          	bgez	s0,558 <_draw_fast_vLine+0x3c>
     556:	4581                	li	a1,0
}
     558:	4412                	lw	s0,4(sp)
     55a:	40a2                	lw	ra,8(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     55c:	0586                	slli	a1,a1,0x1
     55e:	d1c18513          	addi	a0,gp,-740 # 20000118 <_buffer>
}
     562:	4482                	lw	s1,0(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     564:	05c2                	slli	a1,a1,0x10
     566:	81c1                	srli	a1,a1,0x10
     568:	4605                	li	a2,1
}
     56a:	0131                	addi	sp,sp,12
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     56c:	b561                	j	3f4 <INTF_TFT_SEND_BUFF>
        _buffer[sz++] = color >> 8;
     56e:	0785                	addi	a5,a5,1
     570:	07c2                	slli	a5,a5,0x10
     572:	00a70023          	sb	a0,0(a4)
        _buffer[sz++] = color;
     576:	00d700a3          	sb	a3,1(a4)
    for (int16_t j = 0; j < h; j++) {
     57a:	87c1                	srai	a5,a5,0x10
     57c:	0709                	addi	a4,a4,2
     57e:	b7c1                	j	53e <_draw_fast_vLine+0x22>

00000580 <_draw_fast_hLine>:


//! private
static void _draw_fast_hLine(
    int16_t x, int16_t y, int16_t w, uint16_t color
) {
     580:	1151                	addi	sp,sp,-12
    x += TFT_X_OFFSET;
    y += TFT_Y_OFFSET;
     582:	05e9                	addi	a1,a1,26
    x += TFT_X_OFFSET;
     584:	0505                	addi	a0,a0,1
) {
     586:	c222                	sw	s0,4(sp)
     588:	c026                	sw	s1,0(sp)
     58a:	8432                	mv	s0,a2
    x += TFT_X_OFFSET;
     58c:	0542                	slli	a0,a0,0x10
) {
     58e:	8636                	mv	a2,a3
    y += TFT_Y_OFFSET;
     590:	01059693          	slli	a3,a1,0x10
) {
     594:	c406                	sw	ra,8(sp)
    x += TFT_X_OFFSET;
     596:	8141                	srli	a0,a0,0x10
    y += TFT_Y_OFFSET;
     598:	82c1                	srli	a3,a3,0x10

    uint16_t sz = 0;
    for (int16_t j = 0; j < w; j++) {
        _buffer[sz++] = color >> 8;
     59a:	00865593          	srli	a1,a2,0x8
     59e:	d1c18713          	addi	a4,gp,-740 # 20000118 <_buffer>
    for (int16_t j = 0; j < w; j++) {
     5a2:	4781                	li	a5,0
     5a4:	0287c863          	blt	a5,s0,5d4 <_draw_fast_hLine+0x54>
        _buffer[sz++] = color;
    }

    INTF_TFT_SET_WINDOW(x, y, x + w - 1, y);
     5a8:	fff40613          	addi	a2,s0,-1
     5ac:	962a                	add	a2,a2,a0
     5ae:	0642                	slli	a2,a2,0x10
     5b0:	85b6                	mv	a1,a3
     5b2:	8241                	srli	a2,a2,0x10
     5b4:	3be9                	jal	38e <INTF_TFT_SET_WINDOW>
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5b6:	85a2                	mv	a1,s0
     5b8:	00045363          	bgez	s0,5be <_draw_fast_hLine+0x3e>
     5bc:	4581                	li	a1,0
}
     5be:	4412                	lw	s0,4(sp)
     5c0:	40a2                	lw	ra,8(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5c2:	0586                	slli	a1,a1,0x1
     5c4:	d1c18513          	addi	a0,gp,-740 # 20000118 <_buffer>
}
     5c8:	4482                	lw	s1,0(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5ca:	05c2                	slli	a1,a1,0x10
     5cc:	81c1                	srli	a1,a1,0x10
     5ce:	4605                	li	a2,1
}
     5d0:	0131                	addi	sp,sp,12
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5d2:	b50d                	j	3f4 <INTF_TFT_SEND_BUFF>
        _buffer[sz++] = color >> 8;
     5d4:	0785                	addi	a5,a5,1
     5d6:	07c2                	slli	a5,a5,0x10
     5d8:	00b70023          	sb	a1,0(a4)
        _buffer[sz++] = color;
     5dc:	00c700a3          	sb	a2,1(a4)
    for (int16_t j = 0; j < w; j++) {
     5e0:	87c1                	srai	a5,a5,0x10
     5e2:	0709                	addi	a4,a4,2
     5e4:	b7c1                	j	5a4 <_draw_fast_hLine+0x24>

000005e6 <tft_draw_line>:

//! draw line
void tft_draw_line(
    int16_t x0, int16_t y0,
    int16_t x1, int16_t y1, uint16_t color, uint8_t width
) {
     5e6:	82b2                	mv	t0,a2
     5e8:	832a                	mv	t1,a0
     5ea:	8636                	mv	a2,a3
     5ec:	86ba                	mv	a3,a4
    if (x0 == x1) {
     5ee:	00551d63          	bne	a0,t0,608 <tft_draw_line+0x22>
        if (y0 > y1) _swap_int16(y0, y1);
     5f2:	00b65563          	bge	a2,a1,5fc <tft_draw_line+0x16>
     5f6:	87ae                	mv	a5,a1
     5f8:	85b2                	mv	a1,a2
     5fa:	863e                	mv	a2,a5
        _draw_fast_vLine(x0, y0, y1 - y0 + 1, color);
     5fc:	0605                	addi	a2,a2,1
     5fe:	8e0d                	sub	a2,a2,a1
     600:	0642                	slli	a2,a2,0x10
     602:	8641                	srai	a2,a2,0x10
     604:	851a                	mv	a0,t1
     606:	bf19                	j	51c <_draw_fast_vLine>
    }
    else if (y0 == y1) {
     608:	00c59e63          	bne	a1,a2,624 <tft_draw_line+0x3e>
        if (x0 > x1) _swap_int16(x0, x1);
     60c:	00a2d463          	bge	t0,a0,614 <tft_draw_line+0x2e>
     610:	8316                	mv	t1,t0
     612:	82aa                	mv	t0,a0
        _draw_fast_hLine(x0, y0, x1 - x0 + 1, color);
     614:	00128613          	addi	a2,t0,1
     618:	40660633          	sub	a2,a2,t1
     61c:	0642                	slli	a2,a2,0x10
     61e:	8641                	srai	a2,a2,0x10
     620:	851a                	mv	a0,t1
     622:	bfb9                	j	580 <_draw_fast_hLine>
) {
     624:	fc410113          	addi	sp,sp,-60
     628:	dc06                	sw	ra,56(sp)
     62a:	da22                	sw	s0,52(sp)
     62c:	d826                	sw	s1,48(sp)
     62e:	853e                	mv	a0,a5
    uint8_t steep = _diff(y1, y0) > _diff(x1, x0);
     630:	40c587b3          	sub	a5,a1,a2
     634:	00c5d463          	bge	a1,a2,63c <tft_draw_line+0x56>
     638:	40b607b3          	sub	a5,a2,a1
     63c:	06535763          	bge	t1,t0,6aa <tft_draw_line+0xc4>
     640:	40628733          	sub	a4,t0,t1
    if (steep) {
     644:	06f74d63          	blt	a4,a5,6be <tft_draw_line+0xd8>
     648:	83ae                	mv	t2,a1
     64a:	859a                	mv	a1,t1
     64c:	831e                	mv	t1,t2
    int16_t dx   = x1 - x0;
     64e:	40b283b3          	sub	t2,t0,a1
     652:	01039413          	slli	s0,t2,0x10
     656:	8041                	srli	s0,s0,0x10
     658:	c622                	sw	s0,12(sp)
     65a:	03c2                	slli	t2,t2,0x10
    int16_t dy   = _diff(y1, y0);
     65c:	01031413          	slli	s0,t1,0x10
     660:	01061493          	slli	s1,a2,0x10
    int16_t dx   = x1 - x0;
     664:	4103d393          	srai	t2,t2,0x10
    int16_t dy   = _diff(y1, y0);
     668:	8041                	srli	s0,s0,0x10
     66a:	80c1                	srli	s1,s1,0x10
     66c:	06c35563          	bge	t1,a2,6d6 <tft_draw_line+0xf0>
     670:	40848433          	sub	s0,s1,s0
     674:	0442                	slli	s0,s0,0x10
     676:	8441                	srai	s0,s0,0x10
     678:	c222                	sw	s0,4(sp)
    int16_t step = (y0 < y1) ? 1 : -1;
     67a:	4405                	li	s0,1
     67c:	c422                	sw	s0,8(sp)
    int16_t err  = dx >> 1;
     67e:	4013d393          	srai	t2,t2,0x1
    int16_t step = (y0 < y1) ? 1 : -1;
     682:	00c34463          	blt	t1,a2,68a <tft_draw_line+0xa4>
     686:	567d                	li	a2,-1
     688:	c432                	sw	a2,8(sp)
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     68a:	00155613          	srli	a2,a0,0x1
     68e:	c032                	sw	a2,0(sp)
     690:	40c00633          	neg	a2,a2
     694:	0642                	slli	a2,a2,0x10
     696:	8641                	srai	a2,a2,0x10
     698:	c832                	sw	a2,16(sp)
    for (; x0 <= x1; x0++) {
     69a:	04b2d063          	bge	t0,a1,6da <tft_draw_line+0xf4>
    }
    else {
        _draw_line_bresenham(x0, y0, x1, y1, color, width);
    }
}
     69e:	50e2                	lw	ra,56(sp)
     6a0:	5452                	lw	s0,52(sp)
     6a2:	54c2                	lw	s1,48(sp)
     6a4:	03c10113          	addi	sp,sp,60
     6a8:	8082                	ret
    uint8_t steep = _diff(y1, y0) > _diff(x1, x0);
     6aa:	40530733          	sub	a4,t1,t0
    if (steep) {
     6ae:	00f74863          	blt	a4,a5,6be <tft_draw_line+0xd8>
     6b2:	83b2                	mv	t2,a2
     6b4:	8616                	mv	a2,t0
     6b6:	829e                	mv	t0,t2
     6b8:	83ae                	mv	t2,a1
     6ba:	859a                	mv	a1,t1
     6bc:	831e                	mv	t1,t2
    if (x0 > x1) {
     6be:	00b65863          	bge	a2,a1,6ce <tft_draw_line+0xe8>
     6c2:	83ae                	mv	t2,a1
     6c4:	85b2                	mv	a1,a2
     6c6:	861a                	mv	a2,t1
     6c8:	8316                	mv	t1,t0
     6ca:	829e                	mv	t0,t2
     6cc:	b749                	j	64e <tft_draw_line+0x68>
     6ce:	8396                	mv	t2,t0
     6d0:	82b2                	mv	t0,a2
     6d2:	861e                	mv	a2,t2
     6d4:	bfad                	j	64e <tft_draw_line+0x68>
    int16_t dy   = _diff(y1, y0);
     6d6:	8c05                	sub	s0,s0,s1
     6d8:	bf71                	j	674 <tft_draw_line+0x8e>
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     6da:	44c2                	lw	s1,16(sp)
     6dc:	01059413          	slli	s0,a1,0x10
     6e0:	8041                	srli	s0,s0,0x10
                tft_draw_pixel(y0 + w, x0, color); // Draw perpendicular pixels for width
     6e2:	01031613          	slli	a2,t1,0x10
     6e6:	04c2                	slli	s1,s1,0x10
     6e8:	8241                	srli	a2,a2,0x10
     6ea:	80c1                	srli	s1,s1,0x10
     6ec:	00960533          	add	a0,a2,s1
     6f0:	ca32                	sw	a2,20(sp)
     6f2:	0542                	slli	a0,a0,0x10
     6f4:	d616                	sw	t0,44(sp)
     6f6:	d41a                	sw	t1,40(sp)
     6f8:	d21e                	sw	t2,36(sp)
     6fa:	d03e                	sw	a5,32(sp)
     6fc:	ce3a                	sw	a4,28(sp)
     6fe:	cc36                	sw	a3,24(sp)
     700:	8141                	srli	a0,a0,0x10
     702:	8636                	mv	a2,a3
            if (steep) {
     704:	04f75d63          	bge	a4,a5,75e <tft_draw_line+0x178>
                tft_draw_pixel(y0 + w, x0, color); // Draw perpendicular pixels for width
     708:	85a2                	mv	a1,s0
     70a:	31c9                	jal	3cc <tft_draw_pixel>
     70c:	46e2                	lw	a3,24(sp)
     70e:	4772                	lw	a4,28(sp)
     710:	5782                	lw	a5,32(sp)
     712:	5392                	lw	t2,36(sp)
     714:	5322                	lw	t1,40(sp)
     716:	52b2                	lw	t0,44(sp)
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     718:	0485                	addi	s1,s1,1
     71a:	4602                	lw	a2,0(sp)
     71c:	04c2                	slli	s1,s1,0x10
     71e:	84c1                	srai	s1,s1,0x10
     720:	fc9651e3          	bge	a2,s1,6e2 <tft_draw_line+0xfc>
        err -= dy;
     724:	4612                	lw	a2,4(sp)
     726:	40c383b3          	sub	t2,t2,a2
     72a:	01039613          	slli	a2,t2,0x10
     72e:	03c2                	slli	t2,t2,0x10
     730:	4103d393          	srai	t2,t2,0x10
     734:	8241                	srli	a2,a2,0x10
        if (err < 0) {
     736:	0003df63          	bgez	t2,754 <tft_draw_line+0x16e>
            err += dx;
     73a:	45b2                	lw	a1,12(sp)
     73c:	00c583b3          	add	t2,a1,a2
            y0 += step;
     740:	4652                	lw	a2,20(sp)
     742:	45a2                	lw	a1,8(sp)
            err += dx;
     744:	03c2                	slli	t2,t2,0x10
     746:	4103d393          	srai	t2,t2,0x10
            y0 += step;
     74a:	00b60333          	add	t1,a2,a1
     74e:	0342                	slli	t1,t1,0x10
     750:	41035313          	srai	t1,t1,0x10
    for (; x0 <= x1; x0++) {
     754:	0405                	addi	s0,s0,1
     756:	01041593          	slli	a1,s0,0x10
     75a:	85c1                	srai	a1,a1,0x10
     75c:	bf3d                	j	69a <tft_draw_line+0xb4>
                tft_draw_pixel(x0, y0 + w, color); // Draw perpendicular pixels for width
     75e:	85aa                	mv	a1,a0
     760:	8522                	mv	a0,s0
     762:	31ad                	jal	3cc <tft_draw_pixel>
     764:	52b2                	lw	t0,44(sp)
     766:	5322                	lw	t1,40(sp)
     768:	5392                	lw	t2,36(sp)
     76a:	5782                	lw	a5,32(sp)
     76c:	4772                	lw	a4,28(sp)
     76e:	46e2                	lw	a3,24(sp)
     770:	b765                	j	718 <tft_draw_line+0x132>

00000772 <tft_draw_rect>:

//! draw rectangle
void tft_draw_rect(
    uint16_t x, uint16_t y,
    uint16_t width, uint16_t height, uint16_t color
) {
     772:	fdc10113          	addi	sp,sp,-36
     776:	ce22                	sw	s0,28(sp)
    _draw_fast_hLine(x, y, width, color);
     778:	01059413          	slli	s0,a1,0x10
) {
     77c:	cc26                	sw	s1,24(sp)
     77e:	87b2                	mv	a5,a2
    _draw_fast_hLine(x, y, width, color);
     780:	8441                	srai	s0,s0,0x10
) {
     782:	84aa                	mv	s1,a0
    _draw_fast_hLine(x, y, width, color);
     784:	0642                	slli	a2,a2,0x10
     786:	0542                	slli	a0,a0,0x10
) {
     788:	c036                	sw	a3,0(sp)
    _draw_fast_hLine(x, y, width, color);
     78a:	8541                	srai	a0,a0,0x10
) {
     78c:	86ba                	mv	a3,a4
    _draw_fast_hLine(x, y, width, color);
     78e:	ca2e                	sw	a1,20(sp)
     790:	8641                	srai	a2,a2,0x10
     792:	85a2                	mv	a1,s0
) {
     794:	d006                	sw	ra,32(sp)
    _draw_fast_hLine(x, y, width, color);
     796:	c23a                	sw	a4,4(sp)
     798:	c83e                	sw	a5,16(sp)
     79a:	c632                	sw	a2,12(sp)
     79c:	c42a                	sw	a0,8(sp)
     79e:	33cd                	jal	580 <_draw_fast_hLine>
    _draw_fast_hLine(x, y + height - 1, width, color);
     7a0:	4782                	lw	a5,0(sp)
     7a2:	4352                	lw	t1,20(sp)
     7a4:	4692                	lw	a3,4(sp)
     7a6:	fff78593          	addi	a1,a5,-1
     7aa:	4632                	lw	a2,12(sp)
     7ac:	4522                	lw	a0,8(sp)
     7ae:	959a                	add	a1,a1,t1
     7b0:	05c2                	slli	a1,a1,0x10
     7b2:	85c1                	srai	a1,a1,0x10
     7b4:	33f1                	jal	580 <_draw_fast_hLine>
    _draw_fast_vLine(x, y, height, color);
     7b6:	00011603          	lh	a2,0(sp)
     7ba:	4692                	lw	a3,4(sp)
     7bc:	4522                	lw	a0,8(sp)
     7be:	85a2                	mv	a1,s0
     7c0:	c032                	sw	a2,0(sp)
     7c2:	3ba9                	jal	51c <_draw_fast_vLine>
    _draw_fast_vLine(x + width - 1, y, height, color);
     7c4:	47c2                	lw	a5,16(sp)
     7c6:	85a2                	mv	a1,s0
}
     7c8:	4472                	lw	s0,28(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     7ca:	fff78513          	addi	a0,a5,-1
     7ce:	4692                	lw	a3,4(sp)
     7d0:	4602                	lw	a2,0(sp)
}
     7d2:	5082                	lw	ra,32(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     7d4:	9526                	add	a0,a0,s1
}
     7d6:	44e2                	lw	s1,24(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     7d8:	0542                	slli	a0,a0,0x10
     7da:	8541                	srai	a0,a0,0x10
}
     7dc:	02410113          	addi	sp,sp,36
    _draw_fast_vLine(x + width - 1, y, height, color);
     7e0:	bb35                	j	51c <_draw_fast_vLine>

000007e2 <rand8>:
 */
uint8_t rand8(void) {
    uint8_t bit;
    uint32_t new_data;

    for(bit=0;bit<NOISE_BITS;bit++) {
     7e2:	c3c1a503          	lw	a0,-964(gp) # 20000038 <lfsr>
uint8_t rand8(void) {
     7e6:	46a1                	li	a3,8
     7e8:	c3c18713          	addi	a4,gp,-964 # 20000038 <lfsr>
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
                                (lfsr>>NOISE_POLY_TAP1) ^
     7ec:	01555613          	srli	a2,a0,0x15
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
     7f0:	01f55793          	srli	a5,a0,0x1f
     7f4:	8fb1                	xor	a5,a5,a2
     7f6:	8fa9                	xor	a5,a5,a0
                                (lfsr>>NOISE_POLY_TAP2) ^
     7f8:	00155613          	srli	a2,a0,0x1
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
     7fc:	8fb1                	xor	a5,a5,a2
                                (lfsr>>NOISE_POLY_TAP3));
        lfsr = (lfsr<<1) | (new_data&1);
     7fe:	8b85                	andi	a5,a5,1
     800:	0506                	slli	a0,a0,0x1
     802:	8d5d                	or	a0,a0,a5
    for(bit=0;bit<NOISE_BITS;bit++) {
     804:	fff68793          	addi	a5,a3,-1 # 4001ffff <_eusrstack+0x2001f7ff>
     808:	0ff7f693          	andi	a3,a5,255
     80c:	f2e5                	bnez	a3,7ec <rand8+0xa>
     80e:	c308                	sw	a0,0(a4)
    }

    return lfsr&NOISE_MASK;
}
     810:	0ff57513          	andi	a0,a0,255
     814:	8082                	ret

00000816 <ld_dword>:
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
     816:	00154783          	lbu	a5,1(a0)
     81a:	00054703          	lbu	a4,0(a0)
     81e:	07a2                	slli	a5,a5,0x8
     820:	8f5d                	or	a4,a4,a5
     822:	00254783          	lbu	a5,2(a0)
     826:	00354503          	lbu	a0,3(a0)
     82a:	07c2                	slli	a5,a5,0x10
     82c:	8fd9                	or	a5,a5,a4
     82e:	0562                	slli	a0,a0,0x18
	return rv;
}
     830:	8d5d                	or	a0,a0,a5
     832:	8082                	ret

00000834 <clust2sect>:
/*-----------------------------------------------------------------------*/

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     834:	1151                	addi	sp,sp,-12
     836:	c222                	sw	s0,4(sp)
	FATFS *fs = FatFs;
     838:	c941a403          	lw	s0,-876(gp) # 20000090 <FatFs>


	clst -= 2;
     83c:	ffe50593          	addi	a1,a0,-2
{
     840:	c406                	sw	ra,8(sp)
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     842:	441c                	lw	a5,8(s0)
     844:	4501                	li	a0,0
     846:	17f9                	addi	a5,a5,-2
     848:	00f5f863          	bgeu	a1,a5,858 <clust2sect+0x24>
	return (DWORD)clst * fs->csize + fs->database;
     84c:	00244503          	lbu	a0,2(s0)
     850:	851ff0ef          	jal	ra,a0 <__mulsi3>
     854:	485c                	lw	a5,20(s0)
     856:	953e                	add	a0,a0,a5
}
     858:	40a2                	lw	ra,8(sp)
     85a:	4412                	lw	s0,4(sp)
     85c:	0131                	addi	sp,sp,12
     85e:	8082                	ret

00000860 <get_clust>:
{
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (PF_FS_FAT32 && fs->fs_type == FS_FAT32)) {
     860:	c941a783          	lw	a5,-876(gp) # 20000090 <FatFs>
     864:	0007c703          	lbu	a4,0(a5)
     868:	478d                	li	a5,3
     86a:	02f71163          	bne	a4,a5,88c <get_clust+0x2c>
		clst = ld_word(dir+DIR_FstClusHI);
     86e:	01554783          	lbu	a5,21(a0)
     872:	01454703          	lbu	a4,20(a0)
     876:	07a2                	slli	a5,a5,0x8
     878:	8fd9                	or	a5,a5,a4
		clst <<= 16;
     87a:	07c2                	slli	a5,a5,0x10
	}
	clst |= ld_word(dir+DIR_FstClusLO);
     87c:	01a54703          	lbu	a4,26(a0)
     880:	01b54503          	lbu	a0,27(a0)
     884:	0522                	slli	a0,a0,0x8
     886:	8d59                	or	a0,a0,a4

	return clst;
}
     888:	8d5d                	or	a0,a0,a5
     88a:	8082                	ret
	CLUST clst = 0;
     88c:	4781                	li	a5,0
     88e:	b7fd                	j	87c <get_clust+0x1c>

00000890 <dir_rewind>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     890:	1151                	addi	sp,sp,-12
     892:	c222                	sw	s0,4(sp)
     894:	c406                	sw	ra,8(sp)
     896:	842a                	mv	s0,a0
	CLUST clst;
	FATFS *fs = FatFs;


	dj->index = 0;
     898:	00051023          	sh	zero,0(a0)
	clst = dj->sclust;
     89c:	4508                	lw	a0,8(a0)
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
     89e:	4705                	li	a4,1
	FATFS *fs = FatFs;
     8a0:	c941a783          	lw	a5,-876(gp) # 20000090 <FatFs>
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
     8a4:	02e50563          	beq	a0,a4,8ce <dir_rewind+0x3e>
     8a8:	4798                	lw	a4,8(a5)
     8aa:	02e57663          	bgeu	a0,a4,8d6 <dir_rewind+0x46>
		return FR_DISK_ERR;
	}
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
     8ae:	e919                	bnez	a0,8c4 <dir_rewind+0x34>
     8b0:	0007c683          	lbu	a3,0(a5)
     8b4:	470d                	li	a4,3
		clst = (CLUST)fs->dirbase;
     8b6:	4b88                	lw	a0,16(a5)
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
     8b8:	00e68663          	beq	a3,a4,8c4 <dir_rewind+0x34>
	}
	dj->clust = clst;						/* Current cluster */
     8bc:	00042623          	sw	zero,12(s0)
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     8c0:	4b88                	lw	a0,16(a5)
     8c2:	a021                	j	8ca <dir_rewind+0x3a>
	dj->clust = clst;						/* Current cluster */
     8c4:	c448                	sw	a0,12(s0)
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     8c6:	dd6d                	beqz	a0,8c0 <dir_rewind+0x30>
     8c8:	37b5                	jal	834 <clust2sect>
     8ca:	c808                	sw	a0,16(s0)

	return FR_OK;	/* Seek succeeded */
     8cc:	4501                	li	a0,0
}
     8ce:	40a2                	lw	ra,8(sp)
     8d0:	4412                	lw	s0,4(sp)
     8d2:	0131                	addi	sp,sp,12
     8d4:	8082                	ret
		return FR_DISK_ERR;
     8d6:	4505                	li	a0,1
     8d8:	bfdd                	j	8ce <dir_rewind+0x3e>

000008da <SPI_set_prescaler>:
static inline uint8_t SPI_is_RX_empty();
static inline void SPI_wait_RX_available();

void SPI_set_prescaler(uint8_t presc)
{
    SPI1->CTLR1 &= ~SPI_CTLR1_BR;
     8da:	40013737          	lui	a4,0x40013
     8de:	00075783          	lhu	a5,0(a4) # 40013000 <_eusrstack+0x20012800>
    SPI1->CTLR1 |= SPI_CTLR1_BR & (presc << 3);
     8e2:	050e                	slli	a0,a0,0x3
    SPI1->CTLR1 &= ~SPI_CTLR1_BR;
     8e4:	07c2                	slli	a5,a5,0x10
     8e6:	83c1                	srli	a5,a5,0x10
     8e8:	fc77f793          	andi	a5,a5,-57
     8ec:	07c2                	slli	a5,a5,0x10
     8ee:	83c1                	srli	a5,a5,0x10
     8f0:	00f71023          	sh	a5,0(a4)
    SPI1->CTLR1 |= SPI_CTLR1_BR & (presc << 3);
     8f4:	00075783          	lhu	a5,0(a4)
     8f8:	07c2                	slli	a5,a5,0x10
     8fa:	83c1                	srli	a5,a5,0x10
     8fc:	8d5d                	or	a0,a0,a5
     8fe:	00a71023          	sh	a0,0(a4)
}
     902:	8082                	ret

00000904 <SPI_transfer_8>:
    return SPI1->DATAR;
}

static inline void SPI_write_8(uint8_t data)
{
    SPI1->DATAR = data;
     904:	400137b7          	lui	a5,0x40013
     908:	00a79623          	sh	a0,12(a5) # 4001300c <_eusrstack+0x2001280c>
}

// ########  small internal function definitions, static inline
static inline void SPI_wait_TX_complete()
{
    while (!(SPI1->STATR & SPI_STATR_TXE))
     90c:	40013737          	lui	a4,0x40013
     910:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     914:	8b89                	andi	a5,a5,2
     916:	dfed                	beqz	a5,910 <SPI_transfer_8+0xc>
    asm volatile("nop");
     918:	0001                	nop
{
    return SPI1->STATR & SPI_STATR_RXNE;
}
static inline void SPI_wait_RX_available()
{
    while (!(SPI1->STATR & SPI_STATR_RXNE))
     91a:	40013737          	lui	a4,0x40013
     91e:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     922:	8b85                	andi	a5,a5,1
     924:	dfed                	beqz	a5,91e <SPI_transfer_8+0x1a>
    return SPI1->DATAR;
     926:	00c75503          	lhu	a0,12(a4)
}
     92a:	0ff57513          	andi	a0,a0,255
     92e:	8082                	ret

00000930 <rcvr_mmc>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_mmc (void)
{
	BYTE r = SPI_transfer_8(0xFF);
     930:	0ff00513          	li	a0,255
     934:	bfc1                	j	904 <SPI_transfer_8>

00000936 <skip_mmc>:

static
void skip_mmc (
	UINT n		/* Number of bytes to skip */
)
{
     936:	1151                	addi	sp,sp,-12
     938:	c222                	sw	s0,4(sp)
     93a:	c406                	sw	ra,8(sp)
     93c:	842a                	mv	s0,a0
	do {
		SPI_transfer_8(0xFF);
     93e:	0ff00513          	li	a0,255
	} while (--n);	
     942:	147d                	addi	s0,s0,-1
		SPI_transfer_8(0xFF);
     944:	37c1                	jal	904 <SPI_transfer_8>
	} while (--n);	
     946:	fc65                	bnez	s0,93e <skip_mmc+0x8>
}
     948:	40a2                	lw	ra,8(sp)
     94a:	4412                	lw	s0,4(sp)
     94c:	0131                	addi	sp,sp,12
     94e:	8082                	ret

00000950 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     950:	1151                	addi	sp,sp,-12
	BYTE n, res;

	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     952:	01851793          	slli	a5,a0,0x18
{
     956:	c222                	sw	s0,4(sp)
     958:	c026                	sw	s1,0(sp)
     95a:	c406                	sw	ra,8(sp)
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     95c:	87e1                	srai	a5,a5,0x18
{
     95e:	84aa                	mv	s1,a0
     960:	842e                	mv	s0,a1
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     962:	0007db63          	bgez	a5,978 <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     966:	4581                	li	a1,0
     968:	07700513          	li	a0,119
     96c:	37d5                	jal	950 <send_cmd>
		if (res > 1) return res;
     96e:	4785                	li	a5,1
     970:	06a7e963          	bltu	a5,a0,9e2 <send_cmd+0x92>
		cmd &= 0x7F;
     974:	07f4f493          	andi	s1,s1,127
	}

	/* Select the card */
	CS_H(); rcvr_mmc();
     978:	400117b7          	lui	a5,0x40011
     97c:	4705                	li	a4,1
     97e:	cb98                	sw	a4,16(a5)
     980:	3f45                	jal	930 <rcvr_mmc>
	CS_L(); rcvr_mmc();
     982:	400117b7          	lui	a5,0x40011
     986:	6741                	lui	a4,0x10
     988:	cb98                	sw	a4,16(a5)
     98a:	375d                	jal	930 <rcvr_mmc>
	SPI_transfer_8(d);
     98c:	8526                	mv	a0,s1
     98e:	3f9d                	jal	904 <SPI_transfer_8>
     990:	01845513          	srli	a0,s0,0x18
     994:	3f85                	jal	904 <SPI_transfer_8>

	/* Send a command packet */
	xmit_mmc(cmd);					/* Start + Command index */
	xmit_mmc((BYTE)(arg >> 24));	/* Argument[31..24] */
	xmit_mmc((BYTE)(arg >> 16));	/* Argument[23..16] */
     996:	01045513          	srli	a0,s0,0x10
	SPI_transfer_8(d);
     99a:	0ff57513          	andi	a0,a0,255
     99e:	379d                	jal	904 <SPI_transfer_8>
	xmit_mmc((BYTE)(arg >> 8));		/* Argument[15..8] */
     9a0:	00845513          	srli	a0,s0,0x8
	SPI_transfer_8(d);
     9a4:	0ff57513          	andi	a0,a0,255
     9a8:	3fb1                	jal	904 <SPI_transfer_8>
     9aa:	0ff47513          	andi	a0,s0,255
     9ae:	3f99                	jal	904 <SPI_transfer_8>
	xmit_mmc((BYTE)arg);			/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* Valid CRC for CMD0(0) */
     9b0:	04000793          	li	a5,64
     9b4:	09500513          	li	a0,149
     9b8:	00f48963          	beq	s1,a5,9ca <send_cmd+0x7a>
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) */
     9bc:	04800793          	li	a5,72
	n = 0x01;						/* Dummy CRC + Stop */
     9c0:	4505                	li	a0,1
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) */
     9c2:	00f49463          	bne	s1,a5,9ca <send_cmd+0x7a>
     9c6:	08700513          	li	a0,135
	SPI_transfer_8(d);
     9ca:	3f2d                	jal	904 <SPI_transfer_8>
     9cc:	4429                	li	s0,10
	xmit_mmc(n);

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcvr_mmc();
     9ce:	378d                	jal	930 <rcvr_mmc>
	} while ((res & 0x80) && --n);
     9d0:	01851793          	slli	a5,a0,0x18
     9d4:	87e1                	srai	a5,a5,0x18
     9d6:	0007d663          	bgez	a5,9e2 <send_cmd+0x92>
     9da:	147d                	addi	s0,s0,-1
     9dc:	0ff47413          	andi	s0,s0,255
     9e0:	f47d                	bnez	s0,9ce <send_cmd+0x7e>

	return res;			/* Return with the response value */
}
     9e2:	40a2                	lw	ra,8(sp)
     9e4:	4412                	lw	s0,4(sp)
     9e6:	4482                	lw	s1,0(sp)
     9e8:	0131                	addi	sp,sp,12
     9ea:	8082                	ret

000009ec <disk_readp>:
	DRESULT res;
	BYTE d;
	UINT bc, tmr;


	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     9ec:	c901c783          	lbu	a5,-880(gp) # 2000008c <CardType>
{
     9f0:	1131                	addi	sp,sp,-20
     9f2:	c622                	sw	s0,12(sp)
     9f4:	c426                	sw	s1,8(sp)
     9f6:	c806                	sw	ra,16(sp)
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     9f8:	8ba1                	andi	a5,a5,8
{
     9fa:	84aa                	mv	s1,a0
     9fc:	8436                	mv	s0,a3
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     9fe:	e391                	bnez	a5,a02 <disk_readp+0x16>
     a00:	05a6                	slli	a1,a1,0x9

	res = RES_ERROR;
	if (send_cmd(CMD17, sector) == 0) {		/* READ_SINGLE_BLOCK */
     a02:	05100513          	li	a0,81
     a06:	c032                	sw	a2,0(sp)
     a08:	37a1                	jal	950 <send_cmd>
     a0a:	4602                	lw	a2,0(sp)
     a0c:	cd09                	beqz	a0,a26 <disk_readp+0x3a>
	res = RES_ERROR;
     a0e:	4405                	li	s0,1
	CS_H();
     a10:	400117b7          	lui	a5,0x40011
     a14:	4705                	li	a4,1
     a16:	cb98                	sw	a4,16(a5)
	rcvr_mmc();
     a18:	3f21                	jal	930 <rcvr_mmc>
	}

	release_spi();

	return res;
}
     a1a:	40c2                	lw	ra,16(sp)
     a1c:	8522                	mv	a0,s0
     a1e:	4432                	lw	s0,12(sp)
     a20:	44a2                	lw	s1,8(sp)
     a22:	0151                	addi	sp,sp,20
     a24:	8082                	ret
			DLY_US(100);
     a26:	6705                	lui	a4,0x1
	if (send_cmd(CMD17, sector) == 0) {		/* READ_SINGLE_BLOCK */
     a28:	3e800793          	li	a5,1000
			DLY_US(100);
     a2c:	2c070713          	addi	a4,a4,704 # 12c0 <memset+0x10>
     a30:	853a                	mv	a0,a4
     a32:	c232                	sw	a2,4(sp)
     a34:	c03e                	sw	a5,0(sp)
     a36:	837ff0ef          	jal	ra,26c <DelaySysTick>
			d = rcvr_mmc();
     a3a:	3ddd                	jal	930 <rcvr_mmc>
		} while (d == 0xFF && --tmr);
     a3c:	0ff00693          	li	a3,255
     a40:	4612                	lw	a2,4(sp)
     a42:	00d51963          	bne	a0,a3,a54 <disk_readp+0x68>
     a46:	4782                	lw	a5,0(sp)
     a48:	6705                	lui	a4,0x1
     a4a:	2c070713          	addi	a4,a4,704 # 12c0 <memset+0x10>
     a4e:	17fd                	addi	a5,a5,-1
     a50:	f3e5                	bnez	a5,a30 <disk_readp+0x44>
     a52:	bf75                	j	a0e <disk_readp+0x22>
		if (d == 0xFE) {				/* A data packet arrived */
     a54:	0fe00793          	li	a5,254
     a58:	faf51be3          	bne	a0,a5,a0e <disk_readp+0x22>
			bc = 514 - offset - count;
     a5c:	20200793          	li	a5,514
     a60:	8f81                	sub	a5,a5,s0
     a62:	8f91                	sub	a5,a5,a2
     a64:	c03e                	sw	a5,0(sp)
			if (offset) skip_mmc(offset);
     a66:	c219                	beqz	a2,a6c <disk_readp+0x80>
     a68:	8532                	mv	a0,a2
     a6a:	35f1                	jal	936 <skip_mmc>
			if (buff) {	/* Store data to the memory */
     a6c:	cc81                	beqz	s1,a84 <disk_readp+0x98>
     a6e:	9426                	add	s0,s0,s1
					*buff++ = rcvr_mmc();
     a70:	0485                	addi	s1,s1,1
     a72:	3d7d                	jal	930 <rcvr_mmc>
     a74:	fea48fa3          	sb	a0,-1(s1)
				while (--count);
     a78:	fe849ce3          	bne	s1,s0,a70 <disk_readp+0x84>
			skip_mmc(bc);
     a7c:	4502                	lw	a0,0(sp)
			res = RES_OK;
     a7e:	4401                	li	s0,0
			skip_mmc(bc);
     a80:	3d5d                	jal	936 <skip_mmc>
			res = RES_OK;
     a82:	b779                	j	a10 <disk_readp+0x24>
				} while (--count);
     a84:	147d                	addi	s0,s0,-1
					d = rcvr_mmc();
     a86:	356d                	jal	930 <rcvr_mmc>
				} while (--count);
     a88:	fc75                	bnez	s0,a84 <disk_readp+0x98>
     a8a:	bfcd                	j	a7c <disk_readp+0x90>

00000a8c <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     a8c:	4785                	li	a5,1
     a8e:	00a7e463          	bltu	a5,a0,a96 <get_fat+0xa>
     a92:	4505                	li	a0,1
}
     a94:	8082                	ret
	FATFS *fs = FatFs;
     a96:	c941a783          	lw	a5,-876(gp) # 20000090 <FatFs>
	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     a9a:	4798                	lw	a4,8(a5)
     a9c:	fee57be3          	bgeu	a0,a4,a92 <get_fat+0x6>
{
     aa0:	1141                	addi	sp,sp,-16
     aa2:	c606                	sw	ra,12(sp)
	switch (fs->fs_type) {
     aa4:	0007c703          	lbu	a4,0(a5) # 40011000 <_eusrstack+0x20010800>
     aa8:	4689                	li	a3,2
     aaa:	00d70963          	beq	a4,a3,abc <get_fat+0x30>
     aae:	468d                	li	a3,3
     ab0:	02d70363          	beq	a4,a3,ad6 <get_fat+0x4a>
     ab4:	4505                	li	a0,1
}
     ab6:	40b2                	lw	ra,12(sp)
     ab8:	0141                	addi	sp,sp,16
     aba:	8082                	ret
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
     abc:	47cc                	lw	a1,12(a5)
     abe:	0ff57613          	andi	a2,a0,255
     ac2:	8121                	srli	a0,a0,0x8
     ac4:	95aa                	add	a1,a1,a0
     ac6:	4689                	li	a3,2
     ac8:	0606                	slli	a2,a2,0x1
     aca:	850a                	mv	a0,sp
     acc:	3705                	jal	9ec <disk_readp>
     ace:	f17d                	bnez	a0,ab4 <get_fat+0x28>
		return ld_word(buf);
     ad0:	00015503          	lhu	a0,0(sp)
     ad4:	b7cd                	j	ab6 <get_fat+0x2a>
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
     ad6:	47cc                	lw	a1,12(a5)
     ad8:	07f57613          	andi	a2,a0,127
     adc:	811d                	srli	a0,a0,0x7
     ade:	95aa                	add	a1,a1,a0
     ae0:	4691                	li	a3,4
     ae2:	060a                	slli	a2,a2,0x2
     ae4:	850a                	mv	a0,sp
     ae6:	3719                	jal	9ec <disk_readp>
     ae8:	f571                	bnez	a0,ab4 <get_fat+0x28>
		return ld_dword(buf) & 0x0FFFFFFF;
     aea:	850a                	mv	a0,sp
     aec:	332d                	jal	816 <ld_dword>
     aee:	0512                	slli	a0,a0,0x4
     af0:	8111                	srli	a0,a0,0x4
     af2:	b7d1                	j	ab6 <get_fat+0x2a>

00000af4 <check_fs>:

static BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     af4:	1151                	addi	sp,sp,-12
	if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
     af6:	4689                	li	a3,2
     af8:	1fe00613          	li	a2,510
{
     afc:	c222                	sw	s0,4(sp)
     afe:	c026                	sw	s1,0(sp)
     b00:	c406                	sw	ra,8(sp)
     b02:	84aa                	mv	s1,a0
     b04:	842e                	mv	s0,a1
	if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
     b06:	35dd                	jal	9ec <disk_readp>
		return 3;
     b08:	478d                	li	a5,3
	if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
     b0a:	e525                	bnez	a0,b72 <check_fs+0x7e>
	}
	if (ld_word(buf) != 0xAA55) {			/* Check record signature */
     b0c:	0014c703          	lbu	a4,1(s1)
     b10:	0004c783          	lbu	a5,0(s1)
     b14:	66ad                	lui	a3,0xb
     b16:	0722                	slli	a4,a4,0x8
     b18:	8f5d                	or	a4,a4,a5
     b1a:	a5568693          	addi	a3,a3,-1451 # aa55 <lib_i2c.c.d894f163+0xc43>
		return 2;
     b1e:	4789                	li	a5,2
	if (ld_word(buf) != 0xAA55) {			/* Check record signature */
     b20:	04d71963          	bne	a4,a3,b72 <check_fs+0x7e>
	}

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
     b24:	4689                	li	a3,2
     b26:	03600613          	li	a2,54
     b2a:	85a2                	mv	a1,s0
     b2c:	8526                	mv	a0,s1
     b2e:	3d7d                	jal	9ec <disk_readp>
     b30:	ed09                	bnez	a0,b4a <check_fs+0x56>
     b32:	0014c703          	lbu	a4,1(s1)
     b36:	0004c783          	lbu	a5,0(s1)
     b3a:	6691                	lui	a3,0x4
     b3c:	0722                	slli	a4,a4,0x8
     b3e:	8f5d                	or	a4,a4,a5
     b40:	14668693          	addi	a3,a3,326 # 4146 <ch32fun.c.963ac852+0x29c>
		return 0;
     b44:	4781                	li	a5,0
	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
     b46:	02d70663          	beq	a4,a3,b72 <check_fs+0x7e>
	}
	if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
     b4a:	4689                	li	a3,2
     b4c:	05200613          	li	a2,82
     b50:	85a2                	mv	a1,s0
     b52:	8526                	mv	a0,s1
     b54:	3d61                	jal	9ec <disk_readp>
		return 0;
	}
	return 1;
     b56:	4785                	li	a5,1
	if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
     b58:	ed09                	bnez	a0,b72 <check_fs+0x7e>
     b5a:	0014c783          	lbu	a5,1(s1)
     b5e:	0004c503          	lbu	a0,0(s1)
     b62:	07a2                	slli	a5,a5,0x8
     b64:	8fc9                	or	a5,a5,a0
     b66:	7571                	lui	a0,0xffffc
     b68:	eba50513          	addi	a0,a0,-326 # ffffbeba <_eusrstack+0xdfffb6ba>
     b6c:	97aa                	add	a5,a5,a0
		return 3;
     b6e:	00f037b3          	snez	a5,a5
}
     b72:	40a2                	lw	ra,8(sp)
     b74:	4412                	lw	s0,4(sp)
     b76:	4482                	lw	s1,0(sp)
     b78:	853e                	mv	a0,a5
     b7a:	0131                	addi	sp,sp,12
     b7c:	8082                	ret

00000b7e <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     b7e:	400057b7          	lui	a5,0x40005
     b82:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     b86:	40078793          	addi	a5,a5,1024
     b8a:	10077713          	andi	a4,a4,256
     b8e:	cf09                	beqz	a4,ba8 <i2c_error+0x2a>
     b90:	0147d703          	lhu	a4,20(a5)
     b94:	4505                	li	a0,1
     b96:	0742                	slli	a4,a4,0x10
     b98:	8341                	srli	a4,a4,0x10
     b9a:	eff77713          	andi	a4,a4,-257
     b9e:	0742                	slli	a4,a4,0x10
     ba0:	8341                	srli	a4,a4,0x10
     ba2:	00e79a23          	sh	a4,20(a5)
     ba6:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     ba8:	0147d703          	lhu	a4,20(a5)
     bac:	40077713          	andi	a4,a4,1024
     bb0:	cf09                	beqz	a4,bca <i2c_error+0x4c>
     bb2:	0147d703          	lhu	a4,20(a5)
     bb6:	4509                	li	a0,2
     bb8:	0742                	slli	a4,a4,0x10
     bba:	8341                	srli	a4,a4,0x10
     bbc:	bff77713          	andi	a4,a4,-1025
     bc0:	0742                	slli	a4,a4,0x10
     bc2:	8341                	srli	a4,a4,0x10
     bc4:	00e79a23          	sh	a4,20(a5)
     bc8:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     bca:	0147d703          	lhu	a4,20(a5)
     bce:	20077713          	andi	a4,a4,512
     bd2:	cf09                	beqz	a4,bec <i2c_error+0x6e>
     bd4:	0147d703          	lhu	a4,20(a5)
     bd8:	450d                	li	a0,3
     bda:	0742                	slli	a4,a4,0x10
     bdc:	8341                	srli	a4,a4,0x10
     bde:	dff77713          	andi	a4,a4,-513
     be2:	0742                	slli	a4,a4,0x10
     be4:	8341                	srli	a4,a4,0x10
     be6:	00e79a23          	sh	a4,20(a5)
     bea:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     bec:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     bf0:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     bf2:	832d                	srli	a4,a4,0xb
     bf4:	8b05                	andi	a4,a4,1
     bf6:	cf01                	beqz	a4,c0e <i2c_error+0x90>
     bf8:	0147d703          	lhu	a4,20(a5)
     bfc:	76fd                	lui	a3,0xfffff
     bfe:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     c02:	0742                	slli	a4,a4,0x10
     c04:	8341                	srli	a4,a4,0x10
     c06:	8f75                	and	a4,a4,a3
     c08:	00e79a23          	sh	a4,20(a5)
     c0c:	4511                	li	a0,4
}
     c0e:	8082                	ret

00000c10 <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     c10:	415c                	lw	a5,4(a0)
     c12:	e7b1                	bnez	a5,c5e <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     c14:	00855783          	lhu	a5,8(a0)
     c18:	40005737          	lui	a4,0x40005
     c1c:	0786                	slli	a5,a5,0x1
     c1e:	0fe7f793          	andi	a5,a5,254
     c22:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     c26:	6789                	lui	a5,0x2
     c28:	71078793          	addi	a5,a5,1808 # 2710 <main+0x121e>
	return (status & status_mask) == status_mask; 
     c2c:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     c30:	caf1a423          	sw	a5,-856(gp) # 200000a4 <_i2c_timeout>
     c34:	4501                	li	a0,0
     c36:	ca818693          	addi	a3,gp,-856 # 200000a4 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     c3a:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     c3e:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.d894f163+0x66270>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     c42:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     c46:	01071593          	slli	a1,a4,0x10
     c4a:	41835703          	lhu	a4,1048(t1)
     c4e:	81c1                	srli	a1,a1,0x10
     c50:	0742                	slli	a4,a4,0x10
     c52:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     c54:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     c56:	00c71663          	bne	a4,a2,c62 <i2c_send_addr_write+0x52>
     c5a:	c111                	beqz	a0,c5e <i2c_send_addr_write+0x4e>
     c5c:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     c5e:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     c60:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     c62:	17fd                	addi	a5,a5,-1
     c64:	4505                	li	a0,1
     c66:	fff1                	bnez	a5,c42 <i2c_send_addr_write+0x32>
{
     c68:	1151                	addi	sp,sp,-12
     c6a:	c406                	sw	ra,8(sp)
     c6c:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     c70:	3739                	jal	b7e <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     c72:	e111                	bnez	a0,c76 <i2c_send_addr_write+0x66>
     c74:	4515                	li	a0,5
}
     c76:	40a2                	lw	ra,8(sp)
     c78:	0131                	addi	sp,sp,12
     c7a:	8082                	ret

00000c7c <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     c7c:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     c7e:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     c80:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     c82:	71078793          	addi	a5,a5,1808 # 2710 <main+0x121e>
     c86:	caf1a423          	sw	a5,-856(gp) # 200000a4 <_i2c_timeout>
{
     c8a:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     c8c:	c002                	sw	zero,0(sp)
     c8e:	c202                	sw	zero,4(sp)
     c90:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     c94:	4601                	li	a2,0
     c96:	ca818713          	addi	a4,gp,-856 # 200000a4 <_i2c_timeout>
     c9a:	400055b7          	lui	a1,0x40005
     c9e:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     ca2:	8a89                	andi	a3,a3,2
     ca4:	e689                	bnez	a3,cae <i2c_ping+0x32>
     ca6:	c211                	beqz	a2,caa <i2c_ping+0x2e>
     ca8:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
     caa:	4501                	li	a0,0
     cac:	a809                	j	cbe <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     cae:	17fd                	addi	a5,a5,-1
     cb0:	4605                	li	a2,1
     cb2:	f7f5                	bnez	a5,c9e <i2c_ping+0x22>
     cb4:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
     cb8:	35d9                	jal	b7e <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     cba:	e111                	bnez	a0,cbe <i2c_ping+0x42>
     cbc:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     cbe:	40005737          	lui	a4,0x40005
     cc2:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     cc6:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     cca:	07c2                	slli	a5,a5,0x10
     ccc:	83c1                	srli	a5,a5,0x10
     cce:	1007e793          	ori	a5,a5,256
     cd2:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     cd6:	00030737          	lui	a4,0x30
     cda:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     cdc:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     ce0:	01079693          	slli	a3,a5,0x10
     ce4:	4185d783          	lhu	a5,1048(a1)
     ce8:	82c1                	srli	a3,a3,0x10
     cea:	07c2                	slli	a5,a5,0x10
     cec:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     cee:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     cf0:	fee796e3          	bne	a5,a4,cdc <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     cf4:	e119                	bnez	a0,cfa <i2c_ping+0x7e>
     cf6:	850a                	mv	a0,sp
     cf8:	3f21                	jal	c10 <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     cfa:	40005737          	lui	a4,0x40005
     cfe:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     d02:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     d04:	07c2                	slli	a5,a5,0x10
     d06:	83c1                	srli	a5,a5,0x10
     d08:	2007e793          	ori	a5,a5,512
     d0c:	40f71023          	sh	a5,1024(a4)
}
     d10:	0161                	addi	sp,sp,24
     d12:	8082                	ret

00000d14 <i2c_write_raw.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     d14:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     d16:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     d18:	71078793          	addi	a5,a5,1808 # 2710 <main+0x121e>
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     d1c:	c626                	sw	s1,12(sp)
     d1e:	c22e                	sw	a1,4(sp)
     d20:	ca06                	sw	ra,20(sp)
     d22:	c822                	sw	s0,16(sp)
     d24:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     d26:	caf1a423          	sw	a5,-856(gp) # 200000a4 <_i2c_timeout>
     d2a:	4601                	li	a2,0
     d2c:	ca818493          	addi	s1,gp,-856 # 200000a4 <_i2c_timeout>
     d30:	400055b7          	lui	a1,0x40005
     d34:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     d38:	8a89                	andi	a3,a3,2
     d3a:	e6bd                	bnez	a3,da8 <i2c_write_raw.constprop.0+0x94>
     d3c:	c211                	beqz	a2,d40 <i2c_write_raw.constprop.0+0x2c>
     d3e:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     d40:	400056b7          	lui	a3,0x40005
     d44:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     d48:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     d4c:	07c2                	slli	a5,a5,0x10
     d4e:	83c1                	srli	a5,a5,0x10
     d50:	1007e793          	ori	a5,a5,256
     d54:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     d58:	000306b7          	lui	a3,0x30
     d5c:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     d5e:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     d62:	01079613          	slli	a2,a5,0x10
     d66:	4185d783          	lhu	a5,1048(a1)
     d6a:	8241                	srli	a2,a2,0x10
     d6c:	07c2                	slli	a5,a5,0x10
     d6e:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     d70:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     d72:	fed796e3          	bne	a5,a3,d5e <i2c_write_raw.constprop.0+0x4a>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     d76:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
     d7a:	3d59                	jal	c10 <i2c_send_addr_write>
     d7c:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     d7e:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
     d80:	e91d                	bnez	a0,db6 <i2c_write_raw.constprop.0+0xa2>
		while(cbyte < len)
     d82:	4792                	lw	a5,4(sp)
     d84:	02f67963          	bgeu	a2,a5,db6 <i2c_write_raw.constprop.0+0xa2>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     d88:	6689                	lui	a3,0x2
     d8a:	71068693          	addi	a3,a3,1808 # 2710 <main+0x121e>
     d8e:	c094                	sw	a3,0(s1)
     d90:	4501                	li	a0,0
     d92:	40005337          	lui	t1,0x40005
     d96:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     d9a:	0805f593          	andi	a1,a1,128
     d9e:	c5b9                	beqz	a1,dec <i2c_write_raw.constprop.0+0xd8>
     da0:	c111                	beqz	a0,da4 <i2c_write_raw.constprop.0+0x90>
     da2:	c094                	sw	a3,0(s1)
     da4:	4501                	li	a0,0
     da6:	a8a9                	j	e00 <i2c_write_raw.constprop.0+0xec>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     da8:	17fd                	addi	a5,a5,-1
     daa:	4605                	li	a2,1
     dac:	f7c1                	bnez	a5,d34 <i2c_write_raw.constprop.0+0x20>
	i2c_err_t i2c_err = i2c_error();
     dae:	3bc1                	jal	b7e <i2c_error>
     db0:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     db2:	e111                	bnez	a0,db6 <i2c_write_raw.constprop.0+0xa2>
     db4:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     db6:	6689                	lui	a3,0x2
     db8:	71068693          	addi	a3,a3,1808 # 2710 <main+0x121e>
	return (status & status_mask) == status_mask; 
     dbc:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     dc0:	c094                	sw	a3,0(s1)
     dc2:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     dc4:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     dc8:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.d894f163+0x66272>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     dcc:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     dd0:	01061513          	slli	a0,a2,0x10
     dd4:	4182d603          	lhu	a2,1048(t0)
     dd8:	8141                	srli	a0,a0,0x10
     dda:	0642                	slli	a2,a2,0x10
     ddc:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     dde:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     de0:	04b61363          	bne	a2,a1,e26 <i2c_write_raw.constprop.0+0x112>
     de4:	04030a63          	beqz	t1,e38 <i2c_write_raw.constprop.0+0x124>
     de8:	c094                	sw	a3,0(s1)
     dea:	a0b9                	j	e38 <i2c_write_raw.constprop.0+0x124>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     dec:	16fd                	addi	a3,a3,-1
     dee:	4505                	li	a0,1
     df0:	f2dd                	bnez	a3,d96 <i2c_write_raw.constprop.0+0x82>
     df2:	c432                	sw	a2,8(sp)
     df4:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     df8:	3359                	jal	b7e <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     dfa:	4622                	lw	a2,8(sp)
     dfc:	e111                	bnez	a0,e00 <i2c_write_raw.constprop.0+0xec>
     dfe:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     e00:	4782                	lw	a5,0(sp)
     e02:	00c786b3          	add	a3,a5,a2
     e06:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     e0a:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     e0c:	400056b7          	lui	a3,0x40005
     e10:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     e14:	0ff67613          	andi	a2,a2,255
     e18:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     e1a:	e501                	bnez	a0,e22 <i2c_write_raw.constprop.0+0x10e>
     e1c:	338d                	jal	b7e <i2c_error>
     e1e:	4622                	lw	a2,8(sp)
     e20:	d12d                	beqz	a0,d82 <i2c_write_raw.constprop.0+0x6e>
     e22:	842a                	mv	s0,a0
     e24:	bf49                	j	db6 <i2c_write_raw.constprop.0+0xa2>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     e26:	16fd                	addi	a3,a3,-1
     e28:	4305                	li	t1,1
     e2a:	f2cd                	bnez	a3,dcc <i2c_write_raw.constprop.0+0xb8>
     e2c:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     e30:	33b9                	jal	b7e <i2c_error>
     e32:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     e34:	e111                	bnez	a0,e38 <i2c_write_raw.constprop.0+0x124>
     e36:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     e38:	400056b7          	lui	a3,0x40005
     e3c:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     e40:	40d2                	lw	ra,20(sp)
     e42:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     e44:	0742                	slli	a4,a4,0x10
}
     e46:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     e48:	8341                	srli	a4,a4,0x10
     e4a:	20076713          	ori	a4,a4,512
     e4e:	40e69023          	sh	a4,1024(a3)
}
     e52:	44b2                	lw	s1,12(sp)
     e54:	0161                	addi	sp,sp,24
     e56:	8082                	ret

00000e58 <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     e58:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     e5a:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     e5e:	4589                	li	a1,2
     e60:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     e62:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     e64:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     e68:	3575                	jal	d14 <i2c_write_raw.constprop.0>
}
     e6a:	40b2                	lw	ra,12(sp)
     e6c:	0ff57513          	andi	a0,a0,255
     e70:	0141                	addi	sp,sp,16
     e72:	8082                	ret

00000e74 <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     e74:	e00007b7          	lui	a5,0xe0000
     e78:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
}
     e7c:	8082                	ret

00000e7e <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     e7e:	e0000737          	lui	a4,0xe0000
     e82:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     e86:	1111                	addi	sp,sp,-28
     e88:	cc06                	sw	ra,24(sp)
     e8a:	ca22                	sw	s0,20(sp)
     e8c:	c826                	sw	s1,16(sp)
     e8e:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     e90:	0c07f793          	andi	a5,a5,192
     e94:	0c000693          	li	a3,192
     e98:	0cd78863          	beq	a5,a3,f68 <_write.constprop.0+0xea>
	char buffer[4] = { 0 };
     e9c:	c602                	sw	zero,12(sp)
     e9e:	842e                	mv	s0,a1
	if( size == 0 )
     ea0:	e5f1                	bnez	a1,f6c <_write.constprop.0+0xee>
		lastdmd = (*DMDATA0);
     ea2:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     ea6:	c789                	beqz	a5,eb0 <_write.constprop.0+0x32>
     ea8:	0807f793          	andi	a5,a5,128
     eac:	e391                	bnez	a5,eb0 <_write.constprop.0+0x32>
     eae:	37d9                	jal	e74 <internal_handle_input.constprop.0>
}
     eb0:	40e2                	lw	ra,24(sp)
     eb2:	8522                	mv	a0,s0
     eb4:	4452                	lw	s0,20(sp)
     eb6:	44c2                	lw	s1,16(sp)
     eb8:	0171                	addi	sp,sp,28
     eba:	8082                	ret
		int tosend = size - place;
     ebc:	409405b3          	sub	a1,s0,s1
     ec0:	469d                	li	a3,7
     ec2:	872e                	mv	a4,a1
     ec4:	00b6d363          	bge	a3,a1,eca <_write.constprop.0+0x4c>
     ec8:	471d                	li	a4,7
     eca:	001006b7          	lui	a3,0x100
     ece:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     ed0:	e0000537          	lui	a0,0xe0000
     ed4:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     ed8:	0f450313          	addi	t1,a0,244
     edc:	08067293          	andi	t0,a2,128
     ee0:	06029c63          	bnez	t0,f58 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     ee4:	c611                	beqz	a2,ef0 <_write.constprop.0+0x72>
     ee6:	c43a                	sw	a4,8(sp)
     ee8:	c22e                	sw	a1,4(sp)
     eea:	3769                	jal	e74 <internal_handle_input.constprop.0>
     eec:	4722                	lw	a4,8(sp)
     eee:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     ef0:	4689                	li	a3,2
     ef2:	4601                	li	a2,0
     ef4:	00b6d463          	bge	a3,a1,efc <_write.constprop.0+0x7e>
     ef8:	ffd70613          	addi	a2,a4,-3
     efc:	4782                	lw	a5,0(sp)
     efe:	00348593          	addi	a1,s1,3
     f02:	0068                	addi	a0,sp,12
     f04:	95be                	add	a1,a1,a5
     f06:	c23a                	sw	a4,4(sp)
     f08:	26f9                	jal	12d6 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     f0a:	4632                	lw	a2,12(sp)
     f0c:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     f0e:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     f10:	e00006b7          	lui	a3,0xe0000
     f14:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     f18:	458d                	li	a1,3
     f1a:	00978633          	add	a2,a5,s1
		t = 0;
     f1e:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     f20:	00064303          	lbu	t1,0(a2)
     f24:	0685                	addi	a3,a3,1
     f26:	007c                	addi	a5,sp,12
     f28:	00d78533          	add	a0,a5,a3
     f2c:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     f30:	00d70563          	beq	a4,a3,f3a <_write.constprop.0+0xbc>
     f34:	0605                	addi	a2,a2,1
     f36:	feb695e3          	bne	a3,a1,f20 <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     f3a:	00470693          	addi	a3,a4,4
     f3e:	f806e693          	ori	a3,a3,-128
     f42:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     f46:	4632                	lw	a2,12(sp)
     f48:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     f4c:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     f4e:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     f52:	f684c5e3          	blt	s1,s0,ebc <_write.constprop.0+0x3e>
     f56:	bfa9                	j	eb0 <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     f58:	16fd                	addi	a3,a3,-1
     f5a:	fead                	bnez	a3,ed4 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     f5c:	00032783          	lw	a5,0(t1)
     f60:	0c07e793          	ori	a5,a5,192
     f64:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     f68:	4401                	li	s0,0
     f6a:	b799                	j	eb0 <_write.constprop.0+0x32>
	if( size == 0 )
     f6c:	4481                	li	s1,0
     f6e:	b7d5                	j	f52 <_write.constprop.0+0xd4>

00000f70 <__puts_uart>:
{
     f70:	1151                	addi	sp,sp,-12
     f72:	c222                	sw	s0,4(sp)
     f74:	c406                	sw	ra,8(sp)
     f76:	842e                	mv	s0,a1
	_write( 0, s, len );
     f78:	3719                	jal	e7e <_write.constprop.0>
}
     f7a:	40a2                	lw	ra,8(sp)
     f7c:	8522                	mv	a0,s0
     f7e:	4412                	lw	s0,4(sp)
     f80:	0131                	addi	sp,sp,12
     f82:	8082                	ret

00000f84 <handle_reset>:
	asm volatile( "\n\
     f84:	1ffff197          	auipc	gp,0x1ffff
     f88:	47818193          	addi	gp,gp,1144 # 200003fc <__global_pointer$>
     f8c:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     f90:	6509                	lui	a0,0x2
     f92:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x38e>
     f96:	30051073          	csrw	mstatus,a0
     f9a:	468d                	li	a3,3
     f9c:	fffff517          	auipc	a0,0xfffff
     fa0:	06450513          	addi	a0,a0,100 # 0 <InterruptVector>
     fa4:	8d55                	or	a0,a0,a3
     fa6:	30551073          	csrw	mtvec,a0
asm volatile(
     faa:	c9018513          	addi	a0,gp,-880 # 2000008c <CardType>
     fae:	3e818593          	addi	a1,gp,1000 # 200007e4 <_ebss>
     fb2:	4601                	li	a2,0
     fb4:	00b55663          	bge	a0,a1,fc0 <handle_reset+0x3c>
     fb8:	c110                	sw	a2,0(a0)
     fba:	0511                	addi	a0,a0,4
     fbc:	feb54ee3          	blt	a0,a1,fb8 <handle_reset+0x34>
     fc0:	00002517          	auipc	a0,0x2
     fc4:	5bc50513          	addi	a0,a0,1468 # 357c <_data_lma>
     fc8:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_aht21>
     fcc:	1ffff617          	auipc	a2,0x1ffff
     fd0:	0c060613          	addi	a2,a2,192 # 2000008c <CardType>
     fd4:	00c58863          	beq	a1,a2,fe4 <handle_reset+0x60>
     fd8:	4114                	lw	a3,0(a0)
     fda:	c194                	sw	a3,0(a1)
     fdc:	0511                	addi	a0,a0,4
     fde:	0591                	addi	a1,a1,4
     fe0:	fec59ae3          	bne	a1,a2,fd4 <handle_reset+0x50>
	SysTick->CTLR = 5;
     fe4:	e000f7b7          	lui	a5,0xe000f
     fe8:	4715                	li	a4,5
     fea:	c398                	sw	a4,0(a5)
asm volatile(
     fec:	6785                	lui	a5,0x1
     fee:	4f278793          	addi	a5,a5,1266 # 14f2 <main>
     ff2:	34179073          	csrw	mepc,a5
     ff6:	30200073          	mret

00000ffa <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     ffa:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     ffe:	a16ff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
    1002:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
    1006:	a0eff0ef          	jal	ra,214 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
    100a:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
    100e:	a06ff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
    1012:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
    1016:	9feff0ef          	jal	ra,214 <PrintHex>
	while( (*DMDATA0) & 0x80 );
    101a:	e0000737          	lui	a4,0xe0000
    101e:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
    1022:	0f470693          	addi	a3,a4,244
    1026:	0807f793          	andi	a5,a5,128
    102a:	fbf5                	bnez	a5,101e <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
    102c:	6785                	lui	a5,0x1
    102e:	a8578793          	addi	a5,a5,-1403 # a85 <disk_readp+0x99>
    1032:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
    1034:	e0000737          	lui	a4,0xe0000
    1038:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
    103c:	0f470693          	addi	a3,a4,244
    1040:	0807f793          	andi	a5,a5,128
    1044:	fbf5                	bnez	a5,1038 <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
    1046:	aaaab7b7          	lui	a5,0xaaaab
    104a:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
    104e:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
    1050:	a001                	j	1050 <ADC1_2_IRQHandler+0x56>

00001052 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
    1052:	40021737          	lui	a4,0x40021
    1056:	471c                	lw	a5,8(a4)
    1058:	008006b7          	lui	a3,0x800
    105c:	8fd5                	or	a5,a5,a3
    105e:	c71c                	sw	a5,8(a4)

00001060 <strlen>:
{
    1060:	87aa                	mv	a5,a0
	for (; *s; s++);
    1062:	0007c703          	lbu	a4,0(a5)
    1066:	e701                	bnez	a4,106e <strlen+0xe>
}
    1068:	40a78533          	sub	a0,a5,a0
    106c:	8082                	ret
	for (; *s; s++);
    106e:	0785                	addi	a5,a5,1
    1070:	bfcd                	j	1062 <strlen+0x2>

00001072 <mini_vpprintf>:
{
    1072:	fa410113          	addi	sp,sp,-92
    1076:	c8a6                	sw	s1,80(sp)
    1078:	cc86                	sw	ra,88(sp)
    107a:	caa2                	sw	s0,84(sp)
    107c:	c02a                	sw	a0,0(sp)
    107e:	c22e                	sw	a1,4(sp)
    1080:	84b2                	mv	s1,a2
    1082:	87b6                	mv	a5,a3
	int n = 0;
    1084:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
    1086:	0004c703          	lbu	a4,0(s1)
    108a:	00148413          	addi	s0,s1,1
    108e:	00e10fa3          	sb	a4,31(sp)
    1092:	eb01                	bnez	a4,10a2 <mini_vpprintf+0x30>
}
    1094:	40e6                	lw	ra,88(sp)
    1096:	4456                	lw	s0,84(sp)
    1098:	4542                	lw	a0,16(sp)
    109a:	44c6                	lw	s1,80(sp)
    109c:	05c10113          	addi	sp,sp,92
    10a0:	8082                	ret
		if (ch!='%') {
    10a2:	02500693          	li	a3,37
    10a6:	00d70f63          	beq	a4,a3,10c4 <mini_vpprintf+0x52>
    10aa:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
    10ac:	4612                	lw	a2,4(sp)
    10ae:	4782                	lw	a5,0(sp)
    10b0:	4585                	li	a1,1
    10b2:	01f10513          	addi	a0,sp,31
    10b6:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
    10b8:	84a2                	mv	s1,s0
		n = n + len;
    10ba:	47c2                	lw	a5,16(sp)
    10bc:	97aa                	add	a5,a5,a0
    10be:	c83e                	sw	a5,16(sp)
    10c0:	47a2                	lw	a5,8(sp)
    10c2:	b7d1                	j	1086 <mini_vpprintf+0x14>
			ch=*(fmt++);
    10c4:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
    10c8:	03000613          	li	a2,48
			ch=*(fmt++);
    10cc:	00248713          	addi	a4,s1,2
    10d0:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
    10d4:	03000413          	li	s0,48
    10d8:	08c69063          	bne	a3,a2,1158 <mini_vpprintf+0xe6>
				ch=*(fmt++);
    10dc:	84ba                	mv	s1,a4
    10de:	4601                	li	a2,0
    10e0:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
    10e2:	4525                	li	a0,9
    10e4:	a811                	j	10f8 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
    10e6:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
    10ea:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
    10ec:	9736                	add	a4,a4,a3
				ch=*(fmt++);
    10ee:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
    10f2:	0706                	slli	a4,a4,0x1
    10f4:	972e                	add	a4,a4,a1
				ch=*(fmt++);
    10f6:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
    10f8:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f61be>
    10fc:	0ff5f313          	andi	t1,a1,255
    1100:	fe6573e3          	bgeu	a0,t1,10e6 <mini_vpprintf+0x74>
    1104:	c219                	beqz	a2,110a <mini_vpprintf+0x98>
    1106:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
    110a:	c63a                	sw	a4,12(sp)
    110c:	4661                	li	a2,24
    110e:	00e65363          	bge	a2,a4,1114 <mini_vpprintf+0xa2>
    1112:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
    1114:	06c00593          	li	a1,108
			char l = 0;
    1118:	4601                	li	a2,0
			if (ch == 'l') {
    111a:	00b69863          	bne	a3,a1,112a <mini_vpprintf+0xb8>
				ch=*(fmt++);
    111e:	0004c683          	lbu	a3,0(s1)
				l = 1;
    1122:	4605                	li	a2,1
				ch=*(fmt++);
    1124:	0485                	addi	s1,s1,1
    1126:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
    112a:	01f14683          	lbu	a3,31(sp)
    112e:	06400593          	li	a1,100
    1132:	06b68363          	beq	a3,a1,1198 <mini_vpprintf+0x126>
    1136:	02d5e463          	bltu	a1,a3,115e <mini_vpprintf+0xec>
    113a:	05800713          	li	a4,88
    113e:	0ae68263          	beq	a3,a4,11e2 <mini_vpprintf+0x170>
    1142:	06300713          	li	a4,99
    1146:	0ce68063          	beq	a3,a4,1206 <mini_vpprintf+0x194>
    114a:	d6a9                	beqz	a3,1094 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
    114c:	4612                	lw	a2,4(sp)
    114e:	c43e                	sw	a5,8(sp)
    1150:	4585                	li	a1,1
    1152:	01f10513          	addi	a0,sp,31
    1156:	a88d                	j	11c8 <mini_vpprintf+0x156>
			char pad_char = ' ';
    1158:	02000413          	li	s0,32
    115c:	b741                	j	10dc <mini_vpprintf+0x6a>
			switch (ch) {
    115e:	07500593          	li	a1,117
    1162:	02b68b63          	beq	a3,a1,1198 <mini_vpprintf+0x126>
    1166:	07800613          	li	a2,120
    116a:	06c68c63          	beq	a3,a2,11e2 <mini_vpprintf+0x170>
    116e:	07300613          	li	a2,115
    1172:	fcc69de3          	bne	a3,a2,114c <mini_vpprintf+0xda>
    1176:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
    1178:	00478713          	addi	a4,a5,4
    117c:	439c                	lw	a5,0(a5)
    117e:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
    1180:	853e                	mv	a0,a5
    1182:	ca3e                	sw	a5,20(sp)
    1184:	3df1                	jal	1060 <strlen>
					if (pad_to > 0) {
    1186:	4762                	lw	a4,24(sp)
    1188:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
    118a:	85aa                	mv	a1,a0
					if (pad_to > 0) {
    118c:	cb51                	beqz	a4,1220 <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
    118e:	46b2                	lw	a3,12(sp)
    1190:	1838                	addi	a4,sp,56
    1192:	8622                	mv	a2,s0
    1194:	853e                	mv	a0,a5
    1196:	a025                	j	11be <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    1198:	00478713          	addi	a4,a5,4
    119c:	c43a                	sw	a4,8(sp)
					if(l) {
    119e:	ca05                	beqz	a2,11ce <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    11a0:	f8b68693          	addi	a3,a3,-117
    11a4:	1018                	addi	a4,sp,32
    11a6:	0016b693          	seqz	a3,a3
    11aa:	4388                	lw	a0,0(a5)
    11ac:	4601                	li	a2,0
    11ae:	45a9                	li	a1,10
    11b0:	8d2ff0ef          	jal	ra,282 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    11b4:	46b2                	lw	a3,12(sp)
    11b6:	1838                	addi	a4,sp,56
    11b8:	8622                	mv	a2,s0
    11ba:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    11bc:	1008                	addi	a0,sp,32
    11be:	f79fe0ef          	jal	ra,136 <mini_pad>
					len = puts(bf, len, buf);
    11c2:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    11c4:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
    11c6:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
    11c8:	4782                	lw	a5,0(sp)
    11ca:	9782                	jalr	a5
					break;
    11cc:	b5fd                	j	10ba <mini_vpprintf+0x48>
						if(ch == 'u') {
    11ce:	07500713          	li	a4,117
    11d2:	00e69563          	bne	a3,a4,11dc <mini_vpprintf+0x16a>
	if (radix > 16)
    11d6:	1018                	addi	a4,sp,32
    11d8:	4685                	li	a3,1
    11da:	bfc1                	j	11aa <mini_vpprintf+0x138>
    11dc:	1018                	addi	a4,sp,32
    11de:	4681                	li	a3,0
    11e0:	b7e9                	j	11aa <mini_vpprintf+0x138>
					if(l) {
    11e2:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    11e4:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
    11e8:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
    11ec:	c43a                	sw	a4,8(sp)
	if (radix > 16)
    11ee:	4685                	li	a3,1
    11f0:	1018                	addi	a4,sp,32
    11f2:	00163613          	seqz	a2,a2
    11f6:	45c1                	li	a1,16
    11f8:	88aff0ef          	jal	ra,282 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
    11fc:	46b2                	lw	a3,12(sp)
    11fe:	85aa                	mv	a1,a0
    1200:	1838                	addi	a4,sp,56
    1202:	8622                	mv	a2,s0
    1204:	bf65                	j	11bc <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
    1206:	00478713          	addi	a4,a5,4
    120a:	439c                	lw	a5,0(a5)
    120c:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
    120e:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
    1210:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
    1214:	1838                	addi	a4,sp,56
    1216:	8622                	mv	a2,s0
    1218:	4585                	li	a1,1
    121a:	01f10513          	addi	a0,sp,31
    121e:	b745                	j	11be <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
    1220:	4612                	lw	a2,4(sp)
    1222:	853e                	mv	a0,a5
    1224:	b755                	j	11c8 <mini_vpprintf+0x156>

00001226 <printf>:
{
    1226:	fdc10113          	addi	sp,sp,-36
    122a:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    122c:	862a                	mv	a2,a0
    122e:	6505                	lui	a0,0x1
{
    1230:	c82e                	sw	a1,16(sp)
    1232:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1234:	4581                	li	a1,0
	va_start( args, format );
    1236:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1238:	f7050513          	addi	a0,a0,-144 # f70 <__puts_uart>
{
    123c:	c606                	sw	ra,12(sp)
    123e:	ce3a                	sw	a4,28(sp)
    1240:	d03e                	sw	a5,32(sp)
	va_start( args, format );
    1242:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1244:	353d                	jal	1072 <mini_vpprintf>
}
    1246:	40b2                	lw	ra,12(sp)
    1248:	02410113          	addi	sp,sp,36
    124c:	8082                	ret

0000124e <onI2C_SlaveWrite>:
#include "../Mess-libs/modules/systick_irq.h"
#include "../Mess-libs/modules/fun_button.h"
#include "../Mess-libs/i2c/i2c_slave.h"

void onI2C_SlaveWrite(uint8_t reg, uint8_t length) {
	printf("IM WRITEEN TO\n\r");
    124e:	650d                	lui	a0,0x3
    1250:	c1050513          	addi	a0,a0,-1008 # 2c10 <I2C1_ER_IRQHandler+0x7e>
    1254:	bfc9                	j	1226 <printf>

00001256 <onI2C_SlaveRead>:
}

void onI2C_SlaveRead(uint8_t reg) {
	printf("IM READEN FROM.\n\r");
    1256:	650d                	lui	a0,0x3
    1258:	c2050513          	addi	a0,a0,-992 # 2c20 <I2C1_ER_IRQHandler+0x8e>
    125c:	b7e9                	j	1226 <printf>

0000125e <mini_vsnprintf>:
{
    125e:	1121                	addi	sp,sp,-24
    1260:	ca06                	sw	ra,20(sp)
    1262:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
    1264:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
    1266:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
    1268:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
    126a:	c185                	beqz	a1,128a <mini_vsnprintf+0x2c>
    126c:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
    126e:	858a                	mv	a1,sp
    1270:	e111                	bnez	a0,1274 <mini_vsnprintf+0x16>
    1272:	4581                	li	a1,0
    1274:	1d200513          	li	a0,466
    1278:	3bed                	jal	1072 <mini_vpprintf>
	if(buffer == (void*) 0) {
    127a:	c401                	beqz	s0,1282 <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
    127c:	4512                	lw	a0,4(sp)
    127e:	4782                	lw	a5,0(sp)
    1280:	8d1d                	sub	a0,a0,a5
}
    1282:	40d2                	lw	ra,20(sp)
    1284:	4442                	lw	s0,16(sp)
    1286:	0161                	addi	sp,sp,24
    1288:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
    128a:	4401                	li	s0,0
    128c:	b7dd                	j	1272 <mini_vsnprintf+0x14>

0000128e <sprintf>:
{
    128e:	1101                	addi	sp,sp,-32
    1290:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1292:	862e                	mv	a2,a1
    1294:	800005b7          	lui	a1,0x80000
{
    1298:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    129a:	fff5c593          	not	a1,a1
	va_start( args, format );
    129e:	0814                	addi	a3,sp,16
{
    12a0:	c606                	sw	ra,12(sp)
    12a2:	cc3a                	sw	a4,24(sp)
    12a4:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
    12a6:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    12a8:	3f5d                	jal	125e <mini_vsnprintf>
}
    12aa:	40b2                	lw	ra,12(sp)
    12ac:	6105                	addi	sp,sp,32
    12ae:	8082                	ret

000012b0 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
    12b0:	962a                	add	a2,a2,a0
    12b2:	87aa                	mv	a5,a0
    12b4:	00c79363          	bne	a5,a2,12ba <memset+0xa>
    12b8:	8082                	ret
    12ba:	00b78023          	sb	a1,0(a5)
    12be:	0785                	addi	a5,a5,1
    12c0:	bfd5                	j	12b4 <memset+0x4>

000012c2 <strcpy>:
{
    12c2:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
    12c4:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
    12c8:	00e78023          	sb	a4,0(a5)
    12cc:	e311                	bnez	a4,12d0 <strcpy+0xe>
}
    12ce:	8082                	ret
	for (; (*d=*s); s++, d++);
    12d0:	0585                	addi	a1,a1,1
    12d2:	0785                	addi	a5,a5,1
    12d4:	bfc5                	j	12c4 <strcpy+0x2>

000012d6 <memcpy>:
{
    12d6:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
    12d8:	00f61363          	bne	a2,a5,12de <memcpy+0x8>
}
    12dc:	8082                	ret
	for (; n; n--) *d++ = *s++;
    12de:	00f58733          	add	a4,a1,a5
    12e2:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
    12e6:	00f50733          	add	a4,a0,a5
    12ea:	0785                	addi	a5,a5,1
    12ec:	00d70023          	sb	a3,0(a4)
    12f0:	b7e5                	j	12d8 <memcpy+0x2>

000012f2 <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
    12f2:	7179                	addi	sp,sp,-48
    12f4:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
    12f6:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
    12fa:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
    12fc:	862e                	mv	a2,a1
    12fe:	85aa                	mv	a1,a0
    1300:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1304:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    1306:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    130a:	37f1                	jal	12d6 <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    130c:	00140593          	addi	a1,s0,1
    1310:	850a                	mv	a0,sp
    1312:	a03ff0ef          	jal	ra,d14 <i2c_write_raw.constprop.0>
}
    1316:	50b2                	lw	ra,44(sp)
    1318:	5422                	lw	s0,40(sp)
    131a:	6145                	addi	sp,sp,48
    131c:	8082                	ret

0000131e <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
    131e:	1151                	addi	sp,sp,-12
    1320:	c222                	sw	s0,4(sp)
    1322:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1324:	02100513          	li	a0,33
void ssd1306_print_str_at(
    1328:	c406                	sw	ra,8(sp)
    132a:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    132c:	3635                	jal	e58 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    132e:	4501                	li	a0,0
    1330:	3625                	jal	e58 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1332:	07f00513          	li	a0,127
    1336:	360d                	jal	e58 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1338:	02200513          	li	a0,34
    133c:	3e31                	jal	e58 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    133e:	8522                	mv	a0,s0
    1340:	3e21                	jal	e58 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1342:	8522                	mv	a0,s0
    1344:	3e11                	jal	e58 <ssd1306_cmd>
    1346:	4465                	li	s0,25
    1348:	3d418493          	addi	s1,gp,980 # 200007d0 <str_output>
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i<25; i++) {
		if (*str) {
    134c:	0004c783          	lbu	a5,0(s1)
    1350:	c78d                	beqz	a5,137a <ssd1306_print_str_at.constprop.0+0x5c>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    1352:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    1354:	0ff7f793          	andi	a5,a5,255
    1358:	670d                	lui	a4,0x3
    135a:	00279693          	slli	a3,a5,0x2
    135e:	dbc70513          	addi	a0,a4,-580 # 2dbc <FONT_7x5>
    1362:	97b6                	add	a5,a5,a3
    1364:	4595                	li	a1,5
    1366:	953e                	add	a0,a0,a5
    1368:	3769                	jal	12f2 <ssd1306_data.isra.0>
			str++;
    136a:	0485                	addi	s1,s1,1
	for (int i=0; i<25; i++) {
    136c:	147d                	addi	s0,s0,-1
    136e:	fc79                	bnez	s0,134c <ssd1306_print_str_at.constprop.0+0x2e>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
    1370:	40a2                	lw	ra,8(sp)
    1372:	4412                	lw	s0,4(sp)
    1374:	4482                	lw	s1,0(sp)
    1376:	0131                	addi	sp,sp,12
    1378:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    137a:	678d                	lui	a5,0x3
    137c:	4595                	li	a1,5
    137e:	dbc78513          	addi	a0,a5,-580 # 2dbc <FONT_7x5>
    1382:	3f85                	jal	12f2 <ssd1306_data.isra.0>
    1384:	b7e5                	j	136c <ssd1306_print_str_at.constprop.0+0x4e>

00001386 <modI2C_task>:

	// i2c_device_tests();
	// test_v003Slave();
}

void modI2C_task(uint32_t counter) {
    1386:	862a                	mv	a2,a0
	sprintf(str_output, "counter %lu", counter);
    1388:	658d                	lui	a1,0x3
void modI2C_task(uint32_t counter) {
    138a:	1151                	addi	sp,sp,-12
	sprintf(str_output, "counter %lu", counter);
    138c:	c3458593          	addi	a1,a1,-972 # 2c34 <I2C1_ER_IRQHandler+0xa2>
    1390:	3d418513          	addi	a0,gp,980 # 200007d0 <str_output>
void modI2C_task(uint32_t counter) {
    1394:	c406                	sw	ra,8(sp)
	sprintf(str_output, "counter %lu", counter);
    1396:	3de5                	jal	128e <sprintf>
	if (i2c_ping(0x3C) != I2C_OK) return;
    1398:	03c00513          	li	a0,60
    139c:	8e1ff0ef          	jal	ra,c7c <i2c_ping>
    13a0:	e509                	bnez	a0,13aa <modI2C_task+0x24>
	modI2C_display(str_output, 7);
    13a2:	40a2                	lw	ra,8(sp)
	ssd1306_print_str_at(str, line, 0);
    13a4:	451d                	li	a0,7
    13a6:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    13a8:	bf9d                	j	131e <ssd1306_print_str_at.constprop.0>
    13aa:	40a2                	lw	ra,8(sp)
    13ac:	0131                	addi	sp,sp,12
    13ae:	8082                	ret

000013b0 <puts>:
{
    13b0:	1151                	addi	sp,sp,-12
    13b2:	c406                	sw	ra,8(sp)
    13b4:	c222                	sw	s0,4(sp)
    13b6:	c026                	sw	s1,0(sp)
    13b8:	84aa                	mv	s1,a0
	int sl = strlen( s );
    13ba:	315d                	jal	1060 <strlen>
    13bc:	842a                	mv	s0,a0
	_write(0, s, sl );
    13be:	85aa                	mv	a1,a0
    13c0:	8526                	mv	a0,s1
    13c2:	3c75                	jal	e7e <_write.constprop.0>
	_write(0, "\n", 1 );
    13c4:	650d                	lui	a0,0x3
    13c6:	4585                	li	a1,1
    13c8:	c4050513          	addi	a0,a0,-960 # 2c40 <I2C1_ER_IRQHandler+0xae>
    13cc:	3c4d                	jal	e7e <_write.constprop.0>
}
    13ce:	40a2                	lw	ra,8(sp)
    13d0:	00140513          	addi	a0,s0,1
    13d4:	4412                	lw	s0,4(sp)
    13d6:	4482                	lw	s1,0(sp)
    13d8:	0131                	addi	sp,sp,12
    13da:	8082                	ret

000013dc <i2c_scan_callback>:
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    13dc:	c539                	beqz	a0,142a <i2c_scan_callback+0x4e>
    13de:	07f00793          	li	a5,127
    13e2:	862a                	mv	a2,a0
    13e4:	04f50363          	beq	a0,a5,142a <i2c_scan_callback+0x4e>
void i2c_scan_callback(const uint8_t addr) {
    13e8:	1151                	addi	sp,sp,-12
    13ea:	c222                	sw	s0,4(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    13ec:	658d                	lui	a1,0x3
    13ee:	c4458593          	addi	a1,a1,-956 # 2c44 <I2C1_ER_IRQHandler+0xb2>
    13f2:	3d418513          	addi	a0,gp,980 # 200007d0 <str_output>
void i2c_scan_callback(const uint8_t addr) {
    13f6:	c406                	sw	ra,8(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    13f8:	3d59                	jal	128e <sprintf>
	printf("%s\n", str_output);
    13fa:	3d418513          	addi	a0,gp,980 # 200007d0 <str_output>
    13fe:	3f4d                	jal	13b0 <puts>
	modI2C_display(str_output, line++);
    1400:	c4018793          	addi	a5,gp,-960 # 2000003c <line.5>
    1404:	4380                	lw	s0,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1406:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
    140a:	00140713          	addi	a4,s0,1
    140e:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1410:	86dff0ef          	jal	ra,c7c <i2c_ping>
    1414:	e519                	bnez	a0,1422 <i2c_scan_callback+0x46>
	ssd1306_print_str_at(str, line, 0);
    1416:	0ff47513          	andi	a0,s0,255
}
    141a:	4412                	lw	s0,4(sp)
    141c:	40a2                	lw	ra,8(sp)
    141e:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    1420:	bdfd                	j	131e <ssd1306_print_str_at.constprop.0>
}
    1422:	40a2                	lw	ra,8(sp)
    1424:	4412                	lw	s0,4(sp)
    1426:	0131                	addi	sp,sp,12
    1428:	8082                	ret
    142a:	8082                	ret

0000142c <putchar>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    142c:	e00007b7          	lui	a5,0xe0000
    1430:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
    1434:	0c000713          	li	a4,192
    1438:	0c07f793          	andi	a5,a5,192
    143c:	04e78d63          	beq	a5,a4,1496 <putchar+0x6a>
{
    1440:	1151                	addi	sp,sp,-12
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1442:	001007b7          	lui	a5,0x100
{
    1446:	c222                	sw	s0,4(sp)
    1448:	c406                	sw	ra,8(sp)
    144a:	842a                	mv	s0,a0
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    144c:	0785                	addi	a5,a5,1
	while( ( lastdmd = (*DMDATA0) ) & 0x80 )
    144e:	e00006b7          	lui	a3,0xe0000
    1452:	0f46a703          	lw	a4,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
    1456:	0f468613          	addi	a2,a3,244
    145a:	08077593          	andi	a1,a4,128
    145e:	e18d                	bnez	a1,1480 <putchar+0x54>
	if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
    1460:	c319                	beqz	a4,1466 <putchar+0x3a>
    1462:	a13ff0ef          	jal	ra,e74 <internal_handle_input.constprop.0>
	*DMDATA0 = 0x85 | ((const char)c<<8);
    1466:	6541                	lui	a0,0x10
    1468:	157d                	addi	a0,a0,-1
    146a:	00841793          	slli	a5,s0,0x8
    146e:	8fe9                	and	a5,a5,a0
    1470:	0857e793          	ori	a5,a5,133
    1474:	e0000737          	lui	a4,0xe0000
    1478:	0ef72a23          	sw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
	return 1;
    147c:	4505                	li	a0,1
    147e:	a801                	j	148e <putchar+0x62>
		if( timeout-- == 0 )
    1480:	17fd                	addi	a5,a5,-1
    1482:	fbe1                	bnez	a5,1452 <putchar+0x26>
			*DMDATA0 |= 0xc0;
    1484:	421c                	lw	a5,0(a2)
    1486:	4501                	li	a0,0
    1488:	0c07e793          	ori	a5,a5,192
    148c:	c21c                	sw	a5,0(a2)
}
    148e:	40a2                	lw	ra,8(sp)
    1490:	4412                	lw	s0,4(sp)
    1492:	0131                	addi	sp,sp,12
    1494:	8082                	ret
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1496:	4501                	li	a0,0
}
    1498:	8082                	ret

0000149a <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    149a:	400227b7          	lui	a5,0x40022
    149e:	4705                	li	a4,1
    14a0:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    14a2:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    14a6:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    14aa:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    14ae:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x107626f>
    14b2:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    14b4:	009f0737          	lui	a4,0x9f0
    14b8:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    14ba:	020006b7          	lui	a3,0x2000
    14be:	40021737          	lui	a4,0x40021
    14c2:	431c                	lw	a5,0(a4)
    14c4:	8ff5                	and	a5,a5,a3
    14c6:	dff5                	beqz	a5,14c2 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    14c8:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    14ca:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    14ce:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    14d0:	0027e793          	ori	a5,a5,2
    14d4:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    14d6:	4721                	li	a4,8
    14d8:	42dc                	lw	a5,4(a3)
    14da:	8bb1                	andi	a5,a5,12
    14dc:	fee79ee3          	bne	a5,a4,14d8 <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    14e0:	e00007b7          	lui	a5,0xe0000
    14e4:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    14e8:	08000713          	li	a4,128
    14ec:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    14f0:	8082                	ret

000014f2 <main>:
			printf("Long Press\n"); break;
	}
}

int main()
{
    14f2:	7115                	addi	sp,sp,-224
    14f4:	cf86                	sw	ra,220(sp)
    14f6:	cda2                	sw	s0,216(sp)
    14f8:	cba6                	sw	s1,212(sp)
    14fa:	1180                	addi	s0,sp,224
	uint32_t sec_time = 0;
	uint32_t time_ref = 0;

	M_Encoder encoder_a = {0, 0, 0};

	SystemInit();
    14fc:	3f79                	jal	149a <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    14fe:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1502:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    1504:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1508:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x1d6d>
    150c:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    150e:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    1512:	cb418493          	addi	s1,gp,-844 # 200000b0 <systick_millis>
    1516:	0004a023          	sw	zero,0(s1)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    151a:	4398                	lw	a4,0(a5)
	systick_init();			//! required for millis()

	funGpioInitAll();
	Delay_Ms(100);
    151c:	00494537          	lui	a0,0x494
    1520:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.d894f163+0x489fee>
    1524:	00776713          	ori	a4,a4,7
    1528:	c398                	sw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    152a:	e000e7b7          	lui	a5,0xe000e
    152e:	6705                	lui	a4,0x1
    1530:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>
	funGpioInitAll();
    1534:	40021737          	lui	a4,0x40021
    1538:	4f1c                	lw	a5,24(a4)
    153a:	0357e793          	ori	a5,a5,53
    153e:	cf1c                	sw	a5,24(a4)
	Delay_Ms(100);
    1540:	d2dfe0ef          	jal	ra,26c <DelaySysTick>
    }

    void button_setup(Button_t *model) {
    if (model->pin == 0xFF) return; 

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
    1544:	40011737          	lui	a4,0x40011
    1548:	40072783          	lw	a5,1024(a4) # 40011400 <_eusrstack+0x20010c00>
    154c:	40070693          	addi	a3,a4,1024
    1550:	9bc1                	andi	a5,a5,-16
    1552:	0087e793          	ori	a5,a5,8
    1556:	40f72023          	sw	a5,1024(a4)
    funDigitalWrite(model->pin, 1);
    155a:	4785                	li	a5,1
    155c:	ca9c                	sw	a5,16(a3)
    model->debounce_time = millis();
    155e:	4098                	lw	a4,0(s1)
	if(dev->regb == 0) dev->regb = 1;
    1560:	cb418613          	addi	a2,gp,-844 # 200000b0 <systick_millis>
    1564:	f6e42223          	sw	a4,-156(s0)
    model->release_time = millis();
    1568:	4098                	lw	a4,0(s1)
    156a:	f6c42023          	sw	a2,-160(s0)
    156e:	f4e42c23          	sw	a4,-168(s0)
    1572:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_aht21>
    1576:	00a74703          	lbu	a4,10(a4)
    157a:	c0418693          	addi	a3,gp,-1020 # 20000000 <dev_aht21>
    157e:	e701                	bnez	a4,1586 <main+0x94>
	if(dev->regb  > 4) dev->regb = 4;
    1580:	00f68523          	sb	a5,10(a3) # 4002100a <_eusrstack+0x2002080a>
    1584:	a021                	j	158c <main+0x9a>
    1586:	4791                	li	a5,4
    1588:	fee7ece3          	bltu	a5,a4,1580 <main+0x8e>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    158c:	400217b7          	lui	a5,0x40021
    1590:	4b90                	lw	a2,16(a5)
    1592:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1596:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    159a:	8e49                	or	a2,a2,a0
    159c:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    159e:	4b90                	lw	a2,16(a5)
    15a0:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    15a2:	6485                	lui	s1,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    15a4:	8e6d                	and	a2,a2,a1
    15a6:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    15a8:	4fd8                	lw	a4,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    15aa:	fbc00637          	lui	a2,0xfbc00
    15ae:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    15b0:	8f49                	or	a4,a4,a0
    15b2:	cfd8                	sw	a4,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    15b4:	4f98                	lw	a4,24(a5)
    15b6:	01176713          	ori	a4,a4,17
    15ba:	cf98                	sw	a4,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    15bc:	400107b7          	lui	a5,0x40010
    15c0:	43d8                	lw	a4,4(a5)
    15c2:	8f71                	and	a4,a4,a2
    15c4:	c3d8                	sw	a4,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    15c6:	43d8                	lw	a4,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    15c8:	767d                	lui	a2,0xfffff
    15ca:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    15ce:	c3d8                	sw	a4,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    15d0:	400117b7          	lui	a5,0x40011
    15d4:	4398                	lw	a4,0(a5)
    15d6:	f0f77713          	andi	a4,a4,-241
    15da:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    15dc:	4398                	lw	a4,0(a5)
    15de:	0d076713          	ori	a4,a4,208
    15e2:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    15e4:	4398                	lw	a4,0(a5)
    15e6:	8f71                	and	a4,a4,a2
    15e8:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    15ea:	4398                	lw	a4,0(a5)
    15ec:	d0048613          	addi	a2,s1,-768 # d00 <i2c_ping+0x84>
    15f0:	8f51                	or	a4,a4,a2
    15f2:	c398                	sw	a4,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    15f4:	40005737          	lui	a4,0x40005
    15f8:	40475783          	lhu	a5,1028(a4) # 40005404 <_eusrstack+0x20004c04>
    15fc:	07c2                	slli	a5,a5,0x10
    15fe:	83c1                	srli	a5,a5,0x10
    1600:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    1604:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    1608:	40f71223          	sh	a5,1028(a4)
	if(dev->clkr <= 100000)
    160c:	429c                	lw	a5,0(a3)
    160e:	6761                	lui	a4,0x18
    1610:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.d894f163+0xe88e>
    1614:	00179593          	slli	a1,a5,0x1
    1618:	36f76b63          	bltu	a4,a5,198e <main+0x49c>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    161c:	02dc7537          	lui	a0,0x2dc7
    1620:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbcdee>
    1624:	a9dfe0ef          	jal	ra,c0 <__hidden___udivsi3>
    1628:	14fd                	addi	s1,s1,-1
    162a:	8d65                	and	a0,a0,s1
    162c:	0542                	slli	a0,a0,0x10
    162e:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    1630:	40005737          	lui	a4,0x40005
    1634:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    1638:	40075783          	lhu	a5,1024(a4)
    163c:	07c2                	slli	a5,a5,0x10
    163e:	83c1                	srli	a5,a5,0x10
    1640:	0017e793          	ori	a5,a5,1
    1644:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    1648:	d36ff0ef          	jal	ra,b7e <i2c_error>
	if(i2c_init(&dev_aht21) != I2C_OK) {
    164c:	34050f63          	beqz	a0,19aa <main+0x4b8>
		printf("Failed to init I2C\n");
    1650:	650d                	lui	a0,0x3
    1652:	c6050513          	addi	a0,a0,-928 # 2c60 <I2C1_ER_IRQHandler+0xce>
    1656:	3ba9                	jal	13b0 <puts>
	button_setup(&button1);

	// I2C1: uses PC1 & PC2
	modI2C_setup();

	uint8_t slave_mode = funDigitalRead(BUTTON_PIN);
    1658:	400117b7          	lui	a5,0x40011
    165c:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    1660:	479c                	lw	a5,8(a5)
    1662:	8b85                	andi	a5,a5,1
    1664:	f4f42023          	sw	a5,-192(s0)
	if (slave_mode == 0) {
    1668:	10079063          	bnez	a5,1768 <main+0x276>
		printf("I2C Slave mode\n");
    166c:	650d                	lui	a0,0x3
    166e:	cbc50513          	addi	a0,a0,-836 # 2cbc <I2C1_ER_IRQHandler+0x12a>
    1672:	3b3d                	jal	13b0 <puts>
} i2c_slave_state;

void SetupI2CSlave(uint8_t address, volatile uint8_t* registers, uint8_t size,
    i2c_write_callback_t write_callback, i2c_read_callback_t read_callback, bool read_only
) {
    i2c_slave_state.first_write = 1;
    1674:	39c18793          	addi	a5,gp,924 # 20000798 <i2c_slave_state>
    1678:	4705                	li	a4,1
    167a:	00e79023          	sh	a4,0(a5)
    i2c_slave_state.offset = 0;
    i2c_slave_state.position = 0;
    i2c_slave_state.registers1 = registers;
    167e:	c1c18713          	addi	a4,gp,-996 # 20000018 <i2c_registers>
    1682:	c3d8                	sw	a4,4(a5)
    i2c_slave_state.size1 = size;
    i2c_slave_state.registers2 = NULL;
    i2c_slave_state.size2 = 0;
    i2c_slave_state.write_callback1 = write_callback;
    1684:	6705                	lui	a4,0x1
    1686:	24e70713          	addi	a4,a4,590 # 124e <onI2C_SlaveWrite>
    168a:	cbd8                	sw	a4,20(a5)
    i2c_slave_state.read_callback1 = read_callback;
    168c:	6705                	lui	a4,0x1
    i2c_slave_state.size1 = size;
    168e:	02000613          	li	a2,32
    i2c_slave_state.read_callback1 = read_callback;
    1692:	25670713          	addi	a4,a4,598 # 1256 <onI2C_SlaveRead>
    i2c_slave_state.registers2 = NULL;
    1696:	0007a623          	sw	zero,12(a5)
    i2c_slave_state.size2 = 0;
    169a:	00078823          	sb	zero,16(a5)
    i2c_slave_state.read_only1 = read_only;
    169e:	00078e23          	sb	zero,28(a5)
    i2c_slave_state.read_callback1 = read_callback;
    16a2:	cf98                	sw	a4,24(a5)
    i2c_slave_state.position = 0;
    16a4:	00078123          	sb	zero,2(a5)
    i2c_slave_state.size1 = size;
    16a8:	00c78423          	sb	a2,8(a5)
    i2c_slave_state.write_callback2 = NULL;
    16ac:	0207a023          	sw	zero,32(a5)
    i2c_slave_state.read_callback2 = NULL;
    16b0:	0207a223          	sw	zero,36(a5)
    i2c_slave_state.read_only2 = false;
    16b4:	02078423          	sb	zero,40(a5)

    // Enable I2C1
    RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    16b8:	400217b7          	lui	a5,0x40021
    16bc:	4fd4                	lw	a3,28(a5)
    16be:	002005b7          	lui	a1,0x200
    16c2:	8ecd                	or	a3,a3,a1
    16c4:	cfd4                	sw	a3,28(a5)

    // Reset I2C1 to init all regs
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
    16c6:	4b98                	lw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    16c8:	ffe006b7          	lui	a3,0xffe00
    16cc:	16fd                	addi	a3,a3,-1
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
    16ce:	8f4d                	or	a4,a4,a1
    16d0:	cb98                	sw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    16d2:	4b98                	lw	a4,16(a5)

    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
    16d4:	65a1                	lui	a1,0x8
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    16d6:	8f75                	and	a4,a4,a3
    16d8:	cb98                	sw	a4,16(a5)
    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
    16da:	400057b7          	lui	a5,0x40005
    16de:	4007d683          	lhu	a3,1024(a5) # 40005400 <_eusrstack+0x20004c00>
    16e2:	06c2                	slli	a3,a3,0x10
    16e4:	82c1                	srli	a3,a3,0x10
    16e6:	8ecd                	or	a3,a3,a1
    16e8:	40d79023          	sh	a3,1024(a5)
    I2C1->CTLR1 &= ~I2C_CTLR1_SWRST;
    16ec:	4007d683          	lhu	a3,1024(a5)
    16f0:	400005b7          	lui	a1,0x40000
    16f4:	06c6                	slli	a3,a3,0x11
    16f6:	82c5                	srli	a3,a3,0x11
    16f8:	40d79023          	sh	a3,1024(a5)

    // Set module clock frequency
    uint32_t prerate = 2000000; // I2C Logic clock rate, must be higher than the bus clock rate
    I2C1->CTLR2 |= (FUNCONF_SYSTEM_CORE_CLOCK/prerate) & I2C_CTLR2_FREQ;
    16fc:	4047d683          	lhu	a3,1028(a5)
    1700:	06c2                	slli	a3,a3,0x10
    1702:	82c1                	srli	a3,a3,0x10
    1704:	0186e693          	ori	a3,a3,24
    1708:	40d79223          	sh	a3,1028(a5)

    // Enable interrupts
    I2C1->CTLR2 |= I2C_CTLR2_ITBUFEN | I2C_CTLR2_ITEVTEN | I2C_CTLR2_ITERREN;
    170c:	4047d683          	lhu	a3,1028(a5)
    1710:	06c2                	slli	a3,a3,0x10
    1712:	82c1                	srli	a3,a3,0x10
    1714:	7006e693          	ori	a3,a3,1792
    1718:	40d79223          	sh	a3,1028(a5)
    171c:	e000e6b7          	lui	a3,0xe000e
    1720:	10b6a023          	sw	a1,256(a3) # e000e100 <_eusrstack+0xc000d900>
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    1724:	40c68f23          	sb	a2,1054(a3)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1728:	800005b7          	lui	a1,0x80000
    172c:	10b6a023          	sw	a1,256(a3)
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    1730:	40c68fa3          	sb	a2,1055(a3)
    NVIC_EnableIRQ(I2C1_ER_IRQn); // Error interrupt
    NVIC_SetPriority(I2C1_ER_IRQn, 2 << 4);

    // Set clock configuration
    uint32_t clockrate = 1000000; // I2C Bus clock rate, must be lower than the logic clock rate
    I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(3*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_FS; // Fast mode 33% duty cycle
    1734:	76e1                	lui	a3,0xffff8
    1736:	06c1                	addi	a3,a3,16
    1738:	40d79e23          	sh	a3,1052(a5)
    //I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(25*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_DUTY | I2C_CKCFGR_FS; // Fast mode 36% duty cycle
    //I2C1->CKCFGR = (FUNCONF_SYSTEM_CORE_CLOCK/(2*clockrate))&I2C_CKCFGR_CCR; // Standard mode good to 100kHz

    // Set I2C address
    I2C1->OADDR1 = address << 1;
    173c:	0ee00693          	li	a3,238
    1740:	40d79423          	sh	a3,1032(a5)
    I2C1->OADDR2 = 0;
    1744:	40079623          	sh	zero,1036(a5)

    // Enable I2C
    I2C1->CTLR1 |= I2C_CTLR1_PE;
    1748:	4007d703          	lhu	a4,1024(a5)
    174c:	0742                	slli	a4,a4,0x10
    174e:	8341                	srli	a4,a4,0x10
    1750:	00176713          	ori	a4,a4,1
    1754:	40e79023          	sh	a4,1024(a5)

    // Acknowledge bytes when they are received
    I2C1->CTLR1 |= I2C_CTLR1_ACK;
    1758:	4007d703          	lhu	a4,1024(a5)
    175c:	0742                	slli	a4,a4,0x10
    175e:	8341                	srli	a4,a4,0x10
    1760:	40076713          	ori	a4,a4,1024
    1764:	40e79023          	sh	a4,1024(a5)
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    1768:	400216b7          	lui	a3,0x40021
    176c:	4e9c                	lw	a5,24(a3)
    176e:	6705                	lui	a4,0x1
    1770:	0741                	addi	a4,a4,16
    1772:	8fd9                	or	a5,a5,a4
    1774:	ce9c                	sw	a5,24(a3)
    SPI1->CTLR1 = 0;
    1776:	400137b7          	lui	a5,0x40013
    177a:	00079023          	sh	zero,0(a5) # 40013000 <_eusrstack+0x20012800>
    SPI_set_prescaler(0);
    177e:	4501                	li	a0,0
    1780:	95aff0ef          	jal	ra,8da <SPI_set_prescaler>
    SPI1->CTLR1 |= (SPI_CPOL_Low | SPI_CPHA_1Edge);
    1784:	400137b7          	lui	a5,0x40013
    1788:	0007d703          	lhu	a4,0(a5) # 40013000 <_eusrstack+0x20012800>
    GPIOC->CFGLR &= ~(0xf << (4 * 5));
    178c:	400114b7          	lui	s1,0x40011
    1790:	ff1006b7          	lui	a3,0xff100
    SPI1->CTLR1 |= (SPI_CPOL_Low | SPI_CPHA_1Edge);
    1794:	0742                	slli	a4,a4,0x10
    1796:	8341                	srli	a4,a4,0x10
    1798:	00e79023          	sh	a4,0(a5)
    SPI1->CTLR1 |= SPI_NSS_Soft; // SSM NSS software control mode
    179c:	0007d703          	lhu	a4,0(a5)
    GPIOC->CFGLR &= ~(0xf << (4 * 5));
    17a0:	16fd                	addi	a3,a3,-1
	// uses SCK-PC5, MOSI-PC6, RST-PD2, DC-PC4
	// SPI_init();
	// mod_st7735_setup(PC0, PC3);

	SPI_init2();
	Delay_Ms(100);
    17a2:	00494537          	lui	a0,0x494
    SPI1->CTLR1 |= SPI_NSS_Soft; // SSM NSS software control mode
    17a6:	0742                	slli	a4,a4,0x10
    17a8:	8341                	srli	a4,a4,0x10
    17aa:	20076713          	ori	a4,a4,512
    17ae:	00e79023          	sh	a4,0(a5)
    GPIOC->CFGLR &= ~(0xf << (4 * 5));
    17b2:	4098                	lw	a4,0(s1)
    17b4:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.d894f163+0x489fee>
    17b8:	8f75                	and	a4,a4,a3
    17ba:	c098                	sw	a4,0(s1)
    GPIOC->CFGLR |= (GPIO_Speed_50MHz | GPIO_CNF_OUT_PP_AF) << (4 * 5);
    17bc:	4098                	lw	a4,0(s1)
    17be:	00b006b7          	lui	a3,0xb00
    17c2:	8f55                	or	a4,a4,a3
    17c4:	c098                	sw	a4,0(s1)
    SPI1->CTLR1 |= SPI_Mode_Master;
    17c6:	0007d703          	lhu	a4,0(a5)
    GPIOC->CFGLR &= ~(0xf << (4 * 6));
    17ca:	f10006b7          	lui	a3,0xf1000
    17ce:	16fd                	addi	a3,a3,-1
    SPI1->CTLR1 |= SPI_Mode_Master;
    17d0:	0742                	slli	a4,a4,0x10
    17d2:	8341                	srli	a4,a4,0x10
    17d4:	10476713          	ori	a4,a4,260
    17d8:	00e79023          	sh	a4,0(a5)
    SPI1->CTLR1 |= SPI_Direction_2Lines_FullDuplex;
    17dc:	0007d703          	lhu	a4,0(a5)
    17e0:	0742                	slli	a4,a4,0x10
    17e2:	8341                	srli	a4,a4,0x10
    17e4:	00e79023          	sh	a4,0(a5)
    GPIOC->CFGLR &= ~(0xf << (4 * 6));
    17e8:	4098                	lw	a4,0(s1)
    17ea:	8f75                	and	a4,a4,a3
    17ec:	c098                	sw	a4,0(s1)
    GPIOC->CFGLR |= (GPIO_Speed_50MHz | GPIO_CNF_OUT_PP_AF) << (4 * 6);
    17ee:	4098                	lw	a4,0(s1)
    17f0:	0b0006b7          	lui	a3,0xb000
    17f4:	8f55                	or	a4,a4,a3
    17f6:	c098                	sw	a4,0(s1)
    GPIOC->CFGLR &= ~(0xf << (4 * 7));
    17f8:	4098                	lw	a4,0(s1)
    GPIOC->CFGLR |= GPIO_CNF_IN_FLOATING << (4 * 7);
    17fa:	400006b7          	lui	a3,0x40000
    GPIOC->CFGLR &= ~(0xf << (4 * 7));
    17fe:	0712                	slli	a4,a4,0x4
    1800:	8311                	srli	a4,a4,0x4
    1802:	c098                	sw	a4,0(s1)
    GPIOC->CFGLR |= GPIO_CNF_IN_FLOATING << (4 * 7);
    1804:	4098                	lw	a4,0(s1)
    1806:	8f55                	or	a4,a4,a3
    1808:	c098                	sw	a4,0(s1)
	SPI1->CTLR1 &= ~(SPI_CTLR1_DFF); // DFF 16bit data-length enable, writable only when SPE is 0
    180a:	0007d703          	lhu	a4,0(a5)
    180e:	76fd                	lui	a3,0xfffff
    1810:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
    1814:	0742                	slli	a4,a4,0x10
    1816:	8341                	srli	a4,a4,0x10
    1818:	8f75                	and	a4,a4,a3
    181a:	00e79023          	sh	a4,0(a5)
    SPI1->CTLR1 |= SPI_CTLR1_SPE;
    181e:	0007d703          	lhu	a4,0(a5)
    1822:	0742                	slli	a4,a4,0x10
    1824:	8341                	srli	a4,a4,0x10
    1826:	04076713          	ori	a4,a4,64
    182a:	00e79023          	sh	a4,0(a5)
    182e:	a3ffe0ef          	jal	ra,26c <DelaySysTick>

	FATFS fatfs; /* File system object */
	UINT br;
	BYTE buff[64];

	printf( "Mounting volume.\n\r" );
    1832:	650d                	lui	a0,0x3
    1834:	ccc50513          	addi	a0,a0,-820 # 2ccc <I2C1_ER_IRQHandler+0x13a>
    1838:	9efff0ef          	jal	ra,1226 <printf>
	SPI_set_prescaler(7);
    183c:	451d                	li	a0,7
{
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    183e:	c801aa23          	sw	zero,-876(gp) # 20000090 <FatFs>
    1842:	898ff0ef          	jal	ra,8da <SPI_set_prescaler>
	CS_H();
    1846:	4785                	li	a5,1
    1848:	c89c                	sw	a5,16(s1)
	skip_mmc(10);			/* Dummy clocks */
    184a:	4529                	li	a0,10
    184c:	8eaff0ef          	jal	ra,936 <skip_mmc>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1850:	4581                	li	a1,0
    1852:	04000513          	li	a0,64
    1856:	8faff0ef          	jal	ra,950 <send_cmd>
    185a:	c9418793          	addi	a5,gp,-876 # 20000090 <FatFs>
    185e:	f4f42423          	sw	a5,-184(s0)
    1862:	4785                	li	a5,1
    1864:	84aa                	mv	s1,a0
    1866:	26f50a63          	beq	a0,a5,1ada <main+0x5e8>
	ty = 0;
    186a:	4481                	li	s1,0
	CardType = ty;
    186c:	c8918823          	sb	s1,-880(gp) # 2000008c <CardType>
	CS_H();
    1870:	4705                	li	a4,1
    1872:	400117b7          	lui	a5,0x40011
    1876:	cb98                	sw	a4,16(a5)
	rcvr_mmc();
    1878:	8b8ff0ef          	jal	ra,930 <rcvr_mmc>
	SPI_set_prescaler(0);
    187c:	4501                	li	a0,0
    187e:	85cff0ef          	jal	ra,8da <SPI_set_prescaler>

	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
		return FR_NOT_READY;
    1882:	4789                	li	a5,2
    1884:	f4f42e23          	sw	a5,-164(s0)
	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
    1888:	c49d                	beqz	s1,18b6 <main+0x3c4>
	}

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    188a:	4581                	li	a1,0
    188c:	fb440513          	addi	a0,s0,-76
    1890:	a64ff0ef          	jal	ra,af4 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    1894:	4705                	li	a4,1
	bsect = 0;
    1896:	4481                	li	s1,0
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    1898:	30e51463          	bne	a0,a4,1ba0 <main+0x6ae>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    189c:	46c1                	li	a3,16
    189e:	1be00613          	li	a2,446
    18a2:	4581                	li	a1,0
    18a4:	fb440513          	addi	a0,s0,-76
    18a8:	944ff0ef          	jal	ra,9ec <disk_readp>
    18ac:	2c050b63          	beqz	a0,1b82 <main+0x690>
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    18b0:	4785                	li	a5,1
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    18b2:	f4f42e23          	sw	a5,-164(s0)
	FRESULT rc = pf_mount( &fatfs );
	printf( "rc=%u\n\r", rc );
    18b6:	f5c42583          	lw	a1,-164(s0)
    18ba:	650d                	lui	a0,0x3
    18bc:	ce050513          	addi	a0,a0,-800 # 2ce0 <I2C1_ER_IRQHandler+0x14e>
    18c0:	967ff0ef          	jal	ra,1226 <printf>
	if ( rc ) return;
    18c4:	f5c42783          	lw	a5,-164(s0)
    18c8:	44079963          	bnez	a5,1d1a <main+0x828>

	printf( "Opening file \"%s\"\n\r", filename );
    18cc:	678d                	lui	a5,0x3
    18ce:	650d                	lui	a0,0x3
    18d0:	c5078593          	addi	a1,a5,-944 # 2c50 <I2C1_ER_IRQHandler+0xbe>
    18d4:	ce850513          	addi	a0,a0,-792 # 2ce8 <I2C1_ER_IRQHandler+0x156>
    18d8:	94fff0ef          	jal	ra,1226 <printf>
)
{
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    18dc:	f4842783          	lw	a5,-184(s0)
    18e0:	4384                	lw	s1,0(a5)


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    18e2:	42048c63          	beqz	s1,1d1a <main+0x828>
	dj->sclust = 0;						/* Set start directory (always root dir) */
    18e6:	678d                	lui	a5,0x3

	fs->flag = 0;
    18e8:	000480a3          	sb	zero,1(s1) # 40011001 <_eusrstack+0x20010801>
	dj.fn = sp;
    18ec:	f6840713          	addi	a4,s0,-152
	dj->sclust = 0;						/* Set start directory (always root dir) */
    18f0:	c5078793          	addi	a5,a5,-944 # 2c50 <I2C1_ER_IRQHandler+0xbe>
	dj.fn = sp;
    18f4:	f6e42c23          	sw	a4,-136(s0)
	dj->sclust = 0;						/* Set start directory (always root dir) */
    18f8:	f6042e23          	sw	zero,-132(s0)
    18fc:	f4f42e23          	sw	a5,-164(s0)
    1900:	f7842303          	lw	t1,-136(s0)
	while (cnt--) *d++ = (char)val;
    1904:	02000593          	li	a1,32
    1908:	462d                	li	a2,11
    190a:	851a                	mv	a0,t1
    190c:	9a5ff0ef          	jal	ra,12b0 <memset>
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
    1910:	678d                	lui	a5,0x3
	while (cnt--) *d++ = (char)val;
    1912:	832a                	mv	t1,a0
	si = i = 0; ni = 8;
    1914:	4681                	li	a3,0
    1916:	4581                	li	a1,0
    1918:	4721                	li	a4,8
		if (c == '.' || i >= ni) {
    191a:	02e00513          	li	a0,46
			if (ni != 8 || c != '.') break;
    191e:	42a1                	li	t0,8
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
    1920:	fe078393          	addi	t2,a5,-32 # 2fe0 <cvt.0>
		c = p[si++];
    1924:	f5c42783          	lw	a5,-164(s0)
    1928:	00158613          	addi	a2,a1,1 # 80000001 <_eusrstack+0x5ffff801>
    192c:	0ff67613          	andi	a2,a2,255
    1930:	95be                	add	a1,a1,a5
    1932:	0005c783          	lbu	a5,0(a1)
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    1936:	02000593          	li	a1,32
    193a:	34f5f863          	bgeu	a1,a5,1c8a <main+0x798>
    193e:	02f00593          	li	a1,47
    1942:	34b78463          	beq	a5,a1,1c8a <main+0x798>
		if (c == '.' || i >= ni) {
    1946:	00a79463          	bne	a5,a0,194e <main+0x45c>
    194a:	5f50006f          	j	273e <main+0x124c>
    194e:	32e6fe63          	bgeu	a3,a4,1c8a <main+0x798>
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
    1952:	01879593          	slli	a1,a5,0x18
    1956:	85e1                	srai	a1,a1,0x18
    1958:	0005d563          	bgez	a1,1962 <main+0x470>
    195c:	979e                	add	a5,a5,t2
    195e:	f807c783          	lbu	a5,-128(a5)
			if (PF_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
    1962:	f9f78593          	addi	a1,a5,-97
    1966:	0ff5f593          	andi	a1,a1,255
    196a:	40e5                	li	ra,25
    196c:	00b0e563          	bltu	ra,a1,1976 <main+0x484>
    1970:	1781                	addi	a5,a5,-32
    1972:	0ff7f793          	andi	a5,a5,255
			sfn[i++] = c;
    1976:	00168593          	addi	a1,a3,1
    197a:	969a                	add	a3,a3,t1
    197c:	00f68023          	sb	a5,0(a3)
    1980:	87ba                	mv	a5,a4
    1982:	0ff5f713          	andi	a4,a1,255
			i = 8; ni = 11;
    1986:	86ba                	mv	a3,a4
		c = p[si++];
    1988:	85b2                	mv	a1,a2
    198a:	873e                	mv	a4,a5
    198c:	bf61                	j	1924 <main+0x432>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    198e:	02dc7537          	lui	a0,0x2dc7
    1992:	95be                	add	a1,a1,a5
    1994:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbcdee>
    1998:	f28fe0ef          	jal	ra,c0 <__hidden___udivsi3>
    199c:	14fd                	addi	s1,s1,-1
    199e:	8d65                	and	a0,a0,s1
    19a0:	0542                	slli	a0,a0,0x10
    19a2:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    19a4:	67a1                	lui	a5,0x8
    19a6:	8d5d                	or	a0,a0,a5
    19a8:	b161                	j	1630 <main+0x13e>
		if (i2c_ping(0x3C) == I2C_OK) {
    19aa:	03c00513          	li	a0,60
    19ae:	aceff0ef          	jal	ra,c7c <i2c_ping>
    19b2:	0e051863          	bnez	a0,1aa2 <main+0x5b0>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    19b6:	678d                	lui	a5,0x3
    19b8:	ca018823          	sb	zero,-848(gp) # 200000ac <ssd1306_buffer>
    19bc:	56078793          	addi	a5,a5,1376 # 3560 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    19c0:	0007c503          	lbu	a0,0(a5)
    19c4:	0ff00713          	li	a4,255
    19c8:	02e51e63          	bne	a0,a4,1a04 <main+0x512>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    19cc:	02100513          	li	a0,33
    19d0:	c88ff0ef          	jal	ra,e58 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    19d4:	4501                	li	a0,0
    19d6:	c82ff0ef          	jal	ra,e58 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    19da:	07f00513          	li	a0,127
    19de:	c7aff0ef          	jal	ra,e58 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    19e2:	02200513          	li	a0,34
    19e6:	c72ff0ef          	jal	ra,e58 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    19ea:	4501                	li	a0,0
    19ec:	c6cff0ef          	jal	ra,e58 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    19f0:	451d                	li	a0,7
    19f2:	c66ff0ef          	jal	ra,e58 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    19f6:	02000593          	li	a1,32
    19fa:	cb018513          	addi	a0,gp,-848 # 200000ac <ssd1306_buffer>
    19fe:	8f5ff0ef          	jal	ra,12f2 <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    1a02:	a809                	j	1a14 <main+0x522>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    1a04:	0785                	addi	a5,a5,1
    1a06:	f4f42e23          	sw	a5,-164(s0)
    1a0a:	c4eff0ef          	jal	ra,e58 <ssd1306_cmd>
    1a0e:	f5c42783          	lw	a5,-164(s0)
    1a12:	d55d                	beqz	a0,19c0 <main+0x4ce>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    1a14:	f9c18513          	addi	a0,gp,-100 # 20000398 <frame_buffer>
    1a18:	40000613          	li	a2,1024
    1a1c:	4581                	li	a1,0
    1a1e:	893ff0ef          	jal	ra,12b0 <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1a22:	02100513          	li	a0,33
    1a26:	c32ff0ef          	jal	ra,e58 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1a2a:	4501                	li	a0,0
    1a2c:	c2cff0ef          	jal	ra,e58 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1a30:	07f00513          	li	a0,127
    1a34:	c24ff0ef          	jal	ra,e58 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1a38:	02200513          	li	a0,34
    1a3c:	c1cff0ef          	jal	ra,e58 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1a40:	4501                	li	a0,0
    1a42:	c16ff0ef          	jal	ra,e58 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1a46:	451d                	li	a0,7
    1a48:	c10ff0ef          	jal	ra,e58 <ssd1306_cmd>
    1a4c:	4481                	li	s1,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    1a4e:	f9c18793          	addi	a5,gp,-100 # 20000398 <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1a52:	4501                	li	a0,0
    1a54:	97a6                	add	a5,a5,s1
    1a56:	02050713          	addi	a4,a0,32
    1a5a:	01071593          	slli	a1,a4,0x10
    1a5e:	81c1                	srli	a1,a1,0x10
    1a60:	8d89                	sub	a1,a1,a0
    1a62:	953e                	add	a0,a0,a5
    1a64:	f4e42a23          	sw	a4,-172(s0)
    1a68:	f4f42e23          	sw	a5,-164(s0)
    1a6c:	887ff0ef          	jal	ra,12f2 <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    1a70:	f5442703          	lw	a4,-172(s0)
    1a74:	f5c42783          	lw	a5,-164(s0)
    1a78:	853a                	mv	a0,a4
    1a7a:	08000713          	li	a4,128
    1a7e:	fce51ce3          	bne	a0,a4,1a56 <main+0x564>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    1a82:	08048493          	addi	s1,s1,128
    1a86:	40000793          	li	a5,1024
    1a8a:	fcf492e3          	bne	s1,a5,1a4e <main+0x55c>
			sprintf(str_output, "Hello Bee!");
    1a8e:	658d                	lui	a1,0x3
    1a90:	c7458593          	addi	a1,a1,-908 # 2c74 <I2C1_ER_IRQHandler+0xe2>
    1a94:	3d418513          	addi	a0,gp,980 # 200007d0 <str_output>
    1a98:	82bff0ef          	jal	ra,12c2 <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    1a9c:	4501                	li	a0,0
    1a9e:	881ff0ef          	jal	ra,131e <ssd1306_print_str_at.constprop.0>
		printf("----Scanning I2C Bus for Devices---\n");
    1aa2:	650d                	lui	a0,0x3
    1aa4:	c8050513          	addi	a0,a0,-896 # 2c80 <I2C1_ER_IRQHandler+0xee>
    1aa8:	909ff0ef          	jal	ra,13b0 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1aac:	4481                	li	s1,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    1aae:	8526                	mv	a0,s1
    1ab0:	9ccff0ef          	jal	ra,c7c <i2c_ping>
    1ab4:	e501                	bnez	a0,1abc <main+0x5ca>
    1ab6:	8526                	mv	a0,s1
    1ab8:	925ff0ef          	jal	ra,13dc <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1abc:	0485                	addi	s1,s1,1
    1abe:	0ff4f493          	andi	s1,s1,255
    1ac2:	07f00793          	li	a5,127
    1ac6:	fef494e3          	bne	s1,a5,1aae <main+0x5bc>
		printf("----Done Scanning----\n\n");
    1aca:	650d                	lui	a0,0x3
    1acc:	ca450513          	addi	a0,a0,-860 # 2ca4 <I2C1_ER_IRQHandler+0x112>
    1ad0:	8e1ff0ef          	jal	ra,13b0 <puts>
		modI2C_task();
    1ad4:	8b3ff0ef          	jal	ra,1386 <modI2C_task>
    1ad8:	b641                	j	1658 <main+0x166>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1ada:	1aa00593          	li	a1,426
    1ade:	04800513          	li	a0,72
    1ae2:	e6ffe0ef          	jal	ra,950 <send_cmd>
    1ae6:	04951b63          	bne	a0,s1,1b3c <main+0x64a>
    1aea:	4481                	li	s1,0
			for (n = 0; n < 4; n++) buf[n] = rcvr_mmc();	/* Get trailing return value of R7 resp */
    1aec:	e45fe0ef          	jal	ra,930 <rcvr_mmc>
    1af0:	fb440793          	addi	a5,s0,-76
    1af4:	97a6                	add	a5,a5,s1
    1af6:	00a78023          	sb	a0,0(a5)
    1afa:	0485                	addi	s1,s1,1
    1afc:	4791                	li	a5,4
    1afe:	fef497e3          	bne	s1,a5,1aec <main+0x5fa>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    1b02:	fb644703          	lbu	a4,-74(s0)
    1b06:	4785                	li	a5,1
    1b08:	d6f711e3          	bne	a4,a5,186a <main+0x378>
    1b0c:	fb744703          	lbu	a4,-73(s0)
    1b10:	0aa00793          	li	a5,170
    1b14:	d4f71be3          	bne	a4,a5,186a <main+0x378>
    1b18:	3e800493          	li	s1,1000
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    1b1c:	400005b7          	lui	a1,0x40000
    1b20:	0e900513          	li	a0,233
    1b24:	e2dfe0ef          	jal	ra,950 <send_cmd>
    1b28:	3c0501e3          	beqz	a0,26ea <main+0x11f8>
					DLY_US(1000);
    1b2c:	6531                	lui	a0,0xc
    1b2e:	b8050513          	addi	a0,a0,-1152 # bb80 <lib_i2c.c.d894f163+0x1d6e>
				for (tmr = 1000; tmr; tmr--) {				/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1b32:	14fd                	addi	s1,s1,-1
					DLY_US(1000);
    1b34:	f38fe0ef          	jal	ra,26c <DelaySysTick>
				for (tmr = 1000; tmr; tmr--) {				/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1b38:	f0f5                	bnez	s1,1b1c <main+0x62a>
    1b3a:	bb05                	j	186a <main+0x378>
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1b3c:	4581                	li	a1,0
    1b3e:	0e900513          	li	a0,233
    1b42:	e0ffe0ef          	jal	ra,950 <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    1b46:	04100793          	li	a5,65
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1b4a:	00a4e563          	bltu	s1,a0,1b54 <main+0x662>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    1b4e:	4489                	li	s1,2
    1b50:	0e900793          	li	a5,233
    1b54:	f4f42e23          	sw	a5,-164(s0)
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    1b58:	3e800793          	li	a5,1000
				if (send_cmd(cmd, 0) == 0) break;
    1b5c:	f5c42503          	lw	a0,-164(s0)
    1b60:	4581                	li	a1,0
    1b62:	f4f42a23          	sw	a5,-172(s0)
    1b66:	debfe0ef          	jal	ra,950 <send_cmd>
    1b6a:	3a050fe3          	beqz	a0,2728 <main+0x1236>
				DLY_US(1000);
    1b6e:	6531                	lui	a0,0xc
    1b70:	b8050513          	addi	a0,a0,-1152 # bb80 <lib_i2c.c.d894f163+0x1d6e>
    1b74:	ef8fe0ef          	jal	ra,26c <DelaySysTick>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    1b78:	f5442783          	lw	a5,-172(s0)
    1b7c:	17fd                	addi	a5,a5,-1
    1b7e:	fff9                	bnez	a5,1b5c <main+0x66a>
    1b80:	b1ed                	j	186a <main+0x378>
			if (buf[4]) {					/* Is the partition existing? */
    1b82:	fb844783          	lbu	a5,-72(s0)
    1b86:	e399                	bnez	a5,1b8c <main+0x69a>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1b88:	4799                	li	a5,6
    1b8a:	b325                	j	18b2 <main+0x3c0>
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
    1b8c:	fbc40513          	addi	a0,s0,-68
    1b90:	c87fe0ef          	jal	ra,816 <ld_dword>
    1b94:	84aa                	mv	s1,a0
				fmt = check_fs(buf, bsect);	/* Check the partition */
    1b96:	85aa                	mv	a1,a0
    1b98:	fb440513          	addi	a0,s0,-76
    1b9c:	f59fe0ef          	jal	ra,af4 <check_fs>
	if (fmt == 3) return FR_DISK_ERR;
    1ba0:	478d                	li	a5,3
    1ba2:	d0f507e3          	beq	a0,a5,18b0 <main+0x3be>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1ba6:	f16d                	bnez	a0,1b88 <main+0x696>
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
    1ba8:	02400693          	li	a3,36
    1bac:	4635                	li	a2,13
    1bae:	85a6                	mv	a1,s1
    1bb0:	fb440513          	addi	a0,s0,-76
    1bb4:	e39fe0ef          	jal	ra,9ec <disk_readp>
    1bb8:	f4a42e23          	sw	a0,-164(s0)
    1bbc:	ce051ae3          	bnez	a0,18b0 <main+0x3be>
	fsize = ld_word(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    1bc0:	fbe44583          	lbu	a1,-66(s0)
    1bc4:	fbd44503          	lbu	a0,-67(s0)
    1bc8:	05a2                	slli	a1,a1,0x8
    1bca:	8dc9                	or	a1,a1,a0
	if (!fsize) fsize = ld_dword(buf+BPB_FATSz32-13);
    1bcc:	e591                	bnez	a1,1bd8 <main+0x6e6>
    1bce:	fcb40513          	addi	a0,s0,-53
    1bd2:	c45fe0ef          	jal	ra,816 <ld_dword>
    1bd6:	85aa                	mv	a1,a0
	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1bd8:	fb744503          	lbu	a0,-73(s0)
    1bdc:	cc4fe0ef          	jal	ra,a0 <__mulsi3>
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1be0:	fb644783          	lbu	a5,-74(s0)
	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1be4:	f4a42a23          	sw	a0,-172(s0)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1be8:	fb544503          	lbu	a0,-75(s0)
    1bec:	07a2                	slli	a5,a5,0x8
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    1bee:	fb444583          	lbu	a1,-76(s0)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1bf2:	8fc9                	or	a5,a5,a0
    1bf4:	00f48733          	add	a4,s1,a5
    1bf8:	fb845483          	lhu	s1,-72(s0)
	tsect = ld_word(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    1bfc:	fba45503          	lhu	a0,-70(s0)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1c00:	f4e42823          	sw	a4,-176(s0)
    1c04:	f8e42a23          	sw	a4,-108(s0)
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    1c08:	f8b40523          	sb	a1,-118(s0)
	fs->n_rootdir = ld_word(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    1c0c:	f8941623          	sh	s1,-116(s0)
	if (!tsect) tsect = ld_dword(buf+BPB_TotSec32-13);
    1c10:	ed09                	bnez	a0,1c2a <main+0x738>
    1c12:	fc740513          	addi	a0,s0,-57
    1c16:	f4b42223          	sw	a1,-188(s0)
    1c1a:	f4f42623          	sw	a5,-180(s0)
    1c1e:	bf9fe0ef          	jal	ra,816 <ld_dword>
    1c22:	f4442583          	lw	a1,-188(s0)
    1c26:	f4c42783          	lw	a5,-180(s0)
		- ld_word(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    1c2a:	f5442703          	lw	a4,-172(s0)
    1c2e:	8091                	srli	s1,s1,0x4
    1c30:	97a6                	add	a5,a5,s1
    1c32:	97ba                	add	a5,a5,a4
		) / fs->csize + 2;
    1c34:	8d1d                	sub	a0,a0,a5
    1c36:	c8afe0ef          	jal	ra,c0 <__hidden___udivsi3>
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    1c3a:	77fd                	lui	a5,0xfffff
	mclst = (tsect						/* Last cluster# + 1 */
    1c3c:	00250713          	addi	a4,a0,2
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    1c40:	07a9                	addi	a5,a5,10
    1c42:	66bd                	lui	a3,0xf
    1c44:	953e                	add	a0,a0,a5
	fs->n_fatent = (CLUST)mclst;
    1c46:	f8e42823          	sw	a4,-112(s0)
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    1c4a:	67c1                	lui	a5,0x10
    1c4c:	16f9                	addi	a3,a3,-2
    1c4e:	17d9                	addi	a5,a5,-10
    1c50:	26a6ffe3          	bgeu	a3,a0,26ce <main+0x11dc>
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
    1c54:	f2e7fae3          	bgeu	a5,a4,1b88 <main+0x696>
	fs->fs_type = fmt;
    1c58:	478d                	li	a5,3
		fs->dirbase = ld_dword(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    1c5a:	fd340513          	addi	a0,s0,-45
	fs->fs_type = fmt;
    1c5e:	f8f40423          	sb	a5,-120(s0)
		fs->dirbase = ld_dword(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    1c62:	bb5fe0ef          	jal	ra,816 <ld_dword>
    1c66:	f8a42c23          	sw	a0,-104(s0)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    1c6a:	f5042783          	lw	a5,-176(s0)
	FatFs = fs;
    1c6e:	f4842703          	lw	a4,-184(s0)
	fs->flag = 0;
    1c72:	f80404a3          	sb	zero,-119(s0)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    1c76:	94be                	add	s1,s1,a5
    1c78:	f5442783          	lw	a5,-172(s0)
    1c7c:	94be                	add	s1,s1,a5
	FatFs = fs;
    1c7e:	f8840793          	addi	a5,s0,-120
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    1c82:	f8942e23          	sw	s1,-100(s0)
	FatFs = fs;
    1c86:	c31c                	sw	a5,0(a4)
	return FR_OK;
    1c88:	b13d                	j	18b6 <main+0x3c4>
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1c8a:	f5c42703          	lw	a4,-164(s0)
	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1c8e:	0217b793          	sltiu	a5,a5,33
    1c92:	00f305a3          	sb	a5,11(t1)
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1c96:	9732                	add	a4,a4,a2
	res = dir_rewind(dj);			/* Rewind directory object */
    1c98:	f7440513          	addi	a0,s0,-140
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1c9c:	f4e42e23          	sw	a4,-164(s0)
	res = dir_rewind(dj);			/* Rewind directory object */
    1ca0:	bf1fe0ef          	jal	ra,890 <dir_rewind>
	if (res != FR_OK) return res;
    1ca4:	e93d                	bnez	a0,1d1a <main+0x828>
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
    1ca6:	f7445603          	lhu	a2,-140(s0)
    1caa:	f8442583          	lw	a1,-124(s0)
    1cae:	02000693          	li	a3,32
    1cb2:	8a3d                	andi	a2,a2,15
    1cb4:	0616                	slli	a2,a2,0x5
    1cb6:	fb440513          	addi	a0,s0,-76
    1cba:	d33fe0ef          	jal	ra,9ec <disk_readp>
		if (res != FR_OK) break;
    1cbe:	ed31                	bnez	a0,1d1a <main+0x828>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1cc0:	fb444783          	lbu	a5,-76(s0)
    1cc4:	cbb9                	beqz	a5,1d1a <main+0x828>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) break;	/* Is it a valid entry? */
    1cc6:	fbf44783          	lbu	a5,-65(s0)
    1cca:	0087f713          	andi	a4,a5,8
    1cce:	e305                	bnez	a4,1cee <main+0x7fc>
    1cd0:	f7842683          	lw	a3,-136(s0)
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1cd4:	452d                	li	a0,11
    1cd6:	fb440613          	addi	a2,s0,-76
    1cda:	963a                	add	a2,a2,a4
    1cdc:	0705                	addi	a4,a4,1
    1cde:	00e685b3          	add	a1,a3,a4
    1ce2:	00064603          	lbu	a2,0(a2)
    1ce6:	fff5c583          	lbu	a1,-1(a1) # 3fffffff <_eusrstack+0x1ffff7ff>
    1cea:	0ac58263          	beq	a1,a2,1d8e <main+0x89c>
	i = dj->index + 1;
    1cee:	f7445783          	lhu	a5,-140(s0)
    1cf2:	0785                	addi	a5,a5,1
    1cf4:	07c2                	slli	a5,a5,0x10
    1cf6:	83c1                	srli	a5,a5,0x10
	if (!i || !dj->sect) return FR_NO_FILE;	/* Report EOT when index has reached 65535 */
    1cf8:	c38d                	beqz	a5,1d1a <main+0x828>
    1cfa:	f8442703          	lw	a4,-124(s0)
    1cfe:	cf11                	beqz	a4,1d1a <main+0x828>
	if (!(i % 16)) {		/* Sector changed? */
    1d00:	00f7f693          	andi	a3,a5,15
    1d04:	eee1                	bnez	a3,1ddc <main+0x8ea>
		if (dj->clust == 0) {	/* Static table */
    1d06:	f8042503          	lw	a0,-128(s0)
		dj->sect++;			/* Next sector */
    1d0a:	0705                	addi	a4,a4,1
    1d0c:	f8e42223          	sw	a4,-124(s0)
		if (dj->clust == 0) {	/* Static table */
    1d10:	ed49                	bnez	a0,1daa <main+0x8b8>
			if (i >= fs->n_rootdir) return FR_NO_FILE;	/* Report EOT when end of table */
    1d12:	0044d703          	lhu	a4,4(s1)
    1d16:	0ce7e363          	bltu	a5,a4,1ddc <main+0x8ea>
    model->btn_state = newState;
    1d1a:	478d                	li	a5,3
	Button_t button1 = { BUTTON_PIN, BUTTON_IDLE, 0, 0, 0, 0, 0, 0 };
    1d1c:	f2042c23          	sw	zero,-200(s0)
    1d20:	f4f42e23          	sw	a5,-164(s0)
    1d24:	4481                	li	s1,0
    1d26:	f4042223          	sw	zero,-188(s0)

	// TIM2 Ch1, Ch2 : uses PD3, PD4.
	// modEncoder_setup(&encoder_a);

	while(1) {
		uint32_t now = millis();
    1d2a:	f6042783          	lw	a5,-160(s0)

		button_run(&button1, button_onChanged);
		// modEncoder_task(now, &encoder_a, encoder_onChanged);

		if (now - sec_time > 1000) {
    1d2e:	f6442703          	lw	a4,-156(s0)
		uint32_t now = millis();
    1d32:	439c                	lw	a5,0(a5)
    1d34:	f2f42e23          	sw	a5,-196(s0)
}

void button_run(Button_t *model, void (*handler)(int, uint32_t)) {
    if (model->pin == 0xFF) return;
    
    uint32_t now = millis();
    1d38:	f6042783          	lw	a5,-160(s0)
    1d3c:	439c                	lw	a5,0(a5)
    1d3e:	f6f42223          	sw	a5,-156(s0)
    uint8_t read = funDigitalRead(model->pin);

    // Debounce check
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1d42:	f6442683          	lw	a3,-156(s0)
    uint8_t read = funDigitalRead(model->pin);
    1d46:	400117b7          	lui	a5,0x40011
    1d4a:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    1d4e:	479c                	lw	a5,8(a5)
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1d50:	40e68633          	sub	a2,a3,a4
    1d54:	46cd                	li	a3,19
    1d56:	62c6ff63          	bgeu	a3,a2,2394 <main+0xea2>
    model->debounce_time = now;

    switch (model->btn_state) {
    1d5a:	f5c42683          	lw	a3,-164(s0)
    1d5e:	4709                	li	a4,2
    uint8_t read = funDigitalRead(model->pin);
    1d60:	8b85                	andi	a5,a5,1
    switch (model->btn_state) {
    1d62:	62e68363          	beq	a3,a4,2388 <main+0xe96>
    1d66:	470d                	li	a4,3
    1d68:	20e68863          	beq	a3,a4,1f78 <main+0xa86>
    1d6c:	5c069063          	bnez	a3,232c <main+0xe3a>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
    1d70:	58078d63          	beqz	a5,230a <main+0xe18>
    model->debounce_time = millis();
    1d74:	f6042703          	lw	a4,-160(s0)
    1d78:	4318                	lw	a4,0(a4)
    1d7a:	f6e42223          	sw	a4,-156(s0)
    model->release_time = millis();
    1d7e:	f6042703          	lw	a4,-160(s0)
    1d82:	4318                	lw	a4,0(a4)
    1d84:	f4e42c23          	sw	a4,-168(s0)
    model->btn_state = newState;
    1d88:	f4f42e23          	sw	a5,-164(s0)
    1d8c:	a439                	j	1f9a <main+0xaa8>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1d8e:	f4a714e3          	bne	a4,a0,1cd6 <main+0x7e4>
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
    1d92:	00b6c703          	lbu	a4,11(a3) # f00b <lib_i2c.c.d894f163+0x51f9>
    1d96:	8bc1                	andi	a5,a5,16
    1d98:	e729                	bnez	a4,1de2 <main+0x8f0>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
    1d9a:	d3c1                	beqz	a5,1d1a <main+0x828>
			dj->sclust = get_clust(dir);	/* Follow next */
    1d9c:	fb440513          	addi	a0,s0,-76
    1da0:	ac1fe0ef          	jal	ra,860 <get_clust>
    1da4:	f6a42e23          	sw	a0,-132(s0)
    1da8:	bea1                	j	1900 <main+0x40e>
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    1daa:	0024c703          	lbu	a4,2(s1)
    1dae:	0047d693          	srli	a3,a5,0x4
    1db2:	177d                	addi	a4,a4,-1
    1db4:	8f75                	and	a4,a4,a3
    1db6:	e31d                	bnez	a4,1ddc <main+0x8ea>
    1db8:	f4f42a23          	sw	a5,-172(s0)
				clst = get_fat(dj->clust);		/* Get next cluster */
    1dbc:	cd1fe0ef          	jal	ra,a8c <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
    1dc0:	4685                	li	a3,1
    1dc2:	f4a6fce3          	bgeu	a3,a0,1d1a <main+0x828>
				if (clst >= fs->n_fatent) return FR_NO_FILE;	/* Report EOT when it reached end of dynamic table */
    1dc6:	4494                	lw	a3,8(s1)
    1dc8:	f4d579e3          	bgeu	a0,a3,1d1a <main+0x828>
				dj->clust = clst;				/* Initialize data for new cluster */
    1dcc:	f8a42023          	sw	a0,-128(s0)
				dj->sect = clust2sect(clst);
    1dd0:	a65fe0ef          	jal	ra,834 <clust2sect>
    1dd4:	f5442783          	lw	a5,-172(s0)
    1dd8:	f8a42223          	sw	a0,-124(s0)
	dj->index = i;
    1ddc:	f6f41a23          	sh	a5,-140(s0)
	} while (res == FR_OK);
    1de0:	b5d9                	j	1ca6 <main+0x7b4>
    1de2:	0ff7f713          	andi	a4,a5,255
    1de6:	f4e42823          	sw	a4,-176(s0)
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) return FR_NO_FILE;	/* It is a directory */
    1dea:	fb85                	bnez	a5,1d1a <main+0x828>

	fs->org_clust = get_clust(dir);		/* File start cluster */
    1dec:	fb440513          	addi	a0,s0,-76
    1df0:	a71fe0ef          	jal	ra,860 <get_clust>
    1df4:	d088                	sw	a0,32(s1)
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
    1df6:	fd040513          	addi	a0,s0,-48
    1dfa:	a1dfe0ef          	jal	ra,816 <ld_dword>
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;
    1dfe:	4785                	li	a5,1
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
    1e00:	ccc8                	sw	a0,28(s1)
	rc = pf_open( filename );
	if ( rc ) return;

	printf( "Loading image into RAM\n\r" );
    1e02:	650d                	lui	a0,0x3
	fs->flag = FA_OPENED;
    1e04:	00f480a3          	sb	a5,1(s1)
	fs->fptr = 0;						/* File pointer */
    1e08:	0004ac23          	sw	zero,24(s1)
    1e0c:	cfc50513          	addi	a0,a0,-772 # 2cfc <I2C1_ER_IRQHandler+0x16a>
    1e10:	c16ff0ef          	jal	ra,1226 <printf>

	uint32_t total_bytes = 0;
	uint8_t cnt = 0;
	const char spinner[] = "/-\\|";
    1e14:	7c5c37b7          	lui	a5,0x7c5c3
    1e18:	d2f78793          	addi	a5,a5,-721 # 7c5c2d2f <_eusrstack+0x5c5c252f>
    1e1c:	f6f42a23          	sw	a5,-140(s0)
    1e20:	f6040c23          	sb	zero,-136(s0)
	uint32_t total_bytes = 0;
    1e24:	f4042e23          	sw	zero,-164(s0)
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	UINT rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    1e28:	f4842783          	lw	a5,-184(s0)
    1e2c:	439c                	lw	a5,0(a5)


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1e2e:	ee0786e3          	beqz	a5,1d1a <main+0x828>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
    1e32:	0017c703          	lbu	a4,1(a5)
    1e36:	8b05                	andi	a4,a4,1
    1e38:	ee0701e3          	beqz	a4,1d1a <main+0x828>

	remain = fs->fsize - fs->fptr;
    1e3c:	4fd4                	lw	a3,28(a5)
    1e3e:	4f98                	lw	a4,24(a5)
    1e40:	40e68733          	sub	a4,a3,a4
    1e44:	04000693          	li	a3,64
    1e48:	00e6f463          	bgeu	a3,a4,1e50 <main+0x95e>
    1e4c:	04000713          	li	a4,64
	*br = 0;
    1e50:	f4042a23          	sw	zero,-172(s0)
	remain = fs->fsize - fs->fptr;
    1e54:	fb440693          	addi	a3,s0,-76
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
		if (dr) ABORT(FR_DISK_ERR);
		fs->fptr += rcnt;							/* Advances file read pointer */
		btr -= rcnt; *br += rcnt;					/* Update read counter */
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
    1e58:	f4d42623          	sw	a3,-180(s0)
	while (btr)	{									/* Repeat until all data transferred */
    1e5c:	eb2d                	bnez	a4,1ece <main+0x9dc>

	for ( ;; ) {
		rc = pf_read( buff, sizeof( buff ), &br ); /* Read a chunk of file */
		if ( rc || !br ) break; /* Error or end of file */
    1e5e:	f5442783          	lw	a5,-172(s0)
    1e62:	04078be3          	beqz	a5,26b8 <main+0x11c6>

		printf( "Read %u bytes\n\r", br );
    1e66:	85be                	mv	a1,a5
    1e68:	678d                	lui	a5,0x3
    1e6a:	d1878513          	addi	a0,a5,-744 # 2d18 <I2C1_ER_IRQHandler+0x186>
    1e6e:	bb8ff0ef          	jal	ra,1226 <printf>
		printf( "string: %s\n\r", buff );
    1e72:	650d                	lui	a0,0x3
    1e74:	fb440593          	addi	a1,s0,-76
    1e78:	d2850513          	addi	a0,a0,-728 # 2d28 <I2C1_ER_IRQHandler+0x196>
    1e7c:	baaff0ef          	jal	ra,1226 <printf>

		total_bytes += br;
    1e80:	f5c42783          	lw	a5,-164(s0)
    1e84:	f5442703          	lw	a4,-172(s0)
    1e88:	97ba                	add	a5,a5,a4
    1e8a:	f4f42e23          	sw	a5,-164(s0)
		addr += br;

		if(total_bytes % (16*1024) == 0){
    1e8e:	07ca                	slli	a5,a5,0x12
    1e90:	ffc1                	bnez	a5,1e28 <main+0x936>
			cnt++;
    1e92:	f5042783          	lw	a5,-176(s0)
			printf("%d kb so far...  ", total_bytes/1024);
    1e96:	650d                	lui	a0,0x3
    1e98:	d3850513          	addi	a0,a0,-712 # 2d38 <I2C1_ER_IRQHandler+0x1a6>
			cnt++;
    1e9c:	0785                	addi	a5,a5,1
    1e9e:	0ff7f793          	andi	a5,a5,255
    1ea2:	f4f42823          	sw	a5,-176(s0)
			printf("%d kb so far...  ", total_bytes/1024);
    1ea6:	f5c42783          	lw	a5,-164(s0)
    1eaa:	00a7d593          	srli	a1,a5,0xa
    1eae:	b78ff0ef          	jal	ra,1226 <printf>
			putchar(spinner[cnt%4]);
    1eb2:	f5042783          	lw	a5,-176(s0)
    1eb6:	ff440713          	addi	a4,s0,-12
    1eba:	8b8d                	andi	a5,a5,3
    1ebc:	97ba                	add	a5,a5,a4
    1ebe:	f807c503          	lbu	a0,-128(a5)
    1ec2:	d6aff0ef          	jal	ra,142c <putchar>
			putchar('\r');
    1ec6:	4535                	li	a0,13
    1ec8:	d64ff0ef          	jal	ra,142c <putchar>
    1ecc:	bfb1                	j	1e28 <main+0x936>
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    1ece:	4f94                	lw	a3,24(a5)
    1ed0:	1ff6f613          	andi	a2,a3,511
    1ed4:	ee29                	bnez	a2,1f2e <main+0xa3c>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1ed6:	0027c483          	lbu	s1,2(a5)
    1eda:	0096d613          	srli	a2,a3,0x9
    1ede:	14fd                	addi	s1,s1,-1
    1ee0:	8cf1                	and	s1,s1,a2
    1ee2:	0ff4f493          	andi	s1,s1,255
			if (!cs) {								/* On the cluster boundary? */
    1ee6:	e495                	bnez	s1,1f12 <main+0xa20>
				if (fs->fptr == 0) {				/* On the top of the file? */
    1ee8:	ea81                	bnez	a3,1ef8 <main+0xa06>
					clst = fs->org_clust;
    1eea:	5388                	lw	a0,32(a5)
				if (clst <= 1) ABORT(FR_DISK_ERR);
    1eec:	4685                	li	a3,1
    1eee:	02a6e163          	bltu	a3,a0,1f10 <main+0xa1e>
		if (dr) ABORT(FR_DISK_ERR);
    1ef2:	000780a3          	sb	zero,1(a5)
    1ef6:	b515                	j	1d1a <main+0x828>
					clst = get_fat(fs->curr_clust);
    1ef8:	53c8                	lw	a0,36(a5)
    1efa:	f2e42e23          	sw	a4,-196(s0)
    1efe:	f4f42223          	sw	a5,-188(s0)
    1f02:	b8bfe0ef          	jal	ra,a8c <get_fat>
    1f06:	f3c42703          	lw	a4,-196(s0)
    1f0a:	f4442783          	lw	a5,-188(s0)
    1f0e:	bff9                	j	1eec <main+0x9fa>
				fs->curr_clust = clst;				/* Update current cluster */
    1f10:	d3c8                	sw	a0,36(a5)
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    1f12:	53c8                	lw	a0,36(a5)
    1f14:	f2e42e23          	sw	a4,-196(s0)
    1f18:	f4f42223          	sw	a5,-188(s0)
    1f1c:	919fe0ef          	jal	ra,834 <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
    1f20:	f4442783          	lw	a5,-188(s0)
    1f24:	f3c42703          	lw	a4,-196(s0)
    1f28:	d569                	beqz	a0,1ef2 <main+0xa00>
			fs->dsect = sect + cs;
    1f2a:	94aa                	add	s1,s1,a0
    1f2c:	d784                	sw	s1,40(a5)
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    1f2e:	4f90                	lw	a2,24(a5)
    1f30:	20000493          	li	s1,512
    1f34:	1ff67613          	andi	a2,a2,511
    1f38:	8c91                	sub	s1,s1,a2
    1f3a:	00977363          	bgeu	a4,s1,1f40 <main+0xa4e>
    1f3e:	84ba                	mv	s1,a4
		dr = disk_readp(rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    1f40:	578c                	lw	a1,40(a5)
    1f42:	f4c42503          	lw	a0,-180(s0)
    1f46:	86a6                	mv	a3,s1
    1f48:	f2e42e23          	sw	a4,-196(s0)
    1f4c:	f4f42223          	sw	a5,-188(s0)
    1f50:	a9dfe0ef          	jal	ra,9ec <disk_readp>
		if (dr) ABORT(FR_DISK_ERR);
    1f54:	f4442783          	lw	a5,-188(s0)
    1f58:	f3c42703          	lw	a4,-196(s0)
    1f5c:	f959                	bnez	a0,1ef2 <main+0xa00>
		fs->fptr += rcnt;							/* Advances file read pointer */
    1f5e:	4f94                	lw	a3,24(a5)
		btr -= rcnt; *br += rcnt;					/* Update read counter */
    1f60:	8f05                	sub	a4,a4,s1
		fs->fptr += rcnt;							/* Advances file read pointer */
    1f62:	96a6                	add	a3,a3,s1
    1f64:	cf94                	sw	a3,24(a5)
		btr -= rcnt; *br += rcnt;					/* Update read counter */
    1f66:	f5442683          	lw	a3,-172(s0)
    1f6a:	96a6                	add	a3,a3,s1
    1f6c:	f4d42a23          	sw	a3,-172(s0)
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
    1f70:	f4c42683          	lw	a3,-180(s0)
    1f74:	96a6                	add	a3,a3,s1
    1f76:	b5cd                	j	1e58 <main+0x966>
        if (read == 0) {
    1f78:	e38d                	bnez	a5,1f9a <main+0xaa8>
    model->debounce_time = millis();
    1f7a:	f6042783          	lw	a5,-160(s0)
    model->release_time = millis();
    1f7e:	f6042703          	lw	a4,-160(s0)
    model->btn_state = newState;
    1f82:	f4042e23          	sw	zero,-164(s0)
    model->debounce_time = millis();
    1f86:	439c                	lw	a5,0(a5)
    model->release_time = millis();
    1f88:	4318                	lw	a4,0(a4)
    1f8a:	f4e42c23          	sw	a4,-168(s0)
            model->press_time = now;
    1f8e:	f6442703          	lw	a4,-156(s0)
    model->debounce_time = millis();
    1f92:	f6f42223          	sw	a5,-156(s0)
            model->press_time = now;
    1f96:	f2e42c23          	sw	a4,-200(s0)
		if (now - sec_time > 1000) {
    1f9a:	f3c42783          	lw	a5,-196(s0)
    1f9e:	3e800713          	li	a4,1000
    1fa2:	8f85                	sub	a5,a5,s1
    1fa4:	d8f773e3          	bgeu	a4,a5,1d2a <main+0x838>
			sec_time = now;

			if (slave_mode != 0) {
    1fa8:	f4042783          	lw	a5,-192(s0)
    1fac:	cb91                	beqz	a5,1fc0 <main+0xace>
				modI2C_task(counter++);
    1fae:	f4442783          	lw	a5,-188(s0)
    1fb2:	00178493          	addi	s1,a5,1
    1fb6:	853e                	mv	a0,a5
    1fb8:	bceff0ef          	jal	ra,1386 <modI2C_task>
    1fbc:	f4942223          	sw	s1,-188(s0)
	// Increment the milliseconds count
	systick_millis++;
}

uint32_t SysTick_getRunTime(void *handler(void)) {
	uint32_t now = micros();
    1fc0:	e000f7b7          	lui	a5,0xe000f
    1fc4:	4788                	lw	a0,8(a5)
    1fc6:	03000593          	li	a1,48
    str[position] = '\0';  // End of the string.
    1fca:	075bd4b7          	lui	s1,0x75bd
    1fce:	8f2fe0ef          	jal	ra,c0 <__hidden___udivsi3>
    1fd2:	f2a42a23          	sw	a0,-204(s0)
    _cursor_x = x + TFT_X_OFFSET;
    1fd6:	4705                	li	a4,1
}


void mod_st7735_test2() {
    tft_set_cursor(0, 0);
    tft_print("Hello World!");
    1fd8:	650d                	lui	a0,0x3
    1fda:	cae19223          	sh	a4,-860(gp) # 200000a0 <_cursor_x>
    1fde:	d7850513          	addi	a0,a0,-648 # 2d78 <I2C1_ER_IRQHandler+0x1e6>
    _cursor_y = y + TFT_Y_OFFSET;
    1fe2:	4769                	li	a4,26
    1fe4:	cae19323          	sh	a4,-858(gp) # 200000a2 <_cursor_y>
    1fe8:	c64fe0ef          	jal	ra,44c <tft_print>
    str[position] = '\0';  // End of the string.
    1fec:	3c818713          	addi	a4,gp,968 # 200007c4 <str.4>
    1ff0:	000705a3          	sb	zero,11(a4) # 100b <ADC1_2_IRQHandler+0x11>
    1ff4:	3c818693          	addi	a3,gp,968 # 200007c4 <str.4>
    uint8_t     position  = 11;
    1ff8:	472d                	li	a4,11
    str[position] = '\0';  // End of the string.
    1ffa:	d1548493          	addi	s1,s1,-747 # 75bcd15 <lib_i2c.c.d894f163+0x75b2f03>
        str[--position] = num % 10 + '0';
    1ffe:	177d                	addi	a4,a4,-1
    2000:	0ff77713          	andi	a4,a4,255
    2004:	45a9                	li	a1,10
    2006:	8526                	mv	a0,s1
    2008:	f4e42823          	sw	a4,-176(s0)
    200c:	f4d42a23          	sw	a3,-172(s0)
    2010:	900fe0ef          	jal	ra,110 <__modsi3>
    2014:	f5442683          	lw	a3,-172(s0)
    2018:	03050513          	addi	a0,a0,48
        num /= 10;
    201c:	45a9                	li	a1,10
        str[--position] = num % 10 + '0';
    201e:	00a68523          	sb	a0,10(a3)
        num /= 10;
    2022:	8526                	mv	a0,s1
    2024:	894fe0ef          	jal	ra,b8 <__divsi3>
    while (num) {
    2028:	f5442683          	lw	a3,-172(s0)
    202c:	f5042703          	lw	a4,-176(s0)
    2030:	4609                	li	a2,2
        num /= 10;
    2032:	84aa                	mv	s1,a0
    while (num) {
    2034:	16fd                	addi	a3,a3,-1
    2036:	3c818793          	addi	a5,gp,968 # 200007c4 <str.4>
    203a:	fcc712e3          	bne	a4,a2,1ffe <main+0xb0c>
    tft_print(&str[position]);
    203e:	00278513          	addi	a0,a5,2 # e000f002 <_eusrstack+0xc000e802>
    2042:	c0afe0ef          	jal	ra,44c <tft_print>
    tft_print_number(123456789, 0);
    
    //! dots test
    tft_draw_pixel(rand8() % 160, rand8() % 80, colors[rand8() % 19]);
    2046:	f9cfe0ef          	jal	ra,7e2 <rand8>
    204a:	f4a42623          	sw	a0,-180(s0)
    204e:	f94fe0ef          	jal	ra,7e2 <rand8>
    2052:	f4a42a23          	sw	a0,-172(s0)
    2056:	f8cfe0ef          	jal	ra,7e2 <rand8>
    205a:	638d                	lui	t2,0x3
    205c:	45cd                	li	a1,19
    205e:	fb838493          	addi	s1,t2,-72 # 2fb8 <colors>
    2062:	88afe0ef          	jal	ra,ec <__umodsi3>
    2066:	0ff57793          	andi	a5,a0,255
    206a:	0786                	slli	a5,a5,0x1
    206c:	f5442683          	lw	a3,-172(s0)
    2070:	97a6                	add	a5,a5,s1
    2072:	0007d603          	lhu	a2,0(a5)
    2076:	8536                	mv	a0,a3
    2078:	05000593          	li	a1,80
    207c:	f4c42823          	sw	a2,-176(s0)
    2080:	86cfe0ef          	jal	ra,ec <__umodsi3>
    2084:	f4c42703          	lw	a4,-180(s0)
    2088:	0ff57793          	andi	a5,a0,255
    208c:	0a000593          	li	a1,160
    2090:	853a                	mv	a0,a4
    2092:	f4f42a23          	sw	a5,-172(s0)
    2096:	856fe0ef          	jal	ra,ec <__umodsi3>
    209a:	f5442783          	lw	a5,-172(s0)
    209e:	f5042603          	lw	a2,-176(s0)
    20a2:	0ff57513          	andi	a0,a0,255
    20a6:	85be                	mv	a1,a5
    20a8:	b24fe0ef          	jal	ra,3cc <tft_draw_pixel>

    // //! draw vertical lines
    static uint8_t x_idx = 0;
    tft_draw_line(x_idx, 0, x_idx, 80, colors[rand8() % 19], 1);
    20ac:	cb818293          	addi	t0,gp,-840 # 200000b4 <x_idx.3>
    20b0:	0002c303          	lbu	t1,0(t0)
    20b4:	01031613          	slli	a2,t1,0x10
    20b8:	8641                	srai	a2,a2,0x10
    20ba:	f4642823          	sw	t1,-176(s0)
    20be:	f4c42a23          	sw	a2,-172(s0)
    20c2:	f20fe0ef          	jal	ra,7e2 <rand8>
    20c6:	45cd                	li	a1,19
    20c8:	824fe0ef          	jal	ra,ec <__umodsi3>
    20cc:	0ff57513          	andi	a0,a0,255
    20d0:	0506                	slli	a0,a0,0x1
    20d2:	f5442603          	lw	a2,-172(s0)
    20d6:	9526                	add	a0,a0,s1
    20d8:	00055703          	lhu	a4,0(a0)
    20dc:	4785                	li	a5,1
    20de:	05000693          	li	a3,80
    20e2:	4581                	li	a1,0
    20e4:	8532                	mv	a0,a2
    20e6:	d00fe0ef          	jal	ra,5e6 <tft_draw_line>
    x_idx += 1;
    20ea:	f5042303          	lw	t1,-176(s0)
    20ee:	638d                	lui	t2,0x3
    20f0:	fb838713          	addi	a4,t2,-72 # 2fb8 <colors>
    20f4:	0305                	addi	t1,t1,1
    20f6:	f4e42823          	sw	a4,-176(s0)
    20fa:	0ff37313          	andi	t1,t1,255
    if (x_idx >= 160) x_idx = 0;
    20fe:	09f00793          	li	a5,159
    2102:	cb818293          	addi	t0,gp,-840 # 200000b4 <x_idx.3>
    2106:	2867ea63          	bltu	a5,t1,239a <main+0xea8>
    x_idx += 1;
    210a:	00628023          	sb	t1,0(t0)

    // //! draw horizontal lines
    static uint8_t y_idx = 0;
    tft_draw_line(0, y_idx, 180, y_idx, colors[rand8() % 19], 1);
    210e:	cb918313          	addi	t1,gp,-839 # 200000b5 <y_idx.2>
    2112:	00034483          	lbu	s1,0(t1)
    2116:	01049693          	slli	a3,s1,0x10
    211a:	86c1                	srai	a3,a3,0x10
    211c:	f4d42a23          	sw	a3,-172(s0)
    2120:	ec2fe0ef          	jal	ra,7e2 <rand8>
    2124:	45cd                	li	a1,19
    2126:	fc7fd0ef          	jal	ra,ec <__umodsi3>
    212a:	f5042783          	lw	a5,-176(s0)
    212e:	0ff57513          	andi	a0,a0,255
    2132:	0506                	slli	a0,a0,0x1
    2134:	953e                	add	a0,a0,a5
    2136:	f5442683          	lw	a3,-172(s0)
    213a:	00055703          	lhu	a4,0(a0)
    213e:	4785                	li	a5,1
    2140:	0b400613          	li	a2,180
    2144:	85b6                	mv	a1,a3
    2146:	4501                	li	a0,0
    2148:	c9efe0ef          	jal	ra,5e6 <tft_draw_line>
    y_idx += 1;
    214c:	0485                	addi	s1,s1,1
    214e:	0ff4f493          	andi	s1,s1,255
    if (y_idx >= 80) y_idx = 0;
    2152:	04f00793          	li	a5,79
    2156:	cb918313          	addi	t1,gp,-839 # 200000b5 <y_idx.2>
    215a:	2497e363          	bltu	a5,s1,23a0 <main+0xeae>
    y_idx += 1;
    215e:	00930023          	sb	s1,0(t1)

    //! draw random lines
    tft_draw_line(0, 0, 70, 70, RED, 5);
    2162:	6741                	lui	a4,0x10
    2164:	04600613          	li	a2,70
    2168:	4795                	li	a5,5
    216a:	80070713          	addi	a4,a4,-2048 # f800 <lib_i2c.c.d894f163+0x59ee>
    216e:	04600693          	li	a3,70
    2172:	4581                	li	a1,0
    2174:	4501                	li	a0,0
    2176:	c70fe0ef          	jal	ra,5e6 <tft_draw_line>

    tft_draw_line(rand8() % 160, rand8() % 80, rand8() % 160, rand8() % 80, colors[rand8() % 19], 1);
    217a:	e68fe0ef          	jal	ra,7e2 <rand8>
    217e:	f2a42623          	sw	a0,-212(s0)
    2182:	e60fe0ef          	jal	ra,7e2 <rand8>
    2186:	84aa                	mv	s1,a0
    2188:	e5afe0ef          	jal	ra,7e2 <rand8>
    218c:	f2a42823          	sw	a0,-208(s0)
    2190:	e52fe0ef          	jal	ra,7e2 <rand8>
    2194:	f4a42a23          	sw	a0,-172(s0)
    2198:	e4afe0ef          	jal	ra,7e2 <rand8>
    219c:	45cd                	li	a1,19
    219e:	f4ffd0ef          	jal	ra,ec <__umodsi3>
    21a2:	f5042703          	lw	a4,-176(s0)
    21a6:	0ff57793          	andi	a5,a0,255
    21aa:	0786                	slli	a5,a5,0x1
    21ac:	97ba                	add	a5,a5,a4
    21ae:	f5442683          	lw	a3,-172(s0)
    21b2:	0007d703          	lhu	a4,0(a5)
    21b6:	05000593          	li	a1,80
    21ba:	8536                	mv	a0,a3
    21bc:	f4e42423          	sw	a4,-184(s0)
    21c0:	f2dfd0ef          	jal	ra,ec <__umodsi3>
    21c4:	f3042603          	lw	a2,-208(s0)
    21c8:	0ff57693          	andi	a3,a0,255
    21cc:	0a000593          	li	a1,160
    21d0:	8532                	mv	a0,a2
    21d2:	f4d42623          	sw	a3,-180(s0)
    21d6:	f17fd0ef          	jal	ra,ec <__umodsi3>
    21da:	0ff57613          	andi	a2,a0,255
    21de:	05000593          	li	a1,80
    21e2:	8526                	mv	a0,s1
    21e4:	f4c42a23          	sw	a2,-172(s0)
    21e8:	f05fd0ef          	jal	ra,ec <__umodsi3>
    21ec:	f2c42303          	lw	t1,-212(s0)
    21f0:	0ff57493          	andi	s1,a0,255
    21f4:	0a000593          	li	a1,160
    21f8:	851a                	mv	a0,t1
    21fa:	ef3fd0ef          	jal	ra,ec <__umodsi3>
    21fe:	f4842703          	lw	a4,-184(s0)
    2202:	f4c42683          	lw	a3,-180(s0)
    2206:	f5442603          	lw	a2,-172(s0)
    220a:	4785                	li	a5,1
    220c:	85a6                	mv	a1,s1
    220e:	0ff57513          	andi	a0,a0,255
    2212:	bd4fe0ef          	jal	ra,5e6 <tft_draw_line>

    // int16_t square_x[] = {10, 60, 60, 10};
    // int16_t square_y[] = {10, 10, 60, 60};
    // _draw_poly(square_x, square_y, 4, RED, 3);

    Point16_t triangle[] = {{10, 20}, {40, 60}, {80, 70}};
    2216:	001407b7          	lui	a5,0x140
    221a:	07a9                	addi	a5,a5,10
    221c:	f8f42423          	sw	a5,-120(s0)
    2220:	003c07b7          	lui	a5,0x3c0
    2224:	02878793          	addi	a5,a5,40 # 3c0028 <lib_i2c.c.d894f163+0x3b6216>
    2228:	f8f42623          	sw	a5,-116(s0)
    222c:	004607b7          	lui	a5,0x460
    2230:	05078793          	addi	a5,a5,80 # 460050 <lib_i2c.c.d894f163+0x45623e>
    2234:	f8f42823          	sw	a5,-112(s0)
    // tft_draw_poly2(triangle, 3, RED, 3);

    tft_draw_solid_poly2(triangle, 3, RED, WHITE, 2);
    2238:	f8840793          	addi	a5,s0,-120
        int16_t y_min, y_max;
        int32_t x_step;  // Fixed-point slope (dx/dy)
        int32_t x_curr;  // Fixed-point current x
    } EdgeInfo;
    
    EdgeInfo edges[num_vertices];
    223c:	f2242823          	sw	sp,-208(s0)
    2240:	f4f42a23          	sw	a5,-172(s0)
    2244:	fdc10113          	addi	sp,sp,-36
    2248:	84be                	mv	s1,a5
    224a:	4785                	li	a5,1
    224c:	f4242623          	sw	sp,-180(s0)
    2250:	f4f42423          	sw	a5,-184(s0)
    uint8_t valid_edges = 0;
    2254:	4301                	li	t1,0
    
    for (uint16_t i = 0; i < num_vertices; i++) {
        const Point16_t* p0 = &vertices[i];
        const Point16_t* p1 = &vertices[(i + 1) % num_vertices];
    2256:	f4842503          	lw	a0,-184(s0)
    225a:	458d                	li	a1,3
    225c:	f2642623          	sw	t1,-212(s0)
    2260:	eb1fd0ef          	jal	ra,110 <__modsi3>
    2264:	00251593          	slli	a1,a0,0x2
    2268:	f8840793          	addi	a5,s0,-120
    226c:	95be                	add	a1,a1,a5
        
        if (p0->y == p1->y) continue; // Skip horizontal edges
    226e:	00249683          	lh	a3,2(s1)
    2272:	00259703          	lh	a4,2(a1)
    2276:	f2c42303          	lw	t1,-212(s0)
    227a:	06e68863          	beq	a3,a4,22ea <main+0xdf8>
    227e:	00049503          	lh	a0,0(s1)
    2282:	00059583          	lh	a1,0(a1)
    2286:	00131793          	slli	a5,t1,0x1
        
        // Order vertices top to bottom
        int16_t y_min, y_max, x_start;
        if (p0->y < p1->y) {
    228a:	10e6de63          	bge	a3,a4,23a6 <main+0xeb4>
    228e:	f4c42603          	lw	a2,-180(s0)
    2292:	979a                	add	a5,a5,t1
    2294:	078a                	slli	a5,a5,0x2
    2296:	97b2                	add	a5,a5,a2
            y_min = p0->y;
            y_max = p1->y;
            x_start = p0->x;
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    2298:	01051613          	slli	a2,a0,0x10
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    229c:	40a58533          	sub	a0,a1,a0
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    22a0:	c790                	sw	a2,8(a5)
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    22a2:	40d705b3          	sub	a1,a4,a3
    22a6:	0542                	slli	a0,a0,0x10
    22a8:	f2642023          	sw	t1,-224(s0)
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    22ac:	f2f42223          	sw	a5,-220(s0)
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    22b0:	f2d42423          	sw	a3,-216(s0)
    22b4:	f2e42623          	sw	a4,-212(s0)
    22b8:	e01fd0ef          	jal	ra,b8 <__divsi3>
    22bc:	f2442783          	lw	a5,-220(s0)
    22c0:	f2c42703          	lw	a4,-212(s0)
    22c4:	f2842683          	lw	a3,-216(s0)
    22c8:	f2042303          	lw	t1,-224(s0)
    22cc:	c3c8                	sw	a0,4(a5)
    22ce:	00131793          	slli	a5,t1,0x1
    22d2:	f4c42603          	lw	a2,-180(s0)
    22d6:	979a                	add	a5,a5,t1
    22d8:	078a                	slli	a5,a5,0x2
    22da:	97b2                	add	a5,a5,a2
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
        }
        
        edges[valid_edges].y_min = y_min;
        edges[valid_edges].y_max = y_max;
        valid_edges++;
    22dc:	0305                	addi	t1,t1,1
        edges[valid_edges].y_min = y_min;
    22de:	00d79023          	sh	a3,0(a5)
        edges[valid_edges].y_max = y_max;
    22e2:	00e79123          	sh	a4,2(a5)
        valid_edges++;
    22e6:	0ff37313          	andi	t1,t1,255
    for (uint16_t i = 0; i < num_vertices; i++) {
    22ea:	f4842783          	lw	a5,-184(s0)
    22ee:	4711                	li	a4,4
    22f0:	0491                	addi	s1,s1,4
    22f2:	0785                	addi	a5,a5,1
    22f4:	f4f42423          	sw	a5,-184(s0)
    22f8:	f4e79fe3          	bne	a5,a4,2256 <main+0xd64>
    22fc:	46d1                	li	a3,20
    22fe:	f4c42783          	lw	a5,-180(s0)
    for (int16_t y = min_y; y <= max_y; y++) {
        int16_t intersections[20];
        uint8_t num_intersections = 0;

        // Find active edges
        for (uint8_t i = 0; i < valid_edges; i++) {
    2302:	4701                	li	a4,0
        uint8_t num_intersections = 0;
    2304:	4481                	li	s1,0
            if (y >= edges[i].y_min && y < edges[i].y_max) {
                // Calculate x intersection (with rounding)
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    2306:	65a1                	lui	a1,0x8
    2308:	a205                	j	2428 <main+0xf36>
            _reset_timers(BTN_UP, model);        // First Release

        } else {
            // Long press detection
            uint32_t press_duration = now - model->press_time;
    230a:	f6442783          	lw	a5,-156(s0)
    230e:	f3842703          	lw	a4,-200(s0)
    2312:	40e78733          	sub	a4,a5,a4
            if (press_duration > TICK_LONG_PRESS_DUR) {
    2316:	6785                	lui	a5,0x1
    2318:	fa078793          	addi	a5,a5,-96 # fa0 <handle_reset+0x1c>
    231c:	c6e7ffe3          	bgeu	a5,a4,1f9a <main+0xaa8>
			printf("Long Press\n"); break;
    2320:	650d                	lui	a0,0x3
    2322:	d4c50513          	addi	a0,a0,-692 # 2d4c <I2C1_ER_IRQHandler+0x1ba>
    2326:	88aff0ef          	jal	ra,13b0 <puts>
    232a:	b985                	j	1f9a <main+0xaa8>
            }
        }
        break;

    case BTN_UP: {
        uint32_t release_duration = now - model->release_time;
    232c:	f6442703          	lw	a4,-156(s0)
    2330:	f5842683          	lw	a3,-168(s0)
    2334:	8f15                	sub	a4,a4,a3

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    2336:	e38d                	bnez	a5,2358 <main+0xe66>
    2338:	09f00793          	li	a5,159
    233c:	00e7ee63          	bltu	a5,a4,2358 <main+0xe66>
    model->debounce_time = millis();
    2340:	f6042783          	lw	a5,-160(s0)
    2344:	439c                	lw	a5,0(a5)
    2346:	f6f42223          	sw	a5,-156(s0)
    model->release_time = millis();
    234a:	f6042783          	lw	a5,-160(s0)
    234e:	439c                	lw	a5,0(a5)
    2350:	f4f42c23          	sw	a5,-168(s0)
    model->btn_state = newState;
    2354:	4789                	li	a5,2
    2356:	bc0d                	j	1d88 <main+0x896>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    2358:	4685                	li	a3,1
    235a:	0a000793          	li	a5,160
    235e:	f4d42e23          	sw	a3,-164(s0)
    2362:	c2e7fce3          	bgeu	a5,a4,1f9a <main+0xaa8>
			printf("Single Click\n");
    2366:	650d                	lui	a0,0x3
    2368:	d5850513          	addi	a0,a0,-680 # 2d58 <I2C1_ER_IRQHandler+0x1c6>
			printf("Double Click\n");
    236c:	844ff0ef          	jal	ra,13b0 <puts>
    model->debounce_time = millis();
    2370:	f6042783          	lw	a5,-160(s0)
    2374:	439c                	lw	a5,0(a5)
    2376:	f6f42223          	sw	a5,-156(s0)
    model->release_time = millis();
    237a:	f6042783          	lw	a5,-160(s0)
    237e:	439c                	lw	a5,0(a5)
    2380:	f4f42c23          	sw	a5,-168(s0)
    model->btn_state = newState;
    2384:	478d                	li	a5,3
    2386:	b409                	j	1d88 <main+0x896>
        break;
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
    2388:	c00789e3          	beqz	a5,1f9a <main+0xaa8>
    238c:	678d                	lui	a5,0x3
    238e:	d6878513          	addi	a0,a5,-664 # 2d68 <I2C1_ER_IRQHandler+0x1d6>
    2392:	bfe9                	j	236c <main+0xe7a>
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    2394:	f6e42223          	sw	a4,-156(s0)
    2398:	b109                	j	1f9a <main+0xaa8>
    if (x_idx >= 160) x_idx = 0;
    239a:	00028023          	sb	zero,0(t0)
    239e:	bb85                	j	210e <main+0xc1c>
    if (y_idx >= 80) y_idx = 0;
    23a0:	00030023          	sb	zero,0(t1)
    23a4:	bb7d                	j	2162 <main+0xc70>
    23a6:	f4c42603          	lw	a2,-180(s0)
    23aa:	979a                	add	a5,a5,t1
    23ac:	078a                	slli	a5,a5,0x2
    23ae:	97b2                	add	a5,a5,a2
            edges[valid_edges].x_curr = x_start << 16;
    23b0:	01059293          	slli	t0,a1,0x10
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    23b4:	8d0d                	sub	a0,a0,a1
            edges[valid_edges].x_curr = x_start << 16;
    23b6:	0057a423          	sw	t0,8(a5)
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    23ba:	40e685b3          	sub	a1,a3,a4
    23be:	0542                	slli	a0,a0,0x10
    23c0:	f2d42023          	sw	a3,-224(s0)
    23c4:	f2642223          	sw	t1,-220(s0)
            edges[valid_edges].x_curr = x_start << 16;
    23c8:	f2f42423          	sw	a5,-216(s0)
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    23cc:	f2e42623          	sw	a4,-212(s0)
    23d0:	ce9fd0ef          	jal	ra,b8 <__divsi3>
    23d4:	f2c42703          	lw	a4,-212(s0)
    23d8:	f2842783          	lw	a5,-216(s0)
    23dc:	f2042603          	lw	a2,-224(s0)
    23e0:	86ba                	mv	a3,a4
    23e2:	f2442303          	lw	t1,-220(s0)
    23e6:	c3c8                	sw	a0,4(a5)
    23e8:	8732                	mv	a4,a2
    23ea:	b5d5                	j	22ce <main+0xddc>
            if (y >= edges[i].y_min && y < edges[i].y_max) {
    23ec:	00079603          	lh	a2,0(a5)
    23f0:	02c6c863          	blt	a3,a2,2420 <main+0xf2e>
    23f4:	00279603          	lh	a2,2(a5)
    23f8:	02c6d463          	bge	a3,a2,2420 <main+0xf2e>
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    23fc:	0087a283          	lw	t0,8(a5)
    2400:	00148513          	addi	a0,s1,1
    2404:	ff440613          	addi	a2,s0,-12
    2408:	0486                	slli	s1,s1,0x1
    240a:	94b2                	add	s1,s1,a2
    240c:	00b28633          	add	a2,t0,a1
    2410:	8641                	srai	a2,a2,0x10
    2412:	fcc49023          	sh	a2,-64(s1)
                // Update x for next scanline
                edges[i].x_curr += edges[i].x_step;
    2416:	43d0                	lw	a2,4(a5)
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    2418:	0ff57493          	andi	s1,a0,255
                edges[i].x_curr += edges[i].x_step;
    241c:	9616                	add	a2,a2,t0
    241e:	c790                	sw	a2,8(a5)
        for (uint8_t i = 0; i < valid_edges; i++) {
    2420:	0705                	addi	a4,a4,1
    2422:	0ff77713          	andi	a4,a4,255
    2426:	07b1                	addi	a5,a5,12
    2428:	fc6712e3          	bne	a4,t1,23ec <main+0xefa>
    242c:	fb440293          	addi	t0,s0,-76
    2430:	8616                	mv	a2,t0
            }
        }

        // Insertion sort (from previous optimization)
        for (uint8_t i = 1; i < num_intersections; i++) {
    2432:	4705                	li	a4,1
            int16_t key = intersections[i];
            int8_t j = i - 1;
            while (j >= 0 && intersections[j] > key) {
    2434:	50fd                	li	ra,-1
        for (uint8_t i = 1; i < num_intersections; i++) {
    2436:	1e976c63          	bltu	a4,s1,262e <main+0x113c>
    243a:	00148393          	addi	t2,s1,1
    243e:	0386                	slli	t2,t2,0x1
    2440:	8085                	srli	s1,s1,0x1
    2442:	1fc3f393          	andi	t2,t2,508
    2446:	048a                	slli	s1,s1,0x2
    2448:	9396                	add	t2,t2,t0
    244a:	9496                	add	s1,s1,t0
            }
            intersections[j + 1] = key;
        }

        // Fill between pairs
        for (uint8_t i = 0; i < num_intersections; i += 2) {
    244c:	22539263          	bne	t2,t0,2670 <main+0x117e>
    2450:	0685                	addi	a3,a3,1
    2452:	01069713          	slli	a4,a3,0x10
    2456:	8341                	srli	a4,a4,0x10
    2458:	06c2                	slli	a3,a3,0x10
    for (int16_t y = min_y; y <= max_y; y++) {
    245a:	04700793          	li	a5,71
    245e:	86c1                	srai	a3,a3,0x10
    2460:	e8f71fe3          	bne	a4,a5,22fe <main+0xe0c>
    2464:	4485                	li	s1,1
        Point16_t p1 = vertices[(i + 1) % num_vertices]; // Wrap around to connect last vertex to first
    2466:	458d                	li	a1,3
    2468:	8526                	mv	a0,s1
    246a:	ca7fd0ef          	jal	ra,110 <__modsi3>
    246e:	f8840793          	addi	a5,s0,-120
    2472:	050a                	slli	a0,a0,0x2
    2474:	953e                	add	a0,a0,a5
        tft_draw_line(p0.x, p0.y, p1.x, p1.y, color, width); // Draw edge with specified width
    2476:	00251683          	lh	a3,2(a0)
    247a:	00051603          	lh	a2,0(a0)
    247e:	f5442583          	lw	a1,-172(s0)
    2482:	f5442503          	lw	a0,-172(s0)
    2486:	6741                	lui	a4,0x10
    2488:	00259583          	lh	a1,2(a1) # 8002 <ch32_mess.c.3f1378af+0x2fd0>
    248c:	00051503          	lh	a0,0(a0)
    2490:	4789                	li	a5,2
    2492:	177d                	addi	a4,a4,-1
    2494:	952fe0ef          	jal	ra,5e6 <tft_draw_line>
    for (uint16_t i = 0; i < num_vertices; i++) {
    2498:	f5442783          	lw	a5,-172(s0)
    249c:	0485                	addi	s1,s1,1
    249e:	0791                	addi	a5,a5,4
    24a0:	f4f42a23          	sw	a5,-172(s0)
    24a4:	4791                	li	a5,4
    24a6:	fcf490e3          	bne	s1,a5,2466 <main+0xf74>
    // tft_draw_ring((Point16_t){ 50, 50 }, 20, 0x07E0, 5); // Green ring with radius = 30 and width = 5


    // draw rectangles
    static uint8_t rect_idx = 0;
    tft_draw_rect(rect_idx, rect_idx, 160 - (rect_idx << 1), 80 - (rect_idx << 1), colors[rand8() % 19]);
    24aa:	cac18793          	addi	a5,gp,-852 # 200000a8 <rect_idx.1>
    24ae:	0007c483          	lbu	s1,0(a5)
    24b2:	f3042103          	lw	sp,-208(s0)
    24b6:	01049313          	slli	t1,s1,0x10
    24ba:	00149713          	slli	a4,s1,0x1
    24be:	01035313          	srli	t1,t1,0x10
    24c2:	f4642623          	sw	t1,-180(s0)
    24c6:	f4e42a23          	sw	a4,-172(s0)
    24ca:	b18fe0ef          	jal	ra,7e2 <rand8>
    24ce:	45cd                	li	a1,19
    24d0:	c1dfd0ef          	jal	ra,ec <__umodsi3>
    24d4:	f5042783          	lw	a5,-176(s0)
    24d8:	f5442703          	lw	a4,-172(s0)
    24dc:	0ff57513          	andi	a0,a0,255
    24e0:	0506                	slli	a0,a0,0x1
    24e2:	953e                	add	a0,a0,a5
    24e4:	f4c42303          	lw	t1,-180(s0)
    24e8:	05000693          	li	a3,80
    24ec:	0a000613          	li	a2,160
    24f0:	8e99                	sub	a3,a3,a4
    24f2:	8e19                	sub	a2,a2,a4
    24f4:	00055703          	lhu	a4,0(a0)
    24f8:	06c2                	slli	a3,a3,0x10
    24fa:	0642                	slli	a2,a2,0x10
    24fc:	82c1                	srli	a3,a3,0x10
    24fe:	8241                	srli	a2,a2,0x10
    2500:	859a                	mv	a1,t1
    2502:	851a                	mv	a0,t1
    2504:	a6efe0ef          	jal	ra,772 <tft_draw_rect>
    rect_idx += 1;
    2508:	0485                	addi	s1,s1,1
    250a:	0ff4f493          	andi	s1,s1,255
    if (rect_idx >= 40) rect_idx = 0;
    250e:	02700713          	li	a4,39
    2512:	cac18793          	addi	a5,gp,-852 # 200000a8 <rect_idx.1>
    2516:	18976e63          	bltu	a4,s1,26b2 <main+0x11c0>
    rect_idx += 1;
    251a:	00978023          	sb	s1,0(a5)

    // draw random rectangles
    tft_draw_rect(rand8() % 140, rand8() % 60, 20, 20, colors[rand8() % 19]);
    251e:	ac4fe0ef          	jal	ra,7e2 <rand8>
    2522:	f4a42623          	sw	a0,-180(s0)
    2526:	abcfe0ef          	jal	ra,7e2 <rand8>
    252a:	84aa                	mv	s1,a0
    252c:	ab6fe0ef          	jal	ra,7e2 <rand8>
    2530:	45cd                	li	a1,19
    2532:	bbbfd0ef          	jal	ra,ec <__umodsi3>
    2536:	f5042703          	lw	a4,-176(s0)
    253a:	0ff57793          	andi	a5,a0,255
    253e:	0786                	slli	a5,a5,0x1
    2540:	97ba                	add	a5,a5,a4
    2542:	0007d703          	lhu	a4,0(a5)
    2546:	03c00593          	li	a1,60
    254a:	8526                	mv	a0,s1
    254c:	f4e42a23          	sw	a4,-172(s0)
    2550:	b9dfd0ef          	jal	ra,ec <__umodsi3>
    2554:	f4c42683          	lw	a3,-180(s0)
    2558:	0ff57493          	andi	s1,a0,255
    255c:	08c00593          	li	a1,140
    2560:	8536                	mv	a0,a3
    2562:	b8bfd0ef          	jal	ra,ec <__umodsi3>
    2566:	f5442703          	lw	a4,-172(s0)
    256a:	4651                	li	a2,20
    256c:	46d1                	li	a3,20
    256e:	85a6                	mv	a1,s1
    2570:	0ff57513          	andi	a0,a0,255
    2574:	9fefe0ef          	jal	ra,772 <tft_draw_rect>

    // draw filled rectangles
    tft_fill_rect(rand8() % 140, rand8() % 60, 20, 20, colors[rand8() % 19]);
    2578:	a6afe0ef          	jal	ra,7e2 <rand8>
    257c:	08c00593          	li	a1,140
    2580:	b6dfd0ef          	jal	ra,ec <__umodsi3>
    2584:	0ff57493          	andi	s1,a0,255
    2588:	a5afe0ef          	jal	ra,7e2 <rand8>
    258c:	03c00593          	li	a1,60
    2590:	b5dfd0ef          	jal	ra,ec <__umodsi3>
    2594:	0ff57693          	andi	a3,a0,255
    2598:	f4d42a23          	sw	a3,-172(s0)
    259c:	a46fe0ef          	jal	ra,7e2 <rand8>
    25a0:	45cd                	li	a1,19
    25a2:	b4bfd0ef          	jal	ra,ec <__umodsi3>
    25a6:	f5042703          	lw	a4,-176(s0)
    25aa:	0ff57793          	andi	a5,a0,255
    25ae:	0786                	slli	a5,a5,0x1
    25b0:	97ba                	add	a5,a5,a4
    y += TFT_Y_OFFSET;
    25b2:	f5442683          	lw	a3,-172(s0)
    25b6:	0007d603          	lhu	a2,0(a5)
    x += TFT_X_OFFSET;
    25ba:	00148513          	addi	a0,s1,1
    y += TFT_Y_OFFSET;
    25be:	01a68593          	addi	a1,a3,26
    25c2:	d1c18793          	addi	a5,gp,-740 # 20000118 <_buffer>
    x += TFT_X_OFFSET;
    25c6:	0ff57513          	andi	a0,a0,255
    y += TFT_Y_OFFSET;
    25ca:	0ff5f593          	andi	a1,a1,255
        _buffer[sz++] = color >> 8;
    25ce:	00865293          	srli	t0,a2,0x8
    25d2:	02878313          	addi	t1,a5,40
    25d6:	00578023          	sb	t0,0(a5)
        _buffer[sz++] = color;
    25da:	00c780a3          	sb	a2,1(a5)
    for (uint16_t x = 0; x < width; x++) {
    25de:	0789                	addi	a5,a5,2
    25e0:	fef31be3          	bne	t1,a5,25d6 <main+0x10e4>
    INTF_TFT_SET_WINDOW(x, y, x + width - 1, y + height - 1);
    25e4:	01448613          	addi	a2,s1,20
    25e8:	02d68693          	addi	a3,a3,45
    25ec:	0ff6f693          	andi	a3,a3,255
    25f0:	0ff67613          	andi	a2,a2,255
    25f4:	d9bfd0ef          	jal	ra,38e <INTF_TFT_SET_WINDOW>
    INTF_TFT_SEND_BUFF(_buffer, sz, height);
    25f8:	d1c18513          	addi	a0,gp,-740 # 20000118 <_buffer>
    25fc:	4651                	li	a2,20
    25fe:	02800593          	li	a1,40
    2602:	df3fd0ef          	jal	ra,3f4 <INTF_TFT_SEND_BUFF>
	handler();
	return micros() - now;
    2606:	e000f7b7          	lui	a5,0xe000f
    260a:	4788                	lw	a0,8(a5)
    260c:	03000593          	li	a1,48
    2610:	ab1fd0ef          	jal	ra,c0 <__hidden___udivsi3>
			// uint32_t runtime_i2c = SysTick_getRunTime(ssd1306_draw_test);
			// sprintf(str_output, "I2C runtime: %lu us", runtime_i2c);
			// ssd1306_print_str_at(str_output, 0, 0);

			uint32_t runtime_tft = SysTick_getRunTime(mod_st7735_test2);
			printf("ST7735 runtime: %lu us\n", runtime_tft);
    2614:	f3442783          	lw	a5,-204(s0)
    2618:	40f505b3          	sub	a1,a0,a5
    261c:	650d                	lui	a0,0x3
    261e:	d8850513          	addi	a0,a0,-632 # 2d88 <I2C1_ER_IRQHandler+0x1f6>
    2622:	c05fe0ef          	jal	ra,1226 <printf>
		uint32_t now = millis();
    2626:	f3c42483          	lw	s1,-196(s0)
    262a:	f00ff06f          	j	1d2a <main+0x838>
    262e:	fff70793          	addi	a5,a4,-1 # ffff <lib_i2c.c.d894f163+0x61ed>
            int16_t key = intersections[i];
    2632:	00261503          	lh	a0,2(a2)
    2636:	07e2                	slli	a5,a5,0x18
    2638:	87e1                	srai	a5,a5,0x18
    263a:	85b2                	mv	a1,a2
            while (j >= 0 && intersections[j] > key) {
    263c:	00059383          	lh	t2,0(a1)
    2640:	00755a63          	bge	a0,t2,2654 <main+0x1162>
    2644:	17fd                	addi	a5,a5,-1
    2646:	07e2                	slli	a5,a5,0x18
                intersections[j + 1] = intersections[j];
    2648:	00759123          	sh	t2,2(a1)
    264c:	87e1                	srai	a5,a5,0x18
            while (j >= 0 && intersections[j] > key) {
    264e:	15f9                	addi	a1,a1,-2
    2650:	fe1796e3          	bne	a5,ra,263c <main+0x114a>
            intersections[j + 1] = key;
    2654:	0785                	addi	a5,a5,1
    2656:	07e2                	slli	a5,a5,0x18
    2658:	87e1                	srai	a5,a5,0x18
    265a:	0786                	slli	a5,a5,0x1
    265c:	ff440593          	addi	a1,s0,-12
    2660:	97ae                	add	a5,a5,a1
        for (uint8_t i = 1; i < num_intersections; i++) {
    2662:	0705                	addi	a4,a4,1
            intersections[j + 1] = key;
    2664:	fca79023          	sh	a0,-64(a5) # e000efc0 <_eusrstack+0xc000e7c0>
        for (uint8_t i = 1; i < num_intersections; i++) {
    2668:	0ff77713          	andi	a4,a4,255
    266c:	0609                	addi	a2,a2,2
    266e:	b3e1                	j	2436 <main+0xf44>
            if (i + 1 >= num_intersections) break;
    2670:	de5480e3          	beq	s1,t0,2450 <main+0xf5e>
            int16_t x0 = intersections[i];
    2674:	00029503          	lh	a0,0(t0)
            int16_t x1 = intersections[i + 1];
    2678:	00229603          	lh	a2,2(t0)
            if (x1 > x0) {
    267c:	02c55963          	bge	a0,a2,26ae <main+0x11bc>
                tft_draw_line(x0, y, x1, y, fill_color, 1);
    2680:	6741                	lui	a4,0x10
    2682:	85b6                	mv	a1,a3
    2684:	4785                	li	a5,1
    2686:	80070713          	addi	a4,a4,-2048 # f800 <lib_i2c.c.d894f163+0x59ee>
    268a:	f2742223          	sw	t2,-220(s0)
    268e:	f2642423          	sw	t1,-216(s0)
    2692:	f2542623          	sw	t0,-212(s0)
    2696:	f4d42423          	sw	a3,-184(s0)
    269a:	f4dfd0ef          	jal	ra,5e6 <tft_draw_line>
    269e:	f2442383          	lw	t2,-220(s0)
    26a2:	f2842303          	lw	t1,-216(s0)
    26a6:	f2c42283          	lw	t0,-212(s0)
    26aa:	f4842683          	lw	a3,-184(s0)
    26ae:	0291                	addi	t0,t0,4
    26b0:	bb71                	j	244c <main+0xf5a>
    if (rect_idx >= 40) rect_idx = 0;
    26b2:	00078023          	sb	zero,0(a5)
    26b6:	b5a5                	j	251e <main+0x102c>
		}

	}
	if ( rc ) return;
	printf("\n\rLoaded %d kilobytes.\n\r", total_bytes/1024);
    26b8:	f5c42783          	lw	a5,-164(s0)
    26bc:	650d                	lui	a0,0x3
    26be:	da050513          	addi	a0,a0,-608 # 2da0 <I2C1_ER_IRQHandler+0x20e>
    26c2:	00a7d593          	srli	a1,a5,0xa
    26c6:	b61fe0ef          	jal	ra,1226 <printf>
    26ca:	e50ff06f          	j	1d1a <main+0x828>
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
    26ce:	d8e7e563          	bltu	a5,a4,1c58 <main+0x766>
	fs->fs_type = fmt;
    26d2:	4789                	li	a5,2
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    26d4:	f5042703          	lw	a4,-176(s0)
	fs->fs_type = fmt;
    26d8:	f8f40423          	sb	a5,-120(s0)
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    26dc:	f5442783          	lw	a5,-172(s0)
    26e0:	97ba                	add	a5,a5,a4
    26e2:	f8f42c23          	sw	a5,-104(s0)
    26e6:	d84ff06f          	j	1c6a <main+0x778>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    26ea:	4581                	li	a1,0
    26ec:	07a00513          	li	a0,122
    26f0:	a60fe0ef          	jal	ra,950 <send_cmd>
    26f4:	c119                	beqz	a0,26fa <main+0x1208>
    26f6:	974ff06f          	j	186a <main+0x378>
    26fa:	4481                	li	s1,0
					for (n = 0; n < 4; n++) buf[n] = rcvr_mmc();
    26fc:	a34fe0ef          	jal	ra,930 <rcvr_mmc>
    2700:	fb440793          	addi	a5,s0,-76
    2704:	97a6                	add	a5,a5,s1
    2706:	00a78023          	sb	a0,0(a5)
    270a:	0485                	addi	s1,s1,1
    270c:	4791                	li	a5,4
    270e:	fef497e3          	bne	s1,a5,26fc <main+0x120a>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    2712:	fb444783          	lbu	a5,-76(s0)
    2716:	44b1                	li	s1,12
    2718:	0407f793          	andi	a5,a5,64
    271c:	c399                	beqz	a5,2722 <main+0x1230>
    271e:	94eff06f          	j	186c <main+0x37a>
    2722:	4491                	li	s1,4
    2724:	948ff06f          	j	186c <main+0x37a>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    2728:	20000593          	li	a1,512
    272c:	05000513          	li	a0,80
    2730:	a20fe0ef          	jal	ra,950 <send_cmd>
    2734:	c119                	beqz	a0,273a <main+0x1248>
    2736:	934ff06f          	j	186a <main+0x378>
    273a:	932ff06f          	j	186c <main+0x37a>
			if (ni != 8 || c != '.') break;
    273e:	d4571663          	bne	a4,t0,1c8a <main+0x798>
			i = 8; ni = 11;
    2742:	47ad                	li	a5,11
    2744:	a42ff06f          	j	1986 <main+0x494>

00002748 <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    2748:	fdc10113          	addi	sp,sp,-36
    274c:	ce22                	sw	s0,28(sp)
    274e:	d006                	sw	ra,32(sp)
    2750:	cc26                	sw	s1,24(sp)
    2752:	842a                	mv	s0,a0
	if( tween <= 0 ) return hexa;
    2754:	0ac05f63          	blez	a2,2812 <TweenHexColors+0xca>
	if( tween >= 255 ) return hexb;
    2758:	0fe00793          	li	a5,254
    275c:	84ae                	mv	s1,a1
    275e:	0cc7c163          	blt	a5,a2,2820 <TweenHexColors+0xd8>
	int32_t aamt = 255-tween;
    2762:	0ff00293          	li	t0,255
    2766:	40c282b3          	sub	t0,t0,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    276a:	8596                	mv	a1,t0
    276c:	0ff57513          	andi	a0,a0,255
    2770:	c216                	sw	t0,4(sp)
	int32_t aamt = 255-tween;
    2772:	c032                	sw	a2,0(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    2774:	1fffe097          	auipc	ra,0x1fffe
    2778:	8d4080e7          	jalr	-1836(ra) # 20000048 <FastMultiply>
    277c:	4602                	lw	a2,0(sp)
    277e:	ca2a                	sw	a0,20(sp)
    2780:	0ff4f513          	andi	a0,s1,255
    2784:	85b2                	mv	a1,a2
    2786:	1fffe097          	auipc	ra,0x1fffe
    278a:	8c2080e7          	jalr	-1854(ra) # 20000048 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    278e:	4292                	lw	t0,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    2790:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    2792:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    2796:	8596                	mv	a1,t0
    2798:	0ff57513          	andi	a0,a0,255
    279c:	c616                	sw	t0,12(sp)
    279e:	1fffe097          	auipc	ra,0x1fffe
    27a2:	8aa080e7          	jalr	-1878(ra) # 20000048 <FastMultiply>
    27a6:	4602                	lw	a2,0(sp)
    27a8:	c42a                	sw	a0,8(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    27aa:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    27ae:	85b2                	mv	a1,a2
    27b0:	0ff57513          	andi	a0,a0,255
    27b4:	c232                	sw	a2,4(sp)
    27b6:	1fffe097          	auipc	ra,0x1fffe
    27ba:	892080e7          	jalr	-1902(ra) # 20000048 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    27be:	42b2                	lw	t0,12(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    27c0:	c02a                	sw	a0,0(sp)
	int32_t hag = (hexa>>16) & 0xff;
    27c2:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    27c6:	8596                	mv	a1,t0
    27c8:	0ff57513          	andi	a0,a0,255
    27cc:	1fffe097          	auipc	ra,0x1fffe
    27d0:	87c080e7          	jalr	-1924(ra) # 20000048 <FastMultiply>
    27d4:	4612                	lw	a2,4(sp)
    27d6:	842a                	mv	s0,a0
	int32_t hbg = (hexb>>16) & 0xff;
    27d8:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    27dc:	85b2                	mv	a1,a2
    27de:	0ff57513          	andi	a0,a0,255
    27e2:	1fffe097          	auipc	ra,0x1fffe
    27e6:	866080e7          	jalr	-1946(ra) # 20000048 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    27ea:	4342                	lw	t1,16(sp)
    27ec:	47d2                	lw	a5,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    27ee:	4682                	lw	a3,0(sp)
    27f0:	4722                	lw	a4,8(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    27f2:	979a                	add	a5,a5,t1
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    27f4:	942a                	add	s0,s0,a0
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    27f6:	9736                	add	a4,a4,a3
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    27f8:	08078793          	addi	a5,a5,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    27fc:	08070713          	addi	a4,a4,128
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    2800:	08040413          	addi	s0,s0,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    2804:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    2806:	f0077713          	andi	a4,a4,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    280a:	8021                	srli	s0,s0,0x8
	return b | (r<<8) | (g<<16);
    280c:	8fd9                	or	a5,a5,a4
    280e:	0442                	slli	s0,s0,0x10
    2810:	8c5d                	or	s0,s0,a5
}
    2812:	5082                	lw	ra,32(sp)
    2814:	8522                	mv	a0,s0
    2816:	4472                	lw	s0,28(sp)
    2818:	44e2                	lw	s1,24(sp)
    281a:	02410113          	addi	sp,sp,36
    281e:	8082                	ret
	if( tween >= 255 ) return hexb;
    2820:	842e                	mv	s0,a1
    2822:	bfc5                	j	2812 <TweenHexColors+0xca>

00002824 <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    2824:	1111                	addi	sp,sp,-28
    2826:	c826                	sw	s1,16(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    2828:	ca01a483          	lw	s1,-864(gp) # 2000009c <WS2812LEDs>
	int place = WS2812LEDPlace;
    282c:	c9c18713          	addi	a4,gp,-868 # 20000098 <WS2812LEDPlace>
    2830:	4318                	lw	a4,0(a4)
    2832:	c9c18613          	addi	a2,gp,-868 # 20000098 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    2836:	ca22                	sw	s0,20(sp)
    2838:	cc06                	sw	ra,24(sp)
    283a:	87aa                	mv	a5,a0
    283c:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
    283e:	03050693          	addi	a3,a0,48
    2842:	c032                	sw	a2,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    2844:	04074a63          	bltz	a4,2898 <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    2848:	04f68a63          	beq	a3,a5,289c <WS2812FillBuffSec.constprop.0+0x78>
	{
		if( place >= ledcount )
    284c:	04974f63          	blt	a4,s1,28aa <WS2812FillBuffSec.constprop.0+0x86>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    2850:	40f68633          	sub	a2,a3,a5
    2854:	4581                	li	a1,0
    2856:	853e                	mv	a0,a5
    2858:	c23a                	sw	a4,4(sp)
    285a:	a57fe0ef          	jal	ra,12b0 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    285e:	4712                	lw	a4,4(sp)
    2860:	cc15                	beqz	s0,289c <WS2812FillBuffSec.constprop.0+0x78>
			{
				if( place == ledcount )
    2862:	00e49a63          	bne	s1,a4,2876 <WS2812FillBuffSec.constprop.0+0x52>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    2866:	400206b7          	lui	a3,0x40020
    286a:	5a9c                	lw	a5,48(a3)
    286c:	fdf7f793          	andi	a5,a5,-33
    2870:	da9c                	sw	a5,48(a3)
					WS2812BLEDInUse = 0;
    2872:	c801ac23          	sw	zero,-872(gp) # 20000094 <WS2812BLEDInUse>
				}
				place++;
    2876:	0705                	addi	a4,a4,1
    2878:	a015                	j	289c <WS2812FillBuffSec.constprop.0+0x78>
		(*ptr++) = 0;
    287a:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
    287e:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    2882:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    2886:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    288a:	00079423          	sh	zero,8(a5)
		place++;
    288e:	0705                	addi	a4,a4,1
    2890:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
    2892:	fe079f23          	sh	zero,-2(a5)
    2896:	b77d                	j	2844 <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
    2898:	fef691e3          	bne	a3,a5,287a <WS2812FillBuffSec.constprop.0+0x56>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
    289c:	4782                	lw	a5,0(sp)
}
    289e:	40e2                	lw	ra,24(sp)
    28a0:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
    28a2:	c398                	sw	a4,0(a5)
}
    28a4:	44c2                	lw	s1,16(sp)
    28a6:	0171                	addi	sp,sp,28
    28a8:	8082                	ret
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    28aa:	c4418613          	addi	a2,gp,-956 # 20000040 <tween>
    28ae:	4210                	lw	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    28b0:	00170293          	addi	t0,a4,1
    28b4:	9732                	add	a4,a4,a2
    28b6:	0ff00613          	li	a2,255
    28ba:	00e04363          	bgtz	a4,28c0 <WS2812FillBuffSec.constprop.0+0x9c>
    28be:	4601                	li	a2,0
    28c0:	007f45b7          	lui	a1,0x7f4
    28c4:	650d                	lui	a0,0x3
    28c6:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.d894f163+0x7ea22e>
    28ca:	0ff50513          	addi	a0,a0,255 # 30ff <font+0x9f>
    28ce:	c616                	sw	t0,12(sp)
    28d0:	c43e                	sw	a5,8(sp)
    28d2:	c236                	sw	a3,4(sp)
    28d4:	3d95                	jal	2748 <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    28d6:	00b55613          	srli	a2,a0,0xb
    28da:	670d                	lui	a4,0x3
    28dc:	f9870713          	addi	a4,a4,-104 # 2f98 <bitquartets.8>
    28e0:	8a79                	andi	a2,a2,30
    28e2:	963a                	add	a2,a2,a4
    28e4:	47a2                	lw	a5,8(sp)
    28e6:	00065603          	lhu	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    28ea:	42b2                	lw	t0,12(sp)
    28ec:	4692                	lw	a3,4(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    28ee:	00c79023          	sh	a2,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    28f2:	00755613          	srli	a2,a0,0x7
    28f6:	8a79                	andi	a2,a2,30
    28f8:	963a                	add	a2,a2,a4
    28fa:	00065603          	lhu	a2,0(a2)
		ptr += 6;
    28fe:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    2900:	fec79b23          	sh	a2,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    2904:	00355613          	srli	a2,a0,0x3
    2908:	8a79                	andi	a2,a2,30
    290a:	963a                	add	a2,a2,a4
    290c:	00065603          	lhu	a2,0(a2)
    2910:	fec79c23          	sh	a2,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    2914:	00f57613          	andi	a2,a0,15
    2918:	0606                	slli	a2,a2,0x1
    291a:	963a                	add	a2,a2,a4
    291c:	00065603          	lhu	a2,0(a2)
    2920:	fec79d23          	sh	a2,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    2924:	01355613          	srli	a2,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    2928:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    292a:	8a79                	andi	a2,a2,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    292c:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    292e:	963a                	add	a2,a2,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    2930:	953a                	add	a0,a0,a4
    2932:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    2936:	00065603          	lhu	a2,0(a2)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    293a:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    293e:	fec79e23          	sh	a2,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    2942:	8716                	mv	a4,t0
    2944:	b711                	j	2848 <WS2812FillBuffSec.constprop.0+0x24>

00002946 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    2946:	fcc10113          	addi	sp,sp,-52
    294a:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    294c:	400207b7          	lui	a5,0x40020
    2950:	439c                	lw	a5,0(a5)
{
    2952:	d022                	sw	s0,32(sp)
    2954:	ce26                	sw	s1,28(sp)
    2956:	d806                	sw	ra,48(sp)
    2958:	d616                	sw	t0,44(sp)
    295a:	d41a                	sw	t1,40(sp)
    295c:	d21e                	sw	t2,36(sp)
    295e:	cc2a                	sw	a0,24(sp)
    2960:	ca2e                	sw	a1,20(sp)
    2962:	c832                	sw	a2,16(sp)
    2964:	c636                	sw	a3,12(sp)
    2966:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    2968:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    296a:	40020437          	lui	s0,0x40020
    296e:	10000493          	li	s1,256
    2972:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    2974:	4782                	lw	a5,0(sp)
    2976:	4007f793          	andi	a5,a5,1024
    297a:	c789                	beqz	a5,2984 <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    297c:	4585                	li	a1,1
    297e:	cbc18513          	addi	a0,gp,-836 # 200000b8 <WS2812dmabuff>
    2982:	354d                	jal	2824 <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    2984:	4782                	lw	a5,0(sp)
    2986:	2007f793          	andi	a5,a5,512
    298a:	c789                	beqz	a5,2994 <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    298c:	4581                	li	a1,0
    298e:	cec18513          	addi	a0,gp,-788 # 200000e8 <WS2812dmabuff+0x30>
    2992:	3d49                	jal	2824 <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    2994:	401c                	lw	a5,0(s0)
    2996:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    2998:	4782                	lw	a5,0(sp)
    299a:	1007f793          	andi	a5,a5,256
    299e:	fbf1                	bnez	a5,2972 <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    29a0:	5402                	lw	s0,32(sp)
    29a2:	50c2                	lw	ra,48(sp)
    29a4:	52b2                	lw	t0,44(sp)
    29a6:	5322                	lw	t1,40(sp)
    29a8:	5392                	lw	t2,36(sp)
    29aa:	44f2                	lw	s1,28(sp)
    29ac:	4562                	lw	a0,24(sp)
    29ae:	45d2                	lw	a1,20(sp)
    29b0:	4642                	lw	a2,16(sp)
    29b2:	46b2                	lw	a3,12(sp)
    29b4:	4722                	lw	a4,8(sp)
    29b6:	4792                	lw	a5,4(sp)
    29b8:	03410113          	addi	sp,sp,52
    29bc:	30200073          	mret

000029c0 <SysTick_Handler>:
{
    29c0:	1151                	addi	sp,sp,-12
    29c2:	c03e                	sw	a5,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    29c4:	e000f7b7          	lui	a5,0xe000f
{
    29c8:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    29ca:	4b98                	lw	a4,16(a5)
{
    29cc:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    29ce:	66b1                	lui	a3,0xc
    29d0:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x1d6e>
    29d4:	9736                	add	a4,a4,a3
    29d6:	cb98                	sw	a4,16(a5)
	SysTick->SR = 0x00000000;
    29d8:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>
	systick_millis++;
    29dc:	cb418793          	addi	a5,gp,-844 # 200000b0 <systick_millis>
    29e0:	4398                	lw	a4,0(a5)
}
    29e2:	46a2                	lw	a3,8(sp)
	systick_millis++;
    29e4:	0705                	addi	a4,a4,1
    29e6:	c398                	sw	a4,0(a5)
}
    29e8:	4712                	lw	a4,4(sp)
    29ea:	4782                	lw	a5,0(sp)
    29ec:	0131                	addi	sp,sp,12
    29ee:	30200073          	mret

000029f2 <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    29f2:	7179                	addi	sp,sp,-48
    29f4:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    29f6:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    29fa:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    29fc:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    2a00:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    2a04:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    2a08:	cc26                	sw	s1,24(sp)
    2a0a:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    2a0c:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    2a10:	d416                	sw	t0,40(sp)
    2a12:	d21a                	sw	t1,36(sp)
    2a14:	d01e                	sw	t2,32(sp)
    2a16:	ce22                	sw	s0,28(sp)
    2a18:	ca2a                	sw	a0,20(sp)
    2a1a:	c82e                	sw	a1,16(sp)
    2a1c:	c632                	sw	a2,12(sp)
    2a1e:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    2a20:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    2a22:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    2a24:	c305                	beqz	a4,2a44 <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    2a26:	39c18713          	addi	a4,gp,924 # 20000798 <i2c_slave_state>
    2a2a:	4685                	li	a3,1
    2a2c:	07c2                	slli	a5,a5,0x10
    2a2e:	83c1                	srli	a5,a5,0x10
    2a30:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    2a34:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    2a38:	839d                	srli	a5,a5,0x7
    2a3a:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    2a3c:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    2a40:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    2a44:	0404f793          	andi	a5,s1,64
    2a48:	c795                	beqz	a5,2a74 <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    2a4a:	39c18793          	addi	a5,gp,924 # 20000798 <i2c_slave_state>
    2a4e:	0007c703          	lbu	a4,0(a5)
    2a52:	c379                	beqz	a4,2b18 <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
    2a54:	40005737          	lui	a4,0x40005
    2a58:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    2a5c:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    2a60:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    2a64:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    2a68:	0ff77713          	andi	a4,a4,255
    2a6c:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    2a70:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    2a74:	0804f793          	andi	a5,s1,128
    2a78:	c7a1                	beqz	a5,2ac0 <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    2a7a:	39c18793          	addi	a5,gp,924 # 20000798 <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    2a7e:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    2a82:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    2a86:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    2a8a:	400057b7          	lui	a5,0x40005
    2a8e:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    2a92:	39c18413          	addi	s0,gp,924 # 20000798 <i2c_slave_state>
    2a96:	cb79                	beqz	a4,2b6c <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    2a98:	01044703          	lbu	a4,16(s0) # 40020010 <_eusrstack+0x2001f810>
    2a9c:	0ee57663          	bgeu	a0,a4,2b88 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    2aa0:	4458                	lw	a4,12(s0)
    2aa2:	972a                	add	a4,a4,a0
    2aa4:	00074703          	lbu	a4,0(a4)
    2aa8:	0ff77713          	andi	a4,a4,255
    2aac:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    2ab0:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    2ab2:	c391                	beqz	a5,2ab6 <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    2ab4:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    2ab6:	00244783          	lbu	a5,2(s0)
    2aba:	0785                	addi	a5,a5,1
    2abc:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    2ac0:	88c1                	andi	s1,s1,16
    2ac2:	cc85                	beqz	s1,2afa <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    2ac4:	40005737          	lui	a4,0x40005
    2ac8:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    2acc:	07c2                	slli	a5,a5,0x10
    2ace:	83c1                	srli	a5,a5,0x10
    2ad0:	dff7f793          	andi	a5,a5,-513
    2ad4:	07c2                	slli	a5,a5,0x10
    2ad6:	83c1                	srli	a5,a5,0x10
    2ad8:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
    2adc:	39c18793          	addi	a5,gp,924 # 20000798 <i2c_slave_state>
    2ae0:	02a7c703          	lbu	a4,42(a5)
    2ae4:	c74d                	beqz	a4,2b8e <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
    2ae6:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    2ae8:	cb09                	beqz	a4,2afa <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    2aea:	0017c503          	lbu	a0,1(a5)
    2aee:	0027c583          	lbu	a1,2(a5)
    2af2:	8d89                	sub	a1,a1,a0
    2af4:	0ff5f593          	andi	a1,a1,255
    2af8:	9702                	jalr	a4
            }
        }
    }
}
    2afa:	4472                	lw	s0,28(sp)
    2afc:	50b2                	lw	ra,44(sp)
    2afe:	52a2                	lw	t0,40(sp)
    2b00:	5312                	lw	t1,36(sp)
    2b02:	5382                	lw	t2,32(sp)
    2b04:	44e2                	lw	s1,24(sp)
    2b06:	4552                	lw	a0,20(sp)
    2b08:	45c2                	lw	a1,16(sp)
    2b0a:	4632                	lw	a2,12(sp)
    2b0c:	46a2                	lw	a3,8(sp)
    2b0e:	4712                	lw	a4,4(sp)
    2b10:	4782                	lw	a5,0(sp)
    2b12:	6145                	addi	sp,sp,48
    2b14:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    2b18:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    2b1c:	4705                	li	a4,1
    2b1e:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    2b22:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    2b26:	c695                	beqz	a3,2b52 <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    2b28:	0107c683          	lbu	a3,16(a5)
    2b2c:	f4d774e3          	bgeu	a4,a3,2a74 <I2C1_EV_IRQHandler+0x82>
    2b30:	0287c683          	lbu	a3,40(a5)
    2b34:	f2a1                	bnez	a3,2a74 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    2b36:	400056b7          	lui	a3,0x40005
    2b3a:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    2b3e:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    2b40:	96ba                	add	a3,a3,a4
    2b42:	0ff67613          	andi	a2,a2,255
    2b46:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    2b4a:	0705                	addi	a4,a4,1
    2b4c:	00e78123          	sb	a4,2(a5)
    2b50:	b715                	j	2a74 <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    2b52:	0087c683          	lbu	a3,8(a5)
    2b56:	f0d77fe3          	bgeu	a4,a3,2a74 <I2C1_EV_IRQHandler+0x82>
    2b5a:	01c7c683          	lbu	a3,28(a5)
    2b5e:	fa99                	bnez	a3,2a74 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    2b60:	400056b7          	lui	a3,0x40005
    2b64:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    2b68:	43d4                	lw	a3,4(a5)
    2b6a:	bfd9                	j	2b40 <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    2b6c:	00844703          	lbu	a4,8(s0)
    2b70:	00e57c63          	bgeu	a0,a4,2b88 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    2b74:	4058                	lw	a4,4(s0)
    2b76:	972a                	add	a4,a4,a0
    2b78:	00074703          	lbu	a4,0(a4)
    2b7c:	0ff77713          	andi	a4,a4,255
    2b80:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    2b84:	4c1c                	lw	a5,24(s0)
    2b86:	b735                	j	2ab2 <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    2b88:	00079823          	sh	zero,16(a5)
    2b8c:	bf15                	j	2ac0 <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    2b8e:	4bd8                	lw	a4,20(a5)
    2b90:	bfa1                	j	2ae8 <I2C1_EV_IRQHandler+0xf6>

00002b92 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    2b92:	1151                	addi	sp,sp,-12
    2b94:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
    2b96:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
    2b9a:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    2b9c:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    2ba0:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    2ba2:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    2ba6:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
    2baa:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    2bac:	cf89                	beqz	a5,2bc6 <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    2bae:	41475783          	lhu	a5,1044(a4)
    2bb2:	40070713          	addi	a4,a4,1024
    2bb6:	07c2                	slli	a5,a5,0x10
    2bb8:	83c1                	srli	a5,a5,0x10
    2bba:	eff7f793          	andi	a5,a5,-257
    2bbe:	07c2                	slli	a5,a5,0x10
    2bc0:	83c1                	srli	a5,a5,0x10
    2bc2:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    2bc6:	2006f793          	andi	a5,a3,512
    2bca:	cf89                	beqz	a5,2be4 <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    2bcc:	40005737          	lui	a4,0x40005
    2bd0:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    2bd4:	07c2                	slli	a5,a5,0x10
    2bd6:	83c1                	srli	a5,a5,0x10
    2bd8:	dff7f793          	andi	a5,a5,-513
    2bdc:	07c2                	slli	a5,a5,0x10
    2bde:	83c1                	srli	a5,a5,0x10
    2be0:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    2be4:	4006f693          	andi	a3,a3,1024
    2be8:	ce89                	beqz	a3,2c02 <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    2bea:	40005737          	lui	a4,0x40005
    2bee:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    2bf2:	07c2                	slli	a5,a5,0x10
    2bf4:	83c1                	srli	a5,a5,0x10
    2bf6:	bff7f793          	andi	a5,a5,-1025
    2bfa:	07c2                	slli	a5,a5,0x10
    2bfc:	83c1                	srli	a5,a5,0x10
    2bfe:	40f71a23          	sh	a5,1044(a4)
    }
}
    2c02:	46a2                	lw	a3,8(sp)
    2c04:	4712                	lw	a4,4(sp)
    2c06:	4782                	lw	a5,0(sp)
    2c08:	0131                	addi	sp,sp,12
    2c0a:	30200073          	mret
    2c0e:	0000                	unimp
    2c10:	4d49                	li	s10,18
    2c12:	5720                	lw	s0,104(a4)
    2c14:	4952                	lw	s2,20(sp)
    2c16:	4554                	lw	a3,12(a0)
    2c18:	4e45                	li	t3,17
    2c1a:	5420                	lw	s0,104(s0)
    2c1c:	000d0a4f          	fnmadd.s	fs4,fs10,ft0,ft0,rne
    2c20:	4d49                	li	s10,18
    2c22:	5220                	lw	s0,96(a2)
    2c24:	4145                	li	sp,17
    2c26:	4544                	lw	s1,12(a0)
    2c28:	204e                	fld	ft0,208(sp)
    2c2a:	5246                	lw	tp,112(sp)
    2c2c:	0a2e4d4f          	fnmadd.d	fs10,ft8,ft2,ft1,rmm
    2c30:	000d                	c.nop	3
    2c32:	0000                	unimp
    2c34:	6e756f63          	bltu	a0,t2,3332 <font+0x2d2>
    2c38:	6574                	flw	fa3,76(a0)
    2c3a:	2072                	fld	ft0,280(sp)
    2c3c:	6c25                	lui	s8,0x9
    2c3e:	0075                	c.nop	29
    2c40:	000a                	c.slli	zero,0x2
    2c42:	0000                	unimp
    2c44:	3249                	jal	25c6 <main+0x10d4>
    2c46:	30203a43          	fmadd.s	fs4,ft0,ft2,ft6,rup
    2c4a:	2578                	fld	fa4,200(a0)
    2c4c:	3230                	fld	fa2,96(a2)
    2c4e:	0058                	addi	a4,sp,4
    2c50:	6574                	flw	fa3,76(a0)
    2c52:	69667473          	csrrci	s0,0x696,12
    2c56:	656c                	flw	fa1,76(a0)
    2c58:	742e                	flw	fs0,232(sp)
    2c5a:	7478                	flw	fa4,108(s0)
    2c5c:	0000                	unimp
    2c5e:	0000                	unimp
    2c60:	6146                	flw	ft2,80(sp)
    2c62:	6c69                	lui	s8,0x1a
    2c64:	6465                	lui	s0,0x19
    2c66:	7420                	flw	fs0,104(s0)
    2c68:	6e69206f          	j	9534e <lib_i2c.c.d894f163+0x8b53c>
    2c6c:	7469                	lui	s0,0xffffa
    2c6e:	4920                	lw	s0,80(a0)
    2c70:	4332                	lw	t1,12(sp)
    2c72:	0000                	unimp
    2c74:	6548                	flw	fa0,12(a0)
    2c76:	6c6c                	flw	fa1,92(s0)
    2c78:	6542206f          	j	252cc <lib_i2c.c.d894f163+0x1b4ba>
    2c7c:	2165                	jal	3124 <font+0xc4>
    2c7e:	0000                	unimp
    2c80:	2d2d                	jal	32ba <font+0x25a>
    2c82:	2d2d                	jal	32bc <font+0x25c>
    2c84:	6e616353          	0x6e616353
    2c88:	696e                	flw	fs2,216(sp)
    2c8a:	676e                	flw	fa4,216(sp)
    2c8c:	4920                	lw	s0,80(a0)
    2c8e:	4332                	lw	t1,12(sp)
    2c90:	4220                	lw	s0,64(a2)
    2c92:	7375                	lui	t1,0xffffd
    2c94:	6620                	flw	fs0,72(a2)
    2c96:	4420726f          	jal	tp,a0d8 <lib_i2c.c.d894f163+0x2c6>
    2c9a:	7665                	lui	a2,0xffff9
    2c9c:	6369                	lui	t1,0x1a
    2c9e:	7365                	lui	t1,0xffff9
    2ca0:	2d2d                	jal	32da <font+0x27a>
    2ca2:	002d                	c.nop	11
    2ca4:	2d2d                	jal	32de <font+0x27e>
    2ca6:	2d2d                	jal	32e0 <font+0x280>
    2ca8:	6f44                	flw	fs1,28(a4)
    2caa:	656e                	flw	fa0,216(sp)
    2cac:	5320                	lw	s0,96(a4)
    2cae:	6e6e6163          	bltu	t3,t1,3390 <font+0x330>
    2cb2:	6e69                	lui	t3,0x1a
    2cb4:	2d2d2d67          	0x2d2d2d67
    2cb8:	0a2d                	addi	s4,s4,11
    2cba:	0000                	unimp
    2cbc:	3249                	jal	263e <main+0x114c>
    2cbe:	6c532043          	0x6c532043
    2cc2:	7661                	lui	a2,0xffff8
    2cc4:	2065                	jal	2d6c <I2C1_ER_IRQHandler+0x1da>
    2cc6:	6f6d                	lui	t5,0x1b
    2cc8:	6564                	flw	fs1,76(a0)
    2cca:	0000                	unimp
    2ccc:	6f4d                	lui	t5,0x13
    2cce:	6e75                	lui	t3,0x1d
    2cd0:	6974                	flw	fa3,84(a0)
    2cd2:	676e                	flw	fa4,216(sp)
    2cd4:	7620                	flw	fs0,104(a2)
    2cd6:	6d756c6f          	jal	s8,59bac <lib_i2c.c.d894f163+0x4fd9a>
    2cda:	2e65                	jal	3092 <font+0x32>
    2cdc:	0d0a                	slli	s10,s10,0x2
    2cde:	0000                	unimp
    2ce0:	6372                	flw	ft6,28(sp)
    2ce2:	253d                	jal	3310 <font+0x2b0>
    2ce4:	0a75                	addi	s4,s4,29
    2ce6:	000d                	c.nop	3
    2ce8:	6e65704f          	fnmadd.q	ft0,fa0,ft6,fa3
    2cec:	6e69                	lui	t3,0x1a
    2cee:	69662067          	0x69662067
    2cf2:	656c                	flw	fa1,76(a0)
    2cf4:	2220                	fld	fs0,64(a2)
    2cf6:	7325                	lui	t1,0xfffe9
    2cf8:	0a22                	slli	s4,s4,0x8
    2cfa:	000d                	c.nop	3
    2cfc:	6f4c                	flw	fa1,28(a4)
    2cfe:	6461                	lui	s0,0x18
    2d00:	6e69                	lui	t3,0x1a
    2d02:	6d692067          	0x6d692067
    2d06:	6761                	lui	a4,0x18
    2d08:	2065                	jal	2db0 <I2C1_ER_IRQHandler+0x21e>
    2d0a:	6e69                	lui	t3,0x1a
    2d0c:	6f74                	flw	fa3,92(a4)
    2d0e:	5220                	lw	s0,96(a2)
    2d10:	4d41                	li	s10,16
    2d12:	0d0a                	slli	s10,s10,0x2
    2d14:	0000                	unimp
    2d16:	0000                	unimp
    2d18:	6552                	flw	fa0,20(sp)
    2d1a:	6461                	lui	s0,0x18
    2d1c:	2520                	fld	fs0,72(a0)
    2d1e:	2075                	jal	2dca <FONT_7x5+0xe>
    2d20:	7962                	flw	fs2,56(sp)
    2d22:	6574                	flw	fa3,76(a0)
    2d24:	000d0a73          	0xd0a73
    2d28:	69727473          	csrrci	s0,0x697,4
    2d2c:	676e                	flw	fa4,216(sp)
    2d2e:	203a                	fld	ft0,392(sp)
    2d30:	7325                	lui	t1,0xfffe9
    2d32:	0d0a                	slli	s10,s10,0x2
    2d34:	0000                	unimp
    2d36:	0000                	unimp
    2d38:	6425                	lui	s0,0x9
    2d3a:	6b20                	flw	fs0,80(a4)
    2d3c:	2062                	fld	ft0,24(sp)
    2d3e:	66206f73          	csrrsi	t5,0x662,0
    2d42:	7261                	lui	tp,0xffff8
    2d44:	2e2e                	fld	ft8,200(sp)
    2d46:	202e                	fld	ft0,200(sp)
    2d48:	0020                	addi	s0,sp,8
    2d4a:	0000                	unimp
    2d4c:	6f4c                	flw	fa1,28(a4)
    2d4e:	676e                	flw	fa4,216(sp)
    2d50:	5020                	lw	s0,96(s0)
    2d52:	6572                	flw	fa0,28(sp)
    2d54:	00007373          	csrrci	t1,ustatus,0
    2d58:	676e6953          	0x676e6953
    2d5c:	656c                	flw	fa1,76(a0)
    2d5e:	4320                	lw	s0,64(a4)
    2d60:	696c                	flw	fa1,84(a0)
    2d62:	00006b63          	bltu	zero,zero,2d78 <I2C1_ER_IRQHandler+0x1e6>
    2d66:	0000                	unimp
    2d68:	6f44                	flw	fs1,28(a4)
    2d6a:	6275                	lui	tp,0x1d
    2d6c:	656c                	flw	fa1,76(a0)
    2d6e:	4320                	lw	s0,64(a4)
    2d70:	696c                	flw	fa1,84(a0)
    2d72:	00006b63          	bltu	zero,zero,2d88 <I2C1_ER_IRQHandler+0x1f6>
    2d76:	0000                	unimp
    2d78:	6548                	flw	fa0,12(a0)
    2d7a:	6c6c                	flw	fa1,92(s0)
    2d7c:	6f57206f          	j	75c70 <lib_i2c.c.d894f163+0x6be5e>
    2d80:	6c72                	flw	fs8,28(sp)
    2d82:	2164                	fld	fs1,192(a0)
    2d84:	0000                	unimp
    2d86:	0000                	unimp
    2d88:	37375453          	0x37375453
    2d8c:	72203533          	0x72203533
    2d90:	6e75                	lui	t3,0x1d
    2d92:	6974                	flw	fa3,84(a0)
    2d94:	656d                	lui	a0,0x1b
    2d96:	203a                	fld	ft0,392(sp)
    2d98:	6c25                	lui	s8,0x9
    2d9a:	2075                	jal	2e46 <FONT_7x5+0x8a>
    2d9c:	7375                	lui	t1,0xffffd
    2d9e:	000a                	c.slli	zero,0x2
    2da0:	0d0a                	slli	s10,s10,0x2
    2da2:	6f4c                	flw	fa1,28(a4)
    2da4:	6461                	lui	s0,0x18
    2da6:	6465                	lui	s0,0x19
    2da8:	2520                	fld	fs0,72(a0)
    2daa:	2064                	fld	fs1,192(s0)
    2dac:	6f6c696b          	0x6f6c696b
    2db0:	7962                	flw	fs2,56(sp)
    2db2:	6574                	flw	fa3,76(a0)
    2db4:	0d0a2e73          	csrrs	t3,0xd0,s4
    2db8:	0000                	unimp
	...

00002dbc <FONT_7x5>:
    2dbc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    2dcc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    2ddc:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    2dec:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    2dfc:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    2e0c:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    2e1c:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    2e2c:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    2e3c:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    2e4c:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    2e5c:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    2e6c:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    2e7c:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    2e8c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    2e9c:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    2eac:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    2ebc:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    2ecc:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    2edc:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    2eec:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    2efc:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    2f0c:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    2f1c:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    2f2c:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    2f3c:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    2f4c:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    2f5c:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    2f6c:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    2f7c:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    2f8c:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

00002f98 <bitquartets.8>:
    2f98:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    2fa8:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

00002fb8 <colors>:
    2fb8:	0000 000f 03e0 03ef 7800 780f 7be0 c618     .........x.x.{..
    2fc8:	7bef 001f 07e0 07ff f800 f81f ffe0 ffff     .{..............
    2fd8:	fd20 afe5 fc18 0000                          .......

00002fe0 <cvt.0>:
    2fe0:	9a80 4145 418e 808f 4545 4945 4949 8f8e     ..EA.A..EEEIII..
    2ff0:	9290 4f92 4f99 5555 9959 9b9a 9d9c 9f9e     ...O.OUUY.......
    3000:	4941 554f a5a5 a7a6 a9a8 abaa adac afae     AIOU............
    3010:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    3020:	c1c0 c3c2 c5c4 c7c6 c9c8 cbca cdcc cfce     ................
    3030:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    3040:	e1e0 e3e2 e5e4 e7e6 e9e8 ebea edec efee     ................
    3050:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00003060 <font>:
    3060:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
    3070:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
    3080:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
    3090:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
    30a0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
    30b0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
    30c0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
    30d0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
    30e0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
    30f0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
    3100:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    3110:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    3120:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
    3130:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
    3140:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
    3150:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
    3160:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
    3170:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
    3180:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
    3190:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
    31a0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
    31b0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
    31c0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
    31d0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    31e0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    31f0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
    3200:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
    3210:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
    3220:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
    3230:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
    3240:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
    3250:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
    3260:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
    3270:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
    3280:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
    3290:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
    32a0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
    32b0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
    32c0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
    32d0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
    32e0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
    32f0:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
    3300:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
    3310:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
    3320:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
    3330:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
    3340:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
    3350:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
    3360:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
    3370:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
    3380:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
    3390:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
    33a0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
    33b0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
    33c0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
    33d0:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
    33e0:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
    33f0:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
    3400:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
    3410:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
    3420:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
    3430:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
    3440:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
    3450:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
    3460:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
    3470:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
    3480:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
    3490:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
    34a0:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
    34b0:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
    34c0:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
    34d0:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
    34e0:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
    34f0:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
    3500:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
    3510:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
    3520:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
    3530:	6b6b 3608 3612 3624 0600 0909 0006 1800     kk.6.6$6........
    3540:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
    3550:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

00003560 <ssd1306_init_array>:
    3560:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    3570:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......

Disassembly of section .data:

20000000 <dev_aht21>:
20000000:	1a80 0006 0000 0000 0038 0001               ........8...

2000000c <dev_ssd1306>:
2000000c:	86a0 0001 0000 0000 003c 0001               ........<...

20000018 <i2c_registers>:
20000018:	00aa 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000038 <lfsr>:
20000038:	0001 0000                                   ....

2000003c <line.5>:
2000003c:	0001 0000                                   ....

20000040 <tween>:
20000040:	ff42 ffff 0000 0000                         B.......

20000048 <FastMultiply>:
{
20000048:	87aa                	mv	a5,a0
	uint32_t ret = 0;
2000004a:	4501                	li	a0,0
		if( multiplicand & 1 )
2000004c:	0015f713          	andi	a4,a1,1
20000050:	c311                	beqz	a4,20000054 <FastMultiply+0xc>
			ret += mutliplicant;
20000052:	953e                	add	a0,a0,a5
		multiplicand>>=1;
20000054:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
20000056:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000058:	f9f5                	bnez	a1,2000004c <FastMultiply+0x4>
}
2000005a:	8082                	ret

2000005c <DMA1_Channel4_IRQHandler>:

// DMA transfer completion interrupt. It will fire when the DMA transfer is
// complete. We use it just to blink the LED
__attribute__((interrupt)) __attribute__((section(".srodata")))
void DMA1_Channel4_IRQHandler(void)
{
2000005c:	1151                	addi	sp,sp,-12
2000005e:	c23a                	sw	a4,4(sp)
	// Clear flag
	DMA1->INTFCR |= DMA_CTCIF4;
20000060:	40020737          	lui	a4,0x40020
{
20000064:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000066:	435c                	lw	a5,4(a4)
{
20000068:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000006a:	6689                	lui	a3,0x2
2000006c:	8fd5                	or	a5,a5,a3
2000006e:	c35c                	sw	a5,4(a4)

	// Blink LED
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000070:	400117b7          	lui	a5,0x40011
20000074:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000078:	47d8                	lw	a4,12(a5)
}
2000007a:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
2000007c:	04074713          	xori	a4,a4,64
20000080:	c7d8                	sw	a4,12(a5)
}
20000082:	4712                	lw	a4,4(sp)
20000084:	4782                	lw	a5,0(sp)
20000086:	0131                	addi	sp,sp,12
20000088:	30200073          	mret
