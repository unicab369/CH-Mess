
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	3d90006f          	j	bd8 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0ca6                	slli	s9,s9,0x9
   a:	0000                	unimp
   c:	0c4e                	slli	s8,s8,0x13
	...
  2e:	0000                	unimp
  30:	2248                	fld	fa0,128(a2)
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0c4e                	slli	s8,s8,0x13
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0c4e                	slli	s8,s8,0x13
  42:	0000                	unimp
  44:	0c4e                	slli	s8,s8,0x13
  46:	0000                	unimp
  48:	0c4e                	slli	s8,s8,0x13
  4a:	0000                	unimp
  4c:	0c4e                	slli	s8,s8,0x13
  4e:	0000                	unimp
  50:	0c4e                	slli	s8,s8,0x13
  52:	0000                	unimp
  54:	0c4e                	slli	s8,s8,0x13
  56:	0000                	unimp
  58:	0c4e                	slli	s8,s8,0x13
  5a:	0000                	unimp
  5c:	0c4e                	slli	s8,s8,0x13
  5e:	0000                	unimp
  60:	21ce                	fld	ft3,208(sp)
  62:	0000                	unimp
  64:	0054                	addi	a3,sp,4
  66:	2000                	fld	fs0,0(s0)
  68:	0c4e                	slli	s8,s8,0x13
  6a:	0000                	unimp
  6c:	0c4e                	slli	s8,s8,0x13
  6e:	0000                	unimp
  70:	0c4e                	slli	s8,s8,0x13
  72:	0000                	unimp
  74:	0c4e                	slli	s8,s8,0x13
  76:	0000                	unimp
  78:	227a                	fld	ft4,408(sp)
  7a:	0000                	unimp
  7c:	241a                	fld	fs0,384(sp)
  7e:	0000                	unimp
  80:	0c4e                	slli	s8,s8,0x13
  82:	0000                	unimp
  84:	0c4e                	slli	s8,s8,0x13
  86:	0000                	unimp
  88:	0c4e                	slli	s8,s8,0x13
  8a:	0000                	unimp
  8c:	0c4e                	slli	s8,s8,0x13
  8e:	0000                	unimp
  90:	0c4e                	slli	s8,s8,0x13
  92:	0000                	unimp
  94:	0c4e                	slli	s8,s8,0x13
  96:	0000                	unimp
  98:	0c4e                	slli	s8,s8,0x13
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	andi	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srli	a1,a1,0x1
      ae:	0606                	slli	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	slli	a2,a2,0x1
      d4:	0686                	slli	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srli	a3,a3,0x1
      e6:	8205                	srli	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
{
     136:	1131                	addi	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
	int overflow = 0;
     144:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     146:	cab5                	beqz	a3,1ba <mini_pad+0x84>
	if(len > pad_to) {
     148:	0096d463          	bge	a3,s1,150 <mini_pad+0x1a>
     14c:	84b6                	mv	s1,a3
		overflow = 1;
     14e:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     150:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     154:	00045363          	bgez	s0,15a <mini_pad+0x24>
     158:	4401                	li	s0,0
     15a:	8622                	mv	a2,s0
     15c:	853a                	mv	a0,a4
     15e:	c23e                	sw	a5,4(sp)
     160:	c01a                	sw	t1,0(sp)
     162:	661000ef          	jal	ra,fc2 <memset>
     166:	4302                	lw	t1,0(sp)
     168:	4792                	lw	a5,4(sp)
     16a:	872a                	mv	a4,a0
     16c:	008506b3          	add	a3,a0,s0
     170:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     172:	40c485b3          	sub	a1,s1,a2
     176:	04b04463          	bgtz	a1,1be <mini_pad+0x88>
     17a:	0004d363          	bgez	s1,180 <mini_pad+0x4a>
     17e:	4481                	li	s1,0
     180:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     184:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     188:	02030463          	beqz	t1,1b0 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     18c:	02c77263          	bgeu	a4,a2,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     190:	02a00793          	li	a5,42
     194:	fef60fa3          	sb	a5,-1(a2)
     198:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     19c:	00d77a63          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1a0:	fef60f23          	sb	a5,-2(a2)
     1a4:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     1a8:	00d77463          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1ac:	fef60ea3          	sb	a5,-3(a2)
}
     1b0:	40c2                	lw	ra,16(sp)
     1b2:	4432                	lw	s0,12(sp)
     1b4:	44a2                	lw	s1,8(sp)
     1b6:	0151                	addi	sp,sp,20
     1b8:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1ba:	86a6                	mv	a3,s1
     1bc:	bf51                	j	150 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1be:	00c785b3          	add	a1,a5,a2
     1c2:	0005c503          	lbu	a0,0(a1)
     1c6:	00c685b3          	add	a1,a3,a2
     1ca:	0605                	addi	a2,a2,1
     1cc:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1d0:	b74d                	j	172 <mini_pad+0x3c>

000001d2 <_puts>:
{
     1d2:	832a                	mv	t1,a0
     1d4:	852e                	mv	a0,a1
	if(!buf) return len;
     1d6:	ce01                	beqz	a2,1ee <_puts+0x1c>
	char * p0 = b->buffer;
     1d8:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1dc:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1de:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1e0:	00a74863          	blt	a4,a0,1f0 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1e4:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1e8:	4248                	lw	a0,4(a2)
     1ea:	40550533          	sub	a0,a0,t0
}
     1ee:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1f0:	4614                	lw	a3,8(a2)
     1f2:	fff68593          	addi	a1,a3,-1
     1f6:	4214                	lw	a3,0(a2)
     1f8:	96ae                	add	a3,a3,a1
     1fa:	fed785e3          	beq	a5,a3,1e4 <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1fe:	00178693          	addi	a3,a5,1
     202:	c254                	sw	a3,4(a2)
     204:	00e306b3          	add	a3,t1,a4
     208:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     20c:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     20e:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     212:	b7f1                	j	1de <_puts+0xc>

00000214 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     214:	e0000737          	lui	a4,0xe0000
     218:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     21c:	0f470693          	addi	a3,a4,244
     220:	0807f793          	andi	a5,a5,128
     224:	fbf5                	bnez	a5,218 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     226:	783027b7          	lui	a5,0x78302
     22a:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     22e:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     230:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     232:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     236:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     238:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     23a:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     23e:	0807f793          	andi	a5,a5,128
     242:	ffe5                	bnez	a5,23a <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     244:	00e557b3          	srl	a5,a0,a4
     248:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     24c:	03000793          	li	a5,48
     250:	00d35463          	bge	t1,a3,258 <PrintHex+0x44>
     254:	05700793          	li	a5,87
     258:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     25a:	07a2                	slli	a5,a5,0x8
     25c:	0857e793          	ori	a5,a5,133
     260:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     264:	1771                	addi	a4,a4,-4
     266:	fcb71ae3          	bne	a4,a1,23a <PrintHex+0x26>
}
     26a:	8082                	ret

0000026c <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     26c:	e000f7b7          	lui	a5,0xe000f
     270:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     272:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     276:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     278:	471c                	lw	a5,8(a4)
     27a:	8f89                	sub	a5,a5,a0
     27c:	fe07cee3          	bltz	a5,278 <DelaySysTick+0xc>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     280:	8082                	ret

00000282 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     282:	1101                	addi	sp,sp,-32
     284:	ce06                	sw	ra,28(sp)
     286:	cc22                	sw	s0,24(sp)
     288:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     28a:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     28c:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     28e:	00055763          	bgez	a0,29c <mini_itoa.part.0+0x1a>
     292:	e689                	bnez	a3,29c <mini_itoa.part.0+0x1a>
		negative = 1;
     294:	4785                	li	a5,1
		value = -value;
     296:	40a00333          	neg	t1,a0
		negative = 1;
     29a:	c03e                	sw	a5,0(sp)
     29c:	06100413          	li	s0,97
     2a0:	c219                	beqz	a2,2a6 <mini_itoa.part.0+0x24>
     2a2:	04100413          	li	s0,65
	int	negative = 0;
     2a6:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2a8:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     2aa:	851a                	mv	a0,t1
     2ac:	c83a                	sw	a4,16(sp)
     2ae:	c21a                	sw	t1,4(sp)
     2b0:	c62e                	sw	a1,12(sp)
     2b2:	c41a                	sw	t1,8(sp)
     2b4:	3d25                	jal	ec <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2b6:	47a5                	li	a5,9
     2b8:	4322                	lw	t1,8(sp)
     2ba:	45b2                	lw	a1,12(sp)
     2bc:	4742                	lw	a4,16(sp)
     2be:	0ff57693          	andi	a3,a0,255
     2c2:	06a7e163          	bltu	a5,a0,324 <mini_itoa.part.0+0xa2>
     2c6:	03068693          	addi	a3,a3,48
     2ca:	0ff6f693          	andi	a3,a3,255
     2ce:	00148793          	addi	a5,s1,1
     2d2:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2d6:	851a                	mv	a0,t1
     2d8:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2da:	c63e                	sw	a5,12(sp)
		value /= radix;
     2dc:	c42e                	sw	a1,8(sp)
     2de:	33cd                	jal	c0 <__hidden___udivsi3>
	} while (value > 0);
     2e0:	4692                	lw	a3,4(sp)
     2e2:	45a2                	lw	a1,8(sp)
     2e4:	47b2                	lw	a5,12(sp)
     2e6:	4742                	lw	a4,16(sp)
		value /= radix;
     2e8:	832a                	mv	t1,a0
	} while (value > 0);
     2ea:	02b6fb63          	bgeu	a3,a1,320 <mini_itoa.part.0+0x9e>
	if (negative)
     2ee:	4682                	lw	a3,0(sp)
     2f0:	c699                	beqz	a3,2fe <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2f2:	02d00693          	li	a3,45
     2f6:	00d78023          	sb	a3,0(a5) # e000f000 <_eusrstack+0xc000e800>
     2fa:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2fe:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     302:	01f55693          	srli	a3,a0,0x1f
     306:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     308:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     30c:	8685                	srai	a3,a3,0x1
     30e:	4601                	li	a2,0
     310:	17fd                	addi	a5,a5,-1
     312:	00d64b63          	blt	a2,a3,328 <mini_itoa.part.0+0xa6>
}
     316:	40f2                	lw	ra,28(sp)
     318:	4462                	lw	s0,24(sp)
     31a:	44d2                	lw	s1,20(sp)
     31c:	6105                	addi	sp,sp,32
     31e:	8082                	ret
	} while (value > 0);
     320:	84be                	mv	s1,a5
     322:	b761                	j	2aa <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     324:	96a2                	add	a3,a3,s0
     326:	b755                	j	2ca <mini_itoa.part.0+0x48>
		char j = buffer[i];
     328:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     32c:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     330:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     334:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     336:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     33a:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     33e:	bfc9                	j	310 <mini_itoa.part.0+0x8e>

00000340 <ld_dword>:
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
     340:	00154783          	lbu	a5,1(a0)
     344:	00054703          	lbu	a4,0(a0)
     348:	07a2                	slli	a5,a5,0x8
     34a:	8f5d                	or	a4,a4,a5
     34c:	00254783          	lbu	a5,2(a0)
     350:	00354503          	lbu	a0,3(a0)
     354:	07c2                	slli	a5,a5,0x10
     356:	8fd9                	or	a5,a5,a4
     358:	0562                	slli	a0,a0,0x18
	return rv;
}
     35a:	8d5d                	or	a0,a0,a5
     35c:	8082                	ret

0000035e <clust2sect>:
/*-----------------------------------------------------------------------*/

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     35e:	1151                	addi	sp,sp,-12
     360:	c222                	sw	s0,4(sp)
	FATFS *fs = FatFs;
     362:	c8c1a403          	lw	s0,-884(gp) # 20000088 <FatFs>


	clst -= 2;
     366:	ffe50593          	addi	a1,a0,-2
{
     36a:	c406                	sw	ra,8(sp)
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     36c:	441c                	lw	a5,8(s0)
     36e:	4501                	li	a0,0
     370:	17f9                	addi	a5,a5,-2
     372:	00f5f763          	bgeu	a1,a5,380 <clust2sect+0x22>
	return (DWORD)clst * fs->csize + fs->database;
     376:	00244503          	lbu	a0,2(s0)
     37a:	331d                	jal	a0 <__mulsi3>
     37c:	485c                	lw	a5,20(s0)
     37e:	953e                	add	a0,a0,a5
}
     380:	40a2                	lw	ra,8(sp)
     382:	4412                	lw	s0,4(sp)
     384:	0131                	addi	sp,sp,12
     386:	8082                	ret

00000388 <get_clust>:
{
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (PF_FS_FAT32 && fs->fs_type == FS_FAT32)) {
     388:	c8c1a783          	lw	a5,-884(gp) # 20000088 <FatFs>
     38c:	0007c703          	lbu	a4,0(a5)
     390:	478d                	li	a5,3
     392:	02f71163          	bne	a4,a5,3b4 <get_clust+0x2c>
		clst = ld_word(dir+DIR_FstClusHI);
     396:	01554783          	lbu	a5,21(a0)
     39a:	01454703          	lbu	a4,20(a0)
     39e:	07a2                	slli	a5,a5,0x8
     3a0:	8fd9                	or	a5,a5,a4
		clst <<= 16;
     3a2:	07c2                	slli	a5,a5,0x10
	}
	clst |= ld_word(dir+DIR_FstClusLO);
     3a4:	01a54703          	lbu	a4,26(a0)
     3a8:	01b54503          	lbu	a0,27(a0)
     3ac:	0522                	slli	a0,a0,0x8
     3ae:	8d59                	or	a0,a0,a4

	return clst;
}
     3b0:	8d5d                	or	a0,a0,a5
     3b2:	8082                	ret
	CLUST clst = 0;
     3b4:	4781                	li	a5,0
     3b6:	b7fd                	j	3a4 <get_clust+0x1c>

000003b8 <dir_rewind>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     3b8:	1151                	addi	sp,sp,-12
     3ba:	c222                	sw	s0,4(sp)
     3bc:	c406                	sw	ra,8(sp)
     3be:	842a                	mv	s0,a0
	CLUST clst;
	FATFS *fs = FatFs;


	dj->index = 0;
     3c0:	00051023          	sh	zero,0(a0)
	clst = dj->sclust;
     3c4:	4508                	lw	a0,8(a0)
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
     3c6:	4705                	li	a4,1
	FATFS *fs = FatFs;
     3c8:	c8c1a783          	lw	a5,-884(gp) # 20000088 <FatFs>
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
     3cc:	02e50563          	beq	a0,a4,3f6 <dir_rewind+0x3e>
     3d0:	4798                	lw	a4,8(a5)
     3d2:	02e57663          	bgeu	a0,a4,3fe <dir_rewind+0x46>
		return FR_DISK_ERR;
	}
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
     3d6:	e919                	bnez	a0,3ec <dir_rewind+0x34>
     3d8:	0007c683          	lbu	a3,0(a5)
     3dc:	470d                	li	a4,3
		clst = (CLUST)fs->dirbase;
     3de:	4b88                	lw	a0,16(a5)
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
     3e0:	00e68663          	beq	a3,a4,3ec <dir_rewind+0x34>
	}
	dj->clust = clst;						/* Current cluster */
     3e4:	00042623          	sw	zero,12(s0)
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     3e8:	4b88                	lw	a0,16(a5)
     3ea:	a021                	j	3f2 <dir_rewind+0x3a>
	dj->clust = clst;						/* Current cluster */
     3ec:	c448                	sw	a0,12(s0)
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     3ee:	dd6d                	beqz	a0,3e8 <dir_rewind+0x30>
     3f0:	37bd                	jal	35e <clust2sect>
     3f2:	c808                	sw	a0,16(s0)

	return FR_OK;	/* Seek succeeded */
     3f4:	4501                	li	a0,0
}
     3f6:	40a2                	lw	ra,8(sp)
     3f8:	4412                	lw	s0,4(sp)
     3fa:	0131                	addi	sp,sp,12
     3fc:	8082                	ret
		return FR_DISK_ERR;
     3fe:	4505                	li	a0,1
     400:	bfdd                	j	3f6 <dir_rewind+0x3e>

00000402 <SPI_set_prescaler>:
static inline uint8_t SPI_is_RX_empty();
static inline void SPI_wait_RX_available();

void SPI_set_prescaler(uint8_t presc)
{
    SPI1->CTLR1 &= ~SPI_CTLR1_BR;
     402:	40013737          	lui	a4,0x40013
     406:	00075783          	lhu	a5,0(a4) # 40013000 <_eusrstack+0x20012800>
    SPI1->CTLR1 |= SPI_CTLR1_BR & (presc << 3);
     40a:	050e                	slli	a0,a0,0x3
    SPI1->CTLR1 &= ~SPI_CTLR1_BR;
     40c:	07c2                	slli	a5,a5,0x10
     40e:	83c1                	srli	a5,a5,0x10
     410:	fc77f793          	andi	a5,a5,-57
     414:	07c2                	slli	a5,a5,0x10
     416:	83c1                	srli	a5,a5,0x10
     418:	00f71023          	sh	a5,0(a4)
    SPI1->CTLR1 |= SPI_CTLR1_BR & (presc << 3);
     41c:	00075783          	lhu	a5,0(a4)
     420:	07c2                	slli	a5,a5,0x10
     422:	83c1                	srli	a5,a5,0x10
     424:	8d5d                	or	a0,a0,a5
     426:	00a71023          	sh	a0,0(a4)
}
     42a:	8082                	ret

0000042c <SPI_transfer_8>:
    return SPI1->DATAR;
}

static inline void SPI_write_8(uint8_t data)
{
    SPI1->DATAR = data;
     42c:	400137b7          	lui	a5,0x40013
     430:	00a79623          	sh	a0,12(a5) # 4001300c <_eusrstack+0x2001280c>
}

// ########  small internal function definitions, static inline
static inline void SPI_wait_TX_complete()
{
    while (!(SPI1->STATR & SPI_STATR_TXE))
     434:	40013737          	lui	a4,0x40013
     438:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     43c:	8b89                	andi	a5,a5,2
     43e:	dfed                	beqz	a5,438 <SPI_transfer_8+0xc>
    asm volatile("nop");
     440:	0001                	nop
{
    return SPI1->STATR & SPI_STATR_RXNE;
}
static inline void SPI_wait_RX_available()
{
    while (!(SPI1->STATR & SPI_STATR_RXNE))
     442:	40013737          	lui	a4,0x40013
     446:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     44a:	8b85                	andi	a5,a5,1
     44c:	dfed                	beqz	a5,446 <SPI_transfer_8+0x1a>
    return SPI1->DATAR;
     44e:	00c75503          	lhu	a0,12(a4)
}
     452:	0ff57513          	andi	a0,a0,255
     456:	8082                	ret

00000458 <rcvr_mmc>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_mmc (void)
{
	BYTE r = SPI_transfer_8(0xFF);
     458:	0ff00513          	li	a0,255
     45c:	bfc1                	j	42c <SPI_transfer_8>

0000045e <skip_mmc>:

static
void skip_mmc (
	UINT n		/* Number of bytes to skip */
)
{
     45e:	1151                	addi	sp,sp,-12
     460:	c222                	sw	s0,4(sp)
     462:	c406                	sw	ra,8(sp)
     464:	842a                	mv	s0,a0
	do {
		SPI_transfer_8(0xFF);
     466:	0ff00513          	li	a0,255
	} while (--n);	
     46a:	147d                	addi	s0,s0,-1
		SPI_transfer_8(0xFF);
     46c:	37c1                	jal	42c <SPI_transfer_8>
	} while (--n);	
     46e:	fc65                	bnez	s0,466 <skip_mmc+0x8>
}
     470:	40a2                	lw	ra,8(sp)
     472:	4412                	lw	s0,4(sp)
     474:	0131                	addi	sp,sp,12
     476:	8082                	ret

00000478 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     478:	1151                	addi	sp,sp,-12
	BYTE n, res;

	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     47a:	01851793          	slli	a5,a0,0x18
{
     47e:	c222                	sw	s0,4(sp)
     480:	c026                	sw	s1,0(sp)
     482:	c406                	sw	ra,8(sp)
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     484:	87e1                	srai	a5,a5,0x18
{
     486:	84aa                	mv	s1,a0
     488:	842e                	mv	s0,a1
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     48a:	0007db63          	bgez	a5,4a0 <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     48e:	4581                	li	a1,0
     490:	07700513          	li	a0,119
     494:	37d5                	jal	478 <send_cmd>
		if (res > 1) return res;
     496:	4785                	li	a5,1
     498:	06a7e163          	bltu	a5,a0,4fa <send_cmd+0x82>
		cmd &= 0x7F;
     49c:	07f4f493          	andi	s1,s1,127
	}

	/* Select the card */
	INTF_MMC_CS_HIGH(); rcvr_mmc();
     4a0:	3f65                	jal	458 <rcvr_mmc>
	INTF_MMC_CS_LOW(); rcvr_mmc();
     4a2:	3f5d                	jal	458 <rcvr_mmc>
	SPI_transfer_8(d);
     4a4:	8526                	mv	a0,s1
     4a6:	3759                	jal	42c <SPI_transfer_8>
     4a8:	01845513          	srli	a0,s0,0x18
     4ac:	3741                	jal	42c <SPI_transfer_8>

	/* Send a command packet */
	xmit_mmc(cmd);					/* Start + Command index */
	xmit_mmc((BYTE)(arg >> 24));	/* Argument[31..24] */
	xmit_mmc((BYTE)(arg >> 16));	/* Argument[23..16] */
     4ae:	01045513          	srli	a0,s0,0x10
	SPI_transfer_8(d);
     4b2:	0ff57513          	andi	a0,a0,255
     4b6:	3f9d                	jal	42c <SPI_transfer_8>
	xmit_mmc((BYTE)(arg >> 8));		/* Argument[15..8] */
     4b8:	00845513          	srli	a0,s0,0x8
	SPI_transfer_8(d);
     4bc:	0ff57513          	andi	a0,a0,255
     4c0:	37b5                	jal	42c <SPI_transfer_8>
     4c2:	0ff47513          	andi	a0,s0,255
     4c6:	379d                	jal	42c <SPI_transfer_8>
	xmit_mmc((BYTE)arg);			/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* Valid CRC for CMD0(0) */
     4c8:	04000793          	li	a5,64
     4cc:	09500513          	li	a0,149
     4d0:	00f48963          	beq	s1,a5,4e2 <send_cmd+0x6a>
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) */
     4d4:	04800793          	li	a5,72
	n = 0x01;						/* Dummy CRC + Stop */
     4d8:	4505                	li	a0,1
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) */
     4da:	00f49463          	bne	s1,a5,4e2 <send_cmd+0x6a>
     4de:	08700513          	li	a0,135
	SPI_transfer_8(d);
     4e2:	37a9                	jal	42c <SPI_transfer_8>
     4e4:	4429                	li	s0,10
	xmit_mmc(n);

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcvr_mmc();
     4e6:	3f8d                	jal	458 <rcvr_mmc>
	} while ((res & 0x80) && --n);
     4e8:	01851793          	slli	a5,a0,0x18
     4ec:	87e1                	srai	a5,a5,0x18
     4ee:	0007d663          	bgez	a5,4fa <send_cmd+0x82>
     4f2:	147d                	addi	s0,s0,-1
     4f4:	0ff47413          	andi	s0,s0,255
     4f8:	f47d                	bnez	s0,4e6 <send_cmd+0x6e>

	return res;			/* Return with the response value */
}
     4fa:	40a2                	lw	ra,8(sp)
     4fc:	4412                	lw	s0,4(sp)
     4fe:	4482                	lw	s1,0(sp)
     500:	0131                	addi	sp,sp,12
     502:	8082                	ret

00000504 <disk_readp>:
{
	DRESULT res;
	BYTE d;
	UINT bc, tmr;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     504:	c881c783          	lbu	a5,-888(gp) # 20000084 <CardType>
{
     508:	1131                	addi	sp,sp,-20
     50a:	c622                	sw	s0,12(sp)
     50c:	c426                	sw	s1,8(sp)
     50e:	c806                	sw	ra,16(sp)
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     510:	8ba1                	andi	a5,a5,8
{
     512:	84aa                	mv	s1,a0
     514:	8436                	mv	s0,a3
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     516:	e391                	bnez	a5,51a <disk_readp+0x16>
     518:	05a6                	slli	a1,a1,0x9

	res = RES_ERROR;
	if (send_cmd(CMD17, sector) == 0) {		/* READ_SINGLE_BLOCK */
     51a:	05100513          	li	a0,81
     51e:	c032                	sw	a2,0(sp)
     520:	3fa1                	jal	478 <send_cmd>
     522:	4602                	lw	a2,0(sp)
     524:	c909                	beqz	a0,536 <disk_readp+0x32>
	res = RES_ERROR;
     526:	4405                	li	s0,1
	rcvr_mmc();
     528:	3f05                	jal	458 <rcvr_mmc>
	}

	release_spi();

	return res;
}
     52a:	40c2                	lw	ra,16(sp)
     52c:	8522                	mv	a0,s0
     52e:	4432                	lw	s0,12(sp)
     530:	44a2                	lw	s1,8(sp)
     532:	0151                	addi	sp,sp,20
     534:	8082                	ret
			DLY_US(100);
     536:	6705                	lui	a4,0x1
	if (send_cmd(CMD17, sector) == 0) {		/* READ_SINGLE_BLOCK */
     538:	3e800793          	li	a5,1000
			DLY_US(100);
     53c:	2c070713          	addi	a4,a4,704 # 12c0 <main+0xb8>
     540:	853a                	mv	a0,a4
     542:	c232                	sw	a2,4(sp)
     544:	c03e                	sw	a5,0(sp)
     546:	331d                	jal	26c <DelaySysTick>
			d = rcvr_mmc();
     548:	3f01                	jal	458 <rcvr_mmc>
		} while (d == 0xFF && --tmr);
     54a:	0ff00693          	li	a3,255
     54e:	4612                	lw	a2,4(sp)
     550:	00d51963          	bne	a0,a3,562 <disk_readp+0x5e>
     554:	4782                	lw	a5,0(sp)
     556:	6705                	lui	a4,0x1
     558:	2c070713          	addi	a4,a4,704 # 12c0 <main+0xb8>
     55c:	17fd                	addi	a5,a5,-1
     55e:	f3ed                	bnez	a5,540 <disk_readp+0x3c>
     560:	b7d9                	j	526 <disk_readp+0x22>
		if (d == 0xFE) {				/* A data packet arrived */
     562:	0fe00793          	li	a5,254
     566:	fcf510e3          	bne	a0,a5,526 <disk_readp+0x22>
			bc = 514 - offset - count;
     56a:	20200793          	li	a5,514
     56e:	8f81                	sub	a5,a5,s0
     570:	8f91                	sub	a5,a5,a2
     572:	c03e                	sw	a5,0(sp)
			if (offset) skip_mmc(offset);
     574:	c219                	beqz	a2,57a <disk_readp+0x76>
     576:	8532                	mv	a0,a2
     578:	35dd                	jal	45e <skip_mmc>
			if (buff) {	/* Store data to the memory */
     57a:	cc81                	beqz	s1,592 <disk_readp+0x8e>
     57c:	9426                	add	s0,s0,s1
					*buff++ = rcvr_mmc();
     57e:	0485                	addi	s1,s1,1
     580:	3de1                	jal	458 <rcvr_mmc>
     582:	fea48fa3          	sb	a0,-1(s1)
				while (--count);
     586:	fe849ce3          	bne	s1,s0,57e <disk_readp+0x7a>
			skip_mmc(bc);
     58a:	4502                	lw	a0,0(sp)
			res = RES_OK;
     58c:	4401                	li	s0,0
			skip_mmc(bc);
     58e:	3dc1                	jal	45e <skip_mmc>
			res = RES_OK;
     590:	bf61                	j	528 <disk_readp+0x24>
				} while (--count);
     592:	147d                	addi	s0,s0,-1
					d = rcvr_mmc();
     594:	35d1                	jal	458 <rcvr_mmc>
				} while (--count);
     596:	fc75                	bnez	s0,592 <disk_readp+0x8e>
     598:	bfcd                	j	58a <disk_readp+0x86>

0000059a <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     59a:	4785                	li	a5,1
     59c:	00a7e463          	bltu	a5,a0,5a4 <get_fat+0xa>
     5a0:	4505                	li	a0,1
}
     5a2:	8082                	ret
	FATFS *fs = FatFs;
     5a4:	c8c1a783          	lw	a5,-884(gp) # 20000088 <FatFs>
	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     5a8:	4798                	lw	a4,8(a5)
     5aa:	fee57be3          	bgeu	a0,a4,5a0 <get_fat+0x6>
{
     5ae:	1141                	addi	sp,sp,-16
     5b0:	c606                	sw	ra,12(sp)
	switch (fs->fs_type) {
     5b2:	0007c703          	lbu	a4,0(a5)
     5b6:	4689                	li	a3,2
     5b8:	00d70963          	beq	a4,a3,5ca <get_fat+0x30>
     5bc:	468d                	li	a3,3
     5be:	02d70363          	beq	a4,a3,5e4 <get_fat+0x4a>
     5c2:	4505                	li	a0,1
}
     5c4:	40b2                	lw	ra,12(sp)
     5c6:	0141                	addi	sp,sp,16
     5c8:	8082                	ret
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
     5ca:	47cc                	lw	a1,12(a5)
     5cc:	0ff57613          	andi	a2,a0,255
     5d0:	8121                	srli	a0,a0,0x8
     5d2:	95aa                	add	a1,a1,a0
     5d4:	4689                	li	a3,2
     5d6:	0606                	slli	a2,a2,0x1
     5d8:	850a                	mv	a0,sp
     5da:	372d                	jal	504 <disk_readp>
     5dc:	f17d                	bnez	a0,5c2 <get_fat+0x28>
		return ld_word(buf);
     5de:	00015503          	lhu	a0,0(sp)
     5e2:	b7cd                	j	5c4 <get_fat+0x2a>
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
     5e4:	47cc                	lw	a1,12(a5)
     5e6:	07f57613          	andi	a2,a0,127
     5ea:	811d                	srli	a0,a0,0x7
     5ec:	95aa                	add	a1,a1,a0
     5ee:	4691                	li	a3,4
     5f0:	060a                	slli	a2,a2,0x2
     5f2:	850a                	mv	a0,sp
     5f4:	3f01                	jal	504 <disk_readp>
     5f6:	f571                	bnez	a0,5c2 <get_fat+0x28>
		return ld_dword(buf) & 0x0FFFFFFF;
     5f8:	850a                	mv	a0,sp
     5fa:	3399                	jal	340 <ld_dword>
     5fc:	0512                	slli	a0,a0,0x4
     5fe:	8111                	srli	a0,a0,0x4
     600:	b7d1                	j	5c4 <get_fat+0x2a>

00000602 <disk_writep.part.0>:
/*-----------------------------------------------------------------------*/
/* Write partial sector                                                  */
/*-----------------------------------------------------------------------*/
#if PF_USE_WRITE

DRESULT disk_writep (
     602:	1151                	addi	sp,sp,-12
     604:	c406                	sw	ra,8(sp)
     606:	c222                	sw	s0,4(sp)
			xmit_mmc(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sc) {	/* Initiate sector write transaction */
     608:	cd0d                	beqz	a0,642 <disk_writep.part.0+0x40>
			if (!(CardType & CT_BLOCK)) sc *= 512;	/* Convert to byte address if needed */
     60a:	c881c783          	lbu	a5,-888(gp) # 20000084 <CardType>
     60e:	85aa                	mv	a1,a0
     610:	8ba1                	andi	a5,a5,8
     612:	e399                	bnez	a5,618 <disk_writep.part.0+0x16>
     614:	00951593          	slli	a1,a0,0x9
			if (send_cmd(CMD24, sc) == 0) {			/* WRITE_SINGLE_BLOCK */
     618:	05800513          	li	a0,88
     61c:	3db1                	jal	478 <send_cmd>
	res = RES_ERROR;
     61e:	4405                	li	s0,1
			if (send_cmd(CMD24, sc) == 0) {			/* WRITE_SINGLE_BLOCK */
     620:	ed01                	bnez	a0,638 <disk_writep.part.0+0x36>
	SPI_transfer_8(d);
     622:	0ff00513          	li	a0,255
     626:	3519                	jal	42c <SPI_transfer_8>
     628:	0fe00513          	li	a0,254
     62c:	3501                	jal	42c <SPI_transfer_8>
				xmit_mmc(0xFF); xmit_mmc(0xFE);		/* Data block header */
				wc = 512;							/* Set byte counter */
     62e:	20000713          	li	a4,512
     632:	cae1aa23          	sw	a4,-844(gp) # 200000b0 <wc.1>
				res = RES_OK;
     636:	4401                	li	s0,0
			release_spi();
		}
	}

	return res;
}
     638:	40a2                	lw	ra,8(sp)
     63a:	8522                	mv	a0,s0
     63c:	4412                	lw	s0,4(sp)
     63e:	0131                	addi	sp,sp,12
     640:	8082                	ret
			bc = wc + 2;
     642:	cb41a403          	lw	s0,-844(gp) # 200000b0 <wc.1>
     646:	0409                	addi	s0,s0,2
			while (bc--) xmit_mmc(0);	/* Fill left bytes and CRC with zeros */
     648:	e809                	bnez	s0,65a <disk_writep.part.0+0x58>
			if ((rcvr_mmc() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
     64a:	3539                	jal	458 <rcvr_mmc>
     64c:	897d                	andi	a0,a0,31
     64e:	4795                	li	a5,5
     650:	02f50563          	beq	a0,a5,67a <disk_writep.part.0+0x78>
	res = RES_ERROR;
     654:	4405                	li	s0,1
	rcvr_mmc();
     656:	3509                	jal	458 <rcvr_mmc>
     658:	b7c5                	j	638 <disk_writep.part.0+0x36>
	SPI_transfer_8(d);
     65a:	4501                	li	a0,0
     65c:	3bc1                	jal	42c <SPI_transfer_8>
     65e:	147d                	addi	s0,s0,-1
     660:	b7e5                	j	648 <disk_writep.part.0+0x46>
					DLY_US(100);
     662:	6505                	lui	a0,0x1
     664:	2c050513          	addi	a0,a0,704 # 12c0 <main+0xb8>
     668:	3111                	jal	26c <DelaySysTick>
				for (tmr = 10000; rcvr_mmc() != 0xFF && tmr; tmr--)	/* Wait for ready (max 1000ms) */
     66a:	147d                	addi	s0,s0,-1
     66c:	33f5                	jal	458 <rcvr_mmc>
     66e:	0ff00793          	li	a5,255
     672:	00f50863          	beq	a0,a5,682 <disk_writep.part.0+0x80>
     676:	f475                	bnez	s0,662 <disk_writep.part.0+0x60>
     678:	bff1                	j	654 <disk_writep.part.0+0x52>
     67a:	6409                	lui	s0,0x2
     67c:	71040413          	addi	s0,s0,1808 # 2710 <FONT_7x5+0x74>
     680:	b7f5                	j	66c <disk_writep.part.0+0x6a>
				if (tmr) res = RES_OK;
     682:	00143413          	seqz	s0,s0
     686:	bfc1                	j	656 <disk_writep.part.0+0x54>

00000688 <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     688:	400057b7          	lui	a5,0x40005
     68c:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     690:	40078793          	addi	a5,a5,1024
     694:	10077713          	andi	a4,a4,256
     698:	cf09                	beqz	a4,6b2 <i2c_error+0x2a>
     69a:	0147d703          	lhu	a4,20(a5)
     69e:	4505                	li	a0,1
     6a0:	0742                	slli	a4,a4,0x10
     6a2:	8341                	srli	a4,a4,0x10
     6a4:	eff77713          	andi	a4,a4,-257
     6a8:	0742                	slli	a4,a4,0x10
     6aa:	8341                	srli	a4,a4,0x10
     6ac:	00e79a23          	sh	a4,20(a5)
     6b0:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     6b2:	0147d703          	lhu	a4,20(a5)
     6b6:	40077713          	andi	a4,a4,1024
     6ba:	cf09                	beqz	a4,6d4 <i2c_error+0x4c>
     6bc:	0147d703          	lhu	a4,20(a5)
     6c0:	4509                	li	a0,2
     6c2:	0742                	slli	a4,a4,0x10
     6c4:	8341                	srli	a4,a4,0x10
     6c6:	bff77713          	andi	a4,a4,-1025
     6ca:	0742                	slli	a4,a4,0x10
     6cc:	8341                	srli	a4,a4,0x10
     6ce:	00e79a23          	sh	a4,20(a5)
     6d2:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     6d4:	0147d703          	lhu	a4,20(a5)
     6d8:	20077713          	andi	a4,a4,512
     6dc:	cf09                	beqz	a4,6f6 <i2c_error+0x6e>
     6de:	0147d703          	lhu	a4,20(a5)
     6e2:	450d                	li	a0,3
     6e4:	0742                	slli	a4,a4,0x10
     6e6:	8341                	srli	a4,a4,0x10
     6e8:	dff77713          	andi	a4,a4,-513
     6ec:	0742                	slli	a4,a4,0x10
     6ee:	8341                	srli	a4,a4,0x10
     6f0:	00e79a23          	sh	a4,20(a5)
     6f4:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     6f6:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     6fa:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     6fc:	832d                	srli	a4,a4,0xb
     6fe:	8b05                	andi	a4,a4,1
     700:	cf01                	beqz	a4,718 <i2c_error+0x90>
     702:	0147d703          	lhu	a4,20(a5)
     706:	76fd                	lui	a3,0xfffff
     708:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     70c:	0742                	slli	a4,a4,0x10
     70e:	8341                	srli	a4,a4,0x10
     710:	8f75                	and	a4,a4,a3
     712:	00e79a23          	sh	a4,20(a5)
     716:	4511                	li	a0,4
}
     718:	8082                	ret

0000071a <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     71a:	415c                	lw	a5,4(a0)
     71c:	e7b1                	bnez	a5,768 <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     71e:	00855783          	lhu	a5,8(a0)
     722:	40005737          	lui	a4,0x40005
     726:	0786                	slli	a5,a5,0x1
     728:	0fe7f793          	andi	a5,a5,254
     72c:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     730:	6789                	lui	a5,0x2
     732:	71078793          	addi	a5,a5,1808 # 2710 <FONT_7x5+0x74>
	return (status & status_mask) == status_mask; 
     736:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     73a:	c8f1ae23          	sw	a5,-868(gp) # 20000098 <_i2c_timeout>
     73e:	4501                	li	a0,0
     740:	c9c18693          	addi	a3,gp,-868 # 20000098 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     744:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     748:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.d894f163+0x666db>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     74c:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     750:	01071593          	slli	a1,a4,0x10
     754:	41835703          	lhu	a4,1048(t1)
     758:	81c1                	srli	a1,a1,0x10
     75a:	0742                	slli	a4,a4,0x10
     75c:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     75e:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     760:	00c71663          	bne	a4,a2,76c <i2c_send_addr_write+0x52>
     764:	c111                	beqz	a0,768 <i2c_send_addr_write+0x4e>
     766:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     768:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     76a:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     76c:	17fd                	addi	a5,a5,-1
     76e:	4505                	li	a0,1
     770:	fff1                	bnez	a5,74c <i2c_send_addr_write+0x32>
{
     772:	1151                	addi	sp,sp,-12
     774:	c406                	sw	ra,8(sp)
     776:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     77a:	3739                	jal	688 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     77c:	e111                	bnez	a0,780 <i2c_send_addr_write+0x66>
     77e:	4515                	li	a0,5
}
     780:	40a2                	lw	ra,8(sp)
     782:	0131                	addi	sp,sp,12
     784:	8082                	ret

00000786 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     786:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     788:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     78a:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     78c:	71078793          	addi	a5,a5,1808 # 2710 <FONT_7x5+0x74>
     790:	c8f1ae23          	sw	a5,-868(gp) # 20000098 <_i2c_timeout>
{
     794:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     796:	c002                	sw	zero,0(sp)
     798:	c202                	sw	zero,4(sp)
     79a:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     79e:	4601                	li	a2,0
     7a0:	c9c18713          	addi	a4,gp,-868 # 20000098 <_i2c_timeout>
     7a4:	400055b7          	lui	a1,0x40005
     7a8:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     7ac:	8a89                	andi	a3,a3,2
     7ae:	e689                	bnez	a3,7b8 <i2c_ping+0x32>
     7b0:	c211                	beqz	a2,7b4 <i2c_ping+0x2e>
     7b2:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
     7b4:	4501                	li	a0,0
     7b6:	a809                	j	7c8 <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     7b8:	17fd                	addi	a5,a5,-1
     7ba:	4605                	li	a2,1
     7bc:	f7f5                	bnez	a5,7a8 <i2c_ping+0x22>
     7be:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
     7c2:	35d9                	jal	688 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     7c4:	e111                	bnez	a0,7c8 <i2c_ping+0x42>
     7c6:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     7c8:	40005737          	lui	a4,0x40005
     7cc:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     7d0:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     7d4:	07c2                	slli	a5,a5,0x10
     7d6:	83c1                	srli	a5,a5,0x10
     7d8:	1007e793          	ori	a5,a5,256
     7dc:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     7e0:	00030737          	lui	a4,0x30
     7e4:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     7e6:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     7ea:	01079693          	slli	a3,a5,0x10
     7ee:	4185d783          	lhu	a5,1048(a1)
     7f2:	82c1                	srli	a3,a3,0x10
     7f4:	07c2                	slli	a5,a5,0x10
     7f6:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     7f8:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     7fa:	fee796e3          	bne	a5,a4,7e6 <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     7fe:	e119                	bnez	a0,804 <i2c_ping+0x7e>
     800:	850a                	mv	a0,sp
     802:	3f21                	jal	71a <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     804:	40005737          	lui	a4,0x40005
     808:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     80c:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     80e:	07c2                	slli	a5,a5,0x10
     810:	83c1                	srli	a5,a5,0x10
     812:	2007e793          	ori	a5,a5,512
     816:	40f71023          	sh	a5,1024(a4)
}
     81a:	0161                	addi	sp,sp,24
     81c:	8082                	ret

0000081e <pf_write.constprop.0>:
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/
#if PF_USE_WRITE

FRESULT pf_write (
     81e:	fdc10113          	addi	sp,sp,-36
     822:	cc26                	sw	s1,24(sp)
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	BYTE cs;
	UINT wcnt;
	FATFS *fs = FatFs;
     824:	c8c1a483          	lw	s1,-884(gp) # 20000088 <FatFs>


	*bw = 0;
     828:	ca01a223          	sw	zero,-860(gp) # 200000a0 <br>
     82c:	ca418793          	addi	a5,gp,-860 # 200000a0 <br>
FRESULT pf_write (
     830:	ce22                	sw	s0,28(sp)
     832:	d006                	sw	ra,32(sp)
     834:	c02a                	sw	a0,0(sp)
     836:	c43e                	sw	a5,8(sp)
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     838:	4415                	li	s0,5
     83a:	c88d                	beqz	s1,86c <pf_write.constprop.0+0x4e>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
     83c:	0014c703          	lbu	a4,1(s1)
     840:	4411                	li	s0,4
     842:	00177693          	andi	a3,a4,1
     846:	c29d                	beqz	a3,86c <pf_write.constprop.0+0x4e>
     848:	842e                	mv	s0,a1
     84a:	04077713          	andi	a4,a4,64

	if (!btw) {		/* Finalize request */
     84e:	e595                	bnez	a1,87a <pf_write.constprop.0+0x5c>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) ABORT(FR_DISK_ERR);
     850:	cb01                	beqz	a4,860 <pf_write.constprop.0+0x42>
     852:	4501                	li	a0,0
     854:	337d                	jal	602 <disk_writep.part.0>
     856:	c509                	beqz	a0,860 <pf_write.constprop.0+0x42>
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) ABORT(FR_DISK_ERR);	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
		btw -= wcnt; *bw += wcnt;
		if ((UINT)fs->fptr % 512 == 0) {
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
     858:	000480a3          	sb	zero,1(s1)
     85c:	4405                	li	s0,1
     85e:	a039                	j	86c <pf_write.constprop.0+0x4e>
		fs->flag &= ~FA__WIP;
     860:	0014c703          	lbu	a4,1(s1)
     864:	fbf77713          	andi	a4,a4,-65
     868:	00e480a3          	sb	a4,1(s1)
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
}
     86c:	5082                	lw	ra,32(sp)
     86e:	8522                	mv	a0,s0
     870:	4472                	lw	s0,28(sp)
     872:	44e2                	lw	s1,24(sp)
     874:	02410113          	addi	sp,sp,36
     878:	8082                	ret
		if (!(fs->flag & FA__WIP)) {	/* Round-down fptr to the sector boundary */
     87a:	e709                	bnez	a4,884 <pf_write.constprop.0+0x66>
			fs->fptr &= 0xFFFFFE00;
     87c:	4c98                	lw	a4,24(s1)
     87e:	e0077713          	andi	a4,a4,-512
     882:	cc98                	sw	a4,24(s1)
	remain = fs->fsize - fs->fptr;
     884:	4cd8                	lw	a4,28(s1)
     886:	4c94                	lw	a3,24(s1)
     888:	8f15                	sub	a4,a4,a3
     88a:	00877363          	bgeu	a4,s0,890 <pf_write.constprop.0+0x72>
     88e:	843a                	mv	s0,a4
	while (btw)	{									/* Repeat until all data transferred */
     890:	dc71                	beqz	s0,86c <pf_write.constprop.0+0x4e>
		if ((UINT)fs->fptr % 512 == 0) {			/* On the sector boundary? */
     892:	4c98                	lw	a4,24(s1)
     894:	1ff77693          	andi	a3,a4,511
     898:	ee9d                	bnez	a3,8d6 <pf_write.constprop.0+0xb8>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
     89a:	0024c503          	lbu	a0,2(s1)
     89e:	00975693          	srli	a3,a4,0x9
     8a2:	157d                	addi	a0,a0,-1
     8a4:	8d75                	and	a0,a0,a3
     8a6:	0ff57793          	andi	a5,a0,255
     8aa:	c23e                	sw	a5,4(sp)
			if (!cs) {								/* On the cluster boundary? */
     8ac:	e799                	bnez	a5,8ba <pf_write.constprop.0+0x9c>
				if (fs->fptr == 0) {				/* On the top of the file? */
     8ae:	e745                	bnez	a4,956 <pf_write.constprop.0+0x138>
					clst = fs->org_clust;
     8b0:	5088                	lw	a0,32(s1)
				if (clst <= 1) ABORT(FR_DISK_ERR);
     8b2:	4705                	li	a4,1
     8b4:	faa772e3          	bgeu	a4,a0,858 <pf_write.constprop.0+0x3a>
				fs->curr_clust = clst;				/* Update current cluster */
     8b8:	d0c8                	sw	a0,36(s1)
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
     8ba:	50c8                	lw	a0,36(s1)
     8bc:	344d                	jal	35e <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
     8be:	dd49                	beqz	a0,858 <pf_write.constprop.0+0x3a>
			fs->dsect = sect + cs;
     8c0:	4792                	lw	a5,4(sp)
     8c2:	953e                	add	a0,a0,a5
     8c4:	d488                	sw	a0,40(s1)
     8c6:	3b35                	jal	602 <disk_writep.part.0>
			if (disk_writep(0, fs->dsect)) ABORT(FR_DISK_ERR);	/* Initiate a sector write operation */
     8c8:	f941                	bnez	a0,858 <pf_write.constprop.0+0x3a>
			fs->flag |= FA__WIP;
     8ca:	0014c703          	lbu	a4,1(s1)
     8ce:	04076713          	ori	a4,a4,64
     8d2:	00e480a3          	sb	a4,1(s1)
		wcnt = 512 - (UINT)fs->fptr % 512;			/* Number of bytes to write to the sector */
     8d6:	4c98                	lw	a4,24(s1)
     8d8:	20000693          	li	a3,512
     8dc:	1ff77713          	andi	a4,a4,511
     8e0:	40e68733          	sub	a4,a3,a4
     8e4:	00e47363          	bgeu	s0,a4,8ea <pf_write.constprop.0+0xcc>
     8e8:	8722                	mv	a4,s0
	if (buff) {		/* Send data bytes */
     8ea:	4782                	lw	a5,0(sp)
     8ec:	cba5                	beqz	a5,95c <pf_write.constprop.0+0x13e>
     8ee:	00e782b3          	add	t0,a5,a4
     8f2:	863e                	mv	a2,a5
		while (bc && wc) {		/* Send data bytes to the card */
     8f4:	cb418313          	addi	t1,gp,-844 # 200000b0 <wc.1>
     8f8:	00032683          	lw	a3,0(t1)
     8fc:	c685                	beqz	a3,924 <pf_write.constprop.0+0x106>
	SPI_transfer_8(d);
     8fe:	00064503          	lbu	a0,0(a2)
			xmit_mmc(*buff++);
     902:	0605                	addi	a2,a2,1
     904:	ca16                	sw	t0,20(sp)
     906:	c836                	sw	a3,16(sp)
     908:	c63a                	sw	a4,12(sp)
	SPI_transfer_8(d);
     90a:	c232                	sw	a2,4(sp)
     90c:	3605                	jal	42c <SPI_transfer_8>
			wc--; bc--;
     90e:	46c2                	lw	a3,16(sp)
		while (bc && wc) {		/* Send data bytes to the card */
     910:	4612                	lw	a2,4(sp)
     912:	42d2                	lw	t0,20(sp)
			wc--; bc--;
     914:	16fd                	addi	a3,a3,-1
     916:	cb418313          	addi	t1,gp,-844 # 200000b0 <wc.1>
     91a:	00d32023          	sw	a3,0(t1)
		while (bc && wc) {		/* Send data bytes to the card */
     91e:	4732                	lw	a4,12(sp)
     920:	fc561ae3          	bne	a2,t0,8f4 <pf_write.constprop.0+0xd6>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
     924:	4782                	lw	a5,0(sp)
     926:	4c94                	lw	a3,24(s1)
		btw -= wcnt; *bw += wcnt;
     928:	8c19                	sub	s0,s0,a4
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
     92a:	97ba                	add	a5,a5,a4
     92c:	c03e                	sw	a5,0(sp)
		btw -= wcnt; *bw += wcnt;
     92e:	47a2                	lw	a5,8(sp)
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
     930:	96ba                	add	a3,a3,a4
     932:	cc94                	sw	a3,24(s1)
		btw -= wcnt; *bw += wcnt;
     934:	4390                	lw	a2,0(a5)
		if ((UINT)fs->fptr % 512 == 0) {
     936:	1ff6f693          	andi	a3,a3,511
		btw -= wcnt; *bw += wcnt;
     93a:	9732                	add	a4,a4,a2
     93c:	c398                	sw	a4,0(a5)
		if ((UINT)fs->fptr % 512 == 0) {
     93e:	faa9                	bnez	a3,890 <pf_write.constprop.0+0x72>
     940:	4501                	li	a0,0
     942:	31c1                	jal	602 <disk_writep.part.0>
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
     944:	f0051ae3          	bnez	a0,858 <pf_write.constprop.0+0x3a>
			fs->flag &= ~FA__WIP;
     948:	0014c703          	lbu	a4,1(s1)
     94c:	fbf77713          	andi	a4,a4,-65
     950:	00e480a3          	sb	a4,1(s1)
     954:	bf35                	j	890 <pf_write.constprop.0+0x72>
					clst = get_fat(fs->curr_clust);
     956:	50c8                	lw	a0,36(s1)
     958:	3189                	jal	59a <get_fat>
     95a:	bfa1                	j	8b2 <pf_write.constprop.0+0x94>
     95c:	853a                	mv	a0,a4
     95e:	c23a                	sw	a4,4(sp)
     960:	314d                	jal	602 <disk_writep.part.0>
		if (disk_writep(p, wcnt)) ABORT(FR_DISK_ERR);	/* Send data to the sector */
     962:	4712                	lw	a4,4(sp)
     964:	d161                	beqz	a0,924 <pf_write.constprop.0+0x106>
     966:	bdcd                	j	858 <pf_write.constprop.0+0x3a>

00000968 <i2c_write_raw.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     968:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     96a:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     96c:	71078793          	addi	a5,a5,1808 # 2710 <FONT_7x5+0x74>
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     970:	c626                	sw	s1,12(sp)
     972:	c22e                	sw	a1,4(sp)
     974:	ca06                	sw	ra,20(sp)
     976:	c822                	sw	s0,16(sp)
     978:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     97a:	c8f1ae23          	sw	a5,-868(gp) # 20000098 <_i2c_timeout>
     97e:	4601                	li	a2,0
     980:	c9c18493          	addi	s1,gp,-868 # 20000098 <_i2c_timeout>
     984:	400055b7          	lui	a1,0x40005
     988:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     98c:	8a89                	andi	a3,a3,2
     98e:	e6bd                	bnez	a3,9fc <i2c_write_raw.constprop.0+0x94>
     990:	c211                	beqz	a2,994 <i2c_write_raw.constprop.0+0x2c>
     992:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     994:	400056b7          	lui	a3,0x40005
     998:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     99c:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     9a0:	07c2                	slli	a5,a5,0x10
     9a2:	83c1                	srli	a5,a5,0x10
     9a4:	1007e793          	ori	a5,a5,256
     9a8:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     9ac:	000306b7          	lui	a3,0x30
     9b0:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     9b2:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     9b6:	01079613          	slli	a2,a5,0x10
     9ba:	4185d783          	lhu	a5,1048(a1)
     9be:	8241                	srli	a2,a2,0x10
     9c0:	07c2                	slli	a5,a5,0x10
     9c2:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     9c4:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     9c6:	fed796e3          	bne	a5,a3,9b2 <i2c_write_raw.constprop.0+0x4a>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     9ca:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
     9ce:	33b1                	jal	71a <i2c_send_addr_write>
     9d0:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     9d2:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
     9d4:	e91d                	bnez	a0,a0a <i2c_write_raw.constprop.0+0xa2>
		while(cbyte < len)
     9d6:	4792                	lw	a5,4(sp)
     9d8:	02f67963          	bgeu	a2,a5,a0a <i2c_write_raw.constprop.0+0xa2>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     9dc:	6689                	lui	a3,0x2
     9de:	71068693          	addi	a3,a3,1808 # 2710 <FONT_7x5+0x74>
     9e2:	c094                	sw	a3,0(s1)
     9e4:	4501                	li	a0,0
     9e6:	40005337          	lui	t1,0x40005
     9ea:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     9ee:	0805f593          	andi	a1,a1,128
     9f2:	c5b9                	beqz	a1,a40 <i2c_write_raw.constprop.0+0xd8>
     9f4:	c111                	beqz	a0,9f8 <i2c_write_raw.constprop.0+0x90>
     9f6:	c094                	sw	a3,0(s1)
     9f8:	4501                	li	a0,0
     9fa:	a8a9                	j	a54 <i2c_write_raw.constprop.0+0xec>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     9fc:	17fd                	addi	a5,a5,-1
     9fe:	4605                	li	a2,1
     a00:	f7c1                	bnez	a5,988 <i2c_write_raw.constprop.0+0x20>
	i2c_err_t i2c_err = i2c_error();
     a02:	3159                	jal	688 <i2c_error>
     a04:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     a06:	e111                	bnez	a0,a0a <i2c_write_raw.constprop.0+0xa2>
     a08:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     a0a:	6689                	lui	a3,0x2
     a0c:	71068693          	addi	a3,a3,1808 # 2710 <FONT_7x5+0x74>
	return (status & status_mask) == status_mask; 
     a10:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     a14:	c094                	sw	a3,0(s1)
     a16:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     a18:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     a1c:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.d894f163+0x666dd>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     a20:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     a24:	01061513          	slli	a0,a2,0x10
     a28:	4182d603          	lhu	a2,1048(t0)
     a2c:	8141                	srli	a0,a0,0x10
     a2e:	0642                	slli	a2,a2,0x10
     a30:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     a32:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     a34:	04b61363          	bne	a2,a1,a7a <i2c_write_raw.constprop.0+0x112>
     a38:	04030a63          	beqz	t1,a8c <i2c_write_raw.constprop.0+0x124>
     a3c:	c094                	sw	a3,0(s1)
     a3e:	a0b9                	j	a8c <i2c_write_raw.constprop.0+0x124>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     a40:	16fd                	addi	a3,a3,-1
     a42:	4505                	li	a0,1
     a44:	f2dd                	bnez	a3,9ea <i2c_write_raw.constprop.0+0x82>
     a46:	c432                	sw	a2,8(sp)
     a48:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     a4c:	3935                	jal	688 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     a4e:	4622                	lw	a2,8(sp)
     a50:	e111                	bnez	a0,a54 <i2c_write_raw.constprop.0+0xec>
     a52:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     a54:	4782                	lw	a5,0(sp)
     a56:	00c786b3          	add	a3,a5,a2
     a5a:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     a5e:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     a60:	400056b7          	lui	a3,0x40005
     a64:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     a68:	0ff67613          	andi	a2,a2,255
     a6c:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     a6e:	e501                	bnez	a0,a76 <i2c_write_raw.constprop.0+0x10e>
     a70:	3921                	jal	688 <i2c_error>
     a72:	4622                	lw	a2,8(sp)
     a74:	d12d                	beqz	a0,9d6 <i2c_write_raw.constprop.0+0x6e>
     a76:	842a                	mv	s0,a0
     a78:	bf49                	j	a0a <i2c_write_raw.constprop.0+0xa2>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     a7a:	16fd                	addi	a3,a3,-1
     a7c:	4305                	li	t1,1
     a7e:	f2cd                	bnez	a3,a20 <i2c_write_raw.constprop.0+0xb8>
     a80:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     a84:	3111                	jal	688 <i2c_error>
     a86:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     a88:	e111                	bnez	a0,a8c <i2c_write_raw.constprop.0+0x124>
     a8a:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     a8c:	400056b7          	lui	a3,0x40005
     a90:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     a94:	40d2                	lw	ra,20(sp)
     a96:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     a98:	0742                	slli	a4,a4,0x10
}
     a9a:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     a9c:	8341                	srli	a4,a4,0x10
     a9e:	20076713          	ori	a4,a4,512
     aa2:	40e69023          	sh	a4,1024(a3)
}
     aa6:	44b2                	lw	s1,12(sp)
     aa8:	0161                	addi	sp,sp,24
     aaa:	8082                	ret

00000aac <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     aac:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     aae:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     ab2:	4589                	li	a1,2
     ab4:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     ab6:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     ab8:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     abc:	3575                	jal	968 <i2c_write_raw.constprop.0>
}
     abe:	40b2                	lw	ra,12(sp)
     ac0:	0ff57513          	andi	a0,a0,255
     ac4:	0141                	addi	sp,sp,16
     ac6:	8082                	ret

00000ac8 <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     ac8:	e00007b7          	lui	a5,0xe0000
     acc:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
}
     ad0:	8082                	ret

00000ad2 <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     ad2:	e0000737          	lui	a4,0xe0000
     ad6:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     ada:	1111                	addi	sp,sp,-28
     adc:	cc06                	sw	ra,24(sp)
     ade:	ca22                	sw	s0,20(sp)
     ae0:	c826                	sw	s1,16(sp)
     ae2:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     ae4:	0c07f793          	andi	a5,a5,192
     ae8:	0c000693          	li	a3,192
     aec:	0cd78863          	beq	a5,a3,bbc <_write.constprop.0+0xea>
	char buffer[4] = { 0 };
     af0:	c602                	sw	zero,12(sp)
     af2:	842e                	mv	s0,a1
	if( size == 0 )
     af4:	e5f1                	bnez	a1,bc0 <_write.constprop.0+0xee>
		lastdmd = (*DMDATA0);
     af6:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     afa:	c789                	beqz	a5,b04 <_write.constprop.0+0x32>
     afc:	0807f793          	andi	a5,a5,128
     b00:	e391                	bnez	a5,b04 <_write.constprop.0+0x32>
     b02:	37d9                	jal	ac8 <internal_handle_input.constprop.0>
}
     b04:	40e2                	lw	ra,24(sp)
     b06:	8522                	mv	a0,s0
     b08:	4452                	lw	s0,20(sp)
     b0a:	44c2                	lw	s1,16(sp)
     b0c:	0171                	addi	sp,sp,28
     b0e:	8082                	ret
		int tosend = size - place;
     b10:	409405b3          	sub	a1,s0,s1
     b14:	469d                	li	a3,7
     b16:	872e                	mv	a4,a1
     b18:	00b6d363          	bge	a3,a1,b1e <_write.constprop.0+0x4c>
     b1c:	471d                	li	a4,7
     b1e:	001006b7          	lui	a3,0x100
     b22:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     b24:	e0000537          	lui	a0,0xe0000
     b28:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     b2c:	0f450313          	addi	t1,a0,244
     b30:	08067293          	andi	t0,a2,128
     b34:	06029c63          	bnez	t0,bac <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     b38:	c611                	beqz	a2,b44 <_write.constprop.0+0x72>
     b3a:	c43a                	sw	a4,8(sp)
     b3c:	c22e                	sw	a1,4(sp)
     b3e:	3769                	jal	ac8 <internal_handle_input.constprop.0>
     b40:	4722                	lw	a4,8(sp)
     b42:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     b44:	4689                	li	a3,2
     b46:	4601                	li	a2,0
     b48:	00b6d463          	bge	a3,a1,b50 <_write.constprop.0+0x7e>
     b4c:	ffd70613          	addi	a2,a4,-3
     b50:	4782                	lw	a5,0(sp)
     b52:	00348593          	addi	a1,s1,3
     b56:	0068                	addi	a0,sp,12
     b58:	95be                	add	a1,a1,a5
     b5a:	c23a                	sw	a4,4(sp)
     b5c:	2171                	jal	fe8 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     b5e:	4632                	lw	a2,12(sp)
     b60:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     b62:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     b64:	e00006b7          	lui	a3,0xe0000
     b68:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     b6c:	458d                	li	a1,3
     b6e:	00978633          	add	a2,a5,s1
		t = 0;
     b72:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     b74:	00064303          	lbu	t1,0(a2)
     b78:	0685                	addi	a3,a3,1
     b7a:	007c                	addi	a5,sp,12
     b7c:	00d78533          	add	a0,a5,a3
     b80:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     b84:	00d70563          	beq	a4,a3,b8e <_write.constprop.0+0xbc>
     b88:	0605                	addi	a2,a2,1
     b8a:	feb695e3          	bne	a3,a1,b74 <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     b8e:	00470693          	addi	a3,a4,4
     b92:	f806e693          	ori	a3,a3,-128
     b96:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     b9a:	4632                	lw	a2,12(sp)
     b9c:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     ba0:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     ba2:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     ba6:	f684c5e3          	blt	s1,s0,b10 <_write.constprop.0+0x3e>
     baa:	bfa9                	j	b04 <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     bac:	16fd                	addi	a3,a3,-1
     bae:	fead                	bnez	a3,b28 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     bb0:	00032783          	lw	a5,0(t1)
     bb4:	0c07e793          	ori	a5,a5,192
     bb8:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     bbc:	4401                	li	s0,0
     bbe:	b799                	j	b04 <_write.constprop.0+0x32>
	if( size == 0 )
     bc0:	4481                	li	s1,0
     bc2:	b7d5                	j	ba6 <_write.constprop.0+0xd4>

00000bc4 <__puts_uart>:
{
     bc4:	1151                	addi	sp,sp,-12
     bc6:	c222                	sw	s0,4(sp)
     bc8:	c406                	sw	ra,8(sp)
     bca:	842e                	mv	s0,a1
	_write( 0, s, len );
     bcc:	3719                	jal	ad2 <_write.constprop.0>
}
     bce:	40a2                	lw	ra,8(sp)
     bd0:	8522                	mv	a0,s0
     bd2:	4412                	lw	s0,4(sp)
     bd4:	0131                	addi	sp,sp,12
     bd6:	8082                	ret

00000bd8 <handle_reset>:
	asm volatile( "\n\
     bd8:	20000197          	auipc	gp,0x20000
     bdc:	82418193          	addi	gp,gp,-2012 # 200003fc <__global_pointer$>
     be0:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     be4:	6509                	lui	a0,0x2
     be6:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x678>
     bea:	30051073          	csrw	mstatus,a0
     bee:	468d                	li	a3,3
     bf0:	fffff517          	auipc	a0,0xfffff
     bf4:	41050513          	addi	a0,a0,1040 # 0 <InterruptVector>
     bf8:	8d55                	or	a0,a0,a3
     bfa:	30551073          	csrw	mtvec,a0
asm volatile(
     bfe:	c8818513          	addi	a0,gp,-888 # 20000084 <CardType>
     c02:	18418593          	addi	a1,gp,388 # 20000580 <_ebss>
     c06:	4601                	li	a2,0
     c08:	00b55663          	bge	a0,a1,c14 <handle_reset+0x3c>
     c0c:	c110                	sw	a2,0(a0)
     c0e:	0511                	addi	a0,a0,4
     c10:	feb54ee3          	blt	a0,a1,c0c <handle_reset+0x34>
     c14:	00002517          	auipc	a0,0x2
     c18:	d3050513          	addi	a0,a0,-720 # 2944 <_data_lma>
     c1c:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_aht21>
     c20:	1ffff617          	auipc	a2,0x1ffff
     c24:	46460613          	addi	a2,a2,1124 # 20000084 <CardType>
     c28:	00c58863          	beq	a1,a2,c38 <handle_reset+0x60>
     c2c:	4114                	lw	a3,0(a0)
     c2e:	c194                	sw	a3,0(a1)
     c30:	0511                	addi	a0,a0,4
     c32:	0591                	addi	a1,a1,4
     c34:	fec59ae3          	bne	a1,a2,c28 <handle_reset+0x50>
	SysTick->CTLR = 5;
     c38:	e000f7b7          	lui	a5,0xe000f
     c3c:	4715                	li	a4,5
     c3e:	c398                	sw	a4,0(a5)
asm volatile(
     c40:	6785                	lui	a5,0x1
     c42:	20878793          	addi	a5,a5,520 # 1208 <main>
     c46:	34179073          	csrw	mepc,a5
     c4a:	30200073          	mret

00000c4e <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     c4e:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     c52:	dc2ff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     c56:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     c5a:	dbaff0ef          	jal	ra,214 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     c5e:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     c62:	db2ff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     c66:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     c6a:	daaff0ef          	jal	ra,214 <PrintHex>
	while( (*DMDATA0) & 0x80 );
     c6e:	e0000737          	lui	a4,0xe0000
     c72:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     c76:	0f470693          	addi	a3,a4,244
     c7a:	0807f793          	andi	a5,a5,128
     c7e:	fbf5                	bnez	a5,c72 <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     c80:	6785                	lui	a5,0x1
     c82:	a8578793          	addi	a5,a5,-1403 # a85 <i2c_write_raw.constprop.0+0x11d>
     c86:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     c88:	e0000737          	lui	a4,0xe0000
     c8c:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     c90:	0f470693          	addi	a3,a4,244
     c94:	0807f793          	andi	a5,a5,128
     c98:	fbf5                	bnez	a5,c8c <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     c9a:	aaaab7b7          	lui	a5,0xaaaab
     c9e:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     ca2:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     ca4:	a001                	j	ca4 <ADC1_2_IRQHandler+0x56>

00000ca6 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     ca6:	40021737          	lui	a4,0x40021
     caa:	471c                	lw	a5,8(a4)
     cac:	008006b7          	lui	a3,0x800
     cb0:	8fd5                	or	a5,a5,a3
     cb2:	c71c                	sw	a5,8(a4)

00000cb4 <strlen>:
{
     cb4:	87aa                	mv	a5,a0
	for (; *s; s++);
     cb6:	0007c703          	lbu	a4,0(a5)
     cba:	e701                	bnez	a4,cc2 <strlen+0xe>
}
     cbc:	40a78533          	sub	a0,a5,a0
     cc0:	8082                	ret
	for (; *s; s++);
     cc2:	0785                	addi	a5,a5,1
     cc4:	bfcd                	j	cb6 <strlen+0x2>

00000cc6 <mini_vpprintf>:
{
     cc6:	fa410113          	addi	sp,sp,-92
     cca:	c8a6                	sw	s1,80(sp)
     ccc:	cc86                	sw	ra,88(sp)
     cce:	caa2                	sw	s0,84(sp)
     cd0:	c02a                	sw	a0,0(sp)
     cd2:	c22e                	sw	a1,4(sp)
     cd4:	84b2                	mv	s1,a2
     cd6:	87b6                	mv	a5,a3
	int n = 0;
     cd8:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     cda:	0004c703          	lbu	a4,0(s1)
     cde:	00148413          	addi	s0,s1,1
     ce2:	00e10fa3          	sb	a4,31(sp)
     ce6:	eb01                	bnez	a4,cf6 <mini_vpprintf+0x30>
}
     ce8:	40e6                	lw	ra,88(sp)
     cea:	4456                	lw	s0,84(sp)
     cec:	4542                	lw	a0,16(sp)
     cee:	44c6                	lw	s1,80(sp)
     cf0:	05c10113          	addi	sp,sp,92
     cf4:	8082                	ret
		if (ch!='%') {
     cf6:	02500693          	li	a3,37
     cfa:	00d70f63          	beq	a4,a3,d18 <mini_vpprintf+0x52>
     cfe:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     d00:	4612                	lw	a2,4(sp)
     d02:	4782                	lw	a5,0(sp)
     d04:	4585                	li	a1,1
     d06:	01f10513          	addi	a0,sp,31
     d0a:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     d0c:	84a2                	mv	s1,s0
		n = n + len;
     d0e:	47c2                	lw	a5,16(sp)
     d10:	97aa                	add	a5,a5,a0
     d12:	c83e                	sw	a5,16(sp)
     d14:	47a2                	lw	a5,8(sp)
     d16:	b7d1                	j	cda <mini_vpprintf+0x14>
			ch=*(fmt++);
     d18:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     d1c:	03000613          	li	a2,48
			ch=*(fmt++);
     d20:	00248713          	addi	a4,s1,2
     d24:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     d28:	03000413          	li	s0,48
     d2c:	08c69063          	bne	a3,a2,dac <mini_vpprintf+0xe6>
				ch=*(fmt++);
     d30:	84ba                	mv	s1,a4
     d32:	4601                	li	a2,0
     d34:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     d36:	4525                	li	a0,9
     d38:	a811                	j	d4c <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     d3a:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     d3e:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     d40:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     d42:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     d46:	0706                	slli	a4,a4,0x1
     d48:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     d4a:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     d4c:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f6629>
     d50:	0ff5f313          	andi	t1,a1,255
     d54:	fe6573e3          	bgeu	a0,t1,d3a <mini_vpprintf+0x74>
     d58:	c219                	beqz	a2,d5e <mini_vpprintf+0x98>
     d5a:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     d5e:	c63a                	sw	a4,12(sp)
     d60:	4661                	li	a2,24
     d62:	00e65363          	bge	a2,a4,d68 <mini_vpprintf+0xa2>
     d66:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     d68:	06c00593          	li	a1,108
			char l = 0;
     d6c:	4601                	li	a2,0
			if (ch == 'l') {
     d6e:	00b69863          	bne	a3,a1,d7e <mini_vpprintf+0xb8>
				ch=*(fmt++);
     d72:	0004c683          	lbu	a3,0(s1)
				l = 1;
     d76:	4605                	li	a2,1
				ch=*(fmt++);
     d78:	0485                	addi	s1,s1,1
     d7a:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     d7e:	01f14683          	lbu	a3,31(sp)
     d82:	06400593          	li	a1,100
     d86:	06b68363          	beq	a3,a1,dec <mini_vpprintf+0x126>
     d8a:	02d5e463          	bltu	a1,a3,db2 <mini_vpprintf+0xec>
     d8e:	05800713          	li	a4,88
     d92:	0ae68263          	beq	a3,a4,e36 <mini_vpprintf+0x170>
     d96:	06300713          	li	a4,99
     d9a:	0ce68063          	beq	a3,a4,e5a <mini_vpprintf+0x194>
     d9e:	d6a9                	beqz	a3,ce8 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     da0:	4612                	lw	a2,4(sp)
     da2:	c43e                	sw	a5,8(sp)
     da4:	4585                	li	a1,1
     da6:	01f10513          	addi	a0,sp,31
     daa:	a88d                	j	e1c <mini_vpprintf+0x156>
			char pad_char = ' ';
     dac:	02000413          	li	s0,32
     db0:	b741                	j	d30 <mini_vpprintf+0x6a>
			switch (ch) {
     db2:	07500593          	li	a1,117
     db6:	02b68b63          	beq	a3,a1,dec <mini_vpprintf+0x126>
     dba:	07800613          	li	a2,120
     dbe:	06c68c63          	beq	a3,a2,e36 <mini_vpprintf+0x170>
     dc2:	07300613          	li	a2,115
     dc6:	fcc69de3          	bne	a3,a2,da0 <mini_vpprintf+0xda>
     dca:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     dcc:	00478713          	addi	a4,a5,4
     dd0:	439c                	lw	a5,0(a5)
     dd2:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     dd4:	853e                	mv	a0,a5
     dd6:	ca3e                	sw	a5,20(sp)
     dd8:	3df1                	jal	cb4 <strlen>
					if (pad_to > 0) {
     dda:	4762                	lw	a4,24(sp)
     ddc:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     dde:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     de0:	cb51                	beqz	a4,e74 <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     de2:	46b2                	lw	a3,12(sp)
     de4:	1838                	addi	a4,sp,56
     de6:	8622                	mv	a2,s0
     de8:	853e                	mv	a0,a5
     dea:	a025                	j	e12 <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     dec:	00478713          	addi	a4,a5,4
     df0:	c43a                	sw	a4,8(sp)
					if(l) {
     df2:	ca05                	beqz	a2,e22 <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     df4:	f8b68693          	addi	a3,a3,-117
     df8:	1018                	addi	a4,sp,32
     dfa:	0016b693          	seqz	a3,a3
     dfe:	4388                	lw	a0,0(a5)
     e00:	4601                	li	a2,0
     e02:	45a9                	li	a1,10
     e04:	c7eff0ef          	jal	ra,282 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     e08:	46b2                	lw	a3,12(sp)
     e0a:	1838                	addi	a4,sp,56
     e0c:	8622                	mv	a2,s0
     e0e:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     e10:	1008                	addi	a0,sp,32
     e12:	b24ff0ef          	jal	ra,136 <mini_pad>
					len = puts(bf, len, buf);
     e16:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     e18:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     e1a:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     e1c:	4782                	lw	a5,0(sp)
     e1e:	9782                	jalr	a5
					break;
     e20:	b5fd                	j	d0e <mini_vpprintf+0x48>
						if(ch == 'u') {
     e22:	07500713          	li	a4,117
     e26:	00e69563          	bne	a3,a4,e30 <mini_vpprintf+0x16a>
	if (radix > 16)
     e2a:	1018                	addi	a4,sp,32
     e2c:	4685                	li	a3,1
     e2e:	bfc1                	j	dfe <mini_vpprintf+0x138>
     e30:	1018                	addi	a4,sp,32
     e32:	4681                	li	a3,0
     e34:	b7e9                	j	dfe <mini_vpprintf+0x138>
					if(l) {
     e36:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     e38:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     e3c:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     e40:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     e42:	4685                	li	a3,1
     e44:	1018                	addi	a4,sp,32
     e46:	00163613          	seqz	a2,a2
     e4a:	45c1                	li	a1,16
     e4c:	c36ff0ef          	jal	ra,282 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     e50:	46b2                	lw	a3,12(sp)
     e52:	85aa                	mv	a1,a0
     e54:	1838                	addi	a4,sp,56
     e56:	8622                	mv	a2,s0
     e58:	bf65                	j	e10 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     e5a:	00478713          	addi	a4,a5,4
     e5e:	439c                	lw	a5,0(a5)
     e60:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     e62:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     e64:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     e68:	1838                	addi	a4,sp,56
     e6a:	8622                	mv	a2,s0
     e6c:	4585                	li	a1,1
     e6e:	01f10513          	addi	a0,sp,31
     e72:	b745                	j	e12 <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     e74:	4612                	lw	a2,4(sp)
     e76:	853e                	mv	a0,a5
     e78:	b755                	j	e1c <mini_vpprintf+0x156>

00000e7a <printf>:
{
     e7a:	fdc10113          	addi	sp,sp,-36
     e7e:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     e80:	862a                	mv	a2,a0
     e82:	6505                	lui	a0,0x1
{
     e84:	c82e                	sw	a1,16(sp)
     e86:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     e88:	4581                	li	a1,0
	va_start( args, format );
     e8a:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     e8c:	bc450513          	addi	a0,a0,-1084 # bc4 <__puts_uart>
{
     e90:	c606                	sw	ra,12(sp)
     e92:	ce3a                	sw	a4,28(sp)
     e94:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     e96:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     e98:	353d                	jal	cc6 <mini_vpprintf>
}
     e9a:	40b2                	lw	ra,12(sp)
     e9c:	02410113          	addi	sp,sp,36
     ea0:	8082                	ret

00000ea2 <check_fs>:
{
     ea2:	1141                	addi	sp,sp,-16
     ea4:	c422                	sw	s0,8(sp)
     ea6:	c226                	sw	s1,4(sp)
     ea8:	c606                	sw	ra,12(sp)
     eaa:	842a                	mv	s0,a0
     eac:	c02e                	sw	a1,0(sp)
	for (BYTE i=1; i<=retries; i++) {
     eae:	4485                	li	s1,1
		if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
     eb0:	4582                	lw	a1,0(sp)
     eb2:	4689                	li	a3,2
     eb4:	1fe00613          	li	a2,510
     eb8:	8522                	mv	a0,s0
     eba:	e4aff0ef          	jal	ra,504 <disk_readp>
     ebe:	c501                	beqz	a0,ec6 <check_fs+0x24>
			if (i == retries) return 3;
     ec0:	470d                	li	a4,3
     ec2:	08e48763          	beq	s1,a4,f50 <check_fs+0xae>
		WORD sig = ld_dword(buf);
     ec6:	8522                	mv	a0,s0
     ec8:	c78ff0ef          	jal	ra,340 <ld_dword>
		if (sig == 0xAA55 || sig == 0xBA55) {
     ecc:	777d                	lui	a4,0xfffff
     ece:	177d                	addi	a4,a4,-1
     ed0:	8f69                	and	a4,a4,a0
     ed2:	0742                	slli	a4,a4,0x10
     ed4:	66ad                	lui	a3,0xb
     ed6:	8341                	srli	a4,a4,0x10
     ed8:	a5568693          	addi	a3,a3,-1451 # aa55 <lib_i2c.c.d894f163+0x10ae>
     edc:	02d70163          	beq	a4,a3,efe <check_fs+0x5c>
			printf("check_fs_err: bad signature %08X\n\r", sig);
     ee0:	01051593          	slli	a1,a0,0x10
     ee4:	6789                	lui	a5,0x2
     ee6:	81c1                	srli	a1,a1,0x10
     ee8:	49878513          	addi	a0,a5,1176 # 2498 <I2C1_ER_IRQHandler+0x7e>
     eec:	3779                	jal	e7a <printf>
			if (i == retries) return 2;
     eee:	470d                	li	a4,3
     ef0:	06e48663          	beq	s1,a4,f5c <check_fs+0xba>
	for (BYTE i=1; i<=retries; i++) {
     ef4:	00148793          	addi	a5,s1,1
     ef8:	0ff7f493          	andi	s1,a5,255
     efc:	bf55                	j	eb0 <check_fs+0xe>
	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
     efe:	4582                	lw	a1,0(sp)
     f00:	4689                	li	a3,2
     f02:	03600613          	li	a2,54
     f06:	8522                	mv	a0,s0
     f08:	dfcff0ef          	jal	ra,504 <disk_readp>
     f0c:	ed09                	bnez	a0,f26 <check_fs+0x84>
     f0e:	00144703          	lbu	a4,1(s0)
     f12:	00044783          	lbu	a5,0(s0)
     f16:	6691                	lui	a3,0x4
     f18:	0722                	slli	a4,a4,0x8
     f1a:	8f5d                	or	a4,a4,a5
     f1c:	14668693          	addi	a3,a3,326 # 4146 <ch32fun.c.963ac852+0xb2f>
		return 0;
     f20:	4481                	li	s1,0
	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
     f22:	02d70763          	beq	a4,a3,f50 <check_fs+0xae>
	if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
     f26:	4582                	lw	a1,0(sp)
     f28:	4689                	li	a3,2
     f2a:	05200613          	li	a2,82
     f2e:	8522                	mv	a0,s0
     f30:	dd4ff0ef          	jal	ra,504 <disk_readp>
	return 1;
     f34:	4485                	li	s1,1
	if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
     f36:	ed09                	bnez	a0,f50 <check_fs+0xae>
     f38:	00144783          	lbu	a5,1(s0)
     f3c:	00044703          	lbu	a4,0(s0)
     f40:	07a2                	slli	a5,a5,0x8
     f42:	8fd9                	or	a5,a5,a4
     f44:	7771                	lui	a4,0xffffc
     f46:	eba70713          	addi	a4,a4,-326 # ffffbeba <_eusrstack+0xdfffb6ba>
     f4a:	97ba                	add	a5,a5,a4
			if (i == retries) return 3;
     f4c:	00f034b3          	snez	s1,a5
}
     f50:	40b2                	lw	ra,12(sp)
     f52:	4422                	lw	s0,8(sp)
     f54:	8526                	mv	a0,s1
     f56:	4492                	lw	s1,4(sp)
     f58:	0141                	addi	sp,sp,16
     f5a:	8082                	ret
			if (i == retries) return 2;
     f5c:	4489                	li	s1,2
     f5e:	bfcd                	j	f50 <check_fs+0xae>

00000f60 <onI2C_SlaveWrite>:
#include "../Mess-libs/sd_card/mod_sdCard.h"

#define BUTTON_PIN 		PD0

void onI2C_SlaveWrite(uint8_t reg, uint8_t length) {
	printf("IM WRITEEN TO\n\r");
     f60:	6509                	lui	a0,0x2
     f62:	4bc50513          	addi	a0,a0,1212 # 24bc <I2C1_ER_IRQHandler+0xa2>
     f66:	bf11                	j	e7a <printf>

00000f68 <onI2C_SlaveRead>:
}

void onI2C_SlaveRead(uint8_t reg) {
	printf("IM READEN FROM.\n\r");
     f68:	6509                	lui	a0,0x2
     f6a:	4cc50513          	addi	a0,a0,1228 # 24cc <I2C1_ER_IRQHandler+0xb2>
     f6e:	b731                	j	e7a <printf>

00000f70 <mini_vsnprintf>:
{
     f70:	1121                	addi	sp,sp,-24
     f72:	ca06                	sw	ra,20(sp)
     f74:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
     f76:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
     f78:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
     f7a:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
     f7c:	c185                	beqz	a1,f9c <mini_vsnprintf+0x2c>
     f7e:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
     f80:	858a                	mv	a1,sp
     f82:	e111                	bnez	a0,f86 <mini_vsnprintf+0x16>
     f84:	4581                	li	a1,0
     f86:	1d200513          	li	a0,466
     f8a:	3b35                	jal	cc6 <mini_vpprintf>
	if(buffer == (void*) 0) {
     f8c:	c401                	beqz	s0,f94 <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
     f8e:	4512                	lw	a0,4(sp)
     f90:	4782                	lw	a5,0(sp)
     f92:	8d1d                	sub	a0,a0,a5
}
     f94:	40d2                	lw	ra,20(sp)
     f96:	4442                	lw	s0,16(sp)
     f98:	0161                	addi	sp,sp,24
     f9a:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
     f9c:	4401                	li	s0,0
     f9e:	b7dd                	j	f84 <mini_vsnprintf+0x14>

00000fa0 <sprintf>:
{
     fa0:	1101                	addi	sp,sp,-32
     fa2:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fa4:	862e                	mv	a2,a1
     fa6:	800005b7          	lui	a1,0x80000
{
     faa:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fac:	fff5c593          	not	a1,a1
	va_start( args, format );
     fb0:	0814                	addi	a3,sp,16
{
     fb2:	c606                	sw	ra,12(sp)
     fb4:	cc3a                	sw	a4,24(sp)
     fb6:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
     fb8:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fba:	3f5d                	jal	f70 <mini_vsnprintf>
}
     fbc:	40b2                	lw	ra,12(sp)
     fbe:	6105                	addi	sp,sp,32
     fc0:	8082                	ret

00000fc2 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     fc2:	962a                	add	a2,a2,a0
     fc4:	87aa                	mv	a5,a0
     fc6:	00c79363          	bne	a5,a2,fcc <memset+0xa>
     fca:	8082                	ret
     fcc:	00b78023          	sb	a1,0(a5)
     fd0:	0785                	addi	a5,a5,1
     fd2:	bfd5                	j	fc6 <memset+0x4>

00000fd4 <strcpy>:
{
     fd4:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
     fd6:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
     fda:	00e78023          	sb	a4,0(a5)
     fde:	e311                	bnez	a4,fe2 <strcpy+0xe>
}
     fe0:	8082                	ret
	for (; (*d=*s); s++, d++);
     fe2:	0585                	addi	a1,a1,1
     fe4:	0785                	addi	a5,a5,1
     fe6:	bfc5                	j	fd6 <strcpy+0x2>

00000fe8 <memcpy>:
{
     fe8:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     fea:	00f61363          	bne	a2,a5,ff0 <memcpy+0x8>
}
     fee:	8082                	ret
	for (; n; n--) *d++ = *s++;
     ff0:	00f58733          	add	a4,a1,a5
     ff4:	00074683          	lbu	a3,0(a4)
     ff8:	00f50733          	add	a4,a0,a5
     ffc:	0785                	addi	a5,a5,1
     ffe:	00d70023          	sb	a3,0(a4)
    1002:	b7e5                	j	fea <memcpy+0x2>

00001004 <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1004:	7179                	addi	sp,sp,-48
    1006:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
    1008:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
    100c:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
    100e:	862e                	mv	a2,a1
    1010:	85aa                	mv	a1,a0
    1012:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1016:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    1018:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    101c:	37f1                	jal	fe8 <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    101e:	00140593          	addi	a1,s0,1
    1022:	850a                	mv	a0,sp
    1024:	945ff0ef          	jal	ra,968 <i2c_write_raw.constprop.0>
}
    1028:	50b2                	lw	ra,44(sp)
    102a:	5422                	lw	s0,40(sp)
    102c:	6145                	addi	sp,sp,48
    102e:	8082                	ret

00001030 <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
    1030:	1151                	addi	sp,sp,-12
    1032:	c222                	sw	s0,4(sp)
    1034:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1036:	02100513          	li	a0,33
void ssd1306_print_str_at(
    103a:	c406                	sw	ra,8(sp)
    103c:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    103e:	34bd                	jal	aac <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1040:	4501                	li	a0,0
    1042:	34ad                	jal	aac <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1044:	07f00513          	li	a0,127
    1048:	3495                	jal	aac <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    104a:	02200513          	li	a0,34
    104e:	3cb9                	jal	aac <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1050:	8522                	mv	a0,s0
    1052:	3ca9                	jal	aac <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1054:	8522                	mv	a0,s0
    1056:	3c99                	jal	aac <ssd1306_cmd>
    1058:	4465                	li	s0,25
    105a:	17018493          	addi	s1,gp,368 # 2000056c <str_output>
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i<25; i++) {
		if (*str) {
    105e:	0004c783          	lbu	a5,0(s1)
    1062:	c78d                	beqz	a5,108c <ssd1306_print_str_at.constprop.0+0x5c>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    1064:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    1066:	0ff7f793          	andi	a5,a5,255
    106a:	6709                	lui	a4,0x2
    106c:	00279693          	slli	a3,a5,0x2
    1070:	69c70513          	addi	a0,a4,1692 # 269c <FONT_7x5>
    1074:	97b6                	add	a5,a5,a3
    1076:	4595                	li	a1,5
    1078:	953e                	add	a0,a0,a5
    107a:	3769                	jal	1004 <ssd1306_data.isra.0>
			str++;
    107c:	0485                	addi	s1,s1,1
	for (int i=0; i<25; i++) {
    107e:	147d                	addi	s0,s0,-1
    1080:	fc79                	bnez	s0,105e <ssd1306_print_str_at.constprop.0+0x2e>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
    1082:	40a2                	lw	ra,8(sp)
    1084:	4412                	lw	s0,4(sp)
    1086:	4482                	lw	s1,0(sp)
    1088:	0131                	addi	sp,sp,12
    108a:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    108c:	6789                	lui	a5,0x2
    108e:	4595                	li	a1,5
    1090:	69c78513          	addi	a0,a5,1692 # 269c <FONT_7x5>
    1094:	3f85                	jal	1004 <ssd1306_data.isra.0>
    1096:	b7e5                	j	107e <ssd1306_print_str_at.constprop.0+0x4e>

00001098 <modI2C_task>:

	// i2c_device_tests();
	// test_v003Slave();
}

void modI2C_task(uint32_t counter) {
    1098:	862a                	mv	a2,a0
	sprintf(str_output, "counter %lu", counter);
    109a:	6589                	lui	a1,0x2
void modI2C_task(uint32_t counter) {
    109c:	1151                	addi	sp,sp,-12
	sprintf(str_output, "counter %lu", counter);
    109e:	4e058593          	addi	a1,a1,1248 # 24e0 <I2C1_ER_IRQHandler+0xc6>
    10a2:	17018513          	addi	a0,gp,368 # 2000056c <str_output>
void modI2C_task(uint32_t counter) {
    10a6:	c406                	sw	ra,8(sp)
	sprintf(str_output, "counter %lu", counter);
    10a8:	3de5                	jal	fa0 <sprintf>
	if (i2c_ping(0x3C) != I2C_OK) return;
    10aa:	03c00513          	li	a0,60
    10ae:	ed8ff0ef          	jal	ra,786 <i2c_ping>
    10b2:	e509                	bnez	a0,10bc <modI2C_task+0x24>
	modI2C_display(str_output, 7);
    10b4:	40a2                	lw	ra,8(sp)
	ssd1306_print_str_at(str, line, 0);
    10b6:	451d                	li	a0,7
    10b8:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    10ba:	bf9d                	j	1030 <ssd1306_print_str_at.constprop.0>
    10bc:	40a2                	lw	ra,8(sp)
    10be:	0131                	addi	sp,sp,12
    10c0:	8082                	ret

000010c2 <puts>:
{
    10c2:	1151                	addi	sp,sp,-12
    10c4:	c406                	sw	ra,8(sp)
    10c6:	c222                	sw	s0,4(sp)
    10c8:	c026                	sw	s1,0(sp)
    10ca:	84aa                	mv	s1,a0
	int sl = strlen( s );
    10cc:	36e5                	jal	cb4 <strlen>
    10ce:	842a                	mv	s0,a0
	_write(0, s, sl );
    10d0:	85aa                	mv	a1,a0
    10d2:	8526                	mv	a0,s1
    10d4:	9ffff0ef          	jal	ra,ad2 <_write.constprop.0>
	_write(0, "\n", 1 );
    10d8:	6509                	lui	a0,0x2
    10da:	4585                	li	a1,1
    10dc:	4ec50513          	addi	a0,a0,1260 # 24ec <I2C1_ER_IRQHandler+0xd2>
    10e0:	9f3ff0ef          	jal	ra,ad2 <_write.constprop.0>
}
    10e4:	40a2                	lw	ra,8(sp)
    10e6:	00140513          	addi	a0,s0,1
    10ea:	4412                	lw	s0,4(sp)
    10ec:	4482                	lw	s1,0(sp)
    10ee:	0131                	addi	sp,sp,12
    10f0:	8082                	ret

000010f2 <i2c_scan_callback>:
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    10f2:	c539                	beqz	a0,1140 <i2c_scan_callback+0x4e>
    10f4:	07f00793          	li	a5,127
    10f8:	862a                	mv	a2,a0
    10fa:	04f50363          	beq	a0,a5,1140 <i2c_scan_callback+0x4e>
void i2c_scan_callback(const uint8_t addr) {
    10fe:	1151                	addi	sp,sp,-12
    1100:	c222                	sw	s0,4(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    1102:	6589                	lui	a1,0x2
    1104:	4f058593          	addi	a1,a1,1264 # 24f0 <I2C1_ER_IRQHandler+0xd6>
    1108:	17018513          	addi	a0,gp,368 # 2000056c <str_output>
void i2c_scan_callback(const uint8_t addr) {
    110c:	c406                	sw	ra,8(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    110e:	3d49                	jal	fa0 <sprintf>
	printf("%s\n", str_output);
    1110:	17018513          	addi	a0,gp,368 # 2000056c <str_output>
    1114:	377d                	jal	10c2 <puts>
	modI2C_display(str_output, line++);
    1116:	c3c18793          	addi	a5,gp,-964 # 20000038 <line.7>
    111a:	4380                	lw	s0,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    111c:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
    1120:	00140713          	addi	a4,s0,1
    1124:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1126:	e60ff0ef          	jal	ra,786 <i2c_ping>
    112a:	e519                	bnez	a0,1138 <i2c_scan_callback+0x46>
	ssd1306_print_str_at(str, line, 0);
    112c:	0ff47513          	andi	a0,s0,255
}
    1130:	4412                	lw	s0,4(sp)
    1132:	40a2                	lw	ra,8(sp)
    1134:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    1136:	bded                	j	1030 <ssd1306_print_str_at.constprop.0>
}
    1138:	40a2                	lw	ra,8(sp)
    113a:	4412                	lw	s0,4(sp)
    113c:	0131                	addi	sp,sp,12
    113e:	8082                	ret
    1140:	8082                	ret

00001142 <putchar>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1142:	e00007b7          	lui	a5,0xe0000
    1146:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
    114a:	0c000713          	li	a4,192
    114e:	0c07f793          	andi	a5,a5,192
    1152:	04e78d63          	beq	a5,a4,11ac <putchar+0x6a>
{
    1156:	1151                	addi	sp,sp,-12
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1158:	001007b7          	lui	a5,0x100
{
    115c:	c222                	sw	s0,4(sp)
    115e:	c406                	sw	ra,8(sp)
    1160:	842a                	mv	s0,a0
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1162:	0785                	addi	a5,a5,1
	while( ( lastdmd = (*DMDATA0) ) & 0x80 )
    1164:	e00006b7          	lui	a3,0xe0000
    1168:	0f46a703          	lw	a4,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
    116c:	0f468613          	addi	a2,a3,244
    1170:	08077593          	andi	a1,a4,128
    1174:	e18d                	bnez	a1,1196 <putchar+0x54>
	if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
    1176:	c319                	beqz	a4,117c <putchar+0x3a>
    1178:	951ff0ef          	jal	ra,ac8 <internal_handle_input.constprop.0>
	*DMDATA0 = 0x85 | ((const char)c<<8);
    117c:	6541                	lui	a0,0x10
    117e:	157d                	addi	a0,a0,-1
    1180:	00841793          	slli	a5,s0,0x8
    1184:	8fe9                	and	a5,a5,a0
    1186:	0857e793          	ori	a5,a5,133
    118a:	e0000737          	lui	a4,0xe0000
    118e:	0ef72a23          	sw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
	return 1;
    1192:	4505                	li	a0,1
    1194:	a801                	j	11a4 <putchar+0x62>
		if( timeout-- == 0 )
    1196:	17fd                	addi	a5,a5,-1
    1198:	fbe1                	bnez	a5,1168 <putchar+0x26>
			*DMDATA0 |= 0xc0;
    119a:	421c                	lw	a5,0(a2)
    119c:	4501                	li	a0,0
    119e:	0c07e793          	ori	a5,a5,192
    11a2:	c21c                	sw	a5,0(a2)
}
    11a4:	40a2                	lw	ra,8(sp)
    11a6:	4412                	lw	s0,4(sp)
    11a8:	0131                	addi	sp,sp,12
    11aa:	8082                	ret
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    11ac:	4501                	li	a0,0
}
    11ae:	8082                	ret

000011b0 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    11b0:	400227b7          	lui	a5,0x40022
    11b4:	4705                	li	a4,1
    11b6:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    11b8:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    11bc:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    11c0:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    11c4:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x10766da>
    11c8:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    11ca:	009f0737          	lui	a4,0x9f0
    11ce:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    11d0:	020006b7          	lui	a3,0x2000
    11d4:	40021737          	lui	a4,0x40021
    11d8:	431c                	lw	a5,0(a4)
    11da:	8ff5                	and	a5,a5,a3
    11dc:	dff5                	beqz	a5,11d8 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    11de:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    11e0:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    11e4:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    11e6:	0027e793          	ori	a5,a5,2
    11ea:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    11ec:	4721                	li	a4,8
    11ee:	42dc                	lw	a5,4(a3)
    11f0:	8bb1                	andi	a5,a5,12
    11f2:	fee79ee3          	bne	a5,a4,11ee <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    11f6:	e00007b7          	lui	a5,0xe0000
    11fa:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    11fe:	08000713          	li	a4,128
    1202:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    1206:	8082                	ret

00001208 <main>:

void encoder_onChanged(Encoder_t *model) {
	printf("Encoder: %d\n", model->last_count);
}

int main() {
    1208:	f6810113          	addi	sp,sp,-152
    120c:	cb06                	sw	ra,148(sp)
    120e:	c922                	sw	s0,144(sp)
    1210:	c726                	sw	s1,140(sp)
	uint32_t sec_time = 0;
	uint32_t time_ref = 0;

	Encoder_t encoder_a = {0, 0, 0};

	SystemInit();
    1212:	3f79                	jal	11b0 <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    1214:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1218:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    121a:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    121e:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x21d8>
    1222:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    1224:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    1228:	cb018413          	addi	s0,gp,-848 # 200000ac <systick_millis>
    122c:	00042023          	sw	zero,0(s0)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    1230:	4398                	lw	a4,0(a5)
	systick_init();			//! required for millis()

	funGpioInitAll();
	Delay_Ms(100);
    1232:	00494537          	lui	a0,0x494
    1236:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.d894f163+0x48a459>
    123a:	00776713          	ori	a4,a4,7
    123e:	c398                	sw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1240:	e000e7b7          	lui	a5,0xe000e
    1244:	6705                	lui	a4,0x1
    1246:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>
	funGpioInitAll();
    124a:	40021737          	lui	a4,0x40021
    124e:	4f1c                	lw	a5,24(a4)
    1250:	0357e793          	ori	a5,a5,53
    1254:	cf1c                	sw	a5,24(a4)
	Delay_Ms(100);
    1256:	816ff0ef          	jal	ra,26c <DelaySysTick>
    }

    void button_setup(Button_t *model) {
    if (model->pin == 0xFF) return; 

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
    125a:	40011737          	lui	a4,0x40011
    125e:	40072783          	lw	a5,1024(a4) # 40011400 <_eusrstack+0x20010c00>
    1262:	40070693          	addi	a3,a4,1024
    1266:	cb018613          	addi	a2,gp,-848 # 200000ac <systick_millis>
    126a:	9bc1                	andi	a5,a5,-16
    126c:	0087e793          	ori	a5,a5,8
    1270:	40f72023          	sw	a5,1024(a4)
    funDigitalWrite(model->pin, 1);
    1274:	4785                	li	a5,1
    1276:	ca9c                	sw	a5,16(a3)
    model->debounce_time = millis();
    1278:	4018                	lw	a4,0(s0)
	if(dev->regb == 0) dev->regb = 1;
    127a:	c432                	sw	a2,8(sp)
    127c:	c03a                	sw	a4,0(sp)
    model->release_time = millis();
    127e:	4018                	lw	a4,0(s0)
    1280:	c63a                	sw	a4,12(sp)
    1282:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_aht21>
    1286:	00a74703          	lbu	a4,10(a4)
    128a:	c0418693          	addi	a3,gp,-1020 # 20000000 <dev_aht21>
    128e:	e701                	bnez	a4,1296 <main+0x8e>
	if(dev->regb  > 4) dev->regb = 4;
    1290:	00f68523          	sb	a5,10(a3) # 4002100a <_eusrstack+0x2002080a>
    1294:	a021                	j	129c <main+0x94>
    1296:	4791                	li	a5,4
    1298:	fee7ece3          	bltu	a5,a4,1290 <main+0x88>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    129c:	400217b7          	lui	a5,0x40021
    12a0:	4b90                	lw	a2,16(a5)
    12a2:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    12a6:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    12aa:	8e49                	or	a2,a2,a0
    12ac:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    12ae:	4b90                	lw	a2,16(a5)
    12b0:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    12b2:	6405                	lui	s0,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    12b4:	8e6d                	and	a2,a2,a1
    12b6:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    12b8:	4fd8                	lw	a4,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    12ba:	fbc00637          	lui	a2,0xfbc00
    12be:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    12c0:	8f49                	or	a4,a4,a0
    12c2:	cfd8                	sw	a4,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    12c4:	4f98                	lw	a4,24(a5)
    12c6:	01176713          	ori	a4,a4,17
    12ca:	cf98                	sw	a4,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    12cc:	400107b7          	lui	a5,0x40010
    12d0:	43d8                	lw	a4,4(a5)
    12d2:	8f71                	and	a4,a4,a2
    12d4:	c3d8                	sw	a4,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    12d6:	43d8                	lw	a4,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    12d8:	767d                	lui	a2,0xfffff
    12da:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    12de:	c3d8                	sw	a4,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    12e0:	400117b7          	lui	a5,0x40011
    12e4:	4398                	lw	a4,0(a5)
    12e6:	f0f77713          	andi	a4,a4,-241
    12ea:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    12ec:	4398                	lw	a4,0(a5)
    12ee:	0d076713          	ori	a4,a4,208
    12f2:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    12f4:	4398                	lw	a4,0(a5)
    12f6:	8f71                	and	a4,a4,a2
    12f8:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    12fa:	4398                	lw	a4,0(a5)
    12fc:	d0040613          	addi	a2,s0,-768 # d00 <mini_vpprintf+0x3a>
    1300:	8f51                	or	a4,a4,a2
    1302:	c398                	sw	a4,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    1304:	40005737          	lui	a4,0x40005
    1308:	40475783          	lhu	a5,1028(a4) # 40005404 <_eusrstack+0x20004c04>
    130c:	07c2                	slli	a5,a5,0x10
    130e:	83c1                	srli	a5,a5,0x10
    1310:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    1314:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    1318:	40f71223          	sh	a5,1028(a4)
	if(dev->clkr <= 100000)
    131c:	429c                	lw	a5,0(a3)
    131e:	6761                	lui	a4,0x18
    1320:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.d894f163+0xecf9>
    1324:	00179593          	slli	a1,a5,0x1
    1328:	2cf76863          	bltu	a4,a5,15f8 <main+0x3f0>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    132c:	02dc7537          	lui	a0,0x2dc7
    1330:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbd259>
    1334:	d8dfe0ef          	jal	ra,c0 <__hidden___udivsi3>
    1338:	147d                	addi	s0,s0,-1
    133a:	8d61                	and	a0,a0,s0
    133c:	0542                	slli	a0,a0,0x10
    133e:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    1340:	40005737          	lui	a4,0x40005
    1344:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    1348:	40075783          	lhu	a5,1024(a4)
    134c:	07c2                	slli	a5,a5,0x10
    134e:	83c1                	srli	a5,a5,0x10
    1350:	0017e793          	ori	a5,a5,1
    1354:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    1358:	b30ff0ef          	jal	ra,688 <i2c_error>
	if(i2c_init(&dev_aht21) != I2C_OK) {
    135c:	2a050c63          	beqz	a0,1614 <main+0x40c>
		printf("Failed to init I2C\n");
    1360:	6509                	lui	a0,0x2
    1362:	50c50513          	addi	a0,a0,1292 # 250c <I2C1_ER_IRQHandler+0xf2>
    1366:	3bb1                	jal	10c2 <puts>
	button_setup(&button1);

	//# I2C1: uses PC1 & PC2
	modI2C_setup();

	uint8_t slave_mode = funDigitalRead(BUTTON_PIN);
    1368:	400117b7          	lui	a5,0x40011
    136c:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    1370:	479c                	lw	a5,8(a5)
    1372:	8b85                	andi	a5,a5,1
    1374:	ce3e                	sw	a5,28(sp)
	if (slave_mode == 0) {
    1376:	10079063          	bnez	a5,1476 <main+0x26e>
		printf("I2C Slave mode\n");
    137a:	6509                	lui	a0,0x2
    137c:	56850513          	addi	a0,a0,1384 # 2568 <I2C1_ER_IRQHandler+0x14e>
    1380:	3389                	jal	10c2 <puts>
} i2c_slave_state;

void SetupI2CSlave(uint8_t address, volatile uint8_t* registers, uint8_t size,
    i2c_write_callback_t write_callback, i2c_read_callback_t read_callback, bool read_only
) {
    i2c_slave_state.first_write = 1;
    1382:	14418793          	addi	a5,gp,324 # 20000540 <i2c_slave_state>
    1386:	4705                	li	a4,1
    1388:	00e79023          	sh	a4,0(a5)
    i2c_slave_state.offset = 0;
    i2c_slave_state.position = 0;
    i2c_slave_state.registers1 = registers;
    138c:	c1c18713          	addi	a4,gp,-996 # 20000018 <i2c_registers>
    1390:	c3d8                	sw	a4,4(a5)
    i2c_slave_state.size1 = size;
    i2c_slave_state.registers2 = NULL;
    i2c_slave_state.size2 = 0;
    i2c_slave_state.write_callback1 = write_callback;
    1392:	6705                	lui	a4,0x1
    1394:	f6070713          	addi	a4,a4,-160 # f60 <onI2C_SlaveWrite>
    1398:	cbd8                	sw	a4,20(a5)
    i2c_slave_state.read_callback1 = read_callback;
    139a:	6705                	lui	a4,0x1
    i2c_slave_state.size1 = size;
    139c:	02000613          	li	a2,32
    i2c_slave_state.read_callback1 = read_callback;
    13a0:	f6870713          	addi	a4,a4,-152 # f68 <onI2C_SlaveRead>
    i2c_slave_state.registers2 = NULL;
    13a4:	0007a623          	sw	zero,12(a5)
    i2c_slave_state.size2 = 0;
    13a8:	00078823          	sb	zero,16(a5)
    i2c_slave_state.read_only1 = read_only;
    13ac:	00078e23          	sb	zero,28(a5)
    i2c_slave_state.read_callback1 = read_callback;
    13b0:	cf98                	sw	a4,24(a5)
    i2c_slave_state.position = 0;
    13b2:	00078123          	sb	zero,2(a5)
    i2c_slave_state.size1 = size;
    13b6:	00c78423          	sb	a2,8(a5)
    i2c_slave_state.write_callback2 = NULL;
    13ba:	0207a023          	sw	zero,32(a5)
    i2c_slave_state.read_callback2 = NULL;
    13be:	0207a223          	sw	zero,36(a5)
    i2c_slave_state.read_only2 = false;
    13c2:	02078423          	sb	zero,40(a5)

    // Enable I2C1
    RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    13c6:	400217b7          	lui	a5,0x40021
    13ca:	4fd4                	lw	a3,28(a5)
    13cc:	002005b7          	lui	a1,0x200
    13d0:	8ecd                	or	a3,a3,a1
    13d2:	cfd4                	sw	a3,28(a5)

    // Reset I2C1 to init all regs
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
    13d4:	4b98                	lw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    13d6:	ffe006b7          	lui	a3,0xffe00
    13da:	16fd                	addi	a3,a3,-1
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
    13dc:	8f4d                	or	a4,a4,a1
    13de:	cb98                	sw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    13e0:	4b98                	lw	a4,16(a5)

    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
    13e2:	65a1                	lui	a1,0x8
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    13e4:	8f75                	and	a4,a4,a3
    13e6:	cb98                	sw	a4,16(a5)
    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
    13e8:	400057b7          	lui	a5,0x40005
    13ec:	4007d683          	lhu	a3,1024(a5) # 40005400 <_eusrstack+0x20004c00>
    13f0:	06c2                	slli	a3,a3,0x10
    13f2:	82c1                	srli	a3,a3,0x10
    13f4:	8ecd                	or	a3,a3,a1
    13f6:	40d79023          	sh	a3,1024(a5)
    I2C1->CTLR1 &= ~I2C_CTLR1_SWRST;
    13fa:	4007d683          	lhu	a3,1024(a5)
    13fe:	400005b7          	lui	a1,0x40000
    1402:	06c6                	slli	a3,a3,0x11
    1404:	82c5                	srli	a3,a3,0x11
    1406:	40d79023          	sh	a3,1024(a5)

    // Set module clock frequency
    uint32_t prerate = 2000000; // I2C Logic clock rate, must be higher than the bus clock rate
    I2C1->CTLR2 |= (FUNCONF_SYSTEM_CORE_CLOCK/prerate) & I2C_CTLR2_FREQ;
    140a:	4047d683          	lhu	a3,1028(a5)
    140e:	06c2                	slli	a3,a3,0x10
    1410:	82c1                	srli	a3,a3,0x10
    1412:	0186e693          	ori	a3,a3,24
    1416:	40d79223          	sh	a3,1028(a5)

    // Enable interrupts
    I2C1->CTLR2 |= I2C_CTLR2_ITBUFEN | I2C_CTLR2_ITEVTEN | I2C_CTLR2_ITERREN;
    141a:	4047d683          	lhu	a3,1028(a5)
    141e:	06c2                	slli	a3,a3,0x10
    1420:	82c1                	srli	a3,a3,0x10
    1422:	7006e693          	ori	a3,a3,1792
    1426:	40d79223          	sh	a3,1028(a5)
    142a:	e000e6b7          	lui	a3,0xe000e
    142e:	10b6a023          	sw	a1,256(a3) # e000e100 <_eusrstack+0xc000d900>
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    1432:	40c68f23          	sb	a2,1054(a3)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1436:	800005b7          	lui	a1,0x80000
    143a:	10b6a023          	sw	a1,256(a3)
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    143e:	40c68fa3          	sb	a2,1055(a3)
    NVIC_EnableIRQ(I2C1_ER_IRQn); // Error interrupt
    NVIC_SetPriority(I2C1_ER_IRQn, 2 << 4);

    // Set clock configuration
    uint32_t clockrate = 1000000; // I2C Bus clock rate, must be lower than the logic clock rate
    I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(3*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_FS; // Fast mode 33% duty cycle
    1442:	76e1                	lui	a3,0xffff8
    1444:	06c1                	addi	a3,a3,16
    1446:	40d79e23          	sh	a3,1052(a5)
    //I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(25*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_DUTY | I2C_CKCFGR_FS; // Fast mode 36% duty cycle
    //I2C1->CKCFGR = (FUNCONF_SYSTEM_CORE_CLOCK/(2*clockrate))&I2C_CKCFGR_CCR; // Standard mode good to 100kHz

    // Set I2C address
    I2C1->OADDR1 = address << 1;
    144a:	0ee00693          	li	a3,238
    144e:	40d79423          	sh	a3,1032(a5)
    I2C1->OADDR2 = 0;
    1452:	40079623          	sh	zero,1036(a5)

    // Enable I2C
    I2C1->CTLR1 |= I2C_CTLR1_PE;
    1456:	4007d703          	lhu	a4,1024(a5)
    145a:	0742                	slli	a4,a4,0x10
    145c:	8341                	srli	a4,a4,0x10
    145e:	00176713          	ori	a4,a4,1
    1462:	40e79023          	sh	a4,1024(a5)

    // Acknowledge bytes when they are received
    I2C1->CTLR1 |= I2C_CTLR1_ACK;
    1466:	4007d703          	lhu	a4,1024(a5)
    146a:	0742                	slli	a4,a4,0x10
    146c:	8341                	srli	a4,a4,0x10
    146e:	40076713          	ori	a4,a4,1024
    1472:	40e79023          	sh	a4,1024(a5)
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    1476:	400214b7          	lui	s1,0x40021
    147a:	4c9c                	lw	a5,24(s1)
    147c:	6705                	lui	a4,0x1
    147e:	0741                	addi	a4,a4,16
    1480:	8fd9                	or	a5,a5,a4
    SPI1->CTLR1 = 0;
    1482:	40013437          	lui	s0,0x40013
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    1486:	cc9c                	sw	a5,24(s1)
    SPI1->CTLR1 = 0;
    1488:	00041023          	sh	zero,0(s0) # 40013000 <_eusrstack+0x20012800>
    SPI_set_prescaler(0);
    148c:	4501                	li	a0,0
    148e:	f75fe0ef          	jal	ra,402 <SPI_set_prescaler>
    SPI1->CTLR1 |= (SPI_CPOL_Low | SPI_CPHA_1Edge);
    1492:	00045783          	lhu	a5,0(s0)
    GPIOC->CFGLR &= ~(0xf << (4 * 5));
    1496:	ff100737          	lui	a4,0xff100
    149a:	fff70613          	addi	a2,a4,-1 # ff0fffff <_eusrstack+0xdf0ff7ff>
    SPI1->CTLR1 |= (SPI_CPOL_Low | SPI_CPHA_1Edge);
    149e:	07c2                	slli	a5,a5,0x10
    14a0:	83c1                	srli	a5,a5,0x10
    14a2:	00f41023          	sh	a5,0(s0)
    SPI1->CTLR1 |= SPI_NSS_Soft; // SSM NSS software control mode
    14a6:	00045783          	lhu	a5,0(s0)
FATFS fatfs; /* File system object */
UINT br;
FRESULT rc;

FRESULT mod_sdCard_write(const char filename[], const char data[]) {
	printf("\nMounting volume.\n\r");
    14aa:	6509                	lui	a0,0x2
    14ac:	57850513          	addi	a0,a0,1400 # 2578 <I2C1_ER_IRQHandler+0x15e>
    14b0:	07c2                	slli	a5,a5,0x10
    14b2:	83c1                	srli	a5,a5,0x10
    14b4:	2007e793          	ori	a5,a5,512
    14b8:	00f41023          	sh	a5,0(s0)
    GPIOC->CFGLR &= ~(0xf << (4 * 5));
    14bc:	400117b7          	lui	a5,0x40011
    14c0:	4394                	lw	a3,0(a5)
    14c2:	00c6f733          	and	a4,a3,a2
    14c6:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR |= (GPIO_Speed_50MHz | GPIO_CNF_OUT_PP_AF) << (4 * 5);
    14c8:	4398                	lw	a4,0(a5)
    14ca:	00b006b7          	lui	a3,0xb00
    14ce:	8f55                	or	a4,a4,a3
    14d0:	c398                	sw	a4,0(a5)
    SPI1->CTLR1 |= SPI_Mode_Master;
    14d2:	00045703          	lhu	a4,0(s0)
    GPIOC->CFGLR &= ~(0xf << (4 * 6));
    14d6:	f10006b7          	lui	a3,0xf1000
    14da:	16fd                	addi	a3,a3,-1
    SPI1->CTLR1 |= SPI_Mode_Master;
    14dc:	0742                	slli	a4,a4,0x10
    14de:	8341                	srli	a4,a4,0x10
    14e0:	10476713          	ori	a4,a4,260
    14e4:	00e41023          	sh	a4,0(s0)
    SPI1->CTLR1 |= SPI_Direction_2Lines_FullDuplex;
    14e8:	00045703          	lhu	a4,0(s0)
    14ec:	0742                	slli	a4,a4,0x10
    14ee:	8341                	srli	a4,a4,0x10
    14f0:	00e41023          	sh	a4,0(s0)
    GPIOC->CFGLR &= ~(0xf << (4 * 6));
    14f4:	4398                	lw	a4,0(a5)
    14f6:	8f75                	and	a4,a4,a3
    14f8:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR |= (GPIO_Speed_50MHz | GPIO_CNF_OUT_PP_AF) << (4 * 6);
    14fa:	4398                	lw	a4,0(a5)
    14fc:	0b0006b7          	lui	a3,0xb000
    1500:	8f55                	or	a4,a4,a3
    1502:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR &= ~(0xf << (4 * 7));
    1504:	4398                	lw	a4,0(a5)
    GPIOC->CFGLR |= GPIO_CNF_IN_FLOATING << (4 * 7);
    1506:	400006b7          	lui	a3,0x40000
    GPIOC->CFGLR &= ~(0xf << (4 * 7));
    150a:	0712                	slli	a4,a4,0x4
    150c:	8311                	srli	a4,a4,0x4
    150e:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR |= GPIO_CNF_IN_FLOATING << (4 * 7);
    1510:	4398                	lw	a4,0(a5)
    1512:	8f55                	or	a4,a4,a3
    1514:	c398                	sw	a4,0(a5)
	SPI1->CTLR1 &= ~(SPI_CTLR1_DFF); // DFF 16bit data-length enable, writable only when SPE is 0
    1516:	00045683          	lhu	a3,0(s0)
    151a:	777d                	lui	a4,0xfffff
    151c:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_eusrstack+0xdfffefff>
    1520:	06c2                	slli	a3,a3,0x10
    1522:	82c1                	srli	a3,a3,0x10
    1524:	8ef9                	and	a3,a3,a4
    1526:	00d41023          	sh	a3,0(s0)
    SPI1->CTLR1 |= SPI_CTLR1_SPE;
    152a:	00045683          	lhu	a3,0(s0)
    152e:	06c2                	slli	a3,a3,0x10
    1530:	82c1                	srli	a3,a3,0x10
    1532:	0406e693          	ori	a3,a3,64
    1536:	00d41023          	sh	a3,0(s0)
}

static void uart_setup(void)
{
	// Enable UART and GPIOD
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_USART1;
    153a:	4c98                	lw	a4,24(s1)
    153c:	6691                	lui	a3,0x4
    153e:	02068693          	addi	a3,a3,32 # 4020 <ch32fun.c.963ac852+0xa09>
    1542:	8f55                	or	a4,a4,a3
    1544:	cc98                	sw	a4,24(s1)

	// Push-Pull, 10MHz Output on D5, with AutoFunction
	GPIOD->CFGLR = (GPIOD->CFGLR & ~(0xF<<(4*5))) |
    1546:	4007a703          	lw	a4,1024(a5) # 40011400 <_eusrstack+0x20010c00>
    154a:	009006b7          	lui	a3,0x900
    154e:	8f71                	and	a4,a4,a2
    1550:	8f55                	or	a4,a4,a3
    1552:	40e7a023          	sw	a4,1024(a5)
			((GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*5));

	// Setup UART for Tx 8n1
	USART1->CTLR1 = USART_WordLength_8b | USART_Parity_No | USART_Mode_Tx;
    1556:	40014737          	lui	a4,0x40014
    155a:	80070793          	addi	a5,a4,-2048 # 40013800 <_eusrstack+0x20013000>
    155e:	46a1                	li	a3,8
    1560:	c7d4                	sw	a3,12(a5)
	USART1->CTLR2 = USART_StopBits_1;
    1562:	0007a823          	sw	zero,16(a5)
	// Enable Tx DMA event
	USART1->CTLR3 = USART_DMAReq_Tx;
    1566:	08000693          	li	a3,128
    156a:	cbd4                	sw	a3,20(a5)

	// Set baud rate and enable UART
	USART1->BRR = ((FUNCONF_SYSTEM_CORE_CLOCK) + (UART_BR)/2) / (UART_BR);
    156c:	1a100693          	li	a3,417
    1570:	c794                	sw	a3,8(a5)
	USART1->CTLR1 |= CTLR1_UE_Set;
    1572:	47d4                	lw	a3,12(a5)
    1574:	6609                	lui	a2,0x2

	// Disable channel just in case there is a transfer in progress
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;

	// USART1 TX uses DMA channel 4
	DMA1_Channel4->PADDR = (uint32_t)&USART1->DATAR;
    1576:	80470713          	addi	a4,a4,-2044
	USART1->CTLR1 |= CTLR1_UE_Set;
    157a:	8ed1                	or	a3,a3,a2
    157c:	c7d4                	sw	a3,12(a5)
	RCC->AHBPCENR = RCC_AHBPeriph_SRAM | RCC_AHBPeriph_DMA1;
    157e:	4795                	li	a5,5
    1580:	c8dc                	sw	a5,20(s1)
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
    1582:	400207b7          	lui	a5,0x40020
    1586:	43f4                	lw	a3,68(a5)
    1588:	9af9                	andi	a3,a3,-2
    158a:	c3f4                	sw	a3,68(a5)
	DMA1_Channel4->PADDR = (uint32_t)&USART1->DATAR;
    158c:	c7f8                	sw	a4,76(a5)
	// DIR: 1 (read from memory)
	// TEIE: 0 (no tx error interrupt)
	// HTIE: 0 (no half tx interrupt)
	// TCIE: 1 (transmission complete interrupt enable)
	// EN: 0 (do not enable DMA yet)
	DMA1_Channel4->CFGR = DMA_CFGR1_MINC | DMA_CFGR1_DIR | DMA_CFGR1_TCIE;
    158e:	09200713          	li	a4,146
    1592:	c3f8                	sw	a4,68(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1594:	e000e7b7          	lui	a5,0xe000e
    1598:	02000737          	lui	a4,0x2000
    159c:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>
    15a0:	8dbff0ef          	jal	ra,e7a <printf>
	SPI_set_prescaler(7);
    15a4:	451d                	li	a0,7
	FatFs = 0;
    15a6:	c801a623          	sw	zero,-884(gp) # 20000088 <FatFs>
    15aa:	e59fe0ef          	jal	ra,402 <SPI_set_prescaler>
	skip_mmc(10);			/* Dummy clocks */
    15ae:	4529                	li	a0,10
    15b0:	eaffe0ef          	jal	ra,45e <skip_mmc>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    15b4:	4581                	li	a1,0
    15b6:	04000513          	li	a0,64
    15ba:	ebffe0ef          	jal	ra,478 <send_cmd>
    15be:	c8c18713          	addi	a4,gp,-884 # 20000088 <FatFs>
    15c2:	4785                	li	a5,1
    15c4:	c83a                	sw	a4,16(sp)
    15c6:	842a                	mv	s0,a0
    15c8:	16f50563          	beq	a0,a5,1732 <main+0x52a>
	ty = 0;
    15cc:	4401                	li	s0,0
	CardType = ty;
    15ce:	c8818423          	sb	s0,-888(gp) # 20000084 <CardType>
	rcvr_mmc();
    15d2:	e87fe0ef          	jal	ra,458 <rcvr_mmc>
	SPI_set_prescaler(0);
    15d6:	4501                	li	a0,0
    15d8:	e2bfe0ef          	jal	ra,402 <SPI_set_prescaler>
	return ty ? 0 : STA_NOINIT;
    15dc:	ca818793          	addi	a5,gp,-856 # 200000a4 <rc>
    15e0:	c23e                	sw	a5,4(sp)
	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
    15e2:	1e041563          	bnez	s0,17cc <main+0x5c4>
	rc = pf_mount(&fatfs);
    15e6:	4712                	lw	a4,4(sp)
    15e8:	4789                	li	a5,2
		return FR_NOT_READY;
    15ea:	4489                	li	s1,2
    15ec:	c31c                	sw	a5,0(a4)
	if (rc == 0) {
		Delay_Ms(200);
		rc = mod_sdCard_loadFile("testfile.txt",0);
		printf("read result: %u\n\r", rc);
	} else {
		printf("write error: %u\n\r", rc);
    15ee:	6509                	lui	a0,0x2
    15f0:	85a6                	mv	a1,s1
    15f2:	64050513          	addi	a0,a0,1600 # 2640 <I2C1_ER_IRQHandler+0x226>
    15f6:	ab05                	j	1b26 <main+0x91e>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    15f8:	02dc7537          	lui	a0,0x2dc7
    15fc:	95be                	add	a1,a1,a5
    15fe:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbd259>
    1602:	abffe0ef          	jal	ra,c0 <__hidden___udivsi3>
    1606:	147d                	addi	s0,s0,-1
    1608:	8d61                	and	a0,a0,s0
    160a:	0542                	slli	a0,a0,0x10
    160c:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    160e:	67a1                	lui	a5,0x8
    1610:	8d5d                	or	a0,a0,a5
    1612:	b33d                	j	1340 <main+0x138>
		if (i2c_ping(0x3C) == I2C_OK) {
    1614:	03c00513          	li	a0,60
    1618:	96eff0ef          	jal	ra,786 <i2c_ping>
    161c:	0c051f63          	bnez	a0,16fa <main+0x4f2>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1620:	648d                	lui	s1,0x3
    1622:	ca018623          	sb	zero,-852(gp) # 200000a8 <ssd1306_buffer>
    1626:	92848493          	addi	s1,s1,-1752 # 2928 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    162a:	0004c503          	lbu	a0,0(s1)
    162e:	0ff00793          	li	a5,255
    1632:	02f51e63          	bne	a0,a5,166e <main+0x466>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    1636:	02100513          	li	a0,33
    163a:	c72ff0ef          	jal	ra,aac <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    163e:	4501                	li	a0,0
    1640:	c6cff0ef          	jal	ra,aac <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    1644:	07f00513          	li	a0,127
    1648:	c64ff0ef          	jal	ra,aac <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    164c:	02200513          	li	a0,34
    1650:	c5cff0ef          	jal	ra,aac <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    1654:	4501                	li	a0,0
    1656:	c56ff0ef          	jal	ra,aac <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    165a:	451d                	li	a0,7
    165c:	c50ff0ef          	jal	ra,aac <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    1660:	02000593          	li	a1,32
    1664:	cac18513          	addi	a0,gp,-852 # 200000a8 <ssd1306_buffer>
    1668:	99dff0ef          	jal	ra,1004 <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    166c:	a029                	j	1676 <main+0x46e>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    166e:	0485                	addi	s1,s1,1
    1670:	c3cff0ef          	jal	ra,aac <ssd1306_cmd>
    1674:	d95d                	beqz	a0,162a <main+0x422>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    1676:	40000613          	li	a2,1024
    167a:	4581                	li	a1,0
    167c:	d4418513          	addi	a0,gp,-700 # 20000140 <frame_buffer>
    1680:	943ff0ef          	jal	ra,fc2 <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1684:	02100513          	li	a0,33
    1688:	c24ff0ef          	jal	ra,aac <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    168c:	4501                	li	a0,0
    168e:	c1eff0ef          	jal	ra,aac <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1692:	07f00513          	li	a0,127
    1696:	c16ff0ef          	jal	ra,aac <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    169a:	02200513          	li	a0,34
    169e:	c0eff0ef          	jal	ra,aac <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    16a2:	4501                	li	a0,0
    16a4:	c08ff0ef          	jal	ra,aac <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    16a8:	451d                	li	a0,7
    16aa:	c02ff0ef          	jal	ra,aac <ssd1306_cmd>
    16ae:	4401                	li	s0,0
    16b0:	8726                	mv	a4,s1
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    16b2:	d4418493          	addi	s1,gp,-700 # 20000140 <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    16b6:	4501                	li	a0,0
    16b8:	94a2                	add	s1,s1,s0
    16ba:	02050793          	addi	a5,a0,32
    16be:	01079593          	slli	a1,a5,0x10
    16c2:	81c1                	srli	a1,a1,0x10
    16c4:	8d89                	sub	a1,a1,a0
    16c6:	9526                	add	a0,a0,s1
    16c8:	c23e                	sw	a5,4(sp)
    16ca:	93bff0ef          	jal	ra,1004 <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    16ce:	4792                	lw	a5,4(sp)
    16d0:	853e                	mv	a0,a5
    16d2:	08000793          	li	a5,128
    16d6:	fef512e3          	bne	a0,a5,16ba <main+0x4b2>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    16da:	08040413          	addi	s0,s0,128
    16de:	40000793          	li	a5,1024
    16e2:	fcf418e3          	bne	s0,a5,16b2 <main+0x4aa>
			sprintf(str_output, "Hello Bee!");
    16e6:	6589                	lui	a1,0x2
    16e8:	52058593          	addi	a1,a1,1312 # 2520 <I2C1_ER_IRQHandler+0x106>
    16ec:	17018513          	addi	a0,gp,368 # 2000056c <str_output>
    16f0:	8e5ff0ef          	jal	ra,fd4 <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    16f4:	4501                	li	a0,0
    16f6:	93bff0ef          	jal	ra,1030 <ssd1306_print_str_at.constprop.0>
		printf("----Scanning I2C Bus for Devices---\n");
    16fa:	6509                	lui	a0,0x2
    16fc:	52c50513          	addi	a0,a0,1324 # 252c <I2C1_ER_IRQHandler+0x112>
    1700:	9c3ff0ef          	jal	ra,10c2 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1704:	4401                	li	s0,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    1706:	8522                	mv	a0,s0
    1708:	87eff0ef          	jal	ra,786 <i2c_ping>
    170c:	e501                	bnez	a0,1714 <main+0x50c>
    170e:	8522                	mv	a0,s0
    1710:	9e3ff0ef          	jal	ra,10f2 <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1714:	0405                	addi	s0,s0,1
    1716:	0ff47413          	andi	s0,s0,255
    171a:	07f00793          	li	a5,127
    171e:	fef414e3          	bne	s0,a5,1706 <main+0x4fe>
		printf("----Done Scanning----\n\n");
    1722:	6509                	lui	a0,0x2
    1724:	55050513          	addi	a0,a0,1360 # 2550 <I2C1_ER_IRQHandler+0x136>
    1728:	99bff0ef          	jal	ra,10c2 <puts>
		modI2C_task();
    172c:	96dff0ef          	jal	ra,1098 <modI2C_task>
    1730:	b925                	j	1368 <main+0x160>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1732:	1aa00593          	li	a1,426
    1736:	04800513          	li	a0,72
    173a:	d3ffe0ef          	jal	ra,478 <send_cmd>
    173e:	04851a63          	bne	a0,s0,1792 <main+0x58a>
    1742:	4401                	li	s0,0
			for (n = 0; n < 4; n++) buf[n] = rcvr_mmc();	/* Get trailing return value of R7 resp */
    1744:	d15fe0ef          	jal	ra,458 <rcvr_mmc>
    1748:	00fc                	addi	a5,sp,76
    174a:	97a2                	add	a5,a5,s0
    174c:	00a78023          	sb	a0,0(a5) # 8000 <ch32_mess.c.78fe80b7+0x3861>
    1750:	0405                	addi	s0,s0,1
    1752:	4791                	li	a5,4
    1754:	fef418e3          	bne	s0,a5,1744 <main+0x53c>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    1758:	04e14703          	lbu	a4,78(sp)
    175c:	4785                	li	a5,1
    175e:	e6f717e3          	bne	a4,a5,15cc <main+0x3c4>
    1762:	04f14703          	lbu	a4,79(sp)
    1766:	0aa00793          	li	a5,170
    176a:	e6f711e3          	bne	a4,a5,15cc <main+0x3c4>
    176e:	3e800413          	li	s0,1000
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    1772:	400005b7          	lui	a1,0x40000
    1776:	0e900513          	li	a0,233
    177a:	cfffe0ef          	jal	ra,478 <send_cmd>
    177e:	7e050f63          	beqz	a0,1f7c <main+0xd74>
					DLY_US(1000);
    1782:	6531                	lui	a0,0xc
    1784:	b8050513          	addi	a0,a0,-1152 # bb80 <lib_i2c.c.d894f163+0x21d9>
				for (tmr = 1000; tmr; tmr--) {				/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1788:	147d                	addi	s0,s0,-1
					DLY_US(1000);
    178a:	ae3fe0ef          	jal	ra,26c <DelaySysTick>
				for (tmr = 1000; tmr; tmr--) {				/* Wait for leaving idle state (ACMD41 with HCS bit) */
    178e:	f075                	bnez	s0,1772 <main+0x56a>
    1790:	bd35                	j	15cc <main+0x3c4>
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1792:	4581                	li	a1,0
    1794:	0e900513          	li	a0,233
    1798:	ce1fe0ef          	jal	ra,478 <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    179c:	04100793          	li	a5,65
			if (send_cmd(ACMD41, 0) <= 1) 	{
    17a0:	00a46563          	bltu	s0,a0,17aa <main+0x5a2>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    17a4:	4409                	li	s0,2
    17a6:	0e900793          	li	a5,233
    17aa:	c23e                	sw	a5,4(sp)
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    17ac:	3e800493          	li	s1,1000
				if (send_cmd(cmd, 0) == 0) break;
    17b0:	4512                	lw	a0,4(sp)
    17b2:	4581                	li	a1,0
    17b4:	cc5fe0ef          	jal	ra,478 <send_cmd>
    17b8:	7e050e63          	beqz	a0,1fb4 <main+0xdac>
				DLY_US(1000);
    17bc:	6531                	lui	a0,0xc
    17be:	b8050513          	addi	a0,a0,-1152 # bb80 <lib_i2c.c.d894f163+0x21d9>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    17c2:	14fd                	addi	s1,s1,-1
				DLY_US(1000);
    17c4:	aa9fe0ef          	jal	ra,26c <DelaySysTick>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    17c8:	f4e5                	bnez	s1,17b0 <main+0x5a8>
    17ca:	b509                	j	15cc <main+0x3c4>
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    17cc:	4581                	li	a1,0
    17ce:	00e8                	addi	a0,sp,76
    17d0:	ed2ff0ef          	jal	ra,ea2 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    17d4:	4785                	li	a5,1
	bsect = 0;
    17d6:	4401                	li	s0,0
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    17d8:	02f51f63          	bne	a0,a5,1816 <main+0x60e>
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    17dc:	46c1                	li	a3,16
    17de:	1be00613          	li	a2,446
    17e2:	4581                	li	a1,0
    17e4:	00e8                	addi	a0,sp,76
    17e6:	d1ffe0ef          	jal	ra,504 <disk_readp>
    17ea:	c511                	beqz	a0,17f6 <main+0x5ee>
    17ec:	4712                	lw	a4,4(sp)
    17ee:	4785                	li	a5,1
	if (fmt == 3) return FR_DISK_ERR;
    17f0:	4485                	li	s1,1
    17f2:	c31c                	sw	a5,0(a4)
    17f4:	bbed                	j	15ee <main+0x3e6>
			if (buf[4]) {					/* Is the partition existing? */
    17f6:	05014783          	lbu	a5,80(sp)
    17fa:	e791                	bnez	a5,1806 <main+0x5fe>
    17fc:	4712                	lw	a4,4(sp)
    17fe:	4799                	li	a5,6
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1800:	4499                	li	s1,6
    1802:	c31c                	sw	a5,0(a4)
    1804:	b3ed                	j	15ee <main+0x3e6>
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
    1806:	08c8                	addi	a0,sp,84
    1808:	b39fe0ef          	jal	ra,340 <ld_dword>
    180c:	842a                	mv	s0,a0
				fmt = check_fs(buf, bsect);	/* Check the partition */
    180e:	85aa                	mv	a1,a0
    1810:	00e8                	addi	a0,sp,76
    1812:	e90ff0ef          	jal	ra,ea2 <check_fs>
	if (fmt == 3) return FR_DISK_ERR;
    1816:	478d                	li	a5,3
    1818:	fcf50ae3          	beq	a0,a5,17ec <main+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    181c:	f165                	bnez	a0,17fc <main+0x5f4>
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
    181e:	02400693          	li	a3,36
    1822:	4635                	li	a2,13
    1824:	85a2                	mv	a1,s0
    1826:	00e8                	addi	a0,sp,76
    1828:	cddfe0ef          	jal	ra,504 <disk_readp>
    182c:	f161                	bnez	a0,17ec <main+0x5e4>
	fsize = ld_word(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    182e:	05614583          	lbu	a1,86(sp)
    1832:	05514503          	lbu	a0,85(sp)
    1836:	05a2                	slli	a1,a1,0x8
    1838:	8dc9                	or	a1,a1,a0
	if (!fsize) fsize = ld_dword(buf+BPB_FATSz32-13);
    183a:	e591                	bnez	a1,1846 <main+0x63e>
    183c:	06310513          	addi	a0,sp,99
    1840:	b01fe0ef          	jal	ra,340 <ld_dword>
    1844:	85aa                	mv	a1,a0
	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1846:	04f14503          	lbu	a0,79(sp)
    184a:	857fe0ef          	jal	ra,a0 <__mulsi3>
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    184e:	04e14703          	lbu	a4,78(sp)
	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1852:	ca2a                	sw	a0,20(sp)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1854:	04d14503          	lbu	a0,77(sp)
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    1858:	04c14583          	lbu	a1,76(sp)
    185c:	05015483          	lhu	s1,80(sp)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1860:	0722                	slli	a4,a4,0x8
    1862:	8f49                	or	a4,a4,a0
	tsect = ld_word(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    1864:	05215503          	lhu	a0,82(sp)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1868:	d1818693          	addi	a3,gp,-744 # 20000114 <fatfs>
    186c:	943a                	add	s0,s0,a4
    186e:	c6c0                	sw	s0,12(a3)
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    1870:	00b68123          	sb	a1,2(a3) # 900002 <lib_i2c.c.d894f163+0x8f665b>
	fs->n_rootdir = ld_word(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    1874:	00969223          	sh	s1,4(a3)
	if (!tsect) tsect = ld_dword(buf+BPB_TotSec32-13);
    1878:	e909                	bnez	a0,188a <main+0x682>
    187a:	05f10513          	addi	a0,sp,95
    187e:	d02e                	sw	a1,32(sp)
    1880:	cc3a                	sw	a4,24(sp)
    1882:	abffe0ef          	jal	ra,340 <ld_dword>
    1886:	5582                	lw	a1,32(sp)
    1888:	4762                	lw	a4,24(sp)
		- ld_word(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    188a:	47d2                	lw	a5,20(sp)
    188c:	8091                	srli	s1,s1,0x4
    188e:	9726                	add	a4,a4,s1
    1890:	973e                	add	a4,a4,a5
		) / fs->csize + 2;
    1892:	8d19                	sub	a0,a0,a4
    1894:	82dfe0ef          	jal	ra,c0 <__hidden___udivsi3>
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    1898:	777d                	lui	a4,0xfffff
	mclst = (tsect						/* Last cluster# + 1 */
    189a:	00250693          	addi	a3,a0,2
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    189e:	0729                	addi	a4,a4,10
	fs->n_fatent = (CLUST)mclst;
    18a0:	d1818793          	addi	a5,gp,-744 # 20000114 <fatfs>
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    18a4:	663d                	lui	a2,0xf
    18a6:	953a                	add	a0,a0,a4
	fs->n_fatent = (CLUST)mclst;
    18a8:	c794                	sw	a3,8(a5)
    18aa:	6741                	lui	a4,0x10
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    18ac:	1679                	addi	a2,a2,-2
    18ae:	1759                	addi	a4,a4,-10
    18b0:	6aa67d63          	bgeu	a2,a0,1f6a <main+0xd62>
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
    18b4:	f4d774e3          	bgeu	a4,a3,17fc <main+0x5f4>
	fs->fs_type = fmt;
    18b8:	470d                	li	a4,3
		fs->dirbase = ld_dword(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    18ba:	06b10513          	addi	a0,sp,107
	fs->fs_type = fmt;
    18be:	00e78023          	sb	a4,0(a5)
		fs->dirbase = ld_dword(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    18c2:	a7ffe0ef          	jal	ra,340 <ld_dword>
    18c6:	d1818793          	addi	a5,gp,-744 # 20000114 <fatfs>
    18ca:	cb88                	sw	a0,16(a5)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    18cc:	4752                	lw	a4,20(sp)
    18ce:	9426                	add	s0,s0,s1
	fs->flag = 0;
    18d0:	000780a3          	sb	zero,1(a5)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    18d4:	00e40533          	add	a0,s0,a4
	FatFs = fs;
    18d8:	4742                	lw	a4,16(sp)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    18da:	cbc8                	sw	a0,20(a5)
	if (rc) return rc;

	printf("Opening file \"%s\"\n\r", filename);
    18dc:	6489                	lui	s1,0x2
	FatFs = fs;
    18de:	c31c                	sw	a5,0(a4)
	rc = pf_mount(&fatfs);
    18e0:	4792                	lw	a5,4(sp)
	printf("Opening file \"%s\"\n\r", filename);
    18e2:	6509                	lui	a0,0x2
    18e4:	4fc48593          	addi	a1,s1,1276 # 24fc <I2C1_ER_IRQHandler+0xe2>
    18e8:	58c50513          	addi	a0,a0,1420 # 258c <I2C1_ER_IRQHandler+0x172>
	rc = pf_mount(&fatfs);
    18ec:	0007a023          	sw	zero,0(a5)
	printf("Opening file \"%s\"\n\r", filename);
    18f0:	d8aff0ef          	jal	ra,e7a <printf>
	FATFS *fs = FatFs;
    18f4:	47c2                	lw	a5,16(sp)
    18f6:	4380                	lw	s0,0(a5)
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    18f8:	42040463          	beqz	s0,1d20 <main+0xb18>
	fs->flag = 0;
    18fc:	000400a3          	sb	zero,1(s0)
	dj.fn = sp;
    1900:	107c                	addi	a5,sp,44
    1902:	de3e                	sw	a5,60(sp)
	dj->sclust = 0;						/* Set start directory (always root dir) */
    1904:	4fc48793          	addi	a5,s1,1276
    1908:	c082                	sw	zero,64(sp)
    190a:	ca3e                	sw	a5,20(sp)
    190c:	5372                	lw	t1,60(sp)
	while (cnt--) *d++ = (char)val;
    190e:	02000593          	li	a1,32
    1912:	462d                	li	a2,11
    1914:	851a                	mv	a0,t1
    1916:	eacff0ef          	jal	ra,fc2 <memset>
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
    191a:	678d                	lui	a5,0x3
	while (cnt--) *d++ = (char)val;
    191c:	832a                	mv	t1,a0
	si = i = 0; ni = 8;
    191e:	4681                	li	a3,0
    1920:	4581                	li	a1,0
    1922:	4721                	li	a4,8
		if (c == '.' || i >= ni) {
    1924:	02e00513          	li	a0,46
			if (ni != 8 || c != '.') break;
    1928:	42a1                	li	t0,8
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
    192a:	89878393          	addi	t2,a5,-1896 # 2898 <cvt.2>
		c = p[si++];
    192e:	47d2                	lw	a5,20(sp)
    1930:	00158613          	addi	a2,a1,1 # 40000001 <_eusrstack+0x1ffff801>
    1934:	0ff67613          	andi	a2,a2,255
    1938:	95be                	add	a1,a1,a5
    193a:	0005c783          	lbu	a5,0(a1)
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    193e:	02000593          	li	a1,32
    1942:	04f5f863          	bgeu	a1,a5,1992 <main+0x78a>
    1946:	02f00593          	li	a1,47
    194a:	04b78463          	beq	a5,a1,1992 <main+0x78a>
		if (c == '.' || i >= ni) {
    194e:	66a78d63          	beq	a5,a0,1fc8 <main+0xdc0>
    1952:	04e6f063          	bgeu	a3,a4,1992 <main+0x78a>
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
    1956:	01879593          	slli	a1,a5,0x18
    195a:	85e1                	srai	a1,a1,0x18
    195c:	0005d563          	bgez	a1,1966 <main+0x75e>
    1960:	979e                	add	a5,a5,t2
    1962:	f807c783          	lbu	a5,-128(a5)
			if (PF_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
    1966:	f9f78593          	addi	a1,a5,-97
    196a:	0ff5f593          	andi	a1,a1,255
    196e:	40e5                	li	ra,25
    1970:	00b0e563          	bltu	ra,a1,197a <main+0x772>
    1974:	1781                	addi	a5,a5,-32
    1976:	0ff7f793          	andi	a5,a5,255
			sfn[i++] = c;
    197a:	00168593          	addi	a1,a3,1
    197e:	969a                	add	a3,a3,t1
    1980:	00f68023          	sb	a5,0(a3)
    1984:	87ba                	mv	a5,a4
    1986:	0ff5f713          	andi	a4,a1,255
			i = 8; ni = 11;
    198a:	86ba                	mv	a3,a4
		c = p[si++];
    198c:	85b2                	mv	a1,a2
    198e:	873e                	mv	a4,a5
    1990:	bf79                	j	192e <main+0x726>
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1992:	4752                	lw	a4,20(sp)
	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1994:	0217b793          	sltiu	a5,a5,33
    1998:	00f305a3          	sb	a5,11(t1)
	*path = &p[si];						/* Rerurn pointer to the next segment */
    199c:	9732                	add	a4,a4,a2
	res = dir_rewind(dj);			/* Rewind directory object */
    199e:	1828                	addi	a0,sp,56
	*path = &p[si];						/* Rerurn pointer to the next segment */
    19a0:	ca3a                	sw	a4,20(sp)
	res = dir_rewind(dj);			/* Rewind directory object */
    19a2:	a17fe0ef          	jal	ra,3b8 <dir_rewind>
    19a6:	84aa                	mv	s1,a0
	if (res != FR_OK) return res;
    19a8:	ed09                	bnez	a0,19c2 <main+0x7ba>
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
    19aa:	03815603          	lhu	a2,56(sp)
    19ae:	45a6                	lw	a1,72(sp)
    19b0:	02000693          	li	a3,32
    19b4:	8a3d                	andi	a2,a2,15
    19b6:	0616                	slli	a2,a2,0x5
    19b8:	00e8                	addi	a0,sp,76
    19ba:	b4bfe0ef          	jal	ra,504 <disk_readp>
		if (res != FR_OK) break;
    19be:	c509                	beqz	a0,19c8 <main+0x7c0>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    19c0:	4485                	li	s1,1
	rc = pf_open(filename);
    19c2:	4792                	lw	a5,4(sp)
    19c4:	c384                	sw	s1,0(a5)
    19c6:	b125                	j	15ee <main+0x3e6>
    19c8:	04c14783          	lbu	a5,76(sp)
    19cc:	e399                	bnez	a5,19d2 <main+0x7ca>
    19ce:	448d                	li	s1,3
    19d0:	bfcd                	j	19c2 <main+0x7ba>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) break;	/* Is it a valid entry? */
    19d2:	05714783          	lbu	a5,87(sp)
    19d6:	0087f713          	andi	a4,a5,8
    19da:	ef11                	bnez	a4,19f6 <main+0x7ee>
    19dc:	5772                	lw	a4,60(sp)
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    19de:	45ad                	li	a1,11
    19e0:	00f4                	addi	a3,sp,76
    19e2:	96aa                	add	a3,a3,a0
    19e4:	0505                	addi	a0,a0,1
    19e6:	00a70633          	add	a2,a4,a0
    19ea:	0006c683          	lbu	a3,0(a3)
    19ee:	fff64603          	lbu	a2,-1(a2) # efff <lib_i2c.c.d894f163+0x5658>
    19f2:	02d60963          	beq	a2,a3,1a24 <main+0x81c>
	i = dj->index + 1;
    19f6:	03815783          	lhu	a5,56(sp)
    19fa:	0785                	addi	a5,a5,1
    19fc:	01079493          	slli	s1,a5,0x10
    1a00:	80c1                	srli	s1,s1,0x10
	if (!i || !dj->sect) return FR_NO_FILE;	/* Report EOT when index has reached 65535 */
    1a02:	d4f1                	beqz	s1,19ce <main+0x7c6>
    1a04:	4726                	lw	a4,72(sp)
    1a06:	d761                	beqz	a4,19ce <main+0x7c6>
	if (!(i % 16)) {		/* Sector changed? */
    1a08:	00f4f693          	andi	a3,s1,15
    1a0c:	ea89                	bnez	a3,1a1e <main+0x816>
		if (dj->clust == 0) {	/* Static table */
    1a0e:	4516                	lw	a0,68(sp)
		dj->sect++;			/* Next sector */
    1a10:	0705                	addi	a4,a4,1
    1a12:	c4ba                	sw	a4,72(sp)
		if (dj->clust == 0) {	/* Static table */
    1a14:	e505                	bnez	a0,1a3c <main+0x834>
			if (i >= fs->n_rootdir) return FR_NO_FILE;	/* Report EOT when end of table */
    1a16:	00445703          	lhu	a4,4(s0)
    1a1a:	fae4fae3          	bgeu	s1,a4,19ce <main+0x7c6>
	dj->index = i;
    1a1e:	02911c23          	sh	s1,56(sp)
	} while (res == FR_OK);
    1a22:	b761                	j	19aa <main+0x7a2>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1a24:	fab51ee3          	bne	a0,a1,19e0 <main+0x7d8>
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
    1a28:	00b74703          	lbu	a4,11(a4) # 1000b <lib_i2c.c.d894f163+0x6664>
    1a2c:	8bc1                	andi	a5,a5,16
    1a2e:	eb1d                	bnez	a4,1a64 <main+0x85c>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
    1a30:	dfd9                	beqz	a5,19ce <main+0x7c6>
			dj->sclust = get_clust(dir);	/* Follow next */
    1a32:	00e8                	addi	a0,sp,76
    1a34:	955fe0ef          	jal	ra,388 <get_clust>
    1a38:	c0aa                	sw	a0,64(sp)
    1a3a:	bdc9                	j	190c <main+0x704>
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    1a3c:	00244703          	lbu	a4,2(s0)
    1a40:	0044d693          	srli	a3,s1,0x4
    1a44:	177d                	addi	a4,a4,-1
    1a46:	8f75                	and	a4,a4,a3
    1a48:	fb79                	bnez	a4,1a1e <main+0x816>
				clst = get_fat(dj->clust);		/* Get next cluster */
    1a4a:	b51fe0ef          	jal	ra,59a <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
    1a4e:	4685                	li	a3,1
    1a50:	f6a6f8e3          	bgeu	a3,a0,19c0 <main+0x7b8>
				if (clst >= fs->n_fatent) return FR_NO_FILE;	/* Report EOT when it reached end of dynamic table */
    1a54:	4414                	lw	a3,8(s0)
    1a56:	f6d57ce3          	bgeu	a0,a3,19ce <main+0x7c6>
				dj->clust = clst;				/* Initialize data for new cluster */
    1a5a:	c2aa                	sw	a0,68(sp)
				dj->sect = clust2sect(clst);
    1a5c:	903fe0ef          	jal	ra,35e <clust2sect>
    1a60:	c4aa                	sw	a0,72(sp)
    1a62:	bf75                	j	1a1e <main+0x816>
    1a64:	0ff7f713          	andi	a4,a5,255
    1a68:	ca3a                	sw	a4,20(sp)
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) return FR_NO_FILE;	/* It is a directory */
    1a6a:	2a079563          	bnez	a5,1d14 <main+0xb0c>
	fs->org_clust = get_clust(dir);		/* File start cluster */
    1a6e:	00e8                	addi	a0,sp,76
    1a70:	919fe0ef          	jal	ra,388 <get_clust>
    1a74:	d008                	sw	a0,32(s0)
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
    1a76:	10a8                	addi	a0,sp,104
    1a78:	8c9fe0ef          	jal	ra,340 <ld_dword>
	fs->flag = FA_OPENED;
    1a7c:	4785                	li	a5,1
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
    1a7e:	cc48                	sw	a0,28(s0)
	if (rc) return rc;

	rc = pf_write(data, strlen(data), &br);
    1a80:	6509                	lui	a0,0x2
	fs->flag = FA_OPENED;
    1a82:	00f400a3          	sb	a5,1(s0)
	fs->fptr = 0;						/* File pointer */
    1a86:	00042c23          	sw	zero,24(s0)
    1a8a:	02300593          	li	a1,35
    1a8e:	5a050513          	addi	a0,a0,1440 # 25a0 <I2C1_ER_IRQHandler+0x186>
    1a92:	d8dfe0ef          	jal	ra,81e <pf_write.constprop.0>
    1a96:	4792                	lw	a5,4(sp)
    1a98:	84aa                	mv	s1,a0
    1a9a:	c388                	sw	a0,0(a5)
	if (rc) return rc;
    1a9c:	b40519e3          	bnez	a0,15ee <main+0x3e6>

	rc = pf_write(0, 0, &br);
    1aa0:	4581                	li	a1,0
    1aa2:	d7dfe0ef          	jal	ra,81e <pf_write.constprop.0>
    1aa6:	4792                	lw	a5,4(sp)
    1aa8:	84aa                	mv	s1,a0
    1aaa:	c388                	sw	a0,0(a5)
	if (rc == 0) {
    1aac:	b40511e3          	bnez	a0,15ee <main+0x3e6>
		Delay_Ms(200);
    1ab0:	00928537          	lui	a0,0x928
    1ab4:	c0050513          	addi	a0,a0,-1024 # 927c00 <lib_i2c.c.d894f163+0x91e259>
    1ab8:	fb4fe0ef          	jal	ra,26c <DelaySysTick>
}

FRESULT mod_sdCard_loadFile(const char filename[], uint32_t addr) {
	BYTE buff[64];

	printf("\nlseek to %u\n\r", addr);
    1abc:	6509                	lui	a0,0x2
    1abe:	4581                	li	a1,0
    1ac0:	5c450513          	addi	a0,a0,1476 # 25c4 <I2C1_ER_IRQHandler+0x1aa>
    1ac4:	bb6ff0ef          	jal	ra,e7a <printf>
	DWORD ofs		/* File pointer from top of file */
)
{
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    1ac8:	47c2                	lw	a5,16(sp)


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1aca:	4595                	li	a1,5
	FATFS *fs = FatFs;
    1acc:	4398                	lw	a4,0(a5)
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1ace:	cb09                	beqz	a4,1ae0 <main+0x8d8>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
    1ad0:	00174683          	lbu	a3,1(a4)
    1ad4:	4591                	li	a1,4
    1ad6:	8a85                	andi	a3,a3,1
    1ad8:	c681                	beqz	a3,1ae0 <main+0x8d8>

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
	fs->fptr = 0;
    1ada:	00072c23          	sw	zero,24(a4)
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) ABORT(FR_DISK_ERR);
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
	}

	return FR_OK;
    1ade:	4581                	li	a1,0
	rc = pf_lseek(addr);
    1ae0:	4792                	lw	a5,4(sp)
	printf("rc=%u\n\r", rc);
    1ae2:	6509                	lui	a0,0x2
    1ae4:	5d450513          	addi	a0,a0,1492 # 25d4 <I2C1_ER_IRQHandler+0x1ba>
	rc = pf_lseek(addr);
    1ae8:	c38c                	sw	a1,0(a5)
	printf("rc=%u\n\r", rc);
    1aea:	b90ff0ef          	jal	ra,e7a <printf>
	// printf("rc=%u\n\r", rc);
	// if (rc) return;

	uint32_t total_bytes = 0;
	uint8_t cnt = 0;
	const char spinner[] = "/-\\|";
    1aee:	7c5c3737          	lui	a4,0x7c5c3
    1af2:	d2f70713          	addi	a4,a4,-721 # 7c5c2d2f <_eusrstack+0x5c5c252f>
    1af6:	dc3a                	sw	a4,56(sp)
    1af8:	02010e23          	sb	zero,60(sp)
	FATFS *fs = FatFs;
    1afc:	47c2                	lw	a5,16(sp)
    1afe:	4398                	lw	a4,0(a5)
	*br = 0;
    1b00:	ca01a223          	sw	zero,-860(gp) # 200000a0 <br>
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1b04:	22071463          	bnez	a4,1d2c <main+0xb24>

	for (;;) {
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    1b08:	4715                	li	a4,5
    1b0a:	4792                	lw	a5,4(sp)
    1b0c:	c398                	sw	a4,0(a5)
			putchar(spinner[cnt%4]);
			putchar('\r');
		}
	}

	printf("\n\rLoaded %d kilobytes.\n\r", total_bytes/1024);
    1b0e:	6509                	lui	a0,0x2
    1b10:	00a4d593          	srli	a1,s1,0xa
    1b14:	61050513          	addi	a0,a0,1552 # 2610 <I2C1_ER_IRQHandler+0x1f6>
    1b18:	b62ff0ef          	jal	ra,e7a <printf>
		printf("read result: %u\n\r", rc);
    1b1c:	4792                	lw	a5,4(sp)
    1b1e:	6509                	lui	a0,0x2
    1b20:	62c50513          	addi	a0,a0,1580 # 262c <I2C1_ER_IRQHandler+0x212>
    1b24:	438c                	lw	a1,0(a5)
		printf("write error: %u\n\r", rc);
    1b26:	b54ff0ef          	jal	ra,e7a <printf>
*/


void modEncoder_setup(Encoder_t *model) {
	//! Enable GPIOC, TIM2, and AFIO *very important!*
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    1b2a:	400217b7          	lui	a5,0x40021
    1b2e:	4f98                	lw	a4,24(a5)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	// PD3 is T2CH1_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    1b30:	75c5                	lui	a1,0xffff1
    1b32:	15fd                	addi	a1,a1,-1
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    1b34:	03176713          	ori	a4,a4,49
    1b38:	cf98                	sw	a4,24(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    1b3a:	4fd8                	lw	a4,28(a5)
    1b3c:	00176713          	ori	a4,a4,1
    1b40:	cfd8                	sw	a4,28(a5)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
    1b42:	40010737          	lui	a4,0x40010
    1b46:	4354                	lw	a3,4(a4)
    1b48:	c354                	sw	a3,4(a4)
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    1b4a:	400116b7          	lui	a3,0x40011
    1b4e:	40068713          	addi	a4,a3,1024 # 40011400 <_eusrstack+0x20010c00>
    1b52:	4310                	lw	a2,0(a4)
    1b54:	8e6d                	and	a2,a2,a1
    1b56:	c310                	sw	a2,0(a4)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*3); 		//set new ones
    1b58:	4310                	lw	a2,0(a4)
    1b5a:	65a1                	lui	a1,0x8
    1b5c:	8e4d                	or	a2,a2,a1
    1b5e:	c310                	sw	a2,0(a4)
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    1b60:	4750                	lw	a2,12(a4)

	// PD4 is T2CH2_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    1b62:	fff105b7          	lui	a1,0xfff10
    1b66:	15fd                	addi	a1,a1,-1
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    1b68:	00466613          	ori	a2,a2,4
    1b6c:	c750                	sw	a2,12(a4)
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    1b6e:	4310                	lw	a2,0(a4)
    1b70:	8e6d                	and	a2,a2,a1
    1b72:	c310                	sw	a2,0(a4)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*4); 		//set new ones
    1b74:	4310                	lw	a2,0(a4)
    1b76:	000805b7          	lui	a1,0x80
    1b7a:	8e4d                	or	a2,a2,a1
    1b7c:	c310                	sw	a2,0(a4)
	GPIOD->OUTDR |= 1<<4;							//1 = pull-up, 0 = pull-down
    1b7e:	4750                	lw	a2,12(a4)
    1b80:	01066613          	ori	a2,a2,16
    1b84:	c750                	sw	a2,12(a4)
	// //# added
	// GPIOC->CFGLR &= ~(0xf<<(4*0));
	// GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*0);

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    1b86:	4b98                	lw	a4,16(a5)
    1b88:	00176713          	ori	a4,a4,1
    1b8c:	cb98                	sw	a4,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    1b8e:	4b98                	lw	a4,16(a5)
    1b90:	9b79                	andi	a4,a4,-2
    1b92:	cb98                	sw	a4,16(a5)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
    1b94:	40000737          	lui	a4,0x40000
    1b98:	00875603          	lhu	a2,8(a4) # 40000008 <_eusrstack+0x1ffff808>
    1b9c:	0642                	slli	a2,a2,0x10
    1b9e:	8241                	srli	a2,a2,0x10
    1ba0:	00366613          	ori	a2,a2,3
    1ba4:	00c71423          	sh	a2,8(a4)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
    1ba8:	7665                	lui	a2,0xffff9
    1baa:	167d                	addi	a2,a2,-1
    1bac:	02c71223          	sh	a2,36(a4)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
    1bb0:	01475603          	lhu	a2,20(a4)
    1bb4:	0642                	slli	a2,a2,0x10
    1bb6:	8241                	srli	a2,a2,0x10
    1bb8:	00166613          	ori	a2,a2,1
    1bbc:	00c71a23          	sh	a2,20(a4)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
    1bc0:	00075603          	lhu	a2,0(a4)
    1bc4:	0642                	slli	a2,a2,0x10
    1bc6:	8241                	srli	a2,a2,0x10
    1bc8:	00166613          	ori	a2,a2,1
    1bcc:	00c71023          	sh	a2,0(a4)

	model->initial_count = TIM2->CNT;
    1bd0:	02475603          	lhu	a2,36(a4)
	model->last_count = TIM2->CNT;
    1bd4:	02475403          	lhu	s0,36(a4)
#define ADC_NUMCHLS 2
volatile uint16_t adc_buffer[ADC_NUMCHLS];

void modJoystick_setup() {
	// ADCCLK = 24 MHz => RCC_ADCPRE = 0: divide by 2
	RCC->CFGR0 &= ~(0x1F<<11);
    1bd8:	43d8                	lw	a4,4(a5)
    1bda:	7641                	lui	a2,0xffff0
    1bdc:	7ff60613          	addi	a2,a2,2047 # ffff07ff <_eusrstack+0xdffeffff>
    1be0:	8f71                	and	a4,a4,a2
    1be2:	c3d8                	sw	a4,4(a5)
	
	// Enable GPIOD and ADC
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_ADC1;
    1be4:	4f98                	lw	a4,24(a5)
    1be6:	0442                	slli	s0,s0,0x10
    1be8:	8041                	srli	s0,s0,0x10
    1bea:	20476713          	ori	a4,a4,516
    1bee:	cf98                	sw	a4,24(a5)
	// GPIOA->CFGLR &= ~(0xf<<(4*0));	// PA1 Analog input Chan1
	// GPIOA->CFGLR &= ~(0xf<<(4*1));	// PA2 Analog input Chan0

    int chanA = 0;
    int chanB = 1;
    GPIOA->CFGLR &= ~(0xf<<(4*0));
    1bf0:	80068713          	addi	a4,a3,-2048
    1bf4:	4314                	lw	a3,0(a4)
    1bf6:	9ac1                	andi	a3,a3,-16
    1bf8:	c314                	sw	a3,0(a4)
    GPIOA->CFGLR &= ~(0xf<<(4*1));
    1bfa:	4314                	lw	a3,0(a4)
    1bfc:	f0f6f693          	andi	a3,a3,-241
    1c00:	c314                	sw	a3,0(a4)
	
	// Reset the ADC to init all regs
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    1c02:	47d8                	lw	a4,12(a5)
    // turn on ADC
	ADC1->CTLR2 |= ADC_ADON;
	
	// Reset and calibrate
	ADC1->CTLR2 |= ADC_RSTCAL;
	while(ADC1->CTLR2 & ADC_RSTCAL);
    1c04:	400126b7          	lui	a3,0x40012
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    1c08:	20076713          	ori	a4,a4,512
    1c0c:	c7d8                	sw	a4,12(a5)
	RCC->APB2PRSTR &= ~RCC_APB2Periph_ADC1;
    1c0e:	47d8                	lw	a4,12(a5)
    1c10:	dff77713          	andi	a4,a4,-513
    1c14:	c7d8                	sw	a4,12(a5)
	ADC1->RSQR1 = (ADC_NUMCHLS-1) << 20;	// four chls in the sequence
    1c16:	400127b7          	lui	a5,0x40012
    1c1a:	40078793          	addi	a5,a5,1024 # 40012400 <_eusrstack+0x20011c00>
    1c1e:	00100737          	lui	a4,0x100
    1c22:	d7d8                	sw	a4,44(a5)
	ADC1->RSQR2 = 0;
    1c24:	0207a823          	sw	zero,48(a5)
    ADC1->RSQR3 = (chanA<<(5*0)) | (chanB<<(5*1));
    1c28:	02000713          	li	a4,32
    1c2c:	dbd8                	sw	a4,52(a5)
    ADC1->SAMPTR2 = (7<<(3*chanA)) | (7<<(3*chanB));
    1c2e:	03f00713          	li	a4,63
    1c32:	cb98                	sw	a4,16(a5)
	ADC1->CTLR2 |= ADC_ADON;
    1c34:	4798                	lw	a4,8(a5)
    1c36:	00176713          	ori	a4,a4,1
    1c3a:	c798                	sw	a4,8(a5)
	ADC1->CTLR2 |= ADC_RSTCAL;
    1c3c:	4798                	lw	a4,8(a5)
    1c3e:	00876713          	ori	a4,a4,8
    1c42:	c798                	sw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_RSTCAL);
    1c44:	40068793          	addi	a5,a3,1024 # 40012400 <_eusrstack+0x20011c00>
    1c48:	4798                	lw	a4,8(a5)
    1c4a:	8b21                	andi	a4,a4,8
    1c4c:	ff65                	bnez	a4,1c44 <main+0xa3c>
	ADC1->CTLR2 |= ADC_CAL;
    1c4e:	4798                	lw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    1c50:	400126b7          	lui	a3,0x40012
	ADC1->CTLR2 |= ADC_CAL;
    1c54:	00476713          	ori	a4,a4,4
    1c58:	c798                	sw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    1c5a:	40068793          	addi	a5,a3,1024 # 40012400 <_eusrstack+0x20011c00>
    1c5e:	4798                	lw	a4,8(a5)
    1c60:	8b11                	andi	a4,a4,4
    1c62:	c83a                	sw	a4,16(sp)
    1c64:	fb7d                	bnez	a4,1c5a <main+0xa52>
	
	// Turn on DMA
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    1c66:	40021637          	lui	a2,0x40021
    1c6a:	4a58                	lw	a4,20(a2)
	
	//DMA1_Channel1 is for ADC
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    1c6c:	44c68693          	addi	a3,a3,1100
    model->btn_state = newState;
    1c70:	448d                	li	s1,3
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    1c72:	00176713          	ori	a4,a4,1
    1c76:	ca58                	sw	a4,20(a2)
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    1c78:	40020737          	lui	a4,0x40020
    1c7c:	cb14                	sw	a3,16(a4)
	DMA1_Channel1->MADDR = (uint32_t)adc_buffer;
    1c7e:	ca018693          	addi	a3,gp,-864 # 2000009c <adc_buffer>
    1c82:	cb54                	sw	a3,20(a4)
	DMA1_Channel1->CNTR  = ADC_NUMCHLS;
    1c84:	4689                	li	a3,2
    1c86:	c754                	sw	a3,12(a4)
	DMA1_Channel1->CFGR  =
    1c88:	668d                	lui	a3,0x3
    1c8a:	5a068693          	addi	a3,a3,1440 # 35a0 <_data_lma+0xc5c>
    1c8e:	c714                	sw	a3,8(a4)
		DMA_PeripheralDataSize_HalfWord |
		DMA_MemoryInc_Enable |
		DMA_Mode_Circular |
		DMA_DIR_PeripheralSRC;
	
	DMA1_Channel1->CFGR |= DMA_CFGR1_EN;    // Turn on DMA channel 1
    1c90:	4714                	lw	a3,8(a4)
    1c92:	0016e693          	ori	a3,a3,1
    1c96:	c714                	sw	a3,8(a4)
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
    1c98:	43d8                	lw	a4,4(a5)
	
	// Enable continuous conversion and DMA
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    1c9a:	000e06b7          	lui	a3,0xe0
    1c9e:	10268693          	addi	a3,a3,258 # e0102 <lib_i2c.c.d894f163+0xd675b>
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
    1ca2:	10076713          	ori	a4,a4,256
    1ca6:	c3d8                	sw	a4,4(a5)
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    1ca8:	4798                	lw	a4,8(a5)
    1caa:	8f55                	or	a4,a4,a3
    1cac:	c798                	sw	a4,8(a5)
	ADC1->CTLR2 |= ADC_SWSTART;             // start conversion
    1cae:	4798                	lw	a4,8(a5)
    1cb0:	004006b7          	lui	a3,0x400
    1cb4:	8f55                	or	a4,a4,a3
    1cb6:	c798                	sw	a4,8(a5)
    1cb8:	ca018793          	addi	a5,gp,-864 # 2000009c <adc_buffer>
{
	// Disable DMA channel (just in case a transfer is pending)
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
	// Set transfer length and source address
	DMA1_Channel4->CNTR = len;
	DMA1_Channel4->MADDR = (uint32_t)data;
    1cbc:	670d                	lui	a4,0x3
    1cbe:	d03e                	sw	a5,32(sp)
    1cc0:	91870793          	addi	a5,a4,-1768 # 2918 <message.0>
	uint32_t sec_time = 0;
    1cc4:	ca02                	sw	zero,20(sp)
	uint32_t counter = 0;
    1cc6:	c202                	sw	zero,4(sp)
    1cc8:	d23e                	sw	a5,36(sp)

	//# Analog: use PA1 and PA2
	modJoystick_setup();

	while(1) {
		uint32_t now = millis();
    1cca:	47a2                	lw	a5,8(sp)

		button_run(&button1, button_onChanged);
		modEncoder_task(now, &encoder_a, encoder_onChanged);

		if (now - sec_time > 1000) {
    1ccc:	4682                	lw	a3,0(sp)

void button_run(Button_t *model, void (*handler)(int, uint32_t)) {
    if (model->pin == 0xFF) return;
    
    uint32_t now = millis();
    uint8_t read = funDigitalRead(model->pin);
    1cce:	40011737          	lui	a4,0x40011
		uint32_t now = millis();
    1cd2:	439c                	lw	a5,0(a5)
    1cd4:	40070713          	addi	a4,a4,1024 # 40011400 <_eusrstack+0x20010c00>

    // Debounce check
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1cd8:	464d                	li	a2,19
    1cda:	cc3e                	sw	a5,24(sp)
    uint32_t now = millis();
    1cdc:	47a2                	lw	a5,8(sp)

void modEncoder_task(uint32_t current_time, Encoder_t *model, void (*handler)(Encoder_t *model)) {
	// if (current_time - encoder_debounceTime < 50) return;
	// encoder_debounceTime = current_time;

	uint16_t count = TIM2->CNT;
    1cde:	85a2                	mv	a1,s0
    1ce0:	439c                	lw	a5,0(a5)
    uint8_t read = funDigitalRead(model->pin);
    1ce2:	4718                	lw	a4,8(a4)
    uint32_t now = millis();
    1ce4:	c03e                	sw	a5,0(sp)
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1ce6:	40d78533          	sub	a0,a5,a3
    1cea:	26a67e63          	bgeu	a2,a0,1f66 <main+0xd5e>
    model->debounce_time = now;

    switch (model->btn_state) {
    1cee:	4689                	li	a3,2
    uint8_t read = funDigitalRead(model->pin);
    1cf0:	8b05                	andi	a4,a4,1
    switch (model->btn_state) {
    1cf2:	26d48363          	beq	s1,a3,1f58 <main+0xd50>
    1cf6:	468d                	li	a3,3
    1cf8:	16d48363          	beq	s1,a3,1e5e <main+0xc56>
    1cfc:	20049a63          	bnez	s1,1f10 <main+0xd08>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
    1d00:	1e070763          	beqz	a4,1eee <main+0xce6>
    model->debounce_time = millis();
    1d04:	47a2                	lw	a5,8(sp)
    model->btn_state = newState;
    1d06:	84ba                	mv	s1,a4
    model->debounce_time = millis();
    1d08:	439c                	lw	a5,0(a5)
    1d0a:	c03e                	sw	a5,0(sp)
    model->release_time = millis();
    1d0c:	47a2                	lw	a5,8(sp)
    1d0e:	439c                	lw	a5,0(a5)
    1d10:	c63e                	sw	a5,12(sp)
    1d12:	a285                	j	1e72 <main+0xc6a>
	rc = pf_open(filename);
    1d14:	4712                	lw	a4,4(sp)
    1d16:	478d                	li	a5,3
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) return FR_NO_FILE;	/* It is a directory */
    1d18:	448d                	li	s1,3
    1d1a:	c31c                	sw	a5,0(a4)
    1d1c:	8d3ff06f          	j	15ee <main+0x3e6>
    1d20:	4712                	lw	a4,4(sp)
    1d22:	4795                	li	a5,5
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1d24:	4495                	li	s1,5
    1d26:	c31c                	sw	a5,0(a4)
    1d28:	8c7ff06f          	j	15ee <main+0x3e6>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
    1d2c:	00174683          	lbu	a3,1(a4)
    1d30:	8a85                	andi	a3,a3,1
    1d32:	e299                	bnez	a3,1d38 <main+0xb30>
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    1d34:	4711                	li	a4,4
    1d36:	bbd1                	j	1b0a <main+0x902>
	remain = fs->fsize - fs->fptr;
    1d38:	4f14                	lw	a3,24(a4)
    1d3a:	01c72303          	lw	t1,28(a4)
    1d3e:	40d30333          	sub	t1,t1,a3
    1d42:	04000693          	li	a3,64
    1d46:	0066f463          	bgeu	a3,t1,1d4e <main+0xb46>
    1d4a:	04000313          	li	t1,64
    1d4e:	00fc                	addi	a5,sp,76
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
    1d50:	cc3e                	sw	a5,24(sp)
	while (btr)	{									/* Repeat until all data transferred */
    1d52:	06031663          	bnez	t1,1dbe <main+0xbb6>
		if (rc || !br) break; /* Error or end of file */
    1d56:	ca418793          	addi	a5,gp,-860 # 200000a0 <br>
    1d5a:	438c                	lw	a1,0(a5)
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    1d5c:	ca01a423          	sw	zero,-856(gp) # 200000a4 <rc>
		if (rc || !br) break; /* Error or end of file */
    1d60:	da0587e3          	beqz	a1,1b0e <main+0x906>
		printf("Read %u bytes\n\r", br);
    1d64:	6509                	lui	a0,0x2
    1d66:	5dc50513          	addi	a0,a0,1500 # 25dc <I2C1_ER_IRQHandler+0x1c2>
    1d6a:	910ff0ef          	jal	ra,e7a <printf>
		printf("string: %s\n\r", buff);
    1d6e:	6509                	lui	a0,0x2
    1d70:	00ec                	addi	a1,sp,76
    1d72:	5ec50513          	addi	a0,a0,1516 # 25ec <I2C1_ER_IRQHandler+0x1d2>
    1d76:	904ff0ef          	jal	ra,e7a <printf>
		total_bytes += br;
    1d7a:	ca418793          	addi	a5,gp,-860 # 200000a0 <br>
    1d7e:	4398                	lw	a4,0(a5)
    1d80:	94ba                	add	s1,s1,a4
		if(total_bytes % (16*1024) == 0){
    1d82:	01249713          	slli	a4,s1,0x12
    1d86:	d6071be3          	bnez	a4,1afc <main+0x8f4>
			cnt++;
    1d8a:	47d2                	lw	a5,20(sp)
			printf("%d kb so far...  ", total_bytes/1024);
    1d8c:	6509                	lui	a0,0x2
    1d8e:	00a4d593          	srli	a1,s1,0xa
			cnt++;
    1d92:	00178713          	addi	a4,a5,1
    1d96:	0ff77793          	andi	a5,a4,255
			printf("%d kb so far...  ", total_bytes/1024);
    1d9a:	5fc50513          	addi	a0,a0,1532 # 25fc <I2C1_ER_IRQHandler+0x1e2>
			cnt++;
    1d9e:	ca3e                	sw	a5,20(sp)
			printf("%d kb so far...  ", total_bytes/1024);
    1da0:	8daff0ef          	jal	ra,e7a <printf>
			putchar(spinner[cnt%4]);
    1da4:	47d2                	lw	a5,20(sp)
    1da6:	0037f713          	andi	a4,a5,3
    1daa:	017c                	addi	a5,sp,140
    1dac:	973e                	add	a4,a4,a5
    1dae:	fac74503          	lbu	a0,-84(a4)
    1db2:	b90ff0ef          	jal	ra,1142 <putchar>
			putchar('\r');
    1db6:	4535                	li	a0,13
    1db8:	b8aff0ef          	jal	ra,1142 <putchar>
    1dbc:	b381                	j	1afc <main+0x8f4>
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    1dbe:	4f14                	lw	a3,24(a4)
    1dc0:	1ff6f613          	andi	a2,a3,511
    1dc4:	ea39                	bnez	a2,1e1a <main+0xc12>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1dc6:	00274403          	lbu	s0,2(a4)
    1dca:	0096d613          	srli	a2,a3,0x9
    1dce:	147d                	addi	s0,s0,-1
    1dd0:	8c71                	and	s0,s0,a2
    1dd2:	0ff47413          	andi	s0,s0,255
			if (!cs) {								/* On the cluster boundary? */
    1dd6:	e405                	bnez	s0,1dfe <main+0xbf6>
				if (fs->fptr == 0) {				/* On the top of the file? */
    1dd8:	ea91                	bnez	a3,1dec <main+0xbe4>
					clst = fs->org_clust;
    1dda:	5308                	lw	a0,32(a4)
				if (clst <= 1) ABORT(FR_DISK_ERR);
    1ddc:	4685                	li	a3,1
    1dde:	00a6ef63          	bltu	a3,a0,1dfc <main+0xbf4>
    1de2:	000700a3          	sb	zero,1(a4)
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    1de6:	cad1a423          	sw	a3,-856(gp) # 200000a4 <rc>
    1dea:	b315                	j	1b0e <main+0x906>
					clst = get_fat(fs->curr_clust);
    1dec:	5348                	lw	a0,36(a4)
    1dee:	d21a                	sw	t1,36(sp)
    1df0:	d03a                	sw	a4,32(sp)
    1df2:	fa8fe0ef          	jal	ra,59a <get_fat>
    1df6:	5312                	lw	t1,36(sp)
    1df8:	5702                	lw	a4,32(sp)
    1dfa:	b7cd                	j	1ddc <main+0xbd4>
				fs->curr_clust = clst;				/* Update current cluster */
    1dfc:	d348                	sw	a0,36(a4)
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    1dfe:	5348                	lw	a0,36(a4)
    1e00:	d21a                	sw	t1,36(sp)
    1e02:	d03a                	sw	a4,32(sp)
    1e04:	d5afe0ef          	jal	ra,35e <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
    1e08:	5702                	lw	a4,32(sp)
    1e0a:	5312                	lw	t1,36(sp)
    1e0c:	e509                	bnez	a0,1e16 <main+0xc0e>
		if (dr) ABORT(FR_DISK_ERR);
    1e0e:	000700a3          	sb	zero,1(a4)
    1e12:	4685                	li	a3,1
    1e14:	bfc9                	j	1de6 <main+0xbde>
			fs->dsect = sect + cs;
    1e16:	942a                	add	s0,s0,a0
    1e18:	d700                	sw	s0,40(a4)
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    1e1a:	4f10                	lw	a2,24(a4)
    1e1c:	20000413          	li	s0,512
    1e20:	1ff67613          	andi	a2,a2,511
    1e24:	8c11                	sub	s0,s0,a2
    1e26:	00837363          	bgeu	t1,s0,1e2c <main+0xc24>
    1e2a:	841a                	mv	s0,t1
		dr = disk_readp(rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    1e2c:	570c                	lw	a1,40(a4)
    1e2e:	4562                	lw	a0,24(sp)
    1e30:	86a2                	mv	a3,s0
    1e32:	d21a                	sw	t1,36(sp)
    1e34:	d03a                	sw	a4,32(sp)
    1e36:	ecefe0ef          	jal	ra,504 <disk_readp>
		if (dr) ABORT(FR_DISK_ERR);
    1e3a:	5702                	lw	a4,32(sp)
    1e3c:	5312                	lw	t1,36(sp)
    1e3e:	f961                	bnez	a0,1e0e <main+0xc06>
		fs->fptr += rcnt;							/* Advances file read pointer */
    1e40:	4f14                	lw	a3,24(a4)
		btr -= rcnt; *br += rcnt;					/* Update read counter */
    1e42:	40830333          	sub	t1,t1,s0
		fs->fptr += rcnt;							/* Advances file read pointer */
    1e46:	96a2                	add	a3,a3,s0
    1e48:	cf14                	sw	a3,24(a4)
		btr -= rcnt; *br += rcnt;					/* Update read counter */
    1e4a:	ca418693          	addi	a3,gp,-860 # 200000a0 <br>
    1e4e:	4294                	lw	a3,0(a3)
    1e50:	ca418793          	addi	a5,gp,-860 # 200000a0 <br>
    1e54:	96a2                	add	a3,a3,s0
    1e56:	c394                	sw	a3,0(a5)
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
    1e58:	47e2                	lw	a5,24(sp)
    1e5a:	97a2                	add	a5,a5,s0
    1e5c:	bdd5                	j	1d50 <main+0xb48>
        if (read == 0) {
    1e5e:	eb11                	bnez	a4,1e72 <main+0xc6a>
    model->debounce_time = millis();
    1e60:	47a2                	lw	a5,8(sp)
    model->release_time = millis();
    1e62:	4722                	lw	a4,8(sp)
    model->btn_state = newState;
    1e64:	4481                	li	s1,0
    model->debounce_time = millis();
    1e66:	439c                	lw	a5,0(a5)
    model->release_time = millis();
    1e68:	4318                	lw	a4,0(a4)
    1e6a:	c63a                	sw	a4,12(sp)
            model->press_time = now;
    1e6c:	4702                	lw	a4,0(sp)
    model->debounce_time = millis();
    1e6e:	c03e                	sw	a5,0(sp)
            model->press_time = now;
    1e70:	c83a                	sw	a4,16(sp)
    1e72:	40000737          	lui	a4,0x40000
    1e76:	02475403          	lhu	s0,36(a4) # 40000024 <_eusrstack+0x1ffff824>
    1e7a:	0442                	slli	s0,s0,0x10
    1e7c:	8041                	srli	s0,s0,0x10
	model->count = count;

	if( count != model->last_count) {
    1e7e:	00858763          	beq	a1,s0,1e8c <main+0xc84>
	printf("Encoder: %d\n", model->last_count);
    1e82:	6509                	lui	a0,0x2
    1e84:	68050513          	addi	a0,a0,1664 # 2680 <I2C1_ER_IRQHandler+0x266>
    1e88:	ff3fe0ef          	jal	ra,e7a <printf>
		if (now - sec_time > 1000) {
    1e8c:	47e2                	lw	a5,24(sp)
    1e8e:	4752                	lw	a4,20(sp)
    1e90:	3e800693          	li	a3,1000
    1e94:	40e78733          	sub	a4,a5,a4
    1e98:	e2e6f9e3          	bgeu	a3,a4,1cca <main+0xac2>

uint16_t last_x = 0;
uint16_t last_y = 0;

int modJoystick_task() {
    printf("%4d %4d\n\r", adc_buffer[0], adc_buffer[1]);
    1e9c:	5782                	lw	a5,32(sp)
    1e9e:	6509                	lui	a0,0x2
    1ea0:	69050513          	addi	a0,a0,1680 # 2690 <I2C1_ER_IRQHandler+0x276>
    1ea4:	0007d583          	lhu	a1,0(a5)
    1ea8:	0027d603          	lhu	a2,2(a5)
    1eac:	05c2                	slli	a1,a1,0x10
    1eae:	0642                	slli	a2,a2,0x10
    1eb0:	8241                	srli	a2,a2,0x10
    1eb2:	81c1                	srli	a1,a1,0x10
    1eb4:	fc7fe0ef          	jal	ra,e7a <printf>
			sec_time = now;

			modJoystick_task();

			if (slave_mode != 0) {
    1eb8:	47f2                	lw	a5,28(sp)
    1eba:	cb91                	beqz	a5,1ece <main+0xcc6>
				modI2C_task(counter++);
    1ebc:	4792                	lw	a5,4(sp)
    1ebe:	00178713          	addi	a4,a5,1
    1ec2:	853e                	mv	a0,a5
    1ec4:	ca3a                	sw	a4,20(sp)
    1ec6:	9d2ff0ef          	jal	ra,1098 <modI2C_task>
    1eca:	4752                	lw	a4,20(sp)
    1ecc:	c23a                	sw	a4,4(sp)
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
    1ece:	40020737          	lui	a4,0x40020
    1ed2:	4374                	lw	a3,68(a4)
	DMA1_Channel4->MADDR = (uint32_t)data;
    1ed4:	5792                	lw	a5,36(sp)
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
    1ed6:	9af9                	andi	a3,a3,-2
    1ed8:	c374                	sw	a3,68(a4)
	DMA1_Channel4->CNTR = len;
    1eda:	46b9                	li	a3,14
    1edc:	c734                	sw	a3,72(a4)
	DMA1_Channel4->MADDR = (uint32_t)data;
    1ede:	cb3c                	sw	a5,80(a4)
	// Enable DMA channel to start the transfer
	DMA1_Channel4->CFGR |= DMA_CFGR1_EN;
    1ee0:	4374                	lw	a3,68(a4)
		uint32_t now = millis();
    1ee2:	47e2                	lw	a5,24(sp)
    1ee4:	0016e693          	ori	a3,a3,1
    1ee8:	c374                	sw	a3,68(a4)
    1eea:	ca3e                	sw	a5,20(sp)
    1eec:	bbf9                	j	1cca <main+0xac2>
            _reset_timers(BTN_UP, model);        // First Release

        } else {
            // Long press detection
            uint32_t press_duration = now - model->press_time;
    1eee:	4742                	lw	a4,16(sp)
    1ef0:	4782                	lw	a5,0(sp)
    1ef2:	40e786b3          	sub	a3,a5,a4
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1ef6:	6705                	lui	a4,0x1
    1ef8:	fa070713          	addi	a4,a4,-96 # fa0 <sprintf>
    1efc:	f6d77be3          	bgeu	a4,a3,1e72 <main+0xc6a>
			printf("Long Press\n"); break;
    1f00:	6509                	lui	a0,0x2
    1f02:	65450513          	addi	a0,a0,1620 # 2654 <I2C1_ER_IRQHandler+0x23a>
    1f06:	d422                	sw	s0,40(sp)
    1f08:	9baff0ef          	jal	ra,10c2 <puts>
    1f0c:	55a2                	lw	a1,40(sp)
    1f0e:	b795                	j	1e72 <main+0xc6a>
            }
        }
        break;

    case BTN_UP: {
        uint32_t release_duration = now - model->release_time;
    1f10:	4782                	lw	a5,0(sp)
    1f12:	46b2                	lw	a3,12(sp)
    1f14:	40d786b3          	sub	a3,a5,a3

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    1f18:	ef09                	bnez	a4,1f32 <main+0xd2a>
    1f1a:	09f00793          	li	a5,159
    1f1e:	00d7ea63          	bltu	a5,a3,1f32 <main+0xd2a>
    model->debounce_time = millis();
    1f22:	47a2                	lw	a5,8(sp)
    model->btn_state = newState;
    1f24:	4489                	li	s1,2
    model->debounce_time = millis();
    1f26:	439c                	lw	a5,0(a5)
    1f28:	c03e                	sw	a5,0(sp)
    model->release_time = millis();
    1f2a:	47a2                	lw	a5,8(sp)
    1f2c:	439c                	lw	a5,0(a5)
    1f2e:	c63e                	sw	a5,12(sp)
    1f30:	b789                	j	1e72 <main+0xc6a>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    1f32:	0a000713          	li	a4,160
    1f36:	4485                	li	s1,1
    1f38:	f2d77de3          	bgeu	a4,a3,1e72 <main+0xc6a>
			printf("Single Click\n");
    1f3c:	6509                	lui	a0,0x2
    1f3e:	d42e                	sw	a1,40(sp)
    1f40:	66050513          	addi	a0,a0,1632 # 2660 <I2C1_ER_IRQHandler+0x246>
			printf("Double Click\n");
    1f44:	97eff0ef          	jal	ra,10c2 <puts>
    model->debounce_time = millis();
    1f48:	47a2                	lw	a5,8(sp)
    model->btn_state = newState;
    1f4a:	448d                	li	s1,3
    model->debounce_time = millis();
    1f4c:	439c                	lw	a5,0(a5)
    1f4e:	c03e                	sw	a5,0(sp)
    model->release_time = millis();
    1f50:	47a2                	lw	a5,8(sp)
    1f52:	439c                	lw	a5,0(a5)
    1f54:	c63e                	sw	a5,12(sp)
    1f56:	bf5d                	j	1f0c <main+0xd04>
        break;
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
    1f58:	f0070de3          	beqz	a4,1e72 <main+0xc6a>
    1f5c:	6789                	lui	a5,0x2
    1f5e:	d422                	sw	s0,40(sp)
    1f60:	67078513          	addi	a0,a5,1648 # 2670 <I2C1_ER_IRQHandler+0x256>
    1f64:	b7c5                	j	1f44 <main+0xd3c>
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1f66:	c036                	sw	a3,0(sp)
    1f68:	b729                	j	1e72 <main+0xc6a>
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
    1f6a:	94d767e3          	bltu	a4,a3,18b8 <main+0x6b0>
	fs->fs_type = fmt;
    1f6e:	4709                	li	a4,2
    1f70:	00e78023          	sb	a4,0(a5)
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    1f74:	4752                	lw	a4,20(sp)
    1f76:	9722                	add	a4,a4,s0
    1f78:	cb98                	sw	a4,16(a5)
    1f7a:	ba89                	j	18cc <main+0x6c4>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1f7c:	4581                	li	a1,0
    1f7e:	07a00513          	li	a0,122
    1f82:	cf6fe0ef          	jal	ra,478 <send_cmd>
    1f86:	e4051363          	bnez	a0,15cc <main+0x3c4>
    1f8a:	4401                	li	s0,0
					for (n = 0; n < 4; n++) buf[n] = rcvr_mmc();
    1f8c:	cccfe0ef          	jal	ra,458 <rcvr_mmc>
    1f90:	00fc                	addi	a5,sp,76
    1f92:	97a2                	add	a5,a5,s0
    1f94:	00a78023          	sb	a0,0(a5)
    1f98:	0405                	addi	s0,s0,1
    1f9a:	4791                	li	a5,4
    1f9c:	fef418e3          	bne	s0,a5,1f8c <main+0xd84>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    1fa0:	04c14783          	lbu	a5,76(sp)
    1fa4:	4431                	li	s0,12
    1fa6:	0407f793          	andi	a5,a5,64
    1faa:	e2079263          	bnez	a5,15ce <main+0x3c6>
    1fae:	4411                	li	s0,4
    1fb0:	e1eff06f          	j	15ce <main+0x3c6>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1fb4:	20000593          	li	a1,512
    1fb8:	05000513          	li	a0,80
    1fbc:	cbcfe0ef          	jal	ra,478 <send_cmd>
    1fc0:	e0051663          	bnez	a0,15cc <main+0x3c4>
    1fc4:	e0aff06f          	j	15ce <main+0x3c6>
			if (ni != 8 || c != '.') break;
    1fc8:	9c5715e3          	bne	a4,t0,1992 <main+0x78a>
			i = 8; ni = 11;
    1fcc:	47ad                	li	a5,11
    1fce:	ba75                	j	198a <main+0x782>

00001fd0 <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    1fd0:	fdc10113          	addi	sp,sp,-36
    1fd4:	ce22                	sw	s0,28(sp)
    1fd6:	d006                	sw	ra,32(sp)
    1fd8:	cc26                	sw	s1,24(sp)
    1fda:	842a                	mv	s0,a0
	if( tween <= 0 ) return hexa;
    1fdc:	0ac05f63          	blez	a2,209a <TweenHexColors+0xca>
	if( tween >= 255 ) return hexb;
    1fe0:	0fe00793          	li	a5,254
    1fe4:	84ae                	mv	s1,a1
    1fe6:	0cc7c163          	blt	a5,a2,20a8 <TweenHexColors+0xd8>
	int32_t aamt = 255-tween;
    1fea:	0ff00293          	li	t0,255
    1fee:	40c282b3          	sub	t0,t0,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1ff2:	8596                	mv	a1,t0
    1ff4:	0ff57513          	andi	a0,a0,255
    1ff8:	c216                	sw	t0,4(sp)
	int32_t aamt = 255-tween;
    1ffa:	c032                	sw	a2,0(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1ffc:	1fffe097          	auipc	ra,0x1fffe
    2000:	044080e7          	jalr	68(ra) # 20000040 <FastMultiply>
    2004:	4602                	lw	a2,0(sp)
    2006:	ca2a                	sw	a0,20(sp)
    2008:	0ff4f513          	andi	a0,s1,255
    200c:	85b2                	mv	a1,a2
    200e:	1fffe097          	auipc	ra,0x1fffe
    2012:	032080e7          	jalr	50(ra) # 20000040 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    2016:	4292                	lw	t0,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    2018:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    201a:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    201e:	8596                	mv	a1,t0
    2020:	0ff57513          	andi	a0,a0,255
    2024:	c616                	sw	t0,12(sp)
    2026:	1fffe097          	auipc	ra,0x1fffe
    202a:	01a080e7          	jalr	26(ra) # 20000040 <FastMultiply>
    202e:	4602                	lw	a2,0(sp)
    2030:	c42a                	sw	a0,8(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    2032:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    2036:	85b2                	mv	a1,a2
    2038:	0ff57513          	andi	a0,a0,255
    203c:	c232                	sw	a2,4(sp)
    203e:	1fffe097          	auipc	ra,0x1fffe
    2042:	002080e7          	jalr	2(ra) # 20000040 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    2046:	42b2                	lw	t0,12(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    2048:	c02a                	sw	a0,0(sp)
	int32_t hag = (hexa>>16) & 0xff;
    204a:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    204e:	8596                	mv	a1,t0
    2050:	0ff57513          	andi	a0,a0,255
    2054:	1fffe097          	auipc	ra,0x1fffe
    2058:	fec080e7          	jalr	-20(ra) # 20000040 <FastMultiply>
    205c:	4612                	lw	a2,4(sp)
    205e:	842a                	mv	s0,a0
	int32_t hbg = (hexb>>16) & 0xff;
    2060:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    2064:	85b2                	mv	a1,a2
    2066:	0ff57513          	andi	a0,a0,255
    206a:	1fffe097          	auipc	ra,0x1fffe
    206e:	fd6080e7          	jalr	-42(ra) # 20000040 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    2072:	4342                	lw	t1,16(sp)
    2074:	47d2                	lw	a5,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    2076:	4682                	lw	a3,0(sp)
    2078:	4722                	lw	a4,8(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    207a:	979a                	add	a5,a5,t1
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    207c:	942a                	add	s0,s0,a0
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    207e:	9736                	add	a4,a4,a3
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    2080:	08078793          	addi	a5,a5,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    2084:	08070713          	addi	a4,a4,128
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    2088:	08040413          	addi	s0,s0,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    208c:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    208e:	f0077713          	andi	a4,a4,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    2092:	8021                	srli	s0,s0,0x8
	return b | (r<<8) | (g<<16);
    2094:	8fd9                	or	a5,a5,a4
    2096:	0442                	slli	s0,s0,0x10
    2098:	8c5d                	or	s0,s0,a5
}
    209a:	5082                	lw	ra,32(sp)
    209c:	8522                	mv	a0,s0
    209e:	4472                	lw	s0,28(sp)
    20a0:	44e2                	lw	s1,24(sp)
    20a2:	02410113          	addi	sp,sp,36
    20a6:	8082                	ret
	if( tween >= 255 ) return hexb;
    20a8:	842e                	mv	s0,a1
    20aa:	bfc5                	j	209a <TweenHexColors+0xca>

000020ac <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    20ac:	1111                	addi	sp,sp,-28
    20ae:	c826                	sw	s1,16(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    20b0:	c981a483          	lw	s1,-872(gp) # 20000094 <WS2812LEDs>
	int place = WS2812LEDPlace;
    20b4:	c9418713          	addi	a4,gp,-876 # 20000090 <WS2812LEDPlace>
    20b8:	4318                	lw	a4,0(a4)
    20ba:	c9418613          	addi	a2,gp,-876 # 20000090 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    20be:	ca22                	sw	s0,20(sp)
    20c0:	cc06                	sw	ra,24(sp)
    20c2:	87aa                	mv	a5,a0
    20c4:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
    20c6:	03050693          	addi	a3,a0,48
    20ca:	c032                	sw	a2,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    20cc:	04074a63          	bltz	a4,2120 <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    20d0:	04f68a63          	beq	a3,a5,2124 <WS2812FillBuffSec.constprop.0+0x78>
	{
		if( place >= ledcount )
    20d4:	04974f63          	blt	a4,s1,2132 <WS2812FillBuffSec.constprop.0+0x86>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    20d8:	40f68633          	sub	a2,a3,a5
    20dc:	4581                	li	a1,0
    20de:	853e                	mv	a0,a5
    20e0:	c23a                	sw	a4,4(sp)
    20e2:	ee1fe0ef          	jal	ra,fc2 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    20e6:	4712                	lw	a4,4(sp)
    20e8:	cc15                	beqz	s0,2124 <WS2812FillBuffSec.constprop.0+0x78>
			{
				if( place == ledcount )
    20ea:	00e49a63          	bne	s1,a4,20fe <WS2812FillBuffSec.constprop.0+0x52>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    20ee:	400206b7          	lui	a3,0x40020
    20f2:	5a9c                	lw	a5,48(a3)
    20f4:	fdf7f793          	andi	a5,a5,-33
    20f8:	da9c                	sw	a5,48(a3)
					WS2812BLEDInUse = 0;
    20fa:	c801a823          	sw	zero,-880(gp) # 2000008c <WS2812BLEDInUse>
				}
				place++;
    20fe:	0705                	addi	a4,a4,1
    2100:	a015                	j	2124 <WS2812FillBuffSec.constprop.0+0x78>
		(*ptr++) = 0;
    2102:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
    2106:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    210a:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    210e:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    2112:	00079423          	sh	zero,8(a5)
		place++;
    2116:	0705                	addi	a4,a4,1
    2118:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
    211a:	fe079f23          	sh	zero,-2(a5)
    211e:	b77d                	j	20cc <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
    2120:	fef691e3          	bne	a3,a5,2102 <WS2812FillBuffSec.constprop.0+0x56>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
    2124:	4782                	lw	a5,0(sp)
}
    2126:	40e2                	lw	ra,24(sp)
    2128:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
    212a:	c398                	sw	a4,0(a5)
}
    212c:	44c2                	lw	s1,16(sp)
    212e:	0171                	addi	sp,sp,28
    2130:	8082                	ret
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    2132:	c4018613          	addi	a2,gp,-960 # 2000003c <tween>
    2136:	4210                	lw	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    2138:	00170293          	addi	t0,a4,1
    213c:	9732                	add	a4,a4,a2
    213e:	0ff00613          	li	a2,255
    2142:	00e04363          	bgtz	a4,2148 <WS2812FillBuffSec.constprop.0+0x9c>
    2146:	4601                	li	a2,0
    2148:	007f45b7          	lui	a1,0x7f4
    214c:	650d                	lui	a0,0x3
    214e:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.d894f163+0x7ea699>
    2152:	0ff50513          	addi	a0,a0,255 # 30ff <_data_lma+0x7bb>
    2156:	c616                	sw	t0,12(sp)
    2158:	c43e                	sw	a5,8(sp)
    215a:	c236                	sw	a3,4(sp)
    215c:	3d95                	jal	1fd0 <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    215e:	00b55613          	srli	a2,a0,0xb
    2162:	670d                	lui	a4,0x3
    2164:	87870713          	addi	a4,a4,-1928 # 2878 <bitquartets.10>
    2168:	8a79                	andi	a2,a2,30
    216a:	963a                	add	a2,a2,a4
    216c:	47a2                	lw	a5,8(sp)
    216e:	00065603          	lhu	a2,0(a2) # 40021000 <_eusrstack+0x20020800>
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    2172:	42b2                	lw	t0,12(sp)
    2174:	4692                	lw	a3,4(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    2176:	00c79023          	sh	a2,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    217a:	00755613          	srli	a2,a0,0x7
    217e:	8a79                	andi	a2,a2,30
    2180:	963a                	add	a2,a2,a4
    2182:	00065603          	lhu	a2,0(a2)
		ptr += 6;
    2186:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    2188:	fec79b23          	sh	a2,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    218c:	00355613          	srli	a2,a0,0x3
    2190:	8a79                	andi	a2,a2,30
    2192:	963a                	add	a2,a2,a4
    2194:	00065603          	lhu	a2,0(a2)
    2198:	fec79c23          	sh	a2,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    219c:	00f57613          	andi	a2,a0,15
    21a0:	0606                	slli	a2,a2,0x1
    21a2:	963a                	add	a2,a2,a4
    21a4:	00065603          	lhu	a2,0(a2)
    21a8:	fec79d23          	sh	a2,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    21ac:	01355613          	srli	a2,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    21b0:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    21b2:	8a79                	andi	a2,a2,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    21b4:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    21b6:	963a                	add	a2,a2,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    21b8:	953a                	add	a0,a0,a4
    21ba:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    21be:	00065603          	lhu	a2,0(a2)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    21c2:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    21c6:	fec79e23          	sh	a2,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    21ca:	8716                	mv	a4,t0
    21cc:	b711                	j	20d0 <WS2812FillBuffSec.constprop.0+0x24>

000021ce <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    21ce:	fcc10113          	addi	sp,sp,-52
    21d2:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    21d4:	400207b7          	lui	a5,0x40020
    21d8:	439c                	lw	a5,0(a5)
{
    21da:	d022                	sw	s0,32(sp)
    21dc:	ce26                	sw	s1,28(sp)
    21de:	d806                	sw	ra,48(sp)
    21e0:	d616                	sw	t0,44(sp)
    21e2:	d41a                	sw	t1,40(sp)
    21e4:	d21e                	sw	t2,36(sp)
    21e6:	cc2a                	sw	a0,24(sp)
    21e8:	ca2e                	sw	a1,20(sp)
    21ea:	c832                	sw	a2,16(sp)
    21ec:	c636                	sw	a3,12(sp)
    21ee:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    21f0:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    21f2:	40020437          	lui	s0,0x40020
    21f6:	10000493          	li	s1,256
    21fa:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    21fc:	4782                	lw	a5,0(sp)
    21fe:	4007f793          	andi	a5,a5,1024
    2202:	c789                	beqz	a5,220c <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    2204:	4585                	li	a1,1
    2206:	cb818513          	addi	a0,gp,-840 # 200000b4 <WS2812dmabuff>
    220a:	354d                	jal	20ac <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    220c:	4782                	lw	a5,0(sp)
    220e:	2007f793          	andi	a5,a5,512
    2212:	c789                	beqz	a5,221c <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    2214:	4581                	li	a1,0
    2216:	ce818513          	addi	a0,gp,-792 # 200000e4 <WS2812dmabuff+0x30>
    221a:	3d49                	jal	20ac <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    221c:	401c                	lw	a5,0(s0)
    221e:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    2220:	4782                	lw	a5,0(sp)
    2222:	1007f793          	andi	a5,a5,256
    2226:	fbf1                	bnez	a5,21fa <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    2228:	5402                	lw	s0,32(sp)
    222a:	50c2                	lw	ra,48(sp)
    222c:	52b2                	lw	t0,44(sp)
    222e:	5322                	lw	t1,40(sp)
    2230:	5392                	lw	t2,36(sp)
    2232:	44f2                	lw	s1,28(sp)
    2234:	4562                	lw	a0,24(sp)
    2236:	45d2                	lw	a1,20(sp)
    2238:	4642                	lw	a2,16(sp)
    223a:	46b2                	lw	a3,12(sp)
    223c:	4722                	lw	a4,8(sp)
    223e:	4792                	lw	a5,4(sp)
    2240:	03410113          	addi	sp,sp,52
    2244:	30200073          	mret

00002248 <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
    2248:	1151                	addi	sp,sp,-12
    224a:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    224c:	e000f7b7          	lui	a5,0xe000f
{
    2250:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    2252:	4b98                	lw	a4,16(a5)
{
    2254:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    2256:	66b1                	lui	a3,0xc
    2258:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x21d9>
    225c:	9736                	add	a4,a4,a3
    225e:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
    2260:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
    2264:	cb018793          	addi	a5,gp,-848 # 200000ac <systick_millis>
    2268:	4398                	lw	a4,0(a5)
}
    226a:	46a2                	lw	a3,8(sp)
	systick_millis++;
    226c:	0705                	addi	a4,a4,1
    226e:	c398                	sw	a4,0(a5)
}
    2270:	4712                	lw	a4,4(sp)
    2272:	4782                	lw	a5,0(sp)
    2274:	0131                	addi	sp,sp,12
    2276:	30200073          	mret

0000227a <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    227a:	7179                	addi	sp,sp,-48
    227c:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    227e:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    2282:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    2284:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    2288:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    228c:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    2290:	cc26                	sw	s1,24(sp)
    2292:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    2294:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    2298:	d416                	sw	t0,40(sp)
    229a:	d21a                	sw	t1,36(sp)
    229c:	d01e                	sw	t2,32(sp)
    229e:	ce22                	sw	s0,28(sp)
    22a0:	ca2a                	sw	a0,20(sp)
    22a2:	c82e                	sw	a1,16(sp)
    22a4:	c632                	sw	a2,12(sp)
    22a6:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    22a8:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    22aa:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    22ac:	c305                	beqz	a4,22cc <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    22ae:	14418713          	addi	a4,gp,324 # 20000540 <i2c_slave_state>
    22b2:	4685                	li	a3,1
    22b4:	07c2                	slli	a5,a5,0x10
    22b6:	83c1                	srli	a5,a5,0x10
    22b8:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    22bc:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    22c0:	839d                	srli	a5,a5,0x7
    22c2:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    22c4:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    22c8:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    22cc:	0404f793          	andi	a5,s1,64
    22d0:	c795                	beqz	a5,22fc <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    22d2:	14418793          	addi	a5,gp,324 # 20000540 <i2c_slave_state>
    22d6:	0007c703          	lbu	a4,0(a5)
    22da:	c379                	beqz	a4,23a0 <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
    22dc:	40005737          	lui	a4,0x40005
    22e0:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    22e4:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    22e8:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    22ec:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    22f0:	0ff77713          	andi	a4,a4,255
    22f4:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    22f8:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    22fc:	0804f793          	andi	a5,s1,128
    2300:	c7a1                	beqz	a5,2348 <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    2302:	14418793          	addi	a5,gp,324 # 20000540 <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    2306:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    230a:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    230e:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    2312:	400057b7          	lui	a5,0x40005
    2316:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    231a:	14418413          	addi	s0,gp,324 # 20000540 <i2c_slave_state>
    231e:	cb79                	beqz	a4,23f4 <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    2320:	01044703          	lbu	a4,16(s0) # 40020010 <_eusrstack+0x2001f810>
    2324:	0ee57663          	bgeu	a0,a4,2410 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    2328:	4458                	lw	a4,12(s0)
    232a:	972a                	add	a4,a4,a0
    232c:	00074703          	lbu	a4,0(a4)
    2330:	0ff77713          	andi	a4,a4,255
    2334:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    2338:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    233a:	c391                	beqz	a5,233e <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    233c:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    233e:	00244783          	lbu	a5,2(s0)
    2342:	0785                	addi	a5,a5,1
    2344:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    2348:	88c1                	andi	s1,s1,16
    234a:	cc85                	beqz	s1,2382 <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    234c:	40005737          	lui	a4,0x40005
    2350:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    2354:	07c2                	slli	a5,a5,0x10
    2356:	83c1                	srli	a5,a5,0x10
    2358:	dff7f793          	andi	a5,a5,-513
    235c:	07c2                	slli	a5,a5,0x10
    235e:	83c1                	srli	a5,a5,0x10
    2360:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
    2364:	14418793          	addi	a5,gp,324 # 20000540 <i2c_slave_state>
    2368:	02a7c703          	lbu	a4,42(a5)
    236c:	c74d                	beqz	a4,2416 <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
    236e:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    2370:	cb09                	beqz	a4,2382 <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    2372:	0017c503          	lbu	a0,1(a5)
    2376:	0027c583          	lbu	a1,2(a5)
    237a:	8d89                	sub	a1,a1,a0
    237c:	0ff5f593          	andi	a1,a1,255
    2380:	9702                	jalr	a4
            }
        }
    }
}
    2382:	4472                	lw	s0,28(sp)
    2384:	50b2                	lw	ra,44(sp)
    2386:	52a2                	lw	t0,40(sp)
    2388:	5312                	lw	t1,36(sp)
    238a:	5382                	lw	t2,32(sp)
    238c:	44e2                	lw	s1,24(sp)
    238e:	4552                	lw	a0,20(sp)
    2390:	45c2                	lw	a1,16(sp)
    2392:	4632                	lw	a2,12(sp)
    2394:	46a2                	lw	a3,8(sp)
    2396:	4712                	lw	a4,4(sp)
    2398:	4782                	lw	a5,0(sp)
    239a:	6145                	addi	sp,sp,48
    239c:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    23a0:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    23a4:	4705                	li	a4,1
    23a6:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    23aa:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    23ae:	c695                	beqz	a3,23da <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    23b0:	0107c683          	lbu	a3,16(a5)
    23b4:	f4d774e3          	bgeu	a4,a3,22fc <I2C1_EV_IRQHandler+0x82>
    23b8:	0287c683          	lbu	a3,40(a5)
    23bc:	f2a1                	bnez	a3,22fc <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    23be:	400056b7          	lui	a3,0x40005
    23c2:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    23c6:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    23c8:	96ba                	add	a3,a3,a4
    23ca:	0ff67613          	andi	a2,a2,255
    23ce:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    23d2:	0705                	addi	a4,a4,1
    23d4:	00e78123          	sb	a4,2(a5)
    23d8:	b715                	j	22fc <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    23da:	0087c683          	lbu	a3,8(a5)
    23de:	f0d77fe3          	bgeu	a4,a3,22fc <I2C1_EV_IRQHandler+0x82>
    23e2:	01c7c683          	lbu	a3,28(a5)
    23e6:	fa99                	bnez	a3,22fc <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    23e8:	400056b7          	lui	a3,0x40005
    23ec:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    23f0:	43d4                	lw	a3,4(a5)
    23f2:	bfd9                	j	23c8 <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    23f4:	00844703          	lbu	a4,8(s0)
    23f8:	00e57c63          	bgeu	a0,a4,2410 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    23fc:	4058                	lw	a4,4(s0)
    23fe:	972a                	add	a4,a4,a0
    2400:	00074703          	lbu	a4,0(a4)
    2404:	0ff77713          	andi	a4,a4,255
    2408:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    240c:	4c1c                	lw	a5,24(s0)
    240e:	b735                	j	233a <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    2410:	00079823          	sh	zero,16(a5)
    2414:	bf15                	j	2348 <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    2416:	4bd8                	lw	a4,20(a5)
    2418:	bfa1                	j	2370 <I2C1_EV_IRQHandler+0xf6>

0000241a <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    241a:	1151                	addi	sp,sp,-12
    241c:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
    241e:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
    2422:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    2424:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    2428:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    242a:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    242e:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
    2432:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    2434:	cf89                	beqz	a5,244e <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    2436:	41475783          	lhu	a5,1044(a4)
    243a:	40070713          	addi	a4,a4,1024
    243e:	07c2                	slli	a5,a5,0x10
    2440:	83c1                	srli	a5,a5,0x10
    2442:	eff7f793          	andi	a5,a5,-257
    2446:	07c2                	slli	a5,a5,0x10
    2448:	83c1                	srli	a5,a5,0x10
    244a:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    244e:	2006f793          	andi	a5,a3,512
    2452:	cf89                	beqz	a5,246c <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    2454:	40005737          	lui	a4,0x40005
    2458:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    245c:	07c2                	slli	a5,a5,0x10
    245e:	83c1                	srli	a5,a5,0x10
    2460:	dff7f793          	andi	a5,a5,-513
    2464:	07c2                	slli	a5,a5,0x10
    2466:	83c1                	srli	a5,a5,0x10
    2468:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    246c:	4006f693          	andi	a3,a3,1024
    2470:	ce89                	beqz	a3,248a <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    2472:	40005737          	lui	a4,0x40005
    2476:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    247a:	07c2                	slli	a5,a5,0x10
    247c:	83c1                	srli	a5,a5,0x10
    247e:	bff7f793          	andi	a5,a5,-1025
    2482:	07c2                	slli	a5,a5,0x10
    2484:	83c1                	srli	a5,a5,0x10
    2486:	40f71a23          	sh	a5,1044(a4)
    }
}
    248a:	46a2                	lw	a3,8(sp)
    248c:	4712                	lw	a4,4(sp)
    248e:	4782                	lw	a5,0(sp)
    2490:	0131                	addi	sp,sp,12
    2492:	30200073          	mret
    2496:	0000                	unimp
    2498:	63656863          	bltu	a0,s6,2ac8 <_data_lma+0x184>
    249c:	73665f6b          	0x73665f6b
    24a0:	655f 7272 203a      	0x203a7272655f
    24a6:	6162                	flw	ft2,24(sp)
    24a8:	2064                	fld	fs1,192(s0)
    24aa:	6e676973          	csrrsi	s2,0x6e6,14
    24ae:	7461                	lui	s0,0xffff8
    24b0:	7275                	lui	tp,0xffffd
    24b2:	2065                	jal	255a <I2C1_ER_IRQHandler+0x140>
    24b4:	3025                	jal	1cdc <main+0xad4>
    24b6:	5838                	lw	a4,112(s0)
    24b8:	0d0a                	slli	s10,s10,0x2
    24ba:	0000                	unimp
    24bc:	4d49                	li	s10,18
    24be:	5720                	lw	s0,104(a4)
    24c0:	4952                	lw	s2,20(sp)
    24c2:	4554                	lw	a3,12(a0)
    24c4:	4e45                	li	t3,17
    24c6:	5420                	lw	s0,104(s0)
    24c8:	000d0a4f          	fnmadd.s	fs4,fs10,ft0,ft0,rne
    24cc:	4d49                	li	s10,18
    24ce:	5220                	lw	s0,96(a2)
    24d0:	4145                	li	sp,17
    24d2:	4544                	lw	s1,12(a0)
    24d4:	204e                	fld	ft0,208(sp)
    24d6:	5246                	lw	tp,112(sp)
    24d8:	0a2e4d4f          	fnmadd.d	fs10,ft8,ft2,ft1,rmm
    24dc:	000d                	c.nop	3
    24de:	0000                	unimp
    24e0:	6e756f63          	bltu	a0,t2,2bde <_data_lma+0x29a>
    24e4:	6574                	flw	fa3,76(a0)
    24e6:	2072                	fld	ft0,280(sp)
    24e8:	6c25                	lui	s8,0x9
    24ea:	0075                	c.nop	29
    24ec:	000a                	c.slli	zero,0x2
    24ee:	0000                	unimp
    24f0:	3249                	jal	1e72 <main+0xc6a>
    24f2:	30203a43          	fmadd.s	fs4,ft0,ft2,ft6,rup
    24f6:	2578                	fld	fa4,200(a0)
    24f8:	3230                	fld	fa2,96(a2)
    24fa:	0058                	addi	a4,sp,4
    24fc:	6574                	flw	fa3,76(a0)
    24fe:	69667473          	csrrci	s0,0x696,12
    2502:	656c                	flw	fa1,76(a0)
    2504:	742e                	flw	fs0,232(sp)
    2506:	7478                	flw	fa4,108(s0)
    2508:	0000                	unimp
    250a:	0000                	unimp
    250c:	6146                	flw	ft2,80(sp)
    250e:	6c69                	lui	s8,0x1a
    2510:	6465                	lui	s0,0x19
    2512:	7420                	flw	fs0,104(s0)
    2514:	6e69206f          	j	94bfa <lib_i2c.c.d894f163+0x8b253>
    2518:	7469                	lui	s0,0xffffa
    251a:	4920                	lw	s0,80(a0)
    251c:	4332                	lw	t1,12(sp)
    251e:	0000                	unimp
    2520:	6548                	flw	fa0,12(a0)
    2522:	6c6c                	flw	fa1,92(s0)
    2524:	6542206f          	j	24b78 <lib_i2c.c.d894f163+0x1b1d1>
    2528:	2165                	jal	29d0 <_data_lma+0x8c>
    252a:	0000                	unimp
    252c:	2d2d                	jal	2b66 <_data_lma+0x222>
    252e:	2d2d                	jal	2b68 <_data_lma+0x224>
    2530:	6e616353          	0x6e616353
    2534:	696e                	flw	fs2,216(sp)
    2536:	676e                	flw	fa4,216(sp)
    2538:	4920                	lw	s0,80(a0)
    253a:	4332                	lw	t1,12(sp)
    253c:	4220                	lw	s0,64(a2)
    253e:	7375                	lui	t1,0xffffd
    2540:	6620                	flw	fs0,72(a2)
    2542:	4420726f          	jal	tp,9984 <nrf24l01_low_level.c.429e1874+0x459>
    2546:	7665                	lui	a2,0xffff9
    2548:	6369                	lui	t1,0x1a
    254a:	7365                	lui	t1,0xffff9
    254c:	2d2d                	jal	2b86 <_data_lma+0x242>
    254e:	002d                	c.nop	11
    2550:	2d2d                	jal	2b8a <_data_lma+0x246>
    2552:	2d2d                	jal	2b8c <_data_lma+0x248>
    2554:	6f44                	flw	fs1,28(a4)
    2556:	656e                	flw	fa0,216(sp)
    2558:	5320                	lw	s0,96(a4)
    255a:	6e6e6163          	bltu	t3,t1,2c3c <_data_lma+0x2f8>
    255e:	6e69                	lui	t3,0x1a
    2560:	2d2d2d67          	0x2d2d2d67
    2564:	0a2d                	addi	s4,s4,11
    2566:	0000                	unimp
    2568:	3249                	jal	1eea <main+0xce2>
    256a:	6c532043          	0x6c532043
    256e:	7661                	lui	a2,0xffff8
    2570:	2065                	jal	2618 <I2C1_ER_IRQHandler+0x1fe>
    2572:	6f6d                	lui	t5,0x1b
    2574:	6564                	flw	fs1,76(a0)
    2576:	0000                	unimp
    2578:	4d0a                	lw	s10,128(sp)
    257a:	746e756f          	jal	a0,e9cc0 <lib_i2c.c.d894f163+0xe0319>
    257e:	6e69                	lui	t3,0x1a
    2580:	6f762067          	0x6f762067
    2584:	756c                	flw	fa1,108(a0)
    2586:	656d                	lui	a0,0x1b
    2588:	0a2e                	slli	s4,s4,0xb
    258a:	000d                	c.nop	3
    258c:	6e65704f          	fnmadd.q	ft0,fa0,ft6,fa3
    2590:	6e69                	lui	t3,0x1a
    2592:	69662067          	0x69662067
    2596:	656c                	flw	fa1,76(a0)
    2598:	2220                	fld	fs0,64(a2)
    259a:	7325                	lui	t1,0xfffe9
    259c:	0a22                	slli	s4,s4,0x8
    259e:	000d                	c.nop	3
    25a0:	6568                	flw	fa0,76(a0)
    25a2:	6c6c                	flw	fa1,92(s0)
    25a4:	6f77206f          	j	7549a <lib_i2c.c.d894f163+0x6baf3>
    25a8:	6c72                	flw	fs8,28(sp)
    25aa:	2064                	fld	fs1,192(s0)
    25ac:	3939                	jal	21ca <WS2812FillBuffSec.constprop.0+0x11e>
    25ae:	3939                	jal	21cc <WS2812FillBuffSec.constprop.0+0x120>
    25b0:	3939                	jal	21ce <DMA1_Channel3_IRQHandler>
    25b2:	3939                	jal	21d0 <DMA1_Channel3_IRQHandler+0x2>
    25b4:	3939                	jal	21d2 <DMA1_Channel3_IRQHandler+0x4>
    25b6:	3939                	jal	21d4 <DMA1_Channel3_IRQHandler+0x6>
    25b8:	3939                	jal	21d6 <DMA1_Channel3_IRQHandler+0x8>
    25ba:	3939                	jal	21d8 <DMA1_Channel3_IRQHandler+0xa>
    25bc:	3939                	jal	21da <DMA1_Channel3_IRQHandler+0xc>
    25be:	3939                	jal	21dc <DMA1_Channel3_IRQHandler+0xe>
    25c0:	0a21                	addi	s4,s4,8
    25c2:	000d                	c.nop	3
    25c4:	6c0a                	flw	fs8,128(sp)
    25c6:	6b656573          	csrrsi	a0,0x6b6,10
    25ca:	7420                	flw	fs0,104(s0)
    25cc:	7525206f          	j	54d1e <lib_i2c.c.d894f163+0x4b377>
    25d0:	0d0a                	slli	s10,s10,0x2
    25d2:	0000                	unimp
    25d4:	6372                	flw	ft6,28(sp)
    25d6:	253d                	jal	2c04 <_data_lma+0x2c0>
    25d8:	0a75                	addi	s4,s4,29
    25da:	000d                	c.nop	3
    25dc:	6552                	flw	fa0,20(sp)
    25de:	6461                	lui	s0,0x18
    25e0:	2520                	fld	fs0,72(a0)
    25e2:	2075                	jal	268e <I2C1_ER_IRQHandler+0x274>
    25e4:	7962                	flw	fs2,56(sp)
    25e6:	6574                	flw	fa3,76(a0)
    25e8:	000d0a73          	0xd0a73
    25ec:	69727473          	csrrci	s0,0x697,4
    25f0:	676e                	flw	fa4,216(sp)
    25f2:	203a                	fld	ft0,392(sp)
    25f4:	7325                	lui	t1,0xfffe9
    25f6:	0d0a                	slli	s10,s10,0x2
    25f8:	0000                	unimp
    25fa:	0000                	unimp
    25fc:	6425                	lui	s0,0x9
    25fe:	6b20                	flw	fs0,80(a4)
    2600:	2062                	fld	ft0,24(sp)
    2602:	66206f73          	csrrsi	t5,0x662,0
    2606:	7261                	lui	tp,0xffff8
    2608:	2e2e                	fld	ft8,200(sp)
    260a:	202e                	fld	ft0,200(sp)
    260c:	0020                	addi	s0,sp,8
    260e:	0000                	unimp
    2610:	0d0a                	slli	s10,s10,0x2
    2612:	6f4c                	flw	fa1,28(a4)
    2614:	6461                	lui	s0,0x18
    2616:	6465                	lui	s0,0x19
    2618:	2520                	fld	fs0,72(a0)
    261a:	2064                	fld	fs1,192(s0)
    261c:	6f6c696b          	0x6f6c696b
    2620:	7962                	flw	fs2,56(sp)
    2622:	6574                	flw	fa3,76(a0)
    2624:	0d0a2e73          	csrrs	t3,0xd0,s4
    2628:	0000                	unimp
    262a:	0000                	unimp
    262c:	6572                	flw	fa0,28(sp)
    262e:	6461                	lui	s0,0x18
    2630:	7220                	flw	fs0,96(a2)
    2632:	7365                	lui	t1,0xffff9
    2634:	6c75                	lui	s8,0x1d
    2636:	3a74                	fld	fa3,240(a2)
    2638:	2520                	fld	fs0,72(a0)
    263a:	0a75                	addi	s4,s4,29
    263c:	000d                	c.nop	3
    263e:	0000                	unimp
    2640:	74697277          	0x74697277
    2644:	2065                	jal	26ec <FONT_7x5+0x50>
    2646:	7265                	lui	tp,0xffff9
    2648:	6f72                	flw	ft10,28(sp)
    264a:	3a72                	fld	fs4,312(sp)
    264c:	2520                	fld	fs0,72(a0)
    264e:	0a75                	addi	s4,s4,29
    2650:	000d                	c.nop	3
    2652:	0000                	unimp
    2654:	6f4c                	flw	fa1,28(a4)
    2656:	676e                	flw	fa4,216(sp)
    2658:	5020                	lw	s0,96(s0)
    265a:	6572                	flw	fa0,28(sp)
    265c:	00007373          	csrrci	t1,ustatus,0
    2660:	676e6953          	0x676e6953
    2664:	656c                	flw	fa1,76(a0)
    2666:	4320                	lw	s0,64(a4)
    2668:	696c                	flw	fa1,84(a0)
    266a:	00006b63          	bltu	zero,zero,2680 <I2C1_ER_IRQHandler+0x266>
    266e:	0000                	unimp
    2670:	6f44                	flw	fs1,28(a4)
    2672:	6275                	lui	tp,0x1d
    2674:	656c                	flw	fa1,76(a0)
    2676:	4320                	lw	s0,64(a4)
    2678:	696c                	flw	fa1,84(a0)
    267a:	00006b63          	bltu	zero,zero,2690 <I2C1_ER_IRQHandler+0x276>
    267e:	0000                	unimp
    2680:	6e45                	lui	t3,0x11
    2682:	65646f63          	bltu	s0,s6,2ce0 <_data_lma+0x39c>
    2686:	3a72                	fld	fs4,312(sp)
    2688:	2520                	fld	fs0,72(a0)
    268a:	0a64                	addi	s1,sp,284
    268c:	0000                	unimp
    268e:	0000                	unimp
    2690:	3425                	jal	20b8 <WS2812FillBuffSec.constprop.0+0xc>
    2692:	2064                	fld	fs1,192(s0)
    2694:	3425                	jal	20bc <WS2812FillBuffSec.constprop.0+0x10>
    2696:	0a64                	addi	s1,sp,284
    2698:	000d                	c.nop	3
	...

0000269c <FONT_7x5>:
    269c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    26ac:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    26bc:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    26cc:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    26dc:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    26ec:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    26fc:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    270c:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    271c:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    272c:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    273c:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    274c:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    275c:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    276c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    277c:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    278c:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    279c:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    27ac:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    27bc:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    27cc:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    27dc:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    27ec:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    27fc:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    280c:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    281c:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    282c:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    283c:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    284c:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    285c:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    286c:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

00002878 <bitquartets.10>:
    2878:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    2888:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

00002898 <cvt.2>:
    2898:	9a80 4145 418e 808f 4545 4945 4949 8f8e     ..EA.A..EEEIII..
    28a8:	9290 4f92 4f99 5555 9959 9b9a 9d9c 9f9e     ...O.OUUY.......
    28b8:	4941 554f a5a5 a7a6 a9a8 abaa adac afae     AIOU............
    28c8:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    28d8:	c1c0 c3c2 c5c4 c7c6 c9c8 cbca cdcc cfce     ................
    28e8:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    28f8:	e1e0 e3e2 e5e4 e7e6 e9e8 ebea edec efee     ................
    2908:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00002918 <message.0>:
    2918:	6548 6c6c 206f 6f57 6c72 2164 0a0d 0000     Hello World!....

00002928 <ssd1306_init_array>:
    2928:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    2938:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......

Disassembly of section .data:

20000000 <dev_aht21>:
20000000:	1a80 0006 0000 0000 0038 0001               ........8...

2000000c <dev_ssd1306>:
2000000c:	86a0 0001 0000 0000 003c 0001               ........<...

20000018 <i2c_registers>:
20000018:	00aa 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000038 <line.7>:
20000038:	0001 0000                                   ....

2000003c <tween>:
2000003c:	ff42 ffff                                   B...

20000040 <FastMultiply>:
{
20000040:	87aa                	mv	a5,a0
	uint32_t ret = 0;
20000042:	4501                	li	a0,0
		if( multiplicand & 1 )
20000044:	0015f713          	andi	a4,a1,1
20000048:	c311                	beqz	a4,2000004c <FastMultiply+0xc>
			ret += mutliplicant;
2000004a:	953e                	add	a0,a0,a5
		multiplicand>>=1;
2000004c:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
2000004e:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000050:	f9f5                	bnez	a1,20000044 <FastMultiply+0x4>
}
20000052:	8082                	ret

20000054 <DMA1_Channel4_IRQHandler>:
{
20000054:	1151                	addi	sp,sp,-12
20000056:	c23a                	sw	a4,4(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000058:	40020737          	lui	a4,0x40020
{
2000005c:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000005e:	435c                	lw	a5,4(a4)
{
20000060:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000062:	6689                	lui	a3,0x2
20000064:	8fd5                	or	a5,a5,a3
20000066:	c35c                	sw	a5,4(a4)
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000068:	400117b7          	lui	a5,0x40011
2000006c:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000070:	47d8                	lw	a4,12(a5)
}
20000072:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000074:	04074713          	xori	a4,a4,64
20000078:	c7d8                	sw	a4,12(a5)
}
2000007a:	4712                	lw	a4,4(sp)
2000007c:	4782                	lw	a5,0(sp)
2000007e:	0131                	addi	sp,sp,12
20000080:	30200073          	mret
