
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	48f0006f          	j	c8e <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	00000d58          	.word	0x00000d58
   c:	00000d04          	.word	0x00000d04
	...
  30:	00001a9a          	.word	0x00001a9a
  34:	00000000          	.word	0x00000000
  38:	00000d04          	.word	0x00000d04
  3c:	00000000          	.word	0x00000000
  40:	00000d04          	.word	0x00000d04
  44:	00000d04          	.word	0x00000d04
  48:	00000d04          	.word	0x00000d04
  4c:	00000d04          	.word	0x00000d04
  50:	00000d04          	.word	0x00000d04
  54:	00000d04          	.word	0x00000d04
  58:	00000d04          	.word	0x00000d04
  5c:	00000d04          	.word	0x00000d04
  60:	00001ed4          	.word	0x00001ed4
  64:	20000044          	.word	0x20000044
  68:	00000d04          	.word	0x00000d04
  6c:	00000d04          	.word	0x00000d04
  70:	00000d04          	.word	0x00000d04
  74:	00000d04          	.word	0x00000d04
  78:	00001acc          	.word	0x00001acc
  7c:	00001c68          	.word	0x00001c68
  80:	00000d04          	.word	0x00000d04
  84:	00000d04          	.word	0x00000d04
  88:	00000d04          	.word	0x00000d04
  8c:	00000d04          	.word	0x00000d04
  90:	00000d04          	.word	0x00000d04
  94:	00000d04          	.word	0x00000d04
  98:	00000d04          	.word	0x00000d04
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <__divsi3>:
      a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
      a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
      a8:	862e                	mv	a2,a1
      aa:	85aa                	mv	a1,a0
      ac:	557d                	li	a0,-1
      ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
      b0:	4685                	li	a3,1
      b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
      b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
      ba:	0606                	slli	a2,a2,0x1
      bc:	0686                	slli	a3,a3,0x1
      be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
      c2:	4501                	li	a0,0
      c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
      c8:	8d91                	sub	a1,a1,a2
      ca:	8d55                	or	a0,a0,a3
      cc:	8285                	srli	a3,a3,0x1
      ce:	8205                	srli	a2,a2,0x1
      d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
      d2:	8082                	ret

000000d4 <__umodsi3>:
      d4:	8286                	mv	t0,ra
      d6:	3fc9                	jal	a8 <__hidden___udivsi3>
      d8:	852e                	mv	a0,a1
      da:	8282                	jr	t0
      dc:	40a00533          	neg	a0,a0
      e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
      e4:	40b005b3          	neg	a1,a1
      e8:	b7c1                	j	a8 <__hidden___udivsi3>
      ea:	40b005b3          	neg	a1,a1
      ee:	8286                	mv	t0,ra
      f0:	3f65                	jal	a8 <__hidden___udivsi3>
      f2:	40a00533          	neg	a0,a0
      f6:	8282                	jr	t0

000000f8 <__modsi3>:
      f8:	8286                	mv	t0,ra
      fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
      fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
     102:	375d                	jal	a8 <__hidden___udivsi3>
     104:	852e                	mv	a0,a1
     106:	8282                	jr	t0
     108:	40b005b3          	neg	a1,a1
     10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
     110:	40a00533          	neg	a0,a0
     114:	3f51                	jal	a8 <__hidden___udivsi3>
     116:	40b00533          	neg	a0,a1
     11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
     11e:	1131                	addi	sp,sp,-20
     120:	c426                	sw	s1,8(sp)
     122:	c806                	sw	ra,16(sp)
     124:	c622                	sw	s0,12(sp)
     126:	84ae                	mv	s1,a1
     128:	87aa                	mv	a5,a0
     12a:	85b2                	mv	a1,a2
     12c:	c699                	beqz	a3,13a <mini_pad+0x1c>
     12e:	4301                	li	t1,0
     130:	0096d763          	bge	a3,s1,13e <mini_pad+0x20>
     134:	84b6                	mv	s1,a3
     136:	4305                	li	t1,1
     138:	a019                	j	13e <mini_pad+0x20>
     13a:	4301                	li	t1,0
     13c:	86a6                	mv	a3,s1
     13e:	40968433          	sub	s0,a3,s1
     142:	00045363          	bgez	s0,148 <mini_pad+0x2a>
     146:	4401                	li	s0,0
     148:	8622                	mv	a2,s0
     14a:	853a                	mv	a0,a4
     14c:	c23e                	sw	a5,4(sp)
     14e:	c01a                	sw	t1,0(sp)
     150:	65b000ef          	jal	faa <memset>
     154:	4302                	lw	t1,0(sp)
     156:	4792                	lw	a5,4(sp)
     158:	872a                	mv	a4,a0
     15a:	008506b3          	add	a3,a0,s0
     15e:	4601                	li	a2,0
     160:	40c485b3          	sub	a1,s1,a2
     164:	04b04263          	bgtz	a1,1a8 <mini_pad+0x8a>
     168:	0004d363          	bgez	s1,16e <mini_pad+0x50>
     16c:	4481                	li	s1,0
     16e:	009685b3          	add	a1,a3,s1
     172:	40e58533          	sub	a0,a1,a4
     176:	02030463          	beqz	t1,19e <mini_pad+0x80>
     17a:	02b77263          	bgeu	a4,a1,19e <mini_pad+0x80>
     17e:	02a00793          	li	a5,42
     182:	fef58fa3          	sb	a5,-1(a1)
     186:	fff58693          	addi	a3,a1,-1
     18a:	00d77a63          	bgeu	a4,a3,19e <mini_pad+0x80>
     18e:	fef58f23          	sb	a5,-2(a1)
     192:	ffe58693          	addi	a3,a1,-2
     196:	00d77463          	bgeu	a4,a3,19e <mini_pad+0x80>
     19a:	fef58ea3          	sb	a5,-3(a1)
     19e:	40c2                	lw	ra,16(sp)
     1a0:	4432                	lw	s0,12(sp)
     1a2:	44a2                	lw	s1,8(sp)
     1a4:	0151                	addi	sp,sp,20
     1a6:	8082                	ret
     1a8:	00c785b3          	add	a1,a5,a2
     1ac:	0005c503          	lbu	a0,0(a1)
     1b0:	00c685b3          	add	a1,a3,a2
     1b4:	0605                	addi	a2,a2,1
     1b6:	00a58023          	sb	a0,0(a1)
     1ba:	b75d                	j	160 <mini_pad+0x42>

000001bc <_puts>:
     1bc:	832a                	mv	t1,a0
     1be:	852e                	mv	a0,a1
     1c0:	ce01                	beqz	a2,1d8 <_puts+0x1c>
     1c2:	00062283          	lw	t0,0(a2)
     1c6:	4701                	li	a4,0
     1c8:	425c                	lw	a5,4(a2)
     1ca:	00a74863          	blt	a4,a0,1da <_puts+0x1e>
     1ce:	00078023          	sb	zero,0(a5)
     1d2:	4248                	lw	a0,4(a2)
     1d4:	40550533          	sub	a0,a0,t0
     1d8:	8082                	ret
     1da:	460c                	lw	a1,8(a2)
     1dc:	4214                	lw	a3,0(a2)
     1de:	15fd                	addi	a1,a1,-1
     1e0:	96ae                	add	a3,a3,a1
     1e2:	fed786e3          	beq	a5,a3,1ce <_puts+0x12>
     1e6:	00178693          	addi	a3,a5,1
     1ea:	c254                	sw	a3,4(a2)
     1ec:	00e306b3          	add	a3,t1,a4
     1f0:	0006c683          	lbu	a3,0(a3)
     1f4:	0705                	addi	a4,a4,1
     1f6:	00d78023          	sb	a3,0(a5)
     1fa:	b7f9                	j	1c8 <_puts+0xc>

000001fc <PrintHex>:
     1fc:	e00007b7          	lui	a5,0xe0000
     200:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
     204:	4398                	lw	a4,0(a5)
     206:	08077713          	andi	a4,a4,128
     20a:	ff6d                	bnez	a4,204 <PrintHex+0x8>
     20c:	78302737          	lui	a4,0x78302
     210:	08870713          	addi	a4,a4,136 # 78302088 <_eusrstack+0x58301888>
     214:	e00006b7          	lui	a3,0xe0000
     218:	c398                	sw	a4,0(a5)
     21a:	0f468693          	addi	a3,a3,244 # e00000f4 <_eusrstack+0xbffff8f4>
     21e:	4771                	li	a4,28
     220:	4325                	li	t1,9
     222:	55f1                	li	a1,-4
     224:	429c                	lw	a5,0(a3)
     226:	0807f793          	andi	a5,a5,128
     22a:	ffed                	bnez	a5,224 <PrintHex+0x28>
     22c:	00e55633          	srl	a2,a0,a4
     230:	8a3d                	andi	a2,a2,15
     232:	05700793          	li	a5,87
     236:	00c36463          	bltu	t1,a2,23e <PrintHex+0x42>
     23a:	03000793          	li	a5,48
     23e:	97b2                	add	a5,a5,a2
     240:	07a2                	slli	a5,a5,0x8
     242:	0857e793          	ori	a5,a5,133
     246:	c29c                	sw	a5,0(a3)
     248:	1771                	addi	a4,a4,-4
     24a:	fcb71de3          	bne	a4,a1,224 <PrintHex+0x28>
     24e:	8082                	ret

00000250 <mini_itoa.part.0>:
     250:	1101                	addi	sp,sp,-32
     252:	ce06                	sw	ra,28(sp)
     254:	cc22                	sw	s0,24(sp)
     256:	ca26                	sw	s1,20(sp)
     258:	c002                	sw	zero,0(sp)
     25a:	832a                	mv	t1,a0
     25c:	00055763          	bgez	a0,26a <mini_itoa.part.0+0x1a>
     260:	e689                	bnez	a3,26a <mini_itoa.part.0+0x1a>
     262:	4785                	li	a5,1
     264:	40a00333          	neg	t1,a0
     268:	c03e                	sw	a5,0(sp)
     26a:	8a05                	andi	a2,a2,1
     26c:	06100413          	li	s0,97
     270:	c219                	beqz	a2,276 <mini_itoa.part.0+0x26>
     272:	04100413          	li	s0,65
     276:	84ba                	mv	s1,a4
     278:	1459                	addi	s0,s0,-10
     27a:	851a                	mv	a0,t1
     27c:	c83a                	sw	a4,16(sp)
     27e:	c21a                	sw	t1,4(sp)
     280:	c62e                	sw	a1,12(sp)
     282:	c41a                	sw	t1,8(sp)
     284:	3d81                	jal	d4 <__umodsi3>
     286:	47a5                	li	a5,9
     288:	4322                	lw	t1,8(sp)
     28a:	45b2                	lw	a1,12(sp)
     28c:	4742                	lw	a4,16(sp)
     28e:	0ff57693          	zext.b	a3,a0
     292:	06a7e163          	bltu	a5,a0,2f4 <mini_itoa.part.0+0xa4>
     296:	03068693          	addi	a3,a3,48
     29a:	0ff6f693          	zext.b	a3,a3
     29e:	00148793          	addi	a5,s1,1
     2a2:	00d48023          	sb	a3,0(s1)
     2a6:	851a                	mv	a0,t1
     2a8:	c83a                	sw	a4,16(sp)
     2aa:	c63e                	sw	a5,12(sp)
     2ac:	c42e                	sw	a1,8(sp)
     2ae:	3bed                	jal	a8 <__hidden___udivsi3>
     2b0:	4692                	lw	a3,4(sp)
     2b2:	45a2                	lw	a1,8(sp)
     2b4:	47b2                	lw	a5,12(sp)
     2b6:	4742                	lw	a4,16(sp)
     2b8:	832a                	mv	t1,a0
     2ba:	02b6fb63          	bgeu	a3,a1,2f0 <mini_itoa.part.0+0xa0>
     2be:	4682                	lw	a3,0(sp)
     2c0:	c699                	beqz	a3,2ce <mini_itoa.part.0+0x7e>
     2c2:	02d00693          	li	a3,45
     2c6:	00d78023          	sb	a3,0(a5)
     2ca:	00248793          	addi	a5,s1,2
     2ce:	40e78533          	sub	a0,a5,a4
     2d2:	01f55693          	srli	a3,a0,0x1f
     2d6:	96aa                	add	a3,a3,a0
     2d8:	00078023          	sb	zero,0(a5)
     2dc:	8685                	srai	a3,a3,0x1
     2de:	4601                	li	a2,0
     2e0:	17fd                	addi	a5,a5,-1
     2e2:	00d64b63          	blt	a2,a3,2f8 <mini_itoa.part.0+0xa8>
     2e6:	40f2                	lw	ra,28(sp)
     2e8:	4462                	lw	s0,24(sp)
     2ea:	44d2                	lw	s1,20(sp)
     2ec:	6105                	addi	sp,sp,32
     2ee:	8082                	ret
     2f0:	84be                	mv	s1,a5
     2f2:	b761                	j	27a <mini_itoa.part.0+0x2a>
     2f4:	96a2                	add	a3,a3,s0
     2f6:	b755                	j	29a <mini_itoa.part.0+0x4a>
     2f8:	00c705b3          	add	a1,a4,a2
     2fc:	0007c283          	lbu	t0,0(a5)
     300:	0005c303          	lbu	t1,0(a1)
     304:	0605                	addi	a2,a2,1
     306:	00558023          	sb	t0,0(a1)
     30a:	00678023          	sb	t1,0(a5)
     30e:	bfc9                	j	2e0 <mini_itoa.part.0+0x90>

00000310 <prefill_pixel>:
	ssd1306_renderArea(0, 7, 0, SSD1306_W);
}

//! compute pixel
void prefill_pixel(uint8_t x, uint8_t y) {
    if (x >= SSD1306_W || y >= SSD1306_H) return; // Skip if out of bounds
     310:	01851793          	slli	a5,a0,0x18
     314:	87e1                	srai	a5,a5,0x18
     316:	0207c863          	bltz	a5,346 <prefill_pixel+0x36>
     31a:	03f00793          	li	a5,63
     31e:	02b7e463          	bltu	a5,a1,346 <prefill_pixel+0x36>
    M_Page_Mask mask = page_masks[y];
     322:	0586                	slli	a1,a1,0x1
     324:	ca418713          	addi	a4,gp,-860 # 200000a0 <page_masks>
     328:	972e                	add	a4,a4,a1
    frame_buffer[mask.page][x] |= mask.bitmask;
     32a:	00074683          	lbu	a3,0(a4)
     32e:	d2418793          	addi	a5,gp,-732 # 20000120 <frame_buffer>
     332:	069e                	slli	a3,a3,0x7
     334:	97b6                	add	a5,a5,a3
     336:	953e                	add	a0,a0,a5
     338:	00174783          	lbu	a5,1(a4)
     33c:	00054703          	lbu	a4,0(a0)
     340:	8fd9                	or	a5,a5,a4
     342:	00f50023          	sb	a5,0(a0)
}
     346:	8082                	ret

00000348 <prefill_fastHorLine>:
//! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


//! compute_fastHorLine
void prefill_fastHorLine(uint8_t y, uint8_t x0, uint8_t x1) {
    if (y >= SSD1306_H) return;
     348:	03f00713          	li	a4,63
void prefill_fastHorLine(uint8_t y, uint8_t x0, uint8_t x1) {
     34c:	87aa                	mv	a5,a0
    if (y >= SSD1306_H) return;
     34e:	04a76163          	bltu	a4,a0,390 <prefill_fastHorLine+0x48>
    
	// Clamp x-coordinates
	if (x0 >= SSD1306_W) x0 = SSD1306_W_LIMIT;
     352:	07f00693          	li	a3,127
     356:	0ff5f713          	zext.b	a4,a1
     35a:	00b6f463          	bgeu	a3,a1,362 <prefill_fastHorLine+0x1a>
     35e:	07f00713          	li	a4,127
	if (x1 >= SSD1306_W) x1 = SSD1306_W_LIMIT;
     362:	07f00593          	li	a1,127
     366:	0ff67693          	zext.b	a3,a2
     36a:	00c5f463          	bgeu	a1,a2,372 <prefill_fastHorLine+0x2a>
     36e:	07f00693          	li	a3,127

    M_Page_Mask mask = page_masks[y];
     372:	0786                	slli	a5,a5,0x1
     374:	ca418513          	addi	a0,gp,-860 # 200000a0 <page_masks>
     378:	953e                	add	a0,a0,a5
     37a:	00054783          	lbu	a5,0(a0)
     37e:	00154583          	lbu	a1,1(a0)
    for (uint8_t x = x0; x <= x1; x++) {
     382:	079e                	slli	a5,a5,0x7
     384:	97ba                	add	a5,a5,a4
     386:	d2418613          	addi	a2,gp,-732 # 20000120 <frame_buffer>
     38a:	97b2                	add	a5,a5,a2
     38c:	00e6f363          	bgeu	a3,a4,392 <prefill_fastHorLine+0x4a>
        frame_buffer[mask.page][x] |= mask.bitmask;
    }
}
     390:	8082                	ret
        frame_buffer[mask.page][x] |= mask.bitmask;
     392:	0007c603          	lbu	a2,0(a5)
    for (uint8_t x = x0; x <= x1; x++) {
     396:	0705                	addi	a4,a4,1
     398:	0ff77713          	zext.b	a4,a4
        frame_buffer[mask.page][x] |= mask.bitmask;
     39c:	8e4d                	or	a2,a2,a1
     39e:	00c78023          	sb	a2,0(a5)
    for (uint8_t x = x0; x <= x1; x++) {
     3a2:	0785                	addi	a5,a5,1
     3a4:	b7e5                	j	38c <prefill_fastHorLine+0x44>

000003a6 <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     3a6:	400057b7          	lui	a5,0x40005
     3aa:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     3ae:	40078793          	addi	a5,a5,1024
     3b2:	10077713          	andi	a4,a4,256
     3b6:	cb19                	beqz	a4,3cc <i2c_error+0x26>
     3b8:	0147d703          	lhu	a4,20(a5)
     3bc:	66c1                	lui	a3,0x10
     3be:	eff68693          	addi	a3,a3,-257 # feff <lib_i2c.c.829168c6+0x660f>
     3c2:	8f75                	and	a4,a4,a3
     3c4:	00e79a23          	sh	a4,20(a5)
     3c8:	4505                	li	a0,1
     3ca:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     3cc:	0147d703          	lhu	a4,20(a5)
     3d0:	40077713          	andi	a4,a4,1024
     3d4:	cb19                	beqz	a4,3ea <i2c_error+0x44>
     3d6:	0147d703          	lhu	a4,20(a5)
     3da:	66c1                	lui	a3,0x10
     3dc:	bff68693          	addi	a3,a3,-1025 # fbff <lib_i2c.c.829168c6+0x630f>
     3e0:	8f75                	and	a4,a4,a3
     3e2:	00e79a23          	sh	a4,20(a5)
     3e6:	4509                	li	a0,2
     3e8:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     3ea:	0147d703          	lhu	a4,20(a5)
     3ee:	20077713          	andi	a4,a4,512
     3f2:	cb19                	beqz	a4,408 <i2c_error+0x62>
     3f4:	0147d703          	lhu	a4,20(a5)
     3f8:	66c1                	lui	a3,0x10
     3fa:	dff68693          	addi	a3,a3,-513 # fdff <lib_i2c.c.829168c6+0x650f>
     3fe:	8f75                	and	a4,a4,a3
     400:	00e79a23          	sh	a4,20(a5)
     404:	450d                	li	a0,3
     406:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     408:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     40c:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     40e:	01471693          	slli	a3,a4,0x14
     412:	0006db63          	bgez	a3,428 <i2c_error+0x82>
     416:	0147d703          	lhu	a4,20(a5)
     41a:	76fd                	lui	a3,0xfffff
     41c:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     420:	8f75                	and	a4,a4,a3
     422:	00e79a23          	sh	a4,20(a5)
     426:	4511                	li	a0,4
}
     428:	8082                	ret

0000042a <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     42a:	415c                	lw	a5,4(a0)
     42c:	e3b9                	bnez	a5,472 <i2c_send_addr_write+0x48>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     42e:	00855783          	lhu	a5,8(a0)
     432:	400056b7          	lui	a3,0x40005
     436:	40068693          	addi	a3,a3,1024 # 40005400 <_eusrstack+0x20004c00>
     43a:	0786                	slli	a5,a5,0x1
     43c:	0fe7f793          	andi	a5,a5,254
     440:	00f69823          	sh	a5,16(a3)
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     444:	6789                	lui	a5,0x2
     446:	71078793          	addi	a5,a5,1808 # 2710 <_data_lma+0x504>
	return (status & status_mask) == status_mask; 
     44a:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     44e:	c8f1a223          	sw	a5,-892(gp) # 20000080 <_i2c_timeout>
     452:	4501                	li	a0,0
	return (status & status_mask) == status_mask; 
     454:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.829168c6+0x66792>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     458:	0146d303          	lhu	t1,20(a3)
     45c:	0186d703          	lhu	a4,24(a3)
     460:	0742                	slli	a4,a4,0x10
     462:	00676733          	or	a4,a4,t1
	return (status & status_mask) == status_mask; 
     466:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     468:	00c71763          	bne	a4,a2,476 <i2c_send_addr_write+0x4c>
     46c:	c119                	beqz	a0,472 <i2c_send_addr_write+0x48>
     46e:	c8f1a223          	sw	a5,-892(gp) # 20000080 <_i2c_timeout>
	i2c_err_t i2c_ret = I2C_OK;
     472:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     474:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     476:	17fd                	addi	a5,a5,-1
     478:	4505                	li	a0,1
     47a:	fff9                	bnez	a5,458 <i2c_send_addr_write+0x2e>
{
     47c:	1151                	addi	sp,sp,-12
     47e:	c406                	sw	ra,8(sp)
     480:	c801a223          	sw	zero,-892(gp) # 20000080 <_i2c_timeout>
	i2c_err_t i2c_err = i2c_error();
     484:	370d                	jal	3a6 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     486:	e111                	bnez	a0,48a <i2c_send_addr_write+0x60>
     488:	4515                	li	a0,5
}
     48a:	40a2                	lw	ra,8(sp)
     48c:	0131                	addi	sp,sp,12
     48e:	8082                	ret

00000490 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     490:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     492:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     494:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     496:	71078793          	addi	a5,a5,1808 # 2710 <_data_lma+0x504>
     49a:	40005637          	lui	a2,0x40005
{
     49e:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     4a0:	c002                	sw	zero,0(sp)
     4a2:	c202                	sw	zero,4(sp)
     4a4:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4a8:	c8f1a223          	sw	a5,-892(gp) # 20000080 <_i2c_timeout>
     4ac:	4581                	li	a1,0
     4ae:	40060613          	addi	a2,a2,1024 # 40005400 <_eusrstack+0x20004c00>
     4b2:	01865683          	lhu	a3,24(a2)
     4b6:	8a89                	andi	a3,a3,2
     4b8:	eaa9                	bnez	a3,50a <i2c_ping+0x7a>
     4ba:	c199                	beqz	a1,4c0 <i2c_ping+0x30>
     4bc:	c8f1a223          	sw	a5,-892(gp) # 20000080 <_i2c_timeout>
	i2c_err_t i2c_ret = I2C_OK;
     4c0:	4501                	li	a0,0
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4c2:	40005737          	lui	a4,0x40005
     4c6:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
     4ca:	000306b7          	lui	a3,0x30
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4ce:	40070713          	addi	a4,a4,1024
     4d2:	1007e793          	ori	a5,a5,256
     4d6:	00f71023          	sh	a5,0(a4)
	return (status & status_mask) == status_mask; 
     4da:	0685                	addi	a3,a3,1 # 30001 <lib_i2c.c.829168c6+0x26711>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     4dc:	01475603          	lhu	a2,20(a4)
     4e0:	01875783          	lhu	a5,24(a4)
     4e4:	07c2                	slli	a5,a5,0x10
     4e6:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     4e8:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     4ea:	fed799e3          	bne	a5,a3,4dc <i2c_ping+0x4c>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     4ee:	e119                	bnez	a0,4f4 <i2c_ping+0x64>
     4f0:	850a                	mv	a0,sp
     4f2:	3f25                	jal	42a <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     4f4:	400057b7          	lui	a5,0x40005
     4f8:	4007d703          	lhu	a4,1024(a5) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     4fc:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     4fe:	20076713          	ori	a4,a4,512
     502:	40e79023          	sh	a4,1024(a5)
}
     506:	0161                	addi	sp,sp,24
     508:	8082                	ret
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     50a:	17fd                	addi	a5,a5,-1
     50c:	4585                	li	a1,1
     50e:	f3d5                	bnez	a5,4b2 <i2c_ping+0x22>
     510:	c801a223          	sw	zero,-892(gp) # 20000080 <_i2c_timeout>
	i2c_err_t i2c_err = i2c_error();
     514:	3d49                	jal	3a6 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     516:	f555                	bnez	a0,4c2 <i2c_ping+0x32>
     518:	4515                	li	a0,5
     51a:	b765                	j	4c2 <i2c_ping+0x32>

0000051c <i2c_write_raw.constprop.0>:

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     51c:	1111                	addi	sp,sp,-28
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     51e:	6789                	lui	a5,0x2
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     520:	c826                	sw	s1,16(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     522:	71078793          	addi	a5,a5,1808 # 2710 <_data_lma+0x504>
     526:	40005737          	lui	a4,0x40005
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     52a:	cc06                	sw	ra,24(sp)
     52c:	ca22                	sw	s0,20(sp)
     52e:	c02a                	sw	a0,0(sp)
     530:	c22e                	sw	a1,4(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     532:	c8f1a223          	sw	a5,-892(gp) # 20000080 <_i2c_timeout>
     536:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
     53a:	01875603          	lhu	a2,24(a4)
     53e:	8a09                	andi	a2,a2,2
     540:	ee41                	bnez	a2,5d8 <i2c_write_raw.constprop.0+0xbc>
	I2C1->CTLR1 |= I2C_CTLR1_START;
     542:	00075783          	lhu	a5,0(a4)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     546:	40005637          	lui	a2,0x40005
     54a:	40060613          	addi	a2,a2,1024 # 40005400 <_eusrstack+0x20004c00>
	I2C1->CTLR1 |= I2C_CTLR1_START;
     54e:	1007e793          	ori	a5,a5,256
     552:	00f71023          	sh	a5,0(a4)
	return (status & status_mask) == status_mask; 
     556:	00030737          	lui	a4,0x30
     55a:	0705                	addi	a4,a4,1 # 30001 <lib_i2c.c.829168c6+0x26711>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     55c:	01465583          	lhu	a1,20(a2)
     560:	01865783          	lhu	a5,24(a2)
     564:	07c2                	slli	a5,a5,0x10
     566:	8fcd                	or	a5,a5,a1
	return (status & status_mask) == status_mask; 
     568:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     56a:	fee799e3          	bne	a5,a4,55c <i2c_write_raw.constprop.0+0x40>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     56e:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
     572:	3d65                	jal	42a <i2c_send_addr_write>
	{
		uint8_t cbyte = 0;
		while(cbyte < len)
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     574:	6589                	lui	a1,0x2
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     576:	842a                	mv	s0,a0
		uint8_t cbyte = 0;
     578:	4701                	li	a4,0
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     57a:	71058593          	addi	a1,a1,1808 # 2710 <_data_lma+0x504>
	if(i2c_ret == I2C_OK)
     57e:	e13d                	bnez	a0,5e4 <i2c_write_raw.constprop.0+0xc8>
		while(cbyte < len)
     580:	4792                	lw	a5,4(sp)
     582:	06f77163          	bgeu	a4,a5,5e4 <i2c_write_raw.constprop.0+0xc8>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     586:	6609                	lui	a2,0x2
     588:	40005337          	lui	t1,0x40005
     58c:	c8b1a223          	sw	a1,-892(gp) # 20000080 <_i2c_timeout>
     590:	4281                	li	t0,0
     592:	71060613          	addi	a2,a2,1808 # 2710 <_data_lma+0x504>
     596:	40030313          	addi	t1,t1,1024 # 40005400 <_eusrstack+0x20004c00>
     59a:	01435503          	lhu	a0,20(t1)
     59e:	08057513          	andi	a0,a0,128
     5a2:	c959                	beqz	a0,638 <i2c_write_raw.constprop.0+0x11c>
     5a4:	00028463          	beqz	t0,5ac <i2c_write_raw.constprop.0+0x90>
     5a8:	c8c1a223          	sw	a2,-892(gp) # 20000080 <_i2c_timeout>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     5ac:	4501                	li	a0,0
			//while(!(I2C1->STAR1 & I2C_STAR1_TXE));
			I2C1->DATAR = buf[cbyte];
     5ae:	4782                	lw	a5,0(sp)
     5b0:	c62e                	sw	a1,12(sp)
     5b2:	00e78633          	add	a2,a5,a4
     5b6:	00064303          	lbu	t1,0(a2)
			++cbyte;
     5ba:	0705                	addi	a4,a4,1
			I2C1->DATAR = buf[cbyte];
     5bc:	40005637          	lui	a2,0x40005
     5c0:	40661823          	sh	t1,1040(a2) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     5c4:	0ff77713          	zext.b	a4,a4
     5c8:	c43a                	sw	a4,8(sp)

			// Make sure no errors occured for this byte
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     5ca:	e509                	bnez	a0,5d4 <i2c_write_raw.constprop.0+0xb8>
     5cc:	3be9                	jal	3a6 <i2c_error>
     5ce:	4722                	lw	a4,8(sp)
     5d0:	45b2                	lw	a1,12(sp)
     5d2:	d55d                	beqz	a0,580 <i2c_write_raw.constprop.0+0x64>
     5d4:	842a                	mv	s0,a0
     5d6:	a039                	j	5e4 <i2c_write_raw.constprop.0+0xc8>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     5d8:	17fd                	addi	a5,a5,-1
     5da:	f3a5                	bnez	a5,53a <i2c_write_raw.constprop.0+0x1e>
	i2c_err_t i2c_err = i2c_error();
     5dc:	33e9                	jal	3a6 <i2c_error>
     5de:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     5e0:	e111                	bnez	a0,5e4 <i2c_write_raw.constprop.0+0xc8>
     5e2:	4415                	li	s0,5
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     5e4:	6709                	lui	a4,0x2
     5e6:	71070713          	addi	a4,a4,1808 # 2710 <_data_lma+0x504>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     5ea:	40005537          	lui	a0,0x40005
	return (status & status_mask) == status_mask; 
     5ee:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     5f2:	c8e1a223          	sw	a4,-892(gp) # 20000080 <_i2c_timeout>
     5f6:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     5f8:	40050513          	addi	a0,a0,1024 # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
     5fc:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.829168c6+0x66794>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     600:	01455283          	lhu	t0,20(a0)
     604:	01855603          	lhu	a2,24(a0)
     608:	0642                	slli	a2,a2,0x10
     60a:	00566633          	or	a2,a2,t0
	return (status & status_mask) == status_mask; 
     60e:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     610:	04b61163          	bne	a2,a1,652 <i2c_write_raw.constprop.0+0x136>
     614:	00030463          	beqz	t1,61c <i2c_write_raw.constprop.0+0x100>
     618:	c8e1a223          	sw	a4,-892(gp) # 20000080 <_i2c_timeout>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     61c:	40005737          	lui	a4,0x40005
     620:	40075683          	lhu	a3,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     624:	40e2                	lw	ra,24(sp)
     626:	8522                	mv	a0,s0
     628:	4452                	lw	s0,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     62a:	2006e693          	ori	a3,a3,512
     62e:	40d71023          	sh	a3,1024(a4)
}
     632:	44c2                	lw	s1,16(sp)
     634:	0171                	addi	sp,sp,28
     636:	8082                	ret
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     638:	167d                	addi	a2,a2,-1
     63a:	4285                	li	t0,1
     63c:	fe39                	bnez	a2,59a <i2c_write_raw.constprop.0+0x7e>
     63e:	c62e                	sw	a1,12(sp)
     640:	c43a                	sw	a4,8(sp)
     642:	c801a223          	sw	zero,-892(gp) # 20000080 <_i2c_timeout>
	i2c_err_t i2c_err = i2c_error();
     646:	3385                	jal	3a6 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     648:	4722                	lw	a4,8(sp)
     64a:	45b2                	lw	a1,12(sp)
     64c:	f12d                	bnez	a0,5ae <i2c_write_raw.constprop.0+0x92>
     64e:	4515                	li	a0,5
     650:	bfb9                	j	5ae <i2c_write_raw.constprop.0+0x92>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     652:	177d                	addi	a4,a4,-1
     654:	4305                	li	t1,1
     656:	f74d                	bnez	a4,600 <i2c_write_raw.constprop.0+0xe4>
     658:	c801a223          	sw	zero,-892(gp) # 20000080 <_i2c_timeout>
	i2c_err_t i2c_err = i2c_error();
     65c:	33a9                	jal	3a6 <i2c_error>
     65e:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     660:	fd55                	bnez	a0,61c <i2c_write_raw.constprop.0+0x100>
     662:	4415                	li	s0,5
     664:	bf65                	j	61c <i2c_write_raw.constprop.0+0x100>

00000666 <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     666:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     668:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     66c:	4589                	li	a1,2
     66e:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     670:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     672:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     676:	355d                	jal	51c <i2c_write_raw.constprop.0>
}
     678:	40b2                	lw	ra,12(sp)
     67a:	0ff57513          	zext.b	a0,a0
     67e:	0141                	addi	sp,sp,16
     680:	8082                	ret

00000682 <prefill_line.constprop.0>:
		}
	}
}

//! compute line (Bresenham's algorithm)
void prefill_line(M_Point p0, M_Point p1, uint8_t thickness) {
     682:	fdc10113          	addi	sp,sp,-36
     686:	00a11c23          	sh	a0,24(sp)
     68a:	d022                	sw	s0,32(sp)
     68c:	ce26                	sw	s1,28(sp)
     68e:	00b11a23          	sh	a1,20(sp)
     692:	0ff57513          	zext.b	a0,a0
     696:	07f00793          	li	a5,127
     69a:	07f00713          	li	a4,127
     69e:	00a7e463          	bltu	a5,a0,6a6 <prefill_line.constprop.0+0x24>
     6a2:	0ff57713          	zext.b	a4,a0
    // Clamp coordinates to display bounds
    p0.x = (p0.x < SSD1306_W) ? p0.x : SSD1306_W_LIMIT;
    p0.y = (p0.y < SSD1306_H) ? p0.y : SSD1306_H_LIMIT;
     6a6:	01914683          	lbu	a3,25(sp)
     6aa:	03f00613          	li	a2,63
     6ae:	0ff6f793          	zext.b	a5,a3
     6b2:	00d67463          	bgeu	a2,a3,6ba <prefill_line.constprop.0+0x38>
     6b6:	03f00793          	li	a5,63
     6ba:	01414683          	lbu	a3,20(sp)
     6be:	07f00613          	li	a2,127
     6c2:	0ff6f313          	zext.b	t1,a3
     6c6:	00d67463          	bgeu	a2,a3,6ce <prefill_line.constprop.0+0x4c>
     6ca:	07f00313          	li	t1,127
    p1.x = (p1.x < SSD1306_W) ? p1.x : SSD1306_W_LIMIT;
    p1.y = (p1.y < SSD1306_H) ? p1.y : SSD1306_H_LIMIT;
     6ce:	01514683          	lbu	a3,21(sp)
     6d2:	03f00613          	li	a2,63
     6d6:	0ff6f293          	zext.b	t0,a3
     6da:	00d67463          	bgeu	a2,a3,6e2 <prefill_line.constprop.0+0x60>
     6de:	03f00293          	li	t0,63

    // Bresenham's line algorithm
    int16_t dx = abs(p1.x - p0.x);
     6e2:	40e30633          	sub	a2,t1,a4
     6e6:	41f65693          	srai	a3,a2,0x1f
     6ea:	8e35                	xor	a2,a2,a3
     6ec:	8e15                	sub	a2,a2,a3
     6ee:	01061693          	slli	a3,a2,0x10
     6f2:	86c1                	srai	a3,a3,0x10
    int16_t dy = -abs(p1.y - p0.y);
     6f4:	40f285b3          	sub	a1,t0,a5
    int16_t dx = abs(p1.x - p0.x);
     6f8:	c236                	sw	a3,4(sp)
    int16_t dy = -abs(p1.y - p0.y);
     6fa:	41f5d693          	srai	a3,a1,0x1f
     6fe:	8db5                	xor	a1,a1,a3
     700:	8d95                	sub	a1,a1,a3
     702:	05c2                	slli	a1,a1,0x10
     704:	81c1                	srli	a1,a1,0x10
     706:	40b006b3          	neg	a3,a1
     70a:	06c2                	slli	a3,a3,0x10
     70c:	86c1                	srai	a3,a3,0x10
     70e:	c436                	sw	a3,8(sp)
    int16_t sx = p0.x < p1.x ? 1 : -1;
     710:	547d                	li	s0,-1
     712:	00677363          	bgeu	a4,t1,718 <prefill_line.constprop.0+0x96>
     716:	4405                	li	s0,1
    int16_t sy = p0.y < p1.y ? 1 : -1;
     718:	54fd                	li	s1,-1
     71a:	0057f363          	bgeu	a5,t0,720 <prefill_line.constprop.0+0x9e>
     71e:	4485                	li	s1,1
    int16_t err = dx + dy;
     720:	01061693          	slli	a3,a2,0x10
     724:	82c1                	srli	a3,a3,0x10
	while (1) {
		// Draw the pixel(s)
		if (thickness == 1) {
			// Fast path for single-pixel
			if (p0.x < SSD1306_W && p0.y < SSD1306_H) {
                M_Page_Mask mask = page_masks[p0.y];
     726:	ca418513          	addi	a0,gp,-860 # 200000a0 <page_masks>
    int16_t err = dx + dy;
     72a:	c036                	sw	a3,0(sp)
                M_Page_Mask mask = page_masks[p0.y];
     72c:	c62a                	sw	a0,12(sp)
    int16_t err = dx + dy;
     72e:	8e8d                	sub	a3,a3,a1
     730:	06c2                	slli	a3,a3,0x10
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     732:	d2418513          	addi	a0,gp,-732 # 20000120 <frame_buffer>
    int16_t err = dx + dy;
     736:	86c1                	srai	a3,a3,0x10
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     738:	c82a                	sw	a0,16(sp)
			if (p0.x < SSD1306_W && p0.y < SSD1306_H) {
     73a:	01871513          	slli	a0,a4,0x18
     73e:	8561                	srai	a0,a0,0x18
     740:	02055163          	bgez	a0,762 <prefill_line.constprop.0+0xe0>
			}
		}

		// Bresenham Advance
		if (p0.x == p1.x && p0.y == p1.y) break;
		e2 = err << 1; // e2 = 2*err via bit shift
     744:	00169513          	slli	a0,a3,0x1
		if (e2 >= dy) { err += dy; p0.x += sx; }
     748:	43a2                	lw	t2,8(sp)
		e2 = err << 1; // e2 = 2*err via bit shift
     74a:	0542                	slli	a0,a0,0x10
     74c:	8541                	srai	a0,a0,0x10
		if (e2 >= dy) { err += dy; p0.x += sx; }
     74e:	04755963          	bge	a0,t2,7a0 <prefill_line.constprop.0+0x11e>
		if (e2 <= dx) { err += dx; p0.y += sy; }
     752:	4602                	lw	a2,0(sp)
     754:	97a6                	add	a5,a5,s1
     756:	0ff7f793          	zext.b	a5,a5
     75a:	96b2                	add	a3,a3,a2
     75c:	06c2                	slli	a3,a3,0x10
     75e:	86c1                	srai	a3,a3,0x10
     760:	bfe9                	j	73a <prefill_line.constprop.0+0xb8>
			if (p0.x < SSD1306_W && p0.y < SSD1306_H) {
     762:	03f00513          	li	a0,63
     766:	fcf56fe3          	bltu	a0,a5,744 <prefill_line.constprop.0+0xc2>
                M_Page_Mask mask = page_masks[p0.y];
     76a:	4532                	lw	a0,12(sp)
     76c:	00179393          	slli	t2,a5,0x1
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     770:	4642                	lw	a2,16(sp)
                M_Page_Mask mask = page_masks[p0.y];
     772:	93aa                	add	t2,t2,a0
                frame_buffer[mask.page][p0.x] |= mask.bitmask;
     774:	0003c503          	lbu	a0,0(t2)
     778:	0013c383          	lbu	t2,1(t2)
     77c:	051e                	slli	a0,a0,0x7
     77e:	9532                	add	a0,a0,a2
     780:	953a                	add	a0,a0,a4
     782:	00054603          	lbu	a2,0(a0)
     786:	00c3e3b3          	or	t2,t2,a2
     78a:	00750023          	sb	t2,0(a0)
		if (p0.x == p1.x && p0.y == p1.y) break;
     78e:	fae31be3          	bne	t1,a4,744 <prefill_line.constprop.0+0xc2>
     792:	faf299e3          	bne	t0,a5,744 <prefill_line.constprop.0+0xc2>
	}
}
     796:	5402                	lw	s0,32(sp)
     798:	44f2                	lw	s1,28(sp)
     79a:	02410113          	addi	sp,sp,36
     79e:	8082                	ret
		if (e2 <= dx) { err += dx; p0.y += sy; }
     7a0:	4612                	lw	a2,4(sp)
     7a2:	8e8d                	sub	a3,a3,a1
		if (e2 >= dy) { err += dy; p0.x += sx; }
     7a4:	06c2                	slli	a3,a3,0x10
     7a6:	9722                	add	a4,a4,s0
     7a8:	86c1                	srai	a3,a3,0x10
     7aa:	0ff77713          	zext.b	a4,a4
		if (e2 <= dx) { err += dx; p0.y += sy; }
     7ae:	f8a646e3          	blt	a2,a0,73a <prefill_line.constprop.0+0xb8>
     7b2:	b745                	j	752 <prefill_line.constprop.0+0xd0>

000007b4 <prefill_poly.part.0.constprop.0>:
//! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//! ***** Polygon Methods *****
//! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//! compute poligon
void prefill_poly(M_Point *pts, uint8_t num_pts, uint8_t thickness) {
     7b4:	1111                	addi	sp,sp,-28
     7b6:	c826                	sw	s1,16(sp)
        prefill_line(pts[i], pts[i+1], thickness);
     7b8:	64c1                	lui	s1,0x10
void prefill_poly(M_Point *pts, uint8_t num_pts, uint8_t thickness) {
     7ba:	ca22                	sw	s0,20(sp)
     7bc:	cc06                	sw	ra,24(sp)
     7be:	87aa                	mv	a5,a0
     7c0:	842e                	mv	s0,a1
    for (uint8_t i = 0; i < num_pts - 1; i++) {
     7c2:	fff58613          	addi	a2,a1,-1
     7c6:	872a                	mv	a4,a0
     7c8:	4681                	li	a3,0
        prefill_line(pts[i], pts[i+1], thickness);
     7ca:	14fd                	addi	s1,s1,-1 # ffff <lib_i2c.c.829168c6+0x670f>
     7cc:	00374583          	lbu	a1,3(a4)
     7d0:	00274303          	lbu	t1,2(a4)
     7d4:	853a                	mv	a0,a4
     7d6:	05a2                	slli	a1,a1,0x8
     7d8:	0065e5b3          	or	a1,a1,t1
     7dc:	00054303          	lbu	t1,0(a0)
     7e0:	00154503          	lbu	a0,1(a0)
     7e4:	0709                	addi	a4,a4,2
     7e6:	8de5                	and	a1,a1,s1
     7e8:	0522                	slli	a0,a0,0x8
     7ea:	00656533          	or	a0,a0,t1
     7ee:	8d65                	and	a0,a0,s1
     7f0:	c63e                	sw	a5,12(sp)
     7f2:	c436                	sw	a3,8(sp)
     7f4:	c232                	sw	a2,4(sp)
     7f6:	c03a                	sw	a4,0(sp)
     7f8:	3569                	jal	682 <prefill_line.constprop.0>
    for (uint8_t i = 0; i < num_pts - 1; i++) {
     7fa:	46a2                	lw	a3,8(sp)
     7fc:	4612                	lw	a2,4(sp)
     7fe:	4702                	lw	a4,0(sp)
     800:	0685                	addi	a3,a3,1
     802:	47b2                	lw	a5,12(sp)
     804:	fcc6c4e3          	blt	a3,a2,7cc <prefill_poly.part.0.constprop.0+0x18>
    if (num_pts < 3) return;  // Need at least 3 points for a polygon
    prefill_lines(pts, num_pts, thickness);
    prefill_line(pts[num_pts-1], pts[0], thickness);
     808:	0406                	slli	s0,s0,0x1
     80a:	1479                	addi	s0,s0,-2
     80c:	943e                	add	s0,s0,a5
     80e:	0017c583          	lbu	a1,1(a5)
     812:	00144503          	lbu	a0,1(s0)
     816:	0007c703          	lbu	a4,0(a5)
     81a:	00044783          	lbu	a5,0(s0)
     81e:	05a2                	slli	a1,a1,0x8
     820:	0522                	slli	a0,a0,0x8
}
     822:	4452                	lw	s0,20(sp)
    prefill_line(pts[num_pts-1], pts[0], thickness);
     824:	8dd9                	or	a1,a1,a4
     826:	8d5d                	or	a0,a0,a5
}
     828:	40e2                	lw	ra,24(sp)
    prefill_line(pts[num_pts-1], pts[0], thickness);
     82a:	8de5                	and	a1,a1,s1
     82c:	8d65                	and	a0,a0,s1
}
     82e:	44c2                	lw	s1,16(sp)
     830:	0171                	addi	sp,sp,28
    prefill_line(pts[num_pts-1], pts[0], thickness);
     832:	bd81                	j	682 <prefill_line.constprop.0>

00000834 <prefill_verLine.constprop.0>:
void prefill_verLine(
     834:	1161                	addi	sp,sp,-8
    if (x >= SSD1306_W) return;
     836:	01851793          	slli	a5,a0,0x18
void prefill_verLine(
     83a:	c222                	sw	s0,4(sp)
     83c:	00b11023          	sh	a1,0(sp)
    if (x >= SSD1306_W) return;
     840:	87e1                	srai	a5,a5,0x18
     842:	0607c763          	bltz	a5,8b0 <prefill_verLine.constprop.0+0x7c>
    if (y_limit.l0 >= SSD1306_H) y_limit.l0 = SSD1306_H_LIMIT;
     846:	00014783          	lbu	a5,0(sp)
     84a:	03f00713          	li	a4,63
     84e:	0ff7f593          	zext.b	a1,a5
     852:	00f77463          	bgeu	a4,a5,85a <prefill_verLine.constprop.0+0x26>
     856:	03f00593          	li	a1,63
    if (y_limit.l1 >= SSD1306_H) y_limit.l1 = SSD1306_H_LIMIT;
     85a:	00114703          	lbu	a4,1(sp)
     85e:	03f00693          	li	a3,63
     862:	0ff77793          	zext.b	a5,a4
     866:	00e6f463          	bgeu	a3,a4,86e <prefill_verLine.constprop.0+0x3a>
     86a:	03f00793          	li	a5,63
	if (y_limit.l0 > y_limit.l1) {
     86e:	00b7e563          	bltu	a5,a1,878 <prefill_verLine.constprop.0+0x44>
     872:	873e                	mv	a4,a5
     874:	87ae                	mv	a5,a1
     876:	85ba                	mv	a1,a4
    uint8_t x_end = x + thickness - 1;
     878:	167d                	addi	a2,a2,-1
     87a:	962a                	add	a2,a2,a0
     87c:	0ff67713          	zext.b	a4,a2
     880:	07f00693          	li	a3,127
     884:	0ff67613          	zext.b	a2,a2
     888:	00c6f463          	bgeu	a3,a2,890 <prefill_verLine.constprop.0+0x5c>
     88c:	07f00713          	li	a4,127
	if (x_end < x) return;  // Skip if thickness causes overflow
     890:	02a76063          	bltu	a4,a0,8b0 <prefill_verLine.constprop.0+0x7c>
	uint8_t x_len = x_end - x + 1;  // Precompute length
     894:	40a706b3          	sub	a3,a4,a0
     898:	0685                	addi	a3,a3,1
     89a:	00179613          	slli	a2,a5,0x1
     89e:	ca418713          	addi	a4,gp,-860 # 200000a0 <page_masks>
     8a2:	0ff6f693          	zext.b	a3,a3
     8a6:	963a                	add	a2,a2,a4
		uint8_t* row_start = &frame_buffer[mask.page][x];  	// Get row pointer
     8a8:	d2418313          	addi	t1,gp,-732 # 20000120 <frame_buffer>
	for (uint8_t y_pos = y_limit.l0; y_pos <= y_limit.l1; y_pos++) {
     8ac:	00f5f563          	bgeu	a1,a5,8b6 <prefill_verLine.constprop.0+0x82>
}
     8b0:	4412                	lw	s0,4(sp)
     8b2:	0121                	addi	sp,sp,8
     8b4:	8082                	ret
		uint8_t* row_start = &frame_buffer[mask.page][x];  	// Get row pointer
     8b6:	00064703          	lbu	a4,0(a2)
		M_Page_Mask mask = page_masks[y_pos];
     8ba:	00164283          	lbu	t0,1(a2)
		uint8_t* row_start = &frame_buffer[mask.page][x];  	// Get row pointer
     8be:	071e                	slli	a4,a4,0x7
     8c0:	972a                	add	a4,a4,a0
     8c2:	971a                	add	a4,a4,t1
     8c4:	00e68433          	add	s0,a3,a4
		for (uint8_t i = 0; i < x_len; i++) {
     8c8:	00871763          	bne	a4,s0,8d6 <prefill_verLine.constprop.0+0xa2>
	for (uint8_t y_pos = y_limit.l0; y_pos <= y_limit.l1; y_pos++) {
     8cc:	0785                	addi	a5,a5,1
     8ce:	0ff7f793          	zext.b	a5,a5
     8d2:	0609                	addi	a2,a2,2
     8d4:	bfe1                	j	8ac <prefill_verLine.constprop.0+0x78>
			row_start[i] |= mask.bitmask;  					// Sequential access
     8d6:	00074383          	lbu	t2,0(a4)
     8da:	0705                	addi	a4,a4,1
     8dc:	0072e3b3          	or	t2,t0,t2
     8e0:	fe770fa3          	sb	t2,-1(a4)
     8e4:	b7d5                	j	8c8 <prefill_verLine.constprop.0+0x94>

000008e6 <prefill_horLine.constprop.0>:
void prefill_horLine(
     8e6:	1171                	addi	sp,sp,-4
     8e8:	00b11023          	sh	a1,0(sp)
    if (y >= SSD1306_H) return;
     8ec:	03f00793          	li	a5,63
     8f0:	04a7eb63          	bltu	a5,a0,946 <prefill_horLine.constprop.0+0x60>
     8f4:	00014783          	lbu	a5,0(sp)
     8f8:	07f00613          	li	a2,127
     8fc:	872a                	mv	a4,a0
     8fe:	0ff7f693          	zext.b	a3,a5
     902:	00f67463          	bgeu	a2,a5,90a <prefill_horLine.constprop.0+0x24>
     906:	07f00693          	li	a3,127
     90a:	00114603          	lbu	a2,1(sp)
     90e:	07f00593          	li	a1,127
     912:	0ff67793          	zext.b	a5,a2
     916:	00c5f463          	bgeu	a1,a2,91e <prefill_horLine.constprop.0+0x38>
     91a:	07f00793          	li	a5,127
	if (x_limit.l0 > x_limit.l1) {
     91e:	00d7e563          	bltu	a5,a3,928 <prefill_horLine.constprop.0+0x42>
     922:	863e                	mv	a2,a5
     924:	87b6                	mv	a5,a3
     926:	86b2                	mv	a3,a2
        M_Page_Mask mask = page_masks[y_pos];
     928:	0706                	slli	a4,a4,0x1
     92a:	ca418513          	addi	a0,gp,-860 # 200000a0 <page_masks>
     92e:	953a                	add	a0,a0,a4
     930:	00054703          	lbu	a4,0(a0)
     934:	00154583          	lbu	a1,1(a0)
     938:	071e                	slli	a4,a4,0x7
     93a:	973e                	add	a4,a4,a5
     93c:	d2418613          	addi	a2,gp,-732 # 20000120 <frame_buffer>
     940:	9732                	add	a4,a4,a2
        for (uint8_t x_pos = x_limit.l0; x_pos <= x_limit.l1; x_pos++) {
     942:	00f6f463          	bgeu	a3,a5,94a <prefill_horLine.constprop.0+0x64>
}
     946:	0111                	addi	sp,sp,4
     948:	8082                	ret
            frame_buffer[mask.page][x_pos] |= mask.bitmask;
     94a:	00074603          	lbu	a2,0(a4)
        for (uint8_t x_pos = x_limit.l0; x_pos <= x_limit.l1; x_pos++) {
     94e:	0785                	addi	a5,a5,1
     950:	0ff7f793          	zext.b	a5,a5
            frame_buffer[mask.page][x_pos] |= mask.bitmask;
     954:	8e4d                	or	a2,a2,a1
     956:	00c70023          	sb	a2,0(a4)
     95a:	0705                	addi	a4,a4,1
     95c:	b7dd                	j	942 <prefill_horLine.constprop.0+0x5c>

0000095e <internal_handle_input.constprop.0>:
     95e:	e00007b7          	lui	a5,0xe0000
     962:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
     966:	439c                	lw	a5,0(a5)
     968:	8082                	ret

0000096a <_write.constprop.0>:
     96a:	1101                	addi	sp,sp,-32
     96c:	cc22                	sw	s0,24(sp)
     96e:	e0000437          	lui	s0,0xe0000
     972:	0f440413          	addi	s0,s0,244 # e00000f4 <_eusrstack+0xbffff8f4>
     976:	4018                	lw	a4,0(s0)
     978:	ce06                	sw	ra,28(sp)
     97a:	ca26                	sw	s1,20(sp)
     97c:	c02a                	sw	a0,0(sp)
     97e:	0c077713          	andi	a4,a4,192
     982:	0c000693          	li	a3,192
     986:	00d70b63          	beq	a4,a3,99c <_write.constprop.0+0x32>
     98a:	c802                	sw	zero,16(sp)
     98c:	84ae                	mv	s1,a1
     98e:	e1e9                	bnez	a1,a50 <_write.constprop.0+0xe6>
     990:	401c                	lw	a5,0(s0)
     992:	c789                	beqz	a5,99c <_write.constprop.0+0x32>
     994:	0807f793          	andi	a5,a5,128
     998:	e391                	bnez	a5,99c <_write.constprop.0+0x32>
     99a:	37d1                	jal	95e <internal_handle_input.constprop.0>
     99c:	4481                	li	s1,0
     99e:	40f2                	lw	ra,28(sp)
     9a0:	4462                	lw	s0,24(sp)
     9a2:	8526                	mv	a0,s1
     9a4:	44d2                	lw	s1,20(sp)
     9a6:	6105                	addi	sp,sp,32
     9a8:	8082                	ret
     9aa:	40e48633          	sub	a2,s1,a4
     9ae:	459d                	li	a1,7
     9b0:	86b2                	mv	a3,a2
     9b2:	00c5d363          	bge	a1,a2,9b8 <_write.constprop.0+0x4e>
     9b6:	469d                	li	a3,7
     9b8:	001005b7          	lui	a1,0x100
     9bc:	0585                	addi	a1,a1,1 # 100001 <lib_i2c.c.829168c6+0xf6711>
     9be:	4008                	lw	a0,0(s0)
     9c0:	08057313          	andi	t1,a0,128
     9c4:	06031f63          	bnez	t1,a42 <_write.constprop.0+0xd8>
     9c8:	c901                	beqz	a0,9d8 <_write.constprop.0+0x6e>
     9ca:	c636                	sw	a3,12(sp)
     9cc:	c432                	sw	a2,8(sp)
     9ce:	c23a                	sw	a4,4(sp)
     9d0:	3779                	jal	95e <internal_handle_input.constprop.0>
     9d2:	46b2                	lw	a3,12(sp)
     9d4:	4622                	lw	a2,8(sp)
     9d6:	4712                	lw	a4,4(sp)
     9d8:	00362593          	slti	a1,a2,3
     9dc:	4601                	li	a2,0
     9de:	e199                	bnez	a1,9e4 <_write.constprop.0+0x7a>
     9e0:	ffd68613          	addi	a2,a3,-3
     9e4:	4782                	lw	a5,0(sp)
     9e6:	00370593          	addi	a1,a4,3
     9ea:	0808                	addi	a0,sp,16
     9ec:	95be                	add	a1,a1,a5
     9ee:	c436                	sw	a3,8(sp)
     9f0:	c23a                	sw	a4,4(sp)
     9f2:	2bf9                	jal	fd0 <memcpy>
     9f4:	45c2                	lw	a1,16(sp)
     9f6:	4782                	lw	a5,0(sp)
     9f8:	4712                	lw	a4,4(sp)
     9fa:	e0000637          	lui	a2,0xe0000
     9fe:	46a2                	lw	a3,8(sp)
     a00:	0f860613          	addi	a2,a2,248 # e00000f8 <_eusrstack+0xbffff8f8>
     a04:	c20c                	sw	a1,0(a2)
     a06:	450d                	li	a0,3
     a08:	00e785b3          	add	a1,a5,a4
     a0c:	4601                	li	a2,0
     a0e:	0005c283          	lbu	t0,0(a1)
     a12:	0605                	addi	a2,a2,1
     a14:	01060793          	addi	a5,a2,16
     a18:	00278333          	add	t1,a5,sp
     a1c:	00530023          	sb	t0,0(t1)
     a20:	00c68563          	beq	a3,a2,a2a <_write.constprop.0+0xc0>
     a24:	0585                	addi	a1,a1,1
     a26:	fea614e3          	bne	a2,a0,a0e <_write.constprop.0+0xa4>
     a2a:	00468613          	addi	a2,a3,4
     a2e:	f8066613          	ori	a2,a2,-128
     a32:	00c10823          	sb	a2,16(sp)
     a36:	4642                	lw	a2,16(sp)
     a38:	9736                	add	a4,a4,a3
     a3a:	c010                	sw	a2,0(s0)
     a3c:	f69747e3          	blt	a4,s1,9aa <_write.constprop.0+0x40>
     a40:	bfb9                	j	99e <_write.constprop.0+0x34>
     a42:	15fd                	addi	a1,a1,-1
     a44:	fdad                	bnez	a1,9be <_write.constprop.0+0x54>
     a46:	401c                	lw	a5,0(s0)
     a48:	0c07e793          	ori	a5,a5,192
     a4c:	c01c                	sw	a5,0(s0)
     a4e:	b7b9                	j	99c <_write.constprop.0+0x32>
     a50:	4701                	li	a4,0
     a52:	b7ed                	j	a3c <_write.constprop.0+0xd2>

00000a54 <__puts_uart>:
     a54:	1151                	addi	sp,sp,-12
     a56:	c222                	sw	s0,4(sp)
     a58:	c406                	sw	ra,8(sp)
     a5a:	842e                	mv	s0,a1
     a5c:	3739                	jal	96a <_write.constprop.0>
     a5e:	40a2                	lw	ra,8(sp)
     a60:	8522                	mv	a0,s0
     a62:	4412                	lw	s0,4(sp)
     a64:	0131                	addi	sp,sp,12
     a66:	8082                	ret

00000a68 <prefill_solid_poly>:
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
    // ===== [1] EDGE EXTRACTION =====
    struct Edge {
        uint8_t y_start, y_end;
        int16_t x_start, dx_dy;
    } edges[num_pts];
     a68:	00159793          	slli	a5,a1,0x1
     a6c:	97ae                	add	a5,a5,a1
     a6e:	0786                	slli	a5,a5,0x1
     a70:	078d                	addi	a5,a5,3
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
     a72:	fc810113          	addi	sp,sp,-56
    } edges[num_pts];
     a76:	8389                	srli	a5,a5,0x2
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
     a78:	d822                	sw	s0,48(sp)
     a7a:	d626                	sw	s1,44(sp)
     a7c:	da06                	sw	ra,52(sp)
     a7e:	1820                	addi	s0,sp,56
    } edges[num_pts];
     a80:	078a                	slli	a5,a5,0x2
     a82:	40f10133          	sub	sp,sp,a5

    uint8_t edge_count = 0;
    uint8_t y_min = 255, y_max = 0;

    // Build edge table and find Y bounds
    for (uint8_t i = 0, j = num_pts-1; i < num_pts; j = i++) {
     a86:	fff58793          	addi	a5,a1,-1
void prefill_solid_poly(M_Point *pts, uint8_t num_pts) {
     a8a:	fca42c23          	sw	a0,-40(s0)
     a8e:	872e                	mv	a4,a1
    } edges[num_pts];
     a90:	fe242023          	sw	sp,-32(s0)
    for (uint8_t i = 0, j = num_pts-1; i < num_pts; j = i++) {
     a94:	0ff7f793          	zext.b	a5,a5
     a98:	862a                	mv	a2,a0
     a9a:	fe042223          	sw	zero,-28(s0)
    uint8_t y_min = 255, y_max = 0;
     a9e:	fe042423          	sw	zero,-24(s0)
     aa2:	0ff00493          	li	s1,255
    uint8_t edge_count = 0;
     aa6:	4301                	li	t1,0
        // Skip horizontal edges (don't affect filling)
        if (pts[i].y == pts[j].y) continue;
     aa8:	fd842583          	lw	a1,-40(s0)
     aac:	0786                	slli	a5,a5,0x1
     aae:	00164683          	lbu	a3,1(a2)
     ab2:	97ae                	add	a5,a5,a1
     ab4:	0017c583          	lbu	a1,1(a5)
     ab8:	08b68e63          	beq	a3,a1,b54 <prefill_solid_poly+0xec>
        if (pts[i].y < pts[j].y) {
            y0 = pts[i].y; y1 = pts[j].y;
            x0 = pts[i].x;
        } else {
            y0 = pts[j].y; y1 = pts[i].y;
            x0 = pts[j].x;
     abc:	0007c783          	lbu	a5,0(a5)
            x0 = pts[i].x;
     ac0:	00064283          	lbu	t0,0(a2)
            x0 = pts[j].x;
     ac4:	fcf42e23          	sw	a5,-36(s0)
        if (pts[i].y < pts[j].y) {
     ac8:	0ab6fb63          	bgeu	a3,a1,b7e <prefill_solid_poly+0x116>
            x0 = pts[i].x;
     acc:	01029093          	slli	ra,t0,0x10
     ad0:	4100d093          	srai	ra,ra,0x10
            y0 = pts[i].y; y1 = pts[j].y;
     ad4:	852e                	mv	a0,a1
     ad6:	83b6                	mv	t2,a3
        }

        // Update global Y bounds
        y_min = y0 < y_min ? y0 : y_min;
     ad8:	87a6                	mv	a5,s1
     ada:	0093f363          	bgeu	t2,s1,ae0 <prefill_solid_poly+0x78>
     ade:	879e                	mv	a5,t2
     ae0:	0ff7f493          	zext.b	s1,a5
        y_max = y1 > y_max ? y1 : y_max;
     ae4:	fe842783          	lw	a5,-24(s0)
     ae8:	fca40a23          	sb	a0,-44(s0)
     aec:	00f57463          	bgeu	a0,a5,af4 <prefill_solid_poly+0x8c>
     af0:	fcf40a23          	sb	a5,-44(s0)
     af4:	fd444783          	lbu	a5,-44(s0)
     af8:	fce42423          	sw	a4,-56(s0)
     afc:	fe042703          	lw	a4,-32(s0)
     b00:	fef42423          	sw	a5,-24(s0)

        // Store edge (dx/dy as fixed-point 8.8)
        edges[edge_count++] = (struct Edge){
     b04:	00130793          	addi	a5,t1,1
     b08:	0ff7f793          	zext.b	a5,a5
     b0c:	fcf42a23          	sw	a5,-44(s0)
     b10:	00131793          	slli	a5,t1,0x1
     b14:	979a                	add	a5,a5,t1
     b16:	0786                	slli	a5,a5,0x1
     b18:	97ba                	add	a5,a5,a4
     b1a:	00a2                	slli	ra,ra,0x8
     b1c:	00a780a3          	sb	a0,1(a5)
     b20:	00778023          	sb	t2,0(a5)
     b24:	00179123          	sh	ra,2(a5)
     b28:	fcf42823          	sw	a5,-48(s0)
            .y_start = y0,
            .y_end = y1,
            .x_start = x0 << 8,
            .dx_dy = ((pts[j].x - pts[i].x) << 8) / (pts[j].y - pts[i].y)
     b2c:	fdc42783          	lw	a5,-36(s0)
     b30:	8d95                	sub	a1,a1,a3
     b32:	fcc42623          	sw	a2,-52(s0)
     b36:	40578533          	sub	a0,a5,t0
     b3a:	0522                	slli	a0,a0,0x8
     b3c:	d64ff0ef          	jal	a0 <__divsi3>
        edges[edge_count++] = (struct Edge){
     b40:	fd042783          	lw	a5,-48(s0)
     b44:	fd442303          	lw	t1,-44(s0)
     b48:	fc842703          	lw	a4,-56(s0)
     b4c:	fcc42603          	lw	a2,-52(s0)
     b50:	00a79223          	sh	a0,4(a5)
    for (uint8_t i = 0, j = num_pts-1; i < num_pts; j = i++) {
     b54:	fe442783          	lw	a5,-28(s0)
     b58:	0609                	addi	a2,a2,2
     b5a:	00178693          	addi	a3,a5,1
     b5e:	0ff6f693          	zext.b	a3,a3
     b62:	00d71b63          	bne	a4,a3,b78 <prefill_solid_poly+0x110>
        };
    }

    // ===== [2] SCANLINE PROCESSING =====
    for (uint8_t y = y_min; y <= y_max; y++) {
     b66:	fe842783          	lw	a5,-24(s0)
     b6a:	1097ea63          	bltu	a5,s1,c7e <prefill_solid_poly+0x216>
     b6e:	fe042783          	lw	a5,-32(s0)
        uint8_t x_list[8];  // Supports 4 edge crossings (99% of cases)
        uint8_t x_count = 0;

        // Collect active edges
        for (uint8_t e = 0; e < edge_count; e++) {
     b72:	4681                	li	a3,0
        uint8_t x_count = 0;
     b74:	4701                	li	a4,0
     b76:	a0a9                	j	bc0 <prefill_solid_poly+0x158>
     b78:	fed42223          	sw	a3,-28(s0)
     b7c:	b735                	j	aa8 <prefill_solid_poly+0x40>
            x0 = pts[j].x;
     b7e:	fdc41083          	lh	ra,-36(s0)
            y0 = pts[j].y; y1 = pts[i].y;
     b82:	8536                	mv	a0,a3
     b84:	83ae                	mv	t2,a1
     b86:	bf89                	j	ad8 <prefill_solid_poly+0x70>
            if (y >= edges[e].y_start && y < edges[e].y_end) {
     b88:	0007c583          	lbu	a1,0(a5)
     b8c:	02b4e663          	bltu	s1,a1,bb8 <prefill_solid_poly+0x150>
     b90:	0017c583          	lbu	a1,1(a5)
     b94:	02b4f263          	bgeu	s1,a1,bb8 <prefill_solid_poly+0x150>
                x_list[x_count++] = edges[e].x_start >> 8;
     b98:	00279583          	lh	a1,2(a5)
     b9c:	1651                	addi	a2,a2,-12
     b9e:	9622                	add	a2,a2,s0
     ba0:	4085d513          	srai	a0,a1,0x8
     ba4:	fea60c23          	sb	a0,-8(a2)
                edges[e].x_start += edges[e].dx_dy;  // Step X
     ba8:	0047d603          	lhu	a2,4(a5)
                x_list[x_count++] = edges[e].x_start >> 8;
     bac:	0705                	addi	a4,a4,1
     bae:	0ff77713          	zext.b	a4,a4
                edges[e].x_start += edges[e].dx_dy;  // Step X
     bb2:	962e                	add	a2,a2,a1
     bb4:	00c79123          	sh	a2,2(a5)
        for (uint8_t e = 0; e < edge_count; e++) {
     bb8:	0685                	addi	a3,a3,1
     bba:	0ff6f693          	zext.b	a3,a3
     bbe:	0799                	addi	a5,a5,6
                x_list[x_count++] = edges[e].x_start >> 8;
     bc0:	863a                	mv	a2,a4
        for (uint8_t e = 0; e < edge_count; e++) {
     bc2:	fcd313e3          	bne	t1,a3,b88 <prefill_solid_poly+0x120>
     bc6:	fec40613          	addi	a2,s0,-20
            }
        }

        // Insertion sort (optimal for small N)
        for (uint8_t i = 1; i < x_count; i++) {
     bca:	4685                	li	a3,1
            uint8_t val = x_list[i];
            int8_t j = i-1;
            while (j >= 0 && x_list[j] > val) {
     bcc:	53fd                	li	t2,-1
        for (uint8_t i = 1; i < x_count; i++) {
     bce:	00e6eb63          	bltu	a3,a4,be4 <prefill_solid_poly+0x17c>
            }
            x_list[j+1] = val;
        }

        // Fill between pairs (with bounds checking)
        for (uint8_t i = 0; i+1 < x_count; i += 2) {
     bd2:	4781                	li	a5,0
     bd4:	00178693          	addi	a3,a5,1
     bd8:	04e6c563          	blt	a3,a4,c22 <prefill_solid_poly+0x1ba>
    for (uint8_t y = y_min; y <= y_max; y++) {
     bdc:	0485                	addi	s1,s1,1
     bde:	0ff4f493          	zext.b	s1,s1
     be2:	b751                	j	b66 <prefill_solid_poly+0xfe>
            int8_t j = i-1;
     be4:	fff68793          	addi	a5,a3,-1
            uint8_t val = x_list[i];
     be8:	00164503          	lbu	a0,1(a2)
            int8_t j = i-1;
     bec:	07e2                	slli	a5,a5,0x18
     bee:	87e1                	srai	a5,a5,0x18
     bf0:	85b2                	mv	a1,a2
            while (j >= 0 && x_list[j] > val) {
     bf2:	0005c283          	lbu	t0,0(a1)
     bf6:	00557a63          	bgeu	a0,t0,c0a <prefill_solid_poly+0x1a2>
                x_list[j+1] = x_list[j];
     bfa:	17fd                	addi	a5,a5,-1
                j--;
     bfc:	07e2                	slli	a5,a5,0x18
                x_list[j+1] = x_list[j];
     bfe:	005580a3          	sb	t0,1(a1)
                j--;
     c02:	87e1                	srai	a5,a5,0x18
            while (j >= 0 && x_list[j] > val) {
     c04:	15fd                	addi	a1,a1,-1
     c06:	fe7796e3          	bne	a5,t2,bf2 <prefill_solid_poly+0x18a>
            x_list[j+1] = val;
     c0a:	0785                	addi	a5,a5,1
     c0c:	07e2                	slli	a5,a5,0x18
     c0e:	87e1                	srai	a5,a5,0x18
     c10:	17d1                	addi	a5,a5,-12
     c12:	97a2                	add	a5,a5,s0
        for (uint8_t i = 1; i < x_count; i++) {
     c14:	0685                	addi	a3,a3,1
            x_list[j+1] = val;
     c16:	fea78c23          	sb	a0,-8(a5)
        for (uint8_t i = 1; i < x_count; i++) {
     c1a:	0ff6f693          	zext.b	a3,a3
     c1e:	0605                	addi	a2,a2,1
     c20:	b77d                	j	bce <prefill_solid_poly+0x166>
            uint8_t x1 = x_list[i] < SSD1306_W ? x_list[i] : SSD1306_W-1;
     c22:	ff478613          	addi	a2,a5,-12
     c26:	9622                	add	a2,a2,s0
     c28:	ff864603          	lbu	a2,-8(a2)
     c2c:	07f00513          	li	a0,127
     c30:	0ff67593          	zext.b	a1,a2
     c34:	00c57463          	bgeu	a0,a2,c3c <prefill_solid_poly+0x1d4>
     c38:	07f00593          	li	a1,127
            uint8_t x2 = x_list[i+1] < SSD1306_W ? x_list[i+1] : SSD1306_W-1;
     c3c:	16d1                	addi	a3,a3,-12
     c3e:	96a2                	add	a3,a3,s0
     c40:	ff86c683          	lbu	a3,-8(a3)
     c44:	07f00513          	li	a0,127
     c48:	0ff6f613          	zext.b	a2,a3
     c4c:	00d57463          	bgeu	a0,a3,c54 <prefill_solid_poly+0x1ec>
     c50:	07f00613          	li	a2,127
            if (x1 < x2) prefill_fastHorLine(y, x1, x2);
     c54:	02c5f163          	bgeu	a1,a2,c76 <prefill_solid_poly+0x20e>
     c58:	8526                	mv	a0,s1
     c5a:	fcf42c23          	sw	a5,-40(s0)
     c5e:	fce42e23          	sw	a4,-36(s0)
     c62:	fe642223          	sw	t1,-28(s0)
     c66:	ee2ff0ef          	jal	348 <prefill_fastHorLine>
     c6a:	fd842783          	lw	a5,-40(s0)
     c6e:	fdc42703          	lw	a4,-36(s0)
     c72:	fe442303          	lw	t1,-28(s0)
        for (uint8_t i = 0; i+1 < x_count; i += 2) {
     c76:	0789                	addi	a5,a5,2
     c78:	0ff7f793          	zext.b	a5,a5
     c7c:	bfa1                	j	bd4 <prefill_solid_poly+0x16c>
        }
    }
}
     c7e:	fc840113          	addi	sp,s0,-56
     c82:	50d2                	lw	ra,52(sp)
     c84:	5442                	lw	s0,48(sp)
     c86:	54b2                	lw	s1,44(sp)
     c88:	03810113          	addi	sp,sp,56
     c8c:	8082                	ret

00000c8e <handle_reset>:
     c8e:	1ffff197          	auipc	gp,0x1ffff
     c92:	76e18193          	addi	gp,gp,1902 # 200003fc <__global_pointer$>
     c96:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     c9a:	6509                	lui	a0,0x2
     c9c:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x61a>
     ca0:	30051073          	csrw	mstatus,a0
     ca4:	468d                	li	a3,3
     ca6:	fffff517          	auipc	a0,0xfffff
     caa:	35a50513          	addi	a0,a0,858 # 0 <InterruptVector>
     cae:	8d55                	or	a0,a0,a3
     cb0:	30551073          	csrw	mtvec,a0
     cb4:	c7818513          	addi	a0,gp,-904 # 20000074 <WS2812BLEDInUse>
     cb8:	1b018593          	addi	a1,gp,432 # 200005ac <_ebss>
     cbc:	4601                	li	a2,0
     cbe:	00b55663          	bge	a0,a1,cca <handle_reset+0x3c>
     cc2:	c110                	sw	a2,0(a0)
     cc4:	0511                	addi	a0,a0,4
     cc6:	feb54ee3          	blt	a0,a1,cc2 <handle_reset+0x34>
     cca:	00001517          	auipc	a0,0x1
     cce:	54250513          	addi	a0,a0,1346 # 220c <_data_lma>
     cd2:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_aht21>
     cd6:	1ffff617          	auipc	a2,0x1ffff
     cda:	39e60613          	addi	a2,a2,926 # 20000074 <WS2812BLEDInUse>
     cde:	00c58863          	beq	a1,a2,cee <handle_reset+0x60>
     ce2:	4114                	lw	a3,0(a0)
     ce4:	c194                	sw	a3,0(a1)
     ce6:	0511                	addi	a0,a0,4
     ce8:	0591                	addi	a1,a1,4
     cea:	fec59ae3          	bne	a1,a2,cde <handle_reset+0x50>
     cee:	e000f7b7          	lui	a5,0xe000f
     cf2:	4715                	li	a4,5
     cf4:	c398                	sw	a4,0(a5)
     cf6:	6785                	lui	a5,0x1
     cf8:	26678793          	addi	a5,a5,614 # 1266 <main>
     cfc:	34179073          	csrw	mepc,a5
     d00:	30200073          	mret

00000d04 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     d04:	34102573          	csrr	a0,mepc
void DefaultIRQHandler( void )
{
#if FUNCONF_DEBUG_HARDFAULT && ( FUNCONF_USE_DEBUGPRINTF || FUNCONF_USE_UARTPRINTF || FUNCONF_USE_USBPRINTF )
	//This is kind of like a crash handler.
	//printf( "DEAD MSTATUS:%08x MTVAL:%08x MCAUSE:%08x MEPC:%08x\n", (int)__get_MSTATUS(), (int)__get_MTVAL(), (int)__get_MCAUSE(), (int)__get_MEPC() );
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     d08:	cf4ff0ef          	jal	1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     d0c:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     d10:	cecff0ef          	jal	1fc <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     d14:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     d18:	ce4ff0ef          	jal	1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     d1c:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     d20:	cdcff0ef          	jal	1fc <PrintHex>
#if FUNCONF_USE_DEBUGPRINTF
	while( (*DMDATA0) & 0x80 );
     d24:	e00007b7          	lui	a5,0xe0000
     d28:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
     d2c:	4398                	lw	a4,0(a5)
     d2e:	08077713          	andi	a4,a4,128
     d32:	ff6d                	bnez	a4,d2c <ADC1_2_IRQHandler+0x28>
	*DMDATA0 = 0x0a85;
     d34:	6705                	lui	a4,0x1
     d36:	a8570713          	addi	a4,a4,-1403 # a85 <prefill_solid_poly+0x1d>
     d3a:	c398                	sw	a4,0(a5)
	while( (*DMDATA0) & 0x80 );
     d3c:	e00007b7          	lui	a5,0xe0000
     d40:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
     d44:	4398                	lw	a4,0(a5)
     d46:	08077713          	andi	a4,a4,128
     d4a:	ff6d                	bnez	a4,d44 <ADC1_2_IRQHandler+0x40>
	*DMDATA0 = 0xaaaaaa83;
     d4c:	aaaab737          	lui	a4,0xaaaab
     d50:	a8370713          	addi	a4,a4,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     d54:	c398                	sw	a4,0(a5)
	putchar( '\n' );
#endif
#endif
	//printf( "DEAD MSTATUS:%08x MTVAL:%08x MCAUSE:%08x MEPC:%08x\n", (int)__get_MSTATUS(), (int)__get_MTVAL(), (int)__get_MCAUSE(), (int)__get_MEPC() );
	// Infinite Loop
	asm volatile( "1: j 1b" );
     d56:	a001                	j	d56 <ADC1_2_IRQHandler+0x52>

00000d58 <NMI_Handler>:
 * 			The sys clock is switched to HSI.
 * 			Clears the CSSF flag in RCC->INTR
 */
void NMI_RCC_CSS_IRQHandler( void )
{
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     d58:	40021737          	lui	a4,0x40021
     d5c:	471c                	lw	a5,8(a4)
     d5e:	008006b7          	lui	a3,0x800
     d62:	8fd5                	or	a5,a5,a3
     d64:	c71c                	sw	a5,8(a4)

00000d66 <strlen>:
     d66:	87aa                	mv	a5,a0
     d68:	0007c703          	lbu	a4,0(a5)
     d6c:	e701                	bnez	a4,d74 <strlen+0xe>
     d6e:	40a78533          	sub	a0,a5,a0
     d72:	8082                	ret
     d74:	0785                	addi	a5,a5,1
     d76:	bfcd                	j	d68 <strlen+0x2>

00000d78 <mini_vpprintf>:
     d78:	fa410113          	addi	sp,sp,-92
     d7c:	caa2                	sw	s0,84(sp)
     d7e:	c8a6                	sw	s1,80(sp)
     d80:	cc86                	sw	ra,88(sp)
     d82:	c02a                	sw	a0,0(sp)
     d84:	c22e                	sw	a1,4(sp)
     d86:	8432                	mv	s0,a2
     d88:	84b6                	mv	s1,a3
     d8a:	ca02                	sw	zero,20(sp)
     d8c:	00044783          	lbu	a5,0(s0)
     d90:	00140693          	addi	a3,s0,1
     d94:	00f10fa3          	sb	a5,31(sp)
     d98:	eb81                	bnez	a5,da8 <mini_vpprintf+0x30>
     d9a:	40e6                	lw	ra,88(sp)
     d9c:	4456                	lw	s0,84(sp)
     d9e:	4552                	lw	a0,20(sp)
     da0:	44c6                	lw	s1,80(sp)
     da2:	05c10113          	addi	sp,sp,92
     da6:	8082                	ret
     da8:	c636                	sw	a3,12(sp)
     daa:	02500713          	li	a4,37
     dae:	02e78063          	beq	a5,a4,dce <mini_vpprintf+0x56>
     db2:	4612                	lw	a2,4(sp)
     db4:	4782                	lw	a5,0(sp)
     db6:	4585                	li	a1,1
     db8:	01f10513          	addi	a0,sp,31
     dbc:	9782                	jalr	a5
     dbe:	46b2                	lw	a3,12(sp)
     dc0:	c426                	sw	s1,8(sp)
     dc2:	8436                	mv	s0,a3
     dc4:	47d2                	lw	a5,20(sp)
     dc6:	44a2                	lw	s1,8(sp)
     dc8:	97aa                	add	a5,a5,a0
     dca:	ca3e                	sw	a5,20(sp)
     dcc:	b7c1                	j	d8c <mini_vpprintf+0x14>
     dce:	00144703          	lbu	a4,1(s0)
     dd2:	03000613          	li	a2,48
     dd6:	03000693          	li	a3,48
     dda:	00e10fa3          	sb	a4,31(sp)
     dde:	c632                	sw	a2,12(sp)
     de0:	00240793          	addi	a5,s0,2
     de4:	08d71263          	bne	a4,a3,e68 <mini_vpprintf+0xf0>
     de8:	843e                	mv	s0,a5
     dea:	4681                	li	a3,0
     dec:	4781                	li	a5,0
     dee:	45a5                	li	a1,9
     df0:	a811                	j	e04 <mini_vpprintf+0x8c>
     df2:	00279713          	slli	a4,a5,0x2
     df6:	0405                	addi	s0,s0,1
     df8:	97ba                	add	a5,a5,a4
     dfa:	fff44703          	lbu	a4,-1(s0)
     dfe:	0786                	slli	a5,a5,0x1
     e00:	97b2                	add	a5,a5,a2
     e02:	4685                	li	a3,1
     e04:	fd070613          	addi	a2,a4,-48 # 40020fd0 <_eusrstack+0x200207d0>
     e08:	0ff67513          	zext.b	a0,a2
     e0c:	fea5f3e3          	bgeu	a1,a0,df2 <mini_vpprintf+0x7a>
     e10:	c299                	beqz	a3,e16 <mini_vpprintf+0x9e>
     e12:	00e10fa3          	sb	a4,31(sp)
     e16:	c83e                	sw	a5,16(sp)
     e18:	46e1                	li	a3,24
     e1a:	00f6d363          	bge	a3,a5,e20 <mini_vpprintf+0xa8>
     e1e:	c836                	sw	a3,16(sp)
     e20:	06c00613          	li	a2,108
     e24:	4681                	li	a3,0
     e26:	00c71863          	bne	a4,a2,e36 <mini_vpprintf+0xbe>
     e2a:	00044703          	lbu	a4,0(s0)
     e2e:	4685                	li	a3,1
     e30:	0405                	addi	s0,s0,1
     e32:	00e10fa3          	sb	a4,31(sp)
     e36:	01f14603          	lbu	a2,31(sp)
     e3a:	06400713          	li	a4,100
     e3e:	06e60563          	beq	a2,a4,ea8 <mini_vpprintf+0x130>
     e42:	02c76763          	bltu	a4,a2,e70 <mini_vpprintf+0xf8>
     e46:	05800793          	li	a5,88
     e4a:	0af60263          	beq	a2,a5,eee <mini_vpprintf+0x176>
     e4e:	06300793          	li	a5,99
     e52:	0cf60063          	beq	a2,a5,f12 <mini_vpprintf+0x19a>
     e56:	d231                	beqz	a2,d9a <mini_vpprintf+0x22>
     e58:	4612                	lw	a2,4(sp)
     e5a:	4782                	lw	a5,0(sp)
     e5c:	4585                	li	a1,1
     e5e:	01f10513          	addi	a0,sp,31
     e62:	9782                	jalr	a5
     e64:	c426                	sw	s1,8(sp)
     e66:	bfb9                	j	dc4 <mini_vpprintf+0x4c>
     e68:	02000693          	li	a3,32
     e6c:	c636                	sw	a3,12(sp)
     e6e:	bfad                	j	de8 <mini_vpprintf+0x70>
     e70:	07500713          	li	a4,117
     e74:	02e60a63          	beq	a2,a4,ea8 <mini_vpprintf+0x130>
     e78:	07800713          	li	a4,120
     e7c:	06e60963          	beq	a2,a4,eee <mini_vpprintf+0x176>
     e80:	07300713          	li	a4,115
     e84:	fce61ae3          	bne	a2,a4,e58 <mini_vpprintf+0xe0>
     e88:	cc3e                	sw	a5,24(sp)
     e8a:	00448793          	addi	a5,s1,4
     e8e:	4084                	lw	s1,0(s1)
     e90:	c43e                	sw	a5,8(sp)
     e92:	8526                	mv	a0,s1
     e94:	3dc9                	jal	d66 <strlen>
     e96:	47e2                	lw	a5,24(sp)
     e98:	85aa                	mv	a1,a0
     e9a:	08f05963          	blez	a5,f2c <mini_vpprintf+0x1b4>
     e9e:	46c2                	lw	a3,16(sp)
     ea0:	4632                	lw	a2,12(sp)
     ea2:	1838                	addi	a4,sp,56
     ea4:	8526                	mv	a0,s1
     ea6:	a025                	j	ece <mini_vpprintf+0x156>
     ea8:	00448793          	addi	a5,s1,4
     eac:	c43e                	sw	a5,8(sp)
     eae:	ca85                	beqz	a3,ede <mini_vpprintf+0x166>
     eb0:	f8b60613          	addi	a2,a2,-117
     eb4:	1018                	addi	a4,sp,32
     eb6:	00163693          	seqz	a3,a2
     eba:	4088                	lw	a0,0(s1)
     ebc:	4601                	li	a2,0
     ebe:	45a9                	li	a1,10
     ec0:	b90ff0ef          	jal	250 <mini_itoa.part.0>
     ec4:	46c2                	lw	a3,16(sp)
     ec6:	4632                	lw	a2,12(sp)
     ec8:	1838                	addi	a4,sp,56
     eca:	85aa                	mv	a1,a0
     ecc:	1008                	addi	a0,sp,32
     ece:	a50ff0ef          	jal	11e <mini_pad>
     ed2:	4612                	lw	a2,4(sp)
     ed4:	85aa                	mv	a1,a0
     ed6:	1828                	addi	a0,sp,56
     ed8:	4782                	lw	a5,0(sp)
     eda:	9782                	jalr	a5
     edc:	b5e5                	j	dc4 <mini_vpprintf+0x4c>
     ede:	07500793          	li	a5,117
     ee2:	1018                	addi	a4,sp,32
     ee4:	4685                	li	a3,1
     ee6:	fcf60ae3          	beq	a2,a5,eba <mini_vpprintf+0x142>
     eea:	4681                	li	a3,0
     eec:	b7f9                	j	eba <mini_vpprintf+0x142>
     eee:	4088                	lw	a0,0(s1)
     ef0:	fa860613          	addi	a2,a2,-88
     ef4:	00448793          	addi	a5,s1,4
     ef8:	1018                	addi	a4,sp,32
     efa:	4685                	li	a3,1
     efc:	00163613          	seqz	a2,a2
     f00:	45c1                	li	a1,16
     f02:	c43e                	sw	a5,8(sp)
     f04:	b4cff0ef          	jal	250 <mini_itoa.part.0>
     f08:	46c2                	lw	a3,16(sp)
     f0a:	4632                	lw	a2,12(sp)
     f0c:	85aa                	mv	a1,a0
     f0e:	1838                	addi	a4,sp,56
     f10:	bf75                	j	ecc <mini_vpprintf+0x154>
     f12:	00448793          	addi	a5,s1,4
     f16:	c43e                	sw	a5,8(sp)
     f18:	409c                	lw	a5,0(s1)
     f1a:	46c2                	lw	a3,16(sp)
     f1c:	4632                	lw	a2,12(sp)
     f1e:	00f10fa3          	sb	a5,31(sp)
     f22:	1838                	addi	a4,sp,56
     f24:	4585                	li	a1,1
     f26:	01f10513          	addi	a0,sp,31
     f2a:	b755                	j	ece <mini_vpprintf+0x156>
     f2c:	4612                	lw	a2,4(sp)
     f2e:	8526                	mv	a0,s1
     f30:	b765                	j	ed8 <mini_vpprintf+0x160>

00000f32 <printf>:
     f32:	fdc10113          	addi	sp,sp,-36
     f36:	ca32                	sw	a2,20(sp)
     f38:	862a                	mv	a2,a0
     f3a:	6505                	lui	a0,0x1
     f3c:	c82e                	sw	a1,16(sp)
     f3e:	cc36                	sw	a3,24(sp)
     f40:	4581                	li	a1,0
     f42:	0814                	addi	a3,sp,16
     f44:	a5450513          	addi	a0,a0,-1452 # a54 <__puts_uart>
     f48:	c606                	sw	ra,12(sp)
     f4a:	ce3a                	sw	a4,28(sp)
     f4c:	d03e                	sw	a5,32(sp)
     f4e:	c036                	sw	a3,0(sp)
     f50:	3525                	jal	d78 <mini_vpprintf>
     f52:	40b2                	lw	ra,12(sp)
     f54:	02410113          	addi	sp,sp,36
     f58:	8082                	ret

00000f5a <mini_vsnprintf>:
     f5a:	1121                	addi	sp,sp,-24
     f5c:	ca06                	sw	ra,20(sp)
     f5e:	c822                	sw	s0,16(sp)
     f60:	c02a                	sw	a0,0(sp)
     f62:	c22a                	sw	a0,4(sp)
     f64:	c42e                	sw	a1,8(sp)
     f66:	c185                	beqz	a1,f86 <mini_vsnprintf+0x2c>
     f68:	842a                	mv	s0,a0
     f6a:	858a                	mv	a1,sp
     f6c:	e111                	bnez	a0,f70 <mini_vsnprintf+0x16>
     f6e:	4581                	li	a1,0
     f70:	1bc00513          	li	a0,444
     f74:	3511                	jal	d78 <mini_vpprintf>
     f76:	c401                	beqz	s0,f7e <mini_vsnprintf+0x24>
     f78:	4512                	lw	a0,4(sp)
     f7a:	4782                	lw	a5,0(sp)
     f7c:	8d1d                	sub	a0,a0,a5
     f7e:	40d2                	lw	ra,20(sp)
     f80:	4442                	lw	s0,16(sp)
     f82:	0161                	addi	sp,sp,24
     f84:	8082                	ret
     f86:	4401                	li	s0,0
     f88:	b7dd                	j	f6e <mini_vsnprintf+0x14>

00000f8a <sprintf>:
     f8a:	1101                	addi	sp,sp,-32
     f8c:	c832                	sw	a2,16(sp)
     f8e:	862e                	mv	a2,a1
     f90:	800005b7          	lui	a1,0x80000
     f94:	ca36                	sw	a3,20(sp)
     f96:	15fd                	addi	a1,a1,-1 # 7fffffff <_eusrstack+0x5ffff7ff>
     f98:	0814                	addi	a3,sp,16
     f9a:	c606                	sw	ra,12(sp)
     f9c:	cc3a                	sw	a4,24(sp)
     f9e:	ce3e                	sw	a5,28(sp)
     fa0:	c036                	sw	a3,0(sp)
     fa2:	3f65                	jal	f5a <mini_vsnprintf>
     fa4:	40b2                	lw	ra,12(sp)
     fa6:	6105                	addi	sp,sp,32
     fa8:	8082                	ret

00000faa <memset>:
     faa:	962a                	add	a2,a2,a0
     fac:	87aa                	mv	a5,a0
     fae:	00c79363          	bne	a5,a2,fb4 <memset+0xa>
     fb2:	8082                	ret
     fb4:	00b78023          	sb	a1,0(a5)
     fb8:	0785                	addi	a5,a5,1
     fba:	bfd5                	j	fae <memset+0x4>

00000fbc <strcpy>:
     fbc:	87aa                	mv	a5,a0
     fbe:	0005c703          	lbu	a4,0(a1)
     fc2:	00e78023          	sb	a4,0(a5)
     fc6:	e311                	bnez	a4,fca <strcpy+0xe>
     fc8:	8082                	ret
     fca:	0585                	addi	a1,a1,1
     fcc:	0785                	addi	a5,a5,1
     fce:	bfc5                	j	fbe <strcpy+0x2>

00000fd0 <memcpy>:
     fd0:	4781                	li	a5,0
     fd2:	00f61363          	bne	a2,a5,fd8 <memcpy+0x8>
     fd6:	8082                	ret
     fd8:	00f58733          	add	a4,a1,a5
     fdc:	00074683          	lbu	a3,0(a4)
     fe0:	00f50733          	add	a4,a0,a5
     fe4:	0785                	addi	a5,a5,1
     fe6:	00d70023          	sb	a3,0(a4)
     fea:	b7e5                	j	fd2 <memcpy+0x2>

00000fec <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
     fec:	7179                	addi	sp,sp,-48
     fee:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
     ff0:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
     ff4:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
     ff6:	862e                	mv	a2,a1
     ff8:	85aa                	mv	a1,a0
     ffa:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
     ffe:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    1000:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    1004:	37f1                	jal	fd0 <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    1006:	00140593          	addi	a1,s0,1
    100a:	850a                	mv	a0,sp
    100c:	d10ff0ef          	jal	51c <i2c_write_raw.constprop.0>
}
    1010:	50b2                	lw	ra,44(sp)
    1012:	5422                	lw	s0,40(sp)
    1014:	6145                	addi	sp,sp,48
    1016:	8082                	ret

00001018 <ssd1306_renderFrame>:
void ssd1306_renderFrame() {
    1018:	1131                	addi	sp,sp,-20
	ssd1306_cmd(SSD1306_COLUMNADDR);
    101a:	02100513          	li	a0,33
void ssd1306_renderFrame() {
    101e:	c806                	sw	ra,16(sp)
    1020:	c622                	sw	s0,12(sp)
    1022:	c426                	sw	s1,8(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1024:	e42ff0ef          	jal	666 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1028:	4501                	li	a0,0
    102a:	e3cff0ef          	jal	666 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    102e:	07f00513          	li	a0,127
    1032:	e34ff0ef          	jal	666 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1036:	02200513          	li	a0,34
    103a:	e2cff0ef          	jal	666 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    103e:	4501                	li	a0,0
    1040:	e26ff0ef          	jal	666 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1044:	451d                	li	a0,7
    1046:	e20ff0ef          	jal	666 <ssd1306_cmd>
    104a:	4401                	li	s0,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    104c:	d2418493          	addi	s1,gp,-732 # 20000120 <frame_buffer>
void ssd1306_renderFrame() {
    1050:	4501                	li	a0,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    1052:	00940733          	add	a4,s0,s1
			uint16_t chunk_end = chunk + CHUNK_SIZE;
    1056:	02050793          	addi	a5,a0,32
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    105a:	01079593          	slli	a1,a5,0x10
    105e:	81c1                	srli	a1,a1,0x10
    1060:	8d89                	sub	a1,a1,a0
    1062:	953a                	add	a0,a0,a4
    1064:	c23e                	sw	a5,4(sp)
    1066:	c03a                	sw	a4,0(sp)
    1068:	3751                	jal	fec <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    106a:	4792                	lw	a5,4(sp)
    106c:	4702                	lw	a4,0(sp)
    106e:	853e                	mv	a0,a5
    1070:	08000793          	li	a5,128
    1074:	fef511e3          	bne	a0,a5,1056 <ssd1306_renderFrame+0x3e>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    1078:	08040413          	addi	s0,s0,128
    107c:	40000793          	li	a5,1024
    1080:	fcf418e3          	bne	s0,a5,1050 <ssd1306_renderFrame+0x38>
}
    1084:	40c2                	lw	ra,16(sp)
    1086:	4432                	lw	s0,12(sp)
    1088:	44a2                	lw	s1,8(sp)
    108a:	0151                	addi	sp,sp,20
    108c:	8082                	ret

0000108e <ssd1306_print_str_at.constprop.0>:
void ssd1306_print_str_at(
    108e:	1151                	addi	sp,sp,-12
    1090:	c222                	sw	s0,4(sp)
    1092:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1094:	02100513          	li	a0,33
void ssd1306_print_str_at(
    1098:	c406                	sw	ra,8(sp)
    109a:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    109c:	dcaff0ef          	jal	666 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    10a0:	4501                	li	a0,0
    10a2:	dc4ff0ef          	jal	666 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    10a6:	07f00513          	li	a0,127
    10aa:	dbcff0ef          	jal	666 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    10ae:	02200513          	li	a0,34
    10b2:	db4ff0ef          	jal	666 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    10b6:	8522                	mv	a0,s0
    10b8:	daeff0ef          	jal	666 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    10bc:	8522                	mv	a0,s0
    10be:	da8ff0ef          	jal	666 <ssd1306_cmd>
    10c2:	4465                	li	s0,25
    10c4:	c9018493          	addi	s1,gp,-880 # 2000008c <str_output>
		if (*str) {
    10c8:	0004c783          	lbu	a5,0(s1)
    10cc:	c78d                	beqz	a5,10f6 <ssd1306_print_str_at.constprop.0+0x68>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    10ce:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    10d0:	0ff7f793          	zext.b	a5,a5
    10d4:	00279513          	slli	a0,a5,0x2
    10d8:	6709                	lui	a4,0x2
    10da:	97aa                	add	a5,a5,a0
    10dc:	00470513          	addi	a0,a4,4 # 2004 <FONT_7x5>
    10e0:	4595                	li	a1,5
    10e2:	953e                	add	a0,a0,a5
    10e4:	3721                	jal	fec <ssd1306_data.isra.0>
			str++;
    10e6:	0485                	addi	s1,s1,1
	for (int i=0; i<25; i++) {
    10e8:	147d                	addi	s0,s0,-1
    10ea:	fc79                	bnez	s0,10c8 <ssd1306_print_str_at.constprop.0+0x3a>
}
    10ec:	40a2                	lw	ra,8(sp)
    10ee:	4412                	lw	s0,4(sp)
    10f0:	4482                	lw	s1,0(sp)
    10f2:	0131                	addi	sp,sp,12
    10f4:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    10f6:	6789                	lui	a5,0x2
    10f8:	4595                	li	a1,5
    10fa:	00478513          	addi	a0,a5,4 # 2004 <FONT_7x5>
    10fe:	35fd                	jal	fec <ssd1306_data.isra.0>
    1100:	b7e5                	j	10e8 <ssd1306_print_str_at.constprop.0+0x5a>

00001102 <puts>:
    1102:	1151                	addi	sp,sp,-12
    1104:	c406                	sw	ra,8(sp)
    1106:	c222                	sw	s0,4(sp)
    1108:	c026                	sw	s1,0(sp)
    110a:	84aa                	mv	s1,a0
    110c:	39a9                	jal	d66 <strlen>
    110e:	842a                	mv	s0,a0
    1110:	85aa                	mv	a1,a0
    1112:	8526                	mv	a0,s1
    1114:	857ff0ef          	jal	96a <_write.constprop.0>
    1118:	6509                	lui	a0,0x2
    111a:	4585                	li	a1,1
    111c:	f6450513          	addi	a0,a0,-156 # 1f64 <DMA1_Channel3_IRQHandler+0x90>
    1120:	84bff0ef          	jal	96a <_write.constprop.0>
    1124:	40a2                	lw	ra,8(sp)
    1126:	00140513          	addi	a0,s0,1
    112a:	4412                	lw	s0,4(sp)
    112c:	4482                	lw	s1,0(sp)
    112e:	0131                	addi	sp,sp,12
    1130:	8082                	ret

00001132 <putchar>:
    1132:	e00007b7          	lui	a5,0xe0000
    1136:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
    113a:	4398                	lw	a4,0(a5)
    113c:	0c000693          	li	a3,192
    1140:	0c077713          	andi	a4,a4,192
    1144:	04d70a63          	beq	a4,a3,1198 <putchar+0x66>
    1148:	1151                	addi	sp,sp,-12
    114a:	00100737          	lui	a4,0x100
    114e:	c222                	sw	s0,4(sp)
    1150:	c406                	sw	ra,8(sp)
    1152:	842a                	mv	s0,a0
    1154:	0705                	addi	a4,a4,1 # 100001 <lib_i2c.c.829168c6+0xf6711>
    1156:	4394                	lw	a3,0(a5)
    1158:	0806f613          	andi	a2,a3,128
    115c:	e21d                	bnez	a2,1182 <putchar+0x50>
    115e:	c299                	beqz	a3,1164 <putchar+0x32>
    1160:	ffeff0ef          	jal	95e <internal_handle_input.constprop.0>
    1164:	6741                	lui	a4,0x10
    1166:	f0070713          	addi	a4,a4,-256 # ff00 <lib_i2c.c.829168c6+0x6610>
    116a:	00841793          	slli	a5,s0,0x8
    116e:	8ff9                	and	a5,a5,a4
    1170:	e0000737          	lui	a4,0xe0000
    1174:	0857e793          	ori	a5,a5,133
    1178:	0f470713          	addi	a4,a4,244 # e00000f4 <_eusrstack+0xbffff8f4>
    117c:	c31c                	sw	a5,0(a4)
    117e:	4505                	li	a0,1
    1180:	a801                	j	1190 <putchar+0x5e>
    1182:	177d                	addi	a4,a4,-1
    1184:	fb69                	bnez	a4,1156 <putchar+0x24>
    1186:	4398                	lw	a4,0(a5)
    1188:	4501                	li	a0,0
    118a:	0c076713          	ori	a4,a4,192
    118e:	c398                	sw	a4,0(a5)
    1190:	40a2                	lw	ra,8(sp)
    1192:	4412                	lw	s0,4(sp)
    1194:	0131                	addi	sp,sp,12
    1196:	8082                	ret
    1198:	4501                	li	a0,0
    119a:	8082                	ret

0000119c <i2c_scan_callback>:
	if (i2c_ping(0x3C) != I2C_OK) return;
	ssd1306_print_str_at(str, line, 0);
}

void i2c_scan_callback(const uint8_t addr) {
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    119c:	c13d                	beqz	a0,1202 <i2c_scan_callback+0x66>
    119e:	07f00793          	li	a5,127
    11a2:	862a                	mv	a2,a0
    11a4:	04f50f63          	beq	a0,a5,1202 <i2c_scan_callback+0x66>
void i2c_scan_callback(const uint8_t addr) {
    11a8:	1151                	addi	sp,sp,-12
    11aa:	c026                	sw	s1,0(sp)
	
	static int line = 1;
	sprintf(str_output, "I2C: 0x%02X", addr);
    11ac:	6589                	lui	a1,0x2
    11ae:	f6858593          	addi	a1,a1,-152 # 1f68 <DMA1_Channel3_IRQHandler+0x94>
    11b2:	c9018513          	addi	a0,gp,-880 # 2000008c <str_output>
void i2c_scan_callback(const uint8_t addr) {
    11b6:	c406                	sw	ra,8(sp)
    11b8:	c222                	sw	s0,4(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    11ba:	3bc1                	jal	f8a <sprintf>
	printf("%s\n", str_output);
    11bc:	c9018513          	addi	a0,gp,-880 # 2000008c <str_output>
    11c0:	3789                	jal	1102 <puts>
	modI2C_display(str_output, line++);
    11c2:	c301a403          	lw	s0,-976(gp) # 2000002c <line.5>
    11c6:	00140713          	addi	a4,s0,1
    11ca:	c2e1a823          	sw	a4,-976(gp) # 2000002c <line.5>
    11ce:	0ff47413          	zext.b	s0,s0
	if (line != 7) { printf(str); printf("\n"); }
    11d2:	479d                	li	a5,7
    11d4:	00f40763          	beq	s0,a5,11e2 <i2c_scan_callback+0x46>
    11d8:	c9018513          	addi	a0,gp,-880 # 2000008c <str_output>
    11dc:	3b99                	jal	f32 <printf>
    11de:	4529                	li	a0,10
    11e0:	3f89                	jal	1132 <putchar>
	if (i2c_ping(0x3C) != I2C_OK) return;
    11e2:	03c00513          	li	a0,60
    11e6:	aaaff0ef          	jal	490 <i2c_ping>
    11ea:	e519                	bnez	a0,11f8 <i2c_scan_callback+0x5c>
	ssd1306_print_str_at(str, line, 0);
    11ec:	8522                	mv	a0,s0
}
    11ee:	4412                	lw	s0,4(sp)
    11f0:	40a2                	lw	ra,8(sp)
    11f2:	4482                	lw	s1,0(sp)
    11f4:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    11f6:	bd61                	j	108e <ssd1306_print_str_at.constprop.0>
}
    11f8:	40a2                	lw	ra,8(sp)
    11fa:	4412                	lw	s0,4(sp)
    11fc:	4482                	lw	s1,0(sp)
    11fe:	0131                	addi	sp,sp,12
    1200:	8082                	ret
    1202:	8082                	ret

00001204 <SystemInit>:
    1204:	400227b7          	lui	a5,0x40022
    1208:	4705                	li	a4,1
    120a:	c398                	sw	a4,0(a5)
    120c:	400217b7          	lui	a5,0x40021
    1210:	01080737          	lui	a4,0x1080
    1214:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
    1218:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.829168c6+0x1076791>
    121c:	c398                	sw	a4,0(a5)
    121e:	009f0737          	lui	a4,0x9f0
    1222:	c798                	sw	a4,8(a5)
    1224:	40021737          	lui	a4,0x40021
    1228:	431c                	lw	a5,0(a4)
    122a:	00679693          	slli	a3,a5,0x6
    122e:	fe06dde3          	bgez	a3,1228 <SystemInit+0x24>
    1232:	435c                	lw	a5,4(a4)
    1234:	400216b7          	lui	a3,0x40021
    1238:	9bf1                	andi	a5,a5,-4
    123a:	0027e793          	ori	a5,a5,2
    123e:	c35c                	sw	a5,4(a4)
    1240:	4721                	li	a4,8
    1242:	42dc                	lw	a5,4(a3)
    1244:	8bb1                	andi	a5,a5,12
    1246:	fee79ee3          	bne	a5,a4,1242 <SystemInit+0x3e>
    124a:	e00007b7          	lui	a5,0xe0000
    124e:	0f878793          	addi	a5,a5,248 # e00000f8 <_eusrstack+0xbffff8f8>
    1252:	0007a023          	sw	zero,0(a5)
    1256:	e00007b7          	lui	a5,0xe0000
    125a:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
    125e:	08000713          	li	a4,128
    1262:	c398                	sw	a4,0(a5)
    1264:	8082                	ret

00001266 <main>:

#include "ST7735/modTFT.h"
#include "Storage/modStorage.h"

int main()
{
    1266:	f8410113          	addi	sp,sp,-124
    126a:	dc86                	sw	ra,120(sp)
    126c:	daa2                	sw	s0,116(sp)
    126e:	d8a6                	sw	s1,112(sp)
	uint32_t time_ref = 0;

	M_Encoder encoder_a = {0, 0, 0};
	M_Button button_a = {0xC0, BUTTON_IDLE, 0, 0, 0, 0, 0, 0};

	SystemInit();
    1270:	3f51                	jal	1204 <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    1272:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1276:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    1278:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    127c:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.829168c6+0x228f>
    1280:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    1282:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    1286:	c801a623          	sw	zero,-884(gp) # 20000088 <systick_millis>
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    128a:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    128c:	6685                	lui	a3,0x1
    128e:	00776713          	ori	a4,a4,7
    1292:	c398                	sw	a4,0(a5)
    1294:	e000e737          	lui	a4,0xe000e
    1298:	10d72023          	sw	a3,256(a4) # e000e100 <_eusrstack+0xc000d900>
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
    129c:	4798                	lw	a4,8(a5)
    129e:	004947b7          	lui	a5,0x494
    12a2:	e0078793          	addi	a5,a5,-512 # 493e00 <lib_i2c.c.829168c6+0x48a510>
    12a6:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
    12a8:	e000f6b7          	lui	a3,0xe000f
    12ac:	469c                	lw	a5,8(a3)
    12ae:	8f99                	sub	a5,a5,a4
    12b0:	fe07cee3          	bltz	a5,12ac <main+0x46>
*/


void modEncoder_setup(M_Encoder *model) {
	//! Enable GPIOC, TIM2, and AFIO *very important!*
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    12b4:	40021737          	lui	a4,0x40021
    12b8:	4f1c                	lw	a5,24(a4)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	// PD3 is T2CH1_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    12ba:	7645                	lui	a2,0xffff1
    12bc:	167d                	addi	a2,a2,-1 # ffff0fff <_eusrstack+0xdfff07ff>
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    12be:	0317e793          	ori	a5,a5,49
    12c2:	cf1c                	sw	a5,24(a4)
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    12c4:	4f5c                	lw	a5,28(a4)
    12c6:	0017e793          	ori	a5,a5,1
    12ca:	cf5c                	sw	a5,28(a4)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
    12cc:	400107b7          	lui	a5,0x40010
    12d0:	43d4                	lw	a3,4(a5)
    12d2:	c3d4                	sw	a3,4(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    12d4:	400117b7          	lui	a5,0x40011
    12d8:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    12dc:	4394                	lw	a3,0(a5)
    12de:	8ef1                	and	a3,a3,a2
    12e0:	c394                	sw	a3,0(a5)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*3); 		//set new ones
    12e2:	4394                	lw	a3,0(a5)
    12e4:	6621                	lui	a2,0x8
    12e6:	8ed1                	or	a3,a3,a2
    12e8:	c394                	sw	a3,0(a5)
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    12ea:	47d4                	lw	a3,12(a5)

	// PD4 is T2CH2_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    12ec:	fff10637          	lui	a2,0xfff10
    12f0:	167d                	addi	a2,a2,-1 # fff0ffff <_eusrstack+0xdff0f7ff>
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    12f2:	0046e693          	ori	a3,a3,4
    12f6:	c7d4                	sw	a3,12(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    12f8:	4394                	lw	a3,0(a5)
    12fa:	8ef1                	and	a3,a3,a2
    12fc:	c394                	sw	a3,0(a5)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*4); 		//set new ones
    12fe:	4394                	lw	a3,0(a5)
    1300:	00080637          	lui	a2,0x80
    1304:	8ed1                	or	a3,a3,a2
    1306:	c394                	sw	a3,0(a5)
	GPIOD->OUTDR |= 1<<4;							//1 = pull-up, 0 = pull-down
    1308:	47d4                	lw	a3,12(a5)
    130a:	0106e693          	ori	a3,a3,16
    130e:	c7d4                	sw	a3,12(a5)
	// //# added
	// GPIOC->CFGLR &= ~(0xf<<(4*0));
	// GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*0);

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    1310:	4b1c                	lw	a5,16(a4)
    1312:	0017e793          	ori	a5,a5,1
    1316:	cb1c                	sw	a5,16(a4)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    1318:	4b1c                	lw	a5,16(a4)
    131a:	9bf9                	andi	a5,a5,-2
    131c:	cb1c                	sw	a5,16(a4)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
    131e:	400007b7          	lui	a5,0x40000
    1322:	0087d703          	lhu	a4,8(a5) # 40000008 <_eusrstack+0x1ffff808>
    1326:	00376713          	ori	a4,a4,3
    132a:	00e79423          	sh	a4,8(a5)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
    132e:	7765                	lui	a4,0xffff9
    1330:	177d                	addi	a4,a4,-1 # ffff8fff <_eusrstack+0xdfff87ff>
    1332:	02e79223          	sh	a4,36(a5)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
    1336:	0147d703          	lhu	a4,20(a5)
    133a:	00176713          	ori	a4,a4,1
    133e:	00e79a23          	sh	a4,20(a5)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
    1342:	0007d703          	lhu	a4,0(a5)
    1346:	00176713          	ori	a4,a4,1
    134a:	00e79023          	sh	a4,0(a5)

	model->initial_count = TIM2->CNT;
    134e:	0247d703          	lhu	a4,36(a5)
	model->last_count = TIM2->CNT;
    1352:	0247d783          	lhu	a5,36(a5)
	if(dev->regb == 0) dev->regb = 1;
    1356:	c0418793          	addi	a5,gp,-1020 # 20000000 <dev_aht21>
    135a:	00a7c683          	lbu	a3,10(a5)
    135e:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_aht21>
    1362:	4785                	li	a5,1
    1364:	c681                	beqz	a3,136c <main+0x106>
	if(dev->regb  > 4) dev->regb = 4;
    1366:	4791                	li	a5,4
    1368:	00d7f463          	bgeu	a5,a3,1370 <main+0x10a>
    136c:	00f70523          	sb	a5,10(a4)
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1370:	400217b7          	lui	a5,0x40021
    1374:	4b94                	lw	a3,16(a5)
    1376:	002005b7          	lui	a1,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    137a:	ffe00637          	lui	a2,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    137e:	8ecd                	or	a3,a3,a1
    1380:	cb94                	sw	a3,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1382:	4b94                	lw	a3,16(a5)
    1384:	167d                	addi	a2,a2,-1 # ffdfffff <_eusrstack+0xdfdff7ff>
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1386:	6405                	lui	s0,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1388:	8ef1                	and	a3,a3,a2
    138a:	cb94                	sw	a3,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    138c:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    138e:	fbc00637          	lui	a2,0xfbc00
    1392:	1675                	addi	a2,a2,-3 # fbbffffd <_eusrstack+0xdbbff7fd>
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1394:	8ecd                	or	a3,a3,a1
    1396:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    1398:	4f94                	lw	a3,24(a5)
    139a:	0116e693          	ori	a3,a3,17
    139e:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    13a0:	400107b7          	lui	a5,0x40010
    13a4:	43d4                	lw	a3,4(a5)
    13a6:	8ef1                	and	a3,a3,a2
    13a8:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    13aa:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    13ac:	767d                	lui	a2,0xfffff
    13ae:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    13b2:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    13b4:	400117b7          	lui	a5,0x40011
    13b8:	4394                	lw	a3,0(a5)
    13ba:	f0f6f693          	andi	a3,a3,-241
    13be:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    13c0:	4394                	lw	a3,0(a5)
    13c2:	0d06e693          	ori	a3,a3,208
    13c6:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    13c8:	4394                	lw	a3,0(a5)
    13ca:	8ef1                	and	a3,a3,a2
    13cc:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    13ce:	4394                	lw	a3,0(a5)
    13d0:	6605                	lui	a2,0x1
    13d2:	d0060613          	addi	a2,a2,-768 # d00 <handle_reset+0x72>
    13d6:	8ed1                	or	a3,a3,a2
    13d8:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    13da:	400056b7          	lui	a3,0x40005
    13de:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
    13e2:	6641                	lui	a2,0x10
    13e4:	fc060613          	addi	a2,a2,-64 # ffc0 <lib_i2c.c.829168c6+0x66d0>
    13e8:	8ff1                	and	a5,a5,a2
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    13ea:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    13ee:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
    13f2:	431c                	lw	a5,0(a4)
    13f4:	6761                	lui	a4,0x18
    13f6:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.829168c6+0xedb0>
    13fa:	00179593          	slli	a1,a5,0x1
    13fe:	22f76963          	bltu	a4,a5,1630 <main+0x3ca>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    1402:	02dc7537          	lui	a0,0x2dc7
    1406:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.829168c6+0x2dbd310>
    140a:	c9ffe0ef          	jal	a8 <__hidden___udivsi3>
    140e:	147d                	addi	s0,s0,-1 # fff <ssd1306_data.isra.0+0x13>
    1410:	8d61                	and	a0,a0,s0
    1412:	0542                	slli	a0,a0,0x10
    1414:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    1416:	400057b7          	lui	a5,0x40005
    141a:	40a79e23          	sh	a0,1052(a5) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    141e:	4007d703          	lhu	a4,1024(a5)
    1422:	00176713          	ori	a4,a4,1
    1426:	40e79023          	sh	a4,1024(a5)
	return i2c_error();
    142a:	f7dfe0ef          	jal	3a6 <i2c_error>

void modI2C_setup() {
	if(i2c_init(&dev_aht21) != I2C_OK) {
    142e:	20050f63          	beqz	a0,164c <main+0x3e6>
		printf("Failed to init I2C\n");
    1432:	6509                	lui	a0,0x2
    1434:	f7450513          	addi	a0,a0,-140 # 1f74 <DMA1_Channel3_IRQHandler+0xa0>
    1438:	31e9                	jal	1102 <puts>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    143a:	4781                	li	a5,0
		uint32_t now = millis();

		// button_run(&button_a, button_onChanged);
		// modEncoder_task(now, &encoder_a, encoder_onChanged);

		if (now - sec_time > 2000) {
    143c:	7d000713          	li	a4,2000
		uint32_t now = millis();
    1440:	c8c1a683          	lw	a3,-884(gp) # 20000088 <systick_millis>
    1444:	ca36                	sw	a3,20(sp)
		if (now - sec_time > 2000) {
    1446:	8e9d                	sub	a3,a3,a5
    1448:	fed77ce3          	bgeu	a4,a3,1440 <main+0x1da>
	// Increment the milliseconds count
	systick_millis++;
}

uint32_t get_runTime(void *handler(void)) {
	uint32_t now = micros();
    144c:	e000f7b7          	lui	a5,0xe000f
    1450:	4788                	lw	a0,8(a5)
    1452:	03000593          	li	a1,48
    }
}


void test_polys() {
    int y = 0;
    1456:	4481                	li	s1,0
    1458:	c51fe0ef          	jal	a8 <__hidden___udivsi3>
	Limit hLimit = { l0: p0.x, l1: x_end };
    145c:	6719                	lui	a4,0x6
    145e:	d22a                	sw	a0,36(sp)

    //! rectangles
    for (int8_t i = 0; i<4; i++) {
    1460:	4781                	li	a5,0
	Limit hLimit = { l0: p0.x, l1: x_end };
    1462:	35470713          	addi	a4,a4,852 # 6354 <ch32_mess.c.90336b46+0x24ae>
    1466:	04e11823          	sh	a4,80(sp)
    if (fill) {
    146a:	4685                	li	a3,1
    146c:	2cf6de63          	bge	a3,a5,1748 <main+0x4e2>
    1470:	01049413          	slli	s0,s1,0x10
    1474:	8041                	srli	s0,s0,0x10
		for (uint8_t y_pos = p0.y; y_pos <= y_end; y_pos++) {
    1476:	00540693          	addi	a3,s0,5
    147a:	06c2                	slli	a3,a3,0x10
    147c:	82c1                	srli	a3,a3,0x10
    147e:	0ff47513          	zext.b	a0,s0
    1482:	2a86f663          	bgeu	a3,s0,172e <main+0x4c8>
		uint8_t should_fill = i > 1 ? 1 : 0;
		prefill_rect((M_Point){ 84, y }, (Area) { 15, 5 }, should_fill, 0);
		y += 7;
    1486:	0785                	addi	a5,a5,1 # e000f001 <_eusrstack+0xc000e801>
    for (int8_t i = 0; i<4; i++) {
    1488:	07e2                	slli	a5,a5,0x18
		y += 7;
    148a:	049d                	addi	s1,s1,7
    for (int8_t i = 0; i<4; i++) {
    148c:	46f1                	li	a3,28
    148e:	87e1                	srai	a5,a5,0x18
    1490:	fcd49be3          	bne	s1,a3,1466 <main+0x200>
	}

    //! zigzag
    M_Point zigzag[] = {
    1494:	0f3217b7          	lui	a5,0xf321
    1498:	83c78793          	addi	a5,a5,-1988 # f32083c <lib_i2c.c.829168c6+0xf316f4c>
    149c:	c8be                	sw	a5,80(sp)
    149e:	004617b7          	lui	a5,0x461
    14a2:	85078793          	addi	a5,a5,-1968 # 460850 <lib_i2c.c.829168c6+0x456f60>
    14a6:	cabe                	sw	a5,84(sp)
        (M_Point) { 70, 0 },
        (M_Point) { 70, 20 }
    };

    uint8_t pt_count = sizeof(zigzag)/sizeof(M_Point);
    prefill_solid_poly(zigzag, pt_count);
    14a8:	0880                	addi	s0,sp,80
    M_Point zigzag[] = {
    14aa:	6785                	lui	a5,0x1
    14ac:	44678793          	addi	a5,a5,1094 # 1446 <main+0x1e0>
    prefill_solid_poly(zigzag, pt_count);
    14b0:	4595                	li	a1,5
    14b2:	8522                	mv	a0,s0
    M_Point zigzag[] = {
    14b4:	04f11c23          	sh	a5,88(sp)
    prefill_solid_poly(zigzag, pt_count);
    14b8:	db0ff0ef          	jal	a68 <prefill_solid_poly>

    M_Point zigzag2[4];
    memcpy(zigzag2, zigzag, sizeof(zigzag));  // Fast copy
    14bc:	4629                	li	a2,10
    14be:	85a2                	mv	a1,s0
    14c0:	1828                	addi	a0,sp,56
    14c2:	3639                	jal	fd0 <memcpy>

    for (int i = 0; i < sizeof(zigzag)/sizeof(M_Point); i++) {
    14c4:	183c                	addi	a5,sp,56
    14c6:	04210693          	addi	a3,sp,66
        zigzag2[i].y += 24;  // Add 20 to each x-coordinate
    14ca:	0017c703          	lbu	a4,1(a5)
    for (int i = 0; i < sizeof(zigzag)/sizeof(M_Point); i++) {
    14ce:	0789                	addi	a5,a5,2
        zigzag2[i].y += 24;  // Add 20 to each x-coordinate
    14d0:	0761                	addi	a4,a4,24
    14d2:	fee78fa3          	sb	a4,-1(a5)
    for (int i = 0; i < sizeof(zigzag)/sizeof(M_Point); i++) {
    14d6:	fed79ae3          	bne	a5,a3,14ca <main+0x264>
    }
    prefill_poly(zigzag2, pt_count, 1);
    14da:	4595                	li	a1,5
    14dc:	1828                	addi	a0,sp,56
    14de:	ad6ff0ef          	jal	7b4 <prefill_poly.part.0.constprop.0>


    // Concave polygon: Star (22px tall)
    M_Point star[] = {
    14e2:	6589                	lui	a1,0x2
    14e4:	4651                	li	a2,20
    14e6:	f5058593          	addi	a1,a1,-176 # 1f50 <DMA1_Channel3_IRQHandler+0x7c>
    14ea:	08e8                	addi	a0,sp,92
    14ec:	34d5                	jal	fd0 <memcpy>
        {18 , 52}   // Bottom-right
    };

    //! star
    pt_count = sizeof(star)/sizeof(M_Point);
    prefill_solid_poly(star, pt_count);
    14ee:	45a9                	li	a1,10
    14f0:	08e8                	addi	a0,sp,92
    14f2:	d76ff0ef          	jal	a68 <prefill_solid_poly>

    // Shift star right by 25px
    for (int i = 0; i < sizeof(star)/sizeof(M_Point); i++) {
    14f6:	08fc                	addi	a5,sp,92
        star[i].x += 25;  // Add 20 to each x-coordinate
    14f8:	0007c703          	lbu	a4,0(a5)
    for (int i = 0; i < sizeof(star)/sizeof(M_Point); i++) {
    14fc:	0789                	addi	a5,a5,2
        star[i].x += 25;  // Add 20 to each x-coordinate
    14fe:	0765                	addi	a4,a4,25
    1500:	fee78f23          	sb	a4,-2(a5)
    for (int i = 0; i < sizeof(star)/sizeof(M_Point); i++) {
    1504:	1898                	addi	a4,sp,112
    1506:	fee799e3          	bne	a5,a4,14f8 <main+0x292>
    }
    prefill_poly(star, pt_count, 1);
    150a:	45a9                	li	a1,10
    150c:	08e8                	addi	a0,sp,92
    150e:	aa6ff0ef          	jal	7b4 <prefill_poly.part.0.constprop.0>

    //! quad
    pt_count = sizeof(quad)/sizeof(M_Point);
    prefill_solid_poly(quad, pt_count);
    1512:	c2818513          	addi	a0,gp,-984 # 20000024 <quad.7>
    1516:	4591                	li	a1,4
    1518:	d50ff0ef          	jal	a68 <prefill_solid_poly>

    // Shift quad right by 25px
    M_Point quad2[4];
    memcpy(quad2, quad, sizeof(quad));  // Fast copy
    151c:	c2818493          	addi	s1,gp,-984 # 20000024 <quad.7>
    1520:	409c                	lw	a5,0(s1)
    1522:	00b8                	addi	a4,sp,72
    1524:	c0be                	sw	a5,64(sp)
    1526:	40dc                	lw	a5,4(s1)
    1528:	c2be                	sw	a5,68(sp)

    for (int i = 0; i < sizeof(quad)/sizeof(M_Point); i++) {
    152a:	009c                	addi	a5,sp,64
    152c:	853e                	mv	a0,a5
        quad2[i].x += 25;  // Add 20 to each x-coordinate
    152e:	0007c683          	lbu	a3,0(a5)
    for (int i = 0; i < sizeof(quad)/sizeof(M_Point); i++) {
    1532:	0789                	addi	a5,a5,2
        quad2[i].x += 25;  // Add 20 to each x-coordinate
    1534:	06e5                	addi	a3,a3,25
    1536:	fed78f23          	sb	a3,-2(a5)
    for (int i = 0; i < sizeof(quad)/sizeof(M_Point); i++) {
    153a:	fef71ae3          	bne	a4,a5,152e <main+0x2c8>
    }
    prefill_poly(quad2, pt_count, 1);
    153e:	4591                	li	a1,4
    1540:	a74ff0ef          	jal	7b4 <prefill_poly.part.0.constprop.0>

    //! hourglass
    pt_count = sizeof(hourglass)/sizeof(M_Point);
    prefill_solid_poly(hourglass, pt_count);
    1544:	c2018513          	addi	a0,gp,-992 # 2000001c <hourglass.6>
    1548:	4591                	li	a1,4
    154a:	d1eff0ef          	jal	a68 <prefill_solid_poly>

    // Shift hourglass right by 25px
    M_Point hourglass2[4];
    memcpy(hourglass2, hourglass, sizeof(hourglass));  // Fast copy
    154e:	c2018493          	addi	s1,gp,-992 # 2000001c <hourglass.6>
    1552:	409c                	lw	a5,0(s1)
    1554:	00b8                	addi	a4,sp,72
    1556:	c4be                	sw	a5,72(sp)
    1558:	40dc                	lw	a5,4(s1)
    155a:	c6be                	sw	a5,76(sp)

    for (int i = 0; i < sizeof(hourglass)/sizeof(M_Point); i++) {
    155c:	87ba                	mv	a5,a4
        hourglass2[i].x += 25;  // Add 20 to each x-coordinate
    155e:	0007c683          	lbu	a3,0(a5)
    for (int i = 0; i < sizeof(hourglass)/sizeof(M_Point); i++) {
    1562:	0789                	addi	a5,a5,2
        hourglass2[i].x += 25;  // Add 20 to each x-coordinate
    1564:	06e5                	addi	a3,a3,25
    1566:	fed78f23          	sb	a3,-2(a5)
    for (int i = 0; i < sizeof(hourglass)/sizeof(M_Point); i++) {
    156a:	fef41ae3          	bne	s0,a5,155e <main+0x2f8>
    }
    prefill_poly(hourglass2, pt_count, 1);
    156e:	4591                	li	a1,4
    1570:	853a                	mv	a0,a4
    1572:	a42ff0ef          	jal	7b4 <prefill_poly.part.0.constprop.0>


void test_circles() {
    int y = 0;

    for (int8_t i = 0; i<4; i++) {
    1576:	47b1                	li	a5,12
    1578:	c03e                	sw	a5,0(sp)
    157a:	c402                	sw	zero,8(sp)
		uint8_t should_fill = i > 1 ? 1 : 0;
		prefill_circle((M_Point){ 110, y }, 5, should_fill);
    157c:	4782                	lw	a5,0(sp)
    int16_t err = 2 - 2 * radius;
    157e:	56e1                	li	a3,-8
    int16_t y = 0;
    1580:	4701                	li	a4,0
    1582:	ff478313          	addi	t1,a5,-12
    1586:	0ff37313          	zext.b	t1,t1
    int16_t x = -radius;
    158a:	54ed                	li	s1,-5
        uint8_t x_start 	= p0.x + x;
    158c:	0ff4f413          	zext.b	s0,s1
    1590:	06e40613          	addi	a2,s0,110
        uint8_t y_top   	= p0.y - y;
    1594:	0ff77513          	zext.b	a0,a4
        uint8_t x_start 	= p0.x + x;
    1598:	0ff67793          	zext.b	a5,a2
        uint8_t y_top   	= p0.y - y;
    159c:	40a302b3          	sub	t0,t1,a0
        uint8_t x_start 	= p0.x + x;
    15a0:	c23e                	sw	a5,4(sp)
        uint8_t y_top   	= p0.y - y;
    15a2:	0ff2f793          	zext.b	a5,t0
        uint8_t y_bottom 	= p0.y + y;
    15a6:	006502b3          	add	t0,a0,t1
        uint8_t y_top   	= p0.y - y;
    15aa:	c63e                	sw	a5,12(sp)
        uint8_t y_bottom 	= p0.y + y;
    15ac:	0ff2f793          	zext.b	a5,t0
    15b0:	c83e                	sw	a5,16(sp)
		if (fill) {
    15b2:	47a2                	lw	a5,8(sp)
        uint8_t x_end   	= p0.x - x;
    15b4:	06e00593          	li	a1,110
    15b8:	40858633          	sub	a2,a1,s0
		if (fill) {
    15bc:	4285                	li	t0,1
        uint8_t x_end   	= p0.x - x;
    15be:	0ff67613          	zext.b	a2,a2
		if (fill) {
    15c2:	1cf2d963          	bge	t0,a5,1794 <main+0x52e>
            prefill_fastHorLine(y_top, x_start, x_end);     // Top half
    15c6:	4592                	lw	a1,4(sp)
    15c8:	4532                	lw	a0,12(sp)
    15ca:	d41a                	sw	t1,40(sp)
    15cc:	d03a                	sw	a4,32(sp)
    15ce:	ce36                	sw	a3,28(sp)
    15d0:	cc32                	sw	a2,24(sp)
    15d2:	d77fe0ef          	jal	348 <prefill_fastHorLine>
            prefill_fastHorLine(y_bottom, x_start, x_end);  // Bottom half
    15d6:	4662                	lw	a2,24(sp)
    15d8:	4592                	lw	a1,4(sp)
    15da:	4542                	lw	a0,16(sp)
    15dc:	d6dfe0ef          	jal	348 <prefill_fastHorLine>
    15e0:	46f2                	lw	a3,28(sp)
    15e2:	5702                	lw	a4,32(sp)
    15e4:	5322                	lw	t1,40(sp)
        if (e2 <= y) {
    15e6:	22d74263          	blt	a4,a3,180a <main+0x5a4>
            err += ++y * 2 + 1;
    15ea:	0705                	addi	a4,a4,1
    15ec:	0742                	slli	a4,a4,0x10
    15ee:	8741                	srai	a4,a4,0x10
    15f0:	00171613          	slli	a2,a4,0x1
    15f4:	0605                	addi	a2,a2,1
    15f6:	9636                	add	a2,a2,a3
    15f8:	0642                	slli	a2,a2,0x10
            if (-x == y && e2 <= x) e2 = 0;
    15fa:	409005b3          	neg	a1,s1
            err += ++y * 2 + 1;
    15fe:	8641                	srai	a2,a2,0x10
            if (-x == y && e2 <= x) e2 = 0;
    1600:	00b71563          	bne	a4,a1,160a <main+0x3a4>
    1604:	00d4c563          	blt	s1,a3,160e <main+0x3a8>
    1608:	4681                	li	a3,0
        if (e2 > x) err += ++x * 2 + 1;
    160a:	02d4d163          	bge	s1,a3,162c <main+0x3c6>
    160e:	00148793          	addi	a5,s1,1
    1612:	01079493          	slli	s1,a5,0x10
    1616:	84c1                	srai	s1,s1,0x10
    } while (x <= 0);
    1618:	4685                	li	a3,1
    161a:	1ed48a63          	beq	s1,a3,180e <main+0x5a8>
        if (e2 > x) err += ++x * 2 + 1;
    161e:	00149693          	slli	a3,s1,0x1
    1622:	0685                	addi	a3,a3,1
    1624:	96b2                	add	a3,a3,a2
    1626:	01069613          	slli	a2,a3,0x10
    162a:	8641                	srai	a2,a2,0x10
    int16_t x = -radius;
    162c:	86b2                	mv	a3,a2
    162e:	bfb9                	j	158c <main+0x326>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    1630:	02dc7537          	lui	a0,0x2dc7
    1634:	95be                	add	a1,a1,a5
    1636:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.829168c6+0x2dbd310>
    163a:	a6ffe0ef          	jal	a8 <__hidden___udivsi3>
    163e:	147d                	addi	s0,s0,-1
    1640:	8d61                	and	a0,a0,s0
    1642:	0542                	slli	a0,a0,0x10
    1644:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    1646:	67a1                	lui	a5,0x8
    1648:	8d5d                	or	a0,a0,a5
    164a:	b3f1                	j	1416 <main+0x1b0>
	} else {
		// Scan the I2C Bus, prints any devices that respond
		printf("----Scanning I2C Bus for Devices---\n");
    164c:	6509                	lui	a0,0x2
    164e:	f8850513          	addi	a0,a0,-120 # 1f88 <DMA1_Channel3_IRQHandler+0xb4>
    1652:	3c45                	jal	1102 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1654:	4401                	li	s0,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    1656:	8522                	mv	a0,s0
    1658:	e39fe0ef          	jal	490 <i2c_ping>
    165c:	e119                	bnez	a0,1662 <main+0x3fc>
    165e:	8522                	mv	a0,s0
    1660:	3e35                	jal	119c <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1662:	0405                	addi	s0,s0,1
    1664:	0ff47413          	zext.b	s0,s0
    1668:	07f00793          	li	a5,127
    166c:	fef415e3          	bne	s0,a5,1656 <main+0x3f0>
		i2c_scan(i2c_scan_callback);
		printf("----Done Scanning----\n\n");
    1670:	6509                	lui	a0,0x2
    1672:	fac50513          	addi	a0,a0,-84 # 1fac <DMA1_Channel3_IRQHandler+0xd8>
    1676:	3471                	jal	1102 <puts>
		// modI2C_task();

		if (i2c_ping(0x3C) == I2C_OK) {
    1678:	03c00513          	li	a0,60
    167c:	e15fe0ef          	jal	490 <i2c_ping>
    1680:	da051de3          	bnez	a0,143a <main+0x1d4>
    1684:	ca418713          	addi	a4,gp,-860 # 200000a0 <page_masks>
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    1688:	4781                	li	a5,0
		page_masks[y].bitmask    = 1 << (y & 0x07);    // (y % 8)
    168a:	4585                	li	a1,1
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    168c:	04000613          	li	a2,64
		page_masks[y].page       = y >> 3;             // (y / 8)
    1690:	0037d693          	srli	a3,a5,0x3
    1694:	00d70023          	sb	a3,0(a4)
		page_masks[y].bitmask    = 1 << (y & 0x07);    // (y % 8)
    1698:	0077f693          	andi	a3,a5,7
    169c:	00d596b3          	sll	a3,a1,a3
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    16a0:	0785                	addi	a5,a5,1 # 8001 <ch32_mess.c.90336b46+0x415b>
		page_masks[y].bitmask    = 1 << (y & 0x07);    // (y % 8)
    16a2:	00d700a3          	sb	a3,1(a4)
	for (uint8_t y = 0; y < SSD1306_H; y++) {
    16a6:	0ff7f793          	zext.b	a5,a5
    16aa:	0709                	addi	a4,a4,2
    16ac:	fec792e3          	bne	a5,a2,1690 <main+0x42a>
    16b0:	6409                	lui	s0,0x2
	memset(ssd1306_buffer, color ? 0xFF : 0x00, sizeof(ssd1306_buffer));
    16b2:	c8018423          	sb	zero,-888(gp) # 20000084 <ssd1306_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    16b6:	1e040413          	addi	s0,s0,480 # 21e0 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    16ba:	00044503          	lbu	a0,0(s0)
    16be:	0ff00793          	li	a5,255
    16c2:	02f51e63          	bne	a0,a5,16fe <main+0x498>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    16c6:	02100513          	li	a0,33
    16ca:	f9dfe0ef          	jal	666 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    16ce:	4501                	li	a0,0
    16d0:	f97fe0ef          	jal	666 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    16d4:	07f00513          	li	a0,127
    16d8:	f8ffe0ef          	jal	666 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    16dc:	02200513          	li	a0,34
    16e0:	f87fe0ef          	jal	666 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    16e4:	4501                	li	a0,0
    16e6:	f81fe0ef          	jal	666 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    16ea:	451d                	li	a0,7
    16ec:	f7bfe0ef          	jal	666 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    16f0:	02000593          	li	a1,32
    16f4:	c8818513          	addi	a0,gp,-888 # 20000084 <ssd1306_buffer>
    16f8:	8f5ff0ef          	jal	fec <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    16fc:	a029                	j	1706 <main+0x4a0>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    16fe:	0405                	addi	s0,s0,1
    1700:	f67fe0ef          	jal	666 <ssd1306_cmd>
    1704:	d95d                	beqz	a0,16ba <main+0x454>
	memset(frame_buffer, 0, sizeof(frame_buffer));
    1706:	40000613          	li	a2,1024
    170a:	4581                	li	a1,0
    170c:	d2418513          	addi	a0,gp,-732 # 20000120 <frame_buffer>
    1710:	89bff0ef          	jal	faa <memset>
	ssd1306_renderFrame();
    1714:	905ff0ef          	jal	1018 <ssd1306_renderFrame>
			ssd1306_setup();

			sprintf(str_output, "Hello Bee!");
    1718:	6589                	lui	a1,0x2
    171a:	fc458593          	addi	a1,a1,-60 # 1fc4 <DMA1_Channel3_IRQHandler+0xf0>
    171e:	c9018513          	addi	a0,gp,-880 # 2000008c <str_output>
    1722:	89bff0ef          	jal	fbc <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    1726:	4501                	li	a0,0
    1728:	967ff0ef          	jal	108e <ssd1306_print_str_at.constprop.0>
    172c:	b339                	j	143a <main+0x1d4>
			prefill_horLine(y_pos, hLimit, 1, 0);
    172e:	45c6                	lw	a1,80(sp)
    1730:	0405                	addi	s0,s0,1
    1732:	c436                	sw	a3,8(sp)
    1734:	c23a                	sw	a4,4(sp)
    1736:	c03e                	sw	a5,0(sp)
    1738:	0442                	slli	s0,s0,0x10
    173a:	9acff0ef          	jal	8e6 <prefill_horLine.constprop.0>
    173e:	46a2                	lw	a3,8(sp)
    1740:	4712                	lw	a4,4(sp)
    1742:	4782                	lw	a5,0(sp)
    1744:	8041                	srli	s0,s0,0x10
    1746:	bb25                	j	147e <main+0x218>
    1748:	0ff4f413          	zext.b	s0,s1
        prefill_horLine(p0.y, hLimit, 1, 0);     	// Top edge
    174c:	45c6                	lw	a1,80(sp)
		Limit vLimit = { l0: p0.y + 1, l1: y_end - 1 };
    174e:	00140693          	addi	a3,s0,1
    1752:	04d10e23          	sb	a3,92(sp)
        prefill_horLine(p0.y, hLimit, 1, 0);     	// Top edge
    1756:	8522                	mv	a0,s0
		Limit vLimit = { l0: p0.y + 1, l1: y_end - 1 };
    1758:	00440693          	addi	a3,s0,4
    175c:	c23a                	sw	a4,4(sp)
    175e:	c03e                	sw	a5,0(sp)
    1760:	04d10ea3          	sb	a3,93(sp)
        prefill_horLine(p0.y, hLimit, 1, 0);     	// Top edge
    1764:	982ff0ef          	jal	8e6 <prefill_horLine.constprop.0>
        prefill_horLine(y_end, hLimit, 1, 0);    	// Bottom edge
    1768:	45c6                	lw	a1,80(sp)
		Limit vLimit = { l0: p0.y + 1, l1: y_end - 1 };
    176a:	00540513          	addi	a0,s0,5
        prefill_horLine(y_end, hLimit, 1, 0);    	// Bottom edge
    176e:	0ff57513          	zext.b	a0,a0
    1772:	974ff0ef          	jal	8e6 <prefill_horLine.constprop.0>
        prefill_verLine(p0.x, vLimit, 1, 0); 		// Left edge
    1776:	45f6                	lw	a1,92(sp)
    1778:	4605                	li	a2,1
    177a:	05400513          	li	a0,84
    177e:	8b6ff0ef          	jal	834 <prefill_verLine.constprop.0>
        prefill_verLine(x_end, vLimit, 1, 0); 		// Right edge
    1782:	45f6                	lw	a1,92(sp)
    1784:	4605                	li	a2,1
    1786:	06300513          	li	a0,99
    178a:	8aaff0ef          	jal	834 <prefill_verLine.constprop.0>
    178e:	4712                	lw	a4,4(sp)
    1790:	4782                	lw	a5,0(sp)
    1792:	b9d5                	j	1486 <main+0x220>
			uint8_t xy_start 	= p0.x + y;
    1794:	06e50293          	addi	t0,a0,110
    1798:	0ff2f793          	zext.b	a5,t0
			uint8_t xy_end   	= p0.x - y;
    179c:	8d89                	sub	a1,a1,a0
			uint8_t xy_start 	= p0.x + y;
    179e:	cc3e                	sw	a5,24(sp)
			uint8_t xy_end   	= p0.x - y;
    17a0:	0ff5f793          	zext.b	a5,a1
			prefill_pixel(x_end		, y_bottom); 	// Octant 1
    17a4:	45c2                	lw	a1,16(sp)
			uint8_t xy_end   	= p0.x - y;
    17a6:	ce3e                	sw	a5,28(sp)
			uint8_t yx_start 	= p0.y + x;
    17a8:	006407b3          	add	a5,s0,t1
    17ac:	0ff7f793          	zext.b	a5,a5
			prefill_pixel(x_end		, y_bottom); 	// Octant 1
    17b0:	8532                	mv	a0,a2
			uint8_t yx_end   	= p0.y - x;
    17b2:	40830433          	sub	s0,t1,s0
    17b6:	da3a                	sw	a4,52(sp)
    17b8:	d836                	sw	a3,48(sp)
    17ba:	d61a                	sw	t1,44(sp)
			uint8_t yx_start 	= p0.y + x;
    17bc:	d03e                	sw	a5,32(sp)
			prefill_pixel(x_end		, y_bottom); 	// Octant 1
    17be:	d432                	sw	a2,40(sp)
    17c0:	b51fe0ef          	jal	310 <prefill_pixel>
			prefill_pixel(x_start	, y_bottom); 	// Octant 2
    17c4:	45c2                	lw	a1,16(sp)
    17c6:	4512                	lw	a0,4(sp)
			uint8_t yx_end   	= p0.y - x;
    17c8:	0ff47413          	zext.b	s0,s0
			prefill_pixel(x_start	, y_bottom); 	// Octant 2
    17cc:	b45fe0ef          	jal	310 <prefill_pixel>
			prefill_pixel(x_start	, y_top); 		// Octant 3
    17d0:	45b2                	lw	a1,12(sp)
    17d2:	4512                	lw	a0,4(sp)
    17d4:	b3dfe0ef          	jal	310 <prefill_pixel>
			prefill_pixel(x_end		, y_top); 		// Octant 4
    17d8:	5622                	lw	a2,40(sp)
    17da:	45b2                	lw	a1,12(sp)
    17dc:	8532                	mv	a0,a2
    17de:	b33fe0ef          	jal	310 <prefill_pixel>
			prefill_pixel(xy_end	, yx_start); 	// Octant 5
    17e2:	5582                	lw	a1,32(sp)
    17e4:	4572                	lw	a0,28(sp)
    17e6:	b2bfe0ef          	jal	310 <prefill_pixel>
			prefill_pixel(xy_start	, yx_start); 	// Octant 6
    17ea:	5582                	lw	a1,32(sp)
    17ec:	4562                	lw	a0,24(sp)
    17ee:	b23fe0ef          	jal	310 <prefill_pixel>
			prefill_pixel(xy_start	, yx_end); 		// Octant 7
    17f2:	4562                	lw	a0,24(sp)
    17f4:	85a2                	mv	a1,s0
    17f6:	b1bfe0ef          	jal	310 <prefill_pixel>
			prefill_pixel(xy_end	, yx_end); 		// Octant 8
    17fa:	4572                	lw	a0,28(sp)
    17fc:	85a2                	mv	a1,s0
    17fe:	b13fe0ef          	jal	310 <prefill_pixel>
    1802:	5752                	lw	a4,52(sp)
    1804:	56c2                	lw	a3,48(sp)
    1806:	5332                	lw	t1,44(sp)
    1808:	bbf9                	j	15e6 <main+0x380>
    180a:	8636                	mv	a2,a3
    180c:	bbfd                	j	160a <main+0x3a4>

        if (i > 1) {
    180e:	47a2                	lw	a5,8(sp)
    1810:	6741                	lui	a4,0x10
    1812:	1765                	addi	a4,a4,-7 # fff9 <lib_i2c.c.829168c6+0x6709>
    1814:	1af4d963          	bge	s1,a5,19c6 <main+0x760>
                M_Page_Mask mask_t = page_masks[y_top];
    1818:	ca418793          	addi	a5,gp,-860 # 200000a0 <page_masks>
    181c:	cc3e                	sw	a5,24(sp)
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    181e:	d2418793          	addi	a5,gp,-732 # 20000120 <frame_buffer>
    1822:	ce3e                	sw	a5,28(sp)
    for (uint8_t r = radius; r >= inner_r; r--) {
    1824:	67c1                	lui	a5,0x10
    1826:	17f1                	addi	a5,a5,-4 # fffc <lib_i2c.c.829168c6+0x670c>
    1828:	d03e                	sw	a5,32(sp)
        int16_t err = 2 - 2 * r;
    182a:	00170693          	addi	a3,a4,1
        int16_t x = -r;
    182e:	01071793          	slli	a5,a4,0x10
        int16_t err = 2 - 2 * r;
    1832:	0686                	slli	a3,a3,0x1
        int16_t x = -r;
    1834:	87c1                	srai	a5,a5,0x10
        int16_t err = 2 - 2 * r;
    1836:	06c2                	slli	a3,a3,0x10
        int16_t x = -r;
    1838:	c23e                	sw	a5,4(sp)
        int16_t err = 2 - 2 * r;
    183a:	86c1                	srai	a3,a3,0x10
        int16_t y = 0;
    183c:	c602                	sw	zero,12(sp)
            int16_t x_start = p0.x + x;
    183e:	00415283          	lhu	t0,4(sp)
            int16_t x_end   = p0.x - x;
    1842:	05a00793          	li	a5,90
            int16_t y_bottom = p0.y + y;
    1846:	4402                	lw	s0,0(sp)
            int16_t x_end   = p0.x - x;
    1848:	40578633          	sub	a2,a5,t0
            int16_t y_top    = p0.y - y;
    184c:	00c15783          	lhu	a5,12(sp)
            int16_t x_start = p0.x + x;
    1850:	05a28593          	addi	a1,t0,90
    1854:	05c2                	slli	a1,a1,0x10
            int16_t y_top    = p0.y - y;
    1856:	c83e                	sw	a5,16(sp)
    1858:	4542                	lw	a0,16(sp)
    185a:	4782                	lw	a5,0(sp)
            int16_t x_end   = p0.x - x;
    185c:	0642                	slli	a2,a2,0x10
            int16_t y_bottom = p0.y + y;
    185e:	00850333          	add	t1,a0,s0
            int16_t y_top    = p0.y - y;
    1862:	8f89                	sub	a5,a5,a0
            int16_t x_right = x_end + 1;
    1864:	05b00413          	li	s0,91
    1868:	405403b3          	sub	t2,s0,t0
            int16_t y_top    = p0.y - y;
    186c:	07c2                	slli	a5,a5,0x10
			int16_t x_left  = x_start - 1;
    186e:	05928513          	addi	a0,t0,89
            int16_t y_bottom = p0.y + y;
    1872:	0342                	slli	t1,t1,0x10
			int16_t x_left  = x_start - 1;
    1874:	0542                	slli	a0,a0,0x10
            int16_t x_right = x_end + 1;
    1876:	03c2                	slli	t2,t2,0x10
            int16_t y_top    = p0.y - y;
    1878:	83c1                	srli	a5,a5,0x10
            if (y_top >= 0 && y_top < SSD1306_H) {
    187a:	03f00413          	li	s0,63
            int16_t x_start = p0.x + x;
    187e:	81c1                	srli	a1,a1,0x10
            int16_t x_end   = p0.x - x;
    1880:	8241                	srli	a2,a2,0x10
            int16_t y_bottom = p0.y + y;
    1882:	01035313          	srli	t1,t1,0x10
			int16_t x_left  = x_start - 1;
    1886:	8141                	srli	a0,a0,0x10
            int16_t x_right = x_end + 1;
    1888:	0103d393          	srli	t2,t2,0x10
            if (y_top >= 0 && y_top < SSD1306_H) {
    188c:	06f46a63          	bltu	s0,a5,1900 <main+0x69a>
                M_Page_Mask mask_t = page_masks[y_top];
    1890:	4462                	lw	s0,24(sp)
    1892:	0786                	slli	a5,a5,0x1
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    1894:	44f2                	lw	s1,28(sp)
                M_Page_Mask mask_t = page_masks[y_top];
    1896:	97a2                	add	a5,a5,s0
    1898:	0017c403          	lbu	s0,1(a5)
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    189c:	0007c783          	lbu	a5,0(a5)
                if (x_left >= 0 && x_left < SSD1306_W) 		row_t[x_left]  |= mask_t.bitmask;
    18a0:	07f00093          	li	ra,127
                uint8_t* row_t = frame_base + (mask_t.page * SSD1306_W);
    18a4:	079e                	slli	a5,a5,0x7
    18a6:	97a6                	add	a5,a5,s1
                if (x_left >= 0 && x_left < SSD1306_W) 		row_t[x_left]  |= mask_t.bitmask;
    18a8:	00a0ea63          	bltu	ra,a0,18bc <main+0x656>
    18ac:	00a784b3          	add	s1,a5,a0
    18b0:	0004c083          	lbu	ra,0(s1)
    18b4:	001460b3          	or	ra,s0,ra
    18b8:	00148023          	sb	ra,0(s1)
                if (x_start >= 0 && x_start < SSD1306_W) 	row_t[x_start] |= mask_t.bitmask;
    18bc:	07f00093          	li	ra,127
    18c0:	00b0ea63          	bltu	ra,a1,18d4 <main+0x66e>
    18c4:	00b784b3          	add	s1,a5,a1
    18c8:	0004c083          	lbu	ra,0(s1)
    18cc:	001460b3          	or	ra,s0,ra
    18d0:	00148023          	sb	ra,0(s1)
                if (x_end >= 0 && x_end < SSD1306_W) 		row_t[x_end]   |= mask_t.bitmask;
    18d4:	07f00093          	li	ra,127
    18d8:	00c0e963          	bltu	ra,a2,18ea <main+0x684>
    18dc:	00c780b3          	add	ra,a5,a2
    18e0:	0000c483          	lbu	s1,0(ra)
    18e4:	8cc1                	or	s1,s1,s0
    18e6:	00908023          	sb	s1,0(ra)
                if (x_right >= 0 && x_right < SSD1306_W) 	row_t[x_right] |= mask_t.bitmask;
    18ea:	07f00093          	li	ra,127
    18ee:	0070e963          	bltu	ra,t2,1900 <main+0x69a>
    18f2:	979e                	add	a5,a5,t2
    18f4:	0007c083          	lbu	ra,0(a5)
    18f8:	00146433          	or	s0,s0,ra
    18fc:	00878023          	sb	s0,0(a5)
            if (y_bottom >= 0 && y_bottom < SSD1306_H) {
    1900:	03f00793          	li	a5,63
    1904:	0667e863          	bltu	a5,t1,1974 <main+0x70e>
                M_Page_Mask mask_b = page_masks[y_bottom];
    1908:	47e2                	lw	a5,24(sp)
    190a:	0306                	slli	t1,t1,0x1
                uint8_t* row_b = frame_base + (mask_b.page * SSD1306_W);
    190c:	4472                	lw	s0,28(sp)
                M_Page_Mask mask_b = page_masks[y_bottom];
    190e:	933e                	add	t1,t1,a5
                uint8_t* row_b = frame_base + (mask_b.page * SSD1306_W);
    1910:	00034783          	lbu	a5,0(t1)
                M_Page_Mask mask_b = page_masks[y_bottom];
    1914:	00134083          	lbu	ra,1(t1)
                if (x_left >= 0 && x_left < SSD1306_W) 		row_b[x_left]  |= mask_b.bitmask;
    1918:	07f00313          	li	t1,127
                uint8_t* row_b = frame_base + (mask_b.page * SSD1306_W);
    191c:	079e                	slli	a5,a5,0x7
    191e:	97a2                	add	a5,a5,s0
                if (x_left >= 0 && x_left < SSD1306_W) 		row_b[x_left]  |= mask_b.bitmask;
    1920:	00a36963          	bltu	t1,a0,1932 <main+0x6cc>
    1924:	953e                	add	a0,a0,a5
    1926:	00054303          	lbu	t1,0(a0)
    192a:	0060e333          	or	t1,ra,t1
    192e:	00650023          	sb	t1,0(a0)
                if (x_start >= 0 && x_start < SSD1306_W) 	row_b[x_start] |= mask_b.bitmask;
    1932:	07f00513          	li	a0,127
    1936:	00b56963          	bltu	a0,a1,1948 <main+0x6e2>
    193a:	95be                	add	a1,a1,a5
    193c:	0005c503          	lbu	a0,0(a1)
    1940:	00a0e533          	or	a0,ra,a0
    1944:	00a58023          	sb	a0,0(a1)
                if (x_end >= 0 && x_end < SSD1306_W) 		row_b[x_end]   |= mask_b.bitmask;
    1948:	07f00593          	li	a1,127
    194c:	00c5e963          	bltu	a1,a2,195e <main+0x6f8>
    1950:	963e                	add	a2,a2,a5
    1952:	00064583          	lbu	a1,0(a2)
    1956:	00b0e5b3          	or	a1,ra,a1
    195a:	00b60023          	sb	a1,0(a2)
                if (x_right >= 0 && x_right < SSD1306_W) 	row_b[x_right] |= mask_b.bitmask;
    195e:	07f00613          	li	a2,127
    1962:	00766963          	bltu	a2,t2,1974 <main+0x70e>
    1966:	979e                	add	a5,a5,t2
    1968:	0007c603          	lbu	a2,0(a5)
    196c:	00c0e0b3          	or	ra,ra,a2
    1970:	00178023          	sb	ra,0(a5)
            if (e2 <= y) err += ++y * 2 + 1;  // y*2+1
    1974:	4632                	lw	a2,12(sp)
    1976:	87b6                	mv	a5,a3
    1978:	00d64c63          	blt	a2,a3,1990 <main+0x72a>
    197c:	47c2                	lw	a5,16(sp)
    197e:	0785                	addi	a5,a5,1
    1980:	07c2                	slli	a5,a5,0x10
    1982:	87c1                	srai	a5,a5,0x10
    1984:	c63e                	sw	a5,12(sp)
    1986:	0786                	slli	a5,a5,0x1
    1988:	0785                	addi	a5,a5,1
    198a:	97b6                	add	a5,a5,a3
    198c:	07c2                	slli	a5,a5,0x10
    198e:	87c1                	srai	a5,a5,0x10
            if (e2 > x)  err += ++x * 2 + 1;  // x*2+1
    1990:	4612                	lw	a2,4(sp)
    1992:	02d65263          	bge	a2,a3,19b6 <main+0x750>
    1996:	0285                	addi	t0,t0,1
    1998:	01029693          	slli	a3,t0,0x10
    199c:	86c1                	srai	a3,a3,0x10
    199e:	c236                	sw	a3,4(sp)
        } while (x <= 0);
    19a0:	4612                	lw	a2,4(sp)
    19a2:	4685                	li	a3,1
    19a4:	00d60b63          	beq	a2,a3,19ba <main+0x754>
            if (e2 > x)  err += ++x * 2 + 1;  // x*2+1
    19a8:	00161693          	slli	a3,a2,0x1
    19ac:	0685                	addi	a3,a3,1
    19ae:	96be                	add	a3,a3,a5
    19b0:	01069793          	slli	a5,a3,0x10
    19b4:	87c1                	srai	a5,a5,0x10
        int16_t y = 0;
    19b6:	86be                	mv	a3,a5
    19b8:	b559                	j	183e <main+0x5d8>
    for (uint8_t r = radius; r >= inner_r; r--) {
    19ba:	0705                	addi	a4,a4,1
    19bc:	5782                	lw	a5,32(sp)
    19be:	0742                	slli	a4,a4,0x10
    19c0:	8341                	srli	a4,a4,0x10
    19c2:	e6f714e3          	bne	a4,a5,182a <main+0x5c4>
    for (int8_t i = 0; i<4; i++) {
    19c6:	47a2                	lw	a5,8(sp)
    19c8:	0785                	addi	a5,a5,1
    19ca:	07e2                	slli	a5,a5,0x18
    19cc:	87e1                	srai	a5,a5,0x18
    19ce:	c43e                	sw	a5,8(sp)
    19d0:	4782                	lw	a5,0(sp)
    19d2:	07b9                	addi	a5,a5,14
    19d4:	07c2                	slli	a5,a5,0x10
    19d6:	83c1                	srli	a5,a5,0x10
    19d8:	c03e                	sw	a5,0(sp)
    19da:	4702                	lw	a4,0(sp)
    19dc:	04400793          	li	a5,68
    19e0:	b8f71ee3          	bne	a4,a5,157c <main+0x316>
		Limit limit = { l0: 0, l1: myvalues[i] };
    19e4:	6489                	lui	s1,0x2
    19e6:	4401                	li	s0,0
    19e8:	1fc48493          	addi	s1,s1,508 # 21fc <myvalues>
    19ec:	009407b3          	add	a5,s0,s1
    19f0:	0007c783          	lbu	a5,0(a5)
    19f4:	04010e23          	sb	zero,92(sp)
		prefill_verLine(y, limit, 3, 0);
    19f8:	00241513          	slli	a0,s0,0x2
		Limit limit = { l0: 0, l1: myvalues[i] };
    19fc:	04f10ea3          	sb	a5,93(sp)
		prefill_verLine(y, limit, 3, 0);
    1a00:	45f6                	lw	a1,92(sp)
    1a02:	460d                	li	a2,3
    1a04:	0fc57513          	andi	a0,a0,252
    1a08:	e2dfe0ef          	jal	834 <prefill_verLine.constprop.0>
	for(int8_t i = 0; i<sizeof(myvalues); i++) {
    1a0c:	0405                	addi	s0,s0,1
    1a0e:	47c1                	li	a5,16
    1a10:	fcf41ee3          	bne	s0,a5,19ec <main+0x786>
    1a14:	04000413          	li	s0,64
    1a18:	0ff47713          	zext.b	a4,s0
    1a1c:	00171793          	slli	a5,a4,0x1
    1a20:	0ff7f793          	zext.b	a5,a5
		M_Point point_a0 = { x: x, y: 0 };
    1a24:	f8078693          	addi	a3,a5,-128
    1a28:	04d10023          	sb	a3,64(sp)
		M_Point point_a1 = { x: SSD1306_W, y: y };
    1a2c:	f8000693          	li	a3,-128
    1a30:	04d10423          	sb	a3,72(sp)
    1a34:	04e104a3          	sb	a4,73(sp)
		M_Point point_a0 = { x: x, y: 0 };
    1a38:	040100a3          	sb	zero,65(sp)
		prefill_line(point_a0, point_a1, 1);
    1a3c:	45a6                	lw	a1,72(sp)
    1a3e:	4506                	lw	a0,64(sp)
		M_Point point_b0 = { x: SSD1306_W-x, y: SSD1306_H };
    1a40:	40f007b3          	neg	a5,a5
    1a44:	04f10823          	sb	a5,80(sp)
    1a48:	04000793          	li	a5,64
    1a4c:	04f108a3          	sb	a5,81(sp)
		M_Point point_b1 = { x: 0, y: SSD1306_H-y };
    1a50:	8f99                	sub	a5,a5,a4
    1a52:	04f10ea3          	sb	a5,93(sp)
    1a56:	04010e23          	sb	zero,92(sp)
		prefill_line(point_a0, point_a1, 1);
    1a5a:	c29fe0ef          	jal	682 <prefill_line.constprop.0>
		prefill_line(point_b0, point_b1, 1);
    1a5e:	45f6                	lw	a1,92(sp)
    1a60:	4546                	lw	a0,80(sp)
		y+= SSD1306_H/8;
    1a62:	0421                	addi	s0,s0,8
		prefill_line(point_b0, point_b1, 1);
    1a64:	c1ffe0ef          	jal	682 <prefill_line.constprop.0>
    for(uint8_t x=0;x<SSD1306_W;x+=16) {
    1a68:	08000793          	li	a5,128
    1a6c:	faf416e3          	bne	s0,a5,1a18 <main+0x7b2>
	// ssd1306_print_str_at("testing 55554fdafadfafa", 4, 0);
	// ssd1306_print_str_at("testing 66664fdafadfafa", 5, 0);
	// ssd1306_print_str_at("testing 77774fdafadfafa", 6, 0);
	// ssd1306_print_str_at("testing 88884fdafadfafa", 7, 0);

	ssd1306_renderFrame();
    1a70:	da8ff0ef          	jal	1018 <ssd1306_renderFrame>
	handler();
	return micros() - now;
    1a74:	e000f7b7          	lui	a5,0xe000f
    1a78:	4788                	lw	a0,8(a5)
    1a7a:	03000593          	li	a1,48
    1a7e:	e2afe0ef          	jal	a8 <__hidden___udivsi3>

			// // modJoystick_task();
			// // dma_uart_tx(message, sizeof(message) - 1);

			uint32_t runtime_i2c = get_runTime(ssd1306_draw_test);
			sprintf(str_output, "I2C runtime: %lu us", runtime_i2c);
    1a82:	5792                	lw	a5,36(sp)
    1a84:	6589                	lui	a1,0x2
    1a86:	fd058593          	addi	a1,a1,-48 # 1fd0 <DMA1_Channel3_IRQHandler+0xfc>
    1a8a:	40f50633          	sub	a2,a0,a5
    1a8e:	c9018513          	addi	a0,gp,-880 # 2000008c <str_output>
    1a92:	cf8ff0ef          	jal	f8a <sprintf>
			sec_time = now;
    1a96:	47d2                	lw	a5,20(sp)
    1a98:	b255                	j	143c <main+0x1d6>

00001a9a <SysTick_Handler>:
{
    1a9a:	1151                	addi	sp,sp,-12
    1a9c:	c03e                	sw	a5,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1a9e:	e000f7b7          	lui	a5,0xe000f
{
    1aa2:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1aa4:	4b98                	lw	a4,16(a5)
{
    1aa6:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1aa8:	66b1                	lui	a3,0xc
    1aaa:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.829168c6+0x2290>
    1aae:	9736                	add	a4,a4,a3
    1ab0:	cb98                	sw	a4,16(a5)
	SysTick->SR = 0x00000000;
    1ab2:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>
	systick_millis++;
    1ab6:	c8c1a783          	lw	a5,-884(gp) # 20000088 <systick_millis>
}
    1aba:	46a2                	lw	a3,8(sp)
	systick_millis++;
    1abc:	0785                	addi	a5,a5,1
    1abe:	c8f1a623          	sw	a5,-884(gp) # 20000088 <systick_millis>
}
    1ac2:	4712                	lw	a4,4(sp)
    1ac4:	4782                	lw	a5,0(sp)
    1ac6:	0131                	addi	sp,sp,12
    1ac8:	30200073          	mret

00001acc <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    1acc:	7179                	addi	sp,sp,-48
    1ace:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    1ad0:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    1ad4:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    1ad6:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    1ada:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    1ade:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    1ae2:	cc26                	sw	s1,24(sp)
    1ae4:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    1ae6:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    1aea:	d416                	sw	t0,40(sp)
    1aec:	d21a                	sw	t1,36(sp)
    1aee:	d01e                	sw	t2,32(sp)
    1af0:	ce22                	sw	s0,28(sp)
    1af2:	ca2a                	sw	a0,20(sp)
    1af4:	c82e                	sw	a1,16(sp)
    1af6:	c632                	sw	a2,12(sp)
    1af8:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    1afa:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    1afc:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    1afe:	c305                	beqz	a4,1b1e <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    1b00:	18418713          	addi	a4,gp,388 # 20000580 <i2c_slave_state>
    1b04:	4685                	li	a3,1
    1b06:	07c2                	slli	a5,a5,0x10
    1b08:	83c1                	srli	a5,a5,0x10
    1b0a:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1b0e:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1b12:	839d                	srli	a5,a5,0x7
    1b14:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1b16:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1b1a:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    1b1e:	0404f793          	andi	a5,s1,64
    1b22:	c795                	beqz	a5,1b4e <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    1b24:	18418793          	addi	a5,gp,388 # 20000580 <i2c_slave_state>
    1b28:	0007c703          	lbu	a4,0(a5)
    1b2c:	c369                	beqz	a4,1bee <I2C1_EV_IRQHandler+0x122>
            i2c_slave_state.offset = I2C1->DATAR;
    1b2e:	40005737          	lui	a4,0x40005
    1b32:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    1b36:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    1b3a:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    1b3e:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    1b42:	0ff77713          	zext.b	a4,a4
    1b46:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    1b4a:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    1b4e:	0804f793          	andi	a5,s1,128
    1b52:	c7a1                	beqz	a5,1b9a <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    1b54:	18418793          	addi	a5,gp,388 # 20000580 <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    1b58:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1b5c:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    1b60:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    1b64:	400057b7          	lui	a5,0x40005
    1b68:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    1b6c:	18418413          	addi	s0,gp,388 # 20000580 <i2c_slave_state>
    1b70:	cb69                	beqz	a4,1c42 <I2C1_EV_IRQHandler+0x176>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1b72:	01044703          	lbu	a4,16(s0)
    1b76:	0ee57463          	bgeu	a0,a4,1c5e <I2C1_EV_IRQHandler+0x192>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    1b7a:	4458                	lw	a4,12(s0)
    1b7c:	972a                	add	a4,a4,a0
    1b7e:	00074703          	lbu	a4,0(a4)
    1b82:	0ff77713          	zext.b	a4,a4
    1b86:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    1b8a:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    1b8c:	c391                	beqz	a5,1b90 <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    1b8e:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    1b90:	00244783          	lbu	a5,2(s0)
    1b94:	0785                	addi	a5,a5,1
    1b96:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    1b9a:	88c1                	andi	s1,s1,16
    1b9c:	c895                	beqz	s1,1bd0 <I2C1_EV_IRQHandler+0x104>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    1b9e:	400057b7          	lui	a5,0x40005
    1ba2:	4007d703          	lhu	a4,1024(a5) # 40005400 <_eusrstack+0x20004c00>
    1ba6:	66c1                	lui	a3,0x10
    1ba8:	dff68693          	addi	a3,a3,-513 # fdff <lib_i2c.c.829168c6+0x650f>
    1bac:	8f75                	and	a4,a4,a3
    1bae:	40e79023          	sh	a4,1024(a5)
        if (i2c_slave_state.address2matched) {
    1bb2:	18418793          	addi	a5,gp,388 # 20000580 <i2c_slave_state>
    1bb6:	02a7c703          	lbu	a4,42(a5)
    1bba:	c74d                	beqz	a4,1c64 <I2C1_EV_IRQHandler+0x198>
            if (i2c_slave_state.write_callback2 != NULL) {
    1bbc:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    1bbe:	cb09                	beqz	a4,1bd0 <I2C1_EV_IRQHandler+0x104>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    1bc0:	0017c503          	lbu	a0,1(a5)
    1bc4:	0027c583          	lbu	a1,2(a5)
    1bc8:	8d89                	sub	a1,a1,a0
    1bca:	0ff5f593          	zext.b	a1,a1
    1bce:	9702                	jalr	a4
            }
        }
    }
}
    1bd0:	4472                	lw	s0,28(sp)
    1bd2:	50b2                	lw	ra,44(sp)
    1bd4:	52a2                	lw	t0,40(sp)
    1bd6:	5312                	lw	t1,36(sp)
    1bd8:	5382                	lw	t2,32(sp)
    1bda:	44e2                	lw	s1,24(sp)
    1bdc:	4552                	lw	a0,20(sp)
    1bde:	45c2                	lw	a1,16(sp)
    1be0:	4632                	lw	a2,12(sp)
    1be2:	46a2                	lw	a3,8(sp)
    1be4:	4712                	lw	a4,4(sp)
    1be6:	4782                	lw	a5,0(sp)
    1be8:	6145                	addi	sp,sp,48
    1bea:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    1bee:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    1bf2:	4705                	li	a4,1
    1bf4:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    1bf8:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    1bfc:	c695                	beqz	a3,1c28 <I2C1_EV_IRQHandler+0x15c>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    1bfe:	0107c683          	lbu	a3,16(a5)
    1c02:	f4d776e3          	bgeu	a4,a3,1b4e <I2C1_EV_IRQHandler+0x82>
    1c06:	0287c683          	lbu	a3,40(a5)
    1c0a:	f2b1                	bnez	a3,1b4e <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    1c0c:	400056b7          	lui	a3,0x40005
    1c10:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1c14:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    1c16:	96ba                	add	a3,a3,a4
    1c18:	0ff67613          	zext.b	a2,a2
    1c1c:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    1c20:	0705                	addi	a4,a4,1
    1c22:	00e78123          	sb	a4,2(a5)
    1c26:	b725                	j	1b4e <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    1c28:	0087c683          	lbu	a3,8(a5)
    1c2c:	f2d771e3          	bgeu	a4,a3,1b4e <I2C1_EV_IRQHandler+0x82>
    1c30:	01c7c683          	lbu	a3,28(a5)
    1c34:	fe89                	bnez	a3,1b4e <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    1c36:	400056b7          	lui	a3,0x40005
    1c3a:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1c3e:	43d4                	lw	a3,4(a5)
    1c40:	bfd9                	j	1c16 <I2C1_EV_IRQHandler+0x14a>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    1c42:	00844703          	lbu	a4,8(s0)
    1c46:	00e57c63          	bgeu	a0,a4,1c5e <I2C1_EV_IRQHandler+0x192>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    1c4a:	4058                	lw	a4,4(s0)
    1c4c:	972a                	add	a4,a4,a0
    1c4e:	00074703          	lbu	a4,0(a4)
    1c52:	0ff77713          	zext.b	a4,a4
    1c56:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    1c5a:	4c1c                	lw	a5,24(s0)
    1c5c:	bf05                	j	1b8c <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    1c5e:	00079823          	sh	zero,16(a5)
    1c62:	bf25                	j	1b9a <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    1c64:	4bd8                	lw	a4,20(a5)
    1c66:	bfa1                	j	1bbe <I2C1_EV_IRQHandler+0xf2>

00001c68 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    1c68:	1141                	addi	sp,sp,-16
    1c6a:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1c6c:	400057b7          	lui	a5,0x40005
void I2C1_ER_IRQHandler(void) {
    1c70:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1c72:	4147d683          	lhu	a3,1044(a5) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    1c76:	c23a                	sw	a4,4(sp)
    1c78:	c632                	sw	a2,12(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1c7a:	01069713          	slli	a4,a3,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1c7e:	1006f693          	andi	a3,a3,256
    uint16_t STAR1 = I2C1->STAR1;
    1c82:	8341                	srli	a4,a4,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1c84:	ca99                	beqz	a3,1c9a <I2C1_ER_IRQHandler+0x32>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    1c86:	4147d683          	lhu	a3,1044(a5)
    1c8a:	6641                	lui	a2,0x10
    1c8c:	eff60613          	addi	a2,a2,-257 # feff <lib_i2c.c.829168c6+0x660f>
    1c90:	8ef1                	and	a3,a3,a2
    1c92:	40078793          	addi	a5,a5,1024
    1c96:	00d79a23          	sh	a3,20(a5)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    1c9a:	20077793          	andi	a5,a4,512
    1c9e:	cb99                	beqz	a5,1cb4 <I2C1_ER_IRQHandler+0x4c>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    1ca0:	400057b7          	lui	a5,0x40005
    1ca4:	4147d683          	lhu	a3,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    1ca8:	6641                	lui	a2,0x10
    1caa:	dff60613          	addi	a2,a2,-513 # fdff <lib_i2c.c.829168c6+0x650f>
    1cae:	8ef1                	and	a3,a3,a2
    1cb0:	40d79a23          	sh	a3,1044(a5)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    1cb4:	40077713          	andi	a4,a4,1024
    1cb8:	cb19                	beqz	a4,1cce <I2C1_ER_IRQHandler+0x66>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    1cba:	400057b7          	lui	a5,0x40005
    1cbe:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    1cc2:	66c1                	lui	a3,0x10
    1cc4:	bff68693          	addi	a3,a3,-1025 # fbff <lib_i2c.c.829168c6+0x630f>
    1cc8:	8f75                	and	a4,a4,a3
    1cca:	40e79a23          	sh	a4,1044(a5)
    }
}
    1cce:	4632                	lw	a2,12(sp)
    1cd0:	46a2                	lw	a3,8(sp)
    1cd2:	4712                	lw	a4,4(sp)
    1cd4:	4782                	lw	a5,0(sp)
    1cd6:	0141                	addi	sp,sp,16
    1cd8:	30200073          	mret

00001cdc <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    1cdc:	fdc10113          	addi	sp,sp,-36
    1ce0:	cc26                	sw	s1,24(sp)
    1ce2:	d006                	sw	ra,32(sp)
    1ce4:	ce22                	sw	s0,28(sp)
    1ce6:	c032                	sw	a2,0(sp)
    1ce8:	84aa                	mv	s1,a0
	if( tween <= 0 ) return hexa;
    1cea:	0ac05863          	blez	a2,1d9a <TweenHexColors+0xbe>
	if( tween >= 255 ) return hexb;
    1cee:	0fe00713          	li	a4,254
    1cf2:	842e                	mv	s0,a1
    1cf4:	0ac74a63          	blt	a4,a2,1da8 <TweenHexColors+0xcc>
	int32_t aamt = 255-tween;
    1cf8:	0ff00793          	li	a5,255
    1cfc:	8f91                	sub	a5,a5,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1cfe:	85be                	mv	a1,a5
    1d00:	0ff57513          	zext.b	a0,a0
	int32_t aamt = 255-tween;
    1d04:	c23e                	sw	a5,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1d06:	1fffe097          	auipc	ra,0x1fffe
    1d0a:	32a080e7          	jalr	810(ra) # 20000030 <FastMultiply>
    1d0e:	4582                	lw	a1,0(sp)
    1d10:	ca2a                	sw	a0,20(sp)
    1d12:	0ff47513          	zext.b	a0,s0
    1d16:	1fffe097          	auipc	ra,0x1fffe
    1d1a:	31a080e7          	jalr	794(ra) # 20000030 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1d1e:	4592                	lw	a1,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1d20:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    1d22:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1d26:	0ff57513          	zext.b	a0,a0
    1d2a:	1fffe097          	auipc	ra,0x1fffe
    1d2e:	306080e7          	jalr	774(ra) # 20000030 <FastMultiply>
    1d32:	4582                	lw	a1,0(sp)
    1d34:	c62a                	sw	a0,12(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    1d36:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1d3a:	0ff57513          	zext.b	a0,a0
    1d3e:	1fffe097          	auipc	ra,0x1fffe
    1d42:	2f2080e7          	jalr	754(ra) # 20000030 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1d46:	4592                	lw	a1,4(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1d48:	c42a                	sw	a0,8(sp)
	int32_t hag = (hexa>>16) & 0xff;
    1d4a:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1d4e:	0ff57513          	zext.b	a0,a0
    1d52:	1fffe097          	auipc	ra,0x1fffe
    1d56:	2de080e7          	jalr	734(ra) # 20000030 <FastMultiply>
    1d5a:	4582                	lw	a1,0(sp)
    1d5c:	84aa                	mv	s1,a0
	int32_t hbg = (hexb>>16) & 0xff;
    1d5e:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1d62:	0ff57513          	zext.b	a0,a0
    1d66:	1fffe097          	auipc	ra,0x1fffe
    1d6a:	2ca080e7          	jalr	714(ra) # 20000030 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1d6e:	4342                	lw	t1,16(sp)
    1d70:	4752                	lw	a4,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1d72:	4622                	lw	a2,8(sp)
    1d74:	46b2                	lw	a3,12(sp)
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1d76:	00a487b3          	add	a5,s1,a0
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1d7a:	971a                	add	a4,a4,t1
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1d7c:	96b2                	add	a3,a3,a2
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1d7e:	08070713          	addi	a4,a4,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1d82:	08068693          	addi	a3,a3,128
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1d86:	08078793          	addi	a5,a5,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1d8a:	8321                	srli	a4,a4,0x8
	return b | (r<<8) | (g<<16);
    1d8c:	f006f693          	andi	a3,a3,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1d90:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    1d92:	8f55                	or	a4,a4,a3
    1d94:	07c2                	slli	a5,a5,0x10
    1d96:	00f764b3          	or	s1,a4,a5
}
    1d9a:	5082                	lw	ra,32(sp)
    1d9c:	4472                	lw	s0,28(sp)
    1d9e:	8526                	mv	a0,s1
    1da0:	44e2                	lw	s1,24(sp)
    1da2:	02410113          	addi	sp,sp,36
    1da6:	8082                	ret
	if( tween >= 255 ) return hexb;
    1da8:	84ae                	mv	s1,a1
    1daa:	bfc5                	j	1d9a <TweenHexColors+0xbe>

00001dac <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1dac:	fdc10113          	addi	sp,sp,-36
    1db0:	ce22                	sw	s0,28(sp)
    1db2:	cc26                	sw	s1,24(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    1db4:	c801a483          	lw	s1,-896(gp) # 2000007c <WS2812LEDs>
	int place = WS2812LEDPlace;
    1db8:	c7c1a703          	lw	a4,-900(gp) # 20000078 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1dbc:	d006                	sw	ra,32(sp)
    1dbe:	87aa                	mv	a5,a0
    1dc0:	c02e                	sw	a1,0(sp)
	uint16_t * end = ptr + numhalfwords;
    1dc2:	03050313          	addi	t1,a0,48
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    1dc6:	06074263          	bltz	a4,1e2a <WS2812FillBuffSec.constprop.0+0x7e>
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    1dca:	007f45b7          	lui	a1,0x7f4
    1dce:	628d                	lui	t0,0x3
    1dd0:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.829168c6+0x7ea750>
    1dd4:	0ff28293          	addi	t0,t0,255 # 30ff <ch32fun.c.de574efd+0x2f7>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    1dd8:	04f30b63          	beq	t1,a5,1e2e <WS2812FillBuffSec.constprop.0+0x82>
	{
		if( place >= ledcount )
    1ddc:	06974163          	blt	a4,s1,1e3e <WS2812FillBuffSec.constprop.0+0x92>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    1de0:	40f30633          	sub	a2,t1,a5
    1de4:	853e                	mv	a0,a5
    1de6:	4581                	li	a1,0
    1de8:	c23a                	sw	a4,4(sp)
    1dea:	9c0ff0ef          	jal	faa <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    1dee:	4782                	lw	a5,0(sp)
    1df0:	4712                	lw	a4,4(sp)
    1df2:	cf95                	beqz	a5,1e2e <WS2812FillBuffSec.constprop.0+0x82>
			{
				if( place == ledcount )
    1df4:	00e49a63          	bne	s1,a4,1e08 <WS2812FillBuffSec.constprop.0+0x5c>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    1df8:	400207b7          	lui	a5,0x40020
    1dfc:	5b94                	lw	a3,48(a5)
    1dfe:	fdf6f693          	andi	a3,a3,-33
    1e02:	db94                	sw	a3,48(a5)
					WS2812BLEDInUse = 0;
    1e04:	c601ac23          	sw	zero,-904(gp) # 20000074 <WS2812BLEDInUse>
				}
				place++;
    1e08:	0705                	addi	a4,a4,1
    1e0a:	a015                	j	1e2e <WS2812FillBuffSec.constprop.0+0x82>
		(*ptr++) = 0;
    1e0c:	00079023          	sh	zero,0(a5) # 40020000 <_eusrstack+0x2001f800>
		(*ptr++) = 0;
    1e10:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    1e14:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    1e18:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    1e1c:	00079423          	sh	zero,8(a5)
		place++;
    1e20:	0705                	addi	a4,a4,1
		(*ptr++) = 0;
    1e22:	07b1                	addi	a5,a5,12
    1e24:	fe079f23          	sh	zero,-2(a5)
    1e28:	bf79                	j	1dc6 <WS2812FillBuffSec.constprop.0+0x1a>
	while( place < 0 && ptr != end )
    1e2a:	fef311e3          	bne	t1,a5,1e0c <WS2812FillBuffSec.constprop.0+0x60>
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
}
    1e2e:	5082                	lw	ra,32(sp)
	WS2812LEDPlace = place;
    1e30:	c6e1ae23          	sw	a4,-900(gp) # 20000078 <WS2812LEDPlace>
}
    1e34:	4472                	lw	s0,28(sp)
    1e36:	44e2                	lw	s1,24(sp)
    1e38:	02410113          	addi	sp,sp,36
    1e3c:	8082                	ret
    1e3e:	c1c1a603          	lw	a2,-996(gp) # 20000018 <tween>
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1e42:	00170393          	addi	t2,a4,1
    1e46:	9732                	add	a4,a4,a2
    1e48:	4601                	li	a2,0
    1e4a:	00e05463          	blez	a4,1e52 <WS2812FillBuffSec.constprop.0+0xa6>
    1e4e:	0ff00613          	li	a2,255
    1e52:	8516                	mv	a0,t0
    1e54:	ca1e                	sw	t2,20(sp)
    1e56:	c83e                	sw	a5,16(sp)
    1e58:	c61a                	sw	t1,12(sp)
    1e5a:	c42e                	sw	a1,8(sp)
    1e5c:	c216                	sw	t0,4(sp)
    1e5e:	3dbd                	jal	1cdc <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1e60:	00b55713          	srli	a4,a0,0xb
    1e64:	6789                	lui	a5,0x2
    1e66:	fe478693          	addi	a3,a5,-28 # 1fe4 <bitquartets.8>
    1e6a:	8b79                	andi	a4,a4,30
    1e6c:	9736                	add	a4,a4,a3
    1e6e:	47c2                	lw	a5,16(sp)
    1e70:	00075703          	lhu	a4,0(a4)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1e74:	43d2                	lw	t2,20(sp)
    1e76:	4332                	lw	t1,12(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1e78:	00e79023          	sh	a4,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1e7c:	00755713          	srli	a4,a0,0x7
    1e80:	8b79                	andi	a4,a4,30
    1e82:	9736                	add	a4,a4,a3
    1e84:	00075703          	lhu	a4,0(a4)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1e88:	45a2                	lw	a1,8(sp)
    1e8a:	4292                	lw	t0,4(sp)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1e8c:	00e79123          	sh	a4,2(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    1e90:	00355713          	srli	a4,a0,0x3
    1e94:	8b79                	andi	a4,a4,30
    1e96:	9736                	add	a4,a4,a3
    1e98:	00075703          	lhu	a4,0(a4)
		ptr += 6;
    1e9c:	07b1                	addi	a5,a5,12
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    1e9e:	fee79c23          	sh	a4,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    1ea2:	00f57713          	andi	a4,a0,15
    1ea6:	0706                	slli	a4,a4,0x1
    1ea8:	9736                	add	a4,a4,a3
    1eaa:	00075703          	lhu	a4,0(a4)
    1eae:	fee79d23          	sh	a4,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1eb2:	01355713          	srli	a4,a0,0x13
    1eb6:	8b79                	andi	a4,a4,30
    1eb8:	9736                	add	a4,a4,a3
    1eba:	00075703          	lhu	a4,0(a4)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1ebe:	813d                	srli	a0,a0,0xf
    1ec0:	8979                	andi	a0,a0,30
    1ec2:	9536                	add	a0,a0,a3
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1ec4:	fee79e23          	sh	a4,-4(a5)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1ec8:	00055703          	lhu	a4,0(a0)
    1ecc:	fee79f23          	sh	a4,-2(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1ed0:	871e                	mv	a4,t2
    1ed2:	b719                	j	1dd8 <WS2812FillBuffSec.constprop.0+0x2c>

00001ed4 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    1ed4:	fcc10113          	addi	sp,sp,-52
    1ed8:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    1eda:	400207b7          	lui	a5,0x40020
    1ede:	439c                	lw	a5,0(a5)
{
    1ee0:	d022                	sw	s0,32(sp)
    1ee2:	ce26                	sw	s1,28(sp)
    1ee4:	d806                	sw	ra,48(sp)
    1ee6:	d616                	sw	t0,44(sp)
    1ee8:	d41a                	sw	t1,40(sp)
    1eea:	d21e                	sw	t2,36(sp)
    1eec:	cc2a                	sw	a0,24(sp)
    1eee:	ca2e                	sw	a1,20(sp)
    1ef0:	c832                	sw	a2,16(sp)
    1ef2:	c636                	sw	a3,12(sp)
    1ef4:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    1ef6:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    1ef8:	40020437          	lui	s0,0x40020
    1efc:	10000493          	li	s1,256
    1f00:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    1f02:	4782                	lw	a5,0(sp)
    1f04:	4007f793          	andi	a5,a5,1024
    1f08:	c789                	beqz	a5,1f12 <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    1f0a:	4585                	li	a1,1
    1f0c:	12418513          	addi	a0,gp,292 # 20000520 <WS2812dmabuff>
    1f10:	3d71                	jal	1dac <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    1f12:	4782                	lw	a5,0(sp)
    1f14:	2007f793          	andi	a5,a5,512
    1f18:	c789                	beqz	a5,1f22 <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    1f1a:	4581                	li	a1,0
    1f1c:	15418513          	addi	a0,gp,340 # 20000550 <WS2812dmabuff+0x30>
    1f20:	3571                	jal	1dac <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    1f22:	401c                	lw	a5,0(s0)
    1f24:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    1f26:	4782                	lw	a5,0(sp)
    1f28:	1007f793          	andi	a5,a5,256
    1f2c:	fbf1                	bnez	a5,1f00 <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    1f2e:	5402                	lw	s0,32(sp)
    1f30:	50c2                	lw	ra,48(sp)
    1f32:	52b2                	lw	t0,44(sp)
    1f34:	5322                	lw	t1,40(sp)
    1f36:	5392                	lw	t2,36(sp)
    1f38:	44f2                	lw	s1,28(sp)
    1f3a:	4562                	lw	a0,24(sp)
    1f3c:	45d2                	lw	a1,20(sp)
    1f3e:	4642                	lw	a2,16(sp)
    1f40:	46b2                	lw	a3,12(sp)
    1f42:	4722                	lw	a4,8(sp)
    1f44:	4792                	lw	a5,4(sp)
    1f46:	03410113          	addi	sp,sp,52
    1f4a:	30200073          	mret
    1f4e:	0000                	unimp
    1f50:	000c                	.insn	2, 0x000c
    1f52:	0810                	addi	a2,sp,16
    1f54:	0818                	addi	a4,sp,16
    1f56:	0e12                	slli	t3,t3,0x4
    1f58:	1616                	slli	a2,a2,0x25
    1f5a:	100c                	addi	a1,sp,32
    1f5c:	1602                	slli	a2,a2,0x20
    1f5e:	0e06                	slli	t3,t3,0x1
    1f60:	0800                	addi	s0,sp,16
    1f62:	0808                	addi	a0,sp,16
    1f64:	000a                	c.slli	zero,0x2
    1f66:	0000                	unimp
    1f68:	3249                	jal	18ea <main+0x684>
    1f6a:	30203a43          	.insn	4, 0x30203a43
    1f6e:	2578                	.insn	2, 0x2578
    1f70:	3230                	.insn	2, 0x3230
    1f72:	0058                	addi	a4,sp,4
    1f74:	6146                	.insn	2, 0x6146
    1f76:	6c69                	lui	s8,0x1a
    1f78:	6465                	lui	s0,0x19
    1f7a:	7420                	.insn	2, 0x7420
    1f7c:	6e69206f          	j	94662 <lib_i2c.c.829168c6+0x8ad72>
    1f80:	7469                	lui	s0,0xffffa
    1f82:	4920                	lw	s0,80(a0)
    1f84:	4332                	lw	t1,12(sp)
    1f86:	0000                	unimp
    1f88:	2d2d                	jal	25c2 <_data_lma+0x3b6>
    1f8a:	2d2d                	jal	25c4 <_data_lma+0x3b8>
    1f8c:	6e616353          	.insn	4, 0x6e616353
    1f90:	696e                	.insn	2, 0x696e
    1f92:	676e                	.insn	2, 0x676e
    1f94:	4920                	lw	s0,80(a0)
    1f96:	4332                	lw	t1,12(sp)
    1f98:	4220                	lw	s0,64(a2)
    1f9a:	7375                	lui	t1,0xffffd
    1f9c:	6620                	.insn	2, 0x6620
    1f9e:	4420726f          	jal	tp,93e0 <ch32_mess.c.90336b46+0x553a>
    1fa2:	7665                	lui	a2,0xffff9
    1fa4:	6369                	lui	t1,0x1a
    1fa6:	7365                	lui	t1,0xffff9
    1fa8:	2d2d                	jal	25e2 <_data_lma+0x3d6>
    1faa:	002d                	c.nop	11
    1fac:	2d2d                	jal	25e6 <_data_lma+0x3da>
    1fae:	2d2d                	jal	25e8 <_data_lma+0x3dc>
    1fb0:	6f44                	.insn	2, 0x6f44
    1fb2:	656e                	.insn	2, 0x656e
    1fb4:	5320                	lw	s0,96(a4)
    1fb6:	6e6e6163          	bltu	t3,t1,2698 <_data_lma+0x48c>
    1fba:	6e69                	lui	t3,0x1a
    1fbc:	2d2d2d67          	.insn	4, 0x2d2d2d67
    1fc0:	0a2d                	addi	s4,s4,11
    1fc2:	0000                	unimp
    1fc4:	6548                	.insn	2, 0x6548
    1fc6:	6c6c                	.insn	2, 0x6c6c
    1fc8:	6542206f          	j	2461c <lib_i2c.c.829168c6+0x1ad2c>
    1fcc:	2165                	jal	2474 <_data_lma+0x268>
    1fce:	0000                	unimp
    1fd0:	3249                	jal	1952 <main+0x6ec>
    1fd2:	75722043          	.insn	4, 0x75722043
    1fd6:	746e                	.insn	2, 0x746e
    1fd8:	6d69                	lui	s10,0x1a
    1fda:	3a65                	jal	1992 <main+0x72c>
    1fdc:	2520                	.insn	2, 0x2520
    1fde:	756c                	.insn	2, 0x756c
    1fe0:	7520                	.insn	2, 0x7520
    1fe2:	Address 0x1fe2 is out of bounds.


00001fe4 <bitquartets.8>:
    1fe4:	88 88 8e 88 e8 88 ee 88 88 8e 8e 8e e8 8e ee 8e     ................
    1ff4:	88 e8 8e e8 e8 e8 ee e8 88 ee 8e ee e8 ee ee ee     ................

00002004 <FONT_7x5>:
    2004:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    2014:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    2024:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
    2034:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
    2044:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
    2054:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
    2064:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
    2074:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
    2084:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
    2094:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
    20a4:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
    20b4:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
    20c4:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
    20d4:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    20e4:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    20f4:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
    2104:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
    2114:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
    2124:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
    2134:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
    2144:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
    2154:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
    2164:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
    2174:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
    2184:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
    2194:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
    21a4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
    21b4:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
    21c4:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
    21d4:	00 00 41 36 08 00 08 08 2a 1c 08 00                 ..A6....*...

000021e0 <ssd1306_init_array>:
    21e0:	ae d5 80 a8 3f d3 00 40 8d 14 20 00 a1 c8 da 12     ....?..@.. .....
    21f0:	81 8f d9 f1 db 40 a4 a6 af ff 00 00                 .....@......

000021fc <myvalues>:
    21fc:	1e 32 3c 28 14 32 1e 0a 23 0a 14 1e 28 32 3c 14     .2<(.2..#...(2<.

Disassembly of section .data:

20000000 <dev_aht21>:
20000000:	80 1a 06 00 00 00 00 00 38 00 01 00                 ........8...

2000000c <dev_ssd1306>:
2000000c:	a0 86 01 00 00 00 00 00 3c 00 01 00                 ........<...

20000018 <tween>:
20000018:	42 ff ff ff                                         B...

2000001c <hourglass.6>:
2000001c:	06 26 12 26 06 34 12 34                             .&.&.4.4

20000024 <quad.7>:
20000024:	06 18 12 18 16 22 02 22                             ....."."

2000002c <line.5>:
2000002c:	01 00 00 00                                         ....

20000030 <FastMultiply>:
{
20000030:	87aa                	mv	a5,a0
	uint32_t ret = 0;
20000032:	4501                	li	a0,0
		if( multiplicand & 1 )
20000034:	0015f713          	andi	a4,a1,1
20000038:	c311                	beqz	a4,2000003c <FastMultiply+0xc>
			ret += mutliplicant;
2000003a:	953e                	add	a0,a0,a5
		multiplicand>>=1;
2000003c:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
2000003e:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000040:	f9f5                	bnez	a1,20000034 <FastMultiply+0x4>
}
20000042:	8082                	ret

20000044 <DMA1_Channel4_IRQHandler>:

// DMA transfer completion interrupt. It will fire when the DMA transfer is
// complete. We use it just to blink the LED
__attribute__((interrupt)) __attribute__((section(".srodata")))
void DMA1_Channel4_IRQHandler(void)
{
20000044:	1151                	addi	sp,sp,-12
20000046:	c23a                	sw	a4,4(sp)
	// Clear flag
	DMA1->INTFCR |= DMA_CTCIF4;
20000048:	40020737          	lui	a4,0x40020
{
2000004c:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000004e:	435c                	lw	a5,4(a4)
{
20000050:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000052:	6689                	lui	a3,0x2
20000054:	8fd5                	or	a5,a5,a3
20000056:	c35c                	sw	a5,4(a4)

	// Blink LED
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000058:	400117b7          	lui	a5,0x40011
2000005c:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000060:	47d8                	lw	a4,12(a5)
}
20000062:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000064:	04074713          	xori	a4,a4,64
20000068:	c7d8                	sw	a4,12(a5)
}
2000006a:	4712                	lw	a4,4(sp)
2000006c:	4782                	lw	a5,0(sp)
2000006e:	0131                	addi	sp,sp,12
20000070:	30200073          	mret
