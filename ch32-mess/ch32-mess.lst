
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	4a10006f          	j	ca0 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0d6e                	slli	s10,s10,0x1b
   a:	0000                	unimp
   c:	0d16                	slli	s10,s10,0x5
	...
  2e:	0000                	unimp
  30:	2124                	fld	fs1,64(a0)
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d16                	slli	s10,s10,0x5
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0d16                	slli	s10,s10,0x5
  42:	0000                	unimp
  44:	0d16                	slli	s10,s10,0x5
  46:	0000                	unimp
  48:	0d16                	slli	s10,s10,0x5
  4a:	0000                	unimp
  4c:	0d16                	slli	s10,s10,0x5
  4e:	0000                	unimp
  50:	0d16                	slli	s10,s10,0x5
  52:	0000                	unimp
  54:	0d16                	slli	s10,s10,0x5
  56:	0000                	unimp
  58:	0d16                	slli	s10,s10,0x5
  5a:	0000                	unimp
  5c:	0d16                	slli	s10,s10,0x5
  5e:	0000                	unimp
  60:	20aa                	fld	ft1,136(sp)
  62:	0000                	unimp
  64:	005c                	addi	a5,sp,4
  66:	2000                	fld	fs0,0(s0)
  68:	0d16                	slli	s10,s10,0x5
  6a:	0000                	unimp
  6c:	0d16                	slli	s10,s10,0x5
  6e:	0000                	unimp
  70:	0d16                	slli	s10,s10,0x5
  72:	0000                	unimp
  74:	0d16                	slli	s10,s10,0x5
  76:	0000                	unimp
  78:	2156                	fld	ft2,336(sp)
  7a:	0000                	unimp
  7c:	22f6                	fld	ft5,344(sp)
  7e:	0000                	unimp
  80:	0d16                	slli	s10,s10,0x5
  82:	0000                	unimp
  84:	0d16                	slli	s10,s10,0x5
  86:	0000                	unimp
  88:	0d16                	slli	s10,s10,0x5
  8a:	0000                	unimp
  8c:	0d16                	slli	s10,s10,0x5
  8e:	0000                	unimp
  90:	0d16                	slli	s10,s10,0x5
  92:	0000                	unimp
  94:	0d16                	slli	s10,s10,0x5
  96:	0000                	unimp
  98:	0d16                	slli	s10,s10,0x5
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
      a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
      a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
      a8:	862e                	mv	a2,a1
      aa:	85aa                	mv	a1,a0
      ac:	557d                	li	a0,-1
      ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
      b0:	4685                	li	a3,1
      b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
      b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
      ba:	0606                	slli	a2,a2,0x1
      bc:	0686                	slli	a3,a3,0x1
      be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
      c2:	4501                	li	a0,0
      c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
      c8:	8d91                	sub	a1,a1,a2
      ca:	8d55                	or	a0,a0,a3
      cc:	8285                	srli	a3,a3,0x1
      ce:	8205                	srli	a2,a2,0x1
      d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
      d2:	8082                	ret

000000d4 <__umodsi3>:
      d4:	8286                	mv	t0,ra
      d6:	3fc9                	jal	a8 <__hidden___udivsi3>
      d8:	852e                	mv	a0,a1
      da:	8282                	jr	t0
      dc:	40a00533          	neg	a0,a0
      e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
      e4:	40b005b3          	neg	a1,a1
      e8:	b7c1                	j	a8 <__hidden___udivsi3>
      ea:	40b005b3          	neg	a1,a1
      ee:	8286                	mv	t0,ra
      f0:	3f65                	jal	a8 <__hidden___udivsi3>
      f2:	40a00533          	neg	a0,a0
      f6:	8282                	jr	t0

000000f8 <__modsi3>:
      f8:	8286                	mv	t0,ra
      fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
      fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
     102:	375d                	jal	a8 <__hidden___udivsi3>
     104:	852e                	mv	a0,a1
     106:	8282                	jr	t0
     108:	40b005b3          	neg	a1,a1
     10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
     110:	40a00533          	neg	a0,a0
     114:	3f51                	jal	a8 <__hidden___udivsi3>
     116:	40b00533          	neg	a0,a1
     11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
{
     11e:	1131                	addi	sp,sp,-20
     120:	c426                	sw	s1,8(sp)
     122:	c806                	sw	ra,16(sp)
     124:	c622                	sw	s0,12(sp)
     126:	84ae                	mv	s1,a1
     128:	87aa                	mv	a5,a0
     12a:	85b2                	mv	a1,a2
	int overflow = 0;
     12c:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     12e:	cab5                	beqz	a3,1a2 <mini_pad+0x84>
	if(len > pad_to) {
     130:	0096d463          	bge	a3,s1,138 <mini_pad+0x1a>
     134:	84b6                	mv	s1,a3
		overflow = 1;
     136:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     138:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     13c:	00045363          	bgez	s0,142 <mini_pad+0x24>
     140:	4401                	li	s0,0
     142:	8622                	mv	a2,s0
     144:	853a                	mv	a0,a4
     146:	c23e                	sw	a5,4(sp)
     148:	c01a                	sw	t1,0(sp)
     14a:	683000ef          	jal	ra,fcc <memset>
     14e:	4302                	lw	t1,0(sp)
     150:	4792                	lw	a5,4(sp)
     152:	872a                	mv	a4,a0
     154:	008506b3          	add	a3,a0,s0
     158:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     15a:	40c485b3          	sub	a1,s1,a2
     15e:	04b04463          	bgtz	a1,1a6 <mini_pad+0x88>
     162:	0004d363          	bgez	s1,168 <mini_pad+0x4a>
     166:	4481                	li	s1,0
     168:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     16c:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     170:	02030463          	beqz	t1,198 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     174:	02c77263          	bgeu	a4,a2,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     178:	02a00793          	li	a5,42
     17c:	fef60fa3          	sb	a5,-1(a2)
     180:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     184:	00d77a63          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     188:	fef60f23          	sb	a5,-2(a2)
     18c:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     190:	00d77463          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     194:	fef60ea3          	sb	a5,-3(a2)
}
     198:	40c2                	lw	ra,16(sp)
     19a:	4432                	lw	s0,12(sp)
     19c:	44a2                	lw	s1,8(sp)
     19e:	0151                	addi	sp,sp,20
     1a0:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1a2:	86a6                	mv	a3,s1
     1a4:	bf51                	j	138 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1a6:	00c785b3          	add	a1,a5,a2
     1aa:	0005c503          	lbu	a0,0(a1)
     1ae:	00c685b3          	add	a1,a3,a2
     1b2:	0605                	addi	a2,a2,1
     1b4:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1b8:	b74d                	j	15a <mini_pad+0x3c>

000001ba <_puts>:
{
     1ba:	832a                	mv	t1,a0
     1bc:	852e                	mv	a0,a1
	if(!buf) return len;
     1be:	ce01                	beqz	a2,1d6 <_puts+0x1c>
	char * p0 = b->buffer;
     1c0:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1c4:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1c6:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1c8:	00a74863          	blt	a4,a0,1d8 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1cc:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1d0:	4248                	lw	a0,4(a2)
     1d2:	40550533          	sub	a0,a0,t0
}
     1d6:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1d8:	4614                	lw	a3,8(a2)
     1da:	fff68593          	addi	a1,a3,-1
     1de:	4214                	lw	a3,0(a2)
     1e0:	96ae                	add	a3,a3,a1
     1e2:	fed785e3          	beq	a5,a3,1cc <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1e6:	00178693          	addi	a3,a5,1
     1ea:	c254                	sw	a3,4(a2)
     1ec:	00e306b3          	add	a3,t1,a4
     1f0:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     1f4:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     1f6:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     1fa:	b7f1                	j	1c6 <_puts+0xc>

000001fc <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     1fc:	e0000737          	lui	a4,0xe0000
     200:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     204:	0f470693          	addi	a3,a4,244
     208:	0807f793          	andi	a5,a5,128
     20c:	fbf5                	bnez	a5,200 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     20e:	783027b7          	lui	a5,0x78302
     212:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     216:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     218:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     21a:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     21e:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     220:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     222:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     226:	0807f793          	andi	a5,a5,128
     22a:	ffe5                	bnez	a5,222 <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     22c:	00e557b3          	srl	a5,a0,a4
     230:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     234:	03000793          	li	a5,48
     238:	00d35463          	bge	t1,a3,240 <PrintHex+0x44>
     23c:	05700793          	li	a5,87
     240:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     242:	07a2                	slli	a5,a5,0x8
     244:	0857e793          	ori	a5,a5,133
     248:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     24c:	1771                	addi	a4,a4,-4
     24e:	fcb71ae3          	bne	a4,a1,222 <PrintHex+0x26>
}
     252:	8082                	ret

00000254 <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     254:	e000f7b7          	lui	a5,0xe000f
     258:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     25a:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     25e:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     260:	471c                	lw	a5,8(a4)
     262:	8f89                	sub	a5,a5,a0
     264:	fe07cee3          	bltz	a5,260 <DelaySysTick+0xc>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     268:	8082                	ret

0000026a <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     26a:	1101                	addi	sp,sp,-32
     26c:	ce06                	sw	ra,28(sp)
     26e:	cc22                	sw	s0,24(sp)
     270:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     272:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     274:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     276:	00055763          	bgez	a0,284 <mini_itoa.part.0+0x1a>
     27a:	e689                	bnez	a3,284 <mini_itoa.part.0+0x1a>
		negative = 1;
     27c:	4785                	li	a5,1
		value = -value;
     27e:	40a00333          	neg	t1,a0
		negative = 1;
     282:	c03e                	sw	a5,0(sp)
     284:	06100413          	li	s0,97
     288:	c219                	beqz	a2,28e <mini_itoa.part.0+0x24>
     28a:	04100413          	li	s0,65
	int	negative = 0;
     28e:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     290:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     292:	851a                	mv	a0,t1
     294:	c83a                	sw	a4,16(sp)
     296:	c21a                	sw	t1,4(sp)
     298:	c62e                	sw	a1,12(sp)
     29a:	c41a                	sw	t1,8(sp)
     29c:	3d25                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     29e:	47a5                	li	a5,9
     2a0:	4322                	lw	t1,8(sp)
     2a2:	45b2                	lw	a1,12(sp)
     2a4:	4742                	lw	a4,16(sp)
     2a6:	0ff57693          	andi	a3,a0,255
     2aa:	06a7e163          	bltu	a5,a0,30c <mini_itoa.part.0+0xa2>
     2ae:	03068693          	addi	a3,a3,48
     2b2:	0ff6f693          	andi	a3,a3,255
     2b6:	00148793          	addi	a5,s1,1
     2ba:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2be:	851a                	mv	a0,t1
     2c0:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2c2:	c63e                	sw	a5,12(sp)
		value /= radix;
     2c4:	c42e                	sw	a1,8(sp)
     2c6:	33cd                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
     2c8:	4692                	lw	a3,4(sp)
     2ca:	45a2                	lw	a1,8(sp)
     2cc:	47b2                	lw	a5,12(sp)
     2ce:	4742                	lw	a4,16(sp)
		value /= radix;
     2d0:	832a                	mv	t1,a0
	} while (value > 0);
     2d2:	02b6fb63          	bgeu	a3,a1,308 <mini_itoa.part.0+0x9e>
	if (negative)
     2d6:	4682                	lw	a3,0(sp)
     2d8:	c699                	beqz	a3,2e6 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2da:	02d00693          	li	a3,45
     2de:	00d78023          	sb	a3,0(a5) # e000f000 <_eusrstack+0xc000e800>
     2e2:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2e6:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2ea:	01f55693          	srli	a3,a0,0x1f
     2ee:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2f0:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2f4:	8685                	srai	a3,a3,0x1
     2f6:	4601                	li	a2,0
     2f8:	17fd                	addi	a5,a5,-1
     2fa:	00d64b63          	blt	a2,a3,310 <mini_itoa.part.0+0xa6>
}
     2fe:	40f2                	lw	ra,28(sp)
     300:	4462                	lw	s0,24(sp)
     302:	44d2                	lw	s1,20(sp)
     304:	6105                	addi	sp,sp,32
     306:	8082                	ret
	} while (value > 0);
     308:	84be                	mv	s1,a5
     30a:	b761                	j	292 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     30c:	96a2                	add	a3,a3,s0
     30e:	b755                	j	2b2 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     310:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     314:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     318:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     31c:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     31e:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     322:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     326:	bfc9                	j	2f8 <mini_itoa.part.0+0x8e>

00000328 <rand8>:
 */
uint8_t rand8(void) {
    uint8_t bit;
    uint32_t new_data;

    for(bit=0;bit<NOISE_BITS;bit++) {
     328:	c3c1a503          	lw	a0,-964(gp) # 20000038 <lfsr>
uint8_t rand8(void) {
     32c:	46a1                	li	a3,8
     32e:	c3c18713          	addi	a4,gp,-964 # 20000038 <lfsr>
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
                                (lfsr>>NOISE_POLY_TAP1) ^
     332:	01555613          	srli	a2,a0,0x15
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
     336:	01f55793          	srli	a5,a0,0x1f
     33a:	8fb1                	xor	a5,a5,a2
     33c:	8fa9                	xor	a5,a5,a0
                                (lfsr>>NOISE_POLY_TAP2) ^
     33e:	00155613          	srli	a2,a0,0x1
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
     342:	8fb1                	xor	a5,a5,a2
                                (lfsr>>NOISE_POLY_TAP3));
        lfsr = (lfsr<<1) | (new_data&1);
     344:	8b85                	andi	a5,a5,1
     346:	0506                	slli	a0,a0,0x1
     348:	8d5d                	or	a0,a0,a5
    for(bit=0;bit<NOISE_BITS;bit++) {
     34a:	fff68793          	addi	a5,a3,-1
     34e:	0ff7f693          	andi	a3,a5,255
     352:	f2e5                	bnez	a3,332 <rand8+0xa>
     354:	c308                	sw	a0,0(a4)
    }

    return lfsr&NOISE_MASK;
}
     356:	0ff57513          	andi	a0,a0,255
     35a:	8082                	ret

0000035c <SPI_send>:
    DMA1_Channel3->CFGR &= ~DMA_CFGR1_EN;  // Turn off channel
}

static void SPI_send(uint8_t data) {
    // Send byte
    SPI1->DATAR = data;
     35c:	400137b7          	lui	a5,0x40013
     360:	00a79623          	sh	a0,12(a5) # 4001300c <_eusrstack+0x2001280c>

    // Waiting for transmission complete
    while (!(SPI1->STATR & SPI_STATR_TXE)) ;
     364:	40013737          	lui	a4,0x40013
     368:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     36c:	8b89                	andi	a5,a5,2
     36e:	dfed                	beqz	a5,368 <SPI_send+0xc>
}
     370:	8082                	ret

00000372 <write_command_8>:

static void write_command_8(uint8_t dc_pin, uint8_t cmd) {
    funDigitalWrite(dc_pin, 0);     // Command Mode
     372:	00455713          	srli	a4,a0,0x4
     376:	400116b7          	lui	a3,0x40011
     37a:	80068693          	addi	a3,a3,-2048 # 40010800 <_eusrstack+0x20010000>
     37e:	00f57793          	andi	a5,a0,15
     382:	072a                	slli	a4,a4,0xa
     384:	9736                	add	a4,a4,a3
     386:	07c1                	addi	a5,a5,16
     388:	4685                	li	a3,1
     38a:	00f697b3          	sll	a5,a3,a5
     38e:	cb1c                	sw	a5,16(a4)
    SPI_send(cmd);
     390:	852e                	mv	a0,a1
     392:	b7e9                	j	35c <SPI_send>

00000394 <write_data_16>:
    funDigitalWrite(dc_pin, 1);     // Data Mode
    SPI_send(data);
}

static void write_data_16(uint8_t dc_pin, uint16_t data) {
    funDigitalWrite(dc_pin, 1);     // Data Mode
     394:	00455793          	srli	a5,a0,0x4
     398:	40011737          	lui	a4,0x40011
     39c:	80070713          	addi	a4,a4,-2048 # 40010800 <_eusrstack+0x20010000>
     3a0:	07aa                	slli	a5,a5,0xa
static void write_data_16(uint8_t dc_pin, uint16_t data) {
     3a2:	1151                	addi	sp,sp,-12
    funDigitalWrite(dc_pin, 1);     // Data Mode
     3a4:	97ba                	add	a5,a5,a4
     3a6:	893d                	andi	a0,a0,15
     3a8:	4705                	li	a4,1
static void write_data_16(uint8_t dc_pin, uint16_t data) {
     3aa:	c222                	sw	s0,4(sp)
     3ac:	c406                	sw	ra,8(sp)
    funDigitalWrite(dc_pin, 1);     // Data Mode
     3ae:	00a71533          	sll	a0,a4,a0
     3b2:	cb88                	sw	a0,16(a5)
    SPI_send(data >> 8);
     3b4:	0085d513          	srli	a0,a1,0x8
static void write_data_16(uint8_t dc_pin, uint16_t data) {
     3b8:	842e                	mv	s0,a1
    SPI_send(data >> 8);
     3ba:	374d                	jal	35c <SPI_send>
    SPI_send(data);
     3bc:	0ff47513          	andi	a0,s0,255
}
     3c0:	4412                	lw	s0,4(sp)
     3c2:	40a2                	lw	ra,8(sp)
     3c4:	0131                	addi	sp,sp,12
    SPI_send(data);
     3c6:	bf59                	j	35c <SPI_send>

000003c8 <tft_send_DMA>:
static uint16_t _bg_color                  = BLACK;  // Background color
static uint8_t  _buffer[ST7735_WIDTH << 1] = {0};    // DMA buffer, long enough to fill a row.
static uint8_t DC_PIN2;

void tft_send_DMA(const uint8_t* buffer, uint16_t size, uint16_t repeat) {
    SPI_send_DMA(DC_PIN2, buffer, size, repeat);
     3c8:	c901c703          	lbu	a4,-880(gp) # 2000008c <DC_PIN2>
    funDigitalWrite(dc_pin, 1);     // Data Mode
     3cc:	400116b7          	lui	a3,0x40011
     3d0:	80068693          	addi	a3,a3,-2048 # 40010800 <_eusrstack+0x20010000>
     3d4:	00475793          	srli	a5,a4,0x4
     3d8:	07aa                	slli	a5,a5,0xa
     3da:	97b6                	add	a5,a5,a3
     3dc:	8b3d                	andi	a4,a4,15
     3de:	4685                	li	a3,1
     3e0:	00e69733          	sll	a4,a3,a4
     3e4:	cb98                	sw	a4,16(a5)
    DMA1_Channel3->MADDR = (uint32_t)buffer;
     3e6:	400207b7          	lui	a5,0x40020
     3ea:	dfc8                	sw	a0,60(a5)
    DMA1_Channel3->CNTR  = size;
     3ec:	dbcc                	sw	a1,52(a5)
    DMA1_Channel3->CFGR |= DMA_CFGR1_EN;  // Turn on channel
     3ee:	5b98                	lw	a4,48(a5)
        DMA1->INTFCR = DMA1_FLAG_TC3;
     3f0:	400206b7          	lui	a3,0x40020
     3f4:	20000593          	li	a1,512
    DMA1_Channel3->CFGR |= DMA_CFGR1_EN;  // Turn on channel
     3f8:	00176713          	ori	a4,a4,1
     3fc:	db98                	sw	a4,48(a5)
    while (repeat--) {
     3fe:	67c1                	lui	a5,0x10
     400:	17fd                	addi	a5,a5,-1
     402:	167d                	addi	a2,a2,-1
     404:	0642                	slli	a2,a2,0x10
     406:	8241                	srli	a2,a2,0x10
     408:	00f61863          	bne	a2,a5,418 <tft_send_DMA+0x50>
    DMA1_Channel3->CFGR &= ~DMA_CFGR1_EN;  // Turn off channel
     40c:	40020737          	lui	a4,0x40020
     410:	5b1c                	lw	a5,48(a4)
     412:	9bf9                	andi	a5,a5,-2
     414:	db1c                	sw	a5,48(a4)
}
     416:	8082                	ret
        DMA1->INTFCR = DMA1_FLAG_TC3;
     418:	c2cc                	sw	a1,4(a3)
        while (!(DMA1->INTFR & DMA1_FLAG_TC3))
     41a:	4298                	lw	a4,0(a3)
     41c:	20077713          	andi	a4,a4,512
     420:	df6d                	beqz	a4,41a <tft_send_DMA+0x52>
     422:	b7c5                	j	402 <tft_send_DMA+0x3a>

00000424 <tft_set_window>:

void tft_set_background_color(uint16_t color) {
    _bg_color = color;
}

static void tft_set_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     424:	1121                	addi	sp,sp,-24
     426:	c626                	sw	s1,12(sp)
     428:	84b6                	mv	s1,a3
     42a:	c822                	sw	s0,16(sp)
    write_command_8(DC_PIN2, ST7735_CASET);
     42c:	c901c403          	lbu	s0,-880(gp) # 2000008c <DC_PIN2>
static void tft_set_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     430:	c42a                	sw	a0,8(sp)
     432:	c22e                	sw	a1,4(sp)
    write_command_8(DC_PIN2, ST7735_CASET);
     434:	8522                	mv	a0,s0
     436:	02a00593          	li	a1,42
static void tft_set_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     43a:	ca06                	sw	ra,20(sp)
     43c:	c032                	sw	a2,0(sp)
    write_command_8(DC_PIN2, ST7735_CASET);
     43e:	3f15                	jal	372 <write_command_8>
    write_data_16(DC_PIN2, x0);
     440:	4722                	lw	a4,8(sp)
     442:	8522                	mv	a0,s0
     444:	85ba                	mv	a1,a4
     446:	37b9                	jal	394 <write_data_16>
    write_data_16(DC_PIN2, x1);
     448:	4602                	lw	a2,0(sp)
     44a:	8522                	mv	a0,s0
     44c:	85b2                	mv	a1,a2
     44e:	3799                	jal	394 <write_data_16>
    write_command_8(DC_PIN2, ST7735_RASET);
     450:	8522                	mv	a0,s0
     452:	02b00593          	li	a1,43
     456:	3f31                	jal	372 <write_command_8>
    write_data_16(DC_PIN2, y0);
     458:	4792                	lw	a5,4(sp)
     45a:	8522                	mv	a0,s0
     45c:	85be                	mv	a1,a5
     45e:	3f1d                	jal	394 <write_data_16>
    write_data_16(DC_PIN2, y1);
     460:	85a6                	mv	a1,s1
     462:	8522                	mv	a0,s0
     464:	3f05                	jal	394 <write_data_16>
    write_command_8(DC_PIN2, ST7735_RAMWR);
     466:	8522                	mv	a0,s0
}
     468:	4442                	lw	s0,16(sp)
     46a:	40d2                	lw	ra,20(sp)
     46c:	44b2                	lw	s1,12(sp)
    write_command_8(DC_PIN2, ST7735_RAMWR);
     46e:	02c00593          	li	a1,44
}
     472:	0161                	addi	sp,sp,24
    write_command_8(DC_PIN2, ST7735_RAMWR);
     474:	bdfd                	j	372 <write_command_8>

00000476 <tft_draw_pixel>:
                            }

//! draw pixel
void tft_draw_pixel(
    uint16_t x, uint16_t y, uint16_t color
) {
     476:	1151                	addi	sp,sp,-12
    x += ST7735_X_OFFSET;
     478:	0505                	addi	a0,a0,1
    y += ST7735_Y_OFFSET;
     47a:	01a58693          	addi	a3,a1,26
) {
     47e:	c222                	sw	s0,4(sp)
    y += ST7735_Y_OFFSET;
     480:	06c2                	slli	a3,a3,0x10
) {
     482:	8432                	mv	s0,a2
    x += ST7735_X_OFFSET;
     484:	01051613          	slli	a2,a0,0x10
     488:	8241                	srli	a2,a2,0x10
    y += ST7735_Y_OFFSET;
     48a:	82c1                	srli	a3,a3,0x10
    START_WRITE();
    tft_set_window(x, y, x, y);
     48c:	85b6                	mv	a1,a3
     48e:	8532                	mv	a0,a2
) {
     490:	c406                	sw	ra,8(sp)
    tft_set_window(x, y, x, y);
     492:	3f49                	jal	424 <tft_set_window>

void tft_send_color(uint16_t color) {
    write_data_16(DC_PIN2, color);
     494:	85a2                	mv	a1,s0
    tft_send_color(color);
    END_WRITE();
}
     496:	4412                	lw	s0,4(sp)
     498:	40a2                	lw	ra,8(sp)
     49a:	c901c503          	lbu	a0,-880(gp) # 2000008c <DC_PIN2>
     49e:	0131                	addi	sp,sp,12
     4a0:	bdd5                	j	394 <write_data_16>

000004a2 <_draw_fast_vLine>:

//! private
static void _draw_fast_vLine(
    int16_t x, int16_t y, int16_t h, uint16_t color
) {
     4a2:	1151                	addi	sp,sp,-12
     4a4:	c222                	sw	s0,4(sp)
    x += ST7735_X_OFFSET;
    y += ST7735_Y_OFFSET;
     4a6:	05e9                	addi	a1,a1,26
) {
     4a8:	8432                	mv	s0,a2
    x += ST7735_X_OFFSET;
     4aa:	00150613          	addi	a2,a0,1
) {
     4ae:	c026                	sw	s1,0(sp)
    x += ST7735_X_OFFSET;
     4b0:	0642                	slli	a2,a2,0x10
    y += ST7735_Y_OFFSET;
     4b2:	05c2                	slli	a1,a1,0x10
) {
     4b4:	c406                	sw	ra,8(sp)
    x += ST7735_X_OFFSET;
     4b6:	8241                	srli	a2,a2,0x10
    y += ST7735_Y_OFFSET;
     4b8:	81c1                	srli	a1,a1,0x10

    uint16_t sz = 0;
    for (int16_t j = 0; j < h; j++) {
        _buffer[sz++] = color >> 8;
     4ba:	0086d513          	srli	a0,a3,0x8
     4be:	d1818713          	addi	a4,gp,-744 # 20000114 <_buffer>
    for (int16_t j = 0; j < h; j++) {
     4c2:	4781                	li	a5,0
     4c4:	0287c863          	blt	a5,s0,4f4 <_draw_fast_vLine+0x52>
        _buffer[sz++] = color;
    }

    START_WRITE();
    tft_set_window(x, y, x, y + h - 1);
     4c8:	fff40693          	addi	a3,s0,-1
     4cc:	96ae                	add	a3,a3,a1
     4ce:	06c2                	slli	a3,a3,0x10
     4d0:	82c1                	srli	a3,a3,0x10
     4d2:	8532                	mv	a0,a2
     4d4:	3f81                	jal	424 <tft_set_window>
    tft_send_DMA(_buffer, sz, 1);
     4d6:	85a2                	mv	a1,s0
     4d8:	00045363          	bgez	s0,4de <_draw_fast_vLine+0x3c>
     4dc:	4581                	li	a1,0
    END_WRITE();
}
     4de:	4412                	lw	s0,4(sp)
     4e0:	40a2                	lw	ra,8(sp)
    tft_send_DMA(_buffer, sz, 1);
     4e2:	0586                	slli	a1,a1,0x1
     4e4:	d1818513          	addi	a0,gp,-744 # 20000114 <_buffer>
}
     4e8:	4482                	lw	s1,0(sp)
    tft_send_DMA(_buffer, sz, 1);
     4ea:	05c2                	slli	a1,a1,0x10
     4ec:	81c1                	srli	a1,a1,0x10
     4ee:	4605                	li	a2,1
}
     4f0:	0131                	addi	sp,sp,12
    tft_send_DMA(_buffer, sz, 1);
     4f2:	bdd9                	j	3c8 <tft_send_DMA>
        _buffer[sz++] = color >> 8;
     4f4:	0785                	addi	a5,a5,1
     4f6:	07c2                	slli	a5,a5,0x10
     4f8:	00a70023          	sb	a0,0(a4) # 40020000 <_eusrstack+0x2001f800>
        _buffer[sz++] = color;
     4fc:	00d700a3          	sb	a3,1(a4)
    for (int16_t j = 0; j < h; j++) {
     500:	87c1                	srai	a5,a5,0x10
     502:	0709                	addi	a4,a4,2
     504:	b7c1                	j	4c4 <_draw_fast_vLine+0x22>

00000506 <_draw_fast_hLine>:


//! private
static void _draw_fast_hLine(
    int16_t x, int16_t y, int16_t w, uint16_t color
) {
     506:	1151                	addi	sp,sp,-12
    x += ST7735_X_OFFSET;
    y += ST7735_Y_OFFSET;
     508:	05e9                	addi	a1,a1,26
    x += ST7735_X_OFFSET;
     50a:	0505                	addi	a0,a0,1
) {
     50c:	c222                	sw	s0,4(sp)
     50e:	c026                	sw	s1,0(sp)
     510:	8432                	mv	s0,a2
    x += ST7735_X_OFFSET;
     512:	0542                	slli	a0,a0,0x10
) {
     514:	8636                	mv	a2,a3
    y += ST7735_Y_OFFSET;
     516:	01059693          	slli	a3,a1,0x10
) {
     51a:	c406                	sw	ra,8(sp)
    x += ST7735_X_OFFSET;
     51c:	8141                	srli	a0,a0,0x10
    y += ST7735_Y_OFFSET;
     51e:	82c1                	srli	a3,a3,0x10

    uint16_t sz = 0;
    for (int16_t j = 0; j < w; j++) {
        _buffer[sz++] = color >> 8;
     520:	00865593          	srli	a1,a2,0x8
     524:	d1818713          	addi	a4,gp,-744 # 20000114 <_buffer>
    for (int16_t j = 0; j < w; j++) {
     528:	4781                	li	a5,0
     52a:	0287c863          	blt	a5,s0,55a <_draw_fast_hLine+0x54>
        _buffer[sz++] = color;
    }

    START_WRITE();
    tft_set_window(x, y, x + w - 1, y);
     52e:	fff40613          	addi	a2,s0,-1
     532:	962a                	add	a2,a2,a0
     534:	0642                	slli	a2,a2,0x10
     536:	85b6                	mv	a1,a3
     538:	8241                	srli	a2,a2,0x10
     53a:	35ed                	jal	424 <tft_set_window>
    tft_send_DMA(_buffer, sz, 1);
     53c:	85a2                	mv	a1,s0
     53e:	00045363          	bgez	s0,544 <_draw_fast_hLine+0x3e>
     542:	4581                	li	a1,0
    END_WRITE();
}
     544:	4412                	lw	s0,4(sp)
     546:	40a2                	lw	ra,8(sp)
    tft_send_DMA(_buffer, sz, 1);
     548:	0586                	slli	a1,a1,0x1
     54a:	d1818513          	addi	a0,gp,-744 # 20000114 <_buffer>
}
     54e:	4482                	lw	s1,0(sp)
    tft_send_DMA(_buffer, sz, 1);
     550:	05c2                	slli	a1,a1,0x10
     552:	81c1                	srli	a1,a1,0x10
     554:	4605                	li	a2,1
}
     556:	0131                	addi	sp,sp,12
    tft_send_DMA(_buffer, sz, 1);
     558:	bd85                	j	3c8 <tft_send_DMA>
        _buffer[sz++] = color >> 8;
     55a:	0785                	addi	a5,a5,1
     55c:	07c2                	slli	a5,a5,0x10
     55e:	00b70023          	sb	a1,0(a4)
        _buffer[sz++] = color;
     562:	00c700a3          	sb	a2,1(a4)
    for (int16_t j = 0; j < w; j++) {
     566:	87c1                	srai	a5,a5,0x10
     568:	0709                	addi	a4,a4,2
     56a:	b7c1                	j	52a <_draw_fast_hLine+0x24>

0000056c <tft_draw_line>:

//! draw line
void tft_draw_line(
    int16_t x0, int16_t y0,
    int16_t x1, int16_t y1, uint16_t color, uint8_t width
) {
     56c:	82b2                	mv	t0,a2
     56e:	832a                	mv	t1,a0
     570:	8636                	mv	a2,a3
     572:	86ba                	mv	a3,a4
    if (x0 == x1) {
     574:	00551d63          	bne	a0,t0,58e <tft_draw_line+0x22>
        if (y0 > y1) _swap_int16(y0, y1);
     578:	00b65563          	bge	a2,a1,582 <tft_draw_line+0x16>
     57c:	87ae                	mv	a5,a1
     57e:	85b2                	mv	a1,a2
     580:	863e                	mv	a2,a5
        _draw_fast_vLine(x0, y0, y1 - y0 + 1, color);
     582:	0605                	addi	a2,a2,1
     584:	8e0d                	sub	a2,a2,a1
     586:	0642                	slli	a2,a2,0x10
     588:	8641                	srai	a2,a2,0x10
     58a:	851a                	mv	a0,t1
     58c:	bf19                	j	4a2 <_draw_fast_vLine>
    }
    else if (y0 == y1) {
     58e:	00c59e63          	bne	a1,a2,5aa <tft_draw_line+0x3e>
        if (x0 > x1) _swap_int16(x0, x1);
     592:	00a2d463          	bge	t0,a0,59a <tft_draw_line+0x2e>
     596:	8316                	mv	t1,t0
     598:	82aa                	mv	t0,a0
        _draw_fast_hLine(x0, y0, x1 - x0 + 1, color);
     59a:	00128613          	addi	a2,t0,1
     59e:	40660633          	sub	a2,a2,t1
     5a2:	0642                	slli	a2,a2,0x10
     5a4:	8641                	srai	a2,a2,0x10
     5a6:	851a                	mv	a0,t1
     5a8:	bfb9                	j	506 <_draw_fast_hLine>
) {
     5aa:	fc410113          	addi	sp,sp,-60
     5ae:	dc06                	sw	ra,56(sp)
     5b0:	da22                	sw	s0,52(sp)
     5b2:	d826                	sw	s1,48(sp)
     5b4:	853e                	mv	a0,a5
    uint8_t steep = _diff(y1, y0) > _diff(x1, x0);
     5b6:	40c587b3          	sub	a5,a1,a2
     5ba:	00c5d463          	bge	a1,a2,5c2 <tft_draw_line+0x56>
     5be:	40b607b3          	sub	a5,a2,a1
     5c2:	06535763          	bge	t1,t0,630 <tft_draw_line+0xc4>
     5c6:	40628733          	sub	a4,t0,t1
    if (steep) {
     5ca:	06f74d63          	blt	a4,a5,644 <tft_draw_line+0xd8>
     5ce:	83ae                	mv	t2,a1
     5d0:	859a                	mv	a1,t1
     5d2:	831e                	mv	t1,t2
    int16_t dx   = x1 - x0;
     5d4:	40b283b3          	sub	t2,t0,a1
     5d8:	01039413          	slli	s0,t2,0x10
     5dc:	8041                	srli	s0,s0,0x10
     5de:	c622                	sw	s0,12(sp)
     5e0:	03c2                	slli	t2,t2,0x10
    int16_t dy   = _diff(y1, y0);
     5e2:	01031413          	slli	s0,t1,0x10
     5e6:	01061493          	slli	s1,a2,0x10
    int16_t dx   = x1 - x0;
     5ea:	4103d393          	srai	t2,t2,0x10
    int16_t dy   = _diff(y1, y0);
     5ee:	8041                	srli	s0,s0,0x10
     5f0:	80c1                	srli	s1,s1,0x10
     5f2:	06c35563          	bge	t1,a2,65c <tft_draw_line+0xf0>
     5f6:	40848433          	sub	s0,s1,s0
     5fa:	0442                	slli	s0,s0,0x10
     5fc:	8441                	srai	s0,s0,0x10
     5fe:	c222                	sw	s0,4(sp)
    int16_t step = (y0 < y1) ? 1 : -1;
     600:	4405                	li	s0,1
     602:	c422                	sw	s0,8(sp)
    int16_t err  = dx >> 1;
     604:	4013d393          	srai	t2,t2,0x1
    int16_t step = (y0 < y1) ? 1 : -1;
     608:	00c34463          	blt	t1,a2,610 <tft_draw_line+0xa4>
     60c:	567d                	li	a2,-1
     60e:	c432                	sw	a2,8(sp)
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     610:	00155613          	srli	a2,a0,0x1
     614:	c032                	sw	a2,0(sp)
     616:	40c00633          	neg	a2,a2
     61a:	0642                	slli	a2,a2,0x10
     61c:	8641                	srai	a2,a2,0x10
     61e:	c832                	sw	a2,16(sp)
    for (; x0 <= x1; x0++) {
     620:	04b2d063          	bge	t0,a1,660 <tft_draw_line+0xf4>
    }
    else {
        _draw_line_bresenham(x0, y0, x1, y1, color, width);
    }
}
     624:	50e2                	lw	ra,56(sp)
     626:	5452                	lw	s0,52(sp)
     628:	54c2                	lw	s1,48(sp)
     62a:	03c10113          	addi	sp,sp,60
     62e:	8082                	ret
    uint8_t steep = _diff(y1, y0) > _diff(x1, x0);
     630:	40530733          	sub	a4,t1,t0
    if (steep) {
     634:	00f74863          	blt	a4,a5,644 <tft_draw_line+0xd8>
     638:	83b2                	mv	t2,a2
     63a:	8616                	mv	a2,t0
     63c:	829e                	mv	t0,t2
     63e:	83ae                	mv	t2,a1
     640:	859a                	mv	a1,t1
     642:	831e                	mv	t1,t2
    if (x0 > x1) {
     644:	00b65863          	bge	a2,a1,654 <tft_draw_line+0xe8>
     648:	83ae                	mv	t2,a1
     64a:	85b2                	mv	a1,a2
     64c:	861a                	mv	a2,t1
     64e:	8316                	mv	t1,t0
     650:	829e                	mv	t0,t2
     652:	b749                	j	5d4 <tft_draw_line+0x68>
     654:	8396                	mv	t2,t0
     656:	82b2                	mv	t0,a2
     658:	861e                	mv	a2,t2
     65a:	bfad                	j	5d4 <tft_draw_line+0x68>
    int16_t dy   = _diff(y1, y0);
     65c:	8c05                	sub	s0,s0,s1
     65e:	bf71                	j	5fa <tft_draw_line+0x8e>
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     660:	44c2                	lw	s1,16(sp)
     662:	01059413          	slli	s0,a1,0x10
     666:	8041                	srli	s0,s0,0x10
                tft_draw_pixel(y0 + w, x0, color); // Draw perpendicular pixels for width
     668:	01031613          	slli	a2,t1,0x10
     66c:	04c2                	slli	s1,s1,0x10
     66e:	8241                	srli	a2,a2,0x10
     670:	80c1                	srli	s1,s1,0x10
     672:	00960533          	add	a0,a2,s1
     676:	ca32                	sw	a2,20(sp)
     678:	0542                	slli	a0,a0,0x10
     67a:	d616                	sw	t0,44(sp)
     67c:	d41a                	sw	t1,40(sp)
     67e:	d21e                	sw	t2,36(sp)
     680:	d03e                	sw	a5,32(sp)
     682:	ce3a                	sw	a4,28(sp)
     684:	cc36                	sw	a3,24(sp)
     686:	8141                	srli	a0,a0,0x10
     688:	8636                	mv	a2,a3
            if (steep) {
     68a:	04f75d63          	bge	a4,a5,6e4 <tft_draw_line+0x178>
                tft_draw_pixel(y0 + w, x0, color); // Draw perpendicular pixels for width
     68e:	85a2                	mv	a1,s0
     690:	33dd                	jal	476 <tft_draw_pixel>
     692:	46e2                	lw	a3,24(sp)
     694:	4772                	lw	a4,28(sp)
     696:	5782                	lw	a5,32(sp)
     698:	5392                	lw	t2,36(sp)
     69a:	5322                	lw	t1,40(sp)
     69c:	52b2                	lw	t0,44(sp)
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     69e:	0485                	addi	s1,s1,1
     6a0:	4602                	lw	a2,0(sp)
     6a2:	04c2                	slli	s1,s1,0x10
     6a4:	84c1                	srai	s1,s1,0x10
     6a6:	fc9651e3          	bge	a2,s1,668 <tft_draw_line+0xfc>
        err -= dy;
     6aa:	4612                	lw	a2,4(sp)
     6ac:	40c383b3          	sub	t2,t2,a2
     6b0:	01039613          	slli	a2,t2,0x10
     6b4:	03c2                	slli	t2,t2,0x10
     6b6:	4103d393          	srai	t2,t2,0x10
     6ba:	8241                	srli	a2,a2,0x10
        if (err < 0) {
     6bc:	0003df63          	bgez	t2,6da <tft_draw_line+0x16e>
            err += dx;
     6c0:	45b2                	lw	a1,12(sp)
     6c2:	00c583b3          	add	t2,a1,a2
            y0 += step;
     6c6:	4652                	lw	a2,20(sp)
     6c8:	45a2                	lw	a1,8(sp)
            err += dx;
     6ca:	03c2                	slli	t2,t2,0x10
     6cc:	4103d393          	srai	t2,t2,0x10
            y0 += step;
     6d0:	00b60333          	add	t1,a2,a1
     6d4:	0342                	slli	t1,t1,0x10
     6d6:	41035313          	srai	t1,t1,0x10
    for (; x0 <= x1; x0++) {
     6da:	0405                	addi	s0,s0,1
     6dc:	01041593          	slli	a1,s0,0x10
     6e0:	85c1                	srai	a1,a1,0x10
     6e2:	bf3d                	j	620 <tft_draw_line+0xb4>
                tft_draw_pixel(x0, y0 + w, color); // Draw perpendicular pixels for width
     6e4:	85aa                	mv	a1,a0
     6e6:	8522                	mv	a0,s0
     6e8:	3379                	jal	476 <tft_draw_pixel>
     6ea:	52b2                	lw	t0,44(sp)
     6ec:	5322                	lw	t1,40(sp)
     6ee:	5392                	lw	t2,36(sp)
     6f0:	5782                	lw	a5,32(sp)
     6f2:	4772                	lw	a4,28(sp)
     6f4:	46e2                	lw	a3,24(sp)
     6f6:	b765                	j	69e <tft_draw_line+0x132>

000006f8 <tft_draw_rect>:

//! draw rectangle
void tft_draw_rect(
    uint16_t x, uint16_t y,
    uint16_t width, uint16_t height, uint16_t color
) {
     6f8:	fdc10113          	addi	sp,sp,-36
     6fc:	ce22                	sw	s0,28(sp)
    _draw_fast_hLine(x, y, width, color);
     6fe:	01059413          	slli	s0,a1,0x10
) {
     702:	cc26                	sw	s1,24(sp)
     704:	87b2                	mv	a5,a2
    _draw_fast_hLine(x, y, width, color);
     706:	8441                	srai	s0,s0,0x10
) {
     708:	84aa                	mv	s1,a0
    _draw_fast_hLine(x, y, width, color);
     70a:	0642                	slli	a2,a2,0x10
     70c:	0542                	slli	a0,a0,0x10
) {
     70e:	c036                	sw	a3,0(sp)
    _draw_fast_hLine(x, y, width, color);
     710:	8541                	srai	a0,a0,0x10
) {
     712:	86ba                	mv	a3,a4
    _draw_fast_hLine(x, y, width, color);
     714:	ca2e                	sw	a1,20(sp)
     716:	8641                	srai	a2,a2,0x10
     718:	85a2                	mv	a1,s0
) {
     71a:	d006                	sw	ra,32(sp)
    _draw_fast_hLine(x, y, width, color);
     71c:	c23a                	sw	a4,4(sp)
     71e:	c83e                	sw	a5,16(sp)
     720:	c632                	sw	a2,12(sp)
     722:	c42a                	sw	a0,8(sp)
     724:	33cd                	jal	506 <_draw_fast_hLine>
    _draw_fast_hLine(x, y + height - 1, width, color);
     726:	4782                	lw	a5,0(sp)
     728:	4352                	lw	t1,20(sp)
     72a:	4692                	lw	a3,4(sp)
     72c:	fff78593          	addi	a1,a5,-1 # ffff <lib_i2c.c.d894f163+0x5fdd>
     730:	4632                	lw	a2,12(sp)
     732:	4522                	lw	a0,8(sp)
     734:	959a                	add	a1,a1,t1
     736:	05c2                	slli	a1,a1,0x10
     738:	85c1                	srai	a1,a1,0x10
     73a:	33f1                	jal	506 <_draw_fast_hLine>
    _draw_fast_vLine(x, y, height, color);
     73c:	00011603          	lh	a2,0(sp)
     740:	4692                	lw	a3,4(sp)
     742:	4522                	lw	a0,8(sp)
     744:	85a2                	mv	a1,s0
     746:	c032                	sw	a2,0(sp)
     748:	3ba9                	jal	4a2 <_draw_fast_vLine>
    _draw_fast_vLine(x + width - 1, y, height, color);
     74a:	47c2                	lw	a5,16(sp)
     74c:	85a2                	mv	a1,s0
}
     74e:	4472                	lw	s0,28(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     750:	fff78513          	addi	a0,a5,-1
     754:	4692                	lw	a3,4(sp)
     756:	4602                	lw	a2,0(sp)
}
     758:	5082                	lw	ra,32(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     75a:	9526                	add	a0,a0,s1
}
     75c:	44e2                	lw	s1,24(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     75e:	0542                	slli	a0,a0,0x10
     760:	8541                	srai	a0,a0,0x10
}
     762:	02410113          	addi	sp,sp,36
    _draw_fast_vLine(x + width - 1, y, height, color);
     766:	bb35                	j	4a2 <_draw_fast_vLine>

00000768 <tft_print>:
    tft_set_window(_cursor_x, _cursor_y, _cursor_x + width - 1, _cursor_y + height - 1);
    tft_send_DMA(_frame_buffer, sz, 1);
    // END_WRITE();
}

void tft_print(const char* str) {
     768:	1131                	addi	sp,sp,-20
     76a:	c622                	sw	s0,12(sp)
     76c:	c806                	sw	ra,16(sp)
     76e:	c426                	sw	s1,8(sp)
     770:	842a                	mv	s0,a0
    uint8_t font_width = 5; // Assuming a fixed width for the font

    while (*str) {
     772:	00044783          	lbu	a5,0(s0)
     776:	e791                	bnez	a5,782 <tft_print+0x1a>
        tft_print_char(*str++, 7, font_width, 0xFFFF, 0x0000); // 7x5 font size
        _cursor_x += font_width + 1;
    }
}
     778:	40c2                	lw	ra,16(sp)
     77a:	4432                	lw	s0,12(sp)
     77c:	44a2                	lw	s1,8(sp)
     77e:	0151                	addi	sp,sp,20
     780:	8082                	ret
    const unsigned char* start = &font[c + (c << 2)];
     782:	00279713          	slli	a4,a5,0x2
     786:	97ba                	add	a5,a5,a4
        tft_print_char(*str++, 7, font_width, 0xFFFF, 0x0000); // 7x5 font size
     788:	0405                	addi	s0,s0,1
    const unsigned char* start = &font[c + (c << 2)];
     78a:	c03e                	sw	a5,0(sp)
     78c:	4301                	li	t1,0
    uint16_t sz = 0;
     78e:	4681                	li	a3,0
     790:	e5818513          	addi	a0,gp,-424 # 20000254 <_frame_buffer>
                _frame_buffer[sz++] = color >> 8;
     794:	53fd                	li	t2,-1
     796:	4785                	li	a5,1
     798:	006797b3          	sll	a5,a5,t1
     79c:	c23e                	sw	a5,4(sp)
            if ((*(start + j)) & (0x01 << i)) {
     79e:	8636                	mv	a2,a3
     7a0:	4581                	li	a1,0
     7a2:	4282                	lw	t0,0(sp)
     7a4:	6089                	lui	ra,0x2
     7a6:	6c008093          	addi	ra,ra,1728 # 26c0 <font>
     7aa:	92ae                	add	t0,t0,a1
     7ac:	9286                	add	t0,t0,ra
     7ae:	0002c283          	lbu	t0,0(t0)
     7b2:	4092                	lw	ra,4(sp)
     7b4:	00160793          	addi	a5,a2,1
                _frame_buffer[sz++] = color >> 8;
     7b8:	8732                	mv	a4,a2
                _frame_buffer[sz++] = color;
     7ba:	0609                	addi	a2,a2,2
     7bc:	07c2                	slli	a5,a5,0x10
     7be:	0642                	slli	a2,a2,0x10
            if ((*(start + j)) & (0x01 << i)) {
     7c0:	0012f2b3          	and	t0,t0,ra
     7c4:	83c1                	srli	a5,a5,0x10
                _frame_buffer[sz++] = color;
     7c6:	8241                	srli	a2,a2,0x10
                _frame_buffer[sz++] = color >> 8;
     7c8:	972a                	add	a4,a4,a0
            if ((*(start + j)) & (0x01 << i)) {
     7ca:	06028163          	beqz	t0,82c <tft_print+0xc4>
                _frame_buffer[sz++] = color >> 8;
     7ce:	00770023          	sb	t2,0(a4)
                _frame_buffer[sz++] = color;
     7d2:	97aa                	add	a5,a5,a0
     7d4:	00778023          	sb	t2,0(a5)
        for (uint8_t j = 0; j < width; j++) {
     7d8:	0585                	addi	a1,a1,1
     7da:	4795                	li	a5,5
     7dc:	fcf593e3          	bne	a1,a5,7a2 <tft_print+0x3a>
                _frame_buffer[sz++] = color;
     7e0:	06a9                	addi	a3,a3,10
     7e2:	06c2                	slli	a3,a3,0x10
     7e4:	82c1                	srli	a3,a3,0x10
    for (uint8_t i = 0; i < height; i++) {
     7e6:	04600793          	li	a5,70
     7ea:	0305                	addi	t1,t1,1
     7ec:	faf695e3          	bne	a3,a5,796 <tft_print+0x2e>
    tft_set_window(_cursor_x, _cursor_y, _cursor_x + width - 1, _cursor_y + height - 1);
     7f0:	ca018713          	addi	a4,gp,-864 # 2000009c <_cursor_x>
     7f4:	00075783          	lhu	a5,0(a4)
     7f8:	ca21d583          	lhu	a1,-862(gp) # 2000009e <_cursor_y>
     7fc:	00478613          	addi	a2,a5,4
     800:	00658693          	addi	a3,a1,6
     804:	06c2                	slli	a3,a3,0x10
     806:	0642                	slli	a2,a2,0x10
     808:	853e                	mv	a0,a5
     80a:	82c1                	srli	a3,a3,0x10
     80c:	8241                	srli	a2,a2,0x10
     80e:	c03e                	sw	a5,0(sp)
     810:	3911                	jal	424 <tft_set_window>
    tft_send_DMA(_frame_buffer, sz, 1);
     812:	4605                	li	a2,1
     814:	04600593          	li	a1,70
     818:	e5818513          	addi	a0,gp,-424 # 20000254 <_frame_buffer>
     81c:	3675                	jal	3c8 <tft_send_DMA>
        _cursor_x += font_width + 1;
     81e:	4782                	lw	a5,0(sp)
     820:	ca018713          	addi	a4,gp,-864 # 2000009c <_cursor_x>
     824:	0799                	addi	a5,a5,6
     826:	00f71023          	sh	a5,0(a4)
     82a:	b7a1                	j	772 <tft_print+0xa>
                _frame_buffer[sz++] = bg_color >> 8;
     82c:	00070023          	sb	zero,0(a4)
                _frame_buffer[sz++] = bg_color;
     830:	97aa                	add	a5,a5,a0
     832:	00078023          	sb	zero,0(a5)
     836:	b74d                	j	7d8 <tft_print+0x70>

00000838 <tft_fill_rect>:

void tft_fill_rect(
    uint16_t x, uint16_t y,
    uint16_t width, uint16_t height, uint16_t color
) {
    x += ST7735_X_OFFSET;
     838:	0505                	addi	a0,a0,1
    y += ST7735_Y_OFFSET;
     83a:	05e9                	addi	a1,a1,26
) {
     83c:	1151                	addi	sp,sp,-12
    x += ST7735_X_OFFSET;
     83e:	0542                	slli	a0,a0,0x10
    y += ST7735_Y_OFFSET;
     840:	05c2                	slli	a1,a1,0x10
) {
     842:	c222                	sw	s0,4(sp)
     844:	c026                	sw	s1,0(sp)
     846:	c406                	sw	ra,8(sp)
     848:	84b6                	mv	s1,a3
     84a:	8432                	mv	s0,a2
    x += ST7735_X_OFFSET;
     84c:	8141                	srli	a0,a0,0x10
    y += ST7735_Y_OFFSET;
     84e:	81c1                	srli	a1,a1,0x10

    uint16_t sz = 0;
    for (uint16_t x = 0; x < width; x++) {
        _buffer[sz++] = color >> 8;
     850:	00875293          	srli	t0,a4,0x8
     854:	d1818313          	addi	t1,gp,-744 # 20000114 <_buffer>
    for (uint16_t x = 0; x < width; x++) {
     858:	4681                	li	a3,0
        _buffer[sz++] = color >> 8;
     85a:	8636                	mv	a2,a3
    for (uint16_t x = 0; x < width; x++) {
     85c:	0685                	addi	a3,a3,1
     85e:	06c2                	slli	a3,a3,0x10
        _buffer[sz++] = color >> 8;
     860:	00530023          	sb	t0,0(t1)
        _buffer[sz++] = color;
     864:	00e300a3          	sb	a4,1(t1)
    for (uint16_t x = 0; x < width; x++) {
     868:	82c1                	srli	a3,a3,0x10
     86a:	0309                	addi	t1,t1,2
     86c:	fed417e3          	bne	s0,a3,85a <tft_fill_rect+0x22>
    }

    START_WRITE();
    tft_set_window(x, y, x + width - 1, y + height - 1);
     870:	fff48693          	addi	a3,s1,-1
     874:	96ae                	add	a3,a3,a1
     876:	962a                	add	a2,a2,a0
     878:	06c2                	slli	a3,a3,0x10
     87a:	0642                	slli	a2,a2,0x10
     87c:	8241                	srli	a2,a2,0x10
     87e:	82c1                	srli	a3,a3,0x10
     880:	3655                	jal	424 <tft_set_window>
        _buffer[sz++] = color;
     882:	00141593          	slli	a1,s0,0x1
    tft_send_DMA(_buffer, sz, height);
    END_WRITE();
}
     886:	4412                	lw	s0,4(sp)
     888:	40a2                	lw	ra,8(sp)
    tft_send_DMA(_buffer, sz, height);
     88a:	8626                	mv	a2,s1
}
     88c:	4482                	lw	s1,0(sp)
    tft_send_DMA(_buffer, sz, height);
     88e:	05c2                	slli	a1,a1,0x10
     890:	81c1                	srli	a1,a1,0x10
     892:	d1818513          	addi	a0,gp,-744 # 20000114 <_buffer>
}
     896:	0131                	addi	sp,sp,12
    tft_send_DMA(_buffer, sz, height);
     898:	be05                	j	3c8 <tft_send_DMA>

0000089a <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     89a:	400057b7          	lui	a5,0x40005
     89e:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     8a2:	40078793          	addi	a5,a5,1024
     8a6:	10077713          	andi	a4,a4,256
     8aa:	cf09                	beqz	a4,8c4 <i2c_error+0x2a>
     8ac:	0147d703          	lhu	a4,20(a5)
     8b0:	4505                	li	a0,1
     8b2:	0742                	slli	a4,a4,0x10
     8b4:	8341                	srli	a4,a4,0x10
     8b6:	eff77713          	andi	a4,a4,-257
     8ba:	0742                	slli	a4,a4,0x10
     8bc:	8341                	srli	a4,a4,0x10
     8be:	00e79a23          	sh	a4,20(a5)
     8c2:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     8c4:	0147d703          	lhu	a4,20(a5)
     8c8:	40077713          	andi	a4,a4,1024
     8cc:	cf09                	beqz	a4,8e6 <i2c_error+0x4c>
     8ce:	0147d703          	lhu	a4,20(a5)
     8d2:	4509                	li	a0,2
     8d4:	0742                	slli	a4,a4,0x10
     8d6:	8341                	srli	a4,a4,0x10
     8d8:	bff77713          	andi	a4,a4,-1025
     8dc:	0742                	slli	a4,a4,0x10
     8de:	8341                	srli	a4,a4,0x10
     8e0:	00e79a23          	sh	a4,20(a5)
     8e4:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     8e6:	0147d703          	lhu	a4,20(a5)
     8ea:	20077713          	andi	a4,a4,512
     8ee:	cf09                	beqz	a4,908 <i2c_error+0x6e>
     8f0:	0147d703          	lhu	a4,20(a5)
     8f4:	450d                	li	a0,3
     8f6:	0742                	slli	a4,a4,0x10
     8f8:	8341                	srli	a4,a4,0x10
     8fa:	dff77713          	andi	a4,a4,-513
     8fe:	0742                	slli	a4,a4,0x10
     900:	8341                	srli	a4,a4,0x10
     902:	00e79a23          	sh	a4,20(a5)
     906:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     908:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     90c:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     90e:	832d                	srli	a4,a4,0xb
     910:	8b05                	andi	a4,a4,1
     912:	cf01                	beqz	a4,92a <i2c_error+0x90>
     914:	0147d703          	lhu	a4,20(a5)
     918:	76fd                	lui	a3,0xfffff
     91a:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     91e:	0742                	slli	a4,a4,0x10
     920:	8341                	srli	a4,a4,0x10
     922:	8f75                	and	a4,a4,a3
     924:	00e79a23          	sh	a4,20(a5)
     928:	4511                	li	a0,4
}
     92a:	8082                	ret

0000092c <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     92c:	415c                	lw	a5,4(a0)
     92e:	e7b1                	bnez	a5,97a <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     930:	00855783          	lhu	a5,8(a0)
     934:	40005737          	lui	a4,0x40005
     938:	0786                	slli	a5,a5,0x1
     93a:	0fe7f793          	andi	a5,a5,254
     93e:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     942:	6789                	lui	a5,0x2
     944:	71078793          	addi	a5,a5,1808 # 2710 <font+0x50>
	return (status & status_mask) == status_mask; 
     948:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     94c:	caf1a223          	sw	a5,-860(gp) # 200000a0 <_i2c_timeout>
     950:	4501                	li	a0,0
     952:	ca418693          	addi	a3,gp,-860 # 200000a0 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     956:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     95a:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.d894f163+0x66060>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     95e:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     962:	01071593          	slli	a1,a4,0x10
     966:	41835703          	lhu	a4,1048(t1)
     96a:	81c1                	srli	a1,a1,0x10
     96c:	0742                	slli	a4,a4,0x10
     96e:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     970:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     972:	00c71663          	bne	a4,a2,97e <i2c_send_addr_write+0x52>
     976:	c111                	beqz	a0,97a <i2c_send_addr_write+0x4e>
     978:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     97a:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     97c:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     97e:	17fd                	addi	a5,a5,-1
     980:	4505                	li	a0,1
     982:	fff1                	bnez	a5,95e <i2c_send_addr_write+0x32>
{
     984:	1151                	addi	sp,sp,-12
     986:	c406                	sw	ra,8(sp)
     988:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     98c:	3739                	jal	89a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     98e:	e111                	bnez	a0,992 <i2c_send_addr_write+0x66>
     990:	4515                	li	a0,5
}
     992:	40a2                	lw	ra,8(sp)
     994:	0131                	addi	sp,sp,12
     996:	8082                	ret

00000998 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     998:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     99a:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     99c:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     99e:	71078793          	addi	a5,a5,1808 # 2710 <font+0x50>
     9a2:	caf1a223          	sw	a5,-860(gp) # 200000a0 <_i2c_timeout>
{
     9a6:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     9a8:	c002                	sw	zero,0(sp)
     9aa:	c202                	sw	zero,4(sp)
     9ac:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     9b0:	4601                	li	a2,0
     9b2:	ca418713          	addi	a4,gp,-860 # 200000a0 <_i2c_timeout>
     9b6:	400055b7          	lui	a1,0x40005
     9ba:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     9be:	8a89                	andi	a3,a3,2
     9c0:	e689                	bnez	a3,9ca <i2c_ping+0x32>
     9c2:	c211                	beqz	a2,9c6 <i2c_ping+0x2e>
     9c4:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
     9c6:	4501                	li	a0,0
     9c8:	a809                	j	9da <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     9ca:	17fd                	addi	a5,a5,-1
     9cc:	4605                	li	a2,1
     9ce:	f7f5                	bnez	a5,9ba <i2c_ping+0x22>
     9d0:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
     9d4:	35d9                	jal	89a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     9d6:	e111                	bnez	a0,9da <i2c_ping+0x42>
     9d8:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     9da:	40005737          	lui	a4,0x40005
     9de:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     9e2:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     9e6:	07c2                	slli	a5,a5,0x10
     9e8:	83c1                	srli	a5,a5,0x10
     9ea:	1007e793          	ori	a5,a5,256
     9ee:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     9f2:	00030737          	lui	a4,0x30
     9f6:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     9f8:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     9fc:	01079693          	slli	a3,a5,0x10
     a00:	4185d783          	lhu	a5,1048(a1)
     a04:	82c1                	srli	a3,a3,0x10
     a06:	07c2                	slli	a5,a5,0x10
     a08:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     a0a:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     a0c:	fee796e3          	bne	a5,a4,9f8 <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     a10:	e119                	bnez	a0,a16 <i2c_ping+0x7e>
     a12:	850a                	mv	a0,sp
     a14:	3f21                	jal	92c <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     a16:	40005737          	lui	a4,0x40005
     a1a:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     a1e:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     a20:	07c2                	slli	a5,a5,0x10
     a22:	83c1                	srli	a5,a5,0x10
     a24:	2007e793          	ori	a5,a5,512
     a28:	40f71023          	sh	a5,1024(a4)
}
     a2c:	0161                	addi	sp,sp,24
     a2e:	8082                	ret

00000a30 <i2c_write_raw.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     a30:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     a32:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     a34:	71078793          	addi	a5,a5,1808 # 2710 <font+0x50>
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     a38:	c626                	sw	s1,12(sp)
     a3a:	c22e                	sw	a1,4(sp)
     a3c:	ca06                	sw	ra,20(sp)
     a3e:	c822                	sw	s0,16(sp)
     a40:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     a42:	caf1a223          	sw	a5,-860(gp) # 200000a0 <_i2c_timeout>
     a46:	4601                	li	a2,0
     a48:	ca418493          	addi	s1,gp,-860 # 200000a0 <_i2c_timeout>
     a4c:	400055b7          	lui	a1,0x40005
     a50:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     a54:	8a89                	andi	a3,a3,2
     a56:	e6bd                	bnez	a3,ac4 <i2c_write_raw.constprop.0+0x94>
     a58:	c211                	beqz	a2,a5c <i2c_write_raw.constprop.0+0x2c>
     a5a:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     a5c:	400056b7          	lui	a3,0x40005
     a60:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     a64:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     a68:	07c2                	slli	a5,a5,0x10
     a6a:	83c1                	srli	a5,a5,0x10
     a6c:	1007e793          	ori	a5,a5,256
     a70:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     a74:	000306b7          	lui	a3,0x30
     a78:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     a7a:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     a7e:	01079613          	slli	a2,a5,0x10
     a82:	4185d783          	lhu	a5,1048(a1)
     a86:	8241                	srli	a2,a2,0x10
     a88:	07c2                	slli	a5,a5,0x10
     a8a:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     a8c:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     a8e:	fed796e3          	bne	a5,a3,a7a <i2c_write_raw.constprop.0+0x4a>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     a92:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
     a96:	3d59                	jal	92c <i2c_send_addr_write>
     a98:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     a9a:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
     a9c:	e91d                	bnez	a0,ad2 <i2c_write_raw.constprop.0+0xa2>
		while(cbyte < len)
     a9e:	4792                	lw	a5,4(sp)
     aa0:	02f67963          	bgeu	a2,a5,ad2 <i2c_write_raw.constprop.0+0xa2>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     aa4:	6689                	lui	a3,0x2
     aa6:	71068693          	addi	a3,a3,1808 # 2710 <font+0x50>
     aaa:	c094                	sw	a3,0(s1)
     aac:	4501                	li	a0,0
     aae:	40005337          	lui	t1,0x40005
     ab2:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     ab6:	0805f593          	andi	a1,a1,128
     aba:	c5b9                	beqz	a1,b08 <i2c_write_raw.constprop.0+0xd8>
     abc:	c111                	beqz	a0,ac0 <i2c_write_raw.constprop.0+0x90>
     abe:	c094                	sw	a3,0(s1)
     ac0:	4501                	li	a0,0
     ac2:	a8a9                	j	b1c <i2c_write_raw.constprop.0+0xec>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     ac4:	17fd                	addi	a5,a5,-1
     ac6:	4605                	li	a2,1
     ac8:	f7c1                	bnez	a5,a50 <i2c_write_raw.constprop.0+0x20>
	i2c_err_t i2c_err = i2c_error();
     aca:	3bc1                	jal	89a <i2c_error>
     acc:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     ace:	e111                	bnez	a0,ad2 <i2c_write_raw.constprop.0+0xa2>
     ad0:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     ad2:	6689                	lui	a3,0x2
     ad4:	71068693          	addi	a3,a3,1808 # 2710 <font+0x50>
	return (status & status_mask) == status_mask; 
     ad8:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     adc:	c094                	sw	a3,0(s1)
     ade:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     ae0:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     ae4:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.d894f163+0x66062>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     ae8:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     aec:	01061513          	slli	a0,a2,0x10
     af0:	4182d603          	lhu	a2,1048(t0)
     af4:	8141                	srli	a0,a0,0x10
     af6:	0642                	slli	a2,a2,0x10
     af8:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     afa:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     afc:	04b61363          	bne	a2,a1,b42 <i2c_write_raw.constprop.0+0x112>
     b00:	04030a63          	beqz	t1,b54 <i2c_write_raw.constprop.0+0x124>
     b04:	c094                	sw	a3,0(s1)
     b06:	a0b9                	j	b54 <i2c_write_raw.constprop.0+0x124>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     b08:	16fd                	addi	a3,a3,-1
     b0a:	4505                	li	a0,1
     b0c:	f2dd                	bnez	a3,ab2 <i2c_write_raw.constprop.0+0x82>
     b0e:	c432                	sw	a2,8(sp)
     b10:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     b14:	3359                	jal	89a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     b16:	4622                	lw	a2,8(sp)
     b18:	e111                	bnez	a0,b1c <i2c_write_raw.constprop.0+0xec>
     b1a:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     b1c:	4782                	lw	a5,0(sp)
     b1e:	00c786b3          	add	a3,a5,a2
     b22:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     b26:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     b28:	400056b7          	lui	a3,0x40005
     b2c:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     b30:	0ff67613          	andi	a2,a2,255
     b34:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     b36:	e501                	bnez	a0,b3e <i2c_write_raw.constprop.0+0x10e>
     b38:	338d                	jal	89a <i2c_error>
     b3a:	4622                	lw	a2,8(sp)
     b3c:	d12d                	beqz	a0,a9e <i2c_write_raw.constprop.0+0x6e>
     b3e:	842a                	mv	s0,a0
     b40:	bf49                	j	ad2 <i2c_write_raw.constprop.0+0xa2>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     b42:	16fd                	addi	a3,a3,-1
     b44:	4305                	li	t1,1
     b46:	f2cd                	bnez	a3,ae8 <i2c_write_raw.constprop.0+0xb8>
     b48:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     b4c:	33b9                	jal	89a <i2c_error>
     b4e:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     b50:	e111                	bnez	a0,b54 <i2c_write_raw.constprop.0+0x124>
     b52:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     b54:	400056b7          	lui	a3,0x40005
     b58:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     b5c:	40d2                	lw	ra,20(sp)
     b5e:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     b60:	0742                	slli	a4,a4,0x10
}
     b62:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     b64:	8341                	srli	a4,a4,0x10
     b66:	20076713          	ori	a4,a4,512
     b6a:	40e69023          	sh	a4,1024(a3)
}
     b6e:	44b2                	lw	s1,12(sp)
     b70:	0161                	addi	sp,sp,24
     b72:	8082                	ret

00000b74 <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     b74:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     b76:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     b7a:	4589                	li	a1,2
     b7c:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     b7e:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     b80:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     b84:	3575                	jal	a30 <i2c_write_raw.constprop.0>
}
     b86:	40b2                	lw	ra,12(sp)
     b88:	0ff57513          	andi	a0,a0,255
     b8c:	0141                	addi	sp,sp,16
     b8e:	8082                	ret

00000b90 <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     b90:	e00007b7          	lui	a5,0xe0000
     b94:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
}
     b98:	8082                	ret

00000b9a <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     b9a:	e0000737          	lui	a4,0xe0000
     b9e:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     ba2:	1111                	addi	sp,sp,-28
     ba4:	cc06                	sw	ra,24(sp)
     ba6:	ca22                	sw	s0,20(sp)
     ba8:	c826                	sw	s1,16(sp)
     baa:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     bac:	0c07f793          	andi	a5,a5,192
     bb0:	0c000693          	li	a3,192
     bb4:	0cd78863          	beq	a5,a3,c84 <_write.constprop.0+0xea>
	char buffer[4] = { 0 };
     bb8:	c602                	sw	zero,12(sp)
     bba:	842e                	mv	s0,a1
	if( size == 0 )
     bbc:	e5f1                	bnez	a1,c88 <_write.constprop.0+0xee>
		lastdmd = (*DMDATA0);
     bbe:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     bc2:	c789                	beqz	a5,bcc <_write.constprop.0+0x32>
     bc4:	0807f793          	andi	a5,a5,128
     bc8:	e391                	bnez	a5,bcc <_write.constprop.0+0x32>
     bca:	37d9                	jal	b90 <internal_handle_input.constprop.0>
}
     bcc:	40e2                	lw	ra,24(sp)
     bce:	8522                	mv	a0,s0
     bd0:	4452                	lw	s0,20(sp)
     bd2:	44c2                	lw	s1,16(sp)
     bd4:	0171                	addi	sp,sp,28
     bd6:	8082                	ret
		int tosend = size - place;
     bd8:	409405b3          	sub	a1,s0,s1
     bdc:	469d                	li	a3,7
     bde:	872e                	mv	a4,a1
     be0:	00b6d363          	bge	a3,a1,be6 <_write.constprop.0+0x4c>
     be4:	471d                	li	a4,7
     be6:	001006b7          	lui	a3,0x100
     bea:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     bec:	e0000537          	lui	a0,0xe0000
     bf0:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     bf4:	0f450313          	addi	t1,a0,244
     bf8:	08067293          	andi	t0,a2,128
     bfc:	06029c63          	bnez	t0,c74 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     c00:	c611                	beqz	a2,c0c <_write.constprop.0+0x72>
     c02:	c43a                	sw	a4,8(sp)
     c04:	c22e                	sw	a1,4(sp)
     c06:	3769                	jal	b90 <internal_handle_input.constprop.0>
     c08:	4722                	lw	a4,8(sp)
     c0a:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     c0c:	4689                	li	a3,2
     c0e:	4601                	li	a2,0
     c10:	00b6d463          	bge	a3,a1,c18 <_write.constprop.0+0x7e>
     c14:	ffd70613          	addi	a2,a4,-3
     c18:	4782                	lw	a5,0(sp)
     c1a:	00348593          	addi	a1,s1,3
     c1e:	0068                	addi	a0,sp,12
     c20:	95be                	add	a1,a1,a5
     c22:	c23a                	sw	a4,4(sp)
     c24:	26f9                	jal	ff2 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     c26:	4632                	lw	a2,12(sp)
     c28:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     c2a:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     c2c:	e00006b7          	lui	a3,0xe0000
     c30:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     c34:	458d                	li	a1,3
     c36:	00978633          	add	a2,a5,s1
		t = 0;
     c3a:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     c3c:	00064303          	lbu	t1,0(a2)
     c40:	0685                	addi	a3,a3,1
     c42:	007c                	addi	a5,sp,12
     c44:	00d78533          	add	a0,a5,a3
     c48:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     c4c:	00d70563          	beq	a4,a3,c56 <_write.constprop.0+0xbc>
     c50:	0605                	addi	a2,a2,1
     c52:	feb695e3          	bne	a3,a1,c3c <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     c56:	00470693          	addi	a3,a4,4
     c5a:	f806e693          	ori	a3,a3,-128
     c5e:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     c62:	4632                	lw	a2,12(sp)
     c64:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     c68:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     c6a:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     c6e:	f684c5e3          	blt	s1,s0,bd8 <_write.constprop.0+0x3e>
     c72:	bfa9                	j	bcc <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     c74:	16fd                	addi	a3,a3,-1
     c76:	fead                	bnez	a3,bf0 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     c78:	00032783          	lw	a5,0(t1)
     c7c:	0c07e793          	ori	a5,a5,192
     c80:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c84:	4401                	li	s0,0
     c86:	b799                	j	bcc <_write.constprop.0+0x32>
	if( size == 0 )
     c88:	4481                	li	s1,0
     c8a:	b7d5                	j	c6e <_write.constprop.0+0xd4>

00000c8c <__puts_uart>:
{
     c8c:	1151                	addi	sp,sp,-12
     c8e:	c222                	sw	s0,4(sp)
     c90:	c406                	sw	ra,8(sp)
     c92:	842e                	mv	s0,a1
	_write( 0, s, len );
     c94:	3719                	jal	b9a <_write.constprop.0>
}
     c96:	40a2                	lw	ra,8(sp)
     c98:	8522                	mv	a0,s0
     c9a:	4412                	lw	s0,4(sp)
     c9c:	0131                	addi	sp,sp,12
     c9e:	8082                	ret

00000ca0 <handle_reset>:
	asm volatile( "\n\
     ca0:	1ffff197          	auipc	gp,0x1ffff
     ca4:	75c18193          	addi	gp,gp,1884 # 200003fc <__global_pointer$>
     ca8:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     cac:	6509                	lui	a0,0x2
     cae:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x70c>
     cb2:	30051073          	csrw	mstatus,a0
     cb6:	468d                	li	a3,3
     cb8:	fffff517          	auipc	a0,0xfffff
     cbc:	34850513          	addi	a0,a0,840 # 0 <InterruptVector>
     cc0:	8d55                	or	a0,a0,a3
     cc2:	30551073          	csrw	mtvec,a0
asm volatile(
     cc6:	c9018513          	addi	a0,gp,-880 # 2000008c <DC_PIN2>
     cca:	3e418593          	addi	a1,gp,996 # 200007e0 <_ebss>
     cce:	4601                	li	a2,0
     cd0:	00b55663          	bge	a0,a1,cdc <handle_reset+0x3c>
     cd4:	c110                	sw	a2,0(a0)
     cd6:	0511                	addi	a0,a0,4
     cd8:	feb54ee3          	blt	a0,a1,cd4 <handle_reset+0x34>
     cdc:	00002517          	auipc	a0,0x2
     ce0:	f0050513          	addi	a0,a0,-256 # 2bdc <_data_lma>
     ce4:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_aht21>
     ce8:	1ffff617          	auipc	a2,0x1ffff
     cec:	3a460613          	addi	a2,a2,932 # 2000008c <DC_PIN2>
     cf0:	00c58863          	beq	a1,a2,d00 <handle_reset+0x60>
     cf4:	4114                	lw	a3,0(a0)
     cf6:	c194                	sw	a3,0(a1)
     cf8:	0511                	addi	a0,a0,4
     cfa:	0591                	addi	a1,a1,4
     cfc:	fec59ae3          	bne	a1,a2,cf0 <handle_reset+0x50>
	SysTick->CTLR = 5;
     d00:	e000f7b7          	lui	a5,0xe000f
     d04:	4715                	li	a4,5
     d06:	c398                	sw	a4,0(a5)
asm volatile(
     d08:	6785                	lui	a5,0x1
     d0a:	17478793          	addi	a5,a5,372 # 1174 <main>
     d0e:	34179073          	csrw	mepc,a5
     d12:	30200073          	mret

00000d16 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     d16:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     d1a:	ce2ff0ef          	jal	ra,1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     d1e:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     d22:	cdaff0ef          	jal	ra,1fc <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     d26:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     d2a:	cd2ff0ef          	jal	ra,1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     d2e:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     d32:	ccaff0ef          	jal	ra,1fc <PrintHex>
	while( (*DMDATA0) & 0x80 );
     d36:	e0000737          	lui	a4,0xe0000
     d3a:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     d3e:	0f470693          	addi	a3,a4,244
     d42:	0807f793          	andi	a5,a5,128
     d46:	fbf5                	bnez	a5,d3a <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     d48:	6785                	lui	a5,0x1
     d4a:	a8578793          	addi	a5,a5,-1403 # a85 <i2c_write_raw.constprop.0+0x55>
     d4e:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     d50:	e0000737          	lui	a4,0xe0000
     d54:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     d58:	0f470693          	addi	a3,a4,244
     d5c:	0807f793          	andi	a5,a5,128
     d60:	fbf5                	bnez	a5,d54 <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     d62:	aaaab7b7          	lui	a5,0xaaaab
     d66:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     d6a:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     d6c:	a001                	j	d6c <ADC1_2_IRQHandler+0x56>

00000d6e <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     d6e:	40021737          	lui	a4,0x40021
     d72:	471c                	lw	a5,8(a4)
     d74:	008006b7          	lui	a3,0x800
     d78:	8fd5                	or	a5,a5,a3
     d7a:	c71c                	sw	a5,8(a4)

00000d7c <strlen>:
{
     d7c:	87aa                	mv	a5,a0
	for (; *s; s++);
     d7e:	0007c703          	lbu	a4,0(a5)
     d82:	e701                	bnez	a4,d8a <strlen+0xe>
}
     d84:	40a78533          	sub	a0,a5,a0
     d88:	8082                	ret
	for (; *s; s++);
     d8a:	0785                	addi	a5,a5,1
     d8c:	bfcd                	j	d7e <strlen+0x2>

00000d8e <mini_vpprintf>:
{
     d8e:	fa410113          	addi	sp,sp,-92
     d92:	c8a6                	sw	s1,80(sp)
     d94:	cc86                	sw	ra,88(sp)
     d96:	caa2                	sw	s0,84(sp)
     d98:	c02a                	sw	a0,0(sp)
     d9a:	c22e                	sw	a1,4(sp)
     d9c:	84b2                	mv	s1,a2
     d9e:	87b6                	mv	a5,a3
	int n = 0;
     da0:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     da2:	0004c703          	lbu	a4,0(s1)
     da6:	00148413          	addi	s0,s1,1
     daa:	00e10fa3          	sb	a4,31(sp)
     dae:	eb01                	bnez	a4,dbe <mini_vpprintf+0x30>
}
     db0:	40e6                	lw	ra,88(sp)
     db2:	4456                	lw	s0,84(sp)
     db4:	4542                	lw	a0,16(sp)
     db6:	44c6                	lw	s1,80(sp)
     db8:	05c10113          	addi	sp,sp,92
     dbc:	8082                	ret
		if (ch!='%') {
     dbe:	02500693          	li	a3,37
     dc2:	00d70f63          	beq	a4,a3,de0 <mini_vpprintf+0x52>
     dc6:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     dc8:	4612                	lw	a2,4(sp)
     dca:	4782                	lw	a5,0(sp)
     dcc:	4585                	li	a1,1
     dce:	01f10513          	addi	a0,sp,31
     dd2:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     dd4:	84a2                	mv	s1,s0
		n = n + len;
     dd6:	47c2                	lw	a5,16(sp)
     dd8:	97aa                	add	a5,a5,a0
     dda:	c83e                	sw	a5,16(sp)
     ddc:	47a2                	lw	a5,8(sp)
     dde:	b7d1                	j	da2 <mini_vpprintf+0x14>
			ch=*(fmt++);
     de0:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     de4:	03000613          	li	a2,48
			ch=*(fmt++);
     de8:	00248713          	addi	a4,s1,2
     dec:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     df0:	03000413          	li	s0,48
     df4:	08c69063          	bne	a3,a2,e74 <mini_vpprintf+0xe6>
				ch=*(fmt++);
     df8:	84ba                	mv	s1,a4
     dfa:	4601                	li	a2,0
     dfc:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     dfe:	4525                	li	a0,9
     e00:	a811                	j	e14 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     e02:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     e06:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     e08:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     e0a:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     e0e:	0706                	slli	a4,a4,0x1
     e10:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     e12:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     e14:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f5fae>
     e18:	0ff5f313          	andi	t1,a1,255
     e1c:	fe6573e3          	bgeu	a0,t1,e02 <mini_vpprintf+0x74>
     e20:	c219                	beqz	a2,e26 <mini_vpprintf+0x98>
     e22:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     e26:	c63a                	sw	a4,12(sp)
     e28:	4661                	li	a2,24
     e2a:	00e65363          	bge	a2,a4,e30 <mini_vpprintf+0xa2>
     e2e:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     e30:	06c00593          	li	a1,108
			char l = 0;
     e34:	4601                	li	a2,0
			if (ch == 'l') {
     e36:	00b69863          	bne	a3,a1,e46 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     e3a:	0004c683          	lbu	a3,0(s1)
				l = 1;
     e3e:	4605                	li	a2,1
				ch=*(fmt++);
     e40:	0485                	addi	s1,s1,1
     e42:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     e46:	01f14683          	lbu	a3,31(sp)
     e4a:	06400593          	li	a1,100
     e4e:	06b68363          	beq	a3,a1,eb4 <mini_vpprintf+0x126>
     e52:	02d5e463          	bltu	a1,a3,e7a <mini_vpprintf+0xec>
     e56:	05800713          	li	a4,88
     e5a:	0ae68263          	beq	a3,a4,efe <mini_vpprintf+0x170>
     e5e:	06300713          	li	a4,99
     e62:	0ce68063          	beq	a3,a4,f22 <mini_vpprintf+0x194>
     e66:	d6a9                	beqz	a3,db0 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     e68:	4612                	lw	a2,4(sp)
     e6a:	c43e                	sw	a5,8(sp)
     e6c:	4585                	li	a1,1
     e6e:	01f10513          	addi	a0,sp,31
     e72:	a88d                	j	ee4 <mini_vpprintf+0x156>
			char pad_char = ' ';
     e74:	02000413          	li	s0,32
     e78:	b741                	j	df8 <mini_vpprintf+0x6a>
			switch (ch) {
     e7a:	07500593          	li	a1,117
     e7e:	02b68b63          	beq	a3,a1,eb4 <mini_vpprintf+0x126>
     e82:	07800613          	li	a2,120
     e86:	06c68c63          	beq	a3,a2,efe <mini_vpprintf+0x170>
     e8a:	07300613          	li	a2,115
     e8e:	fcc69de3          	bne	a3,a2,e68 <mini_vpprintf+0xda>
     e92:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     e94:	00478713          	addi	a4,a5,4
     e98:	439c                	lw	a5,0(a5)
     e9a:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     e9c:	853e                	mv	a0,a5
     e9e:	ca3e                	sw	a5,20(sp)
     ea0:	3df1                	jal	d7c <strlen>
					if (pad_to > 0) {
     ea2:	4762                	lw	a4,24(sp)
     ea4:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     ea6:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     ea8:	cb51                	beqz	a4,f3c <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     eaa:	46b2                	lw	a3,12(sp)
     eac:	1838                	addi	a4,sp,56
     eae:	8622                	mv	a2,s0
     eb0:	853e                	mv	a0,a5
     eb2:	a025                	j	eda <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     eb4:	00478713          	addi	a4,a5,4
     eb8:	c43a                	sw	a4,8(sp)
					if(l) {
     eba:	ca05                	beqz	a2,eea <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     ebc:	f8b68693          	addi	a3,a3,-117
     ec0:	1018                	addi	a4,sp,32
     ec2:	0016b693          	seqz	a3,a3
     ec6:	4388                	lw	a0,0(a5)
     ec8:	4601                	li	a2,0
     eca:	45a9                	li	a1,10
     ecc:	b9eff0ef          	jal	ra,26a <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ed0:	46b2                	lw	a3,12(sp)
     ed2:	1838                	addi	a4,sp,56
     ed4:	8622                	mv	a2,s0
     ed6:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ed8:	1008                	addi	a0,sp,32
     eda:	a44ff0ef          	jal	ra,11e <mini_pad>
					len = puts(bf, len, buf);
     ede:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ee0:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     ee2:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     ee4:	4782                	lw	a5,0(sp)
     ee6:	9782                	jalr	a5
					break;
     ee8:	b5fd                	j	dd6 <mini_vpprintf+0x48>
						if(ch == 'u') {
     eea:	07500713          	li	a4,117
     eee:	00e69563          	bne	a3,a4,ef8 <mini_vpprintf+0x16a>
	if (radix > 16)
     ef2:	1018                	addi	a4,sp,32
     ef4:	4685                	li	a3,1
     ef6:	bfc1                	j	ec6 <mini_vpprintf+0x138>
     ef8:	1018                	addi	a4,sp,32
     efa:	4681                	li	a3,0
     efc:	b7e9                	j	ec6 <mini_vpprintf+0x138>
					if(l) {
     efe:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f00:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     f04:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f08:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     f0a:	4685                	li	a3,1
     f0c:	1018                	addi	a4,sp,32
     f0e:	00163613          	seqz	a2,a2
     f12:	45c1                	li	a1,16
     f14:	b56ff0ef          	jal	ra,26a <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     f18:	46b2                	lw	a3,12(sp)
     f1a:	85aa                	mv	a1,a0
     f1c:	1838                	addi	a4,sp,56
     f1e:	8622                	mv	a2,s0
     f20:	bf65                	j	ed8 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     f22:	00478713          	addi	a4,a5,4
     f26:	439c                	lw	a5,0(a5)
     f28:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     f2a:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     f2c:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     f30:	1838                	addi	a4,sp,56
     f32:	8622                	mv	a2,s0
     f34:	4585                	li	a1,1
     f36:	01f10513          	addi	a0,sp,31
     f3a:	b745                	j	eda <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     f3c:	4612                	lw	a2,4(sp)
     f3e:	853e                	mv	a0,a5
     f40:	b755                	j	ee4 <mini_vpprintf+0x156>

00000f42 <printf>:
{
     f42:	fdc10113          	addi	sp,sp,-36
     f46:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f48:	862a                	mv	a2,a0
     f4a:	6505                	lui	a0,0x1
{
     f4c:	c82e                	sw	a1,16(sp)
     f4e:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f50:	4581                	li	a1,0
	va_start( args, format );
     f52:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f54:	c8c50513          	addi	a0,a0,-884 # c8c <__puts_uart>
{
     f58:	c606                	sw	ra,12(sp)
     f5a:	ce3a                	sw	a4,28(sp)
     f5c:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     f5e:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f60:	353d                	jal	d8e <mini_vpprintf>
}
     f62:	40b2                	lw	ra,12(sp)
     f64:	02410113          	addi	sp,sp,36
     f68:	8082                	ret

00000f6a <onI2C_SlaveWrite>:
#include "../Mess-libs/modules/systick_irq.h"
#include "../Mess-libs/modules/fun_button.h"
#include "../Mess-libs/i2c/i2c_slave.h"

void onI2C_SlaveWrite(uint8_t reg, uint8_t length) {
	printf("IM WRITEEN TO\n\r");
     f6a:	6509                	lui	a0,0x2
     f6c:	37450513          	addi	a0,a0,884 # 2374 <I2C1_ER_IRQHandler+0x7e>
     f70:	bfc9                	j	f42 <printf>

00000f72 <onI2C_SlaveRead>:
}

void onI2C_SlaveRead(uint8_t reg) {
	printf("IM READEN FROM.\n\r");
     f72:	6509                	lui	a0,0x2
     f74:	38450513          	addi	a0,a0,900 # 2384 <I2C1_ER_IRQHandler+0x8e>
     f78:	b7e9                	j	f42 <printf>

00000f7a <mini_vsnprintf>:
{
     f7a:	1121                	addi	sp,sp,-24
     f7c:	ca06                	sw	ra,20(sp)
     f7e:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
     f80:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
     f82:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
     f84:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
     f86:	c185                	beqz	a1,fa6 <mini_vsnprintf+0x2c>
     f88:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
     f8a:	858a                	mv	a1,sp
     f8c:	e111                	bnez	a0,f90 <mini_vsnprintf+0x16>
     f8e:	4581                	li	a1,0
     f90:	1ba00513          	li	a0,442
     f94:	3bed                	jal	d8e <mini_vpprintf>
	if(buffer == (void*) 0) {
     f96:	c401                	beqz	s0,f9e <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
     f98:	4512                	lw	a0,4(sp)
     f9a:	4782                	lw	a5,0(sp)
     f9c:	8d1d                	sub	a0,a0,a5
}
     f9e:	40d2                	lw	ra,20(sp)
     fa0:	4442                	lw	s0,16(sp)
     fa2:	0161                	addi	sp,sp,24
     fa4:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
     fa6:	4401                	li	s0,0
     fa8:	b7dd                	j	f8e <mini_vsnprintf+0x14>

00000faa <sprintf>:
{
     faa:	1101                	addi	sp,sp,-32
     fac:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fae:	862e                	mv	a2,a1
     fb0:	800005b7          	lui	a1,0x80000
{
     fb4:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fb6:	fff5c593          	not	a1,a1
	va_start( args, format );
     fba:	0814                	addi	a3,sp,16
{
     fbc:	c606                	sw	ra,12(sp)
     fbe:	cc3a                	sw	a4,24(sp)
     fc0:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
     fc2:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fc4:	3f5d                	jal	f7a <mini_vsnprintf>
}
     fc6:	40b2                	lw	ra,12(sp)
     fc8:	6105                	addi	sp,sp,32
     fca:	8082                	ret

00000fcc <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     fcc:	962a                	add	a2,a2,a0
     fce:	87aa                	mv	a5,a0
     fd0:	00c79363          	bne	a5,a2,fd6 <memset+0xa>
     fd4:	8082                	ret
     fd6:	00b78023          	sb	a1,0(a5)
     fda:	0785                	addi	a5,a5,1
     fdc:	bfd5                	j	fd0 <memset+0x4>

00000fde <strcpy>:
{
     fde:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
     fe0:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
     fe4:	00e78023          	sb	a4,0(a5)
     fe8:	e311                	bnez	a4,fec <strcpy+0xe>
}
     fea:	8082                	ret
	for (; (*d=*s); s++, d++);
     fec:	0585                	addi	a1,a1,1
     fee:	0785                	addi	a5,a5,1
     ff0:	bfc5                	j	fe0 <strcpy+0x2>

00000ff2 <memcpy>:
{
     ff2:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     ff4:	00f61363          	bne	a2,a5,ffa <memcpy+0x8>
}
     ff8:	8082                	ret
	for (; n; n--) *d++ = *s++;
     ffa:	00f58733          	add	a4,a1,a5
     ffe:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
    1002:	00f50733          	add	a4,a0,a5
    1006:	0785                	addi	a5,a5,1
    1008:	00d70023          	sb	a3,0(a4)
    100c:	b7e5                	j	ff4 <memcpy+0x2>

0000100e <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
    100e:	7179                	addi	sp,sp,-48
    1010:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
    1012:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1016:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
    1018:	862e                	mv	a2,a1
    101a:	85aa                	mv	a1,a0
    101c:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1020:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    1022:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    1026:	37f1                	jal	ff2 <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    1028:	00140593          	addi	a1,s0,1
    102c:	850a                	mv	a0,sp
    102e:	3409                	jal	a30 <i2c_write_raw.constprop.0>
}
    1030:	50b2                	lw	ra,44(sp)
    1032:	5422                	lw	s0,40(sp)
    1034:	6145                	addi	sp,sp,48
    1036:	8082                	ret

00001038 <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
    1038:	1151                	addi	sp,sp,-12
    103a:	c222                	sw	s0,4(sp)
    103c:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    103e:	02100513          	li	a0,33
void ssd1306_print_str_at(
    1042:	c406                	sw	ra,8(sp)
    1044:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1046:	363d                	jal	b74 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1048:	4501                	li	a0,0
    104a:	362d                	jal	b74 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    104c:	07f00513          	li	a0,127
    1050:	3615                	jal	b74 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1052:	02200513          	li	a0,34
    1056:	3e39                	jal	b74 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1058:	8522                	mv	a0,s0
    105a:	3e29                	jal	b74 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    105c:	8522                	mv	a0,s0
    105e:	3e19                	jal	b74 <ssd1306_cmd>
    1060:	4465                	li	s0,25
    1062:	3d018493          	addi	s1,gp,976 # 200007cc <str_output>
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i<25; i++) {
		if (*str) {
    1066:	0004c783          	lbu	a5,0(s1)
    106a:	c78d                	beqz	a5,1094 <ssd1306_print_str_at.constprop.0+0x5c>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    106c:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    106e:	0ff7f793          	andi	a5,a5,255
    1072:	6709                	lui	a4,0x2
    1074:	00279693          	slli	a3,a5,0x2
    1078:	49c70513          	addi	a0,a4,1180 # 249c <FONT_7x5>
    107c:	97b6                	add	a5,a5,a3
    107e:	4595                	li	a1,5
    1080:	953e                	add	a0,a0,a5
    1082:	3771                	jal	100e <ssd1306_data.isra.0>
			str++;
    1084:	0485                	addi	s1,s1,1
	for (int i=0; i<25; i++) {
    1086:	147d                	addi	s0,s0,-1
    1088:	fc79                	bnez	s0,1066 <ssd1306_print_str_at.constprop.0+0x2e>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
    108a:	40a2                	lw	ra,8(sp)
    108c:	4412                	lw	s0,4(sp)
    108e:	4482                	lw	s1,0(sp)
    1090:	0131                	addi	sp,sp,12
    1092:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    1094:	6789                	lui	a5,0x2
    1096:	4595                	li	a1,5
    1098:	49c78513          	addi	a0,a5,1180 # 249c <FONT_7x5>
    109c:	3f8d                	jal	100e <ssd1306_data.isra.0>
    109e:	b7e5                	j	1086 <ssd1306_print_str_at.constprop.0+0x4e>

000010a0 <puts>:
{
    10a0:	1151                	addi	sp,sp,-12
    10a2:	c406                	sw	ra,8(sp)
    10a4:	c222                	sw	s0,4(sp)
    10a6:	c026                	sw	s1,0(sp)
    10a8:	84aa                	mv	s1,a0
	int sl = strlen( s );
    10aa:	39c9                	jal	d7c <strlen>
    10ac:	842a                	mv	s0,a0
	_write(0, s, sl );
    10ae:	85aa                	mv	a1,a0
    10b0:	8526                	mv	a0,s1
    10b2:	34e5                	jal	b9a <_write.constprop.0>
	_write(0, "\n", 1 );
    10b4:	6509                	lui	a0,0x2
    10b6:	4585                	li	a1,1
    10b8:	39850513          	addi	a0,a0,920 # 2398 <I2C1_ER_IRQHandler+0xa2>
    10bc:	3cf9                	jal	b9a <_write.constprop.0>
}
    10be:	40a2                	lw	ra,8(sp)
    10c0:	00140513          	addi	a0,s0,1
    10c4:	4412                	lw	s0,4(sp)
    10c6:	4482                	lw	s1,0(sp)
    10c8:	0131                	addi	sp,sp,12
    10ca:	8082                	ret

000010cc <i2c_scan_callback>:
	if (i2c_ping(0x3C) != I2C_OK) return;
	ssd1306_print_str_at(str, line, 0);
}

void i2c_scan_callback(const uint8_t addr) {
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    10cc:	c539                	beqz	a0,111a <i2c_scan_callback+0x4e>
    10ce:	07f00793          	li	a5,127
    10d2:	862a                	mv	a2,a0
    10d4:	04f50363          	beq	a0,a5,111a <i2c_scan_callback+0x4e>
void i2c_scan_callback(const uint8_t addr) {
    10d8:	1151                	addi	sp,sp,-12
    10da:	c222                	sw	s0,4(sp)
	
	static int line = 1;
	sprintf(str_output, "I2C: 0x%02X", addr);
    10dc:	6589                	lui	a1,0x2
    10de:	39c58593          	addi	a1,a1,924 # 239c <I2C1_ER_IRQHandler+0xa6>
    10e2:	3d018513          	addi	a0,gp,976 # 200007cc <str_output>
void i2c_scan_callback(const uint8_t addr) {
    10e6:	c406                	sw	ra,8(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    10e8:	35c9                	jal	faa <sprintf>
	printf("%s\n", str_output);
    10ea:	3d018513          	addi	a0,gp,976 # 200007cc <str_output>
    10ee:	3f4d                	jal	10a0 <puts>
	modI2C_display(str_output, line++);
    10f0:	c4018793          	addi	a5,gp,-960 # 2000003c <line.5>
    10f4:	4380                	lw	s0,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    10f6:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
    10fa:	00140713          	addi	a4,s0,1
    10fe:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1100:	899ff0ef          	jal	ra,998 <i2c_ping>
    1104:	e519                	bnez	a0,1112 <i2c_scan_callback+0x46>
	ssd1306_print_str_at(str, line, 0);
    1106:	0ff47513          	andi	a0,s0,255
}
    110a:	4412                	lw	s0,4(sp)
    110c:	40a2                	lw	ra,8(sp)
    110e:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    1110:	b725                	j	1038 <ssd1306_print_str_at.constprop.0>
}
    1112:	40a2                	lw	ra,8(sp)
    1114:	4412                	lw	s0,4(sp)
    1116:	0131                	addi	sp,sp,12
    1118:	8082                	ret
    111a:	8082                	ret

0000111c <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    111c:	400227b7          	lui	a5,0x40022
    1120:	4705                	li	a4,1
    1122:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    1124:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1128:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    112c:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1130:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x107605f>
    1134:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    1136:	009f0737          	lui	a4,0x9f0
    113a:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    113c:	020006b7          	lui	a3,0x2000
    1140:	40021737          	lui	a4,0x40021
    1144:	431c                	lw	a5,0(a4)
    1146:	8ff5                	and	a5,a5,a3
    1148:	dff5                	beqz	a5,1144 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    114a:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    114c:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1150:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    1152:	0027e793          	ori	a5,a5,2
    1156:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1158:	4721                	li	a4,8
    115a:	42dc                	lw	a5,4(a3)
    115c:	8bb1                	andi	a5,a5,12
    115e:	fee79ee3          	bne	a5,a4,115a <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    1162:	e00007b7          	lui	a5,0xe0000
    1166:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    116a:	08000713          	li	a4,128
    116e:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    1172:	8082                	ret

00001174 <main>:
			printf("Long Press\n"); break;
	}
}

int main()
{
    1174:	f7c10113          	addi	sp,sp,-132
    1178:	c106                	sw	ra,128(sp)
    117a:	dea2                	sw	s0,124(sp)
    117c:	dca6                	sw	s1,120(sp)
    117e:	0140                	addi	s0,sp,132
	uint32_t sec_time = 0;
	uint32_t time_ref = 0;

	M_Encoder encoder_a = {0, 0, 0};

	SystemInit();
    1180:	3f71                	jal	111c <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    1182:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1186:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    1188:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    118c:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x1b5d>
    1190:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    1192:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    1196:	cb018493          	addi	s1,gp,-848 # 200000ac <systick_millis>
    119a:	0004a023          	sw	zero,0(s1)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    119e:	4398                	lw	a4,0(a5)
	systick_init();			//! required for millis()

	funGpioInitAll();
	Delay_Ms(100);
    11a0:	00494537          	lui	a0,0x494
    11a4:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.d894f163+0x489dde>
    11a8:	00776713          	ori	a4,a4,7
    11ac:	c398                	sw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    11ae:	e000e7b7          	lui	a5,0xe000e
    11b2:	6705                	lui	a4,0x1
    11b4:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>
	funGpioInitAll();
    11b8:	40021737          	lui	a4,0x40021
    11bc:	4f1c                	lw	a5,24(a4)
    11be:	0357e793          	ori	a5,a5,53
    11c2:	cf1c                	sw	a5,24(a4)
	Delay_Ms(100);
    11c4:	890ff0ef          	jal	ra,254 <DelaySysTick>
    }

    void button_setup(Button_t *model) {
    if (model->pin == 0xFF) return; 

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
    11c8:	40011737          	lui	a4,0x40011
    11cc:	40072783          	lw	a5,1024(a4) # 40011400 <_eusrstack+0x20010c00>
    11d0:	40070613          	addi	a2,a4,1024
    11d4:	9bc1                	andi	a5,a5,-16
    11d6:	0087e793          	ori	a5,a5,8
    11da:	40f72023          	sw	a5,1024(a4)
    funDigitalWrite(model->pin, 1);
    11de:	4785                	li	a5,1
    11e0:	ca1c                	sw	a5,16(a2)
    model->debounce_time = millis();
    11e2:	4098                	lw	a4,0(s1)
    11e4:	cb018693          	addi	a3,gp,-848 # 200000ac <systick_millis>
    11e8:	fad42a23          	sw	a3,-76(s0)
    11ec:	fae42c23          	sw	a4,-72(s0)
    model->release_time = millis();
    11f0:	4098                	lw	a4,0(s1)
    11f2:	fae42623          	sw	a4,-84(s0)
	if(dev->regb == 0) dev->regb = 1;
    11f6:	c0418613          	addi	a2,gp,-1020 # 20000000 <dev_aht21>
    11fa:	00a64603          	lbu	a2,10(a2)
    11fe:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_aht21>
    1202:	e601                	bnez	a2,120a <main+0x96>
	if(dev->regb  > 4) dev->regb = 4;
    1204:	00f70523          	sb	a5,10(a4)
    1208:	a021                	j	1210 <main+0x9c>
    120a:	4791                	li	a5,4
    120c:	fec7ece3          	bltu	a5,a2,1204 <main+0x90>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1210:	400217b7          	lui	a5,0x40021
    1214:	4b90                	lw	a2,16(a5)
    1216:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    121a:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    121e:	8e49                	or	a2,a2,a0
    1220:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1222:	4b90                	lw	a2,16(a5)
    1224:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1226:	6485                	lui	s1,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1228:	8e6d                	and	a2,a2,a1
    122a:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    122c:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    122e:	fbc00637          	lui	a2,0xfbc00
    1232:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1234:	8ec9                	or	a3,a3,a0
    1236:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    1238:	4f94                	lw	a3,24(a5)
    123a:	0116e693          	ori	a3,a3,17
    123e:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    1240:	400107b7          	lui	a5,0x40010
    1244:	43d4                	lw	a3,4(a5)
    1246:	8ef1                	and	a3,a3,a2
    1248:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    124a:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    124c:	767d                	lui	a2,0xfffff
    124e:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1252:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    1254:	400117b7          	lui	a5,0x40011
    1258:	4394                	lw	a3,0(a5)
    125a:	f0f6f693          	andi	a3,a3,-241
    125e:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    1260:	4394                	lw	a3,0(a5)
    1262:	0d06e693          	ori	a3,a3,208
    1266:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1268:	4394                	lw	a3,0(a5)
    126a:	8ef1                	and	a3,a3,a2
    126c:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    126e:	4394                	lw	a3,0(a5)
    1270:	d0048613          	addi	a2,s1,-768 # d00 <handle_reset+0x60>
    1274:	8ed1                	or	a3,a3,a2
    1276:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    1278:	400056b7          	lui	a3,0x40005
    127c:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
    1280:	07c2                	slli	a5,a5,0x10
    1282:	83c1                	srli	a5,a5,0x10
    1284:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    1288:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    128c:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
    1290:	431c                	lw	a5,0(a4)
    1292:	6761                	lui	a4,0x18
    1294:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.d894f163+0xe67e>
    1298:	00179593          	slli	a1,a5,0x1
    129c:	3af76963          	bltu	a4,a5,164e <main+0x4da>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    12a0:	02dc7537          	lui	a0,0x2dc7
    12a4:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbcbde>
    12a8:	e01fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    12ac:	14fd                	addi	s1,s1,-1
    12ae:	8d65                	and	a0,a0,s1
    12b0:	0542                	slli	a0,a0,0x10
    12b2:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    12b4:	40005737          	lui	a4,0x40005
    12b8:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    12bc:	40075783          	lhu	a5,1024(a4)
    12c0:	07c2                	slli	a5,a5,0x10
    12c2:	83c1                	srli	a5,a5,0x10
    12c4:	0017e793          	ori	a5,a5,1
    12c8:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    12cc:	dceff0ef          	jal	ra,89a <i2c_error>

void modI2C_setup() {
	if(i2c_init(&dev_aht21) != I2C_OK) {
    12d0:	38050d63          	beqz	a0,166a <main+0x4f6>
		printf("Failed to init I2C\n");
    12d4:	6509                	lui	a0,0x2
    12d6:	3a850513          	addi	a0,a0,936 # 23a8 <I2C1_ER_IRQHandler+0xb2>
    12da:	33d9                	jal	10a0 <puts>
	button_setup(&button1);

	// I2C1: uses PC1 & PC2
	modI2C_setup();

	uint8_t slave_mode = funDigitalRead(BUTTON_PIN);
    12dc:	400117b7          	lui	a5,0x40011
    12e0:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    12e4:	479c                	lw	a5,8(a5)
	if (slave_mode == 0) {
    12e6:	8b85                	andi	a5,a5,1
    12e8:	10079063          	bnez	a5,13e8 <main+0x274>
		printf("I2C Slave mode\n");
    12ec:	6509                	lui	a0,0x2
    12ee:	41050513          	addi	a0,a0,1040 # 2410 <I2C1_ER_IRQHandler+0x11a>
    12f2:	337d                	jal	10a0 <puts>
} i2c_slave_state;

void SetupI2CSlave(uint8_t address, volatile uint8_t* registers, uint8_t size,
    i2c_write_callback_t write_callback, i2c_read_callback_t read_callback, bool read_only
) {
    i2c_slave_state.first_write = 1;
    12f4:	39818793          	addi	a5,gp,920 # 20000794 <i2c_slave_state>
    12f8:	4705                	li	a4,1
    12fa:	00e79023          	sh	a4,0(a5)
    i2c_slave_state.offset = 0;
    i2c_slave_state.position = 0;
    i2c_slave_state.registers1 = registers;
    12fe:	c1c18713          	addi	a4,gp,-996 # 20000018 <i2c_registers>
    1302:	c3d8                	sw	a4,4(a5)
    i2c_slave_state.size1 = size;
    i2c_slave_state.registers2 = NULL;
    i2c_slave_state.size2 = 0;
    i2c_slave_state.write_callback1 = write_callback;
    1304:	6705                	lui	a4,0x1
    1306:	f6a70713          	addi	a4,a4,-150 # f6a <onI2C_SlaveWrite>
    130a:	cbd8                	sw	a4,20(a5)
    i2c_slave_state.read_callback1 = read_callback;
    130c:	6705                	lui	a4,0x1
    i2c_slave_state.size1 = size;
    130e:	02000613          	li	a2,32
    i2c_slave_state.read_callback1 = read_callback;
    1312:	f7270713          	addi	a4,a4,-142 # f72 <onI2C_SlaveRead>
    i2c_slave_state.registers2 = NULL;
    1316:	0007a623          	sw	zero,12(a5)
    i2c_slave_state.size2 = 0;
    131a:	00078823          	sb	zero,16(a5)
    i2c_slave_state.read_only1 = read_only;
    131e:	00078e23          	sb	zero,28(a5)
    i2c_slave_state.read_callback1 = read_callback;
    1322:	cf98                	sw	a4,24(a5)
    i2c_slave_state.position = 0;
    1324:	00078123          	sb	zero,2(a5)
    i2c_slave_state.size1 = size;
    1328:	00c78423          	sb	a2,8(a5)
    i2c_slave_state.write_callback2 = NULL;
    132c:	0207a023          	sw	zero,32(a5)
    i2c_slave_state.read_callback2 = NULL;
    1330:	0207a223          	sw	zero,36(a5)
    i2c_slave_state.read_only2 = false;
    1334:	02078423          	sb	zero,40(a5)

    // Enable I2C1
    RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1338:	400217b7          	lui	a5,0x40021
    133c:	4fd4                	lw	a3,28(a5)
    133e:	002005b7          	lui	a1,0x200
    1342:	8ecd                	or	a3,a3,a1
    1344:	cfd4                	sw	a3,28(a5)

    // Reset I2C1 to init all regs
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
    1346:	4b98                	lw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1348:	ffe006b7          	lui	a3,0xffe00
    134c:	16fd                	addi	a3,a3,-1
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
    134e:	8f4d                	or	a4,a4,a1
    1350:	cb98                	sw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1352:	4b98                	lw	a4,16(a5)

    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
    1354:	65a1                	lui	a1,0x8
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1356:	8f75                	and	a4,a4,a3
    1358:	cb98                	sw	a4,16(a5)
    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
    135a:	400057b7          	lui	a5,0x40005
    135e:	4007d683          	lhu	a3,1024(a5) # 40005400 <_eusrstack+0x20004c00>
    1362:	06c2                	slli	a3,a3,0x10
    1364:	82c1                	srli	a3,a3,0x10
    1366:	8ecd                	or	a3,a3,a1
    1368:	40d79023          	sh	a3,1024(a5)
    I2C1->CTLR1 &= ~I2C_CTLR1_SWRST;
    136c:	4007d683          	lhu	a3,1024(a5)
    1370:	400005b7          	lui	a1,0x40000
    1374:	06c6                	slli	a3,a3,0x11
    1376:	82c5                	srli	a3,a3,0x11
    1378:	40d79023          	sh	a3,1024(a5)

    // Set module clock frequency
    uint32_t prerate = 2000000; // I2C Logic clock rate, must be higher than the bus clock rate
    I2C1->CTLR2 |= (FUNCONF_SYSTEM_CORE_CLOCK/prerate) & I2C_CTLR2_FREQ;
    137c:	4047d683          	lhu	a3,1028(a5)
    1380:	06c2                	slli	a3,a3,0x10
    1382:	82c1                	srli	a3,a3,0x10
    1384:	0186e693          	ori	a3,a3,24
    1388:	40d79223          	sh	a3,1028(a5)

    // Enable interrupts
    I2C1->CTLR2 |= I2C_CTLR2_ITBUFEN | I2C_CTLR2_ITEVTEN | I2C_CTLR2_ITERREN;
    138c:	4047d683          	lhu	a3,1028(a5)
    1390:	06c2                	slli	a3,a3,0x10
    1392:	82c1                	srli	a3,a3,0x10
    1394:	7006e693          	ori	a3,a3,1792
    1398:	40d79223          	sh	a3,1028(a5)
    139c:	e000e6b7          	lui	a3,0xe000e
    13a0:	10b6a023          	sw	a1,256(a3) # e000e100 <_eusrstack+0xc000d900>
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    13a4:	40c68f23          	sb	a2,1054(a3)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    13a8:	800005b7          	lui	a1,0x80000
    13ac:	10b6a023          	sw	a1,256(a3)
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    13b0:	40c68fa3          	sb	a2,1055(a3)
    NVIC_EnableIRQ(I2C1_ER_IRQn); // Error interrupt
    NVIC_SetPriority(I2C1_ER_IRQn, 2 << 4);

    // Set clock configuration
    uint32_t clockrate = 1000000; // I2C Bus clock rate, must be lower than the logic clock rate
    I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(3*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_FS; // Fast mode 33% duty cycle
    13b4:	76e1                	lui	a3,0xffff8
    13b6:	06c1                	addi	a3,a3,16
    13b8:	40d79e23          	sh	a3,1052(a5)
    //I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(25*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_DUTY | I2C_CKCFGR_FS; // Fast mode 36% duty cycle
    //I2C1->CKCFGR = (FUNCONF_SYSTEM_CORE_CLOCK/(2*clockrate))&I2C_CKCFGR_CCR; // Standard mode good to 100kHz

    // Set I2C address
    I2C1->OADDR1 = address << 1;
    13bc:	0ee00693          	li	a3,238
    13c0:	40d79423          	sh	a3,1032(a5)
    I2C1->OADDR2 = 0;
    13c4:	40079623          	sh	zero,1036(a5)

    // Enable I2C
    I2C1->CTLR1 |= I2C_CTLR1_PE;
    13c8:	4007d703          	lhu	a4,1024(a5)
    13cc:	0742                	slli	a4,a4,0x10
    13ce:	8341                	srli	a4,a4,0x10
    13d0:	00176713          	ori	a4,a4,1
    13d4:	40e79023          	sh	a4,1024(a5)

    // Acknowledge bytes when they are received
    I2C1->CTLR1 |= I2C_CTLR1_ACK;
    13d8:	4007d703          	lhu	a4,1024(a5)
    13dc:	0742                	slli	a4,a4,0x10
    13de:	8341                	srli	a4,a4,0x10
    13e0:	40076713          	ori	a4,a4,1024
    13e4:	40e79023          	sh	a4,1024(a5)
    RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    13e8:	400215b7          	lui	a1,0x40021
    13ec:	4d9c                	lw	a5,24(a1)
    13ee:	6605                	lui	a2,0x1
    13f0:	01060713          	addi	a4,a2,16 # 1010 <ssd1306_data.isra.0+0x2>
    13f4:	8fd9                	or	a5,a5,a4
    13f6:	cd9c                	sw	a5,24(a1)
    GPIOC->CFGLR &= ~(0xf << (SPI_SCLK << 2));
    13f8:	400117b7          	lui	a5,0x40011
    13fc:	4398                	lw	a4,0(a5)
    13fe:	ff1006b7          	lui	a3,0xff100
    1402:	16fd                	addi	a3,a3,-1
    1404:	8f75                	and	a4,a4,a3
    1406:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_SCLK << 2);
    1408:	4398                	lw	a4,0(a5)
    140a:	00b006b7          	lui	a3,0xb00
    140e:	8f55                	or	a4,a4,a3
    1410:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR &= ~(0xf << (SPI_MOSI << 2));
    1412:	4398                	lw	a4,0(a5)
    1414:	f10006b7          	lui	a3,0xf1000
    1418:	16fd                	addi	a3,a3,-1
    141a:	8f75                	and	a4,a4,a3
    141c:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_MOSI << 2);
    141e:	4398                	lw	a4,0(a5)
    1420:	0b0006b7          	lui	a3,0xb000
    DC_PIN2 = dc_pin;
    1424:	c9018493          	addi	s1,gp,-880 # 2000008c <DC_PIN2>
    1428:	8f55                	or	a4,a4,a3
    SPI1->CTLR1 = SPI_CPHA_1Edge             // Bit 0     - Clock PHAse
    142a:	76f1                	lui	a3,0xffffc
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_MOSI << 2);
    142c:	c398                	sw	a4,0(a5)
    SPI1->CTLR1 = SPI_CPHA_1Edge             // Bit 0     - Clock PHAse
    142e:	30468693          	addi	a3,a3,772 # ffffc304 <_eusrstack+0xdfffbb04>
    1432:	40013737          	lui	a4,0x40013
    1436:	00d71023          	sh	a3,0(a4) # 40013000 <_eusrstack+0x20012800>
    SPI1->CRCR = 7;                          // CRC
    143a:	469d                	li	a3,7
    143c:	00d71823          	sh	a3,16(a4)
    SPI1->CTLR2 |= SPI_I2S_DMAReq_Tx;        // Configure SPI DMA Transfer
    1440:	00475683          	lhu	a3,4(a4)
    DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    1444:	0731                	addi	a4,a4,12
    SPI1->CTLR2 |= SPI_I2S_DMAReq_Tx;        // Configure SPI DMA Transfer
    1446:	06c2                	slli	a3,a3,0x10
    1448:	82c1                	srli	a3,a3,0x10
    144a:	0026e693          	ori	a3,a3,2
    144e:	fed71c23          	sh	a3,-8(a4)
    SPI1->CTLR1 |= CTLR1_SPE_Set;            // Bit 6     - Enable SPI
    1452:	ff475683          	lhu	a3,-12(a4)
    1456:	06c2                	slli	a3,a3,0x10
    1458:	82c1                	srli	a3,a3,0x10
    145a:	0406e693          	ori	a3,a3,64
    145e:	fed71a23          	sh	a3,-12(a4)
    RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    1462:	49d4                	lw	a3,20(a1)
    1464:	0016e693          	ori	a3,a3,1
    1468:	c9d4                	sw	a3,20(a1)
    DMA1_Channel3->CFGR = DMA_DIR_PeripheralDST          // Bit 4     - Read from memory
    146a:	668d                	lui	a3,0x3
    146c:	400205b7          	lui	a1,0x40020
    1470:	0b068693          	addi	a3,a3,176 # 30b0 <_data_lma+0x4d4>
    1474:	d994                	sw	a3,48(a1)
    DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    1476:	dd98                	sw	a4,56(a1)
    1478:	02300713          	li	a4,35
    147c:	00e48023          	sb	a4,0(s1)
    funPinMode(rst_pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP);
    1480:	4394                	lw	a3,0(a5)
    1482:	9ac1                	andi	a3,a3,-16
    1484:	0016e693          	ori	a3,a3,1
    1488:	c394                	sw	a3,0(a5)
    funPinMode(dc_pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP);
    148a:	4398                	lw	a4,0(a5)
    148c:	76c5                	lui	a3,0xffff1
    148e:	16fd                	addi	a3,a3,-1
    1490:	8f75                	and	a4,a4,a3
    1492:	8f51                	or	a4,a4,a2
    1494:	c398                	sw	a4,0(a5)
    funDigitalWrite(rst_pin, 0);
    1496:	6741                	lui	a4,0x10
    1498:	cb98                	sw	a4,16(a5)
    Delay_Ms(100);
    149a:	00494737          	lui	a4,0x494
    149e:	e0070513          	addi	a0,a4,-512 # 493e00 <lib_i2c.c.d894f163+0x489dde>
    14a2:	db3fe0ef          	jal	ra,254 <DelaySysTick>
    funDigitalWrite(rst_pin, 1);
    14a6:	4685                	li	a3,1
    14a8:	400117b7          	lui	a5,0x40011
    Delay_Ms(100);
    14ac:	00494737          	lui	a4,0x494
    funDigitalWrite(rst_pin, 1);
    14b0:	cb94                	sw	a3,16(a5)
    Delay_Ms(100);
    14b2:	e0070513          	addi	a0,a4,-512 # 493e00 <lib_i2c.c.d894f163+0x489dde>
    14b6:	d9ffe0ef          	jal	ra,254 <DelaySysTick>
    write_command_8(DC_PIN2, 0x01);          // Software reset
    14ba:	0004c483          	lbu	s1,0(s1)
    14be:	4585                	li	a1,1
    14c0:	8526                	mv	a0,s1
    14c2:	eb1fe0ef          	jal	ra,372 <write_command_8>
    Delay_Ms(200);
    14c6:	00928537          	lui	a0,0x928
    14ca:	c0050513          	addi	a0,a0,-1024 # 927c00 <lib_i2c.c.d894f163+0x91dbde>
    14ce:	d87fe0ef          	jal	ra,254 <DelaySysTick>
    write_command_8(DC_PIN2, ST7735_SLPOUT);
    14d2:	45c5                	li	a1,17
    14d4:	8526                	mv	a0,s1
    14d6:	e9dfe0ef          	jal	ra,372 <write_command_8>
    Delay_Ms(100);
    14da:	00494737          	lui	a4,0x494
    14de:	e0070513          	addi	a0,a4,-512 # 493e00 <lib_i2c.c.d894f163+0x489dde>
    14e2:	d73fe0ef          	jal	ra,254 <DelaySysTick>
    write_command_8(DC_PIN2, ST7735_MADCTL);
    14e6:	03600593          	li	a1,54
    14ea:	8526                	mv	a0,s1
    14ec:	e87fe0ef          	jal	ra,372 <write_command_8>
    funDigitalWrite(dc_pin, 1);     // Data Mode
    14f0:	0044d713          	srli	a4,s1,0x4
    14f4:	400117b7          	lui	a5,0x40011
    14f8:	072a                	slli	a4,a4,0xa
    14fa:	80078793          	addi	a5,a5,-2048 # 40010800 <_eusrstack+0x20010000>
    14fe:	4685                	li	a3,1
    1500:	97ba                	add	a5,a5,a4
    1502:	00f4f713          	andi	a4,s1,15
    1506:	00e69733          	sll	a4,a3,a4
    150a:	cb98                	sw	a4,16(a5)
    SPI_send(data);
    150c:	0a800513          	li	a0,168
    funDigitalWrite(dc_pin, 1);     // Data Mode
    1510:	fae42423          	sw	a4,-88(s0)
    1514:	faf42823          	sw	a5,-80(s0)
    SPI_send(data);
    1518:	e45fe0ef          	jal	ra,35c <SPI_send>
    write_command_8(DC_PIN2, ST7735_COLMOD);
    151c:	03a00593          	li	a1,58
    1520:	8526                	mv	a0,s1
    1522:	e51fe0ef          	jal	ra,372 <write_command_8>
    funDigitalWrite(dc_pin, 1);     // Data Mode
    1526:	fa842703          	lw	a4,-88(s0)
    152a:	fb042783          	lw	a5,-80(s0)
    SPI_send(data);
    152e:	4515                	li	a0,5
    funDigitalWrite(dc_pin, 1);     // Data Mode
    1530:	cb98                	sw	a4,16(a5)
    SPI_send(data);
    1532:	e2bfe0ef          	jal	ra,35c <SPI_send>
    uint8_t gamma_p[] = {0x09, 0x16, 0x09, 0x20, 0x21, 0x1B, 0x13, 0x19,
    1536:	6589                	lui	a1,0x2
    1538:	4641                	li	a2,16
    153a:	47458593          	addi	a1,a1,1140 # 2474 <I2C1_ER_IRQHandler+0x17e>
    153e:	fbc40513          	addi	a0,s0,-68
    1542:	3c45                	jal	ff2 <memcpy>
    write_command_8(DC_PIN2, ST7735_GMCTRP1);
    1544:	8526                	mv	a0,s1
    1546:	0e000593          	li	a1,224
    154a:	e29fe0ef          	jal	ra,372 <write_command_8>
    tft_send_DMA(gamma_p, 16, 1);
    154e:	4605                	li	a2,1
    1550:	45c1                	li	a1,16
    1552:	fbc40513          	addi	a0,s0,-68
    1556:	e73fe0ef          	jal	ra,3c8 <tft_send_DMA>
    uint8_t gamma_n[] = {0x0B, 0x14, 0x08, 0x1E, 0x22, 0x1D, 0x18, 0x1E,
    155a:	6589                	lui	a1,0x2
    155c:	4641                	li	a2,16
    155e:	48858593          	addi	a1,a1,1160 # 2488 <I2C1_ER_IRQHandler+0x192>
    1562:	fcc40513          	addi	a0,s0,-52
    1566:	3471                	jal	ff2 <memcpy>
    write_command_8(DC_PIN2, ST7735_GMCTRN1);
    1568:	8526                	mv	a0,s1
    156a:	0e100593          	li	a1,225
    156e:	e05fe0ef          	jal	ra,372 <write_command_8>
    tft_send_DMA(gamma_n, 16, 1);
    1572:	4605                	li	a2,1
    1574:	45c1                	li	a1,16
    1576:	fcc40513          	addi	a0,s0,-52
    157a:	e4ffe0ef          	jal	ra,3c8 <tft_send_DMA>
    Delay_Ms(10);
    157e:	000757b7          	lui	a5,0x75
    1582:	30078513          	addi	a0,a5,768 # 75300 <lib_i2c.c.d894f163+0x6b2de>
    1586:	ccffe0ef          	jal	ra,254 <DelaySysTick>
    write_command_8(DC_PIN2, 0x26);  //! Gamma disable
    158a:	8526                	mv	a0,s1
    158c:	02600593          	li	a1,38
    1590:	de3fe0ef          	jal	ra,372 <write_command_8>
    write_command_8(DC_PIN2, ST7735_INVON);
    1594:	8526                	mv	a0,s1
    1596:	02100593          	li	a1,33
    159a:	dd9fe0ef          	jal	ra,372 <write_command_8>
    write_command_8(DC_PIN2, ST7735_NORON);
    159e:	45cd                	li	a1,19
    15a0:	8526                	mv	a0,s1
    15a2:	dd1fe0ef          	jal	ra,372 <write_command_8>
    Delay_Ms(10);
    15a6:	000757b7          	lui	a5,0x75
    15aa:	30078513          	addi	a0,a5,768 # 75300 <lib_i2c.c.d894f163+0x6b2de>
    15ae:	ca7fe0ef          	jal	ra,254 <DelaySysTick>
    write_command_8(DC_PIN2, ST7735_DISPON);
    15b2:	02900593          	li	a1,41
    15b6:	8526                	mv	a0,s1
    15b8:	dbbfe0ef          	jal	ra,372 <write_command_8>
    Delay_Ms(10);
    15bc:	000757b7          	lui	a5,0x75
    15c0:	30078513          	addi	a0,a5,768 # 75300 <lib_i2c.c.d894f163+0x6b2de>
    15c4:	c91fe0ef          	jal	ra,254 <DelaySysTick>



void modST7735_setup(uint8_t rst_pin, uint8_t dc_pin) {
    tft_init(rst_pin, dc_pin);
    tft_fill_rect(0, 0, 160, 128, PURPLE);
    15c8:	6721                	lui	a4,0x8
    15ca:	80f70713          	addi	a4,a4,-2033 # 780f <ch32_mess.c.a3b44ab6+0x3210>
    15ce:	08000693          	li	a3,128
    15d2:	0a000613          	li	a2,160
    15d6:	4581                	li	a1,0
    15d8:	4501                	li	a0,0
    15da:	a5eff0ef          	jal	ra,838 <tft_fill_rect>
    model->btn_state = newState;
    15de:	478d                	li	a5,3
	Button_t button1 = { BUTTON_PIN, BUTTON_IDLE, 0, 0, 0, 0, 0, 0 };
    15e0:	f8042a23          	sw	zero,-108(s0)
    15e4:	faf42823          	sw	a5,-80(s0)
	uint32_t sec_time = 0;
    15e8:	4481                	li	s1,0

	// TIM2 Ch1, Ch2 : uses PD3, PD4.
	// modEncoder_setup(&encoder_a);

	while(1) {
		uint32_t now = millis();
    15ea:	fb442783          	lw	a5,-76(s0)

		button_run(&button1, button_onChanged);
		// modEncoder_task(now, &encoder_a, encoder_onChanged);

		if (now - sec_time > 1000) {
    15ee:	fb842703          	lw	a4,-72(s0)
		uint32_t now = millis();
    15f2:	439c                	lw	a5,0(a5)
    15f4:	f8f42c23          	sw	a5,-104(s0)
}

void button_run(Button_t *model, void (*handler)(int, uint32_t)) {
    if (model->pin == 0xFF) return;
    
    uint32_t now = millis();
    15f8:	fb442783          	lw	a5,-76(s0)
    15fc:	439c                	lw	a5,0(a5)
    15fe:	faf42c23          	sw	a5,-72(s0)
    uint8_t read = funDigitalRead(model->pin);

    // Debounce check
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1602:	fb842683          	lw	a3,-72(s0)
    uint8_t read = funDigitalRead(model->pin);
    1606:	400117b7          	lui	a5,0x40011
    160a:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    160e:	479c                	lw	a5,8(a5)
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1610:	40e68633          	sub	a2,a3,a4
    1614:	46cd                	li	a3,19
    1616:	5ac6f363          	bgeu	a3,a2,1bbc <main+0xa48>
    model->debounce_time = now;

    switch (model->btn_state) {
    161a:	fb042683          	lw	a3,-80(s0)
    161e:	4709                	li	a4,2
    uint8_t read = funDigitalRead(model->pin);
    1620:	8b85                	andi	a5,a5,1
    switch (model->btn_state) {
    1622:	58e68763          	beq	a3,a4,1bb0 <main+0xa3c>
    1626:	470d                	li	a4,3
    1628:	18e68863          	beq	a3,a4,17b8 <main+0x644>
    162c:	52069463          	bnez	a3,1b54 <main+0x9e0>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
    1630:	50078163          	beqz	a5,1b32 <main+0x9be>
    model->debounce_time = millis();
    1634:	fb442703          	lw	a4,-76(s0)
    1638:	4318                	lw	a4,0(a4)
    163a:	fae42c23          	sw	a4,-72(s0)
    model->release_time = millis();
    163e:	fb442703          	lw	a4,-76(s0)
    1642:	4318                	lw	a4,0(a4)
    1644:	fae42623          	sw	a4,-84(s0)
    model->btn_state = newState;
    1648:	faf42823          	sw	a5,-80(s0)
    164c:	a279                	j	17da <main+0x666>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    164e:	02dc7537          	lui	a0,0x2dc7
    1652:	95be                	add	a1,a1,a5
    1654:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbcbde>
    1658:	a51fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    165c:	14fd                	addi	s1,s1,-1
    165e:	8d65                	and	a0,a0,s1
    1660:	0542                	slli	a0,a0,0x10
    1662:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    1664:	67a1                	lui	a5,0x8
    1666:	8d5d                	or	a0,a0,a5
    1668:	b1b1                	j	12b4 <main+0x140>
	} else {
		if (i2c_ping(0x3C) == I2C_OK) {
    166a:	03c00513          	li	a0,60
    166e:	b2aff0ef          	jal	ra,998 <i2c_ping>
    1672:	0e051863          	bnez	a0,1762 <main+0x5ee>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1676:	678d                	lui	a5,0x3
    1678:	ca018623          	sb	zero,-852(gp) # 200000a8 <ssd1306_buffer>
    167c:	bc078793          	addi	a5,a5,-1088 # 2bc0 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    1680:	0007c503          	lbu	a0,0(a5)
    1684:	0ff00713          	li	a4,255
    1688:	02e51e63          	bne	a0,a4,16c4 <main+0x550>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    168c:	02100513          	li	a0,33
    1690:	ce4ff0ef          	jal	ra,b74 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    1694:	4501                	li	a0,0
    1696:	cdeff0ef          	jal	ra,b74 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    169a:	07f00513          	li	a0,127
    169e:	cd6ff0ef          	jal	ra,b74 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    16a2:	02200513          	li	a0,34
    16a6:	cceff0ef          	jal	ra,b74 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    16aa:	4501                	li	a0,0
    16ac:	cc8ff0ef          	jal	ra,b74 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    16b0:	451d                	li	a0,7
    16b2:	cc2ff0ef          	jal	ra,b74 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    16b6:	02000593          	li	a1,32
    16ba:	cac18513          	addi	a0,gp,-852 # 200000a8 <ssd1306_buffer>
    16be:	951ff0ef          	jal	ra,100e <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    16c2:	a809                	j	16d4 <main+0x560>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    16c4:	0785                	addi	a5,a5,1
    16c6:	faf42823          	sw	a5,-80(s0)
    16ca:	caaff0ef          	jal	ra,b74 <ssd1306_cmd>
    16ce:	fb042783          	lw	a5,-80(s0)
    16d2:	d55d                	beqz	a0,1680 <main+0x50c>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    16d4:	f9818513          	addi	a0,gp,-104 # 20000394 <frame_buffer>
    16d8:	40000613          	li	a2,1024
    16dc:	4581                	li	a1,0
    16de:	8efff0ef          	jal	ra,fcc <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    16e2:	02100513          	li	a0,33
    16e6:	c8eff0ef          	jal	ra,b74 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    16ea:	4501                	li	a0,0
    16ec:	c88ff0ef          	jal	ra,b74 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    16f0:	07f00513          	li	a0,127
    16f4:	c80ff0ef          	jal	ra,b74 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    16f8:	02200513          	li	a0,34
    16fc:	c78ff0ef          	jal	ra,b74 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1700:	4501                	li	a0,0
    1702:	c72ff0ef          	jal	ra,b74 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1706:	451d                	li	a0,7
    1708:	c6cff0ef          	jal	ra,b74 <ssd1306_cmd>
    170c:	4481                	li	s1,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    170e:	f9818793          	addi	a5,gp,-104 # 20000394 <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1712:	4501                	li	a0,0
    1714:	97a6                	add	a5,a5,s1
    1716:	02050713          	addi	a4,a0,32
    171a:	01071593          	slli	a1,a4,0x10
    171e:	81c1                	srli	a1,a1,0x10
    1720:	8d89                	sub	a1,a1,a0
    1722:	953e                	add	a0,a0,a5
    1724:	fae42423          	sw	a4,-88(s0)
    1728:	faf42823          	sw	a5,-80(s0)
    172c:	8e3ff0ef          	jal	ra,100e <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    1730:	fa842703          	lw	a4,-88(s0)
    1734:	fb042783          	lw	a5,-80(s0)
    1738:	853a                	mv	a0,a4
    173a:	08000713          	li	a4,128
    173e:	fce51ce3          	bne	a0,a4,1716 <main+0x5a2>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    1742:	08048493          	addi	s1,s1,128
    1746:	40000793          	li	a5,1024
    174a:	fcf492e3          	bne	s1,a5,170e <main+0x59a>
			ssd1306_setup();

			sprintf(str_output, "Hello Bee!");
    174e:	6589                	lui	a1,0x2
    1750:	3bc58593          	addi	a1,a1,956 # 23bc <I2C1_ER_IRQHandler+0xc6>
    1754:	3d018513          	addi	a0,gp,976 # 200007cc <str_output>
    1758:	887ff0ef          	jal	ra,fde <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    175c:	4501                	li	a0,0
    175e:	8dbff0ef          	jal	ra,1038 <ssd1306_print_str_at.constprop.0>
		}

		// Scan the I2C Bus, prints any devices that respond
		printf("----Scanning I2C Bus for Devices---\n");
    1762:	6509                	lui	a0,0x2
    1764:	3c850513          	addi	a0,a0,968 # 23c8 <I2C1_ER_IRQHandler+0xd2>
    1768:	939ff0ef          	jal	ra,10a0 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    176c:	4481                	li	s1,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    176e:	8526                	mv	a0,s1
    1770:	a28ff0ef          	jal	ra,998 <i2c_ping>
    1774:	e501                	bnez	a0,177c <main+0x608>
    1776:	8526                	mv	a0,s1
    1778:	955ff0ef          	jal	ra,10cc <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    177c:	0485                	addi	s1,s1,1
    177e:	0ff4f493          	andi	s1,s1,255
    1782:	07f00793          	li	a5,127
    1786:	fef494e3          	bne	s1,a5,176e <main+0x5fa>
		i2c_scan(i2c_scan_callback);
		printf("----Done Scanning----\n\n");
    178a:	6509                	lui	a0,0x2
    178c:	3ec50513          	addi	a0,a0,1004 # 23ec <I2C1_ER_IRQHandler+0xf6>
    1790:	911ff0ef          	jal	ra,10a0 <puts>
	// i2c_device_tests();
	// test_v003Slave();
}

void modI2C_task(uint32_t counter) {
	sprintf(str_output, "counter %lu", counter);
    1794:	6589                	lui	a1,0x2
    1796:	4601                	li	a2,0
    1798:	40458593          	addi	a1,a1,1028 # 2404 <I2C1_ER_IRQHandler+0x10e>
    179c:	3d018513          	addi	a0,gp,976 # 200007cc <str_output>
    17a0:	80bff0ef          	jal	ra,faa <sprintf>
	if (i2c_ping(0x3C) != I2C_OK) return;
    17a4:	03c00513          	li	a0,60
    17a8:	9f0ff0ef          	jal	ra,998 <i2c_ping>
    17ac:	b20518e3          	bnez	a0,12dc <main+0x168>
	ssd1306_print_str_at(str, line, 0);
    17b0:	451d                	li	a0,7
    17b2:	887ff0ef          	jal	ra,1038 <ssd1306_print_str_at.constprop.0>
    17b6:	b61d                	j	12dc <main+0x168>
        if (read == 0) {
    17b8:	e38d                	bnez	a5,17da <main+0x666>
    model->debounce_time = millis();
    17ba:	fb442783          	lw	a5,-76(s0)
    model->release_time = millis();
    17be:	fb442703          	lw	a4,-76(s0)
    model->btn_state = newState;
    17c2:	fa042823          	sw	zero,-80(s0)
    model->debounce_time = millis();
    17c6:	439c                	lw	a5,0(a5)
    model->release_time = millis();
    17c8:	4318                	lw	a4,0(a4)
    17ca:	fae42623          	sw	a4,-84(s0)
            model->press_time = now;
    17ce:	fb842703          	lw	a4,-72(s0)
    model->debounce_time = millis();
    17d2:	faf42c23          	sw	a5,-72(s0)
            model->press_time = now;
    17d6:	f8e42a23          	sw	a4,-108(s0)
		if (now - sec_time > 1000) {
    17da:	f9842783          	lw	a5,-104(s0)
    17de:	3e800713          	li	a4,1000
    17e2:	8f85                	sub	a5,a5,s1
    17e4:	e0f773e3          	bgeu	a4,a5,15ea <main+0x476>
	// Increment the milliseconds count
	systick_millis++;
}

uint32_t SysTick_getRunTime(void *handler(void)) {
	uint32_t now = micros();
    17e8:	e000f7b7          	lui	a5,0xe000f
    17ec:	4788                	lw	a0,8(a5)
    17ee:	03000593          	li	a1,48
    str[position] = '\0';  // End of the string.
    17f2:	075bd4b7          	lui	s1,0x75bd
    17f6:	8b3fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    17fa:	f8a42823          	sw	a0,-112(s0)
    _cursor_x = x + ST7735_X_OFFSET;
    17fe:	4705                	li	a4,1



void tft_test() {
    tft_set_cursor(0, 0);
    tft_print("Hello World!");
    1800:	6509                	lui	a0,0x2
    1802:	cae19023          	sh	a4,-864(gp) # 2000009c <_cursor_x>
    1806:	44c50513          	addi	a0,a0,1100 # 244c <I2C1_ER_IRQHandler+0x156>
    _cursor_y = y + ST7735_Y_OFFSET;
    180a:	4769                	li	a4,26
    180c:	cae19123          	sh	a4,-862(gp) # 2000009e <_cursor_y>
    1810:	f59fe0ef          	jal	ra,768 <tft_print>
    str[position] = '\0';  // End of the string.
    1814:	3c418713          	addi	a4,gp,964 # 200007c0 <str.2>
    1818:	000705a3          	sb	zero,11(a4)
    181c:	3c418693          	addi	a3,gp,964 # 200007c0 <str.2>
    uint8_t     position  = 11;
    1820:	472d                	li	a4,11
    str[position] = '\0';  // End of the string.
    1822:	d1548493          	addi	s1,s1,-747 # 75bcd15 <lib_i2c.c.d894f163+0x75b2cf3>
        str[--position] = num % 10 + '0';
    1826:	177d                	addi	a4,a4,-1
    1828:	0ff77713          	andi	a4,a4,255
    182c:	45a9                	li	a1,10
    182e:	8526                	mv	a0,s1
    1830:	fae42223          	sw	a4,-92(s0)
    1834:	fad42423          	sw	a3,-88(s0)
    1838:	8c1fe0ef          	jal	ra,f8 <__modsi3>
    183c:	fa842683          	lw	a3,-88(s0)
    1840:	03050513          	addi	a0,a0,48
        num /= 10;
    1844:	45a9                	li	a1,10
        str[--position] = num % 10 + '0';
    1846:	00a68523          	sb	a0,10(a3) # ffff100a <_eusrstack+0xdfff080a>
        num /= 10;
    184a:	8526                	mv	a0,s1
    184c:	855fe0ef          	jal	ra,a0 <__divsi3>
    while (num) {
    1850:	fa842683          	lw	a3,-88(s0)
    1854:	fa442703          	lw	a4,-92(s0)
    1858:	4609                	li	a2,2
        num /= 10;
    185a:	84aa                	mv	s1,a0
    while (num) {
    185c:	16fd                	addi	a3,a3,-1
    185e:	3c418793          	addi	a5,gp,964 # 200007c0 <str.2>
    1862:	fcc712e3          	bne	a4,a2,1826 <main+0x6b2>
    tft_print(&str[position]);
    1866:	00278513          	addi	a0,a5,2 # e000f002 <_eusrstack+0xc000e802>
    186a:	efffe0ef          	jal	ra,768 <tft_print>
}


void tft_line_tests() {
    //! dots test
    tft_draw_pixel(rand8() % 160, rand8() % 80, colors[rand8() % 19]);
    186e:	abbfe0ef          	jal	ra,328 <rand8>
    1872:	faa42023          	sw	a0,-96(s0)
    1876:	ab3fe0ef          	jal	ra,328 <rand8>
    187a:	faa42423          	sw	a0,-88(s0)
    187e:	aabfe0ef          	jal	ra,328 <rand8>
    1882:	6389                	lui	t2,0x2
    1884:	45cd                	li	a1,19
    1886:	69838493          	addi	s1,t2,1688 # 2698 <colors>
    188a:	84bfe0ef          	jal	ra,d4 <__umodsi3>
    188e:	0ff57793          	andi	a5,a0,255
    1892:	0786                	slli	a5,a5,0x1
    1894:	fa842683          	lw	a3,-88(s0)
    1898:	97a6                	add	a5,a5,s1
    189a:	0007d603          	lhu	a2,0(a5)
    189e:	8536                	mv	a0,a3
    18a0:	05000593          	li	a1,80
    18a4:	fac42223          	sw	a2,-92(s0)
    18a8:	82dfe0ef          	jal	ra,d4 <__umodsi3>
    18ac:	fa042703          	lw	a4,-96(s0)
    18b0:	0ff57793          	andi	a5,a0,255
    18b4:	0a000593          	li	a1,160
    18b8:	853a                	mv	a0,a4
    18ba:	faf42423          	sw	a5,-88(s0)
    18be:	817fe0ef          	jal	ra,d4 <__umodsi3>
    18c2:	fa842783          	lw	a5,-88(s0)
    18c6:	fa442603          	lw	a2,-92(s0)
    18ca:	0ff57513          	andi	a0,a0,255
    18ce:	85be                	mv	a1,a5
    18d0:	ba7fe0ef          	jal	ra,476 <tft_draw_pixel>

    // //! draw vertical lines
    static uint8_t x_idx = 0;
    tft_draw_line(x_idx, 0, x_idx, 80, colors[rand8() % 19], 1);
    18d4:	cb418293          	addi	t0,gp,-844 # 200000b0 <x_idx.4>
    18d8:	0002c303          	lbu	t1,0(t0)
    18dc:	01031613          	slli	a2,t1,0x10
    18e0:	8641                	srai	a2,a2,0x10
    18e2:	fa642223          	sw	t1,-92(s0)
    18e6:	fac42423          	sw	a2,-88(s0)
    18ea:	a3ffe0ef          	jal	ra,328 <rand8>
    18ee:	45cd                	li	a1,19
    18f0:	fe4fe0ef          	jal	ra,d4 <__umodsi3>
    18f4:	0ff57513          	andi	a0,a0,255
    18f8:	0506                	slli	a0,a0,0x1
    18fa:	fa842603          	lw	a2,-88(s0)
    18fe:	9526                	add	a0,a0,s1
    1900:	00055703          	lhu	a4,0(a0)
    1904:	4785                	li	a5,1
    1906:	05000693          	li	a3,80
    190a:	4581                	li	a1,0
    190c:	8532                	mv	a0,a2
    190e:	c5ffe0ef          	jal	ra,56c <tft_draw_line>
    x_idx += 1;
    1912:	fa442303          	lw	t1,-92(s0)
    1916:	6389                	lui	t2,0x2
    1918:	69838713          	addi	a4,t2,1688 # 2698 <colors>
    191c:	0305                	addi	t1,t1,1
    191e:	fae42223          	sw	a4,-92(s0)
    1922:	0ff37313          	andi	t1,t1,255
    if (x_idx >= 160) x_idx = 0;
    1926:	09f00793          	li	a5,159
    192a:	cb418293          	addi	t0,gp,-844 # 200000b0 <x_idx.4>
    192e:	2867ea63          	bltu	a5,t1,1bc2 <main+0xa4e>
    x_idx += 1;
    1932:	00628023          	sb	t1,0(t0)

    // //! draw horizontal lines
    static uint8_t y_idx = 0;
    tft_draw_line(0, y_idx, 180, y_idx, colors[rand8() % 19], 1);
    1936:	cb518313          	addi	t1,gp,-843 # 200000b1 <y_idx.3>
    193a:	00034483          	lbu	s1,0(t1)
    193e:	01049693          	slli	a3,s1,0x10
    1942:	86c1                	srai	a3,a3,0x10
    1944:	fad42423          	sw	a3,-88(s0)
    1948:	9e1fe0ef          	jal	ra,328 <rand8>
    194c:	45cd                	li	a1,19
    194e:	f86fe0ef          	jal	ra,d4 <__umodsi3>
    1952:	fa442783          	lw	a5,-92(s0)
    1956:	0ff57513          	andi	a0,a0,255
    195a:	0506                	slli	a0,a0,0x1
    195c:	953e                	add	a0,a0,a5
    195e:	fa842683          	lw	a3,-88(s0)
    1962:	00055703          	lhu	a4,0(a0)
    1966:	4785                	li	a5,1
    1968:	0b400613          	li	a2,180
    196c:	85b6                	mv	a1,a3
    196e:	4501                	li	a0,0
    1970:	bfdfe0ef          	jal	ra,56c <tft_draw_line>
    y_idx += 1;
    1974:	0485                	addi	s1,s1,1
    1976:	0ff4f493          	andi	s1,s1,255
    if (y_idx >= 80) y_idx = 0;
    197a:	04f00793          	li	a5,79
    197e:	cb518313          	addi	t1,gp,-843 # 200000b1 <y_idx.3>
    1982:	2497e363          	bltu	a5,s1,1bc8 <main+0xa54>
    y_idx += 1;
    1986:	00930023          	sb	s1,0(t1)

    //! draw random lines
    tft_draw_line(0, 0, 70, 70, RED, 5);
    198a:	6741                	lui	a4,0x10
    198c:	04600613          	li	a2,70
    1990:	4795                	li	a5,5
    1992:	80070713          	addi	a4,a4,-2048 # f800 <lib_i2c.c.d894f163+0x57de>
    1996:	04600693          	li	a3,70
    199a:	4581                	li	a1,0
    199c:	4501                	li	a0,0
    199e:	bcffe0ef          	jal	ra,56c <tft_draw_line>

    tft_draw_line(rand8() % 160, rand8() % 80, rand8() % 160, rand8() % 80, colors[rand8() % 19], 1);
    19a2:	987fe0ef          	jal	ra,328 <rand8>
    19a6:	f8a42423          	sw	a0,-120(s0)
    19aa:	97ffe0ef          	jal	ra,328 <rand8>
    19ae:	84aa                	mv	s1,a0
    19b0:	979fe0ef          	jal	ra,328 <rand8>
    19b4:	f8a42623          	sw	a0,-116(s0)
    19b8:	971fe0ef          	jal	ra,328 <rand8>
    19bc:	faa42423          	sw	a0,-88(s0)
    19c0:	969fe0ef          	jal	ra,328 <rand8>
    19c4:	45cd                	li	a1,19
    19c6:	f0efe0ef          	jal	ra,d4 <__umodsi3>
    19ca:	fa442703          	lw	a4,-92(s0)
    19ce:	0ff57793          	andi	a5,a0,255
    19d2:	0786                	slli	a5,a5,0x1
    19d4:	97ba                	add	a5,a5,a4
    19d6:	fa842683          	lw	a3,-88(s0)
    19da:	0007d703          	lhu	a4,0(a5)
    19de:	05000593          	li	a1,80
    19e2:	8536                	mv	a0,a3
    19e4:	f8e42e23          	sw	a4,-100(s0)
    19e8:	eecfe0ef          	jal	ra,d4 <__umodsi3>
    19ec:	f8c42603          	lw	a2,-116(s0)
    19f0:	0ff57693          	andi	a3,a0,255
    19f4:	0a000593          	li	a1,160
    19f8:	8532                	mv	a0,a2
    19fa:	fad42023          	sw	a3,-96(s0)
    19fe:	ed6fe0ef          	jal	ra,d4 <__umodsi3>
    1a02:	0ff57613          	andi	a2,a0,255
    1a06:	05000593          	li	a1,80
    1a0a:	8526                	mv	a0,s1
    1a0c:	fac42423          	sw	a2,-88(s0)
    1a10:	ec4fe0ef          	jal	ra,d4 <__umodsi3>
    1a14:	f8842303          	lw	t1,-120(s0)
    1a18:	0ff57493          	andi	s1,a0,255
    1a1c:	0a000593          	li	a1,160
    1a20:	851a                	mv	a0,t1
    1a22:	eb2fe0ef          	jal	ra,d4 <__umodsi3>
    1a26:	f9c42703          	lw	a4,-100(s0)
    1a2a:	fa042683          	lw	a3,-96(s0)
    1a2e:	fa842603          	lw	a2,-88(s0)
    1a32:	4785                	li	a5,1
    1a34:	85a6                	mv	a1,s1
    1a36:	0ff57513          	andi	a0,a0,255
    1a3a:	b33fe0ef          	jal	ra,56c <tft_draw_line>

    // int16_t square_x[] = {10, 60, 60, 10};
    // int16_t square_y[] = {10, 10, 60, 60};
    // _draw_poly(square_x, square_y, 4, RED, 3);

    Point16_t triangle[] = {{10, 20}, {40, 60}, {80, 70}};
    1a3e:	001407b7          	lui	a5,0x140
    1a42:	07a9                	addi	a5,a5,10
    1a44:	faf42e23          	sw	a5,-68(s0)
    1a48:	003c07b7          	lui	a5,0x3c0
    1a4c:	02878793          	addi	a5,a5,40 # 3c0028 <lib_i2c.c.d894f163+0x3b6006>
    1a50:	fcf42023          	sw	a5,-64(s0)
    1a54:	004607b7          	lui	a5,0x460
    1a58:	05078793          	addi	a5,a5,80 # 460050 <lib_i2c.c.d894f163+0x45602e>
    1a5c:	fcf42223          	sw	a5,-60(s0)
    // tft_draw_poly2(triangle, 3, RED, 3);

    tft_draw_solid_poly2(triangle, 3, RED, WHITE, 2);
    1a60:	fbc40793          	addi	a5,s0,-68
    EdgeInfo edges[num_vertices];
    1a64:	f8242623          	sw	sp,-116(s0)
    1a68:	faf42423          	sw	a5,-88(s0)
    1a6c:	fdc10113          	addi	sp,sp,-36
    1a70:	84be                	mv	s1,a5
    1a72:	4785                	li	a5,1
    1a74:	f8242e23          	sw	sp,-100(s0)
    1a78:	faf42023          	sw	a5,-96(s0)
    uint8_t valid_edges = 0;
    1a7c:	4301                	li	t1,0
        const Point16_t* p1 = &vertices[(i + 1) % num_vertices];
    1a7e:	fa042503          	lw	a0,-96(s0)
    1a82:	458d                	li	a1,3
    1a84:	f8642423          	sw	t1,-120(s0)
    1a88:	e70fe0ef          	jal	ra,f8 <__modsi3>
    1a8c:	00251593          	slli	a1,a0,0x2
    1a90:	fbc40793          	addi	a5,s0,-68
    1a94:	95be                	add	a1,a1,a5
        if (p0->y == p1->y) continue; // Skip horizontal edges
    1a96:	00249683          	lh	a3,2(s1)
    1a9a:	00259703          	lh	a4,2(a1)
    1a9e:	f8842303          	lw	t1,-120(s0)
    1aa2:	06e68863          	beq	a3,a4,1b12 <main+0x99e>
    1aa6:	00049503          	lh	a0,0(s1)
    1aaa:	00059583          	lh	a1,0(a1)
    1aae:	00131793          	slli	a5,t1,0x1
        if (p0->y < p1->y) {
    1ab2:	10e6de63          	bge	a3,a4,1bce <main+0xa5a>
    1ab6:	f9c42603          	lw	a2,-100(s0)
    1aba:	979a                	add	a5,a5,t1
    1abc:	078a                	slli	a5,a5,0x2
    1abe:	97b2                	add	a5,a5,a2
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    1ac0:	01051613          	slli	a2,a0,0x10
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    1ac4:	40a58533          	sub	a0,a1,a0
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    1ac8:	c790                	sw	a2,8(a5)
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    1aca:	40d705b3          	sub	a1,a4,a3
    1ace:	0542                	slli	a0,a0,0x10
    1ad0:	f6642e23          	sw	t1,-132(s0)
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    1ad4:	f8f42023          	sw	a5,-128(s0)
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    1ad8:	f8d42223          	sw	a3,-124(s0)
    1adc:	f8e42423          	sw	a4,-120(s0)
    1ae0:	dc0fe0ef          	jal	ra,a0 <__divsi3>
    1ae4:	f8042783          	lw	a5,-128(s0)
    1ae8:	f8842703          	lw	a4,-120(s0)
    1aec:	f8442683          	lw	a3,-124(s0)
    1af0:	f7c42303          	lw	t1,-132(s0)
    1af4:	c3c8                	sw	a0,4(a5)
    1af6:	00131793          	slli	a5,t1,0x1
    1afa:	f9c42603          	lw	a2,-100(s0)
    1afe:	979a                	add	a5,a5,t1
    1b00:	078a                	slli	a5,a5,0x2
    1b02:	97b2                	add	a5,a5,a2
        valid_edges++;
    1b04:	0305                	addi	t1,t1,1
        edges[valid_edges].y_min = y_min;
    1b06:	00d79023          	sh	a3,0(a5)
        edges[valid_edges].y_max = y_max;
    1b0a:	00e79123          	sh	a4,2(a5)
        valid_edges++;
    1b0e:	0ff37313          	andi	t1,t1,255
    for (uint16_t i = 0; i < num_vertices; i++) {
    1b12:	fa042783          	lw	a5,-96(s0)
    1b16:	4711                	li	a4,4
    1b18:	0491                	addi	s1,s1,4
    1b1a:	0785                	addi	a5,a5,1
    1b1c:	faf42023          	sw	a5,-96(s0)
    1b20:	f4e79fe3          	bne	a5,a4,1a7e <main+0x90a>
    1b24:	46d1                	li	a3,20
    1b26:	f9c42783          	lw	a5,-100(s0)
        for (uint8_t i = 0; i < valid_edges; i++) {
    1b2a:	4701                	li	a4,0
        uint8_t num_intersections = 0;
    1b2c:	4481                	li	s1,0
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    1b2e:	65a1                	lui	a1,0x8
    1b30:	a205                	j	1c50 <main+0xadc>
            _reset_timers(BTN_UP, model);        // First Release

        } else {
            // Long press detection
            uint32_t press_duration = now - model->press_time;
    1b32:	fb842783          	lw	a5,-72(s0)
    1b36:	f9442703          	lw	a4,-108(s0)
    1b3a:	40e78733          	sub	a4,a5,a4
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1b3e:	6785                	lui	a5,0x1
    1b40:	fa078793          	addi	a5,a5,-96 # fa0 <mini_vsnprintf+0x26>
    1b44:	c8e7fbe3          	bgeu	a5,a4,17da <main+0x666>
			printf("Long Press\n"); break;
    1b48:	6509                	lui	a0,0x2
    1b4a:	42050513          	addi	a0,a0,1056 # 2420 <I2C1_ER_IRQHandler+0x12a>
    1b4e:	d52ff0ef          	jal	ra,10a0 <puts>
    1b52:	b161                	j	17da <main+0x666>
            }
        }
        break;

    case BTN_UP: {
        uint32_t release_duration = now - model->release_time;
    1b54:	fb842703          	lw	a4,-72(s0)
    1b58:	fac42683          	lw	a3,-84(s0)
    1b5c:	8f15                	sub	a4,a4,a3

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    1b5e:	e38d                	bnez	a5,1b80 <main+0xa0c>
    1b60:	09f00793          	li	a5,159
    1b64:	00e7ee63          	bltu	a5,a4,1b80 <main+0xa0c>
    model->debounce_time = millis();
    1b68:	fb442783          	lw	a5,-76(s0)
    1b6c:	439c                	lw	a5,0(a5)
    1b6e:	faf42c23          	sw	a5,-72(s0)
    model->release_time = millis();
    1b72:	fb442783          	lw	a5,-76(s0)
    1b76:	439c                	lw	a5,0(a5)
    1b78:	faf42623          	sw	a5,-84(s0)
    model->btn_state = newState;
    1b7c:	4789                	li	a5,2
    1b7e:	b4e9                	j	1648 <main+0x4d4>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    1b80:	4685                	li	a3,1
    1b82:	0a000793          	li	a5,160
    1b86:	fad42823          	sw	a3,-80(s0)
    1b8a:	c4e7f8e3          	bgeu	a5,a4,17da <main+0x666>
			printf("Single Click\n");
    1b8e:	6509                	lui	a0,0x2
    1b90:	42c50513          	addi	a0,a0,1068 # 242c <I2C1_ER_IRQHandler+0x136>
			printf("Double Click\n");
    1b94:	d0cff0ef          	jal	ra,10a0 <puts>
    model->debounce_time = millis();
    1b98:	fb442783          	lw	a5,-76(s0)
    1b9c:	439c                	lw	a5,0(a5)
    1b9e:	faf42c23          	sw	a5,-72(s0)
    model->release_time = millis();
    1ba2:	fb442783          	lw	a5,-76(s0)
    1ba6:	439c                	lw	a5,0(a5)
    1ba8:	faf42623          	sw	a5,-84(s0)
    model->btn_state = newState;
    1bac:	478d                	li	a5,3
    1bae:	bc69                	j	1648 <main+0x4d4>
        break;
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
    1bb0:	c20785e3          	beqz	a5,17da <main+0x666>
    1bb4:	6789                	lui	a5,0x2
    1bb6:	43c78513          	addi	a0,a5,1084 # 243c <I2C1_ER_IRQHandler+0x146>
    1bba:	bfe9                	j	1b94 <main+0xa20>
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1bbc:	fae42c23          	sw	a4,-72(s0)
    1bc0:	b929                	j	17da <main+0x666>
    if (x_idx >= 160) x_idx = 0;
    1bc2:	00028023          	sb	zero,0(t0)
    1bc6:	bb85                	j	1936 <main+0x7c2>
    if (y_idx >= 80) y_idx = 0;
    1bc8:	00030023          	sb	zero,0(t1)
    1bcc:	bb7d                	j	198a <main+0x816>
    1bce:	f9c42603          	lw	a2,-100(s0)
    1bd2:	979a                	add	a5,a5,t1
    1bd4:	078a                	slli	a5,a5,0x2
    1bd6:	97b2                	add	a5,a5,a2
            edges[valid_edges].x_curr = x_start << 16;
    1bd8:	01059293          	slli	t0,a1,0x10
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    1bdc:	8d0d                	sub	a0,a0,a1
            edges[valid_edges].x_curr = x_start << 16;
    1bde:	0057a423          	sw	t0,8(a5)
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    1be2:	40e685b3          	sub	a1,a3,a4
    1be6:	0542                	slli	a0,a0,0x10
    1be8:	f6d42e23          	sw	a3,-132(s0)
    1bec:	f8642023          	sw	t1,-128(s0)
            edges[valid_edges].x_curr = x_start << 16;
    1bf0:	f8f42223          	sw	a5,-124(s0)
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    1bf4:	f8e42423          	sw	a4,-120(s0)
    1bf8:	ca8fe0ef          	jal	ra,a0 <__divsi3>
    1bfc:	f8842703          	lw	a4,-120(s0)
    1c00:	f8442783          	lw	a5,-124(s0)
    1c04:	f7c42603          	lw	a2,-132(s0)
    1c08:	86ba                	mv	a3,a4
    1c0a:	f8042303          	lw	t1,-128(s0)
    1c0e:	c3c8                	sw	a0,4(a5)
    1c10:	8732                	mv	a4,a2
    1c12:	b5d5                	j	1af6 <main+0x982>
            if (y >= edges[i].y_min && y < edges[i].y_max) {
    1c14:	00079603          	lh	a2,0(a5)
    1c18:	02c6c863          	blt	a3,a2,1c48 <main+0xad4>
    1c1c:	00279603          	lh	a2,2(a5)
    1c20:	02c6d463          	bge	a3,a2,1c48 <main+0xad4>
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    1c24:	0087a283          	lw	t0,8(a5)
    1c28:	00148513          	addi	a0,s1,1
    1c2c:	ff440613          	addi	a2,s0,-12
    1c30:	0486                	slli	s1,s1,0x1
    1c32:	94b2                	add	s1,s1,a2
    1c34:	00b28633          	add	a2,t0,a1
    1c38:	8641                	srai	a2,a2,0x10
    1c3a:	fcc49c23          	sh	a2,-40(s1)
                edges[i].x_curr += edges[i].x_step;
    1c3e:	43d0                	lw	a2,4(a5)
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    1c40:	0ff57493          	andi	s1,a0,255
                edges[i].x_curr += edges[i].x_step;
    1c44:	9616                	add	a2,a2,t0
    1c46:	c790                	sw	a2,8(a5)
        for (uint8_t i = 0; i < valid_edges; i++) {
    1c48:	0705                	addi	a4,a4,1
    1c4a:	0ff77713          	andi	a4,a4,255
    1c4e:	07b1                	addi	a5,a5,12
    1c50:	fc6712e3          	bne	a4,t1,1c14 <main+0xaa0>
    1c54:	fcc40293          	addi	t0,s0,-52
    1c58:	8616                	mv	a2,t0
        for (uint8_t i = 1; i < num_intersections; i++) {
    1c5a:	4705                	li	a4,1
            while (j >= 0 && intersections[j] > key) {
    1c5c:	50fd                	li	ra,-1
        for (uint8_t i = 1; i < num_intersections; i++) {
    1c5e:	1c976263          	bltu	a4,s1,1e22 <main+0xcae>
    1c62:	00148393          	addi	t2,s1,1
    1c66:	0386                	slli	t2,t2,0x1
    1c68:	8085                	srli	s1,s1,0x1
    1c6a:	1fc3f393          	andi	t2,t2,508
    1c6e:	048a                	slli	s1,s1,0x2
    1c70:	9396                	add	t2,t2,t0
    1c72:	9496                	add	s1,s1,t0
        for (uint8_t i = 0; i < num_intersections; i += 2) {
    1c74:	1e539863          	bne	t2,t0,1e64 <main+0xcf0>
    1c78:	0685                	addi	a3,a3,1
    1c7a:	01069713          	slli	a4,a3,0x10
    1c7e:	8341                	srli	a4,a4,0x10
    1c80:	06c2                	slli	a3,a3,0x10
    for (int16_t y = min_y; y <= max_y; y++) {
    1c82:	04700793          	li	a5,71
    1c86:	86c1                	srai	a3,a3,0x10
    1c88:	e8f71fe3          	bne	a4,a5,1b26 <main+0x9b2>
    1c8c:	4485                	li	s1,1
        Point16_t p1 = vertices[(i + 1) % num_vertices]; // Wrap around to connect last vertex to first
    1c8e:	458d                	li	a1,3
    1c90:	8526                	mv	a0,s1
    1c92:	c66fe0ef          	jal	ra,f8 <__modsi3>
    1c96:	fbc40793          	addi	a5,s0,-68
    1c9a:	050a                	slli	a0,a0,0x2
    1c9c:	953e                	add	a0,a0,a5
        tft_draw_line(p0.x, p0.y, p1.x, p1.y, color, width); // Draw edge with specified width
    1c9e:	00251683          	lh	a3,2(a0)
    1ca2:	00051603          	lh	a2,0(a0)
    1ca6:	fa842583          	lw	a1,-88(s0)
    1caa:	fa842503          	lw	a0,-88(s0)
    1cae:	6741                	lui	a4,0x10
    1cb0:	00259583          	lh	a1,2(a1) # 8002 <ch32_mess.c.a3b44ab6+0x3a03>
    1cb4:	00051503          	lh	a0,0(a0)
    1cb8:	4789                	li	a5,2
    1cba:	177d                	addi	a4,a4,-1
    1cbc:	8b1fe0ef          	jal	ra,56c <tft_draw_line>
    for (uint16_t i = 0; i < num_vertices; i++) {
    1cc0:	fa842783          	lw	a5,-88(s0)
    1cc4:	0485                	addi	s1,s1,1
    1cc6:	0791                	addi	a5,a5,4
    1cc8:	faf42423          	sw	a5,-88(s0)
    1ccc:	4791                	li	a5,4
    1cce:	fcf490e3          	bne	s1,a5,1c8e <main+0xb1a>
    tft_line_tests();


    // draw rectangles
    static uint8_t rect_idx = 0;
    tft_draw_rect(rect_idx, rect_idx, 160 - (rect_idx << 1), 80 - (rect_idx << 1), colors[rand8() % 19]);
    1cd2:	ca818793          	addi	a5,gp,-856 # 200000a4 <rect_idx.1>
    1cd6:	0007c483          	lbu	s1,0(a5)
    1cda:	f8c42103          	lw	sp,-116(s0)
    1cde:	01049313          	slli	t1,s1,0x10
    1ce2:	00149713          	slli	a4,s1,0x1
    1ce6:	01035313          	srli	t1,t1,0x10
    1cea:	fa642023          	sw	t1,-96(s0)
    1cee:	fae42423          	sw	a4,-88(s0)
    1cf2:	e36fe0ef          	jal	ra,328 <rand8>
    1cf6:	45cd                	li	a1,19
    1cf8:	bdcfe0ef          	jal	ra,d4 <__umodsi3>
    1cfc:	fa442783          	lw	a5,-92(s0)
    1d00:	fa842703          	lw	a4,-88(s0)
    1d04:	0ff57513          	andi	a0,a0,255
    1d08:	0506                	slli	a0,a0,0x1
    1d0a:	953e                	add	a0,a0,a5
    1d0c:	fa042303          	lw	t1,-96(s0)
    1d10:	05000693          	li	a3,80
    1d14:	0a000613          	li	a2,160
    1d18:	8e99                	sub	a3,a3,a4
    1d1a:	8e19                	sub	a2,a2,a4
    1d1c:	00055703          	lhu	a4,0(a0)
    1d20:	06c2                	slli	a3,a3,0x10
    1d22:	0642                	slli	a2,a2,0x10
    1d24:	82c1                	srli	a3,a3,0x10
    1d26:	8241                	srli	a2,a2,0x10
    1d28:	859a                	mv	a1,t1
    1d2a:	851a                	mv	a0,t1
    1d2c:	9cdfe0ef          	jal	ra,6f8 <tft_draw_rect>
    rect_idx += 1;
    1d30:	0485                	addi	s1,s1,1
    1d32:	0ff4f493          	andi	s1,s1,255
    if (rect_idx >= 40) rect_idx = 0;
    1d36:	02700713          	li	a4,39
    1d3a:	ca818793          	addi	a5,gp,-856 # 200000a4 <rect_idx.1>
    1d3e:	16976463          	bltu	a4,s1,1ea6 <main+0xd32>
    rect_idx += 1;
    1d42:	00978023          	sb	s1,0(a5)

    // draw random rectangles
    tft_draw_rect(rand8() % 140, rand8() % 60, 20, 20, colors[rand8() % 19]);
    1d46:	de2fe0ef          	jal	ra,328 <rand8>
    1d4a:	faa42023          	sw	a0,-96(s0)
    1d4e:	ddafe0ef          	jal	ra,328 <rand8>
    1d52:	84aa                	mv	s1,a0
    1d54:	dd4fe0ef          	jal	ra,328 <rand8>
    1d58:	45cd                	li	a1,19
    1d5a:	b7afe0ef          	jal	ra,d4 <__umodsi3>
    1d5e:	fa442703          	lw	a4,-92(s0)
    1d62:	0ff57793          	andi	a5,a0,255
    1d66:	0786                	slli	a5,a5,0x1
    1d68:	97ba                	add	a5,a5,a4
    1d6a:	0007d703          	lhu	a4,0(a5)
    1d6e:	03c00593          	li	a1,60
    1d72:	8526                	mv	a0,s1
    1d74:	fae42423          	sw	a4,-88(s0)
    1d78:	b5cfe0ef          	jal	ra,d4 <__umodsi3>
    1d7c:	fa042683          	lw	a3,-96(s0)
    1d80:	0ff57493          	andi	s1,a0,255
    1d84:	08c00593          	li	a1,140
    1d88:	8536                	mv	a0,a3
    1d8a:	b4afe0ef          	jal	ra,d4 <__umodsi3>
    1d8e:	fa842703          	lw	a4,-88(s0)
    1d92:	4651                	li	a2,20
    1d94:	46d1                	li	a3,20
    1d96:	85a6                	mv	a1,s1
    1d98:	0ff57513          	andi	a0,a0,255
    1d9c:	95dfe0ef          	jal	ra,6f8 <tft_draw_rect>

    // draw filled rectangles
    tft_fill_rect(rand8() % 140, rand8() % 60, 20, 20, colors[rand8() % 19]);
    1da0:	d88fe0ef          	jal	ra,328 <rand8>
    1da4:	faa42023          	sw	a0,-96(s0)
    1da8:	d80fe0ef          	jal	ra,328 <rand8>
    1dac:	84aa                	mv	s1,a0
    1dae:	d7afe0ef          	jal	ra,328 <rand8>
    1db2:	45cd                	li	a1,19
    1db4:	b20fe0ef          	jal	ra,d4 <__umodsi3>
    1db8:	fa442703          	lw	a4,-92(s0)
    1dbc:	0ff57793          	andi	a5,a0,255
    1dc0:	0786                	slli	a5,a5,0x1
    1dc2:	97ba                	add	a5,a5,a4
    1dc4:	0007d703          	lhu	a4,0(a5)
    1dc8:	03c00593          	li	a1,60
    1dcc:	8526                	mv	a0,s1
    1dce:	fae42423          	sw	a4,-88(s0)
    1dd2:	b02fe0ef          	jal	ra,d4 <__umodsi3>
    1dd6:	fa042683          	lw	a3,-96(s0)
    1dda:	0ff57493          	andi	s1,a0,255
    1dde:	08c00593          	li	a1,140
    1de2:	8536                	mv	a0,a3
    1de4:	af0fe0ef          	jal	ra,d4 <__umodsi3>
    1de8:	fa842703          	lw	a4,-88(s0)
    1dec:	46d1                	li	a3,20
    1dee:	4651                	li	a2,20
    1df0:	85a6                	mv	a1,s1
    1df2:	0ff57513          	andi	a0,a0,255
    1df6:	a43fe0ef          	jal	ra,838 <tft_fill_rect>
	handler();
	return micros() - now;
    1dfa:	e000f7b7          	lui	a5,0xe000f
    1dfe:	4788                	lw	a0,8(a5)
    1e00:	03000593          	li	a1,48
    1e04:	aa4fe0ef          	jal	ra,a8 <__hidden___udivsi3>
			// uint32_t runtime_i2c = SysTick_getRunTime(ssd1306_draw_test);
			// sprintf(str_output, "I2C runtime: %lu us", runtime_i2c);
			// ssd1306_print_str_at(str_output, 0, 0);

			uint32_t runtime_tft = SysTick_getRunTime(tft_test);
			printf("ST7735 runtime: %lu us\n", runtime_tft);
    1e08:	f9042783          	lw	a5,-112(s0)
    1e0c:	40f505b3          	sub	a1,a0,a5
    1e10:	6509                	lui	a0,0x2
    1e12:	45c50513          	addi	a0,a0,1116 # 245c <I2C1_ER_IRQHandler+0x166>
    1e16:	92cff0ef          	jal	ra,f42 <printf>
		uint32_t now = millis();
    1e1a:	f9842483          	lw	s1,-104(s0)
    1e1e:	fccff06f          	j	15ea <main+0x476>
    1e22:	fff70793          	addi	a5,a4,-1 # ffff <lib_i2c.c.d894f163+0x5fdd>
            int16_t key = intersections[i];
    1e26:	00261503          	lh	a0,2(a2)
    1e2a:	07e2                	slli	a5,a5,0x18
    1e2c:	87e1                	srai	a5,a5,0x18
    1e2e:	85b2                	mv	a1,a2
            while (j >= 0 && intersections[j] > key) {
    1e30:	00059383          	lh	t2,0(a1)
    1e34:	00755a63          	bge	a0,t2,1e48 <main+0xcd4>
    1e38:	17fd                	addi	a5,a5,-1
    1e3a:	07e2                	slli	a5,a5,0x18
                intersections[j + 1] = intersections[j];
    1e3c:	00759123          	sh	t2,2(a1)
    1e40:	87e1                	srai	a5,a5,0x18
            while (j >= 0 && intersections[j] > key) {
    1e42:	15f9                	addi	a1,a1,-2
    1e44:	fe1796e3          	bne	a5,ra,1e30 <main+0xcbc>
            intersections[j + 1] = key;
    1e48:	0785                	addi	a5,a5,1
    1e4a:	07e2                	slli	a5,a5,0x18
    1e4c:	87e1                	srai	a5,a5,0x18
    1e4e:	0786                	slli	a5,a5,0x1
    1e50:	ff440593          	addi	a1,s0,-12
    1e54:	97ae                	add	a5,a5,a1
        for (uint8_t i = 1; i < num_intersections; i++) {
    1e56:	0705                	addi	a4,a4,1
            intersections[j + 1] = key;
    1e58:	fca79c23          	sh	a0,-40(a5) # e000efd8 <_eusrstack+0xc000e7d8>
        for (uint8_t i = 1; i < num_intersections; i++) {
    1e5c:	0ff77713          	andi	a4,a4,255
    1e60:	0609                	addi	a2,a2,2
    1e62:	bbf5                	j	1c5e <main+0xaea>
            if (i + 1 >= num_intersections) break;
    1e64:	e0548ae3          	beq	s1,t0,1c78 <main+0xb04>
            int16_t x0 = intersections[i];
    1e68:	00029503          	lh	a0,0(t0)
            int16_t x1 = intersections[i + 1];
    1e6c:	00229603          	lh	a2,2(t0)
            if (x1 > x0) {
    1e70:	02c55963          	bge	a0,a2,1ea2 <main+0xd2e>
                tft_draw_line(x0, y, x1, y, fill_color, 1);
    1e74:	6741                	lui	a4,0x10
    1e76:	85b6                	mv	a1,a3
    1e78:	4785                	li	a5,1
    1e7a:	80070713          	addi	a4,a4,-2048 # f800 <lib_i2c.c.d894f163+0x57de>
    1e7e:	f8542023          	sw	t0,-128(s0)
    1e82:	f8742223          	sw	t2,-124(s0)
    1e86:	f8642423          	sw	t1,-120(s0)
    1e8a:	fad42023          	sw	a3,-96(s0)
    1e8e:	edefe0ef          	jal	ra,56c <tft_draw_line>
    1e92:	f8042283          	lw	t0,-128(s0)
    1e96:	f8442383          	lw	t2,-124(s0)
    1e9a:	f8842303          	lw	t1,-120(s0)
    1e9e:	fa042683          	lw	a3,-96(s0)
    1ea2:	0291                	addi	t0,t0,4
    1ea4:	bbc1                	j	1c74 <main+0xb00>
    if (rect_idx >= 40) rect_idx = 0;
    1ea6:	00078023          	sb	zero,0(a5)
    1eaa:	bd71                	j	1d46 <main+0xbd2>

00001eac <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    1eac:	fdc10113          	addi	sp,sp,-36
    1eb0:	ce22                	sw	s0,28(sp)
    1eb2:	d006                	sw	ra,32(sp)
    1eb4:	cc26                	sw	s1,24(sp)
    1eb6:	842a                	mv	s0,a0
	if( tween <= 0 ) return hexa;
    1eb8:	0ac05f63          	blez	a2,1f76 <TweenHexColors+0xca>
	if( tween >= 255 ) return hexb;
    1ebc:	0fe00793          	li	a5,254
    1ec0:	84ae                	mv	s1,a1
    1ec2:	0cc7c163          	blt	a5,a2,1f84 <TweenHexColors+0xd8>
	int32_t aamt = 255-tween;
    1ec6:	0ff00293          	li	t0,255
    1eca:	40c282b3          	sub	t0,t0,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1ece:	8596                	mv	a1,t0
    1ed0:	0ff57513          	andi	a0,a0,255
    1ed4:	c216                	sw	t0,4(sp)
	int32_t aamt = 255-tween;
    1ed6:	c032                	sw	a2,0(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1ed8:	1fffe097          	auipc	ra,0x1fffe
    1edc:	170080e7          	jalr	368(ra) # 20000048 <FastMultiply>
    1ee0:	4602                	lw	a2,0(sp)
    1ee2:	ca2a                	sw	a0,20(sp)
    1ee4:	0ff4f513          	andi	a0,s1,255
    1ee8:	85b2                	mv	a1,a2
    1eea:	1fffe097          	auipc	ra,0x1fffe
    1eee:	15e080e7          	jalr	350(ra) # 20000048 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1ef2:	4292                	lw	t0,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1ef4:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    1ef6:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1efa:	8596                	mv	a1,t0
    1efc:	0ff57513          	andi	a0,a0,255
    1f00:	c616                	sw	t0,12(sp)
    1f02:	1fffe097          	auipc	ra,0x1fffe
    1f06:	146080e7          	jalr	326(ra) # 20000048 <FastMultiply>
    1f0a:	4602                	lw	a2,0(sp)
    1f0c:	c42a                	sw	a0,8(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    1f0e:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1f12:	85b2                	mv	a1,a2
    1f14:	0ff57513          	andi	a0,a0,255
    1f18:	c232                	sw	a2,4(sp)
    1f1a:	1fffe097          	auipc	ra,0x1fffe
    1f1e:	12e080e7          	jalr	302(ra) # 20000048 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1f22:	42b2                	lw	t0,12(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1f24:	c02a                	sw	a0,0(sp)
	int32_t hag = (hexa>>16) & 0xff;
    1f26:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1f2a:	8596                	mv	a1,t0
    1f2c:	0ff57513          	andi	a0,a0,255
    1f30:	1fffe097          	auipc	ra,0x1fffe
    1f34:	118080e7          	jalr	280(ra) # 20000048 <FastMultiply>
    1f38:	4612                	lw	a2,4(sp)
    1f3a:	842a                	mv	s0,a0
	int32_t hbg = (hexb>>16) & 0xff;
    1f3c:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1f40:	85b2                	mv	a1,a2
    1f42:	0ff57513          	andi	a0,a0,255
    1f46:	1fffe097          	auipc	ra,0x1fffe
    1f4a:	102080e7          	jalr	258(ra) # 20000048 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1f4e:	4342                	lw	t1,16(sp)
    1f50:	47d2                	lw	a5,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1f52:	4682                	lw	a3,0(sp)
    1f54:	4722                	lw	a4,8(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1f56:	979a                	add	a5,a5,t1
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1f58:	942a                	add	s0,s0,a0
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1f5a:	9736                	add	a4,a4,a3
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1f5c:	08078793          	addi	a5,a5,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1f60:	08070713          	addi	a4,a4,128
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1f64:	08040413          	addi	s0,s0,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1f68:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    1f6a:	f0077713          	andi	a4,a4,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1f6e:	8021                	srli	s0,s0,0x8
	return b | (r<<8) | (g<<16);
    1f70:	8fd9                	or	a5,a5,a4
    1f72:	0442                	slli	s0,s0,0x10
    1f74:	8c5d                	or	s0,s0,a5
}
    1f76:	5082                	lw	ra,32(sp)
    1f78:	8522                	mv	a0,s0
    1f7a:	4472                	lw	s0,28(sp)
    1f7c:	44e2                	lw	s1,24(sp)
    1f7e:	02410113          	addi	sp,sp,36
    1f82:	8082                	ret
	if( tween >= 255 ) return hexb;
    1f84:	842e                	mv	s0,a1
    1f86:	bfc5                	j	1f76 <TweenHexColors+0xca>

00001f88 <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1f88:	1111                	addi	sp,sp,-28
    1f8a:	c826                	sw	s1,16(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    1f8c:	c9c1a483          	lw	s1,-868(gp) # 20000098 <WS2812LEDs>
	int place = WS2812LEDPlace;
    1f90:	c9818713          	addi	a4,gp,-872 # 20000094 <WS2812LEDPlace>
    1f94:	4318                	lw	a4,0(a4)
    1f96:	c9818613          	addi	a2,gp,-872 # 20000094 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1f9a:	ca22                	sw	s0,20(sp)
    1f9c:	cc06                	sw	ra,24(sp)
    1f9e:	87aa                	mv	a5,a0
    1fa0:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
    1fa2:	03050693          	addi	a3,a0,48
    1fa6:	c032                	sw	a2,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    1fa8:	04074a63          	bltz	a4,1ffc <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    1fac:	04f68a63          	beq	a3,a5,2000 <WS2812FillBuffSec.constprop.0+0x78>
	{
		if( place >= ledcount )
    1fb0:	04974f63          	blt	a4,s1,200e <WS2812FillBuffSec.constprop.0+0x86>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    1fb4:	40f68633          	sub	a2,a3,a5
    1fb8:	4581                	li	a1,0
    1fba:	853e                	mv	a0,a5
    1fbc:	c23a                	sw	a4,4(sp)
    1fbe:	80eff0ef          	jal	ra,fcc <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    1fc2:	4712                	lw	a4,4(sp)
    1fc4:	cc15                	beqz	s0,2000 <WS2812FillBuffSec.constprop.0+0x78>
			{
				if( place == ledcount )
    1fc6:	00e49a63          	bne	s1,a4,1fda <WS2812FillBuffSec.constprop.0+0x52>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    1fca:	400206b7          	lui	a3,0x40020
    1fce:	5a9c                	lw	a5,48(a3)
    1fd0:	fdf7f793          	andi	a5,a5,-33
    1fd4:	da9c                	sw	a5,48(a3)
					WS2812BLEDInUse = 0;
    1fd6:	c801aa23          	sw	zero,-876(gp) # 20000090 <WS2812BLEDInUse>
				}
				place++;
    1fda:	0705                	addi	a4,a4,1
    1fdc:	a015                	j	2000 <WS2812FillBuffSec.constprop.0+0x78>
		(*ptr++) = 0;
    1fde:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
    1fe2:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    1fe6:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    1fea:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    1fee:	00079423          	sh	zero,8(a5)
		place++;
    1ff2:	0705                	addi	a4,a4,1
    1ff4:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
    1ff6:	fe079f23          	sh	zero,-2(a5)
    1ffa:	b77d                	j	1fa8 <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
    1ffc:	fef691e3          	bne	a3,a5,1fde <WS2812FillBuffSec.constprop.0+0x56>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
    2000:	4782                	lw	a5,0(sp)
}
    2002:	40e2                	lw	ra,24(sp)
    2004:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
    2006:	c398                	sw	a4,0(a5)
}
    2008:	44c2                	lw	s1,16(sp)
    200a:	0171                	addi	sp,sp,28
    200c:	8082                	ret
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    200e:	c4418613          	addi	a2,gp,-956 # 20000040 <tween>
    2012:	4210                	lw	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    2014:	00170293          	addi	t0,a4,1
    2018:	9732                	add	a4,a4,a2
    201a:	0ff00613          	li	a2,255
    201e:	00e04363          	bgtz	a4,2024 <WS2812FillBuffSec.constprop.0+0x9c>
    2022:	4601                	li	a2,0
    2024:	007f45b7          	lui	a1,0x7f4
    2028:	650d                	lui	a0,0x3
    202a:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.d894f163+0x7ea01e>
    202e:	0ff50513          	addi	a0,a0,255 # 30ff <_data_lma+0x523>
    2032:	c616                	sw	t0,12(sp)
    2034:	c43e                	sw	a5,8(sp)
    2036:	c236                	sw	a3,4(sp)
    2038:	3d95                	jal	1eac <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    203a:	00b55613          	srli	a2,a0,0xb
    203e:	6709                	lui	a4,0x2
    2040:	67870713          	addi	a4,a4,1656 # 2678 <bitquartets.8>
    2044:	8a79                	andi	a2,a2,30
    2046:	963a                	add	a2,a2,a4
    2048:	47a2                	lw	a5,8(sp)
    204a:	00065603          	lhu	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    204e:	42b2                	lw	t0,12(sp)
    2050:	4692                	lw	a3,4(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    2052:	00c79023          	sh	a2,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    2056:	00755613          	srli	a2,a0,0x7
    205a:	8a79                	andi	a2,a2,30
    205c:	963a                	add	a2,a2,a4
    205e:	00065603          	lhu	a2,0(a2)
		ptr += 6;
    2062:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    2064:	fec79b23          	sh	a2,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    2068:	00355613          	srli	a2,a0,0x3
    206c:	8a79                	andi	a2,a2,30
    206e:	963a                	add	a2,a2,a4
    2070:	00065603          	lhu	a2,0(a2)
    2074:	fec79c23          	sh	a2,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    2078:	00f57613          	andi	a2,a0,15
    207c:	0606                	slli	a2,a2,0x1
    207e:	963a                	add	a2,a2,a4
    2080:	00065603          	lhu	a2,0(a2)
    2084:	fec79d23          	sh	a2,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    2088:	01355613          	srli	a2,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    208c:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    208e:	8a79                	andi	a2,a2,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    2090:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    2092:	963a                	add	a2,a2,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    2094:	953a                	add	a0,a0,a4
    2096:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    209a:	00065603          	lhu	a2,0(a2)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    209e:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    20a2:	fec79e23          	sh	a2,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    20a6:	8716                	mv	a4,t0
    20a8:	b711                	j	1fac <WS2812FillBuffSec.constprop.0+0x24>

000020aa <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    20aa:	fcc10113          	addi	sp,sp,-52
    20ae:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    20b0:	400207b7          	lui	a5,0x40020
    20b4:	439c                	lw	a5,0(a5)
{
    20b6:	d022                	sw	s0,32(sp)
    20b8:	ce26                	sw	s1,28(sp)
    20ba:	d806                	sw	ra,48(sp)
    20bc:	d616                	sw	t0,44(sp)
    20be:	d41a                	sw	t1,40(sp)
    20c0:	d21e                	sw	t2,36(sp)
    20c2:	cc2a                	sw	a0,24(sp)
    20c4:	ca2e                	sw	a1,20(sp)
    20c6:	c832                	sw	a2,16(sp)
    20c8:	c636                	sw	a3,12(sp)
    20ca:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    20cc:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    20ce:	40020437          	lui	s0,0x40020
    20d2:	10000493          	li	s1,256
    20d6:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    20d8:	4782                	lw	a5,0(sp)
    20da:	4007f793          	andi	a5,a5,1024
    20de:	c789                	beqz	a5,20e8 <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    20e0:	4585                	li	a1,1
    20e2:	cb818513          	addi	a0,gp,-840 # 200000b4 <WS2812dmabuff>
    20e6:	354d                	jal	1f88 <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    20e8:	4782                	lw	a5,0(sp)
    20ea:	2007f793          	andi	a5,a5,512
    20ee:	c789                	beqz	a5,20f8 <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    20f0:	4581                	li	a1,0
    20f2:	ce818513          	addi	a0,gp,-792 # 200000e4 <WS2812dmabuff+0x30>
    20f6:	3d49                	jal	1f88 <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    20f8:	401c                	lw	a5,0(s0)
    20fa:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    20fc:	4782                	lw	a5,0(sp)
    20fe:	1007f793          	andi	a5,a5,256
    2102:	fbf1                	bnez	a5,20d6 <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    2104:	5402                	lw	s0,32(sp)
    2106:	50c2                	lw	ra,48(sp)
    2108:	52b2                	lw	t0,44(sp)
    210a:	5322                	lw	t1,40(sp)
    210c:	5392                	lw	t2,36(sp)
    210e:	44f2                	lw	s1,28(sp)
    2110:	4562                	lw	a0,24(sp)
    2112:	45d2                	lw	a1,20(sp)
    2114:	4642                	lw	a2,16(sp)
    2116:	46b2                	lw	a3,12(sp)
    2118:	4722                	lw	a4,8(sp)
    211a:	4792                	lw	a5,4(sp)
    211c:	03410113          	addi	sp,sp,52
    2120:	30200073          	mret

00002124 <SysTick_Handler>:
{
    2124:	1151                	addi	sp,sp,-12
    2126:	c03e                	sw	a5,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    2128:	e000f7b7          	lui	a5,0xe000f
{
    212c:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    212e:	4b98                	lw	a4,16(a5)
{
    2130:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    2132:	66b1                	lui	a3,0xc
    2134:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x1b5e>
    2138:	9736                	add	a4,a4,a3
    213a:	cb98                	sw	a4,16(a5)
	SysTick->SR = 0x00000000;
    213c:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>
	systick_millis++;
    2140:	cb018793          	addi	a5,gp,-848 # 200000ac <systick_millis>
    2144:	4398                	lw	a4,0(a5)
}
    2146:	46a2                	lw	a3,8(sp)
	systick_millis++;
    2148:	0705                	addi	a4,a4,1
    214a:	c398                	sw	a4,0(a5)
}
    214c:	4712                	lw	a4,4(sp)
    214e:	4782                	lw	a5,0(sp)
    2150:	0131                	addi	sp,sp,12
    2152:	30200073          	mret

00002156 <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    2156:	7179                	addi	sp,sp,-48
    2158:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    215a:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    215e:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    2160:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    2164:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    2168:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    216c:	cc26                	sw	s1,24(sp)
    216e:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    2170:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    2174:	d416                	sw	t0,40(sp)
    2176:	d21a                	sw	t1,36(sp)
    2178:	d01e                	sw	t2,32(sp)
    217a:	ce22                	sw	s0,28(sp)
    217c:	ca2a                	sw	a0,20(sp)
    217e:	c82e                	sw	a1,16(sp)
    2180:	c632                	sw	a2,12(sp)
    2182:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    2184:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    2186:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    2188:	c305                	beqz	a4,21a8 <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    218a:	39818713          	addi	a4,gp,920 # 20000794 <i2c_slave_state>
    218e:	4685                	li	a3,1
    2190:	07c2                	slli	a5,a5,0x10
    2192:	83c1                	srli	a5,a5,0x10
    2194:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    2198:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    219c:	839d                	srli	a5,a5,0x7
    219e:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    21a0:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    21a4:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    21a8:	0404f793          	andi	a5,s1,64
    21ac:	c795                	beqz	a5,21d8 <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    21ae:	39818793          	addi	a5,gp,920 # 20000794 <i2c_slave_state>
    21b2:	0007c703          	lbu	a4,0(a5)
    21b6:	c379                	beqz	a4,227c <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
    21b8:	40005737          	lui	a4,0x40005
    21bc:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    21c0:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    21c4:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    21c8:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    21cc:	0ff77713          	andi	a4,a4,255
    21d0:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    21d4:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    21d8:	0804f793          	andi	a5,s1,128
    21dc:	c7a1                	beqz	a5,2224 <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    21de:	39818793          	addi	a5,gp,920 # 20000794 <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    21e2:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    21e6:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    21ea:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    21ee:	400057b7          	lui	a5,0x40005
    21f2:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    21f6:	39818413          	addi	s0,gp,920 # 20000794 <i2c_slave_state>
    21fa:	cb79                	beqz	a4,22d0 <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    21fc:	01044703          	lbu	a4,16(s0) # 40020010 <_eusrstack+0x2001f810>
    2200:	0ee57663          	bgeu	a0,a4,22ec <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    2204:	4458                	lw	a4,12(s0)
    2206:	972a                	add	a4,a4,a0
    2208:	00074703          	lbu	a4,0(a4)
    220c:	0ff77713          	andi	a4,a4,255
    2210:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    2214:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    2216:	c391                	beqz	a5,221a <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    2218:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    221a:	00244783          	lbu	a5,2(s0)
    221e:	0785                	addi	a5,a5,1
    2220:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    2224:	88c1                	andi	s1,s1,16
    2226:	cc85                	beqz	s1,225e <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    2228:	40005737          	lui	a4,0x40005
    222c:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    2230:	07c2                	slli	a5,a5,0x10
    2232:	83c1                	srli	a5,a5,0x10
    2234:	dff7f793          	andi	a5,a5,-513
    2238:	07c2                	slli	a5,a5,0x10
    223a:	83c1                	srli	a5,a5,0x10
    223c:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
    2240:	39818793          	addi	a5,gp,920 # 20000794 <i2c_slave_state>
    2244:	02a7c703          	lbu	a4,42(a5)
    2248:	c74d                	beqz	a4,22f2 <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
    224a:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    224c:	cb09                	beqz	a4,225e <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    224e:	0017c503          	lbu	a0,1(a5)
    2252:	0027c583          	lbu	a1,2(a5)
    2256:	8d89                	sub	a1,a1,a0
    2258:	0ff5f593          	andi	a1,a1,255
    225c:	9702                	jalr	a4
            }
        }
    }
}
    225e:	4472                	lw	s0,28(sp)
    2260:	50b2                	lw	ra,44(sp)
    2262:	52a2                	lw	t0,40(sp)
    2264:	5312                	lw	t1,36(sp)
    2266:	5382                	lw	t2,32(sp)
    2268:	44e2                	lw	s1,24(sp)
    226a:	4552                	lw	a0,20(sp)
    226c:	45c2                	lw	a1,16(sp)
    226e:	4632                	lw	a2,12(sp)
    2270:	46a2                	lw	a3,8(sp)
    2272:	4712                	lw	a4,4(sp)
    2274:	4782                	lw	a5,0(sp)
    2276:	6145                	addi	sp,sp,48
    2278:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    227c:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    2280:	4705                	li	a4,1
    2282:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    2286:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    228a:	c695                	beqz	a3,22b6 <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    228c:	0107c683          	lbu	a3,16(a5)
    2290:	f4d774e3          	bgeu	a4,a3,21d8 <I2C1_EV_IRQHandler+0x82>
    2294:	0287c683          	lbu	a3,40(a5)
    2298:	f2a1                	bnez	a3,21d8 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    229a:	400056b7          	lui	a3,0x40005
    229e:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    22a2:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    22a4:	96ba                	add	a3,a3,a4
    22a6:	0ff67613          	andi	a2,a2,255
    22aa:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    22ae:	0705                	addi	a4,a4,1
    22b0:	00e78123          	sb	a4,2(a5)
    22b4:	b715                	j	21d8 <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    22b6:	0087c683          	lbu	a3,8(a5)
    22ba:	f0d77fe3          	bgeu	a4,a3,21d8 <I2C1_EV_IRQHandler+0x82>
    22be:	01c7c683          	lbu	a3,28(a5)
    22c2:	fa99                	bnez	a3,21d8 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    22c4:	400056b7          	lui	a3,0x40005
    22c8:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    22cc:	43d4                	lw	a3,4(a5)
    22ce:	bfd9                	j	22a4 <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    22d0:	00844703          	lbu	a4,8(s0)
    22d4:	00e57c63          	bgeu	a0,a4,22ec <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    22d8:	4058                	lw	a4,4(s0)
    22da:	972a                	add	a4,a4,a0
    22dc:	00074703          	lbu	a4,0(a4)
    22e0:	0ff77713          	andi	a4,a4,255
    22e4:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    22e8:	4c1c                	lw	a5,24(s0)
    22ea:	b735                	j	2216 <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    22ec:	00079823          	sh	zero,16(a5)
    22f0:	bf15                	j	2224 <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    22f2:	4bd8                	lw	a4,20(a5)
    22f4:	bfa1                	j	224c <I2C1_EV_IRQHandler+0xf6>

000022f6 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    22f6:	1151                	addi	sp,sp,-12
    22f8:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
    22fa:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
    22fe:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    2300:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    2304:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    2306:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    230a:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
    230e:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    2310:	cf89                	beqz	a5,232a <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    2312:	41475783          	lhu	a5,1044(a4)
    2316:	40070713          	addi	a4,a4,1024
    231a:	07c2                	slli	a5,a5,0x10
    231c:	83c1                	srli	a5,a5,0x10
    231e:	eff7f793          	andi	a5,a5,-257
    2322:	07c2                	slli	a5,a5,0x10
    2324:	83c1                	srli	a5,a5,0x10
    2326:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    232a:	2006f793          	andi	a5,a3,512
    232e:	cf89                	beqz	a5,2348 <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    2330:	40005737          	lui	a4,0x40005
    2334:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    2338:	07c2                	slli	a5,a5,0x10
    233a:	83c1                	srli	a5,a5,0x10
    233c:	dff7f793          	andi	a5,a5,-513
    2340:	07c2                	slli	a5,a5,0x10
    2342:	83c1                	srli	a5,a5,0x10
    2344:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    2348:	4006f693          	andi	a3,a3,1024
    234c:	ce89                	beqz	a3,2366 <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    234e:	40005737          	lui	a4,0x40005
    2352:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    2356:	07c2                	slli	a5,a5,0x10
    2358:	83c1                	srli	a5,a5,0x10
    235a:	bff7f793          	andi	a5,a5,-1025
    235e:	07c2                	slli	a5,a5,0x10
    2360:	83c1                	srli	a5,a5,0x10
    2362:	40f71a23          	sh	a5,1044(a4)
    }
}
    2366:	46a2                	lw	a3,8(sp)
    2368:	4712                	lw	a4,4(sp)
    236a:	4782                	lw	a5,0(sp)
    236c:	0131                	addi	sp,sp,12
    236e:	30200073          	mret
    2372:	0000                	unimp
    2374:	4d49                	li	s10,18
    2376:	5720                	lw	s0,104(a4)
    2378:	4952                	lw	s2,20(sp)
    237a:	4554                	lw	a3,12(a0)
    237c:	4e45                	li	t3,17
    237e:	5420                	lw	s0,104(s0)
    2380:	000d0a4f          	fnmadd.s	fs4,fs10,ft0,ft0,rne
    2384:	4d49                	li	s10,18
    2386:	5220                	lw	s0,96(a2)
    2388:	4145                	li	sp,17
    238a:	4544                	lw	s1,12(a0)
    238c:	204e                	fld	ft0,208(sp)
    238e:	5246                	lw	tp,112(sp)
    2390:	0a2e4d4f          	fnmadd.d	fs10,ft8,ft2,ft1,rmm
    2394:	000d                	c.nop	3
    2396:	0000                	unimp
    2398:	000a                	c.slli	zero,0x2
    239a:	0000                	unimp
    239c:	3249                	jal	1d1e <main+0xbaa>
    239e:	30203a43          	fmadd.s	fs4,ft0,ft2,ft6,rup
    23a2:	2578                	fld	fa4,200(a0)
    23a4:	3230                	fld	fa2,96(a2)
    23a6:	0058                	addi	a4,sp,4
    23a8:	6146                	flw	ft2,80(sp)
    23aa:	6c69                	lui	s8,0x1a
    23ac:	6465                	lui	s0,0x19
    23ae:	7420                	flw	fs0,104(s0)
    23b0:	6e69206f          	j	94a96 <lib_i2c.c.d894f163+0x8aa74>
    23b4:	7469                	lui	s0,0xffffa
    23b6:	4920                	lw	s0,80(a0)
    23b8:	4332                	lw	t1,12(sp)
    23ba:	0000                	unimp
    23bc:	6548                	flw	fa0,12(a0)
    23be:	6c6c                	flw	fa1,92(s0)
    23c0:	6542206f          	j	24a14 <lib_i2c.c.d894f163+0x1a9f2>
    23c4:	2165                	jal	286c <font+0x1ac>
    23c6:	0000                	unimp
    23c8:	2d2d                	jal	2a02 <font+0x342>
    23ca:	2d2d                	jal	2a04 <font+0x344>
    23cc:	6e616353          	0x6e616353
    23d0:	696e                	flw	fs2,216(sp)
    23d2:	676e                	flw	fa4,216(sp)
    23d4:	4920                	lw	s0,80(a0)
    23d6:	4332                	lw	t1,12(sp)
    23d8:	4220                	lw	s0,64(a2)
    23da:	7375                	lui	t1,0xffffd
    23dc:	6620                	flw	fs0,72(a2)
    23de:	4420726f          	jal	tp,9820 <ch32_mess.c.a3b44ab6+0x5221>
    23e2:	7665                	lui	a2,0xffff9
    23e4:	6369                	lui	t1,0x1a
    23e6:	7365                	lui	t1,0xffff9
    23e8:	2d2d                	jal	2a22 <font+0x362>
    23ea:	002d                	c.nop	11
    23ec:	2d2d                	jal	2a26 <font+0x366>
    23ee:	2d2d                	jal	2a28 <font+0x368>
    23f0:	6f44                	flw	fs1,28(a4)
    23f2:	656e                	flw	fa0,216(sp)
    23f4:	5320                	lw	s0,96(a4)
    23f6:	6e6e6163          	bltu	t3,t1,2ad8 <font+0x418>
    23fa:	6e69                	lui	t3,0x1a
    23fc:	2d2d2d67          	0x2d2d2d67
    2400:	0a2d                	addi	s4,s4,11
    2402:	0000                	unimp
    2404:	6e756f63          	bltu	a0,t2,2b02 <font+0x442>
    2408:	6574                	flw	fa3,76(a0)
    240a:	2072                	fld	ft0,280(sp)
    240c:	6c25                	lui	s8,0x9
    240e:	0075                	c.nop	29
    2410:	3249                	jal	1d92 <main+0xc1e>
    2412:	6c532043          	0x6c532043
    2416:	7661                	lui	a2,0xffff8
    2418:	2065                	jal	24c0 <FONT_7x5+0x24>
    241a:	6f6d                	lui	t5,0x1b
    241c:	6564                	flw	fs1,76(a0)
    241e:	0000                	unimp
    2420:	6f4c                	flw	fa1,28(a4)
    2422:	676e                	flw	fa4,216(sp)
    2424:	5020                	lw	s0,96(s0)
    2426:	6572                	flw	fa0,28(sp)
    2428:	00007373          	csrrci	t1,ustatus,0
    242c:	676e6953          	0x676e6953
    2430:	656c                	flw	fa1,76(a0)
    2432:	4320                	lw	s0,64(a4)
    2434:	696c                	flw	fa1,84(a0)
    2436:	00006b63          	bltu	zero,zero,244c <I2C1_ER_IRQHandler+0x156>
    243a:	0000                	unimp
    243c:	6f44                	flw	fs1,28(a4)
    243e:	6275                	lui	tp,0x1d
    2440:	656c                	flw	fa1,76(a0)
    2442:	4320                	lw	s0,64(a4)
    2444:	696c                	flw	fa1,84(a0)
    2446:	00006b63          	bltu	zero,zero,245c <I2C1_ER_IRQHandler+0x166>
    244a:	0000                	unimp
    244c:	6548                	flw	fa0,12(a0)
    244e:	6c6c                	flw	fa1,92(s0)
    2450:	6f57206f          	j	75344 <lib_i2c.c.d894f163+0x6b322>
    2454:	6c72                	flw	fs8,28(sp)
    2456:	2164                	fld	fs1,192(a0)
    2458:	0000                	unimp
    245a:	0000                	unimp
    245c:	37375453          	0x37375453
    2460:	72203533          	0x72203533
    2464:	6e75                	lui	t3,0x1d
    2466:	6974                	flw	fa3,84(a0)
    2468:	656d                	lui	a0,0x1b
    246a:	203a                	fld	ft0,392(sp)
    246c:	6c25                	lui	s8,0x9
    246e:	2075                	jal	251a <FONT_7x5+0x7e>
    2470:	7375                	lui	t1,0xffffd
    2472:	000a                	c.slli	zero,0x2
    2474:	1609                	addi	a2,a2,-30
    2476:	2009                	jal	2478 <I2C1_ER_IRQHandler+0x182>
    2478:	1b21                	addi	s6,s6,-24
    247a:	15171913          	0x15171913
    247e:	2b1e                	fld	fs6,448(sp)
    2480:	0504                	addi	s1,sp,640
    2482:	0e02                	c.slli64	t3
    2484:	0000                	unimp
    2486:	0000                	unimp
    2488:	1e08140b          	0x1e08140b
    248c:	1d22                	slli	s10,s10,0x28
    248e:	1e18                	addi	a4,sp,816
    2490:	2b241a1b          	0x2b241a1b
    2494:	0606                	slli	a2,a2,0x1
    2496:	0f02                	c.slli64	t5
    2498:	0000                	unimp
	...

0000249c <FONT_7x5>:
    249c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    24ac:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    24bc:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    24cc:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    24dc:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    24ec:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    24fc:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    250c:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    251c:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    252c:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    253c:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    254c:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    255c:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    256c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    257c:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    258c:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    259c:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    25ac:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    25bc:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    25cc:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    25dc:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    25ec:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    25fc:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    260c:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    261c:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    262c:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    263c:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    264c:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    265c:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    266c:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

00002678 <bitquartets.8>:
    2678:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    2688:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

00002698 <colors>:
    2698:	0000 000f 03e0 03ef 7800 780f 7be0 c618     .........x.x.{..
    26a8:	7bef 001f 07e0 07ff f800 f81f ffe0 ffff     .{..............
    26b8:	fd20 afe5 fc18 0000                          .......

000026c0 <font>:
    26c0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
    26d0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
    26e0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
    26f0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
    2700:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
    2710:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
    2720:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
    2730:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
    2740:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
    2750:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
    2760:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    2770:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    2780:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
    2790:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
    27a0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
    27b0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
    27c0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
    27d0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
    27e0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
    27f0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
    2800:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
    2810:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
    2820:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
    2830:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    2840:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    2850:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
    2860:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
    2870:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
    2880:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
    2890:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
    28a0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
    28b0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
    28c0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
    28d0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
    28e0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
    28f0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
    2900:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
    2910:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
    2920:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
    2930:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
    2940:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
    2950:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
    2960:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
    2970:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
    2980:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
    2990:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
    29a0:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
    29b0:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
    29c0:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
    29d0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
    29e0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
    29f0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
    2a00:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
    2a10:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
    2a20:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
    2a30:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
    2a40:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
    2a50:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
    2a60:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
    2a70:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
    2a80:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
    2a90:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
    2aa0:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
    2ab0:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
    2ac0:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
    2ad0:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
    2ae0:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
    2af0:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
    2b00:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
    2b10:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
    2b20:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
    2b30:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
    2b40:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
    2b50:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
    2b60:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
    2b70:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
    2b80:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
    2b90:	6b6b 3608 3612 3624 0600 0909 0006 1800     kk.6.6$6........
    2ba0:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
    2bb0:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

00002bc0 <ssd1306_init_array>:
    2bc0:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    2bd0:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......

Disassembly of section .data:

20000000 <dev_aht21>:
20000000:	1a80 0006 0000 0000 0038 0001               ........8...

2000000c <dev_ssd1306>:
2000000c:	86a0 0001 0000 0000 003c 0001               ........<...

20000018 <i2c_registers>:
20000018:	00aa 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000038 <lfsr>:
20000038:	0001 0000                                   ....

2000003c <line.5>:
2000003c:	0001 0000                                   ....

20000040 <tween>:
20000040:	ff42 ffff 0000 0000                         B.......

20000048 <FastMultiply>:
{
20000048:	87aa                	mv	a5,a0
	uint32_t ret = 0;
2000004a:	4501                	li	a0,0
		if( multiplicand & 1 )
2000004c:	0015f713          	andi	a4,a1,1
20000050:	c311                	beqz	a4,20000054 <FastMultiply+0xc>
			ret += mutliplicant;
20000052:	953e                	add	a0,a0,a5
		multiplicand>>=1;
20000054:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
20000056:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000058:	f9f5                	bnez	a1,2000004c <FastMultiply+0x4>
}
2000005a:	8082                	ret

2000005c <DMA1_Channel4_IRQHandler>:

// DMA transfer completion interrupt. It will fire when the DMA transfer is
// complete. We use it just to blink the LED
__attribute__((interrupt)) __attribute__((section(".srodata")))
void DMA1_Channel4_IRQHandler(void)
{
2000005c:	1151                	addi	sp,sp,-12
2000005e:	c23a                	sw	a4,4(sp)
	// Clear flag
	DMA1->INTFCR |= DMA_CTCIF4;
20000060:	40020737          	lui	a4,0x40020
{
20000064:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000066:	435c                	lw	a5,4(a4)
{
20000068:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000006a:	6689                	lui	a3,0x2
2000006c:	8fd5                	or	a5,a5,a3
2000006e:	c35c                	sw	a5,4(a4)

	// Blink LED
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000070:	400117b7          	lui	a5,0x40011
20000074:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000078:	47d8                	lw	a4,12(a5)
}
2000007a:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
2000007c:	04074713          	xori	a4,a4,64
20000080:	c7d8                	sw	a4,12(a5)
}
20000082:	4712                	lw	a4,4(sp)
20000084:	4782                	lw	a5,0(sp)
20000086:	0131                	addi	sp,sp,12
20000088:	30200073          	mret
