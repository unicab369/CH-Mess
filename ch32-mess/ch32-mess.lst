
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	5b40006f          	j	5b4 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	067a                	slli	a2,a2,0x1e
   a:	0000                	unimp
   c:	062a                	slli	a2,a2,0xa
	...
  2e:	0000                	unimp
  30:	0ce0                	addi	s0,sp,604
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	062a                	slli	a2,a2,0xa
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	062a                	slli	a2,a2,0xa
  42:	0000                	unimp
  44:	062a                	slli	a2,a2,0xa
  46:	0000                	unimp
  48:	062a                	slli	a2,a2,0xa
  4a:	0000                	unimp
  4c:	062a                	slli	a2,a2,0xa
  4e:	0000                	unimp
  50:	062a                	slli	a2,a2,0xa
  52:	0000                	unimp
  54:	062a                	slli	a2,a2,0xa
  56:	0000                	unimp
  58:	062a                	slli	a2,a2,0xa
  5a:	0000                	unimp
  5c:	062a                	slli	a2,a2,0xa
  5e:	0000                	unimp
  60:	0c66                	slli	s8,s8,0x19
  62:	0000                	unimp
  64:	001c                	0x1c
  66:	2000                	fld	fs0,0(s0)
  68:	062a                	slli	a2,a2,0xa
  6a:	0000                	unimp
  6c:	062a                	slli	a2,a2,0xa
  6e:	0000                	unimp
  70:	062a                	slli	a2,a2,0xa
  72:	0000                	unimp
  74:	062a                	slli	a2,a2,0xa
  76:	0000                	unimp
  78:	0d12                	slli	s10,s10,0x4
  7a:	0000                	unimp
  7c:	0eb2                	slli	t4,t4,0xc
  7e:	0000                	unimp
  80:	062a                	slli	a2,a2,0xa
  82:	0000                	unimp
  84:	062a                	slli	a2,a2,0xa
  86:	0000                	unimp
  88:	062a                	slli	a2,a2,0xa
  8a:	0000                	unimp
  8c:	062a                	slli	a2,a2,0xa
  8e:	0000                	unimp
  90:	062a                	slli	a2,a2,0xa
  92:	0000                	unimp
  94:	062a                	slli	a2,a2,0xa
  96:	0000                	unimp
  98:	062a                	slli	a2,a2,0xa
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
  a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
  a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
  a8:	862e                	mv	a2,a1
  aa:	85aa                	mv	a1,a0
  ac:	557d                	li	a0,-1
  ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
  b0:	4685                	li	a3,1
  b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
  b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
  ba:	0606                	slli	a2,a2,0x1
  bc:	0686                	slli	a3,a3,0x1
  be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
  c2:	4501                	li	a0,0
  c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
  c8:	8d91                	sub	a1,a1,a2
  ca:	8d55                	or	a0,a0,a3
  cc:	8285                	srli	a3,a3,0x1
  ce:	8205                	srli	a2,a2,0x1
  d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
  d2:	8082                	ret

000000d4 <__umodsi3>:
  d4:	8286                	mv	t0,ra
  d6:	3fc9                	jal	a8 <__hidden___udivsi3>
  d8:	852e                	mv	a0,a1
  da:	8282                	jr	t0
  dc:	40a00533          	neg	a0,a0
  e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
  e4:	40b005b3          	neg	a1,a1
  e8:	b7c1                	j	a8 <__hidden___udivsi3>
  ea:	40b005b3          	neg	a1,a1
  ee:	8286                	mv	t0,ra
  f0:	3f65                	jal	a8 <__hidden___udivsi3>
  f2:	40a00533          	neg	a0,a0
  f6:	8282                	jr	t0

000000f8 <__modsi3>:
  f8:	8286                	mv	t0,ra
  fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
  fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
 102:	375d                	jal	a8 <__hidden___udivsi3>
 104:	852e                	mv	a0,a1
 106:	8282                	jr	t0
 108:	40b005b3          	neg	a1,a1
 10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
 110:	40a00533          	neg	a0,a0
 114:	3f51                	jal	a8 <__hidden___udivsi3>
 116:	40b00533          	neg	a0,a1
 11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
{
 11e:	1131                	addi	sp,sp,-20
 120:	c426                	sw	s1,8(sp)
 122:	c806                	sw	ra,16(sp)
 124:	c622                	sw	s0,12(sp)
 126:	84ae                	mv	s1,a1
 128:	87aa                	mv	a5,a0
 12a:	85b2                	mv	a1,a2
	int overflow = 0;
 12c:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
 12e:	caad                	beqz	a3,1a0 <mini_pad+0x82>
	if(len > pad_to) {
 130:	0096d463          	bge	a3,s1,138 <mini_pad+0x1a>
 134:	84b6                	mv	s1,a3
		overflow = 1;
 136:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
 138:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
 13c:	00045363          	bgez	s0,142 <mini_pad+0x24>
 140:	4401                	li	s0,0
 142:	8622                	mv	a2,s0
 144:	853a                	mv	a0,a4
 146:	c23e                	sw	a5,4(sp)
 148:	c01a                	sw	t1,0(sp)
 14a:	2715                	jal	86e <memset>
 14c:	4302                	lw	t1,0(sp)
 14e:	4792                	lw	a5,4(sp)
 150:	872a                	mv	a4,a0
 152:	008506b3          	add	a3,a0,s0
 156:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
 158:	40c485b3          	sub	a1,s1,a2
 15c:	04b04463          	bgtz	a1,1a4 <mini_pad+0x86>
 160:	0004d363          	bgez	s1,166 <mini_pad+0x48>
 164:	4481                	li	s1,0
 166:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
 16a:	40e60533          	sub	a0,a2,a4
	if(overflow) {
 16e:	02030463          	beqz	t1,196 <mini_pad+0x78>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 172:	02c77263          	bgeu	a4,a2,196 <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
 176:	02a00793          	li	a5,42
 17a:	fef60fa3          	sb	a5,-1(a2)
 17e:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 182:	00d77a63          	bgeu	a4,a3,196 <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
 186:	fef60f23          	sb	a5,-2(a2)
 18a:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 18e:	00d77463          	bgeu	a4,a3,196 <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
 192:	fef60ea3          	sb	a5,-3(a2)
}
 196:	40c2                	lw	ra,16(sp)
 198:	4432                	lw	s0,12(sp)
 19a:	44a2                	lw	s1,8(sp)
 19c:	0151                	addi	sp,sp,20
 19e:	8082                	ret
	if(pad_to == 0) pad_to = len;
 1a0:	86a6                	mv	a3,s1
 1a2:	bf59                	j	138 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
 1a4:	00c785b3          	add	a1,a5,a2
 1a8:	0005c503          	lbu	a0,0(a1)
 1ac:	00c685b3          	add	a1,a3,a2
 1b0:	0605                	addi	a2,a2,1
 1b2:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
 1b6:	b74d                	j	158 <mini_pad+0x3a>

000001b8 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
 1b8:	e0000737          	lui	a4,0xe0000
 1bc:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
 1c0:	0f470693          	addi	a3,a4,244
 1c4:	0807f793          	andi	a5,a5,128
 1c8:	fbf5                	bnez	a5,1bc <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
 1ca:	783027b7          	lui	a5,0x78302
 1ce:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
 1d2:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
 1d4:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
 1d6:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
 1da:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
 1dc:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
 1de:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
 1e2:	0807f793          	andi	a5,a5,128
 1e6:	ffe5                	bnez	a5,1de <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
 1e8:	00e557b3          	srl	a5,a0,a4
 1ec:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
 1f0:	03000793          	li	a5,48
 1f4:	00d35463          	bge	t1,a3,1fc <PrintHex+0x44>
 1f8:	05700793          	li	a5,87
 1fc:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
 1fe:	07a2                	slli	a5,a5,0x8
 200:	0857e793          	ori	a5,a5,133
 204:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
 208:	1771                	addi	a4,a4,-4
 20a:	fcb71ae3          	bne	a4,a1,1de <PrintHex+0x26>
}
 20e:	8082                	ret

00000210 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
 210:	1101                	addi	sp,sp,-32
 212:	ce06                	sw	ra,28(sp)
 214:	cc22                	sw	s0,24(sp)
 216:	ca26                	sw	s1,20(sp)
	int	negative = 0;
 218:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
 21a:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
 21c:	00055763          	bgez	a0,22a <mini_itoa.part.0+0x1a>
 220:	e689                	bnez	a3,22a <mini_itoa.part.0+0x1a>
		negative = 1;
 222:	4785                	li	a5,1
		value = -value;
 224:	40a00333          	neg	t1,a0
		negative = 1;
 228:	c03e                	sw	a5,0(sp)
 22a:	06100413          	li	s0,97
 22e:	c219                	beqz	a2,234 <mini_itoa.part.0+0x24>
 230:	04100413          	li	s0,65
	int	negative = 0;
 234:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 236:	1459                	addi	s0,s0,-10
		int digit = value % radix;
 238:	851a                	mv	a0,t1
 23a:	c83a                	sw	a4,16(sp)
 23c:	c21a                	sw	t1,4(sp)
 23e:	c62e                	sw	a1,12(sp)
 240:	c41a                	sw	t1,8(sp)
 242:	3d49                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 244:	47a5                	li	a5,9
 246:	4322                	lw	t1,8(sp)
 248:	45b2                	lw	a1,12(sp)
 24a:	4742                	lw	a4,16(sp)
 24c:	0ff57693          	andi	a3,a0,255
 250:	06a7e163          	bltu	a5,a0,2b2 <mini_itoa.part.0+0xa2>
 254:	03068693          	addi	a3,a3,48
 258:	0ff6f693          	andi	a3,a3,255
 25c:	00148793          	addi	a5,s1,1
 260:	00d48023          	sb	a3,0(s1)
		value /= radix;
 264:	851a                	mv	a0,t1
 266:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 268:	c63e                	sw	a5,12(sp)
		value /= radix;
 26a:	c42e                	sw	a1,8(sp)
 26c:	3d35                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
 26e:	4692                	lw	a3,4(sp)
 270:	45a2                	lw	a1,8(sp)
 272:	47b2                	lw	a5,12(sp)
 274:	4742                	lw	a4,16(sp)
		value /= radix;
 276:	832a                	mv	t1,a0
	} while (value > 0);
 278:	02b6fb63          	bgeu	a3,a1,2ae <mini_itoa.part.0+0x9e>
	if (negative)
 27c:	4682                	lw	a3,0(sp)
 27e:	c699                	beqz	a3,28c <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
 280:	02d00693          	li	a3,45
 284:	00d78023          	sb	a3,0(a5)
 288:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
 28c:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
 290:	01f55693          	srli	a3,a0,0x1f
 294:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
 296:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
 29a:	8685                	srai	a3,a3,0x1
 29c:	4601                	li	a2,0
 29e:	17fd                	addi	a5,a5,-1
 2a0:	00d64b63          	blt	a2,a3,2b6 <mini_itoa.part.0+0xa6>
}
 2a4:	40f2                	lw	ra,28(sp)
 2a6:	4462                	lw	s0,24(sp)
 2a8:	44d2                	lw	s1,20(sp)
 2aa:	6105                	addi	sp,sp,32
 2ac:	8082                	ret
	} while (value > 0);
 2ae:	84be                	mv	s1,a5
 2b0:	b761                	j	238 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 2b2:	96a2                	add	a3,a3,s0
 2b4:	b755                	j	258 <mini_itoa.part.0+0x48>
		char j = buffer[i];
 2b6:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
 2ba:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
 2be:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
 2c2:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
 2c4:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
 2c8:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
 2cc:	bfc9                	j	29e <mini_itoa.part.0+0x8e>

000002ce <fun_t1pwm_reload>:
}

void fun_t1pwm_reload(PWM_GPIO_t* model) {
	model->counter = 0;
	model->timeRef = 0;
	funPinMode(model->pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF);
 2ce:	00054703          	lbu	a4,0(a0)
 2d2:	400117b7          	lui	a5,0x40011
 2d6:	80078793          	addi	a5,a5,-2048 # 40010800 <_eusrstack+0x20010000>
 2da:	00475693          	srli	a3,a4,0x4
 2de:	06aa                	slli	a3,a3,0xa
 2e0:	96be                	add	a3,a3,a5
 2e2:	8b3d                	andi	a4,a4,15
 2e4:	4290                	lw	a2,0(a3)
 2e6:	070a                	slli	a4,a4,0x2
 2e8:	47bd                	li	a5,15
 2ea:	00e797b3          	sll	a5,a5,a4
 2ee:	fff7c793          	not	a5,a5
 2f2:	8ff1                	and	a5,a5,a2
 2f4:	4625                	li	a2,9
 2f6:	00e61733          	sll	a4,a2,a4
	model->counter = 0;
 2fa:	00052223          	sw	zero,4(a0)
	model->timeRef = 0;
 2fe:	00052423          	sw	zero,8(a0)
	funPinMode(model->pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF);
 302:	8fd9                	or	a5,a5,a4
 304:	c29c                	sw	a5,0(a3)

	// default value
	TIM1->CH1CVR = 255;
 306:	400137b7          	lui	a5,0x40013
 30a:	0ff00713          	li	a4,255
 30e:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x20012400>
 312:	dbd8                	sw	a4,52(a5)
	TIM1->CH2CVR = 255;
 314:	df98                	sw	a4,56(a5)
	TIM1->CH3CVR = 255;
 316:	dfd8                	sw	a4,60(a5)
	TIM1->CH4CVR = 255;
 318:	c3b8                	sw	a4,64(a5)

	switch (model->CCER) {
 31a:	00255703          	lhu	a4,2(a0)
 31e:	04000693          	li	a3,64
 322:	0ad70163          	beq	a4,a3,3c4 <fun_t1pwm_reload+0xf6>
 326:	00e6ec63          	bltu	a3,a4,33e <fun_t1pwm_reload+0x70>
 32a:	4691                	li	a3,4
 32c:	04d70463          	beq	a4,a3,374 <fun_t1pwm_reload+0xa6>
 330:	46c1                	li	a3,16
 332:	06d70563          	beq	a4,a3,39c <fun_t1pwm_reload+0xce>
 336:	4685                	li	a3,1
 338:	00d70b63          	beq	a4,a3,34e <fun_t1pwm_reload+0x80>
 33c:	8082                	ret
 33e:	10000693          	li	a3,256
 342:	08d70b63          	beq	a4,a3,3d8 <fun_t1pwm_reload+0x10a>
 346:	6685                	lui	a3,0x1
 348:	0ad70c63          	beq	a4,a3,400 <fun_t1pwm_reload+0x132>
 34c:	8082                	ret
		//# TIM1->CHCTLR1 Control Reg1: CH1 & CH2
		case TIM_CC1E:
			TIM1->CCER |= TIM_CC1E | TIM_CC1P;
 34e:	0207d683          	lhu	a3,32(a5)
 352:	06c2                	slli	a3,a3,0x10
 354:	82c1                	srli	a3,a3,0x10
 356:	0036e693          	ori	a3,a3,3
 35a:	02d79023          	sh	a3,32(a5)
			TIM1->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1;
 35e:	0187d683          	lhu	a3,24(a5)
 362:	06c2                	slli	a3,a3,0x10
 364:	82c1                	srli	a3,a3,0x10
 366:	0606e693          	ori	a3,a3,96
 36a:	00d79c23          	sh	a3,24(a5)
			model->channel = 1;
 36e:	00e500a3          	sb	a4,1(a0)
			break;
 372:	8082                	ret
		case TIM_CC1NE:
			TIM1->CCER |= TIM_CC1NE | TIM_CC1NP;
 374:	0207d703          	lhu	a4,32(a5)
 378:	0742                	slli	a4,a4,0x10
 37a:	8341                	srli	a4,a4,0x10
 37c:	00c76713          	ori	a4,a4,12
 380:	02e79023          	sh	a4,32(a5)
			TIM1->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1;
 384:	0187d703          	lhu	a4,24(a5)
 388:	0742                	slli	a4,a4,0x10
 38a:	8341                	srli	a4,a4,0x10
 38c:	06076713          	ori	a4,a4,96
 390:	00e79c23          	sh	a4,24(a5)
			model->channel = 1;
 394:	4785                	li	a5,1
 396:	00f500a3          	sb	a5,1(a0)
			break;
 39a:	8082                	ret
		case TIM_CC2E:
			model->channel = 2;
 39c:	4709                	li	a4,2
 39e:	00e500a3          	sb	a4,1(a0)
			TIM1->CCER |= TIM_CC2E | TIM_CC2P;
 3a2:	0207d703          	lhu	a4,32(a5)
 3a6:	0742                	slli	a4,a4,0x10
 3a8:	8341                	srli	a4,a4,0x10
 3aa:	03076713          	ori	a4,a4,48
			TIM1->CHCTLR1 |= TIM_OC2M_2 | TIM_OC2M_1;
			break;
		case TIM_CC2NE:
			model->channel = 2;
			TIM1->CCER |= TIM_CC2NE | TIM_CC2NP;
 3ae:	02e79023          	sh	a4,32(a5)
			TIM1->CHCTLR1 |= TIM_OC2M_2 | TIM_OC2M_1;
 3b2:	0187d703          	lhu	a4,24(a5)
 3b6:	6699                	lui	a3,0x6
 3b8:	0742                	slli	a4,a4,0x10
 3ba:	8341                	srli	a4,a4,0x10
 3bc:	8f55                	or	a4,a4,a3
 3be:	00e79c23          	sh	a4,24(a5)
			break;
 3c2:	8082                	ret
			model->channel = 2;
 3c4:	4709                	li	a4,2
 3c6:	00e500a3          	sb	a4,1(a0)
			TIM1->CCER |= TIM_CC2NE | TIM_CC2NP;
 3ca:	0207d703          	lhu	a4,32(a5)
 3ce:	0742                	slli	a4,a4,0x10
 3d0:	8341                	srli	a4,a4,0x10
 3d2:	0c076713          	ori	a4,a4,192
 3d6:	bfe1                	j	3ae <fun_t1pwm_reload+0xe0>
		
		//# TIM1->CHCTLR2 Control Reg2: CH3 & CH4
		case TIM_CC3E:
			model->channel = 3;
 3d8:	470d                	li	a4,3
 3da:	00e500a3          	sb	a4,1(a0)
			TIM1->CCER |= TIM_CC3E | TIM_CC3P;
 3de:	0207d703          	lhu	a4,32(a5)
 3e2:	0742                	slli	a4,a4,0x10
 3e4:	8341                	srli	a4,a4,0x10
 3e6:	30076713          	ori	a4,a4,768
 3ea:	02e79023          	sh	a4,32(a5)
			TIM1->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1;
 3ee:	01c7d703          	lhu	a4,28(a5)
 3f2:	0742                	slli	a4,a4,0x10
 3f4:	8341                	srli	a4,a4,0x10
 3f6:	06076713          	ori	a4,a4,96
			break;
		// case TIM_CC3NE: TIM1->CCER |= TIM_CC3E | TIM_CC3NP; break;	//! Prevent overwrite SWDIO
		case TIM_CC4E:
			model->channel = 4;
			TIM1->CCER |= TIM_CC4E | TIM_CC4P;
			TIM1->CHCTLR2 |= TIM_OC4M_2 | TIM_OC4M_1;
 3fa:	00e79e23          	sh	a4,28(a5)
			break;
	}
}
 3fe:	8082                	ret
			model->channel = 4;
 400:	4711                	li	a4,4
 402:	00e500a3          	sb	a4,1(a0)
			TIM1->CCER |= TIM_CC4E | TIM_CC4P;
 406:	0207d703          	lhu	a4,32(a5)
 40a:	668d                	lui	a3,0x3
 40c:	0742                	slli	a4,a4,0x10
 40e:	8341                	srli	a4,a4,0x10
 410:	8f55                	or	a4,a4,a3
 412:	02e79023          	sh	a4,32(a5)
			TIM1->CHCTLR2 |= TIM_OC4M_2 | TIM_OC4M_1;
 416:	01c7d703          	lhu	a4,28(a5)
 41a:	6699                	lui	a3,0x6
 41c:	0742                	slli	a4,a4,0x10
 41e:	8341                	srli	a4,a4,0x10
 420:	8f55                	or	a4,a4,a3
 422:	bfe1                	j	3fa <fun_t1pwm_reload+0x12c>

00000424 <fun_t1pwm_task>:
	}
}


void fun_t1pwm_task(uint32_t time, PWM_GPIO_t* model) {
	if (time - model->timeRef < 5) { return; }
 424:	459c                	lw	a5,8(a1)
 426:	4691                	li	a3,4
 428:	40f507b3          	sub	a5,a0,a5
 42c:	02f6f563          	bgeu	a3,a5,456 <fun_t1pwm_task+0x32>
	model->timeRef = time;

	fun_t1pwm_setpw(model->channel, model->counter);
 430:	0015c703          	lbu	a4,1(a1)
	model->timeRef = time;
 434:	c588                	sw	a0,8(a1)
	switch(channel) {
 436:	460d                	li	a2,3
	fun_t1pwm_setpw(model->channel, model->counter);
 438:	41dc                	lw	a5,4(a1)
	switch(channel) {
 43a:	04c70c63          	beq	a4,a2,492 <fun_t1pwm_task+0x6e>
 43e:	00e66d63          	bltu	a2,a4,458 <fun_t1pwm_task+0x34>
 442:	4685                	li	a3,1
 444:	02d70563          	beq	a4,a3,46e <fun_t1pwm_task+0x4a>
 448:	4689                	li	a3,2
 44a:	02d70b63          	beq	a4,a3,480 <fun_t1pwm_task+0x5c>
	model->counter++;
 44e:	0785                	addi	a5,a5,1
	model->counter &= 255;
 450:	0ff7f793          	andi	a5,a5,255
 454:	c1dc                	sw	a5,4(a1)
 456:	8082                	ret
	switch(channel) {
 458:	fed71be3          	bne	a4,a3,44e <fun_t1pwm_task+0x2a>
		case 4: TIM1->CH4CVR = width; break;
 45c:	01079693          	slli	a3,a5,0x10
 460:	40013737          	lui	a4,0x40013
 464:	82c1                	srli	a3,a3,0x10
 466:	c0070713          	addi	a4,a4,-1024 # 40012c00 <_eusrstack+0x20012400>
 46a:	c334                	sw	a3,64(a4)
 46c:	b7cd                	j	44e <fun_t1pwm_task+0x2a>
		case 1: TIM1->CH1CVR = width; break;
 46e:	01079693          	slli	a3,a5,0x10
 472:	40013737          	lui	a4,0x40013
 476:	82c1                	srli	a3,a3,0x10
 478:	c0070713          	addi	a4,a4,-1024 # 40012c00 <_eusrstack+0x20012400>
 47c:	db54                	sw	a3,52(a4)
 47e:	bfc1                	j	44e <fun_t1pwm_task+0x2a>
		case 2: TIM1->CH2CVR = width; break;
 480:	01079693          	slli	a3,a5,0x10
 484:	40013737          	lui	a4,0x40013
 488:	82c1                	srli	a3,a3,0x10
 48a:	c0070713          	addi	a4,a4,-1024 # 40012c00 <_eusrstack+0x20012400>
 48e:	df14                	sw	a3,56(a4)
 490:	bf7d                	j	44e <fun_t1pwm_task+0x2a>
		case 3: TIM1->CH3CVR = width; break;
 492:	01079693          	slli	a3,a5,0x10
 496:	40013737          	lui	a4,0x40013
 49a:	82c1                	srli	a3,a3,0x10
 49c:	c0070713          	addi	a4,a4,-1024 # 40012c00 <_eusrstack+0x20012400>
 4a0:	df54                	sw	a3,60(a4)
 4a2:	b775                	j	44e <fun_t1pwm_task+0x2a>

000004a4 <internal_handle_input.constprop.0>:
void handle_debug_input( int numbytes, uint8_t * data ) __attribute__((weak));
void handle_debug_input( int numbytes, uint8_t * data ) { (void)numbytes; (void)data; }

static void internal_handle_input( volatile uint32_t * dmdata0 )
{
	uint32_t dmd0 = *dmdata0;
 4a4:	e00007b7          	lui	a5,0xe0000
 4a8:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 && bytes < 16 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
 4ac:	8082                	ret

000004ae <_write.constprop.0>:
//     status word = 0xcx = timed out.
// declare as weak to allow overriding.
WEAK int _write(int fd, const char *buf, int size)
{
	(void)fd;
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
 4ae:	e0000737          	lui	a4,0xe0000
 4b2:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
 4b6:	1111                	addi	sp,sp,-28
 4b8:	cc06                	sw	ra,24(sp)
 4ba:	ca22                	sw	s0,20(sp)
 4bc:	c826                	sw	s1,16(sp)
 4be:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
 4c0:	0c07f793          	andi	a5,a5,192
 4c4:	0c000693          	li	a3,192
 4c8:	0cd78863          	beq	a5,a3,598 <_write.constprop.0+0xea>

	char buffer[4] = { 0 };
 4cc:	c602                	sw	zero,12(sp)
 4ce:	842e                	mv	s0,a1
	int place = 0;
	uint32_t lastdmd;
	uint32_t timeout = FUNCONF_DEBUGPRINTF_TIMEOUT; // Give up after ~120ms

	if( size == 0 )
 4d0:	e5f1                	bnez	a1,59c <_write.constprop.0+0xee>
	{
		lastdmd = (*DMDATA0);
 4d2:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
 4d6:	c789                	beqz	a5,4e0 <_write.constprop.0+0x32>
 4d8:	0807f793          	andi	a5,a5,128
 4dc:	e391                	bnez	a5,4e0 <_write.constprop.0+0x32>
 4de:	37d9                	jal	4a4 <internal_handle_input.constprop.0>

		//buf += tosend;
		place += tosend;
	}
	return size;
}
 4e0:	40e2                	lw	ra,24(sp)
 4e2:	8522                	mv	a0,s0
 4e4:	4452                	lw	s0,20(sp)
 4e6:	44c2                	lw	s1,16(sp)
 4e8:	0171                	addi	sp,sp,28
 4ea:	8082                	ret
		int tosend = size - place;
 4ec:	409405b3          	sub	a1,s0,s1
 4f0:	469d                	li	a3,7
 4f2:	872e                	mv	a4,a1
 4f4:	00b6d363          	bge	a3,a1,4fa <_write.constprop.0+0x4c>
 4f8:	471d                	li	a4,7
 4fa:	001006b7          	lui	a3,0x100
 4fe:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
 500:	e0000537          	lui	a0,0xe0000
 504:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
 508:	0f450313          	addi	t1,a0,244
 50c:	08067293          	andi	t0,a2,128
 510:	06029c63          	bnez	t0,588 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
 514:	c611                	beqz	a2,520 <_write.constprop.0+0x72>
 516:	c43a                	sw	a4,8(sp)
 518:	c22e                	sw	a1,4(sp)
 51a:	3769                	jal	4a4 <internal_handle_input.constprop.0>
 51c:	4722                	lw	a4,8(sp)
 51e:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
 520:	4689                	li	a3,2
 522:	4601                	li	a2,0
 524:	00b6d463          	bge	a3,a1,52c <_write.constprop.0+0x7e>
 528:	ffd70613          	addi	a2,a4,-3
 52c:	4782                	lw	a5,0(sp)
 52e:	00348593          	addi	a1,s1,3
 532:	0068                	addi	a0,sp,12
 534:	95be                	add	a1,a1,a5
 536:	c23a                	sw	a4,4(sp)
 538:	26a1                	jal	880 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
 53a:	4632                	lw	a2,12(sp)
 53c:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
 53e:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
 540:	e00006b7          	lui	a3,0xe0000
 544:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
 548:	458d                	li	a1,3
 54a:	00978633          	add	a2,a5,s1
		t = 0;
 54e:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
 550:	00064303          	lbu	t1,0(a2)
 554:	0685                	addi	a3,a3,1
 556:	007c                	addi	a5,sp,12
 558:	00d78533          	add	a0,a5,a3
 55c:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
 560:	00d70563          	beq	a4,a3,56a <_write.constprop.0+0xbc>
 564:	0605                	addi	a2,a2,1
 566:	feb695e3          	bne	a3,a1,550 <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
 56a:	00470693          	addi	a3,a4,4
 56e:	f806e693          	ori	a3,a3,-128
 572:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
 576:	4632                	lw	a2,12(sp)
 578:	e00006b7          	lui	a3,0xe0000
		place += tosend;
 57c:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
 57e:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
 582:	f684c5e3          	blt	s1,s0,4ec <_write.constprop.0+0x3e>
 586:	bfa9                	j	4e0 <_write.constprop.0+0x32>
			if( timeout-- == 0 )
 588:	16fd                	addi	a3,a3,-1
 58a:	fead                	bnez	a3,504 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
 58c:	00032783          	lw	a5,0(t1)
 590:	0c07e793          	ori	a5,a5,192
 594:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
 598:	4401                	li	s0,0
 59a:	b799                	j	4e0 <_write.constprop.0+0x32>
	if( size == 0 )
 59c:	4481                	li	s1,0
 59e:	b7d5                	j	582 <_write.constprop.0+0xd4>

000005a0 <__puts_uart>:
{
 5a0:	1151                	addi	sp,sp,-12
 5a2:	c222                	sw	s0,4(sp)
 5a4:	c406                	sw	ra,8(sp)
 5a6:	842e                	mv	s0,a1
	_write( 0, s, len );
 5a8:	3719                	jal	4ae <_write.constprop.0>
}
 5aa:	40a2                	lw	ra,8(sp)
 5ac:	8522                	mv	a0,s0
 5ae:	4412                	lw	s0,4(sp)
 5b0:	0131                	addi	sp,sp,12
 5b2:	8082                	ret

000005b4 <handle_reset>:
	asm volatile( "\n\
 5b4:	20000197          	auipc	gp,0x20000
 5b8:	e4818193          	addi	gp,gp,-440 # 200003fc <__global_pointer$>
 5bc:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
 5c0:	6509                	lui	a0,0x2
 5c2:	88050513          	addi	a0,a0,-1920 # 1880 <ch32fun.c.963ac852+0x1ac>
 5c6:	30051073          	csrw	mstatus,a0
 5ca:	468d                	li	a3,3
 5cc:	00000517          	auipc	a0,0x0
 5d0:	a3450513          	addi	a0,a0,-1484 # 0 <InterruptVector>
 5d4:	8d55                	or	a0,a0,a3
 5d6:	30551073          	csrw	mtvec,a0
asm volatile(
 5da:	c5018513          	addi	a0,gp,-944 # 2000004c <WS2812BLEDInUse>
 5de:	cec18593          	addi	a1,gp,-788 # 200000e8 <_ebss>
 5e2:	4601                	li	a2,0
 5e4:	00b55663          	bge	a0,a1,5f0 <handle_reset+0x3c>
 5e8:	c110                	sw	a2,0(a0)
 5ea:	0511                	addi	a0,a0,4
 5ec:	feb54ee3          	blt	a0,a1,5e8 <handle_reset+0x34>
 5f0:	00001517          	auipc	a0,0x1
 5f4:	96c50513          	addi	a0,a0,-1684 # f5c <_data_lma>
 5f8:	c0418593          	addi	a1,gp,-1020 # 20000000 <tween>
 5fc:	20000617          	auipc	a2,0x20000
 600:	a5060613          	addi	a2,a2,-1456 # 2000004c <WS2812BLEDInUse>
 604:	00c58863          	beq	a1,a2,614 <handle_reset+0x60>
 608:	4114                	lw	a3,0(a0)
 60a:	c194                	sw	a3,0(a1)
 60c:	0511                	addi	a0,a0,4
 60e:	0591                	addi	a1,a1,4
 610:	fec59ae3          	bne	a1,a2,604 <handle_reset+0x50>
	SysTick->CTLR = 5;
 614:	e000f7b7          	lui	a5,0xe000f
 618:	4715                	li	a4,5
 61a:	c398                	sw	a4,0(a5)
asm volatile(
 61c:	6785                	lui	a5,0x1
 61e:	8f478793          	addi	a5,a5,-1804 # 8f4 <main>
 622:	34179073          	csrw	mepc,a5
 626:	30200073          	mret

0000062a <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
 62a:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
 62e:	3669                	jal	1b8 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
 630:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
 634:	3651                	jal	1b8 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
 636:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
 63a:	3ebd                	jal	1b8 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
 63c:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
 640:	3ea5                	jal	1b8 <PrintHex>
	while( (*DMDATA0) & 0x80 );
 642:	e0000737          	lui	a4,0xe0000
 646:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
 64a:	0f470693          	addi	a3,a4,244
 64e:	0807f793          	andi	a5,a5,128
 652:	fbf5                	bnez	a5,646 <ADC1_2_IRQHandler+0x1c>
	*DMDATA0 = 0x0a85;
 654:	6785                	lui	a5,0x1
 656:	a8578793          	addi	a5,a5,-1403 # a85 <TweenHexColors+0x1b>
 65a:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
 65c:	e0000737          	lui	a4,0xe0000
 660:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
 664:	0f470693          	addi	a3,a4,244
 668:	0807f793          	andi	a5,a5,128
 66c:	fbf5                	bnez	a5,660 <ADC1_2_IRQHandler+0x36>
	*DMDATA0 = 0xaaaaaa83;
 66e:	aaaab7b7          	lui	a5,0xaaaab
 672:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
 676:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
 678:	a001                	j	678 <ADC1_2_IRQHandler+0x4e>

0000067a <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
 67a:	40021737          	lui	a4,0x40021
 67e:	471c                	lw	a5,8(a4)
 680:	008006b7          	lui	a3,0x800
 684:	8fd5                	or	a5,a5,a3
 686:	c71c                	sw	a5,8(a4)

00000688 <strlen>:
{
 688:	87aa                	mv	a5,a0
	for (; *s; s++);
 68a:	0007c703          	lbu	a4,0(a5)
 68e:	e701                	bnez	a4,696 <strlen+0xe>
}
 690:	40a78533          	sub	a0,a5,a0
 694:	8082                	ret
	for (; *s; s++);
 696:	0785                	addi	a5,a5,1
 698:	bfcd                	j	68a <strlen+0x2>

0000069a <mini_vpprintf>:
{
 69a:	fa410113          	addi	sp,sp,-92
 69e:	c8a6                	sw	s1,80(sp)
 6a0:	cc86                	sw	ra,88(sp)
 6a2:	caa2                	sw	s0,84(sp)
 6a4:	c02a                	sw	a0,0(sp)
 6a6:	c22e                	sw	a1,4(sp)
 6a8:	84b2                	mv	s1,a2
 6aa:	87b6                	mv	a5,a3
	int n = 0;
 6ac:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
 6ae:	0004c703          	lbu	a4,0(s1)
 6b2:	00148413          	addi	s0,s1,1
 6b6:	00e10fa3          	sb	a4,31(sp)
 6ba:	eb01                	bnez	a4,6ca <mini_vpprintf+0x30>
}
 6bc:	40e6                	lw	ra,88(sp)
 6be:	4456                	lw	s0,84(sp)
 6c0:	4542                	lw	a0,16(sp)
 6c2:	44c6                	lw	s1,80(sp)
 6c4:	05c10113          	addi	sp,sp,92
 6c8:	8082                	ret
		if (ch!='%') {
 6ca:	02500693          	li	a3,37
 6ce:	00d70f63          	beq	a4,a3,6ec <mini_vpprintf+0x52>
 6d2:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
 6d4:	4612                	lw	a2,4(sp)
 6d6:	4782                	lw	a5,0(sp)
 6d8:	4585                	li	a1,1
 6da:	01f10513          	addi	a0,sp,31
 6de:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
 6e0:	84a2                	mv	s1,s0
		n = n + len;
 6e2:	47c2                	lw	a5,16(sp)
 6e4:	97aa                	add	a5,a5,a0
 6e6:	c83e                	sw	a5,16(sp)
 6e8:	47a2                	lw	a5,8(sp)
 6ea:	b7d1                	j	6ae <mini_vpprintf+0x14>
			ch=*(fmt++);
 6ec:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
 6f0:	03000613          	li	a2,48
			ch=*(fmt++);
 6f4:	00248713          	addi	a4,s1,2
 6f8:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
 6fc:	03000413          	li	s0,48
 700:	08c69063          	bne	a3,a2,780 <mini_vpprintf+0xe6>
				ch=*(fmt++);
 704:	84ba                	mv	s1,a4
 706:	4601                	li	a2,0
 708:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
 70a:	4525                	li	a0,9
 70c:	a811                	j	720 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
 70e:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
 712:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
 714:	9736                	add	a4,a4,a3
				ch=*(fmt++);
 716:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
 71a:	0706                	slli	a4,a4,0x1
 71c:	972e                	add	a4,a4,a1
				ch=*(fmt++);
 71e:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
 720:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f855b>
 724:	0ff5f313          	andi	t1,a1,255
 728:	fe6573e3          	bgeu	a0,t1,70e <mini_vpprintf+0x74>
 72c:	c219                	beqz	a2,732 <mini_vpprintf+0x98>
 72e:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
 732:	c63a                	sw	a4,12(sp)
 734:	4661                	li	a2,24
 736:	00e65363          	bge	a2,a4,73c <mini_vpprintf+0xa2>
 73a:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
 73c:	06c00593          	li	a1,108
			char l = 0;
 740:	4601                	li	a2,0
			if (ch == 'l') {
 742:	00b69863          	bne	a3,a1,752 <mini_vpprintf+0xb8>
				ch=*(fmt++);
 746:	0004c683          	lbu	a3,0(s1)
				l = 1;
 74a:	4605                	li	a2,1
				ch=*(fmt++);
 74c:	0485                	addi	s1,s1,1
 74e:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
 752:	01f14683          	lbu	a3,31(sp)
 756:	06400593          	li	a1,100
 75a:	06b68363          	beq	a3,a1,7c0 <mini_vpprintf+0x126>
 75e:	02d5e463          	bltu	a1,a3,786 <mini_vpprintf+0xec>
 762:	05800713          	li	a4,88
 766:	0ae68063          	beq	a3,a4,806 <mini_vpprintf+0x16c>
 76a:	06300713          	li	a4,99
 76e:	0ae68d63          	beq	a3,a4,828 <mini_vpprintf+0x18e>
 772:	d6a9                	beqz	a3,6bc <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
 774:	4612                	lw	a2,4(sp)
 776:	c43e                	sw	a5,8(sp)
 778:	4585                	li	a1,1
 77a:	01f10513          	addi	a0,sp,31
 77e:	a0bd                	j	7ec <mini_vpprintf+0x152>
			char pad_char = ' ';
 780:	02000413          	li	s0,32
 784:	b741                	j	704 <mini_vpprintf+0x6a>
			switch (ch) {
 786:	07500593          	li	a1,117
 78a:	02b68b63          	beq	a3,a1,7c0 <mini_vpprintf+0x126>
 78e:	07800613          	li	a2,120
 792:	06c68a63          	beq	a3,a2,806 <mini_vpprintf+0x16c>
 796:	07300613          	li	a2,115
 79a:	fcc69de3          	bne	a3,a2,774 <mini_vpprintf+0xda>
 79e:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
 7a0:	00478713          	addi	a4,a5,4
 7a4:	439c                	lw	a5,0(a5)
 7a6:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
 7a8:	853e                	mv	a0,a5
 7aa:	ca3e                	sw	a5,20(sp)
 7ac:	3df1                	jal	688 <strlen>
					if (pad_to > 0) {
 7ae:	4762                	lw	a4,24(sp)
 7b0:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
 7b2:	85aa                	mv	a1,a0
					if (pad_to > 0) {
 7b4:	c759                	beqz	a4,842 <mini_vpprintf+0x1a8>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
 7b6:	46b2                	lw	a3,12(sp)
 7b8:	1838                	addi	a4,sp,56
 7ba:	8622                	mv	a2,s0
 7bc:	853e                	mv	a0,a5
 7be:	a01d                	j	7e4 <mini_vpprintf+0x14a>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 7c0:	00478713          	addi	a4,a5,4
 7c4:	c43a                	sw	a4,8(sp)
					if(l) {
 7c6:	c615                	beqz	a2,7f2 <mini_vpprintf+0x158>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 7c8:	f8b68693          	addi	a3,a3,-117
 7cc:	1018                	addi	a4,sp,32
 7ce:	0016b693          	seqz	a3,a3
 7d2:	4388                	lw	a0,0(a5)
 7d4:	4601                	li	a2,0
 7d6:	45a9                	li	a1,10
 7d8:	3c25                	jal	210 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 7da:	46b2                	lw	a3,12(sp)
 7dc:	1838                	addi	a4,sp,56
 7de:	8622                	mv	a2,s0
 7e0:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 7e2:	1008                	addi	a0,sp,32
 7e4:	3a2d                	jal	11e <mini_pad>
					len = puts(bf, len, buf);
 7e6:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 7e8:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
 7ea:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
 7ec:	4782                	lw	a5,0(sp)
 7ee:	9782                	jalr	a5
					break;
 7f0:	bdcd                	j	6e2 <mini_vpprintf+0x48>
						if(ch == 'u') {
 7f2:	07500713          	li	a4,117
 7f6:	00e69563          	bne	a3,a4,800 <mini_vpprintf+0x166>
	if (radix > 16)
 7fa:	1018                	addi	a4,sp,32
 7fc:	4685                	li	a3,1
 7fe:	bfd1                	j	7d2 <mini_vpprintf+0x138>
 800:	1018                	addi	a4,sp,32
 802:	4681                	li	a3,0
 804:	b7f9                	j	7d2 <mini_vpprintf+0x138>
					if(l) {
 806:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 808:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
 80c:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 810:	c43a                	sw	a4,8(sp)
	if (radix > 16)
 812:	4685                	li	a3,1
 814:	1018                	addi	a4,sp,32
 816:	00163613          	seqz	a2,a2
 81a:	45c1                	li	a1,16
 81c:	3ad5                	jal	210 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 81e:	46b2                	lw	a3,12(sp)
 820:	85aa                	mv	a1,a0
 822:	1838                	addi	a4,sp,56
 824:	8622                	mv	a2,s0
 826:	bf75                	j	7e2 <mini_vpprintf+0x148>
					ch = (char)(va_arg(va, int));
 828:	00478713          	addi	a4,a5,4
 82c:	439c                	lw	a5,0(a5)
 82e:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
 830:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
 832:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
 836:	1838                	addi	a4,sp,56
 838:	8622                	mv	a2,s0
 83a:	4585                	li	a1,1
 83c:	01f10513          	addi	a0,sp,31
 840:	b755                	j	7e4 <mini_vpprintf+0x14a>
						len = puts(ptr, len, buf);
 842:	4612                	lw	a2,4(sp)
 844:	853e                	mv	a0,a5
 846:	b75d                	j	7ec <mini_vpprintf+0x152>

00000848 <printf>:
{
 848:	fdc10113          	addi	sp,sp,-36
 84c:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 84e:	862a                	mv	a2,a0
{
 850:	c82e                	sw	a1,16(sp)
 852:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 854:	4581                	li	a1,0
	va_start( args, format );
 856:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 858:	5a000513          	li	a0,1440
{
 85c:	c606                	sw	ra,12(sp)
 85e:	ce3a                	sw	a4,28(sp)
 860:	d03e                	sw	a5,32(sp)
	va_start( args, format );
 862:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 864:	3d1d                	jal	69a <mini_vpprintf>
}
 866:	40b2                	lw	ra,12(sp)
 868:	02410113          	addi	sp,sp,36
 86c:	8082                	ret

0000086e <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
 86e:	962a                	add	a2,a2,a0
 870:	87aa                	mv	a5,a0
 872:	00c79363          	bne	a5,a2,878 <memset+0xa>
 876:	8082                	ret
 878:	00b78023          	sb	a1,0(a5)
 87c:	0785                	addi	a5,a5,1
 87e:	bfd5                	j	872 <memset+0x4>

00000880 <memcpy>:
{
 880:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
 882:	00f61363          	bne	a2,a5,888 <memcpy+0x8>
}
 886:	8082                	ret
	for (; n; n--) *d++ = *s++;
 888:	00f58733          	add	a4,a1,a5
 88c:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
 890:	00f50733          	add	a4,a0,a5
 894:	0785                	addi	a5,a5,1
 896:	00d70023          	sb	a3,0(a4)
 89a:	b7e5                	j	882 <memcpy+0x2>

0000089c <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
 89c:	400227b7          	lui	a5,0x40022
 8a0:	4705                	li	a4,1
 8a2:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
 8a4:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
 8a8:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
 8ac:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
 8b0:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x107860c>
 8b4:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
 8b6:	009f0737          	lui	a4,0x9f0
 8ba:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
 8bc:	020006b7          	lui	a3,0x2000
 8c0:	40021737          	lui	a4,0x40021
 8c4:	431c                	lw	a5,0(a4)
 8c6:	8ff5                	and	a5,a5,a3
 8c8:	dff5                	beqz	a5,8c4 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
 8ca:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
 8cc:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
 8d0:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
 8d2:	0027e793          	ori	a5,a5,2
 8d6:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
 8d8:	4721                	li	a4,8
 8da:	42dc                	lw	a5,4(a3)
 8dc:	8bb1                	andi	a5,a5,12
 8de:	fee79ee3          	bne	a5,a4,8da <SystemInit+0x3e>
	*DMDATA1 = 0x00;
 8e2:	e00007b7          	lui	a5,0xe0000
 8e6:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
 8ea:	08000713          	li	a4,128
 8ee:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
 8f2:	8082                	ret

000008f4 <main>:

void encoder_onChanged(Encoder_t *model) {
	printf("Encoder: %d\n", model->last_count);
}

int main() {
 8f4:	fa810113          	addi	sp,sp,-88
 8f8:	c6a6                	sw	s1,76(sp)
 8fa:	ca86                	sw	ra,84(sp)
 8fc:	c8a2                	sw	s0,80(sp)
	uint32_t counter = 0;
	uint32_t ledc_time = 0;
	uint32_t sec_time = 0;
	uint32_t time_ref = 0;

	SystemInit();
 8fe:	3f79                	jal	89c <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
 900:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
 904:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
 906:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
 90a:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x410a>
 90e:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
 910:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
 914:	c5c18713          	addi	a4,gp,-932 # 20000058 <systick_millis>
 918:	00072023          	sw	zero,0(a4)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
 91c:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 91e:	6685                	lui	a3,0x1
 920:	c5c18493          	addi	s1,gp,-932 # 20000058 <systick_millis>
 924:	00776713          	ori	a4,a4,7
 928:	c398                	sw	a4,0(a5)
 92a:	e000e737          	lui	a4,0xe000e
 92e:	10d72023          	sw	a3,256(a4) # e000e100 <_eusrstack+0xc000d900>
	systick_init();			//! required for millis()

	funGpioInitAll();
 932:	400216b7          	lui	a3,0x40021
 936:	4e98                	lw	a4,24(a3)
 938:	03576713          	ori	a4,a4,53
 93c:	ce98                	sw	a4,24(a3)
	uint32_t targend = SysTick->CNT + n;
 93e:	4798                	lw	a4,8(a5)
 940:	004947b7          	lui	a5,0x494
 944:	e0078793          	addi	a5,a5,-512 # 493e00 <lib_i2c.c.d894f163+0x48c38b>
 948:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
 94a:	e000f6b7          	lui	a3,0xe000f
 94e:	469c                	lw	a5,8(a3)
 950:	8f99                	sub	a5,a5,a4
 952:	fe07cee3          	bltz	a5,94e <main+0x5a>
	// } else {
	// 	printf("write error: %u\n\r", rc);
	// }
	
	//# TIM1: uses PD0(CH1)
	PWM_GPIO_t pwm_CH1 = {
 956:	67c1                	lui	a5,0x10
 958:	03278793          	addi	a5,a5,50 # 10032 <lib_i2c.c.d894f163+0x85bd>
 95c:	c0be                	sw	a5,64(sp)
		.pin = PD2,
		.CCER = TIM_CC1E
	};

	PWM_GPIO_t pwm_CH1c = {
 95e:	000407b7          	lui	a5,0x40
 962:	03078793          	addi	a5,a5,48 # 40030 <lib_i2c.c.d894f163+0x385bb>
 966:	da3e                	sw	a5,52(sp)
		.pin = PD0,
		.CCER = TIM_CC1NE
	};

	PWM_GPIO_t pwm_CH2 = {
 968:	001007b7          	lui	a5,0x100
 96c:	0785                	addi	a5,a5,1
 96e:	d43e                	sw	a5,40(sp)
		.pin = PA1,
		.CCER = TIM_CC2E
	};
	
	PWM_GPIO_t pwm_CH2c = {
 970:	004007b7          	lui	a5,0x400
 974:	0789                	addi	a5,a5,2
 976:	ce3e                	sw	a5,28(sp)
		.pin = PA2,
		.CCER = TIM_CC2NE
	};

	PWM_GPIO_t pwm_CH3 = {
 978:	010007b7          	lui	a5,0x1000
 97c:	02378793          	addi	a5,a5,35 # 1000023 <lib_i2c.c.d894f163+0xff85ae>
 980:	c83e                	sw	a5,16(sp)
		.pin = PC3,
		.CCER = TIM_CC3E
	};


	PWM_GPIO_t pwm_CH4 = {
 982:	100007b7          	lui	a5,0x10000
 986:	02478793          	addi	a5,a5,36 # 10000024 <lib_i2c.c.d894f163+0xfff85af>
 98a:	c23e                	sw	a5,4(sp)
	PWM_GPIO_t pwm_CH1 = {
 98c:	c282                	sw	zero,68(sp)
 98e:	c482                	sw	zero,72(sp)
	PWM_GPIO_t pwm_CH1c = {
 990:	dc02                	sw	zero,56(sp)
 992:	de02                	sw	zero,60(sp)
	PWM_GPIO_t pwm_CH2 = {
 994:	d602                	sw	zero,44(sp)
 996:	d802                	sw	zero,48(sp)
	PWM_GPIO_t pwm_CH2c = {
 998:	d002                	sw	zero,32(sp)
 99a:	d202                	sw	zero,36(sp)
	PWM_GPIO_t pwm_CH3 = {
 99c:	ca02                	sw	zero,20(sp)
 99e:	cc02                	sw	zero,24(sp)
	PWM_GPIO_t pwm_CH4 = {
 9a0:	c402                	sw	zero,8(sp)
 9a2:	c602                	sw	zero,12(sp)
	RCC->APB2PCENR |= RCC_APB2Periph_TIM1;
 9a4:	400217b7          	lui	a5,0x40021
 9a8:	4f94                	lw	a3,24(a5)
 9aa:	6705                	lui	a4,0x1
 9ac:	80070713          	addi	a4,a4,-2048 # 800 <mini_vpprintf+0x166>
 9b0:	8ed9                	or	a3,a3,a4
 9b2:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM1_REMAP_NOREMAP;
 9b4:	400106b7          	lui	a3,0x40010
 9b8:	42d0                	lw	a2,4(a3)
		.pin = PC4,
		.CCER = TIM_CC4E
	};

	fun_t1pwm_init();
	fun_t1pwm_reload(&pwm_CH1);
 9ba:	0088                	addi	a0,sp,64
 9bc:	c2d0                	sw	a2,4(a3)
	RCC->APB2PRSTR |= RCC_APB2Periph_TIM1;
 9be:	47d4                	lw	a3,12(a5)
	TIM1->BDTR |= TIM_MOE;			// Enable TIM1 outputs
 9c0:	6621                	lui	a2,0x8
	RCC->APB2PRSTR |= RCC_APB2Periph_TIM1;
 9c2:	8f55                	or	a4,a4,a3
 9c4:	c7d8                	sw	a4,12(a5)
	RCC->APB2PRSTR &= ~RCC_APB2Periph_TIM1;
 9c6:	47d8                	lw	a4,12(a5)
 9c8:	76fd                	lui	a3,0xfffff
 9ca:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
 9ce:	8f75                	and	a4,a4,a3
 9d0:	c7d8                	sw	a4,12(a5)
	TIM1->PSC = 0x0000;			// Prescaler 
 9d2:	400136b7          	lui	a3,0x40013
 9d6:	c2069423          	sh	zero,-984(a3) # 40012c28 <_eusrstack+0x20012428>
	TIM1->ATRLR = 255;			// Auto Reload - sets period
 9da:	0ff00713          	li	a4,255
 9de:	c2e69623          	sh	a4,-980(a3)
	TIM1->SWEVGR |= TIM_UG;		// Reload immediately
 9e2:	c146d703          	lhu	a4,-1004(a3)
 9e6:	0742                	slli	a4,a4,0x10
 9e8:	8341                	srli	a4,a4,0x10
 9ea:	00176713          	ori	a4,a4,1
 9ee:	c0e69a23          	sh	a4,-1004(a3)
	TIM1->BDTR |= TIM_MOE;			// Enable TIM1 outputs
 9f2:	c446d703          	lhu	a4,-956(a3)
 9f6:	0742                	slli	a4,a4,0x10
 9f8:	8341                	srli	a4,a4,0x10
 9fa:	8f51                	or	a4,a4,a2
 9fc:	c4e69223          	sh	a4,-956(a3)
	TIM1->CTLR1 |= TIM_CEN;			// Enable TIM1
 a00:	c006d783          	lhu	a5,-1024(a3)
 a04:	07c2                	slli	a5,a5,0x10
 a06:	83c1                	srli	a5,a5,0x10
 a08:	0017e793          	ori	a5,a5,1
 a0c:	c0f69023          	sh	a5,-1024(a3)
 a10:	387d                	jal	2ce <fun_t1pwm_reload>
	fun_t1pwm_reload(&pwm_CH1c);
 a12:	1848                	addi	a0,sp,52
 a14:	386d                	jal	2ce <fun_t1pwm_reload>
	fun_t1pwm_reload(&pwm_CH2);
 a16:	1028                	addi	a0,sp,40
 a18:	385d                	jal	2ce <fun_t1pwm_reload>
	fun_t1pwm_reload(&pwm_CH2c);
 a1a:	0868                	addi	a0,sp,28
 a1c:	384d                	jal	2ce <fun_t1pwm_reload>
	fun_t1pwm_reload(&pwm_CH3);
 a1e:	0808                	addi	a0,sp,16
 a20:	307d                	jal	2ce <fun_t1pwm_reload>
	fun_t1pwm_reload(&pwm_CH4);
 a22:	0048                	addi	a0,sp,4
 a24:	306d                	jal	2ce <fun_t1pwm_reload>
	uint32_t sec_time = 0;
 a26:	4781                	li	a5,0

	//# ADC - DMA1_CH1: use PA2(CH0) and PA1(CH1)
	// fun_joystick_setup();

	while(1) {
		uint32_t now = millis();
 a28:	4080                	lw	s0,0(s1)

		// button_run(&button1, button_onChanged);
		// fun_encoder_task(now, &encoder_a, encoder_onChanged);
		fun_t1pwm_task(now, &pwm_CH1);
 a2a:	008c                	addi	a1,sp,64
 a2c:	c03e                	sw	a5,0(sp)
 a2e:	8522                	mv	a0,s0
 a30:	3ad5                	jal	424 <fun_t1pwm_task>
		fun_t1pwm_task(now, &pwm_CH1c);
 a32:	184c                	addi	a1,sp,52
 a34:	8522                	mv	a0,s0
 a36:	32fd                	jal	424 <fun_t1pwm_task>
		fun_t1pwm_task(now, &pwm_CH2);
 a38:	102c                	addi	a1,sp,40
 a3a:	8522                	mv	a0,s0
 a3c:	32e5                	jal	424 <fun_t1pwm_task>
		fun_t1pwm_task(now, &pwm_CH2c);
 a3e:	086c                	addi	a1,sp,28
 a40:	8522                	mv	a0,s0
 a42:	32cd                	jal	424 <fun_t1pwm_task>
		fun_t1pwm_task(now, &pwm_CH3);
 a44:	080c                	addi	a1,sp,16
 a46:	8522                	mv	a0,s0
 a48:	3af1                	jal	424 <fun_t1pwm_task>
		fun_t1pwm_task(now, &pwm_CH4);
 a4a:	004c                	addi	a1,sp,4
 a4c:	8522                	mv	a0,s0
 a4e:	3ad9                	jal	424 <fun_t1pwm_task>

		if (now - sec_time > 1000) {
 a50:	4782                	lw	a5,0(sp)
 a52:	3e800713          	li	a4,1000
 a56:	40f406b3          	sub	a3,s0,a5
 a5a:	fcd777e3          	bgeu	a4,a3,a28 <main+0x134>
			sec_time = now;

			printf("IM HERE\n\r");
 a5e:	6785                	lui	a5,0x1
 a60:	f3078513          	addi	a0,a5,-208 # f30 <I2C1_ER_IRQHandler+0x7e>
 a64:	33d5                	jal	848 <printf>
		uint32_t now = millis();
 a66:	87a2                	mv	a5,s0
 a68:	b7c1                	j	a28 <main+0x134>

00000a6a <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
 a6a:	fdc10113          	addi	sp,sp,-36
 a6e:	ce22                	sw	s0,28(sp)
 a70:	d006                	sw	ra,32(sp)
 a72:	cc26                	sw	s1,24(sp)
 a74:	842a                	mv	s0,a0
	if( tween <= 0 ) return hexa;
 a76:	0ac05f63          	blez	a2,b34 <TweenHexColors+0xca>
	if( tween >= 255 ) return hexb;
 a7a:	0fe00793          	li	a5,254
 a7e:	84ae                	mv	s1,a1
 a80:	0cc7c163          	blt	a5,a2,b42 <TweenHexColors+0xd8>
	int32_t aamt = 255-tween;
 a84:	0ff00293          	li	t0,255
 a88:	40c282b3          	sub	t0,t0,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
 a8c:	8596                	mv	a1,t0
 a8e:	0ff57513          	andi	a0,a0,255
 a92:	c216                	sw	t0,4(sp)
	int32_t aamt = 255-tween;
 a94:	c032                	sw	a2,0(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
 a96:	1ffff097          	auipc	ra,0x1ffff
 a9a:	572080e7          	jalr	1394(ra) # 20000008 <FastMultiply>
 a9e:	4602                	lw	a2,0(sp)
 aa0:	ca2a                	sw	a0,20(sp)
 aa2:	0ff4f513          	andi	a0,s1,255
 aa6:	85b2                	mv	a1,a2
 aa8:	1ffff097          	auipc	ra,0x1ffff
 aac:	560080e7          	jalr	1376(ra) # 20000008 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
 ab0:	4292                	lw	t0,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
 ab2:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
 ab4:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
 ab8:	8596                	mv	a1,t0
 aba:	0ff57513          	andi	a0,a0,255
 abe:	c616                	sw	t0,12(sp)
 ac0:	1ffff097          	auipc	ra,0x1ffff
 ac4:	548080e7          	jalr	1352(ra) # 20000008 <FastMultiply>
 ac8:	4602                	lw	a2,0(sp)
 aca:	c42a                	sw	a0,8(sp)
	int32_t hbr = (hexb>>8) & 0xff;
 acc:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
 ad0:	85b2                	mv	a1,a2
 ad2:	0ff57513          	andi	a0,a0,255
 ad6:	c232                	sw	a2,4(sp)
 ad8:	1ffff097          	auipc	ra,0x1ffff
 adc:	530080e7          	jalr	1328(ra) # 20000008 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
 ae0:	42b2                	lw	t0,12(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
 ae2:	c02a                	sw	a0,0(sp)
	int32_t hag = (hexa>>16) & 0xff;
 ae4:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
 ae8:	8596                	mv	a1,t0
 aea:	0ff57513          	andi	a0,a0,255
 aee:	1ffff097          	auipc	ra,0x1ffff
 af2:	51a080e7          	jalr	1306(ra) # 20000008 <FastMultiply>
 af6:	4612                	lw	a2,4(sp)
 af8:	842a                	mv	s0,a0
	int32_t hbg = (hexb>>16) & 0xff;
 afa:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
 afe:	85b2                	mv	a1,a2
 b00:	0ff57513          	andi	a0,a0,255
 b04:	1ffff097          	auipc	ra,0x1ffff
 b08:	504080e7          	jalr	1284(ra) # 20000008 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
 b0c:	4342                	lw	t1,16(sp)
 b0e:	47d2                	lw	a5,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
 b10:	4682                	lw	a3,0(sp)
 b12:	4722                	lw	a4,8(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
 b14:	979a                	add	a5,a5,t1
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
 b16:	942a                	add	s0,s0,a0
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
 b18:	9736                	add	a4,a4,a3
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
 b1a:	08078793          	addi	a5,a5,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
 b1e:	08070713          	addi	a4,a4,128
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
 b22:	08040413          	addi	s0,s0,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
 b26:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
 b28:	f0077713          	andi	a4,a4,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
 b2c:	8021                	srli	s0,s0,0x8
	return b | (r<<8) | (g<<16);
 b2e:	8fd9                	or	a5,a5,a4
 b30:	0442                	slli	s0,s0,0x10
 b32:	8c5d                	or	s0,s0,a5
}
 b34:	5082                	lw	ra,32(sp)
 b36:	8522                	mv	a0,s0
 b38:	4472                	lw	s0,28(sp)
 b3a:	44e2                	lw	s1,24(sp)
 b3c:	02410113          	addi	sp,sp,36
 b40:	8082                	ret
	if( tween >= 255 ) return hexb;
 b42:	842e                	mv	s0,a1
 b44:	bfc5                	j	b34 <TweenHexColors+0xca>

00000b46 <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
 b46:	1111                	addi	sp,sp,-28
 b48:	c826                	sw	s1,16(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
 b4a:	c581a483          	lw	s1,-936(gp) # 20000054 <WS2812LEDs>
	int place = WS2812LEDPlace;
 b4e:	c5418713          	addi	a4,gp,-940 # 20000050 <WS2812LEDPlace>
 b52:	4318                	lw	a4,0(a4)
 b54:	c5418613          	addi	a2,gp,-940 # 20000050 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
 b58:	ca22                	sw	s0,20(sp)
 b5a:	cc06                	sw	ra,24(sp)
 b5c:	87aa                	mv	a5,a0
 b5e:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
 b60:	03050693          	addi	a3,a0,48
 b64:	c032                	sw	a2,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
 b66:	04074963          	bltz	a4,bb8 <WS2812FillBuffSec.constprop.0+0x72>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
 b6a:	04f68963          	beq	a3,a5,bbc <WS2812FillBuffSec.constprop.0+0x76>
	{
		if( place >= ledcount )
 b6e:	04974e63          	blt	a4,s1,bca <WS2812FillBuffSec.constprop.0+0x84>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
 b72:	40f68633          	sub	a2,a3,a5
 b76:	4581                	li	a1,0
 b78:	853e                	mv	a0,a5
 b7a:	c23a                	sw	a4,4(sp)
 b7c:	39cd                	jal	86e <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
 b7e:	4712                	lw	a4,4(sp)
 b80:	cc15                	beqz	s0,bbc <WS2812FillBuffSec.constprop.0+0x76>
			{
				if( place == ledcount )
 b82:	00e49a63          	bne	s1,a4,b96 <WS2812FillBuffSec.constprop.0+0x50>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
 b86:	400206b7          	lui	a3,0x40020
 b8a:	5a9c                	lw	a5,48(a3)
 b8c:	fdf7f793          	andi	a5,a5,-33
 b90:	da9c                	sw	a5,48(a3)
					WS2812BLEDInUse = 0;
 b92:	c401a823          	sw	zero,-944(gp) # 2000004c <WS2812BLEDInUse>
				}
				place++;
 b96:	0705                	addi	a4,a4,1
 b98:	a015                	j	bbc <WS2812FillBuffSec.constprop.0+0x76>
		(*ptr++) = 0;
 b9a:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
 b9e:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
 ba2:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
 ba6:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
 baa:	00079423          	sh	zero,8(a5)
		place++;
 bae:	0705                	addi	a4,a4,1
 bb0:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
 bb2:	fe079f23          	sh	zero,-2(a5)
 bb6:	bf45                	j	b66 <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
 bb8:	fef691e3          	bne	a3,a5,b9a <WS2812FillBuffSec.constprop.0+0x54>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
 bbc:	4782                	lw	a5,0(sp)
}
 bbe:	40e2                	lw	ra,24(sp)
 bc0:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
 bc2:	c398                	sw	a4,0(a5)
}
 bc4:	44c2                	lw	s1,16(sp)
 bc6:	0171                	addi	sp,sp,28
 bc8:	8082                	ret
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
 bca:	c0418613          	addi	a2,gp,-1020 # 20000000 <tween>
 bce:	4210                	lw	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
 bd0:	00170293          	addi	t0,a4,1
 bd4:	9732                	add	a4,a4,a2
 bd6:	0ff00613          	li	a2,255
 bda:	00e04363          	bgtz	a4,be0 <WS2812FillBuffSec.constprop.0+0x9a>
 bde:	4601                	li	a2,0
 be0:	007f45b7          	lui	a1,0x7f4
 be4:	650d                	lui	a0,0x3
 be6:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.d894f163+0x7ec5cb>
 bea:	0ff50513          	addi	a0,a0,255 # 30ff <ch32_mess.c.bfdd0885+0x8a3>
 bee:	c616                	sw	t0,12(sp)
 bf0:	c43e                	sw	a5,8(sp)
 bf2:	c236                	sw	a3,4(sp)
 bf4:	3d9d                	jal	a6a <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
 bf6:	00b55613          	srli	a2,a0,0xb
 bfa:	6705                	lui	a4,0x1
 bfc:	f3c70713          	addi	a4,a4,-196 # f3c <bitquartets.9>
 c00:	8a79                	andi	a2,a2,30
 c02:	963a                	add	a2,a2,a4
 c04:	47a2                	lw	a5,8(sp)
 c06:	00065603          	lhu	a2,0(a2) # 8000 <lib_i2c.c.d894f163+0x58b>
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
 c0a:	42b2                	lw	t0,12(sp)
 c0c:	4692                	lw	a3,4(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
 c0e:	00c79023          	sh	a2,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
 c12:	00755613          	srli	a2,a0,0x7
 c16:	8a79                	andi	a2,a2,30
 c18:	963a                	add	a2,a2,a4
 c1a:	00065603          	lhu	a2,0(a2)
		ptr += 6;
 c1e:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
 c20:	fec79b23          	sh	a2,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
 c24:	00355613          	srli	a2,a0,0x3
 c28:	8a79                	andi	a2,a2,30
 c2a:	963a                	add	a2,a2,a4
 c2c:	00065603          	lhu	a2,0(a2)
 c30:	fec79c23          	sh	a2,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
 c34:	00f57613          	andi	a2,a0,15
 c38:	0606                	slli	a2,a2,0x1
 c3a:	963a                	add	a2,a2,a4
 c3c:	00065603          	lhu	a2,0(a2)
 c40:	fec79d23          	sh	a2,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
 c44:	01355613          	srli	a2,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
 c48:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
 c4a:	8a79                	andi	a2,a2,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
 c4c:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
 c4e:	963a                	add	a2,a2,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
 c50:	953a                	add	a0,a0,a4
 c52:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
 c56:	00065603          	lhu	a2,0(a2)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
 c5a:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
 c5e:	fec79e23          	sh	a2,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
 c62:	8716                	mv	a4,t0
 c64:	b719                	j	b6a <WS2812FillBuffSec.constprop.0+0x24>

00000c66 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
 c66:	fcc10113          	addi	sp,sp,-52
 c6a:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
 c6c:	400207b7          	lui	a5,0x40020
 c70:	439c                	lw	a5,0(a5)
{
 c72:	d022                	sw	s0,32(sp)
 c74:	ce26                	sw	s1,28(sp)
 c76:	d806                	sw	ra,48(sp)
 c78:	d616                	sw	t0,44(sp)
 c7a:	d41a                	sw	t1,40(sp)
 c7c:	d21e                	sw	t2,36(sp)
 c7e:	cc2a                	sw	a0,24(sp)
 c80:	ca2e                	sw	a1,20(sp)
 c82:	c832                	sw	a2,16(sp)
 c84:	c636                	sw	a3,12(sp)
 c86:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
 c88:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
 c8a:	40020437          	lui	s0,0x40020
 c8e:	10000493          	li	s1,256
 c92:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
 c94:	4782                	lw	a5,0(sp)
 c96:	4007f793          	andi	a5,a5,1024
 c9a:	c789                	beqz	a5,ca4 <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
 c9c:	4585                	li	a1,1
 c9e:	c6018513          	addi	a0,gp,-928 # 2000005c <WS2812dmabuff>
 ca2:	3555                	jal	b46 <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
 ca4:	4782                	lw	a5,0(sp)
 ca6:	2007f793          	andi	a5,a5,512
 caa:	c789                	beqz	a5,cb4 <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
 cac:	4581                	li	a1,0
 cae:	c9018513          	addi	a0,gp,-880 # 2000008c <WS2812dmabuff+0x30>
 cb2:	3d51                	jal	b46 <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
 cb4:	401c                	lw	a5,0(s0)
 cb6:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
 cb8:	4782                	lw	a5,0(sp)
 cba:	1007f793          	andi	a5,a5,256
 cbe:	fbf1                	bnez	a5,c92 <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
 cc0:	5402                	lw	s0,32(sp)
 cc2:	50c2                	lw	ra,48(sp)
 cc4:	52b2                	lw	t0,44(sp)
 cc6:	5322                	lw	t1,40(sp)
 cc8:	5392                	lw	t2,36(sp)
 cca:	44f2                	lw	s1,28(sp)
 ccc:	4562                	lw	a0,24(sp)
 cce:	45d2                	lw	a1,20(sp)
 cd0:	4642                	lw	a2,16(sp)
 cd2:	46b2                	lw	a3,12(sp)
 cd4:	4722                	lw	a4,8(sp)
 cd6:	4792                	lw	a5,4(sp)
 cd8:	03410113          	addi	sp,sp,52
 cdc:	30200073          	mret

00000ce0 <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
 ce0:	1151                	addi	sp,sp,-12
 ce2:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
 ce4:	e000f7b7          	lui	a5,0xe000f
{
 ce8:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
 cea:	4b98                	lw	a4,16(a5)
{
 cec:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
 cee:	66b1                	lui	a3,0xc
 cf0:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x410b>
 cf4:	9736                	add	a4,a4,a3
 cf6:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
 cf8:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
 cfc:	c5c18793          	addi	a5,gp,-932 # 20000058 <systick_millis>
 d00:	4398                	lw	a4,0(a5)
}
 d02:	46a2                	lw	a3,8(sp)
	systick_millis++;
 d04:	0705                	addi	a4,a4,1
 d06:	c398                	sw	a4,0(a5)
}
 d08:	4712                	lw	a4,4(sp)
 d0a:	4782                	lw	a5,0(sp)
 d0c:	0131                	addi	sp,sp,12
 d0e:	30200073          	mret

00000d12 <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
 d12:	7179                	addi	sp,sp,-48
 d14:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
 d16:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
 d1a:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
 d1c:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
 d20:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
 d24:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
 d28:	cc26                	sw	s1,24(sp)
 d2a:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
 d2c:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
 d30:	d416                	sw	t0,40(sp)
 d32:	d21a                	sw	t1,36(sp)
 d34:	d01e                	sw	t2,32(sp)
 d36:	ce22                	sw	s0,28(sp)
 d38:	ca2a                	sw	a0,20(sp)
 d3a:	c82e                	sw	a1,16(sp)
 d3c:	c632                	sw	a2,12(sp)
 d3e:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
 d40:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
 d42:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
 d44:	c305                	beqz	a4,d64 <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
 d46:	cc018713          	addi	a4,gp,-832 # 200000bc <i2c_slave_state>
 d4a:	4685                	li	a3,1
 d4c:	07c2                	slli	a5,a5,0x10
 d4e:	83c1                	srli	a5,a5,0x10
 d50:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
 d54:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
 d58:	839d                	srli	a5,a5,0x7
 d5a:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
 d5c:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
 d60:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
 d64:	0404f793          	andi	a5,s1,64
 d68:	c795                	beqz	a5,d94 <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
 d6a:	cc018793          	addi	a5,gp,-832 # 200000bc <i2c_slave_state>
 d6e:	0007c703          	lbu	a4,0(a5)
 d72:	c379                	beqz	a4,e38 <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
 d74:	40005737          	lui	a4,0x40005
 d78:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
 d7c:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
 d80:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
 d84:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
 d88:	0ff77713          	andi	a4,a4,255
 d8c:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
 d90:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
 d94:	0804f793          	andi	a5,s1,128
 d98:	c7a1                	beqz	a5,de0 <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
 d9a:	cc018793          	addi	a5,gp,-832 # 200000bc <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
 d9e:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
 da2:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
 da6:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
 daa:	400057b7          	lui	a5,0x40005
 dae:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
 db2:	cc018413          	addi	s0,gp,-832 # 200000bc <i2c_slave_state>
 db6:	cb79                	beqz	a4,e8c <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
 db8:	01044703          	lbu	a4,16(s0) # 40020010 <_eusrstack+0x2001f810>
 dbc:	0ee57663          	bgeu	a0,a4,ea8 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
 dc0:	4458                	lw	a4,12(s0)
 dc2:	972a                	add	a4,a4,a0
 dc4:	00074703          	lbu	a4,0(a4)
 dc8:	0ff77713          	andi	a4,a4,255
 dcc:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
 dd0:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
 dd2:	c391                	beqz	a5,dd6 <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
 dd4:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
 dd6:	00244783          	lbu	a5,2(s0)
 dda:	0785                	addi	a5,a5,1
 ddc:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
 de0:	88c1                	andi	s1,s1,16
 de2:	cc85                	beqz	s1,e1a <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
 de4:	40005737          	lui	a4,0x40005
 de8:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
 dec:	07c2                	slli	a5,a5,0x10
 dee:	83c1                	srli	a5,a5,0x10
 df0:	dff7f793          	andi	a5,a5,-513
 df4:	07c2                	slli	a5,a5,0x10
 df6:	83c1                	srli	a5,a5,0x10
 df8:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
 dfc:	cc018793          	addi	a5,gp,-832 # 200000bc <i2c_slave_state>
 e00:	02a7c703          	lbu	a4,42(a5)
 e04:	c74d                	beqz	a4,eae <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
 e06:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
 e08:	cb09                	beqz	a4,e1a <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
 e0a:	0017c503          	lbu	a0,1(a5)
 e0e:	0027c583          	lbu	a1,2(a5)
 e12:	8d89                	sub	a1,a1,a0
 e14:	0ff5f593          	andi	a1,a1,255
 e18:	9702                	jalr	a4
            }
        }
    }
}
 e1a:	4472                	lw	s0,28(sp)
 e1c:	50b2                	lw	ra,44(sp)
 e1e:	52a2                	lw	t0,40(sp)
 e20:	5312                	lw	t1,36(sp)
 e22:	5382                	lw	t2,32(sp)
 e24:	44e2                	lw	s1,24(sp)
 e26:	4552                	lw	a0,20(sp)
 e28:	45c2                	lw	a1,16(sp)
 e2a:	4632                	lw	a2,12(sp)
 e2c:	46a2                	lw	a3,8(sp)
 e2e:	4712                	lw	a4,4(sp)
 e30:	4782                	lw	a5,0(sp)
 e32:	6145                	addi	sp,sp,48
 e34:	30200073          	mret
            if (i2c_slave_state.address2matched) {
 e38:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
 e3c:	4705                	li	a4,1
 e3e:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
 e42:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
 e46:	c695                	beqz	a3,e72 <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
 e48:	0107c683          	lbu	a3,16(a5)
 e4c:	f4d774e3          	bgeu	a4,a3,d94 <I2C1_EV_IRQHandler+0x82>
 e50:	0287c683          	lbu	a3,40(a5)
 e54:	f2a1                	bnez	a3,d94 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
 e56:	400056b7          	lui	a3,0x40005
 e5a:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
 e5e:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
 e60:	96ba                	add	a3,a3,a4
 e62:	0ff67613          	andi	a2,a2,255
 e66:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
 e6a:	0705                	addi	a4,a4,1
 e6c:	00e78123          	sb	a4,2(a5)
 e70:	b715                	j	d94 <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
 e72:	0087c683          	lbu	a3,8(a5)
 e76:	f0d77fe3          	bgeu	a4,a3,d94 <I2C1_EV_IRQHandler+0x82>
 e7a:	01c7c683          	lbu	a3,28(a5)
 e7e:	fa99                	bnez	a3,d94 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
 e80:	400056b7          	lui	a3,0x40005
 e84:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
 e88:	43d4                	lw	a3,4(a5)
 e8a:	bfd9                	j	e60 <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
 e8c:	00844703          	lbu	a4,8(s0)
 e90:	00e57c63          	bgeu	a0,a4,ea8 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
 e94:	4058                	lw	a4,4(s0)
 e96:	972a                	add	a4,a4,a0
 e98:	00074703          	lbu	a4,0(a4)
 e9c:	0ff77713          	andi	a4,a4,255
 ea0:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
 ea4:	4c1c                	lw	a5,24(s0)
 ea6:	b735                	j	dd2 <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
 ea8:	00079823          	sh	zero,16(a5)
 eac:	bf15                	j	de0 <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
 eae:	4bd8                	lw	a4,20(a5)
 eb0:	bfa1                	j	e08 <I2C1_EV_IRQHandler+0xf6>

00000eb2 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
 eb2:	1151                	addi	sp,sp,-12
 eb4:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
 eb6:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
 eba:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
 ebc:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
 ec0:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
 ec2:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
 ec6:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
 eca:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
 ecc:	cf89                	beqz	a5,ee6 <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
 ece:	41475783          	lhu	a5,1044(a4)
 ed2:	40070713          	addi	a4,a4,1024
 ed6:	07c2                	slli	a5,a5,0x10
 ed8:	83c1                	srli	a5,a5,0x10
 eda:	eff7f793          	andi	a5,a5,-257
 ede:	07c2                	slli	a5,a5,0x10
 ee0:	83c1                	srli	a5,a5,0x10
 ee2:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
 ee6:	2006f793          	andi	a5,a3,512
 eea:	cf89                	beqz	a5,f04 <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
 eec:	40005737          	lui	a4,0x40005
 ef0:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
 ef4:	07c2                	slli	a5,a5,0x10
 ef6:	83c1                	srli	a5,a5,0x10
 ef8:	dff7f793          	andi	a5,a5,-513
 efc:	07c2                	slli	a5,a5,0x10
 efe:	83c1                	srli	a5,a5,0x10
 f00:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
 f04:	4006f693          	andi	a3,a3,1024
 f08:	ce89                	beqz	a3,f22 <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
 f0a:	40005737          	lui	a4,0x40005
 f0e:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
 f12:	07c2                	slli	a5,a5,0x10
 f14:	83c1                	srli	a5,a5,0x10
 f16:	bff7f793          	andi	a5,a5,-1025
 f1a:	07c2                	slli	a5,a5,0x10
 f1c:	83c1                	srli	a5,a5,0x10
 f1e:	40f71a23          	sh	a5,1044(a4)
    }
}
 f22:	46a2                	lw	a3,8(sp)
 f24:	4712                	lw	a4,4(sp)
 f26:	4782                	lw	a5,0(sp)
 f28:	0131                	addi	sp,sp,12
 f2a:	30200073          	mret
 f2e:	0000                	unimp
 f30:	4d49                	li	s10,18
 f32:	4820                	lw	s0,80(s0)
 f34:	5245                	li	tp,-15
 f36:	0a45                	addi	s4,s4,17
 f38:	000d                	c.nop	3
	...

00000f3c <bitquartets.9>:
 f3c:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
 f4c:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

Disassembly of section .data:

20000000 <tween>:
20000000:	ff42 ffff 0000 0000                         B.......

20000008 <FastMultiply>:
{
20000008:	87aa                	mv	a5,a0
	uint32_t ret = 0;
2000000a:	4501                	li	a0,0
		if( multiplicand & 1 )
2000000c:	0015f713          	andi	a4,a1,1
20000010:	c311                	beqz	a4,20000014 <FastMultiply+0xc>
			ret += mutliplicant;
20000012:	953e                	add	a0,a0,a5
		multiplicand>>=1;
20000014:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
20000016:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000018:	f9f5                	bnez	a1,2000000c <FastMultiply+0x4>
}
2000001a:	8082                	ret

2000001c <DMA1_Channel4_IRQHandler>:

// DMA transfer completion interrupt. It will fire when the DMA transfer is
// complete. We use it just to blink the LED
__attribute__((interrupt)) __attribute__((section(".srodata")))
void DMA1_Channel4_IRQHandler(void)
{
2000001c:	1151                	addi	sp,sp,-12
2000001e:	c23a                	sw	a4,4(sp)
	// Clear flag
	DMA1->INTFCR |= DMA_CTCIF4;
20000020:	40020737          	lui	a4,0x40020
{
20000024:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000026:	435c                	lw	a5,4(a4)
{
20000028:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000002a:	6689                	lui	a3,0x2
2000002c:	8fd5                	or	a5,a5,a3
2000002e:	c35c                	sw	a5,4(a4)

	// Blink LED
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000030:	400117b7          	lui	a5,0x40011
20000034:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000038:	47d8                	lw	a4,12(a5)
}
2000003a:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
2000003c:	04074713          	xori	a4,a4,64
20000040:	c7d8                	sw	a4,12(a5)
}
20000042:	4712                	lw	a4,4(sp)
20000044:	4782                	lw	a5,0(sp)
20000046:	0131                	addi	sp,sp,12
20000048:	30200073          	mret
