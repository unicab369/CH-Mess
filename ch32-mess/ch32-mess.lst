
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	1530006f          	j	952 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0a1c                	addi	a5,sp,272
   a:	0000                	unimp
   c:	09c4                	addi	s1,sp,212
	...
  2e:	0000                	unimp
  30:	18d8                	addi	a4,sp,116
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	09c4                	addi	s1,sp,212
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	09c4                	addi	s1,sp,212
  42:	0000                	unimp
  44:	09c4                	addi	s1,sp,212
  46:	0000                	unimp
  48:	09c4                	addi	s1,sp,212
  4a:	0000                	unimp
  4c:	09c4                	addi	s1,sp,212
  4e:	0000                	unimp
  50:	09c4                	addi	s1,sp,212
  52:	0000                	unimp
  54:	09c4                	addi	s1,sp,212
  56:	0000                	unimp
  58:	09c4                	addi	s1,sp,212
  5a:	0000                	unimp
  5c:	09c4                	addi	s1,sp,212
  5e:	0000                	unimp
  60:	190a                	slli	s2,s2,0x22
  62:	0000                	unimp
  64:	09c4                	addi	s1,sp,212
  66:	0000                	unimp
  68:	09c4                	addi	s1,sp,212
  6a:	0000                	unimp
  6c:	09c4                	addi	s1,sp,212
  6e:	0000                	unimp
  70:	09c4                	addi	s1,sp,212
  72:	0000                	unimp
  74:	09c4                	addi	s1,sp,212
  76:	0000                	unimp
  78:	09c4                	addi	s1,sp,212
  7a:	0000                	unimp
  7c:	09c4                	addi	s1,sp,212
  7e:	0000                	unimp
  80:	09c4                	addi	s1,sp,212
  82:	0000                	unimp
  84:	09c4                	addi	s1,sp,212
  86:	0000                	unimp
  88:	09c4                	addi	s1,sp,212
  8a:	0000                	unimp
  8c:	09c4                	addi	s1,sp,212
  8e:	0000                	unimp
  90:	09c4                	addi	s1,sp,212
  92:	0000                	unimp
  94:	09c4                	addi	s1,sp,212
  96:	0000                	unimp
  98:	09c4                	addi	s1,sp,212
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	andi	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srli	a1,a1,0x1
      ae:	0606                	slli	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	slli	a2,a2,0x1
      d4:	0686                	slli	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srli	a3,a3,0x1
      e6:	8205                	srli	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
{
     136:	1131                	addi	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
	int overflow = 0;
     144:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     146:	cab5                	beqz	a3,1ba <mini_pad+0x84>
	if(len > pad_to) {
     148:	0096d463          	bge	a3,s1,150 <mini_pad+0x1a>
     14c:	84b6                	mv	s1,a3
		overflow = 1;
     14e:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     150:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     154:	00045363          	bgez	s0,15a <mini_pad+0x24>
     158:	4401                	li	s0,0
     15a:	8622                	mv	a2,s0
     15c:	853a                	mv	a0,a4
     15e:	c23e                	sw	a5,4(sp)
     160:	c01a                	sw	t1,0(sp)
     162:	309000ef          	jal	ra,c6a <memset>
     166:	4302                	lw	t1,0(sp)
     168:	4792                	lw	a5,4(sp)
     16a:	872a                	mv	a4,a0
     16c:	008506b3          	add	a3,a0,s0
     170:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     172:	40c485b3          	sub	a1,s1,a2
     176:	04b04463          	bgtz	a1,1be <mini_pad+0x88>
     17a:	0004d363          	bgez	s1,180 <mini_pad+0x4a>
     17e:	4481                	li	s1,0
     180:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     184:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     188:	02030463          	beqz	t1,1b0 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     18c:	02c77263          	bgeu	a4,a2,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     190:	02a00793          	li	a5,42
     194:	fef60fa3          	sb	a5,-1(a2)
     198:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     19c:	00d77a63          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1a0:	fef60f23          	sb	a5,-2(a2)
     1a4:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     1a8:	00d77463          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1ac:	fef60ea3          	sb	a5,-3(a2)
}
     1b0:	40c2                	lw	ra,16(sp)
     1b2:	4432                	lw	s0,12(sp)
     1b4:	44a2                	lw	s1,8(sp)
     1b6:	0151                	addi	sp,sp,20
     1b8:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1ba:	86a6                	mv	a3,s1
     1bc:	bf51                	j	150 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1be:	00c785b3          	add	a1,a5,a2
     1c2:	0005c503          	lbu	a0,0(a1)
     1c6:	00c685b3          	add	a1,a3,a2
     1ca:	0605                	addi	a2,a2,1
     1cc:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1d0:	b74d                	j	172 <mini_pad+0x3c>

000001d2 <_puts>:
{
     1d2:	832a                	mv	t1,a0
     1d4:	852e                	mv	a0,a1
	if(!buf) return len;
     1d6:	ce01                	beqz	a2,1ee <_puts+0x1c>
	char * p0 = b->buffer;
     1d8:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1dc:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1de:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1e0:	00a74863          	blt	a4,a0,1f0 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1e4:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1e8:	4248                	lw	a0,4(a2)
     1ea:	40550533          	sub	a0,a0,t0
}
     1ee:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1f0:	4614                	lw	a3,8(a2)
     1f2:	fff68593          	addi	a1,a3,-1
     1f6:	4214                	lw	a3,0(a2)
     1f8:	96ae                	add	a3,a3,a1
     1fa:	fed785e3          	beq	a5,a3,1e4 <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1fe:	00178693          	addi	a3,a5,1
     202:	c254                	sw	a3,4(a2)
     204:	00e306b3          	add	a3,t1,a4
     208:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     20c:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     20e:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     212:	b7f1                	j	1de <_puts+0xc>

00000214 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     214:	e0000737          	lui	a4,0xe0000
     218:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     21c:	0f470693          	addi	a3,a4,244
     220:	0807f793          	andi	a5,a5,128
     224:	fbf5                	bnez	a5,218 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     226:	783027b7          	lui	a5,0x78302
     22a:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     22e:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     230:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     232:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     236:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     238:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     23a:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     23e:	0807f793          	andi	a5,a5,128
     242:	ffe5                	bnez	a5,23a <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     244:	00e557b3          	srl	a5,a0,a4
     248:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     24c:	03000793          	li	a5,48
     250:	00d35463          	bge	t1,a3,258 <PrintHex+0x44>
     254:	05700793          	li	a5,87
     258:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     25a:	07a2                	slli	a5,a5,0x8
     25c:	0857e793          	ori	a5,a5,133
     260:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     264:	1771                	addi	a4,a4,-4
     266:	fcb71ae3          	bne	a4,a1,23a <PrintHex+0x26>
}
     26a:	8082                	ret

0000026c <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     26c:	1101                	addi	sp,sp,-32
     26e:	ce06                	sw	ra,28(sp)
     270:	cc22                	sw	s0,24(sp)
     272:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     274:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     276:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     278:	00055763          	bgez	a0,286 <mini_itoa.part.0+0x1a>
     27c:	e689                	bnez	a3,286 <mini_itoa.part.0+0x1a>
		negative = 1;
     27e:	4785                	li	a5,1
		value = -value;
     280:	40a00333          	neg	t1,a0
		negative = 1;
     284:	c03e                	sw	a5,0(sp)
     286:	06100413          	li	s0,97
     28a:	c219                	beqz	a2,290 <mini_itoa.part.0+0x24>
     28c:	04100413          	li	s0,65
	int	negative = 0;
     290:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     292:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     294:	851a                	mv	a0,t1
     296:	c83a                	sw	a4,16(sp)
     298:	c21a                	sw	t1,4(sp)
     29a:	c62e                	sw	a1,12(sp)
     29c:	c41a                	sw	t1,8(sp)
     29e:	35b9                	jal	ec <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2a0:	47a5                	li	a5,9
     2a2:	4322                	lw	t1,8(sp)
     2a4:	45b2                	lw	a1,12(sp)
     2a6:	4742                	lw	a4,16(sp)
     2a8:	0ff57693          	andi	a3,a0,255
     2ac:	06a7e163          	bltu	a5,a0,30e <mini_itoa.part.0+0xa2>
     2b0:	03068693          	addi	a3,a3,48
     2b4:	0ff6f693          	andi	a3,a3,255
     2b8:	00148793          	addi	a5,s1,1
     2bc:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2c0:	851a                	mv	a0,t1
     2c2:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2c4:	c63e                	sw	a5,12(sp)
		value /= radix;
     2c6:	c42e                	sw	a1,8(sp)
     2c8:	3be5                	jal	c0 <__hidden___udivsi3>
	} while (value > 0);
     2ca:	4692                	lw	a3,4(sp)
     2cc:	45a2                	lw	a1,8(sp)
     2ce:	47b2                	lw	a5,12(sp)
     2d0:	4742                	lw	a4,16(sp)
		value /= radix;
     2d2:	832a                	mv	t1,a0
	} while (value > 0);
     2d4:	02b6fb63          	bgeu	a3,a1,30a <mini_itoa.part.0+0x9e>
	if (negative)
     2d8:	4682                	lw	a3,0(sp)
     2da:	c699                	beqz	a3,2e8 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2dc:	02d00693          	li	a3,45
     2e0:	00d78023          	sb	a3,0(a5)
     2e4:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2e8:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2ec:	01f55693          	srli	a3,a0,0x1f
     2f0:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2f2:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2f6:	8685                	srai	a3,a3,0x1
     2f8:	4601                	li	a2,0
     2fa:	17fd                	addi	a5,a5,-1
     2fc:	00d64b63          	blt	a2,a3,312 <mini_itoa.part.0+0xa6>
}
     300:	40f2                	lw	ra,28(sp)
     302:	4462                	lw	s0,24(sp)
     304:	44d2                	lw	s1,20(sp)
     306:	6105                	addi	sp,sp,32
     308:	8082                	ret
	} while (value > 0);
     30a:	84be                	mv	s1,a5
     30c:	b761                	j	294 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     30e:	96a2                	add	a3,a3,s0
     310:	b755                	j	2b4 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     312:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     316:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     31a:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     31e:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     320:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     324:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     328:	bfc9                	j	2fa <mini_itoa.part.0+0x8e>

0000032a <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     32a:	400057b7          	lui	a5,0x40005
     32e:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     332:	40078793          	addi	a5,a5,1024
     336:	10077713          	andi	a4,a4,256
     33a:	cf09                	beqz	a4,354 <i2c_error+0x2a>
     33c:	0147d703          	lhu	a4,20(a5)
     340:	4505                	li	a0,1
     342:	0742                	slli	a4,a4,0x10
     344:	8341                	srli	a4,a4,0x10
     346:	eff77713          	andi	a4,a4,-257
     34a:	0742                	slli	a4,a4,0x10
     34c:	8341                	srli	a4,a4,0x10
     34e:	00e79a23          	sh	a4,20(a5)
     352:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     354:	0147d703          	lhu	a4,20(a5)
     358:	40077713          	andi	a4,a4,1024
     35c:	cf09                	beqz	a4,376 <i2c_error+0x4c>
     35e:	0147d703          	lhu	a4,20(a5)
     362:	4509                	li	a0,2
     364:	0742                	slli	a4,a4,0x10
     366:	8341                	srli	a4,a4,0x10
     368:	bff77713          	andi	a4,a4,-1025
     36c:	0742                	slli	a4,a4,0x10
     36e:	8341                	srli	a4,a4,0x10
     370:	00e79a23          	sh	a4,20(a5)
     374:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     376:	0147d703          	lhu	a4,20(a5)
     37a:	20077713          	andi	a4,a4,512
     37e:	cf09                	beqz	a4,398 <i2c_error+0x6e>
     380:	0147d703          	lhu	a4,20(a5)
     384:	450d                	li	a0,3
     386:	0742                	slli	a4,a4,0x10
     388:	8341                	srli	a4,a4,0x10
     38a:	dff77713          	andi	a4,a4,-513
     38e:	0742                	slli	a4,a4,0x10
     390:	8341                	srli	a4,a4,0x10
     392:	00e79a23          	sh	a4,20(a5)
     396:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     398:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     39c:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     39e:	832d                	srli	a4,a4,0xb
     3a0:	8b05                	andi	a4,a4,1
     3a2:	cf01                	beqz	a4,3ba <i2c_error+0x90>
     3a4:	0147d703          	lhu	a4,20(a5)
     3a8:	76fd                	lui	a3,0xfffff
     3aa:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     3ae:	0742                	slli	a4,a4,0x10
     3b0:	8341                	srli	a4,a4,0x10
     3b2:	8f75                	and	a4,a4,a3
     3b4:	00e79a23          	sh	a4,20(a5)
     3b8:	4511                	li	a0,4
}
     3ba:	8082                	ret

000003bc <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     3bc:	415c                	lw	a5,4(a0)
     3be:	e7b1                	bnez	a5,40a <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     3c0:	00855783          	lhu	a5,8(a0)
     3c4:	40005737          	lui	a4,0x40005
     3c8:	0786                	slli	a5,a5,0x1
     3ca:	0fe7f793          	andi	a5,a5,254
     3ce:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3d2:	6789                	lui	a5,0x2
     3d4:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.963ac852+0x180>
	return (status & status_mask) == status_mask; 
     3d8:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3dc:	c6f1ac23          	sw	a5,-904(gp) # 20000074 <_i2c_timeout>
     3e0:	4501                	li	a0,0
     3e2:	c7818693          	addi	a3,gp,-904 # 20000074 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     3e6:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     3ea:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.d894f163+0x68b36>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     3ee:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     3f2:	01071593          	slli	a1,a4,0x10
     3f6:	41835703          	lhu	a4,1048(t1)
     3fa:	81c1                	srli	a1,a1,0x10
     3fc:	0742                	slli	a4,a4,0x10
     3fe:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     400:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     402:	00c71663          	bne	a4,a2,40e <i2c_send_addr_write+0x52>
     406:	c111                	beqz	a0,40a <i2c_send_addr_write+0x4e>
     408:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     40a:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     40c:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     40e:	17fd                	addi	a5,a5,-1
     410:	4505                	li	a0,1
     412:	fff1                	bnez	a5,3ee <i2c_send_addr_write+0x32>
{
     414:	1151                	addi	sp,sp,-12
     416:	c406                	sw	ra,8(sp)
     418:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     41c:	3739                	jal	32a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     41e:	e111                	bnez	a0,422 <i2c_send_addr_write+0x66>
     420:	4515                	li	a0,5
}
     422:	40a2                	lw	ra,8(sp)
     424:	0131                	addi	sp,sp,12
     426:	8082                	ret

00000428 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     428:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     42a:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     42c:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     42e:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.963ac852+0x180>
     432:	c6f1ac23          	sw	a5,-904(gp) # 20000074 <_i2c_timeout>
{
     436:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     438:	c002                	sw	zero,0(sp)
     43a:	c202                	sw	zero,4(sp)
     43c:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     440:	4601                	li	a2,0
     442:	c7818713          	addi	a4,gp,-904 # 20000074 <_i2c_timeout>
     446:	400055b7          	lui	a1,0x40005
     44a:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     44e:	8a89                	andi	a3,a3,2
     450:	e689                	bnez	a3,45a <i2c_ping+0x32>
     452:	c211                	beqz	a2,456 <i2c_ping+0x2e>
     454:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
     456:	4501                	li	a0,0
     458:	a809                	j	46a <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     45a:	17fd                	addi	a5,a5,-1
     45c:	4605                	li	a2,1
     45e:	f7f5                	bnez	a5,44a <i2c_ping+0x22>
     460:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
     464:	35d9                	jal	32a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     466:	e111                	bnez	a0,46a <i2c_ping+0x42>
     468:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     46a:	40005737          	lui	a4,0x40005
     46e:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     472:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     476:	07c2                	slli	a5,a5,0x10
     478:	83c1                	srli	a5,a5,0x10
     47a:	1007e793          	ori	a5,a5,256
     47e:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     482:	00030737          	lui	a4,0x30
     486:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     488:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     48c:	01079693          	slli	a3,a5,0x10
     490:	4185d783          	lhu	a5,1048(a1)
     494:	82c1                	srli	a3,a3,0x10
     496:	07c2                	slli	a5,a5,0x10
     498:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     49a:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     49c:	fee796e3          	bne	a5,a4,488 <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     4a0:	e119                	bnez	a0,4a6 <i2c_ping+0x7e>
     4a2:	850a                	mv	a0,sp
     4a4:	3f21                	jal	3bc <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     4a6:	40005737          	lui	a4,0x40005
     4aa:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     4ae:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     4b0:	07c2                	slli	a5,a5,0x10
     4b2:	83c1                	srli	a5,a5,0x10
     4b4:	2007e793          	ori	a5,a5,512
     4b8:	40f71023          	sh	a5,1024(a4)
}
     4bc:	0161                	addi	sp,sp,24
     4be:	8082                	ret

000004c0 <i2c_write_raw.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4c0:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     4c2:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4c4:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.963ac852+0x180>
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     4c8:	c626                	sw	s1,12(sp)
     4ca:	c22e                	sw	a1,4(sp)
     4cc:	ca06                	sw	ra,20(sp)
     4ce:	c822                	sw	s0,16(sp)
     4d0:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4d2:	c6f1ac23          	sw	a5,-904(gp) # 20000074 <_i2c_timeout>
     4d6:	4601                	li	a2,0
     4d8:	c7818493          	addi	s1,gp,-904 # 20000074 <_i2c_timeout>
     4dc:	400055b7          	lui	a1,0x40005
     4e0:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     4e4:	8a89                	andi	a3,a3,2
     4e6:	e6bd                	bnez	a3,554 <i2c_write_raw.constprop.0+0x94>
     4e8:	c211                	beqz	a2,4ec <i2c_write_raw.constprop.0+0x2c>
     4ea:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4ec:	400056b7          	lui	a3,0x40005
     4f0:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     4f4:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4f8:	07c2                	slli	a5,a5,0x10
     4fa:	83c1                	srli	a5,a5,0x10
     4fc:	1007e793          	ori	a5,a5,256
     500:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     504:	000306b7          	lui	a3,0x30
     508:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     50a:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     50e:	01079613          	slli	a2,a5,0x10
     512:	4185d783          	lhu	a5,1048(a1)
     516:	8241                	srli	a2,a2,0x10
     518:	07c2                	slli	a5,a5,0x10
     51a:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     51c:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     51e:	fed796e3          	bne	a5,a3,50a <i2c_write_raw.constprop.0+0x4a>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     522:	c2018513          	addi	a0,gp,-992 # 2000001c <dev_ssd1306>
     526:	3d59                	jal	3bc <i2c_send_addr_write>
     528:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     52a:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
     52c:	e91d                	bnez	a0,562 <i2c_write_raw.constprop.0+0xa2>
		while(cbyte < len)
     52e:	4792                	lw	a5,4(sp)
     530:	02f67963          	bgeu	a2,a5,562 <i2c_write_raw.constprop.0+0xa2>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     534:	6689                	lui	a3,0x2
     536:	71068693          	addi	a3,a3,1808 # 2710 <ch32fun.c.963ac852+0x180>
     53a:	c094                	sw	a3,0(s1)
     53c:	4501                	li	a0,0
     53e:	40005337          	lui	t1,0x40005
     542:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     546:	0805f593          	andi	a1,a1,128
     54a:	c5b9                	beqz	a1,598 <i2c_write_raw.constprop.0+0xd8>
     54c:	c111                	beqz	a0,550 <i2c_write_raw.constprop.0+0x90>
     54e:	c094                	sw	a3,0(s1)
     550:	4501                	li	a0,0
     552:	a8a9                	j	5ac <i2c_write_raw.constprop.0+0xec>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     554:	17fd                	addi	a5,a5,-1
     556:	4605                	li	a2,1
     558:	f7c1                	bnez	a5,4e0 <i2c_write_raw.constprop.0+0x20>
	i2c_err_t i2c_err = i2c_error();
     55a:	3bc1                	jal	32a <i2c_error>
     55c:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     55e:	e111                	bnez	a0,562 <i2c_write_raw.constprop.0+0xa2>
     560:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     562:	6689                	lui	a3,0x2
     564:	71068693          	addi	a3,a3,1808 # 2710 <ch32fun.c.963ac852+0x180>
	return (status & status_mask) == status_mask; 
     568:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     56c:	c094                	sw	a3,0(s1)
     56e:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     570:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     574:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.d894f163+0x68b38>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     578:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     57c:	01061513          	slli	a0,a2,0x10
     580:	4182d603          	lhu	a2,1048(t0)
     584:	8141                	srli	a0,a0,0x10
     586:	0642                	slli	a2,a2,0x10
     588:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     58a:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     58c:	04b61363          	bne	a2,a1,5d2 <i2c_write_raw.constprop.0+0x112>
     590:	04030a63          	beqz	t1,5e4 <i2c_write_raw.constprop.0+0x124>
     594:	c094                	sw	a3,0(s1)
     596:	a0b9                	j	5e4 <i2c_write_raw.constprop.0+0x124>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     598:	16fd                	addi	a3,a3,-1
     59a:	4505                	li	a0,1
     59c:	f2dd                	bnez	a3,542 <i2c_write_raw.constprop.0+0x82>
     59e:	c432                	sw	a2,8(sp)
     5a0:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     5a4:	3359                	jal	32a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     5a6:	4622                	lw	a2,8(sp)
     5a8:	e111                	bnez	a0,5ac <i2c_write_raw.constprop.0+0xec>
     5aa:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     5ac:	4782                	lw	a5,0(sp)
     5ae:	00c786b3          	add	a3,a5,a2
     5b2:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     5b6:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     5b8:	400056b7          	lui	a3,0x40005
     5bc:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     5c0:	0ff67613          	andi	a2,a2,255
     5c4:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     5c6:	e501                	bnez	a0,5ce <i2c_write_raw.constprop.0+0x10e>
     5c8:	338d                	jal	32a <i2c_error>
     5ca:	4622                	lw	a2,8(sp)
     5cc:	d12d                	beqz	a0,52e <i2c_write_raw.constprop.0+0x6e>
     5ce:	842a                	mv	s0,a0
     5d0:	bf49                	j	562 <i2c_write_raw.constprop.0+0xa2>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     5d2:	16fd                	addi	a3,a3,-1
     5d4:	4305                	li	t1,1
     5d6:	f2cd                	bnez	a3,578 <i2c_write_raw.constprop.0+0xb8>
     5d8:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     5dc:	33b9                	jal	32a <i2c_error>
     5de:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     5e0:	e111                	bnez	a0,5e4 <i2c_write_raw.constprop.0+0x124>
     5e2:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5e4:	400056b7          	lui	a3,0x40005
     5e8:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     5ec:	40d2                	lw	ra,20(sp)
     5ee:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5f0:	0742                	slli	a4,a4,0x10
}
     5f2:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5f4:	8341                	srli	a4,a4,0x10
     5f6:	20076713          	ori	a4,a4,512
     5fa:	40e69023          	sh	a4,1024(a3)
}
     5fe:	44b2                	lw	s1,12(sp)
     600:	0161                	addi	sp,sp,24
     602:	8082                	ret

00000604 <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     604:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     606:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     60a:	4589                	li	a1,2
     60c:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     60e:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     610:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     614:	3575                	jal	4c0 <i2c_write_raw.constprop.0>
}
     616:	40b2                	lw	ra,12(sp)
     618:	0ff57513          	andi	a0,a0,255
     61c:	0141                	addi	sp,sp,16
     61e:	8082                	ret

00000620 <Neo_render_colorFlashing.constprop.0>:

    return led_arr[ledIdx].packed;
}

uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
    if (systick_handleTimeout(&fr->ref_time, fr->frame_duration)) {
     620:	c2c18693          	addi	a3,gp,-980 # 20000028 <leds_frame>
	uint32_t now = millis();
     624:	c8c1a603          	lw	a2,-884(gp) # 20000088 <systick_millis>
	if (now - *ref_time > duration) {
     628:	4a9c                	lw	a5,16(a3)
     62a:	42cc                	lw	a1,4(a3)
uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
     62c:	fc410113          	addi	sp,sp,-60
     630:	dc06                	sw	ra,56(sp)
     632:	da22                	sw	s0,52(sp)
     634:	d826                	sw	s1,48(sp)
     636:	c82a                	sw	a0,16(sp)
	if (now - *ref_time > duration) {
     638:	40f607b3          	sub	a5,a2,a5
     63c:	0cf5fc63          	bgeu	a1,a5,714 <Neo_render_colorFlashing.constprop.0+0xf4>
     640:	c2c18493          	addi	s1,gp,-980 # 20000028 <leds_frame>
    return ani->colors[ani->ref_index];
     644:	c5418593          	addi	a1,gp,-940 # 20000050 <color_ani>
        fr->frame_value += 1;
     648:	0094c783          	lbu	a5,9(s1)
    return ani->colors[ani->ref_index];
     64c:	0055c703          	lbu	a4,5(a1)
		*ref_time = now;
     650:	c890                	sw	a2,16(s1)
    return ani->colors[ani->ref_index];
     652:	4190                	lw	a2,0(a1)
        fr->frame_value += 1;
     654:	0785                	addi	a5,a5,1
     656:	0ff7f793          	andi	a5,a5,255
    return ani->colors[ani->ref_index];
     65a:	00271513          	slli	a0,a4,0x2
        fr->frame_value += 1;
     65e:	00f484a3          	sb	a5,9(s1)
    return ani->colors[ani->ref_index];
     662:	962a                	add	a2,a2,a0
     664:	c43a                	sw	a4,8(sp)
     666:	00064703          	lbu	a4,0(a2)
     66a:	420c                	lw	a1,0(a2)
        RGB_t color = animation_currentColor(ani);

        for (int i=0; i < NR_LEDS; i++) {
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     66c:	00879513          	slli	a0,a5,0x8
    return ani->colors[ani->ref_index];
     670:	c63a                	sw	a4,12(sp)
     672:	00164703          	lbu	a4,1(a2)
     676:	d62e                	sw	a1,44(sp)
     678:	d02e                	sw	a1,32(sp)
     67a:	c23a                	sw	a4,4(sp)
     67c:	00264703          	lbu	a4,2(a2)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     680:	06400593          	li	a1,100
     684:	8d1d                	sub	a0,a0,a5
     686:	ca3e                	sw	a5,20(sp)
    return ani->colors[ani->ref_index];
     688:	c03a                	sw	a4,0(sp)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     68a:	343d                	jal	b8 <__divsi3>
     68c:	0ff57593          	andi	a1,a0,255
     690:	6509                	lui	a0,0x2
     692:	c6c50513          	addi	a0,a0,-916 # 1c6c <SIN_LUT2>
     696:	952e                	add	a0,a0,a1
     698:	00054583          	lbu	a1,0(a0)
     69c:	47d2                	lw	a5,20(sp)
     69e:	0f018693          	addi	a3,gp,240 # 200004ec <led_arr>
     6a2:	c5418413          	addi	s0,gp,-940 # 20000050 <color_ani>
     6a6:	ce3e                	sw	a5,28(sp)
     6a8:	47b2                	lw	a5,12(sp)
     6aa:	cc36                	sw	a3,24(sp)
     6ac:	ca2e                	sw	a1,20(sp)
     6ae:	02f10023          	sb	a5,32(sp)
     6b2:	4792                	lw	a5,4(sp)
     6b4:	02f100a3          	sb	a5,33(sp)
     6b8:	4782                	lw	a5,0(sp)
     6ba:	02f10123          	sb	a5,34(sp)
     6be:	5502                	lw	a0,32(sp)
     6c0:	d22a                	sw	a0,36(sp)
     6c2:	4532                	lw	a0,12(sp)
     6c4:	3af1                	jal	a0 <__mulsi3>
     6c6:	8521                	srai	a0,a0,0x8
     6c8:	45d2                	lw	a1,20(sp)
     6ca:	02a10223          	sb	a0,36(sp)
     6ce:	4512                	lw	a0,4(sp)
     6d0:	3ac1                	jal	a0 <__mulsi3>
     6d2:	8521                	srai	a0,a0,0x8
     6d4:	45d2                	lw	a1,20(sp)
     6d6:	02a102a3          	sb	a0,37(sp)
     6da:	4502                	lw	a0,0(sp)
     6dc:	32d1                	jal	a0 <__mulsi3>
     6de:	8521                	srai	a0,a0,0x8
     6e0:	02a10323          	sb	a0,38(sp)
     6e4:	46e2                	lw	a3,24(sp)
     6e6:	5512                	lw	a0,36(sp)
        for (int i=0; i < NR_LEDS; i++) {
     6e8:	10818613          	addi	a2,gp,264 # 20000504 <printBuff>
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     6ec:	c288                	sw	a0,0(a3)
        for (int i=0; i < NR_LEDS; i++) {
     6ee:	0691                	addi	a3,a3,4
     6f0:	45d2                	lw	a1,20(sp)
     6f2:	47f2                	lw	a5,28(sp)
     6f4:	fad619e3          	bne	a2,a3,6a6 <Neo_render_colorFlashing.constprop.0+0x86>
        }

        if (fr->frame_value >= 100) {
     6f8:	06300693          	li	a3,99
     6fc:	00f6fc63          	bgeu	a3,a5,714 <Neo_render_colorFlashing.constprop.0+0xf4>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     700:	47a2                	lw	a5,8(sp)
     702:	00444583          	lbu	a1,4(s0)
            fr->frame_value = 0;
     706:	000484a3          	sb	zero,9(s1)
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     70a:	00178513          	addi	a0,a5,1
     70e:	3409                	jal	110 <__modsi3>
     710:	00a402a3          	sb	a0,5(s0)

            animation_step(ani);
        }
    }

    return led_arr[ledIdx].packed;
     714:	47c2                	lw	a5,16(sp)
}
     716:	50e2                	lw	ra,56(sp)
     718:	5452                	lw	s0,52(sp)
    return led_arr[ledIdx].packed;
     71a:	00279513          	slli	a0,a5,0x2
     71e:	0f018793          	addi	a5,gp,240 # 200004ec <led_arr>
     722:	953e                	add	a0,a0,a5
}
     724:	4108                	lw	a0,0(a0)
     726:	54c2                	lw	s1,48(sp)
     728:	03c10113          	addi	sp,sp,60
     72c:	8082                	ret

0000072e <WS2812FillBuffSec.constprop.0>:
#define R16_SPI_TOTAL_CNT R16_SPI0_TOTAL_CNT
#define R8_SPI_INT_FLAG R8_SPI0_INT_FLAG
#endif
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     72e:	1111                	addi	sp,sp,-28
     730:	c826                	sw	s1,16(sp)
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };
#endif

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
     732:	c741a483          	lw	s1,-908(gp) # 20000070 <WS2812LEDs>
	int place = WS2812LEDPlace;
     736:	c7018713          	addi	a4,gp,-912 # 2000006c <WS2812LEDPlace>
     73a:	4318                	lw	a4,0(a4)
     73c:	c7018693          	addi	a3,gp,-912 # 2000006c <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     740:	ca22                	sw	s0,20(sp)
     742:	cc06                	sw	ra,24(sp)
     744:	87aa                	mv	a5,a0
     746:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
     748:	03050613          	addi	a2,a0,48
     74c:	c036                	sw	a3,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
     74e:	04074863          	bltz	a4,79e <WS2812FillBuffSec.constprop.0+0x70>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
     752:	04f60863          	beq	a2,a5,7a2 <WS2812FillBuffSec.constprop.0+0x74>
	{
		if( place >= ledcount )
     756:	04974d63          	blt	a4,s1,7b0 <WS2812FillBuffSec.constprop.0+0x82>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
     75a:	8e1d                	sub	a2,a2,a5
     75c:	4581                	li	a1,0
     75e:	853e                	mv	a0,a5
     760:	c23a                	sw	a4,4(sp)
     762:	2321                	jal	c6a <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
     764:	4712                	lw	a4,4(sp)
     766:	cc15                	beqz	s0,7a2 <WS2812FillBuffSec.constprop.0+0x74>
			{
				if( place == ledcount )
     768:	00e49a63          	bne	s1,a4,77c <WS2812FillBuffSec.constprop.0+0x4e>
				{
					// Take the DMA out of circular mode and let it expire.
#if defined(CH57x) || defined(CH58x) || defined(CH59x)
					R8_SPI_INTER_EN &= ~RB_SPI_IE_DMA_END;  // Disable DMA end interrupt
#else
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
     76c:	400206b7          	lui	a3,0x40020
     770:	5a9c                	lw	a5,48(a3)
     772:	fdf7f793          	andi	a5,a5,-33
     776:	da9c                	sw	a5,48(a3)
#endif
					WS2812BLEDInUse = 0;
     778:	c601a623          	sw	zero,-916(gp) # 20000068 <WS2812BLEDInUse>
				}
				place++;
     77c:	0705                	addi	a4,a4,1
     77e:	a015                	j	7a2 <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
     780:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
     784:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
     788:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
     78c:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
     790:	00079423          	sh	zero,8(a5)
		place++;
     794:	0705                	addi	a4,a4,1
     796:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
     798:	fe079f23          	sh	zero,-2(a5)
     79c:	bf4d                	j	74e <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
     79e:	fef611e3          	bne	a2,a5,780 <WS2812FillBuffSec.constprop.0+0x52>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
     7a2:	4782                	lw	a5,0(sp)
}
     7a4:	40e2                	lw	ra,24(sp)
     7a6:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
     7a8:	c398                	sw	a4,0(a5)
}
     7aa:	44c2                	lw	s1,16(sp)
     7ac:	0171                	addi	sp,sp,28
     7ae:	8082                	ret
    color_ani.ref_index = 0;
    memset(led_arr, 0, sizeof(led_arr));
}

uint32_t WS2812BLEDCallback(int ledIdx){
    leds_frame.frame_duration = 70;
     7b0:	c2c18513          	addi	a0,gp,-980 # 20000028 <leds_frame>
     7b4:	04600313          	li	t1,70
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     7b8:	00170593          	addi	a1,a4,1
     7bc:	00652223          	sw	t1,4(a0)
        case NEO_COLOR_FLASHING:
            leds_frame.frame_duration = 10;
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
            break;
        default:
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
     7c0:	853a                	mv	a0,a4
     7c2:	c63e                	sw	a5,12(sp)
     7c4:	c432                	sw	a2,8(sp)
     7c6:	c22e                	sw	a1,4(sp)
     7c8:	3da1                	jal	620 <Neo_render_colorFlashing.constprop.0>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     7ca:	00b55313          	srli	t1,a0,0xb
     7ce:	6709                	lui	a4,0x2
     7d0:	d6c70713          	addi	a4,a4,-660 # 1d6c <bitquartets.5>
     7d4:	01e37313          	andi	t1,t1,30
     7d8:	933a                	add	t1,t1,a4
     7da:	47b2                	lw	a5,12(sp)
     7dc:	00035303          	lhu	t1,0(t1)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     7e0:	4592                	lw	a1,4(sp)
     7e2:	4622                	lw	a2,8(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     7e4:	00679023          	sh	t1,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     7e8:	00755313          	srli	t1,a0,0x7
     7ec:	01e37313          	andi	t1,t1,30
     7f0:	933a                	add	t1,t1,a4
     7f2:	00035303          	lhu	t1,0(t1)
		ptr += 6;
     7f6:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     7f8:	fe679b23          	sh	t1,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
     7fc:	00355313          	srli	t1,a0,0x3
     800:	01e37313          	andi	t1,t1,30
     804:	933a                	add	t1,t1,a4
     806:	00035303          	lhu	t1,0(t1)
     80a:	fe679c23          	sh	t1,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
     80e:	00f57313          	andi	t1,a0,15
     812:	0306                	slli	t1,t1,0x1
     814:	933a                	add	t1,t1,a4
     816:	00035303          	lhu	t1,0(t1)
     81a:	fe679d23          	sh	t1,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     81e:	01355313          	srli	t1,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     822:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     824:	01e37313          	andi	t1,t1,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     828:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     82a:	933a                	add	t1,t1,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     82c:	953a                	add	a0,a0,a4
     82e:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     832:	00035303          	lhu	t1,0(t1)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     836:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     83a:	fe679e23          	sh	t1,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     83e:	872e                	mv	a4,a1
     840:	bf09                	j	752 <WS2812FillBuffSec.constprop.0+0x24>

00000842 <internal_handle_input.constprop.0>:
void handle_debug_input( int numbytes, uint8_t * data ) __attribute__((weak));
void handle_debug_input( int numbytes, uint8_t * data ) { (void)numbytes; (void)data; }

static void internal_handle_input( volatile uint32_t * dmdata0 )
{
	uint32_t dmd0 = *dmdata0;
     842:	e00007b7          	lui	a5,0xe0000
     846:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 && bytes < 16 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
     84a:	8082                	ret

0000084c <_write.constprop.0>:
//     status word = 0xcx = timed out.
// declare as weak to allow overriding.
WEAK int _write(int fd, const char *buf, int size)
{
	(void)fd;
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     84c:	e0000737          	lui	a4,0xe0000
     850:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     854:	1111                	addi	sp,sp,-28
     856:	cc06                	sw	ra,24(sp)
     858:	ca22                	sw	s0,20(sp)
     85a:	c826                	sw	s1,16(sp)
     85c:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     85e:	0c07f793          	andi	a5,a5,192
     862:	0c000693          	li	a3,192
     866:	0cd78863          	beq	a5,a3,936 <_write.constprop.0+0xea>

	char buffer[4] = { 0 };
     86a:	c602                	sw	zero,12(sp)
     86c:	842e                	mv	s0,a1
	int place = 0;
	uint32_t lastdmd;
	uint32_t timeout = FUNCONF_DEBUGPRINTF_TIMEOUT; // Give up after ~120ms

	if( size == 0 )
     86e:	e5f1                	bnez	a1,93a <_write.constprop.0+0xee>
	{
		lastdmd = (*DMDATA0);
     870:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     874:	c789                	beqz	a5,87e <_write.constprop.0+0x32>
     876:	0807f793          	andi	a5,a5,128
     87a:	e391                	bnez	a5,87e <_write.constprop.0+0x32>
     87c:	37d9                	jal	842 <internal_handle_input.constprop.0>

		//buf += tosend;
		place += tosend;
	}
	return size;
}
     87e:	40e2                	lw	ra,24(sp)
     880:	8522                	mv	a0,s0
     882:	4452                	lw	s0,20(sp)
     884:	44c2                	lw	s1,16(sp)
     886:	0171                	addi	sp,sp,28
     888:	8082                	ret
		int tosend = size - place;
     88a:	409405b3          	sub	a1,s0,s1
     88e:	469d                	li	a3,7
     890:	872e                	mv	a4,a1
     892:	00b6d363          	bge	a3,a1,898 <_write.constprop.0+0x4c>
     896:	471d                	li	a4,7
     898:	001006b7          	lui	a3,0x100
     89c:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     89e:	e0000537          	lui	a0,0xe0000
     8a2:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     8a6:	0f450313          	addi	t1,a0,244
     8aa:	08067293          	andi	t0,a2,128
     8ae:	06029c63          	bnez	t0,926 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     8b2:	c611                	beqz	a2,8be <_write.constprop.0+0x72>
     8b4:	c43a                	sw	a4,8(sp)
     8b6:	c22e                	sw	a1,4(sp)
     8b8:	3769                	jal	842 <internal_handle_input.constprop.0>
     8ba:	4722                	lw	a4,8(sp)
     8bc:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     8be:	4689                	li	a3,2
     8c0:	4601                	li	a2,0
     8c2:	00b6d463          	bge	a3,a1,8ca <_write.constprop.0+0x7e>
     8c6:	ffd70613          	addi	a2,a4,-3
     8ca:	4782                	lw	a5,0(sp)
     8cc:	00348593          	addi	a1,s1,3
     8d0:	0068                	addi	a0,sp,12
     8d2:	95be                	add	a1,a1,a5
     8d4:	c23a                	sw	a4,4(sp)
     8d6:	2105                	jal	cf6 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     8d8:	4632                	lw	a2,12(sp)
     8da:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     8dc:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     8de:	e00006b7          	lui	a3,0xe0000
     8e2:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     8e6:	458d                	li	a1,3
     8e8:	00978633          	add	a2,a5,s1
		t = 0;
     8ec:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     8ee:	00064303          	lbu	t1,0(a2)
     8f2:	0685                	addi	a3,a3,1
     8f4:	007c                	addi	a5,sp,12
     8f6:	00d78533          	add	a0,a5,a3
     8fa:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     8fe:	00d70563          	beq	a4,a3,908 <_write.constprop.0+0xbc>
     902:	0605                	addi	a2,a2,1
     904:	feb695e3          	bne	a3,a1,8ee <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     908:	00470693          	addi	a3,a4,4
     90c:	f806e693          	ori	a3,a3,-128
     910:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     914:	4632                	lw	a2,12(sp)
     916:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     91a:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     91c:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     920:	f684c5e3          	blt	s1,s0,88a <_write.constprop.0+0x3e>
     924:	bfa9                	j	87e <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     926:	16fd                	addi	a3,a3,-1
     928:	fead                	bnez	a3,8a2 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     92a:	00032783          	lw	a5,0(t1)
     92e:	0c07e793          	ori	a5,a5,192
     932:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     936:	4401                	li	s0,0
     938:	b799                	j	87e <_write.constprop.0+0x32>
	if( size == 0 )
     93a:	4481                	li	s1,0
     93c:	b7d5                	j	920 <_write.constprop.0+0xd4>

0000093e <__puts_uart>:
{
     93e:	1151                	addi	sp,sp,-12
     940:	c222                	sw	s0,4(sp)
     942:	c406                	sw	ra,8(sp)
     944:	842e                	mv	s0,a1
	_write( 0, s, len );
     946:	3719                	jal	84c <_write.constprop.0>
}
     948:	40a2                	lw	ra,8(sp)
     94a:	8522                	mv	a0,s0
     94c:	4412                	lw	s0,4(sp)
     94e:	0131                	addi	sp,sp,12
     950:	8082                	ret

00000952 <handle_reset>:
	asm volatile( "\n\
     952:	20000197          	auipc	gp,0x20000
     956:	aaa18193          	addi	gp,gp,-1366 # 200003fc <__global_pointer$>
     95a:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     95e:	6509                	lui	a0,0x2
     960:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x9f2>
     964:	30051073          	csrw	mstatus,a0
     968:	468d                	li	a3,3
     96a:	fffff517          	auipc	a0,0xfffff
     96e:	69650513          	addi	a0,a0,1686 # 0 <InterruptVector>
     972:	8d55                	or	a0,a0,a3
     974:	30551073          	csrw	mtvec,a0
asm volatile(
     978:	c6c18513          	addi	a0,gp,-916 # 20000068 <WS2812BLEDInUse>
     97c:	15818593          	addi	a1,gp,344 # 20000554 <_ebss>
     980:	4601                	li	a2,0
     982:	00b55663          	bge	a0,a1,98e <handle_reset+0x3c>
     986:	c110                	sw	a2,0(a0)
     988:	0511                	addi	a0,a0,4
     98a:	feb54ee3          	blt	a0,a1,986 <handle_reset+0x34>
     98e:	00001517          	auipc	a0,0x1
     992:	41a50513          	addi	a0,a0,1050 # 1da8 <_data_lma>
     996:	c0418593          	addi	a1,gp,-1020 # 20000000 <button1.1>
     99a:	c6c18613          	addi	a2,gp,-916 # 20000068 <WS2812BLEDInUse>
     99e:	00c58863          	beq	a1,a2,9ae <handle_reset+0x5c>
     9a2:	4114                	lw	a3,0(a0)
     9a4:	c194                	sw	a3,0(a1)
     9a6:	0511                	addi	a0,a0,4
     9a8:	0591                	addi	a1,a1,4
     9aa:	fec59ae3          	bne	a1,a2,99e <handle_reset+0x4c>
	SysTick->CTLR = 5;
     9ae:	e000f7b7          	lui	a5,0xe000f
     9b2:	4715                	li	a4,5
     9b4:	c398                	sw	a4,0(a5)
asm volatile(
     9b6:	6785                	lui	a5,0x1
     9b8:	e8e78793          	addi	a5,a5,-370 # e8e <main>
     9bc:	34179073          	csrw	mepc,a5
     9c0:	30200073          	mret

000009c4 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     9c4:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     9c8:	84dff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     9cc:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     9d0:	845ff0ef          	jal	ra,214 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     9d4:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     9d8:	83dff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     9dc:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     9e0:	835ff0ef          	jal	ra,214 <PrintHex>
	while( (*DMDATA0) & 0x80 );
     9e4:	e0000737          	lui	a4,0xe0000
     9e8:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     9ec:	0f470693          	addi	a3,a4,244
     9f0:	0807f793          	andi	a5,a5,128
     9f4:	fbf5                	bnez	a5,9e8 <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     9f6:	6785                	lui	a5,0x1
     9f8:	a8578793          	addi	a5,a5,-1403 # a85 <mini_vpprintf+0x49>
     9fc:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     9fe:	e0000737          	lui	a4,0xe0000
     a02:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     a06:	0f470693          	addi	a3,a4,244
     a0a:	0807f793          	andi	a5,a5,128
     a0e:	fbf5                	bnez	a5,a02 <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     a10:	aaaab7b7          	lui	a5,0xaaaab
     a14:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     a18:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     a1a:	a001                	j	a1a <ADC1_2_IRQHandler+0x56>

00000a1c <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     a1c:	40021737          	lui	a4,0x40021
     a20:	471c                	lw	a5,8(a4)
     a22:	008006b7          	lui	a3,0x800
     a26:	8fd5                	or	a5,a5,a3
     a28:	c71c                	sw	a5,8(a4)

00000a2a <strlen>:
{
     a2a:	87aa                	mv	a5,a0
	for (; *s; s++);
     a2c:	0007c703          	lbu	a4,0(a5)
     a30:	e701                	bnez	a4,a38 <strlen+0xe>
}
     a32:	40a78533          	sub	a0,a5,a0
     a36:	8082                	ret
	for (; *s; s++);
     a38:	0785                	addi	a5,a5,1
     a3a:	bfcd                	j	a2c <strlen+0x2>

00000a3c <mini_vpprintf>:
{
     a3c:	fa410113          	addi	sp,sp,-92
     a40:	c8a6                	sw	s1,80(sp)
     a42:	cc86                	sw	ra,88(sp)
     a44:	caa2                	sw	s0,84(sp)
     a46:	c02a                	sw	a0,0(sp)
     a48:	c22e                	sw	a1,4(sp)
     a4a:	84b2                	mv	s1,a2
     a4c:	87b6                	mv	a5,a3
	int n = 0;
     a4e:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     a50:	0004c703          	lbu	a4,0(s1)
     a54:	00148413          	addi	s0,s1,1
     a58:	00e10fa3          	sb	a4,31(sp)
     a5c:	eb01                	bnez	a4,a6c <mini_vpprintf+0x30>
}
     a5e:	40e6                	lw	ra,88(sp)
     a60:	4456                	lw	s0,84(sp)
     a62:	4542                	lw	a0,16(sp)
     a64:	44c6                	lw	s1,80(sp)
     a66:	05c10113          	addi	sp,sp,92
     a6a:	8082                	ret
		if (ch!='%') {
     a6c:	02500693          	li	a3,37
     a70:	00d70f63          	beq	a4,a3,a8e <mini_vpprintf+0x52>
     a74:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     a76:	4612                	lw	a2,4(sp)
     a78:	4782                	lw	a5,0(sp)
     a7a:	4585                	li	a1,1
     a7c:	01f10513          	addi	a0,sp,31
     a80:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     a82:	84a2                	mv	s1,s0
		n = n + len;
     a84:	47c2                	lw	a5,16(sp)
     a86:	97aa                	add	a5,a5,a0
     a88:	c83e                	sw	a5,16(sp)
     a8a:	47a2                	lw	a5,8(sp)
     a8c:	b7d1                	j	a50 <mini_vpprintf+0x14>
			ch=*(fmt++);
     a8e:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     a92:	03000613          	li	a2,48
			ch=*(fmt++);
     a96:	00248713          	addi	a4,s1,2
     a9a:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     a9e:	03000413          	li	s0,48
     aa2:	08c69063          	bne	a3,a2,b22 <mini_vpprintf+0xe6>
				ch=*(fmt++);
     aa6:	84ba                	mv	s1,a4
     aa8:	4601                	li	a2,0
     aaa:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     aac:	4525                	li	a0,9
     aae:	a811                	j	ac2 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     ab0:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     ab4:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     ab6:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     ab8:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     abc:	0706                	slli	a4,a4,0x1
     abe:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     ac0:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     ac2:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f8a84>
     ac6:	0ff5f313          	andi	t1,a1,255
     aca:	fe6573e3          	bgeu	a0,t1,ab0 <mini_vpprintf+0x74>
     ace:	c219                	beqz	a2,ad4 <mini_vpprintf+0x98>
     ad0:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     ad4:	c63a                	sw	a4,12(sp)
     ad6:	4661                	li	a2,24
     ad8:	00e65363          	bge	a2,a4,ade <mini_vpprintf+0xa2>
     adc:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     ade:	06c00593          	li	a1,108
			char l = 0;
     ae2:	4601                	li	a2,0
			if (ch == 'l') {
     ae4:	00b69863          	bne	a3,a1,af4 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     ae8:	0004c683          	lbu	a3,0(s1)
				l = 1;
     aec:	4605                	li	a2,1
				ch=*(fmt++);
     aee:	0485                	addi	s1,s1,1
     af0:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     af4:	01f14683          	lbu	a3,31(sp)
     af8:	06400593          	li	a1,100
     afc:	06b68363          	beq	a3,a1,b62 <mini_vpprintf+0x126>
     b00:	02d5e463          	bltu	a1,a3,b28 <mini_vpprintf+0xec>
     b04:	05800713          	li	a4,88
     b08:	0ae68263          	beq	a3,a4,bac <mini_vpprintf+0x170>
     b0c:	06300713          	li	a4,99
     b10:	0ce68063          	beq	a3,a4,bd0 <mini_vpprintf+0x194>
     b14:	d6a9                	beqz	a3,a5e <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     b16:	4612                	lw	a2,4(sp)
     b18:	c43e                	sw	a5,8(sp)
     b1a:	4585                	li	a1,1
     b1c:	01f10513          	addi	a0,sp,31
     b20:	a88d                	j	b92 <mini_vpprintf+0x156>
			char pad_char = ' ';
     b22:	02000413          	li	s0,32
     b26:	b741                	j	aa6 <mini_vpprintf+0x6a>
			switch (ch) {
     b28:	07500593          	li	a1,117
     b2c:	02b68b63          	beq	a3,a1,b62 <mini_vpprintf+0x126>
     b30:	07800613          	li	a2,120
     b34:	06c68c63          	beq	a3,a2,bac <mini_vpprintf+0x170>
     b38:	07300613          	li	a2,115
     b3c:	fcc69de3          	bne	a3,a2,b16 <mini_vpprintf+0xda>
     b40:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     b42:	00478713          	addi	a4,a5,4
     b46:	439c                	lw	a5,0(a5)
     b48:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     b4a:	853e                	mv	a0,a5
     b4c:	ca3e                	sw	a5,20(sp)
     b4e:	3df1                	jal	a2a <strlen>
					if (pad_to > 0) {
     b50:	4762                	lw	a4,24(sp)
     b52:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     b54:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     b56:	cb51                	beqz	a4,bea <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     b58:	46b2                	lw	a3,12(sp)
     b5a:	1838                	addi	a4,sp,56
     b5c:	8622                	mv	a2,s0
     b5e:	853e                	mv	a0,a5
     b60:	a025                	j	b88 <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     b62:	00478713          	addi	a4,a5,4
     b66:	c43a                	sw	a4,8(sp)
					if(l) {
     b68:	ca05                	beqz	a2,b98 <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     b6a:	f8b68693          	addi	a3,a3,-117
     b6e:	1018                	addi	a4,sp,32
     b70:	0016b693          	seqz	a3,a3
     b74:	4388                	lw	a0,0(a5)
     b76:	4601                	li	a2,0
     b78:	45a9                	li	a1,10
     b7a:	ef2ff0ef          	jal	ra,26c <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     b7e:	46b2                	lw	a3,12(sp)
     b80:	1838                	addi	a4,sp,56
     b82:	8622                	mv	a2,s0
     b84:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     b86:	1008                	addi	a0,sp,32
     b88:	daeff0ef          	jal	ra,136 <mini_pad>
					len = puts(bf, len, buf);
     b8c:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     b8e:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     b90:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     b92:	4782                	lw	a5,0(sp)
     b94:	9782                	jalr	a5
					break;
     b96:	b5fd                	j	a84 <mini_vpprintf+0x48>
						if(ch == 'u') {
     b98:	07500713          	li	a4,117
     b9c:	00e69563          	bne	a3,a4,ba6 <mini_vpprintf+0x16a>
	if (radix > 16)
     ba0:	1018                	addi	a4,sp,32
     ba2:	4685                	li	a3,1
     ba4:	bfc1                	j	b74 <mini_vpprintf+0x138>
     ba6:	1018                	addi	a4,sp,32
     ba8:	4681                	li	a3,0
     baa:	b7e9                	j	b74 <mini_vpprintf+0x138>
					if(l) {
     bac:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     bae:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     bb2:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     bb6:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     bb8:	4685                	li	a3,1
     bba:	1018                	addi	a4,sp,32
     bbc:	00163613          	seqz	a2,a2
     bc0:	45c1                	li	a1,16
     bc2:	eaaff0ef          	jal	ra,26c <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     bc6:	46b2                	lw	a3,12(sp)
     bc8:	85aa                	mv	a1,a0
     bca:	1838                	addi	a4,sp,56
     bcc:	8622                	mv	a2,s0
     bce:	bf65                	j	b86 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     bd0:	00478713          	addi	a4,a5,4
     bd4:	439c                	lw	a5,0(a5)
     bd6:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     bd8:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     bda:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     bde:	1838                	addi	a4,sp,56
     be0:	8622                	mv	a2,s0
     be2:	4585                	li	a1,1
     be4:	01f10513          	addi	a0,sp,31
     be8:	b745                	j	b88 <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     bea:	4612                	lw	a2,4(sp)
     bec:	853e                	mv	a0,a5
     bee:	b755                	j	b92 <mini_vpprintf+0x156>

00000bf0 <printf>:
{
     bf0:	fdc10113          	addi	sp,sp,-36
     bf4:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     bf6:	862a                	mv	a2,a0
     bf8:	6505                	lui	a0,0x1
{
     bfa:	c82e                	sw	a1,16(sp)
     bfc:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     bfe:	4581                	li	a1,0
	va_start( args, format );
     c00:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     c02:	93e50513          	addi	a0,a0,-1730 # 93e <__puts_uart>
{
     c06:	c606                	sw	ra,12(sp)
     c08:	ce3a                	sw	a4,28(sp)
     c0a:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     c0c:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     c0e:	353d                	jal	a3c <mini_vpprintf>
}
     c10:	40b2                	lw	ra,12(sp)
     c12:	02410113          	addi	sp,sp,36
     c16:	8082                	ret

00000c18 <mini_vsnprintf>:
{
     c18:	1121                	addi	sp,sp,-24
     c1a:	ca06                	sw	ra,20(sp)
     c1c:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
     c1e:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
     c20:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
     c22:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
     c24:	c185                	beqz	a1,c44 <mini_vsnprintf+0x2c>
     c26:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
     c28:	858a                	mv	a1,sp
     c2a:	e111                	bnez	a0,c2e <mini_vsnprintf+0x16>
     c2c:	4581                	li	a1,0
     c2e:	1d200513          	li	a0,466
     c32:	3529                	jal	a3c <mini_vpprintf>
	if(buffer == (void*) 0) {
     c34:	c401                	beqz	s0,c3c <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
     c36:	4512                	lw	a0,4(sp)
     c38:	4782                	lw	a5,0(sp)
     c3a:	8d1d                	sub	a0,a0,a5
}
     c3c:	40d2                	lw	ra,20(sp)
     c3e:	4442                	lw	s0,16(sp)
     c40:	0161                	addi	sp,sp,24
     c42:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
     c44:	4401                	li	s0,0
     c46:	b7dd                	j	c2c <mini_vsnprintf+0x14>

00000c48 <sprintf>:
{
     c48:	1101                	addi	sp,sp,-32
     c4a:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     c4c:	862e                	mv	a2,a1
     c4e:	800005b7          	lui	a1,0x80000
{
     c52:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     c54:	fff5c593          	not	a1,a1
	va_start( args, format );
     c58:	0814                	addi	a3,sp,16
{
     c5a:	c606                	sw	ra,12(sp)
     c5c:	cc3a                	sw	a4,24(sp)
     c5e:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
     c60:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     c62:	3f5d                	jal	c18 <mini_vsnprintf>
}
     c64:	40b2                	lw	ra,12(sp)
     c66:	6105                	addi	sp,sp,32
     c68:	8082                	ret

00000c6a <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     c6a:	962a                	add	a2,a2,a0
     c6c:	87aa                	mv	a5,a0
     c6e:	00c79363          	bne	a5,a2,c74 <memset+0xa>
     c72:	8082                	ret
     c74:	00b78023          	sb	a1,0(a5)
     c78:	0785                	addi	a5,a5,1
     c7a:	bfd5                	j	c6e <memset+0x4>

00000c7c <strcpy>:
{
     c7c:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
     c7e:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
     c82:	00e78023          	sb	a4,0(a5)
     c86:	e311                	bnez	a4,c8a <strcpy+0xe>
}
     c88:	8082                	ret
	for (; (*d=*s); s++, d++);
     c8a:	0585                	addi	a1,a1,1
     c8c:	0785                	addi	a5,a5,1
     c8e:	bfc5                	j	c7e <strcpy+0x2>

00000c90 <strncpy>:
{
     c90:	4781                	li	a5,0
	for (; n && (*d=*s); n--, s++, d++);
     c92:	00f60c63          	beq	a2,a5,caa <strncpy+0x1a>
     c96:	00f58733          	add	a4,a1,a5
     c9a:	00074703          	lbu	a4,0(a4) # 40021000 <_eusrstack+0x20020800>
     c9e:	00f506b3          	add	a3,a0,a5
     ca2:	0785                	addi	a5,a5,1
     ca4:	00e68023          	sb	a4,0(a3)
     ca8:	f76d                	bnez	a4,c92 <strncpy+0x2>
}
     caa:	8082                	ret

00000cac <mngI2c_load_printBuff.constprop.0>:
uint32_t lock_printTime = 0;
uint8_t printBuff_idx = 0;
PrintBuff_t printBuff[PRINT_BUFF_SIZE] = { 0 };
uint8_t flag_printBuff_data = 1;					// set to 1 to allow initial print

void mngI2c_load_printBuff(const char *str, uint8_t line_idx) {
     cac:	1151                	addi	sp,sp,-12
     cae:	c026                	sw	s1,0(sp)
	flag_printBuff_data = 1;
	PrintBuff_t *buff = &printBuff[printBuff_idx];
     cb0:	c8418493          	addi	s1,gp,-892 # 20000080 <printBuff_idx>
void mngI2c_load_printBuff(const char *str, uint8_t line_idx) {
     cb4:	c222                	sw	s0,4(sp)
	PrintBuff_t *buff = &printBuff[printBuff_idx];
     cb6:	0004c403          	lbu	s0,0(s1)
	flag_printBuff_data = 1;
     cba:	4705                	li	a4,1
     cbc:	c4e18e23          	sb	a4,-932(gp) # 20000058 <flag_printBuff_data>
	buff->line_num = line_idx + 1;
     cc0:	00141793          	slli	a5,s0,0x1
     cc4:	97a2                	add	a5,a5,s0
     cc6:	078a                	slli	a5,a5,0x2
     cc8:	97a2                	add	a5,a5,s0
     cca:	10818713          	addi	a4,gp,264 # 20000504 <printBuff>
     cce:	0786                	slli	a5,a5,0x1
void mngI2c_load_printBuff(const char *str, uint8_t line_idx) {
     cd0:	c406                	sw	ra,8(sp)
	buff->line_num = line_idx + 1;
     cd2:	97ba                	add	a5,a5,a4
     cd4:	0505                	addi	a0,a0,1
     cd6:	00a78ca3          	sb	a0,25(a5)
	strncpy(buff->str, str, SSD1306_STR_SIZE);
     cda:	4665                	li	a2,25
     cdc:	13c18593          	addi	a1,gp,316 # 20000538 <str_output>
     ce0:	853e                	mv	a0,a5
	// buff->str[24] = '\0';
	printBuff_idx = (printBuff_idx + 1) % PRINT_BUFF_SIZE;
     ce2:	0405                	addi	s0,s0,1
	strncpy(buff->str, str, SSD1306_STR_SIZE);
     ce4:	3775                	jal	c90 <strncpy>
	printBuff_idx = (printBuff_idx + 1) % PRINT_BUFF_SIZE;
     ce6:	8805                	andi	s0,s0,1
     ce8:	00848023          	sb	s0,0(s1)
}
     cec:	40a2                	lw	ra,8(sp)
     cee:	4412                	lw	s0,4(sp)
     cf0:	4482                	lw	s1,0(sp)
     cf2:	0131                	addi	sp,sp,12
     cf4:	8082                	ret

00000cf6 <memcpy>:
{
     cf6:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     cf8:	00f61363          	bne	a2,a5,cfe <memcpy+0x8>
}
     cfc:	8082                	ret
	for (; n; n--) *d++ = *s++;
     cfe:	00f58733          	add	a4,a1,a5
     d02:	00074683          	lbu	a3,0(a4)
     d06:	00f50733          	add	a4,a0,a5
     d0a:	0785                	addi	a5,a5,1
     d0c:	00d70023          	sb	a3,0(a4)
     d10:	b7e5                	j	cf8 <memcpy+0x2>

00000d12 <ssd1306_data.isra.0>:
uint8_t ssd1306_data(uint8_t *data, int sz) {
     d12:	7179                	addi	sp,sp,-48
     d14:	d422                	sw	s0,40(sp)
	pkt[0] = 0x40;
     d16:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
     d1a:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
     d1c:	862e                	mv	a2,a1
     d1e:	85aa                	mv	a1,a0
     d20:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
     d24:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
     d26:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
     d2a:	37f1                	jal	cf6 <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
     d2c:	00140593          	addi	a1,s0,1
     d30:	850a                	mv	a0,sp
     d32:	f8eff0ef          	jal	ra,4c0 <i2c_write_raw.constprop.0>
}
     d36:	50b2                	lw	ra,44(sp)
     d38:	5422                	lw	s0,40(sp)
     d3a:	6145                	addi	sp,sp,48
     d3c:	8082                	ret

00000d3e <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
     d3e:	1151                	addi	sp,sp,-12
     d40:	c222                	sw	s0,4(sp)
     d42:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
     d44:	02100513          	li	a0,33
void ssd1306_print_str_at(
     d48:	c406                	sw	ra,8(sp)
     d4a:	c026                	sw	s1,0(sp)
     d4c:	84ae                	mv	s1,a1
	ssd1306_cmd(SSD1306_COLUMNADDR);
     d4e:	8b7ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
     d52:	4501                	li	a0,0
     d54:	8b1ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
     d58:	07f00513          	li	a0,127
     d5c:	8a9ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
     d60:	02200513          	li	a0,34
     d64:	8a1ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
     d68:	8526                	mv	a0,s1
     d6a:	89bff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
     d6e:	8526                	mv	a0,s1
     d70:	895ff0ef          	jal	ra,604 <ssd1306_cmd>
     d74:	44e5                	li	s1,25
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i < SSD1306_STR_SIZE; i++) {
		if (*str) {
     d76:	00044783          	lbu	a5,0(s0)
     d7a:	c78d                	beqz	a5,da4 <ssd1306_print_str_at.constprop.0+0x66>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
     d7c:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
     d7e:	0ff7f793          	andi	a5,a5,255
     d82:	6709                	lui	a4,0x2
     d84:	00279693          	slli	a3,a5,0x2
     d88:	a9070513          	addi	a0,a4,-1392 # 1a90 <FONT_7x5>
     d8c:	97b6                	add	a5,a5,a3
     d8e:	4595                	li	a1,5
     d90:	953e                	add	a0,a0,a5
     d92:	3741                	jal	d12 <ssd1306_data.isra.0>
			str++;
     d94:	0405                	addi	s0,s0,1
	for (int i=0; i < SSD1306_STR_SIZE; i++) {
     d96:	14fd                	addi	s1,s1,-1
     d98:	fcf9                	bnez	s1,d76 <ssd1306_print_str_at.constprop.0+0x38>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
     d9a:	40a2                	lw	ra,8(sp)
     d9c:	4412                	lw	s0,4(sp)
     d9e:	4482                	lw	s1,0(sp)
     da0:	0131                	addi	sp,sp,12
     da2:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
     da4:	6789                	lui	a5,0x2
     da6:	4595                	li	a1,5
     da8:	a9078513          	addi	a0,a5,-1392 # 1a90 <FONT_7x5>
     dac:	379d                	jal	d12 <ssd1306_data.isra.0>
     dae:	b7e5                	j	d96 <ssd1306_print_str_at.constprop.0+0x58>

00000db0 <puts>:
{
     db0:	1151                	addi	sp,sp,-12
     db2:	c406                	sw	ra,8(sp)
     db4:	c222                	sw	s0,4(sp)
     db6:	c026                	sw	s1,0(sp)
     db8:	84aa                	mv	s1,a0
	int sl = strlen( s );
     dba:	3985                	jal	a2a <strlen>
     dbc:	842a                	mv	s0,a0
	_write(0, s, sl );
     dbe:	85aa                	mv	a1,a0
     dc0:	8526                	mv	a0,s1
     dc2:	3469                	jal	84c <_write.constprop.0>
	_write(0, "\n", 1 );
     dc4:	6509                	lui	a0,0x2
     dc6:	4585                	li	a1,1
     dc8:	98850513          	addi	a0,a0,-1656 # 1988 <DMA1_Channel3_IRQHandler+0x7e>
     dcc:	3441                	jal	84c <_write.constprop.0>
}
     dce:	40a2                	lw	ra,8(sp)
     dd0:	00140513          	addi	a0,s0,1
     dd4:	4412                	lw	s0,4(sp)
     dd6:	4482                	lw	s1,0(sp)
     dd8:	0131                	addi	sp,sp,12
     dda:	8082                	ret

00000ddc <i2c_scan_callback>:
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
     ddc:	cd21                	beqz	a0,e34 <i2c_scan_callback+0x58>
     dde:	07f00793          	li	a5,127
     de2:	862a                	mv	a2,a0
     de4:	04f50863          	beq	a0,a5,e34 <i2c_scan_callback+0x58>
void i2c_scan_callback(const uint8_t addr) {
     de8:	1151                	addi	sp,sp,-12
     dea:	c222                	sw	s0,4(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
     dec:	6589                	lui	a1,0x2
     dee:	98c58593          	addi	a1,a1,-1652 # 198c <DMA1_Channel3_IRQHandler+0x82>
     df2:	13c18513          	addi	a0,gp,316 # 20000538 <str_output>
void i2c_scan_callback(const uint8_t addr) {
     df6:	c406                	sw	ra,8(sp)
     df8:	c026                	sw	s1,0(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
     dfa:	35b9                	jal	c48 <sprintf>
	printf("%s\n", str_output);
     dfc:	13c18513          	addi	a0,gp,316 # 20000538 <str_output>
     e00:	3f45                	jal	db0 <puts>
	modI2C_display(str_output, line++);
     e02:	c6018793          	addi	a5,gp,-928 # 2000005c <line.2>
     e06:	4384                	lw	s1,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
     e08:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
     e0c:	00148713          	addi	a4,s1,1
     e10:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
     e12:	e16ff0ef          	jal	ra,428 <i2c_ping>
     e16:	e911                	bnez	a0,e2a <i2c_scan_callback+0x4e>
	ssd1306_print_str_at(str, line, 0);
     e18:	13c18513          	addi	a0,gp,316 # 20000538 <str_output>
}
     e1c:	4412                	lw	s0,4(sp)
     e1e:	40a2                	lw	ra,8(sp)
	ssd1306_print_str_at(str, line, 0);
     e20:	0ff4f593          	andi	a1,s1,255
}
     e24:	4482                	lw	s1,0(sp)
     e26:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
     e28:	bf19                	j	d3e <ssd1306_print_str_at.constprop.0>
}
     e2a:	40a2                	lw	ra,8(sp)
     e2c:	4412                	lw	s0,4(sp)
     e2e:	4482                	lw	s1,0(sp)
     e30:	0131                	addi	sp,sp,12
     e32:	8082                	ret
     e34:	8082                	ret

00000e36 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
     e36:	400227b7          	lui	a5,0x40022
     e3a:	4705                	li	a4,1
     e3c:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
     e3e:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     e42:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
     e46:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     e4a:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x1078b35>
     e4e:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
     e50:	009f0737          	lui	a4,0x9f0
     e54:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
     e56:	020006b7          	lui	a3,0x2000
     e5a:	40021737          	lui	a4,0x40021
     e5e:	431c                	lw	a5,0(a4)
     e60:	8ff5                	and	a5,a5,a3
     e62:	dff5                	beqz	a5,e5e <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     e64:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     e66:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     e6a:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
     e6c:	0027e793          	ori	a5,a5,2
     e70:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     e72:	4721                	li	a4,8
     e74:	42dc                	lw	a5,4(a3)
     e76:	8bb1                	andi	a5,a5,12
     e78:	fee79ee3          	bne	a5,a4,e74 <SystemInit+0x3e>
	*DMDATA1 = 0x00;
     e7c:	e00007b7          	lui	a5,0xe0000
     e80:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
     e84:	08000713          	li	a4,128
     e88:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     e8c:	8082                	ret

00000e8e <main>:
//# 	*BTN*		PC0 - [ 				] - PC1		*SDA*


volatile uint8_t i2c_registers[32] = {0xaa};

int main() {
     e8e:	fb810113          	addi	sp,sp,-72
     e92:	c286                	sw	ra,68(sp)
     e94:	c0a2                	sw	s0,64(sp)
     e96:	de26                	sw	s1,60(sp)
	SystemInit();
     e98:	3f79                	jal	e36 <SystemInit>
	return;
}


uint16_t fun_optionByte_getValue() {
    uint8_t data0 = OB->Data0;
     e9a:	200006b7          	lui	a3,0x20000
     e9e:	8046d583          	lhu	a1,-2044(a3) # 1ffff804 <lib_i2c.c.d894f163+0x1fff82b8>
    uint8_t data1 = OB->Data1;
     ea2:	8066d783          	lhu	a5,-2042(a3)
    uint8_t data0 = OB->Data0;
     ea6:	80068713          	addi	a4,a3,-2048
    return data0 + (data1 << 8);
     eaa:	0ff5f593          	andi	a1,a1,255
    uint8_t data1 = OB->Data1;
     eae:	07c2                	slli	a5,a5,0x10
     eb0:	83c1                	srli	a5,a5,0x10
    return data0 + (data1 << 8);
     eb2:	07a2                	slli	a5,a5,0x8
     eb4:	8ddd                	or	a1,a1,a5

	uint16_t bootCnt = fun_optionByte_getValue();
	bootCnt++;
     eb6:	0585                	addi	a1,a1,1
	hold32p[0]=ob32p[0]; 			// Copy RDPR and USER
     eb8:	8006a783          	lw	a5,-2048(a3)
     ebc:	05c2                	slli	a1,a1,0x10
     ebe:	81c1                	srli	a1,a1,0x10
     ec0:	d83e                	sw	a5,48(sp)
	hold32p[1]=(uint32_t)data;	    // Copy in the two Data values to be written
     ec2:	da2e                	sw	a1,52(sp)
	hold32p[2]=ob32p[2];			// Copy WRPR0 and WEPR1
     ec4:	471c                	lw	a5,8(a4)
	FLASH->KEYR = FLASH_KEY1;
     ec6:	456706b7          	lui	a3,0x45670
     eca:	12368693          	addi	a3,a3,291 # 45670123 <_eusrstack+0x2566f923>
	hold32p[2]=ob32p[2];			// Copy WRPR0 and WEPR1
     ece:	dc3e                	sw	a5,56(sp)
	FLASH->KEYR = FLASH_KEY2;
     ed0:	cdef9737          	lui	a4,0xcdef9
	FLASH->KEYR = FLASH_KEY1;
     ed4:	400227b7          	lui	a5,0x40022
     ed8:	c3d4                	sw	a3,4(a5)
	FLASH->KEYR = FLASH_KEY2;
     eda:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef81ab>
     ede:	c3d8                	sw	a4,4(a5)
	FLASH->OBKEYR = FLASH_KEY1;
     ee0:	c794                	sw	a3,8(a5)
	FLASH->OBKEYR = FLASH_KEY2;
     ee2:	c798                	sw	a4,8(a5)
	FLASH->CTLR |= CR_OPTER_Set;			// OBER RW Perform user-selected word erasure	
     ee4:	4b98                	lw	a4,16(a5)
     ee6:	02076713          	ori	a4,a4,32
     eea:	cb98                	sw	a4,16(a5)
	FLASH->CTLR |= CR_STRT_Set;    			// STRT RW1 Start. Set 1 to start an erase action,hw automatically clears to 0
     eec:	4b98                	lw	a4,16(a5)
     eee:	04076713          	ori	a4,a4,64
     ef2:	cb98                	sw	a4,16(a5)
	while (FLASH->STATR & FLASH_BUSY);		// Wait for flash operation to be done
     ef4:	47d8                	lw	a4,12(a5)
     ef6:	8b05                	andi	a4,a4,1
     ef8:	ff75                	bnez	a4,ef4 <main+0x66>
	FLASH->CTLR &= CR_OPTER_Reset; 			// Disable erasure mode	
     efa:	4b98                	lw	a4,16(a5)
		ob16p[i]=hold[i];
     efc:	20000537          	lui	a0,0x20000
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
     f00:	4619                	li	a2,6
	FLASH->CTLR &= CR_OPTER_Reset; 			// Disable erasure mode	
     f02:	fdf77713          	andi	a4,a4,-33
     f06:	cb98                	sw	a4,16(a5)
	FLASH->CTLR |= CR_OPTPG_Set;   			// OBG  RW Perform user-selected word programming
     f08:	4b98                	lw	a4,16(a5)
     f0a:	01076713          	ori	a4,a4,16
     f0e:	cb98                	sw	a4,16(a5)
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
     f10:	4701                	li	a4,0
		while (FLASH->STATR & FLASH_BUSY);	// Wait for flash operation to be done
     f12:	400227b7          	lui	a5,0x40022
		ob16p[i]=hold[i];
     f16:	00171693          	slli	a3,a4,0x1
     f1a:	1860                	addi	s0,sp,60
     f1c:	00d40333          	add	t1,s0,a3
     f20:	ff435303          	lhu	t1,-12(t1)
     f24:	96aa                	add	a3,a3,a0
     f26:	80669023          	sh	t1,-2048(a3)
		while (FLASH->STATR & FLASH_BUSY);	// Wait for flash operation to be done
     f2a:	47d4                	lw	a3,12(a5)
     f2c:	8a85                	andi	a3,a3,1
     f2e:	fef5                	bnez	a3,f2a <main+0x9c>
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
     f30:	0705                	addi	a4,a4,1
     f32:	fec712e3          	bne	a4,a2,f16 <main+0x88>
	FLASH->CTLR &= CR_OPTPG_Reset;			// Disable programming mode
     f36:	4b98                	lw	a4,16(a5)
	fun_optionByte_store(bootCnt);
	printf("Boot Count: %d\n", bootCnt);
     f38:	6509                	lui	a0,0x2
     f3a:	9a050513          	addi	a0,a0,-1632 # 19a0 <DMA1_Channel3_IRQHandler+0x96>
     f3e:	9b3d                	andi	a4,a4,-17
     f40:	cb98                	sw	a4,16(a5)
	FLASH->CTLR|=CR_LOCK_Set;				// Lock flash memories again
     f42:	4b98                	lw	a4,16(a5)
     f44:	08076713          	ori	a4,a4,128
     f48:	cb98                	sw	a4,16(a5)
     f4a:	315d                	jal	bf0 <printf>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
     f4c:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     f50:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
     f52:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     f56:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x4633>
     f5a:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
     f5c:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
     f60:	c8c18713          	addi	a4,gp,-884 # 20000088 <systick_millis>
     f64:	00072023          	sw	zero,0(a4)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
     f68:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f6a:	6605                	lui	a2,0x1
     f6c:	00776713          	ori	a4,a4,7
     f70:	c398                	sw	a4,0(a5)
     f72:	e000e737          	lui	a4,0xe000e
     f76:	10c72023          	sw	a2,256(a4) # e000e100 <_eusrstack+0xc000d900>

	systick_init();			//! required for millis()
	funGpioInitAll();
     f7a:	40021637          	lui	a2,0x40021
     f7e:	4e18                	lw	a4,24(a2)
     f80:	03576713          	ori	a4,a4,53
     f84:	ce18                	sw	a4,24(a2)
	uint32_t targend = SysTick->CNT + n;
     f86:	4798                	lw	a4,8(a5)
     f88:	000757b7          	lui	a5,0x75
     f8c:	30078793          	addi	a5,a5,768 # 75300 <lib_i2c.c.d894f163+0x6ddb4>
     f90:	973e                	add	a4,a4,a5
     f92:	c8c18793          	addi	a5,gp,-884 # 20000088 <systick_millis>
     f96:	c23e                	sw	a5,4(sp)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     f98:	e000f6b7          	lui	a3,0xe000f
     f9c:	469c                	lw	a5,8(a3)
     f9e:	8f99                	sub	a5,a5,a4
     fa0:	fe07cee3          	bltz	a5,f9c <main+0x10e>
    model->debounce_time = millis();
    model->release_time = millis();
}

void fun_button_setup(Button_t *model) {
    if (model->pin == 0xFF) return; 
     fa4:	c041c683          	lbu	a3,-1020(gp) # 20000000 <button1.1>
     fa8:	c0418793          	addi	a5,gp,-1020 # 20000000 <button1.1>
     fac:	0ff00713          	li	a4,255
     fb0:	c03e                	sw	a5,0(sp)
     fb2:	04e68a63          	beq	a3,a4,1006 <main+0x178>

    model->btn_state = BUTTON_IDLE;
    model->debounce_time = 0;
    model->release_time = 0;
    model->press_time = 0;
     fb6:	0007a623          	sw	zero,12(a5)

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
     fba:	0046d713          	srli	a4,a3,0x4
     fbe:	400117b7          	lui	a5,0x40011
     fc2:	80078793          	addi	a5,a5,-2048 # 40010800 <_eusrstack+0x20010000>
     fc6:	072a                	slli	a4,a4,0xa
     fc8:	973e                	add	a4,a4,a5
     fca:	00f6f613          	andi	a2,a3,15
     fce:	4308                	lw	a0,0(a4)
     fd0:	00261593          	slli	a1,a2,0x2
     fd4:	47bd                	li	a5,15
     fd6:	00b797b3          	sll	a5,a5,a1
     fda:	fff7c793          	not	a5,a5
     fde:	46a1                	li	a3,8
     fe0:	8fe9                	and	a5,a5,a0
     fe2:	00b696b3          	sll	a3,a3,a1
     fe6:	8fd5                	or	a5,a5,a3
     fe8:	c31c                	sw	a5,0(a4)
    funDigitalWrite(model->pin, 1);
     fea:	4785                	li	a5,1
     fec:	00c797b3          	sll	a5,a5,a2
     ff0:	cb1c                	sw	a5,16(a4)
    model->btn_state = newState;
     ff2:	4702                	lw	a4,0(sp)
     ff4:	478d                	li	a5,3
     ff6:	00f700a3          	sb	a5,1(a4)
    model->debounce_time = millis();
     ffa:	4792                	lw	a5,4(sp)
     ffc:	439c                	lw	a5,0(a5)
     ffe:	c35c                	sw	a5,4(a4)
    model->release_time = millis();
    1000:	4792                	lw	a5,4(sp)
    1002:	439c                	lw	a5,0(a5)
    1004:	c71c                	sw	a5,8(a4)
	//# Button: uses PC0
	static Button_t button1 = { .pin = BUTTON_PIN };
	fun_button_setup(&button1);

	//# Hold BUTTON_PIN low to enter slave mode
	uint8_t i2cMaster_mode = funDigitalRead(BUTTON_PIN);
    1006:	400117b7          	lui	a5,0x40011
    100a:	4798                	lw	a4,8(a5)
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    100c:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1010:	ffe005b7          	lui	a1,0xffe00
    1014:	8b05                	andi	a4,a4,1
    1016:	d23a                	sw	a4,36(sp)
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1018:	40021737          	lui	a4,0x40021
    101c:	4b10                	lw	a2,16(a4)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    101e:	15fd                	addi	a1,a1,-1
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1020:	8e49                	or	a2,a2,a0
    1022:	cb10                	sw	a2,16(a4)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1024:	4b10                	lw	a2,16(a4)
    1026:	8e6d                	and	a2,a2,a1
    1028:	cb10                	sw	a2,16(a4)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    102a:	4f54                	lw	a3,28(a4)
	AFIO->PCFR1 &= ~(0x04400002);
    102c:	fbc00637          	lui	a2,0xfbc00
    1030:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1032:	8ec9                	or	a3,a3,a0
    1034:	cf54                	sw	a3,28(a4)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    1036:	4f14                	lw	a3,24(a4)
    1038:	0116e693          	ori	a3,a3,17
    103c:	cf14                	sw	a3,24(a4)
	AFIO->PCFR1 &= ~(0x04400002);
    103e:	40010737          	lui	a4,0x40010
    1042:	4354                	lw	a3,4(a4)
    1044:	8ef1                	and	a3,a3,a2
    1046:	c354                	sw	a3,4(a4)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1048:	4354                	lw	a3,4(a4)
    104a:	c354                	sw	a3,4(a4)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    104c:	4398                	lw	a4,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    104e:	76fd                	lui	a3,0xfffff
    1050:	0ff68693          	addi	a3,a3,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    1054:	f0f77713          	andi	a4,a4,-241
    1058:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    105a:	4398                	lw	a4,0(a5)
    105c:	0d076713          	ori	a4,a4,208
    1060:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1062:	4398                	lw	a4,0(a5)
    1064:	8f75                	and	a4,a4,a3
    1066:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1068:	4398                	lw	a4,0(a5)
    106a:	6685                	lui	a3,0x1
    106c:	d0068693          	addi	a3,a3,-768 # d00 <memcpy+0xa>
    1070:	8f55                	or	a4,a4,a3
    1072:	c398                	sw	a4,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    1074:	40005737          	lui	a4,0x40005
    1078:	40475783          	lhu	a5,1028(a4) # 40005404 <_eusrstack+0x20004c04>
    107c:	07c2                	slli	a5,a5,0x10
    107e:	83c1                	srli	a5,a5,0x10
    1080:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    1084:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    1088:	40f71223          	sh	a5,1028(a4)
	I2C1->CKCFGR = i2c_conf;
    108c:	77e1                	lui	a5,0xffff8
    108e:	02878793          	addi	a5,a5,40 # ffff8028 <_eusrstack+0xdfff7828>
    1092:	40f71e23          	sh	a5,1052(a4)
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    1096:	40075783          	lhu	a5,1024(a4)
    109a:	07c2                	slli	a5,a5,0x10
    109c:	83c1                	srli	a5,a5,0x10
    109e:	0017e793          	ori	a5,a5,1
    10a2:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    10a6:	a84ff0ef          	jal	ra,32a <i2c_error>
	if(i2c_init(&dev_aht21) != I2C_OK) {
    10aa:	2e050263          	beqz	a0,138e <main+0x500>
		printf("Failed to init I2C\n");
    10ae:	6509                	lui	a0,0x2
    10b0:	9b050513          	addi	a0,a0,-1616 # 19b0 <DMA1_Channel3_IRQHandler+0xa6>
		printf("----Done Scanning----\n\n");
    10b4:	39f5                	jal	db0 <puts>
} TIM_PWM_t;

//! Expected funGpioInitAll() before init
void fun_timPWM_init(TIM_PWM_t* model) {	
	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM1_REMAP_NOREMAP;
    10b6:	400107b7          	lui	a5,0x40010
    10ba:	43d8                	lw	a4,4(a5)
    10bc:	c3d8                	sw	a4,4(a5)
	
	TIM_TypeDef* timer = model->TIM;
    10be:	c4018793          	addi	a5,gp,-960 # 2000003c <pwm_CH1c.0>
    10c2:	43dc                	lw	a5,4(a5)
	
	if (timer == TIM1) {
    10c4:	40013737          	lui	a4,0x40013
    10c8:	c4018693          	addi	a3,gp,-960 # 2000003c <pwm_CH1c.0>
    10cc:	c0070713          	addi	a4,a4,-1024 # 40012c00 <_eusrstack+0x20012400>
    10d0:	c436                	sw	a3,8(sp)
    10d2:	3ce79b63          	bne	a5,a4,14a8 <main+0x61a>
		RCC->APB2PCENR |= RCC_APB2Periph_TIM1;
    10d6:	40021737          	lui	a4,0x40021
    10da:	4f10                	lw	a2,24(a4)
    10dc:	6685                	lui	a3,0x1
    10de:	80068693          	addi	a3,a3,-2048 # 800 <WS2812FillBuffSec.constprop.0+0xd2>
    10e2:	8e55                	or	a2,a2,a3
    10e4:	cf10                	sw	a2,24(a4)

		// Reset TIM1 to init all regs
		RCC->APB2PRSTR |= RCC_APB2Periph_TIM1;
    10e6:	4750                	lw	a2,12(a4)
    10e8:	8ed1                	or	a3,a3,a2
    10ea:	c754                	sw	a3,12(a4)
		RCC->APB2PRSTR &= ~RCC_APB2Periph_TIM1;
    10ec:	4754                	lw	a3,12(a4)
    10ee:	767d                	lui	a2,0xfffff
    10f0:	7ff60613          	addi	a2,a2,2047 # fffff7ff <_eusrstack+0xdfffefff>
    10f4:	8ef1                	and	a3,a3,a2
    10f6:	c754                	sw	a3,12(a4)
		
		timer->BDTR |= TIM_MOE;			// Enable TIM1 outputs
    10f8:	0447d703          	lhu	a4,68(a5) # 40010044 <_eusrstack+0x2000f844>
    10fc:	66a1                	lui	a3,0x8
    10fe:	0742                	slli	a4,a4,0x10
    1100:	8341                	srli	a4,a4,0x10
    1102:	8f55                	or	a4,a4,a3
    1104:	04e79223          	sh	a4,68(a5)
		RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
	}

	// CTLR1: default is up, events generated, edge align
	// SMCFGR: default clk input is CK_INT
	timer->PSC = 0x0000;			// Prescaler 
    1108:	02079423          	sh	zero,40(a5)
	timer->ATRLR = 255;				// Auto Reload - sets period
    110c:	0ff00593          	li	a1,255
    1110:	02b79623          	sh	a1,44(a5)

	timer->SWEVGR |= TIM_UG;		// Reload immediately
    1114:	0147d703          	lhu	a4,20(a5)
    1118:	0742                	slli	a4,a4,0x10
    111a:	8341                	srli	a4,a4,0x10
    111c:	00176713          	ori	a4,a4,1
    1120:	00e79a23          	sh	a4,20(a5)
	timer->CTLR1 |= TIM_CEN;		// Enable timer
    1124:	0007d703          	lhu	a4,0(a5)
    1128:	0742                	slli	a4,a4,0x10
    112a:	8341                	srli	a4,a4,0x10
    112c:	00176713          	ori	a4,a4,1
    1130:	00e79023          	sh	a4,0(a5)
}

void fun_timPWM_reload(TIM_PWM_t* model) {
	model->counter = 0;
    1134:	4722                	lw	a4,8(sp)
	model->timeRef = 0;
	funPinMode(model->pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF);
    1136:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
	model->counter = 0;
    113a:	00072423          	sw	zero,8(a4)
	model->timeRef = 0;
    113e:	00072623          	sw	zero,12(a4)
	funPinMode(model->pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF);
    1142:	0046d613          	srli	a2,a3,0x4
    1146:	40011737          	lui	a4,0x40011
    114a:	80070713          	addi	a4,a4,-2048 # 40010800 <_eusrstack+0x20010000>
    114e:	062a                	slli	a2,a2,0xa
    1150:	963a                	add	a2,a2,a4
    1152:	8abd                	andi	a3,a3,15
    1154:	4208                	lw	a0,0(a2)
    1156:	068a                	slli	a3,a3,0x2
    1158:	473d                	li	a4,15
    115a:	00d71733          	sll	a4,a4,a3
    115e:	fff74713          	not	a4,a4
    1162:	8f69                	and	a4,a4,a0
    1164:	4525                	li	a0,9
    1166:	00d516b3          	sll	a3,a0,a3
    116a:	8f55                	or	a4,a4,a3
    116c:	c218                	sw	a4,0(a2)
	timer->CH1CVR = 255;
	timer->CH2CVR = 255;
	timer->CH3CVR = 255;
	timer->CH4CVR = 255;

	switch (model->CCER) {
    116e:	4722                	lw	a4,8(sp)
	timer->CH1CVR = 255;
    1170:	dbcc                	sw	a1,52(a5)
	timer->CH2CVR = 255;
    1172:	df8c                	sw	a1,56(a5)
	switch (model->CCER) {
    1174:	00275703          	lhu	a4,2(a4)
	timer->CH3CVR = 255;
    1178:	dfcc                	sw	a1,60(a5)
	timer->CH4CVR = 255;
    117a:	c3ac                	sw	a1,64(a5)
	switch (model->CCER) {
    117c:	04000693          	li	a3,64
    1180:	40d70263          	beq	a4,a3,1584 <main+0x6f6>
    1184:	34e6e463          	bltu	a3,a4,14cc <main+0x63e>
    1188:	4691                	li	a3,4
    118a:	3ad70263          	beq	a4,a3,152e <main+0x6a0>
    118e:	46c1                	li	a3,16
    1190:	3cd70463          	beq	a4,a3,1558 <main+0x6ca>
    1194:	4685                	li	a3,1
    1196:	36d70863          	beq	a4,a3,1506 <main+0x678>
		D5		T2CH4_		//! UART_RX
*/

//! Expected funGpioInitAll() before init
void fun_encoder_setup(Encoder_t *model) {
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    119a:	400217b7          	lui	a5,0x40021
    119e:	4fd8                	lw	a4,28(a5)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	funPinMode(PD3, GPIO_CFGLR_IN_PUPD);
    11a0:	75c5                	lui	a1,0xffff1
    11a2:	15fd                	addi	a1,a1,-1
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    11a4:	00176713          	ori	a4,a4,1
    11a8:	cfd8                	sw	a4,28(a5)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
    11aa:	40010737          	lui	a4,0x40010
    11ae:	4354                	lw	a3,4(a4)
    11b0:	c354                	sw	a3,4(a4)
	funPinMode(PD3, GPIO_CFGLR_IN_PUPD);
    11b2:	40011737          	lui	a4,0x40011
    11b6:	40070693          	addi	a3,a4,1024 # 40011400 <_eusrstack+0x20010c00>
    11ba:	4290                	lw	a2,0(a3)
	// GPIOA->CFGLR &= ~(0xf<<(4*0));	// PA1 Analog input Chan1
	// GPIOA->CFGLR &= ~(0xf<<(4*1));	// PA2 Analog input Chan0

    int chanA = 0;
    int chanB = 1;
    GPIOA->CFGLR &= ~(0xf<<(4*0));
    11bc:	80070713          	addi	a4,a4,-2048
    11c0:	8e6d                	and	a2,a2,a1
    11c2:	65a1                	lui	a1,0x8
    11c4:	8e4d                	or	a2,a2,a1
    11c6:	c290                	sw	a2,0(a3)
	funPinMode(PD4, GPIO_CFGLR_IN_PUPD);
    11c8:	4290                	lw	a2,0(a3)
    11ca:	fff105b7          	lui	a1,0xfff10
    11ce:	15fd                	addi	a1,a1,-1
    11d0:	8e6d                	and	a2,a2,a1
    11d2:	000805b7          	lui	a1,0x80
    11d6:	8e4d                	or	a2,a2,a1
    11d8:	c290                	sw	a2,0(a3)
	funDigitalWrite(PD3, 1);
    11da:	4621                	li	a2,8
    11dc:	ca90                	sw	a2,16(a3)
	funDigitalWrite(PD4, 1);
    11de:	4641                	li	a2,16
    11e0:	ca90                	sw	a2,16(a3)

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    11e2:	4b94                	lw	a3,16(a5)
    11e4:	0016e693          	ori	a3,a3,1
    11e8:	cb94                	sw	a3,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    11ea:	4b94                	lw	a3,16(a5)
    11ec:	9af9                	andi	a3,a3,-2
    11ee:	cb94                	sw	a3,16(a5)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
    11f0:	400006b7          	lui	a3,0x40000
    11f4:	0086d603          	lhu	a2,8(a3) # 40000008 <_eusrstack+0x1ffff808>
    11f8:	0642                	slli	a2,a2,0x10
    11fa:	8241                	srli	a2,a2,0x10
    11fc:	00366613          	ori	a2,a2,3
    1200:	00c69423          	sh	a2,8(a3)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
    1204:	7665                	lui	a2,0xffff9
    1206:	167d                	addi	a2,a2,-1
    1208:	02c69223          	sh	a2,36(a3)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
    120c:	0146d603          	lhu	a2,20(a3)
    1210:	0642                	slli	a2,a2,0x10
    1212:	8241                	srli	a2,a2,0x10
    1214:	00166613          	ori	a2,a2,1
    1218:	00c69a23          	sh	a2,20(a3)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
    121c:	0006d603          	lhu	a2,0(a3)
    1220:	0642                	slli	a2,a2,0x10
    1222:	8241                	srli	a2,a2,0x10
    1224:	00166613          	ori	a2,a2,1
    1228:	00c69023          	sh	a2,0(a3)

	model->initial_count = TIM2->CNT;
    122c:	0246d603          	lhu	a2,36(a3)
	model->last_count = TIM2->CNT;
    1230:	0246d683          	lhu	a3,36(a3)
	model->initial_count = TIM2->CNT;
    1234:	0642                	slli	a2,a2,0x10
	model->last_count = TIM2->CNT;
    1236:	06c2                	slli	a3,a3,0x10
    1238:	82c1                	srli	a3,a3,0x10
    123a:	ca36                	sw	a3,20(sp)
	model->initial_count = TIM2->CNT;
    123c:	8241                	srli	a2,a2,0x10
	RCC->CFGR0 &= ~(0x1F<<11);
    123e:	43d4                	lw	a3,4(a5)
    1240:	d432                	sw	a2,40(sp)
    1242:	7641                	lui	a2,0xffff0
    1244:	7ff60613          	addi	a2,a2,2047 # ffff07ff <_eusrstack+0xdffeffff>
    1248:	8ef1                	and	a3,a3,a2
    124a:	c3d4                	sw	a3,4(a5)
	RCC->APB2PCENR |= RCC_APB2Periph_ADC1;
    124c:	4f94                	lw	a3,24(a5)
    124e:	2006e693          	ori	a3,a3,512
    1252:	cf94                	sw	a3,24(a5)
    GPIOA->CFGLR &= ~(0xf<<(4*0));
    1254:	4314                	lw	a3,0(a4)
    1256:	9ac1                	andi	a3,a3,-16
    1258:	c314                	sw	a3,0(a4)
    GPIOA->CFGLR &= ~(0xf<<(4*1));
    125a:	4314                	lw	a3,0(a4)
    125c:	f0f6f693          	andi	a3,a3,-241
    1260:	c314                	sw	a3,0(a4)
	
	// Reset the ADC to init all regs
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    1262:	47d8                	lw	a4,12(a5)
    // turn on ADC
	ADC1->CTLR2 |= ADC_ADON;
	
	// Reset and calibrate
	ADC1->CTLR2 |= ADC_RSTCAL;
	while(ADC1->CTLR2 & ADC_RSTCAL);
    1264:	400126b7          	lui	a3,0x40012
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    1268:	20076713          	ori	a4,a4,512
    126c:	c7d8                	sw	a4,12(a5)
	RCC->APB2PRSTR &= ~RCC_APB2Periph_ADC1;
    126e:	47d8                	lw	a4,12(a5)
    1270:	dff77713          	andi	a4,a4,-513
    1274:	c7d8                	sw	a4,12(a5)
	ADC1->RSQR1 = (ADC_NUMCHLS-1) << 20;	// four chls in the sequence
    1276:	400127b7          	lui	a5,0x40012
    127a:	40078793          	addi	a5,a5,1024 # 40012400 <_eusrstack+0x20011c00>
    127e:	00100737          	lui	a4,0x100
    1282:	d7d8                	sw	a4,44(a5)
	ADC1->RSQR2 = 0;
    1284:	0207a823          	sw	zero,48(a5)
    ADC1->RSQR3 = (chanA<<(5*0)) | (chanB<<(5*1));
    1288:	02000713          	li	a4,32
    128c:	dbd8                	sw	a4,52(a5)
    ADC1->SAMPTR2 = (7<<(3*chanA)) | (7<<(3*chanB));
    128e:	03f00713          	li	a4,63
    1292:	cb98                	sw	a4,16(a5)
	ADC1->CTLR2 |= ADC_ADON;
    1294:	4798                	lw	a4,8(a5)
    1296:	00176713          	ori	a4,a4,1
    129a:	c798                	sw	a4,8(a5)
	ADC1->CTLR2 |= ADC_RSTCAL;
    129c:	4798                	lw	a4,8(a5)
    129e:	00876713          	ori	a4,a4,8
    12a2:	c798                	sw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_RSTCAL);
    12a4:	40068793          	addi	a5,a3,1024 # 40012400 <_eusrstack+0x20011c00>
    12a8:	4798                	lw	a4,8(a5)
    12aa:	8b21                	andi	a4,a4,8
    12ac:	ff65                	bnez	a4,12a4 <main+0x416>
	ADC1->CTLR2 |= ADC_CAL;
    12ae:	4798                	lw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    12b0:	400126b7          	lui	a3,0x40012
	ADC1->CTLR2 |= ADC_CAL;
    12b4:	00476713          	ori	a4,a4,4
    12b8:	c798                	sw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    12ba:	40068793          	addi	a5,a3,1024 # 40012400 <_eusrstack+0x20011c00>
    12be:	4798                	lw	a4,8(a5)
    12c0:	8b11                	andi	a4,a4,4
    12c2:	ff65                	bnez	a4,12ba <main+0x42c>
	
	// Turn on DMA
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    12c4:	40021637          	lui	a2,0x40021
    12c8:	4a58                	lw	a4,20(a2)
	
	//DMA1_Channel1 is for ADC
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    12ca:	44c68693          	addi	a3,a3,1100
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    12ce:	00176713          	ori	a4,a4,1
    12d2:	ca58                	sw	a4,20(a2)
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    12d4:	40020737          	lui	a4,0x40020
    12d8:	cb14                	sw	a3,16(a4)
	DMA1_Channel1->MADDR = (uint32_t)adc_buffer;
    12da:	c7c18693          	addi	a3,gp,-900 # 20000078 <adc_buffer>
    12de:	cb54                	sw	a3,20(a4)
	DMA1_Channel1->CNTR  = ADC_NUMCHLS;
    12e0:	4689                	li	a3,2
    12e2:	c754                	sw	a3,12(a4)
	DMA1_Channel1->CFGR  =
    12e4:	6685                	lui	a3,0x1
    12e6:	5a068693          	addi	a3,a3,1440 # 15a0 <main+0x712>
    12ea:	c714                	sw	a3,8(a4)
		DMA_PeripheralDataSize_HalfWord |
		DMA_MemoryInc_Enable |
		DMA_Mode_Circular |
		DMA_DIR_PeripheralSRC;
	
	DMA1_Channel1->CFGR |= DMA_CFGR1_EN;    // Turn on DMA channel 1
    12ec:	4714                	lw	a3,8(a4)
    12ee:	0016e693          	ori	a3,a3,1
    12f2:	c714                	sw	a3,8(a4)
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
    12f4:	43d8                	lw	a4,4(a5)
	
	// Enable continuous conversion and DMA
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    12f6:	000e06b7          	lui	a3,0xe0
    12fa:	10268693          	addi	a3,a3,258 # e0102 <lib_i2c.c.d894f163+0xd8bb6>
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
    12fe:	10076713          	ori	a4,a4,256
    1302:	c3d8                	sw	a4,4(a5)
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    1304:	4798                	lw	a4,8(a5)
    1306:	8f55                	or	a4,a4,a3
    1308:	c798                	sw	a4,8(a5)
	ADC1->CTLR2 |= ADC_SWSTART;             // start conversion
    130a:	4798                	lw	a4,8(a5)
    130c:	004006b7          	lui	a3,0x400
    1310:	8f55                	or	a4,a4,a3
    1312:	c798                	sw	a4,8(a5)
	#endif

	// WS2812BDMAInit();
	// Neo_loadCommand(NEO_COLOR_CHASE);

	uint32_t now = millis();
    1314:	4792                	lw	a5,4(sp)
	Session_t session = { 0, 0, now };
    1316:	ce02                	sw	zero,28(sp)
    1318:	cc02                	sw	zero,24(sp)
	uint32_t now = millis();
    131a:	4380                	lw	s0,0(a5)
	Session_t session = { 0, 0, now };
    131c:	c7c18793          	addi	a5,gp,-900 # 20000078 <adc_buffer>
    1320:	c802                	sw	zero,16(sp)
    1322:	c602                	sw	zero,12(sp)
    1324:	d03e                	sw	a5,32(sp)

	while(1) {
		now = millis();
    1326:	4792                	lw	a5,4(sp)
    1328:	4384                	lw	s1,0(a5)
		session.cycle_count++;
    132a:	47b2                	lw	a5,12(sp)
    132c:	0785                	addi	a5,a5,1
    132e:	c63e                	sw	a5,12(sp)
    _reset_timers(BUTTON_IDLE, model);
}

void fun_button_task(uint32_t time, Button_t *model, void (*handler)(int, uint32_t)) {
    if (model->pin == 0xFF) return;
    1330:	4782                	lw	a5,0(sp)
    1332:	0007c703          	lbu	a4,0(a5)
    1336:	0ff00793          	li	a5,255
    133a:	2ef70363          	beq	a4,a5,1620 <main+0x792>
    uint8_t read = funDigitalRead(model->pin);
    133e:	00475793          	srli	a5,a4,0x4
    1342:	400116b7          	lui	a3,0x40011
    1346:	80068693          	addi	a3,a3,-2048 # 40010800 <_eusrstack+0x20010000>
    134a:	07aa                	slli	a5,a5,0xa
    134c:	97b6                	add	a5,a5,a3

    // Debounce check
    if (time - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    134e:	4682                	lw	a3,0(sp)
    uint8_t read = funDigitalRead(model->pin);
    1350:	479c                	lw	a5,8(a5)
    if (time - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1352:	464d                	li	a2,19
    1354:	42d4                	lw	a3,4(a3)
    1356:	40d486b3          	sub	a3,s1,a3
    135a:	2cd67363          	bgeu	a2,a3,1620 <main+0x792>
    uint8_t read = funDigitalRead(model->pin);
    135e:	8b3d                	andi	a4,a4,15
    1360:	00e7d7b3          	srl	a5,a5,a4
    model->debounce_time = time;
    1364:	4702                	lw	a4,0(sp)

    switch (model->btn_state) {
    1366:	4689                	li	a3,2
    uint8_t read = funDigitalRead(model->pin);
    1368:	8b85                	andi	a5,a5,1
    model->debounce_time = time;
    136a:	c344                	sw	s1,4(a4)
    switch (model->btn_state) {
    136c:	00174703          	lbu	a4,1(a4) # 40020001 <_eusrstack+0x2001f801>
    1370:	38d70c63          	beq	a4,a3,1708 <main+0x87a>
    1374:	24e6e963          	bltu	a3,a4,15c6 <main+0x738>
    1378:	34071163          	bnez	a4,16ba <main+0x82c>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
    137c:	26078563          	beqz	a5,15e6 <main+0x758>
    model->btn_state = newState;
    1380:	4785                	li	a5,1
    1382:	4702                	lw	a4,0(sp)
    1384:	00f700a3          	sb	a5,1(a4)
    model->debounce_time = millis();
    1388:	4792                	lw	a5,4(sp)
    138a:	439c                	lw	a5,0(a5)
    138c:	ac81                	j	15dc <main+0x74e>
		if (i2c_ping(0x3C) == I2C_OK) {
    138e:	03c00513          	li	a0,60
    1392:	896ff0ef          	jal	ra,428 <i2c_ping>
    1396:	0e051163          	bnez	a0,1478 <main+0x5ea>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    139a:	6489                	lui	s1,0x2
    139c:	c8018423          	sb	zero,-888(gp) # 20000084 <ssd1306_buffer>
    13a0:	d8c48493          	addi	s1,s1,-628 # 1d8c <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    13a4:	0004c503          	lbu	a0,0(s1)
    13a8:	0ff00793          	li	a5,255
    13ac:	02f51e63          	bne	a0,a5,13e8 <main+0x55a>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    13b0:	02100513          	li	a0,33
    13b4:	a50ff0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    13b8:	4501                	li	a0,0
    13ba:	a4aff0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    13be:	07f00513          	li	a0,127
    13c2:	a42ff0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    13c6:	02200513          	li	a0,34
    13ca:	a3aff0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    13ce:	4501                	li	a0,0
    13d0:	a34ff0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    13d4:	451d                	li	a0,7
    13d6:	a2eff0ef          	jal	ra,604 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    13da:	02000593          	li	a1,32
    13de:	c8818513          	addi	a0,gp,-888 # 20000084 <ssd1306_buffer>
    13e2:	931ff0ef          	jal	ra,d12 <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    13e6:	a029                	j	13f0 <main+0x562>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    13e8:	0485                	addi	s1,s1,1
    13ea:	a1aff0ef          	jal	ra,604 <ssd1306_cmd>
    13ee:	d95d                	beqz	a0,13a4 <main+0x516>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    13f0:	40000613          	li	a2,1024
    13f4:	4581                	li	a1,0
    13f6:	cf018513          	addi	a0,gp,-784 # 200000ec <frame_buffer>
    13fa:	871ff0ef          	jal	ra,c6a <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    13fe:	02100513          	li	a0,33
    1402:	a02ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1406:	4501                	li	a0,0
    1408:	9fcff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    140c:	07f00513          	li	a0,127
    1410:	9f4ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1414:	02200513          	li	a0,34
    1418:	9ecff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    141c:	4501                	li	a0,0
    141e:	9e6ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1422:	451d                	li	a0,7
    1424:	9e0ff0ef          	jal	ra,604 <ssd1306_cmd>
    1428:	4401                	li	s0,0
    142a:	8726                	mv	a4,s1
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    142c:	cf018493          	addi	s1,gp,-784 # 200000ec <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1430:	4501                	li	a0,0
    1432:	94a2                	add	s1,s1,s0
    1434:	02050793          	addi	a5,a0,32
    1438:	01079593          	slli	a1,a5,0x10
    143c:	81c1                	srli	a1,a1,0x10
    143e:	8d89                	sub	a1,a1,a0
    1440:	9526                	add	a0,a0,s1
    1442:	c43e                	sw	a5,8(sp)
    1444:	8cfff0ef          	jal	ra,d12 <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    1448:	47a2                	lw	a5,8(sp)
    144a:	853e                	mv	a0,a5
    144c:	08000793          	li	a5,128
    1450:	fef512e3          	bne	a0,a5,1434 <main+0x5a6>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    1454:	08040413          	addi	s0,s0,128
    1458:	40000793          	li	a5,1024
    145c:	fcf418e3          	bne	s0,a5,142c <main+0x59e>
			sprintf(str_output, "Hello Bee!");
    1460:	6589                	lui	a1,0x2
    1462:	9c458593          	addi	a1,a1,-1596 # 19c4 <DMA1_Channel3_IRQHandler+0xba>
    1466:	13c18513          	addi	a0,gp,316 # 20000538 <str_output>
    146a:	813ff0ef          	jal	ra,c7c <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    146e:	4581                	li	a1,0
    1470:	13c18513          	addi	a0,gp,316 # 20000538 <str_output>
    1474:	8cbff0ef          	jal	ra,d3e <ssd1306_print_str_at.constprop.0>
		printf("----Scanning I2C Bus for Devices---\n");
    1478:	6509                	lui	a0,0x2
    147a:	9d050513          	addi	a0,a0,-1584 # 19d0 <DMA1_Channel3_IRQHandler+0xc6>
    147e:	933ff0ef          	jal	ra,db0 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1482:	4401                	li	s0,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    1484:	8522                	mv	a0,s0
    1486:	fa3fe0ef          	jal	ra,428 <i2c_ping>
    148a:	e501                	bnez	a0,1492 <main+0x604>
    148c:	8522                	mv	a0,s0
    148e:	94fff0ef          	jal	ra,ddc <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1492:	0405                	addi	s0,s0,1
    1494:	0ff47413          	andi	s0,s0,255
    1498:	07f00793          	li	a5,127
    149c:	fef414e3          	bne	s0,a5,1484 <main+0x5f6>
		printf("----Done Scanning----\n\n");
    14a0:	6509                	lui	a0,0x2
    14a2:	9f450513          	addi	a0,a0,-1548 # 19f4 <DMA1_Channel3_IRQHandler+0xea>
    14a6:	b139                	j	10b4 <main+0x226>
	} else if (timer == TIM2) {
    14a8:	40000737          	lui	a4,0x40000
    14ac:	c4e79ee3          	bne	a5,a4,1108 <main+0x27a>
		RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    14b0:	40021737          	lui	a4,0x40021
    14b4:	4f54                	lw	a3,28(a4)
    14b6:	0016e693          	ori	a3,a3,1
    14ba:	cf54                	sw	a3,28(a4)
		RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    14bc:	4b14                	lw	a3,16(a4)
    14be:	0016e693          	ori	a3,a3,1
    14c2:	cb14                	sw	a3,16(a4)
		RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    14c4:	4b14                	lw	a3,16(a4)
    14c6:	9af9                	andi	a3,a3,-2
    14c8:	cb14                	sw	a3,16(a4)
    14ca:	b93d                	j	1108 <main+0x27a>
	switch (model->CCER) {
    14cc:	10000693          	li	a3,256
    14d0:	0cd70963          	beq	a4,a3,15a2 <main+0x714>
    14d4:	6685                	lui	a3,0x1
    14d6:	ccd712e3          	bne	a4,a3,119a <main+0x30c>
			timer->CCER |= TIM_CC3E | TIM_CC3P;
			model->channel = 3;
			break;
		// case TIM_CC3NE: TIM1->CCER |= TIM_CC3E | TIM_CC3NP; break;	//! Prevent overwrite SWDIO
		case TIM_CC4E:
			timer->CHCTLR2 |= TIM_OC4M_2 | TIM_OC4M_1 | TIM_OC4PE;		// TIM_OC4PE is used by TIM2 only
    14da:	01c7d703          	lhu	a4,28(a5)
    14de:	669d                	lui	a3,0x7
    14e0:	80068693          	addi	a3,a3,-2048 # 6800 <ch32_mess.c.4b3621fa+0x30e8>
    14e4:	0742                	slli	a4,a4,0x10
    14e6:	8341                	srli	a4,a4,0x10
    14e8:	8f55                	or	a4,a4,a3
    14ea:	0742                	slli	a4,a4,0x10
    14ec:	8341                	srli	a4,a4,0x10
    14ee:	00e79e23          	sh	a4,28(a5)
			timer->CCER |= TIM_CC4E | TIM_CC4P;
    14f2:	0207d703          	lhu	a4,32(a5)
    14f6:	668d                	lui	a3,0x3
    14f8:	0742                	slli	a4,a4,0x10
    14fa:	8341                	srli	a4,a4,0x10
    14fc:	8f55                	or	a4,a4,a3
    14fe:	02e79023          	sh	a4,32(a5)
			model->channel = 4;
    1502:	4791                	li	a5,4
    1504:	a0b1                	j	1550 <main+0x6c2>
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1 | TIM_OC1PE;		// TIM_OC1PE is used by TIM2 only
    1506:	0187d683          	lhu	a3,24(a5)
    150a:	06c2                	slli	a3,a3,0x10
    150c:	82c1                	srli	a3,a3,0x10
    150e:	0686e693          	ori	a3,a3,104
    1512:	00d79c23          	sh	a3,24(a5)
			timer->CCER |= TIM_CC1E | TIM_CC1P;
    1516:	0207d683          	lhu	a3,32(a5)
    151a:	06c2                	slli	a3,a3,0x10
    151c:	82c1                	srli	a3,a3,0x10
    151e:	0036e693          	ori	a3,a3,3
    1522:	02d79023          	sh	a3,32(a5)
			model->channel = 1;
    1526:	47a2                	lw	a5,8(sp)
    1528:	00e780a3          	sb	a4,1(a5)
    152c:	b1bd                	j	119a <main+0x30c>
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1;
    152e:	0187d703          	lhu	a4,24(a5)
    1532:	0742                	slli	a4,a4,0x10
    1534:	8341                	srli	a4,a4,0x10
    1536:	06076713          	ori	a4,a4,96
    153a:	00e79c23          	sh	a4,24(a5)
			timer->CCER |= TIM_CC1NE | TIM_CC1NP;
    153e:	0207d703          	lhu	a4,32(a5)
    1542:	0742                	slli	a4,a4,0x10
    1544:	8341                	srli	a4,a4,0x10
    1546:	00c76713          	ori	a4,a4,12
    154a:	02e79023          	sh	a4,32(a5)
			model->channel = 1;
    154e:	4785                	li	a5,1
			model->channel = 4;
    1550:	4722                	lw	a4,8(sp)
    1552:	00f700a3          	sb	a5,1(a4) # 40021001 <_eusrstack+0x20020801>
    1556:	b191                	j	119a <main+0x30c>
			timer->CHCTLR1 |= TIM_OC2M_2 | TIM_OC2M_1 | TIM_OC2PE;		// TIM_OC2PE is used by TIM2 only
    1558:	0187d703          	lhu	a4,24(a5)
    155c:	669d                	lui	a3,0x7
    155e:	80068693          	addi	a3,a3,-2048 # 6800 <ch32_mess.c.4b3621fa+0x30e8>
    1562:	0742                	slli	a4,a4,0x10
    1564:	8341                	srli	a4,a4,0x10
    1566:	8f55                	or	a4,a4,a3
    1568:	0742                	slli	a4,a4,0x10
    156a:	8341                	srli	a4,a4,0x10
    156c:	00e79c23          	sh	a4,24(a5)
			timer->CCER |= TIM_CC2E | TIM_CC2P;
    1570:	0207d703          	lhu	a4,32(a5)
    1574:	0742                	slli	a4,a4,0x10
    1576:	8341                	srli	a4,a4,0x10
    1578:	03076713          	ori	a4,a4,48
			timer->CCER |= TIM_CC2NE | TIM_CC2NP;
    157c:	02e79023          	sh	a4,32(a5)
			model->channel = 2;
    1580:	4789                	li	a5,2
    1582:	b7f9                	j	1550 <main+0x6c2>
			timer->CHCTLR1 |= TIM_OC2M_2 | TIM_OC2M_1;
    1584:	0187d703          	lhu	a4,24(a5)
    1588:	6699                	lui	a3,0x6
    158a:	0742                	slli	a4,a4,0x10
    158c:	8341                	srli	a4,a4,0x10
    158e:	8f55                	or	a4,a4,a3
    1590:	00e79c23          	sh	a4,24(a5)
			timer->CCER |= TIM_CC2NE | TIM_CC2NP;
    1594:	0207d703          	lhu	a4,32(a5)
    1598:	0742                	slli	a4,a4,0x10
    159a:	8341                	srli	a4,a4,0x10
    159c:	0c076713          	ori	a4,a4,192
    15a0:	bff1                	j	157c <main+0x6ee>
			timer->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;		// TIM_OC3PE is used by TIM2 only
    15a2:	01c7d703          	lhu	a4,28(a5)
    15a6:	0742                	slli	a4,a4,0x10
    15a8:	8341                	srli	a4,a4,0x10
    15aa:	06876713          	ori	a4,a4,104
    15ae:	00e79e23          	sh	a4,28(a5)
			timer->CCER |= TIM_CC3E | TIM_CC3P;
    15b2:	0207d703          	lhu	a4,32(a5)
    15b6:	0742                	slli	a4,a4,0x10
    15b8:	8341                	srli	a4,a4,0x10
    15ba:	30076713          	ori	a4,a4,768
    15be:	02e79023          	sh	a4,32(a5)
			model->channel = 3;
    15c2:	478d                	li	a5,3
    15c4:	b771                	j	1550 <main+0x6c2>
    switch (model->btn_state) {
    15c6:	468d                	li	a3,3
    15c8:	04d71c63          	bne	a4,a3,1620 <main+0x792>
        if (read == 0) {
    15cc:	ebb1                	bnez	a5,1620 <main+0x792>
            model->press_time = time;
    15ce:	4782                	lw	a5,0(sp)
    15d0:	c7c4                	sw	s1,12(a5)
    model->btn_state = newState;
    15d2:	000780a3          	sb	zero,1(a5)
    model->debounce_time = millis();
    15d6:	4792                	lw	a5,4(sp)
    15d8:	4702                	lw	a4,0(sp)
    15da:	439c                	lw	a5,0(a5)
    15dc:	c35c                	sw	a5,4(a4)
    model->release_time = millis();
    15de:	4792                	lw	a5,4(sp)
    15e0:	439c                	lw	a5,0(a5)
    15e2:	c71c                	sw	a5,8(a4)
    15e4:	a835                	j	1620 <main+0x792>
            _reset_timers(BTN_UP, model);        // First Release

        } else {
            // Long press detection
            uint32_t press_duration = time - model->press_time;
    15e6:	4782                	lw	a5,0(sp)
    15e8:	47d8                	lw	a4,12(a5)
            if (press_duration > TICK_LONG_PRESS_DUR) {
    15ea:	6785                	lui	a5,0x1
    15ec:	fa078793          	addi	a5,a5,-96 # fa0 <main+0x112>
            uint32_t press_duration = time - model->press_time;
    15f0:	40e48733          	sub	a4,s1,a4
            if (press_duration > TICK_LONG_PRESS_DUR) {
    15f4:	02e7f663          	bgeu	a5,a4,1620 <main+0x792>
			printf("Long Press\n"); break;
    15f8:	6509                	lui	a0,0x2
    15fa:	a0c50513          	addi	a0,a0,-1524 # 1a0c <DMA1_Channel3_IRQHandler+0x102>
    15fe:	fb2ff0ef          	jal	ra,db0 <puts>
	mngI2c_load_buttonState(millis(), event);
    1602:	4792                	lw	a5,4(sp)
}

void mngI2c_load_buttonState(uint32_t time, uint8_t state) {
	line6_preserve_time = time;

	sprintf(str_output, "button: %d", state);
    1604:	6589                	lui	a1,0x2
    1606:	4398                	lw	a4,0(a5)
    1608:	460d                	li	a2,3
    160a:	a1858593          	addi	a1,a1,-1512 # 1a18 <DMA1_Channel3_IRQHandler+0x10e>
    160e:	13c18513          	addi	a0,gp,316 # 20000538 <str_output>
	line6_preserve_time = time;
    1612:	c8e1a023          	sw	a4,-896(gp) # 2000007c <line6_preserve_time>
	sprintf(str_output, "button: %d", state);
    1616:	e32ff0ef          	jal	ra,c48 <sprintf>
	mngI2c_load_printBuff(str_output, 6);
    161a:	4519                	li	a0,6
    161c:	e90ff0ef          	jal	ra,cac <mngI2c_load_printBuff.constprop.0>
	}
}


void fun_timPWM_task(uint32_t time, TIM_PWM_t* model) {
	if (time - model->timeRef < 5) { return; }
    1620:	47a2                	lw	a5,8(sp)
    1622:	4611                	li	a2,4
    1624:	47dc                	lw	a5,12(a5)
    1626:	40f487b3          	sub	a5,s1,a5
    162a:	02f67963          	bgeu	a2,a5,165c <main+0x7ce>
	TIM_TypeDef* timer = model->TIM;
    162e:	4722                	lw	a4,8(sp)
	model->timeRef = time;
    1630:	47a2                	lw	a5,8(sp)
	switch(model->channel) {
    1632:	458d                	li	a1,3
	TIM_TypeDef* timer = model->TIM;
    1634:	4354                	lw	a3,4(a4)
	switch(model->channel) {
    1636:	00174703          	lbu	a4,1(a4)
	model->timeRef = time;
    163a:	c7c4                	sw	s1,12(a5)

	fun_timPWM_setpw(model, model->counter);
    163c:	479c                	lw	a5,8(a5)
	switch(model->channel) {
    163e:	10b70363          	beq	a4,a1,1744 <main+0x8b6>
    1642:	0ee5e063          	bltu	a1,a4,1722 <main+0x894>
    1646:	4605                	li	a2,1
    1648:	0ec70463          	beq	a4,a2,1730 <main+0x8a2>
    164c:	4609                	li	a2,2
    164e:	0ec70663          	beq	a4,a2,173a <main+0x8ac>
	model->counter++;
	model->counter &= 255;
    1652:	4722                	lw	a4,8(sp)
	model->counter++;
    1654:	0785                	addi	a5,a5,1
	model->counter &= 255;
    1656:	0ff7f793          	andi	a5,a5,255
    165a:	c71c                	sw	a5,8(a4)
		//# prioritize tasks
		fun_button_task(now, &button1, button_onChanged);
		fun_timPWM_task(now, &pwm_CH1c);
		// Neo_task(now);

		if (now - session.timeRef_1sec > 1000) {
    165c:	47c2                	lw	a5,16(sp)
    165e:	3e800713          	li	a4,1000
    1662:	40f487b3          	sub	a5,s1,a5
    1666:	10f77c63          	bgeu	a4,a5,177e <main+0x8f0>
			session.timeRef_1sec = now;

			if (i2cMaster_mode) {
    166a:	5792                	lw	a5,36(sp)
    166c:	c3a9                	beqz	a5,16ae <main+0x820>
        case '-':	strcpy(loading_char, "\\"); break;
    }
}

void mngI2c_loadCounter(uint32_t counter, uint32_t runTime) {
	sprintf(str_output, "%s cyc/s %lu ~ %lums", loading_char, counter, runTime);
    166e:	46b2                	lw	a3,12(sp)
    1670:	6589                	lui	a1,0x2
    1672:	8722                	mv	a4,s0
    1674:	c6418613          	addi	a2,gp,-924 # 20000060 <loading_char>
    1678:	a4458593          	addi	a1,a1,-1468 # 1a44 <DMA1_Channel3_IRQHandler+0x13a>
    167c:	13c18513          	addi	a0,gp,316 # 20000538 <str_output>
    1680:	dc8ff0ef          	jal	ra,c48 <sprintf>
	mngI2c_load_printBuff(str_output, 7);
    1684:	451d                	li	a0,7
    1686:	e26ff0ef          	jal	ra,cac <mngI2c_load_printBuff.constprop.0>
    switch(loading_char[0]) {
    168a:	c6418313          	addi	t1,gp,-924 # 20000060 <loading_char>
    168e:	00034703          	lbu	a4,0(t1)
    1692:	05c00693          	li	a3,92
    1696:	0cd70463          	beq	a4,a3,175e <main+0x8d0>
    169a:	0ae6ea63          	bltu	a3,a4,174e <main+0x8c0>
    169e:	02d00693          	li	a3,45
    16a2:	0cd70a63          	beq	a4,a3,1776 <main+0x8e8>
    16a6:	02f00693          	li	a3,47
    16aa:	0cd70263          	beq	a4,a3,176e <main+0x8e0>
			session.timeRef_1sec = now;
    16ae:	c826                	sw	s1,16(sp)
				mngI2c_loadCounter(session.cycle_count, session.fullCycle_time);
			}
			session.cycle_count = 0;
    16b0:	c602                	sw	zero,12(sp)

			fun_encoder_task(&encoder_a, encoder_onChanged);
			fun_joystick_task(joystick_onChanged);
		}

		session.fullCycle_time = millis() - now;
    16b2:	4792                	lw	a5,4(sp)
    16b4:	4380                	lw	s0,0(a5)
    16b6:	8c05                	sub	s0,s0,s1
	while(1) {
    16b8:	b1bd                	j	1326 <main+0x498>
            }
        }
        break;

    case BTN_UP: {
        uint32_t release_duration = time - model->release_time;
    16ba:	4702                	lw	a4,0(sp)
    16bc:	4718                	lw	a4,8(a4)
    16be:	40e48733          	sub	a4,s1,a4

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    16c2:	eb89                	bnez	a5,16d4 <main+0x846>
    16c4:	09f00793          	li	a5,159
    16c8:	00e7e663          	bltu	a5,a4,16d4 <main+0x846>
    model->btn_state = newState;
    16cc:	4782                	lw	a5,0(sp)
    16ce:	00d780a3          	sb	a3,1(a5)
    16d2:	b711                	j	15d6 <main+0x748>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    16d4:	0a000793          	li	a5,160
    16d8:	f4e7f4e3          	bgeu	a5,a4,1620 <main+0x792>
			printf("Single Click\n");
    16dc:	6509                	lui	a0,0x2
    16de:	a2450513          	addi	a0,a0,-1500 # 1a24 <DMA1_Channel3_IRQHandler+0x11a>
    16e2:	eceff0ef          	jal	ra,db0 <puts>
	mngI2c_load_buttonState(millis(), event);
    16e6:	4792                	lw	a5,4(sp)
	sprintf(str_output, "button: %d", state);
    16e8:	4605                	li	a2,1
    16ea:	4398                	lw	a4,0(a5)
	line6_preserve_time = time;
    16ec:	c8e1a023          	sw	a4,-896(gp) # 2000007c <line6_preserve_time>
	sprintf(str_output, "button: %d", state);
    16f0:	6589                	lui	a1,0x2
    16f2:	a1858593          	addi	a1,a1,-1512 # 1a18 <DMA1_Channel3_IRQHandler+0x10e>
    16f6:	13c18513          	addi	a0,gp,316 # 20000538 <str_output>
    16fa:	d4eff0ef          	jal	ra,c48 <sprintf>
	mngI2c_load_printBuff(str_output, 6);
    16fe:	4519                	li	a0,6
    1700:	dacff0ef          	jal	ra,cac <mngI2c_load_printBuff.constprop.0>
    model->btn_state = newState;
    1704:	478d                	li	a5,3
    1706:	b9b5                	j	1382 <main+0x4f4>
        break;
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
    1708:	f0078ce3          	beqz	a5,1620 <main+0x792>
			printf("Double Click\n");
    170c:	6789                	lui	a5,0x2
    170e:	a3478513          	addi	a0,a5,-1484 # 1a34 <DMA1_Channel3_IRQHandler+0x12a>
    1712:	e9eff0ef          	jal	ra,db0 <puts>
	mngI2c_load_buttonState(millis(), event);
    1716:	4792                	lw	a5,4(sp)
	sprintf(str_output, "button: %d", state);
    1718:	4609                	li	a2,2
    171a:	4398                	lw	a4,0(a5)
	line6_preserve_time = time;
    171c:	c8e1a023          	sw	a4,-896(gp) # 2000007c <line6_preserve_time>
	sprintf(str_output, "button: %d", state);
    1720:	bfc1                	j	16f0 <main+0x862>
	switch(model->channel) {
    1722:	f2c718e3          	bne	a4,a2,1652 <main+0x7c4>
    1726:	01079713          	slli	a4,a5,0x10
    172a:	8341                	srli	a4,a4,0x10
		case 4: timer->CH4CVR = width; break;
    172c:	c2b8                	sw	a4,64(a3)
    172e:	b715                	j	1652 <main+0x7c4>
    1730:	01079713          	slli	a4,a5,0x10
    1734:	8341                	srli	a4,a4,0x10
		case 1: timer->CH1CVR = width; break;
    1736:	dad8                	sw	a4,52(a3)
    1738:	bf29                	j	1652 <main+0x7c4>
    173a:	01079713          	slli	a4,a5,0x10
    173e:	8341                	srli	a4,a4,0x10
		case 2: timer->CH2CVR = width; break;
    1740:	de98                	sw	a4,56(a3)
    1742:	bf01                	j	1652 <main+0x7c4>
    1744:	01079713          	slli	a4,a5,0x10
    1748:	8341                	srli	a4,a4,0x10
		case 3: timer->CH3CVR = width; break;
    174a:	ded8                	sw	a4,60(a3)
    174c:	b719                	j	1652 <main+0x7c4>
    switch(loading_char[0]) {
    174e:	07c00693          	li	a3,124
    1752:	f4d71ee3          	bne	a4,a3,16ae <main+0x820>
        case '|':	strcpy(loading_char, "/"); break;
    1756:	6589                	lui	a1,0x2
    1758:	a6058593          	addi	a1,a1,-1440 # 1a60 <DMA1_Channel3_IRQHandler+0x156>
    175c:	a021                	j	1764 <main+0x8d6>
        case '\\':	strcpy(loading_char, "|"); break;
    175e:	6589                	lui	a1,0x2
    1760:	a5c58593          	addi	a1,a1,-1444 # 1a5c <DMA1_Channel3_IRQHandler+0x152>
        case '-':	strcpy(loading_char, "\\"); break;
    1764:	c6418513          	addi	a0,gp,-924 # 20000060 <loading_char>
    1768:	d14ff0ef          	jal	ra,c7c <strcpy>
    176c:	b789                	j	16ae <main+0x820>
        case '/':	strcpy(loading_char, "-"); break;
    176e:	6589                	lui	a1,0x2
    1770:	a6458593          	addi	a1,a1,-1436 # 1a64 <DMA1_Channel3_IRQHandler+0x15a>
    1774:	bfc5                	j	1764 <main+0x8d6>
        case '-':	strcpy(loading_char, "\\"); break;
    1776:	6589                	lui	a1,0x2
    1778:	a6858593          	addi	a1,a1,-1432 # 1a68 <DMA1_Channel3_IRQHandler+0x15e>
    177c:	b7e5                	j	1764 <main+0x8d6>
		else if (now - session.timeRef_100ms > 100) {
    177e:	47f2                	lw	a5,28(sp)
    1780:	06400713          	li	a4,100
    1784:	40f487b3          	sub	a5,s1,a5
    1788:	06f77e63          	bgeu	a4,a5,1804 <main+0x976>
	cycle_loading_char();
}

void mngI2c_printBuff_task() {
	if (!flag_printBuff_data) return;
    178c:	c5c1c703          	lbu	a4,-932(gp) # 20000058 <flag_printBuff_data>
    1790:	c5c18793          	addi	a5,gp,-932 # 20000058 <flag_printBuff_data>
    1794:	d63e                	sw	a5,44(sp)
			session.timeRef_100ms = now;
    1796:	ce26                	sw	s1,28(sp)
    1798:	f0070de3          	beqz	a4,16b2 <main+0x824>

	for (int i = 0; i < PRINT_BUFF_SIZE; i++) {
		if (printBuff[i].line_num == 0) continue;
    179c:	10818793          	addi	a5,gp,264 # 20000504 <printBuff>
    17a0:	0197c583          	lbu	a1,25(a5)
    17a4:	ce2e                	sw	a1,28(sp)
    17a6:	cd91                	beqz	a1,17c2 <main+0x934>
	if (i2c_ping(0x3C) != I2C_OK) return;
    17a8:	03c00513          	li	a0,60
    17ac:	c7dfe0ef          	jal	ra,428 <i2c_ping>
    17b0:	e909                	bnez	a0,17c2 <main+0x934>
		modI2C_display(printBuff[i].str, printBuff[i].line_num-1);
    17b2:	45f2                	lw	a1,28(sp)
	ssd1306_print_str_at(str, line, 0);
    17b4:	10818513          	addi	a0,gp,264 # 20000504 <printBuff>
		modI2C_display(printBuff[i].str, printBuff[i].line_num-1);
    17b8:	15fd                	addi	a1,a1,-1
	ssd1306_print_str_at(str, line, 0);
    17ba:	0ff5f593          	andi	a1,a1,255
    17be:	d80ff0ef          	jal	ra,d3e <ssd1306_print_str_at.constprop.0>
		if (printBuff[i].line_num == 0) continue;
    17c2:	10818713          	addi	a4,gp,264 # 20000504 <printBuff>
    17c6:	03374583          	lbu	a1,51(a4)
    17ca:	ce2e                	sw	a1,28(sp)
    17cc:	c185                	beqz	a1,17ec <main+0x95e>
	if (i2c_ping(0x3C) != I2C_OK) return;
    17ce:	03c00513          	li	a0,60
    17d2:	c57fe0ef          	jal	ra,428 <i2c_ping>
    17d6:	e919                	bnez	a0,17ec <main+0x95e>
		modI2C_display(printBuff[i].str, printBuff[i].line_num-1);
    17d8:	45f2                	lw	a1,28(sp)
	ssd1306_print_str_at(str, line, 0);
    17da:	10818793          	addi	a5,gp,264 # 20000504 <printBuff>
		modI2C_display(printBuff[i].str, printBuff[i].line_num-1);
    17de:	15fd                	addi	a1,a1,-1
	ssd1306_print_str_at(str, line, 0);
    17e0:	0ff5f593          	andi	a1,a1,255
    17e4:	01a78513          	addi	a0,a5,26
    17e8:	d56ff0ef          	jal	ra,d3e <ssd1306_print_str_at.constprop.0>
	}

	//! Clear printBuff
	memset(printBuff, 0, sizeof(printBuff));
    17ec:	03400613          	li	a2,52
    17f0:	4581                	li	a1,0
    17f2:	10818513          	addi	a0,gp,264 # 20000504 <printBuff>
    17f6:	c74ff0ef          	jal	ra,c6a <memset>
	flag_printBuff_data = 0;
    17fa:	57b2                	lw	a5,44(sp)
    17fc:	ce26                	sw	s1,28(sp)
    17fe:	00078023          	sb	zero,0(a5)
    1802:	bd45                	j	16b2 <main+0x824>
		else if (now - session.timeRef_50ms > 50) {
    1804:	47e2                	lw	a5,24(sp)
    1806:	03200713          	li	a4,50
    180a:	40f487b3          	sub	a5,s1,a5
    180e:	eaf772e3          	bgeu	a4,a5,16b2 <main+0x824>
};

static uint32_t encoder_debounceTime = 0;

void fun_encoder_task(Encoder_t *model, void (*handler)(uint8_t, uint8_t)) {
	uint16_t count = TIM2->CNT;
    1812:	400007b7          	lui	a5,0x40000
    1816:	0247d403          	lhu	s0,36(a5) # 40000024 <_eusrstack+0x1ffff824>

	if (count != model->last_count) {
    181a:	4752                	lw	a4,20(sp)
	uint16_t count = TIM2->CNT;
    181c:	0442                	slli	s0,s0,0x10
    181e:	8041                	srli	s0,s0,0x10
    1820:	c8018793          	addi	a5,gp,-896 # 2000007c <line6_preserve_time>
	if (count != model->last_count) {
    1824:	02870d63          	beq	a4,s0,185e <main+0x9d0>
	mngI2c_load_encoder(millis(), position, direction);
    1828:	4712                	lw	a4,4(sp)
		model->relative_pos = 255 - count - model->initial_count;
    182a:	fff44613          	not	a2,s0
    182e:	4318                	lw	a4,0(a4)
	line6_preserve_time = time;
    1830:	c398                	sw	a4,0(a5)
    1832:	5722                	lw	a4,40(sp)
    1834:	8e19                	sub	a2,a2,a4
	sprintf(str_output, "pos: %d, dir: %s", pos, dir ? "CW" : "CCW");
    1836:	4752                	lw	a4,20(sp)
    1838:	0ff67613          	andi	a2,a2,255
    183c:	08e46a63          	bltu	s0,a4,18d0 <main+0xa42>
    1840:	6689                	lui	a3,0x2
    1842:	99c68693          	addi	a3,a3,-1636 # 199c <DMA1_Channel3_IRQHandler+0x92>
    1846:	6589                	lui	a1,0x2
    1848:	a6c58593          	addi	a1,a1,-1428 # 1a6c <DMA1_Channel3_IRQHandler+0x162>
    184c:	13c18513          	addi	a0,gp,316 # 20000538 <str_output>
    1850:	bf8ff0ef          	jal	ra,c48 <sprintf>
	mngI2c_load_printBuff(str_output, 6);
    1854:	4519                	li	a0,6
    1856:	c56ff0ef          	jal	ra,cac <mngI2c_load_printBuff.constprop.0>
    185a:	c8018793          	addi	a5,gp,-896 # 2000007c <line6_preserve_time>
}

uint32_t joystick_timeRef = 0;

void fun_joystick_task(void (*handler)(uint16_t, uint16_t)) {
	uint16_t x = 10 * ((adc_buffer[0] + 5) / 10);		// round to nearest 10
    185e:	5702                	lw	a4,32(sp)
	if (time - line6_preserve_time < 1000) return;
    1860:	439c                	lw	a5,0(a5)
    1862:	00075703          	lhu	a4,0(a4)
    1866:	0742                	slli	a4,a4,0x10
    1868:	8341                	srli	a4,a4,0x10
    186a:	cc3a                	sw	a4,24(sp)
	uint16_t y = 10 * ((adc_buffer[1] + 5) / 10);		// round to nearest 10
    186c:	5702                	lw	a4,32(sp)
    186e:	00275503          	lhu	a0,2(a4)
	mngI2c_load_joystick(millis(), x, y);
    1872:	4712                	lw	a4,4(sp)
    1874:	0542                	slli	a0,a0,0x10
    1876:	4314                	lw	a3,0(a4)
    1878:	8141                	srli	a0,a0,0x10
    187a:	40f687b3          	sub	a5,a3,a5
    187e:	3e700693          	li	a3,999
    1882:	04f6f463          	bgeu	a3,a5,18ca <main+0xa3c>
    1886:	45a9                	li	a1,10
    1888:	0515                	addi	a0,a0,5
    188a:	82ffe0ef          	jal	ra,b8 <__divsi3>
    188e:	00251693          	slli	a3,a0,0x2
	uint16_t x = 10 * ((adc_buffer[0] + 5) / 10);		// round to nearest 10
    1892:	4762                	lw	a4,24(sp)
	uint16_t y = 10 * ((adc_buffer[1] + 5) / 10);		// round to nearest 10
    1894:	96aa                	add	a3,a3,a0
    1896:	0686                	slli	a3,a3,0x1
	sprintf(str_output, "jx: %d, jy: %d", x, y);
    1898:	06c2                	slli	a3,a3,0x10
    189a:	82c1                	srli	a3,a3,0x10
	uint16_t x = 10 * ((adc_buffer[0] + 5) / 10);		// round to nearest 10
    189c:	45a9                	li	a1,10
    189e:	00570513          	addi	a0,a4,5
    18a2:	ca36                	sw	a3,20(sp)
    18a4:	815fe0ef          	jal	ra,b8 <__divsi3>
    18a8:	00251613          	slli	a2,a0,0x2
    18ac:	962a                	add	a2,a2,a0
    18ae:	46d2                	lw	a3,20(sp)
    18b0:	0606                	slli	a2,a2,0x1
    18b2:	0642                	slli	a2,a2,0x10
    18b4:	6589                	lui	a1,0x2
    18b6:	8241                	srli	a2,a2,0x10
    18b8:	a8058593          	addi	a1,a1,-1408 # 1a80 <DMA1_Channel3_IRQHandler+0x176>
    18bc:	13c18513          	addi	a0,gp,316 # 20000538 <str_output>
    18c0:	b88ff0ef          	jal	ra,c48 <sprintf>
	mngI2c_load_printBuff(str_output, 6);
    18c4:	4519                	li	a0,6
    18c6:	be6ff0ef          	jal	ra,cac <mngI2c_load_printBuff.constprop.0>
	uint16_t count = TIM2->CNT;
    18ca:	ca22                	sw	s0,20(sp)
			session.timeRef_50ms = now;
    18cc:	cc26                	sw	s1,24(sp)
    18ce:	b3d5                	j	16b2 <main+0x824>
	sprintf(str_output, "pos: %d, dir: %s", pos, dir ? "CW" : "CCW");
    18d0:	6689                	lui	a3,0x2
    18d2:	99868693          	addi	a3,a3,-1640 # 1998 <DMA1_Channel3_IRQHandler+0x8e>
    18d6:	bf85                	j	1846 <main+0x9b8>

000018d8 <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
    18d8:	1151                	addi	sp,sp,-12
    18da:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    18dc:	e000f7b7          	lui	a5,0xe000f
{
    18e0:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    18e2:	4b98                	lw	a4,16(a5)
{
    18e4:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    18e6:	66b1                	lui	a3,0xc
    18e8:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x4634>
    18ec:	9736                	add	a4,a4,a3
    18ee:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
    18f0:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
    18f4:	c8c18793          	addi	a5,gp,-884 # 20000088 <systick_millis>
    18f8:	4398                	lw	a4,0(a5)
}
    18fa:	46a2                	lw	a3,8(sp)
	systick_millis++;
    18fc:	0705                	addi	a4,a4,1
    18fe:	c398                	sw	a4,0(a5)
}
    1900:	4712                	lw	a4,4(sp)
    1902:	4782                	lw	a5,0(sp)
    1904:	0131                	addi	sp,sp,12
    1906:	30200073          	mret

0000190a <DMA1_Channel3_IRQHandler>:
	}
}
#else
void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    190a:	fcc10113          	addi	sp,sp,-52
    190e:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    1910:	400207b7          	lui	a5,0x40020
    1914:	439c                	lw	a5,0(a5)
{
    1916:	d022                	sw	s0,32(sp)
    1918:	ce26                	sw	s1,28(sp)
    191a:	d806                	sw	ra,48(sp)
    191c:	d616                	sw	t0,44(sp)
    191e:	d41a                	sw	t1,40(sp)
    1920:	d21e                	sw	t2,36(sp)
    1922:	cc2a                	sw	a0,24(sp)
    1924:	ca2e                	sw	a1,20(sp)
    1926:	c832                	sw	a2,16(sp)
    1928:	c636                	sw	a3,12(sp)
    192a:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    192c:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    192e:	40020437          	lui	s0,0x40020
    1932:	10000493          	li	s1,256
    1936:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    1938:	4782                	lw	a5,0(sp)
    193a:	4007f793          	andi	a5,a5,1024
    193e:	c791                	beqz	a5,194a <DMA1_Channel3_IRQHandler+0x40>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    1940:	4585                	li	a1,1
    1942:	c9018513          	addi	a0,gp,-880 # 2000008c <WS2812dmabuff>
    1946:	de9fe0ef          	jal	ra,72e <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    194a:	4782                	lw	a5,0(sp)
    194c:	2007f793          	andi	a5,a5,512
    1950:	c791                	beqz	a5,195c <DMA1_Channel3_IRQHandler+0x52>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    1952:	4581                	li	a1,0
    1954:	cc018513          	addi	a0,gp,-832 # 200000bc <WS2812dmabuff+0x30>
    1958:	dd7fe0ef          	jal	ra,72e <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    195c:	401c                	lw	a5,0(s0)
    195e:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    1960:	4782                	lw	a5,0(sp)
    1962:	1007f793          	andi	a5,a5,256
    1966:	fbe1                	bnez	a5,1936 <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    1968:	5402                	lw	s0,32(sp)
    196a:	50c2                	lw	ra,48(sp)
    196c:	52b2                	lw	t0,44(sp)
    196e:	5322                	lw	t1,40(sp)
    1970:	5392                	lw	t2,36(sp)
    1972:	44f2                	lw	s1,28(sp)
    1974:	4562                	lw	a0,24(sp)
    1976:	45d2                	lw	a1,20(sp)
    1978:	4642                	lw	a2,16(sp)
    197a:	46b2                	lw	a3,12(sp)
    197c:	4722                	lw	a4,8(sp)
    197e:	4792                	lw	a5,4(sp)
    1980:	03410113          	addi	sp,sp,52
    1984:	30200073          	mret
    1988:	000a                	c.slli	zero,0x2
    198a:	0000                	unimp
    198c:	3249                	jal	130e <main+0x480>
    198e:	30203a43          	fmadd.s	fs4,ft0,ft2,ft6,rup
    1992:	2578                	fld	fa4,200(a0)
    1994:	3230                	fld	fa2,96(a2)
    1996:	0058                	addi	a4,sp,4
    1998:	00005743          	fmadd.s	fa4,ft0,ft0,ft0,unknown
    199c:	00574343          	fmadd.s	ft6,fa4,ft5,ft0,rmm
    19a0:	6f42                	flw	ft10,16(sp)
    19a2:	4320746f          	jal	s0,8dd4 <lib_i2c.c.d894f163+0x1888>
    19a6:	746e756f          	jal	a0,e90ec <lib_i2c.c.d894f163+0xe1ba0>
    19aa:	203a                	fld	ft0,392(sp)
    19ac:	6425                	lui	s0,0x9
    19ae:	000a                	c.slli	zero,0x2
    19b0:	6146                	flw	ft2,80(sp)
    19b2:	6c69                	lui	s8,0x1a
    19b4:	6465                	lui	s0,0x19
    19b6:	7420                	flw	fs0,104(s0)
    19b8:	6e69206f          	j	9409e <lib_i2c.c.d894f163+0x8cb52>
    19bc:	7469                	lui	s0,0xffffa
    19be:	4920                	lw	s0,80(a0)
    19c0:	4332                	lw	t1,12(sp)
    19c2:	0000                	unimp
    19c4:	6548                	flw	fa0,12(a0)
    19c6:	6c6c                	flw	fa1,92(s0)
    19c8:	6542206f          	j	2401c <lib_i2c.c.d894f163+0x1cad0>
    19cc:	2165                	jal	1e74 <_data_lma+0xcc>
    19ce:	0000                	unimp
    19d0:	2d2d                	jal	200a <_data_lma+0x262>
    19d2:	2d2d                	jal	200c <_data_lma+0x264>
    19d4:	6e616353          	0x6e616353
    19d8:	696e                	flw	fs2,216(sp)
    19da:	676e                	flw	fa4,216(sp)
    19dc:	4920                	lw	s0,80(a0)
    19de:	4332                	lw	t1,12(sp)
    19e0:	4220                	lw	s0,64(a2)
    19e2:	7375                	lui	t1,0xffffd
    19e4:	6620                	flw	fs0,72(a2)
    19e6:	4420726f          	jal	tp,8e28 <lib_i2c.c.d894f163+0x18dc>
    19ea:	7665                	lui	a2,0xffff9
    19ec:	6369                	lui	t1,0x1a
    19ee:	7365                	lui	t1,0xffff9
    19f0:	2d2d                	jal	202a <_data_lma+0x282>
    19f2:	002d                	c.nop	11
    19f4:	2d2d                	jal	202e <_data_lma+0x286>
    19f6:	2d2d                	jal	2030 <_data_lma+0x288>
    19f8:	6f44                	flw	fs1,28(a4)
    19fa:	656e                	flw	fa0,216(sp)
    19fc:	5320                	lw	s0,96(a4)
    19fe:	6e6e6163          	bltu	t3,t1,20e0 <_data_lma+0x338>
    1a02:	6e69                	lui	t3,0x1a
    1a04:	2d2d2d67          	0x2d2d2d67
    1a08:	0a2d                	addi	s4,s4,11
    1a0a:	0000                	unimp
    1a0c:	6f4c                	flw	fa1,28(a4)
    1a0e:	676e                	flw	fa4,216(sp)
    1a10:	5020                	lw	s0,96(s0)
    1a12:	6572                	flw	fa0,28(sp)
    1a14:	00007373          	csrrci	t1,ustatus,0
    1a18:	7562                	flw	fa0,56(sp)
    1a1a:	7474                	flw	fa3,108(s0)
    1a1c:	203a6e6f          	jal	t3,a841e <lib_i2c.c.d894f163+0xa0ed2>
    1a20:	6425                	lui	s0,0x9
    1a22:	0000                	unimp
    1a24:	676e6953          	0x676e6953
    1a28:	656c                	flw	fa1,76(a0)
    1a2a:	4320                	lw	s0,64(a4)
    1a2c:	696c                	flw	fa1,84(a0)
    1a2e:	00006b63          	bltu	zero,zero,1a44 <DMA1_Channel3_IRQHandler+0x13a>
    1a32:	0000                	unimp
    1a34:	6f44                	flw	fs1,28(a4)
    1a36:	6275                	lui	tp,0x1d
    1a38:	656c                	flw	fa1,76(a0)
    1a3a:	4320                	lw	s0,64(a4)
    1a3c:	696c                	flw	fa1,84(a0)
    1a3e:	00006b63          	bltu	zero,zero,1a54 <DMA1_Channel3_IRQHandler+0x14a>
    1a42:	0000                	unimp
    1a44:	7325                	lui	t1,0xfffe9
    1a46:	6320                	flw	fs0,64(a4)
    1a48:	6379                	lui	t1,0x1e
    1a4a:	2520732f          	0x2520732f
    1a4e:	756c                	flw	fa1,108(a0)
    1a50:	7e20                	flw	fs0,120(a2)
    1a52:	2520                	fld	fs0,72(a0)
    1a54:	756c                	flw	fa1,108(a0)
    1a56:	736d                	lui	t1,0xffffb
    1a58:	0000                	unimp
    1a5a:	0000                	unimp
    1a5c:	007c                	addi	a5,sp,12
    1a5e:	0000                	unimp
    1a60:	0000002f          	0x2f
    1a64:	002d                	c.nop	11
    1a66:	0000                	unimp
    1a68:	005c                	addi	a5,sp,4
    1a6a:	0000                	unimp
    1a6c:	6f70                	flw	fa2,92(a4)
    1a6e:	25203a73          	csrrc	s4,0x252,zero
    1a72:	2c64                	fld	fs1,216(s0)
    1a74:	6420                	flw	fs0,72(s0)
    1a76:	7269                	lui	tp,0xffffa
    1a78:	203a                	fld	ft0,392(sp)
    1a7a:	7325                	lui	t1,0xfffe9
    1a7c:	0000                	unimp
    1a7e:	0000                	unimp
    1a80:	786a                	flw	fa6,184(sp)
    1a82:	203a                	fld	ft0,392(sp)
    1a84:	6425                	lui	s0,0x9
    1a86:	202c                	fld	fa1,64(s0)
    1a88:	796a                	flw	fs2,184(sp)
    1a8a:	203a                	fld	ft0,392(sp)
    1a8c:	6425                	lui	s0,0x9
	...

00001a90 <FONT_7x5>:
    1a90:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    1aa0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    1ab0:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    1ac0:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    1ad0:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    1ae0:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    1af0:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    1b00:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    1b10:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    1b20:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    1b30:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    1b40:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    1b50:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    1b60:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    1b70:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    1b80:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    1b90:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    1ba0:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    1bb0:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    1bc0:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    1bd0:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    1be0:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    1bf0:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    1c00:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    1c10:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    1c20:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    1c30:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    1c40:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    1c50:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    1c60:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

00001c6c <SIN_LUT2>:
    1c6c:	0100 0101 0101 0202 0403 0504 0706 0908     ................
    1c7c:	0b0a 0e0d 1110 1413 1816 1b1a 1f1d 2421     ..............!$
    1c8c:	2826 2d2a 312f 3634 3c39 413e 4744 4c49     &(*-/1469<>ADGIL
    1c9c:	524f 5855 5e5b 6461 6a67 706d 7673 7d79     ORUX[^adgjmpsvy}
    1cac:	8380 8986 8f8c 9592 9c99 a29f a8a5 adab     ................
    1cbc:	b3b0 b9b6 bebc c4c1 c9c6 cecb d3d0 d7d5     ................
    1ccc:	dcda e0de e4e2 e8e6 ebe9 eeed f1f0 f4f3     ................
    1cdc:	f6f5 f8f7 faf9 fcfb fdfc fefe fffe ffff     ................
    1cec:	ffff ffff fefe fdfe fcfc fafb f8f9 f6f7     ................
    1cfc:	f4f5 f1f3 eef0 ebed e8e9 e4e6 e0e2 dcde     ................
    1d0c:	d7da d3d5 ced0 c9cb c4c6 bec1 b9bc b3b6     ................
    1d1c:	adb0 a8ab a2a5 9c9f 9599 8f92 898c 8386     ................
    1d2c:	7d80 7679 7073 6a6d 6467 5e61 585b 5255     .}yvspmjgda^[XUR
    1d3c:	4c4f 4749 4144 3c3e 3639 3134 2d2f 282a     OLIGDA><9641/-*(
    1d4c:	2426 1f21 1b1d 181a 1416 1113 0e10 0b0d     &$!.............
    1d5c:	090a 0708 0506 0404 0203 0102 0101 0101     ................

00001d6c <bitquartets.5>:
    1d6c:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    1d7c:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

00001d8c <ssd1306_init_array>:
    1d8c:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    1d9c:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......
