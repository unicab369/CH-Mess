
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	0a10006f          	j	8a0 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	096e                	slli	s2,s2,0x1b
   a:	0000                	unimp
   c:	0916                	slli	s2,s2,0x5
	...
  2e:	0000                	unimp
  30:	1be8                	addi	a0,sp,508
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0916                	slli	s2,s2,0x5
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0916                	slli	s2,s2,0x5
  42:	0000                	unimp
  44:	0916                	slli	s2,s2,0x5
  46:	0000                	unimp
  48:	0916                	slli	s2,s2,0x5
  4a:	0000                	unimp
  4c:	0916                	slli	s2,s2,0x5
  4e:	0000                	unimp
  50:	0916                	slli	s2,s2,0x5
  52:	0000                	unimp
  54:	0916                	slli	s2,s2,0x5
  56:	0000                	unimp
  58:	0916                	slli	s2,s2,0x5
  5a:	0000                	unimp
  5c:	0916                	slli	s2,s2,0x5
  5e:	0000                	unimp
  60:	1b6e                	slli	s6,s6,0x3b
  62:	0000                	unimp
  64:	003c                	addi	a5,sp,8
  66:	2000                	fld	fs0,0(s0)
  68:	0916                	slli	s2,s2,0x5
  6a:	0000                	unimp
  6c:	0916                	slli	s2,s2,0x5
  6e:	0000                	unimp
  70:	0916                	slli	s2,s2,0x5
  72:	0000                	unimp
  74:	0916                	slli	s2,s2,0x5
  76:	0000                	unimp
  78:	1c1a                	slli	s8,s8,0x26
  7a:	0000                	unimp
  7c:	1dba                	slli	s11,s11,0x2e
  7e:	0000                	unimp
  80:	0916                	slli	s2,s2,0x5
  82:	0000                	unimp
  84:	0916                	slli	s2,s2,0x5
  86:	0000                	unimp
  88:	0916                	slli	s2,s2,0x5
  8a:	0000                	unimp
  8c:	0916                	slli	s2,s2,0x5
  8e:	0000                	unimp
  90:	0916                	slli	s2,s2,0x5
  92:	0000                	unimp
  94:	0916                	slli	s2,s2,0x5
  96:	0000                	unimp
  98:	0916                	slli	s2,s2,0x5
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	andi	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srli	a1,a1,0x1
      ae:	0606                	slli	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	slli	a2,a2,0x1
      d4:	0686                	slli	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srli	a3,a3,0x1
      e6:	8205                	srli	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
{
     136:	1131                	addi	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
	int overflow = 0;
     144:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     146:	cab5                	beqz	a3,1ba <mini_pad+0x84>
	if(len > pad_to) {
     148:	0096d463          	bge	a3,s1,150 <mini_pad+0x1a>
     14c:	84b6                	mv	s1,a3
		overflow = 1;
     14e:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     150:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     154:	00045363          	bgez	s0,15a <mini_pad+0x24>
     158:	4401                	li	s0,0
     15a:	8622                	mv	a2,s0
     15c:	853a                	mv	a0,a4
     15e:	c23e                	sw	a5,4(sp)
     160:	c01a                	sw	t1,0(sp)
     162:	2d7000ef          	jal	ra,c38 <memset>
     166:	4302                	lw	t1,0(sp)
     168:	4792                	lw	a5,4(sp)
     16a:	872a                	mv	a4,a0
     16c:	008506b3          	add	a3,a0,s0
     170:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     172:	40c485b3          	sub	a1,s1,a2
     176:	04b04463          	bgtz	a1,1be <mini_pad+0x88>
     17a:	0004d363          	bgez	s1,180 <mini_pad+0x4a>
     17e:	4481                	li	s1,0
     180:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     184:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     188:	02030463          	beqz	t1,1b0 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     18c:	02c77263          	bgeu	a4,a2,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     190:	02a00793          	li	a5,42
     194:	fef60fa3          	sb	a5,-1(a2)
     198:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     19c:	00d77a63          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1a0:	fef60f23          	sb	a5,-2(a2)
     1a4:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     1a8:	00d77463          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1ac:	fef60ea3          	sb	a5,-3(a2)
}
     1b0:	40c2                	lw	ra,16(sp)
     1b2:	4432                	lw	s0,12(sp)
     1b4:	44a2                	lw	s1,8(sp)
     1b6:	0151                	addi	sp,sp,20
     1b8:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1ba:	86a6                	mv	a3,s1
     1bc:	bf51                	j	150 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1be:	00c785b3          	add	a1,a5,a2
     1c2:	0005c503          	lbu	a0,0(a1)
     1c6:	00c685b3          	add	a1,a3,a2
     1ca:	0605                	addi	a2,a2,1
     1cc:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1d0:	b74d                	j	172 <mini_pad+0x3c>

000001d2 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     1d2:	e0000737          	lui	a4,0xe0000
     1d6:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     1da:	0f470693          	addi	a3,a4,244
     1de:	0807f793          	andi	a5,a5,128
     1e2:	fbf5                	bnez	a5,1d6 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     1e4:	783027b7          	lui	a5,0x78302
     1e8:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     1ec:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     1ee:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     1f0:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     1f4:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     1f6:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     1f8:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     1fc:	0807f793          	andi	a5,a5,128
     200:	ffe5                	bnez	a5,1f8 <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     202:	00e557b3          	srl	a5,a0,a4
     206:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     20a:	03000793          	li	a5,48
     20e:	00d35463          	bge	t1,a3,216 <PrintHex+0x44>
     212:	05700793          	li	a5,87
     216:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     218:	07a2                	slli	a5,a5,0x8
     21a:	0857e793          	ori	a5,a5,133
     21e:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     222:	1771                	addi	a4,a4,-4
     224:	fcb71ae3          	bne	a4,a1,1f8 <PrintHex+0x26>
}
     228:	8082                	ret

0000022a <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     22a:	e000f7b7          	lui	a5,0xe000f
     22e:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     230:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     234:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     236:	471c                	lw	a5,8(a4)
     238:	8f89                	sub	a5,a5,a0
     23a:	fe07cee3          	bltz	a5,236 <DelaySysTick+0xc>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     23e:	8082                	ret

00000240 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     240:	1101                	addi	sp,sp,-32
     242:	ce06                	sw	ra,28(sp)
     244:	cc22                	sw	s0,24(sp)
     246:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     248:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     24a:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     24c:	00055763          	bgez	a0,25a <mini_itoa.part.0+0x1a>
     250:	e689                	bnez	a3,25a <mini_itoa.part.0+0x1a>
		negative = 1;
     252:	4785                	li	a5,1
		value = -value;
     254:	40a00333          	neg	t1,a0
		negative = 1;
     258:	c03e                	sw	a5,0(sp)
     25a:	06100413          	li	s0,97
     25e:	c219                	beqz	a2,264 <mini_itoa.part.0+0x24>
     260:	04100413          	li	s0,65
	int	negative = 0;
     264:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     266:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     268:	851a                	mv	a0,t1
     26a:	c83a                	sw	a4,16(sp)
     26c:	c21a                	sw	t1,4(sp)
     26e:	c62e                	sw	a1,12(sp)
     270:	c41a                	sw	t1,8(sp)
     272:	3dad                	jal	ec <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     274:	47a5                	li	a5,9
     276:	4322                	lw	t1,8(sp)
     278:	45b2                	lw	a1,12(sp)
     27a:	4742                	lw	a4,16(sp)
     27c:	0ff57693          	andi	a3,a0,255
     280:	06a7e163          	bltu	a5,a0,2e2 <mini_itoa.part.0+0xa2>
     284:	03068693          	addi	a3,a3,48
     288:	0ff6f693          	andi	a3,a3,255
     28c:	00148793          	addi	a5,s1,1
     290:	00d48023          	sb	a3,0(s1)
		value /= radix;
     294:	851a                	mv	a0,t1
     296:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     298:	c63e                	sw	a5,12(sp)
		value /= radix;
     29a:	c42e                	sw	a1,8(sp)
     29c:	3515                	jal	c0 <__hidden___udivsi3>
	} while (value > 0);
     29e:	4692                	lw	a3,4(sp)
     2a0:	45a2                	lw	a1,8(sp)
     2a2:	47b2                	lw	a5,12(sp)
     2a4:	4742                	lw	a4,16(sp)
		value /= radix;
     2a6:	832a                	mv	t1,a0
	} while (value > 0);
     2a8:	02b6fb63          	bgeu	a3,a1,2de <mini_itoa.part.0+0x9e>
	if (negative)
     2ac:	4682                	lw	a3,0(sp)
     2ae:	c699                	beqz	a3,2bc <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2b0:	02d00693          	li	a3,45
     2b4:	00d78023          	sb	a3,0(a5) # e000f000 <_eusrstack+0xc000e800>
     2b8:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2bc:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2c0:	01f55693          	srli	a3,a0,0x1f
     2c4:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2c6:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2ca:	8685                	srai	a3,a3,0x1
     2cc:	4601                	li	a2,0
     2ce:	17fd                	addi	a5,a5,-1
     2d0:	00d64b63          	blt	a2,a3,2e6 <mini_itoa.part.0+0xa6>
}
     2d4:	40f2                	lw	ra,28(sp)
     2d6:	4462                	lw	s0,24(sp)
     2d8:	44d2                	lw	s1,20(sp)
     2da:	6105                	addi	sp,sp,32
     2dc:	8082                	ret
	} while (value > 0);
     2de:	84be                	mv	s1,a5
     2e0:	b761                	j	268 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2e2:	96a2                	add	a3,a3,s0
     2e4:	b755                	j	288 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     2e6:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     2ea:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     2ee:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     2f2:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     2f4:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     2f8:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     2fc:	bfc9                	j	2ce <mini_itoa.part.0+0x8e>

000002fe <ld_dword>:
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
     2fe:	00154783          	lbu	a5,1(a0)
     302:	00054703          	lbu	a4,0(a0)
     306:	07a2                	slli	a5,a5,0x8
     308:	8f5d                	or	a4,a4,a5
     30a:	00254783          	lbu	a5,2(a0)
     30e:	00354503          	lbu	a0,3(a0)
     312:	07c2                	slli	a5,a5,0x10
     314:	8fd9                	or	a5,a5,a4
     316:	0562                	slli	a0,a0,0x18
	return rv;
}
     318:	8d5d                	or	a0,a0,a5
     31a:	8082                	ret

0000031c <clust2sect>:
/*-----------------------------------------------------------------------*/

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     31c:	1151                	addi	sp,sp,-12
     31e:	c222                	sw	s0,4(sp)
	FATFS *fs = FatFs;
     320:	c741a403          	lw	s0,-908(gp) # 20000070 <FatFs>


	clst -= 2;
     324:	ffe50593          	addi	a1,a0,-2
{
     328:	c406                	sw	ra,8(sp)
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     32a:	441c                	lw	a5,8(s0)
     32c:	4501                	li	a0,0
     32e:	17f9                	addi	a5,a5,-2
     330:	00f5f763          	bgeu	a1,a5,33e <clust2sect+0x22>
	return (DWORD)clst * fs->csize + fs->database;
     334:	00244503          	lbu	a0,2(s0)
     338:	33a5                	jal	a0 <__mulsi3>
     33a:	485c                	lw	a5,20(s0)
     33c:	953e                	add	a0,a0,a5
}
     33e:	40a2                	lw	ra,8(sp)
     340:	4412                	lw	s0,4(sp)
     342:	0131                	addi	sp,sp,12
     344:	8082                	ret

00000346 <get_clust>:
{
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (PF_FS_FAT32 && fs->fs_type == FS_FAT32)) {
     346:	c741a783          	lw	a5,-908(gp) # 20000070 <FatFs>
     34a:	0007c703          	lbu	a4,0(a5)
     34e:	478d                	li	a5,3
     350:	02f71163          	bne	a4,a5,372 <get_clust+0x2c>
		clst = ld_word(dir+DIR_FstClusHI);
     354:	01554783          	lbu	a5,21(a0)
     358:	01454703          	lbu	a4,20(a0)
     35c:	07a2                	slli	a5,a5,0x8
     35e:	8fd9                	or	a5,a5,a4
		clst <<= 16;
     360:	07c2                	slli	a5,a5,0x10
	}
	clst |= ld_word(dir+DIR_FstClusLO);
     362:	01a54703          	lbu	a4,26(a0)
     366:	01b54503          	lbu	a0,27(a0)
     36a:	0522                	slli	a0,a0,0x8
     36c:	8d59                	or	a0,a0,a4

	return clst;
}
     36e:	8d5d                	or	a0,a0,a5
     370:	8082                	ret
	CLUST clst = 0;
     372:	4781                	li	a5,0
     374:	b7fd                	j	362 <get_clust+0x1c>

00000376 <dir_rewind>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     376:	1151                	addi	sp,sp,-12
     378:	c222                	sw	s0,4(sp)
     37a:	c406                	sw	ra,8(sp)
     37c:	842a                	mv	s0,a0
	CLUST clst;
	FATFS *fs = FatFs;


	dj->index = 0;
     37e:	00051023          	sh	zero,0(a0)
	clst = dj->sclust;
     382:	4508                	lw	a0,8(a0)
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
     384:	4705                	li	a4,1
	FATFS *fs = FatFs;
     386:	c741a783          	lw	a5,-908(gp) # 20000070 <FatFs>
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
     38a:	02e50563          	beq	a0,a4,3b4 <dir_rewind+0x3e>
     38e:	4798                	lw	a4,8(a5)
     390:	02e57663          	bgeu	a0,a4,3bc <dir_rewind+0x46>
		return FR_DISK_ERR;
	}
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
     394:	e919                	bnez	a0,3aa <dir_rewind+0x34>
     396:	0007c683          	lbu	a3,0(a5)
     39a:	470d                	li	a4,3
		clst = (CLUST)fs->dirbase;
     39c:	4b88                	lw	a0,16(a5)
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
     39e:	00e68663          	beq	a3,a4,3aa <dir_rewind+0x34>
	}
	dj->clust = clst;						/* Current cluster */
     3a2:	00042623          	sw	zero,12(s0)
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     3a6:	4b88                	lw	a0,16(a5)
     3a8:	a021                	j	3b0 <dir_rewind+0x3a>
	dj->clust = clst;						/* Current cluster */
     3aa:	c448                	sw	a0,12(s0)
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     3ac:	dd6d                	beqz	a0,3a6 <dir_rewind+0x30>
     3ae:	37bd                	jal	31c <clust2sect>
     3b0:	c808                	sw	a0,16(s0)

	return FR_OK;	/* Seek succeeded */
     3b2:	4501                	li	a0,0
}
     3b4:	40a2                	lw	ra,8(sp)
     3b6:	4412                	lw	s0,4(sp)
     3b8:	0131                	addi	sp,sp,12
     3ba:	8082                	ret
		return FR_DISK_ERR;
     3bc:	4505                	li	a0,1
     3be:	bfdd                	j	3b4 <dir_rewind+0x3e>

000003c0 <SPI_set_prescaler>:
static inline uint8_t SPI_is_RX_empty();
static inline void SPI_wait_RX_available();

void SPI_set_prescaler(uint8_t presc)
{
    SPI1->CTLR1 &= ~SPI_CTLR1_BR;
     3c0:	40013737          	lui	a4,0x40013
     3c4:	00075783          	lhu	a5,0(a4) # 40013000 <_eusrstack+0x20012800>
    SPI1->CTLR1 |= SPI_CTLR1_BR & (presc << 3);
     3c8:	050e                	slli	a0,a0,0x3
    SPI1->CTLR1 &= ~SPI_CTLR1_BR;
     3ca:	07c2                	slli	a5,a5,0x10
     3cc:	83c1                	srli	a5,a5,0x10
     3ce:	fc77f793          	andi	a5,a5,-57
     3d2:	07c2                	slli	a5,a5,0x10
     3d4:	83c1                	srli	a5,a5,0x10
     3d6:	00f71023          	sh	a5,0(a4)
    SPI1->CTLR1 |= SPI_CTLR1_BR & (presc << 3);
     3da:	00075783          	lhu	a5,0(a4)
     3de:	07c2                	slli	a5,a5,0x10
     3e0:	83c1                	srli	a5,a5,0x10
     3e2:	8d5d                	or	a0,a0,a5
     3e4:	00a71023          	sh	a0,0(a4)
}
     3e8:	8082                	ret

000003ea <SPI_transfer_8>:
    return SPI1->DATAR;
}

static inline void SPI_write_8(uint8_t data)
{
    SPI1->DATAR = data;
     3ea:	400137b7          	lui	a5,0x40013
     3ee:	00a79623          	sh	a0,12(a5) # 4001300c <_eusrstack+0x2001280c>
}

// ########  small internal function definitions, static inline
static inline void SPI_wait_TX_complete()
{
    while (!(SPI1->STATR & SPI_STATR_TXE))
     3f2:	40013737          	lui	a4,0x40013
     3f6:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     3fa:	8b89                	andi	a5,a5,2
     3fc:	dfed                	beqz	a5,3f6 <SPI_transfer_8+0xc>
    asm volatile("nop");
     3fe:	0001                	nop
{
    return SPI1->STATR & SPI_STATR_RXNE;
}
static inline void SPI_wait_RX_available()
{
    while (!(SPI1->STATR & SPI_STATR_RXNE))
     400:	40013737          	lui	a4,0x40013
     404:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     408:	8b85                	andi	a5,a5,1
     40a:	dfed                	beqz	a5,404 <SPI_transfer_8+0x1a>
    return SPI1->DATAR;
     40c:	00c75503          	lhu	a0,12(a4)
}
     410:	0ff57513          	andi	a0,a0,255
     414:	8082                	ret

00000416 <rcvr_mmc>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_mmc (void)
{
	BYTE r = SPI_transfer_8(0xFF);
     416:	0ff00513          	li	a0,255
     41a:	bfc1                	j	3ea <SPI_transfer_8>

0000041c <skip_mmc>:

static
void skip_mmc (
	UINT n		/* Number of bytes to skip */
)
{
     41c:	1151                	addi	sp,sp,-12
     41e:	c222                	sw	s0,4(sp)
     420:	c406                	sw	ra,8(sp)
     422:	842a                	mv	s0,a0
	do {
		SPI_transfer_8(0xFF);
     424:	0ff00513          	li	a0,255
	} while (--n);	
     428:	147d                	addi	s0,s0,-1
		SPI_transfer_8(0xFF);
     42a:	37c1                	jal	3ea <SPI_transfer_8>
	} while (--n);	
     42c:	fc65                	bnez	s0,424 <skip_mmc+0x8>
}
     42e:	40a2                	lw	ra,8(sp)
     430:	4412                	lw	s0,4(sp)
     432:	0131                	addi	sp,sp,12
     434:	8082                	ret

00000436 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     436:	1151                	addi	sp,sp,-12
	BYTE n, res;

	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     438:	01851793          	slli	a5,a0,0x18
{
     43c:	c222                	sw	s0,4(sp)
     43e:	c026                	sw	s1,0(sp)
     440:	c406                	sw	ra,8(sp)
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     442:	87e1                	srai	a5,a5,0x18
{
     444:	84aa                	mv	s1,a0
     446:	842e                	mv	s0,a1
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     448:	0007db63          	bgez	a5,45e <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     44c:	4581                	li	a1,0
     44e:	07700513          	li	a0,119
     452:	37d5                	jal	436 <send_cmd>
		if (res > 1) return res;
     454:	4785                	li	a5,1
     456:	06a7e163          	bltu	a5,a0,4b8 <send_cmd+0x82>
		cmd &= 0x7F;
     45a:	07f4f493          	andi	s1,s1,127
	}

	/* Select the card */
	INTF_MMC_CS_HIGH(); rcvr_mmc();
     45e:	3f65                	jal	416 <rcvr_mmc>
	INTF_MMC_CS_LOW(); rcvr_mmc();
     460:	3f5d                	jal	416 <rcvr_mmc>
	SPI_transfer_8(d);
     462:	8526                	mv	a0,s1
     464:	3759                	jal	3ea <SPI_transfer_8>
     466:	01845513          	srli	a0,s0,0x18
     46a:	3741                	jal	3ea <SPI_transfer_8>

	/* Send a command packet */
	xmit_mmc(cmd);					/* Start + Command index */
	xmit_mmc((BYTE)(arg >> 24));	/* Argument[31..24] */
	xmit_mmc((BYTE)(arg >> 16));	/* Argument[23..16] */
     46c:	01045513          	srli	a0,s0,0x10
	SPI_transfer_8(d);
     470:	0ff57513          	andi	a0,a0,255
     474:	3f9d                	jal	3ea <SPI_transfer_8>
	xmit_mmc((BYTE)(arg >> 8));		/* Argument[15..8] */
     476:	00845513          	srli	a0,s0,0x8
	SPI_transfer_8(d);
     47a:	0ff57513          	andi	a0,a0,255
     47e:	37b5                	jal	3ea <SPI_transfer_8>
     480:	0ff47513          	andi	a0,s0,255
     484:	379d                	jal	3ea <SPI_transfer_8>
	xmit_mmc((BYTE)arg);			/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* Valid CRC for CMD0(0) */
     486:	04000793          	li	a5,64
     48a:	09500513          	li	a0,149
     48e:	00f48963          	beq	s1,a5,4a0 <send_cmd+0x6a>
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) */
     492:	04800793          	li	a5,72
	n = 0x01;						/* Dummy CRC + Stop */
     496:	4505                	li	a0,1
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) */
     498:	00f49463          	bne	s1,a5,4a0 <send_cmd+0x6a>
     49c:	08700513          	li	a0,135
	SPI_transfer_8(d);
     4a0:	37a9                	jal	3ea <SPI_transfer_8>
     4a2:	4429                	li	s0,10
	xmit_mmc(n);

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcvr_mmc();
     4a4:	3f8d                	jal	416 <rcvr_mmc>
	} while ((res & 0x80) && --n);
     4a6:	01851793          	slli	a5,a0,0x18
     4aa:	87e1                	srai	a5,a5,0x18
     4ac:	0007d663          	bgez	a5,4b8 <send_cmd+0x82>
     4b0:	147d                	addi	s0,s0,-1
     4b2:	0ff47413          	andi	s0,s0,255
     4b6:	f47d                	bnez	s0,4a4 <send_cmd+0x6e>

	return res;			/* Return with the response value */
}
     4b8:	40a2                	lw	ra,8(sp)
     4ba:	4412                	lw	s0,4(sp)
     4bc:	4482                	lw	s1,0(sp)
     4be:	0131                	addi	sp,sp,12
     4c0:	8082                	ret

000004c2 <disk_readp>:
{
	DRESULT res;
	BYTE d;
	UINT bc, tmr;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     4c2:	c701c783          	lbu	a5,-912(gp) # 2000006c <CardType>
{
     4c6:	1131                	addi	sp,sp,-20
     4c8:	c622                	sw	s0,12(sp)
     4ca:	c426                	sw	s1,8(sp)
     4cc:	c806                	sw	ra,16(sp)
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     4ce:	8ba1                	andi	a5,a5,8
{
     4d0:	84aa                	mv	s1,a0
     4d2:	8436                	mv	s0,a3
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     4d4:	e391                	bnez	a5,4d8 <disk_readp+0x16>
     4d6:	05a6                	slli	a1,a1,0x9

	res = RES_ERROR;
	if (send_cmd(CMD17, sector) == 0) {		/* READ_SINGLE_BLOCK */
     4d8:	05100513          	li	a0,81
     4dc:	c032                	sw	a2,0(sp)
     4de:	3fa1                	jal	436 <send_cmd>
     4e0:	4602                	lw	a2,0(sp)
     4e2:	c909                	beqz	a0,4f4 <disk_readp+0x32>
	res = RES_ERROR;
     4e4:	4405                	li	s0,1
	rcvr_mmc();
     4e6:	3f05                	jal	416 <rcvr_mmc>
	}

	release_spi();

	return res;
}
     4e8:	40c2                	lw	ra,16(sp)
     4ea:	8522                	mv	a0,s0
     4ec:	4432                	lw	s0,12(sp)
     4ee:	44a2                	lw	s1,8(sp)
     4f0:	0151                	addi	sp,sp,20
     4f2:	8082                	ret
			DLY_US(100);
     4f4:	6705                	lui	a4,0x1
	if (send_cmd(CMD17, sector) == 0) {		/* READ_SINGLE_BLOCK */
     4f6:	3e800793          	li	a5,1000
			DLY_US(100);
     4fa:	2c070713          	addi	a4,a4,704 # 12c0 <main+0x56a>
     4fe:	853a                	mv	a0,a4
     500:	c232                	sw	a2,4(sp)
     502:	c03e                	sw	a5,0(sp)
     504:	331d                	jal	22a <DelaySysTick>
			d = rcvr_mmc();
     506:	3f01                	jal	416 <rcvr_mmc>
		} while (d == 0xFF && --tmr);
     508:	0ff00693          	li	a3,255
     50c:	4612                	lw	a2,4(sp)
     50e:	00d51963          	bne	a0,a3,520 <disk_readp+0x5e>
     512:	4782                	lw	a5,0(sp)
     514:	6705                	lui	a4,0x1
     516:	2c070713          	addi	a4,a4,704 # 12c0 <main+0x56a>
     51a:	17fd                	addi	a5,a5,-1
     51c:	f3ed                	bnez	a5,4fe <disk_readp+0x3c>
     51e:	b7d9                	j	4e4 <disk_readp+0x22>
		if (d == 0xFE) {				/* A data packet arrived */
     520:	0fe00793          	li	a5,254
     524:	fcf510e3          	bne	a0,a5,4e4 <disk_readp+0x22>
			bc = 514 - offset - count;
     528:	20200793          	li	a5,514
     52c:	8f81                	sub	a5,a5,s0
     52e:	8f91                	sub	a5,a5,a2
     530:	c03e                	sw	a5,0(sp)
			if (offset) skip_mmc(offset);
     532:	c219                	beqz	a2,538 <disk_readp+0x76>
     534:	8532                	mv	a0,a2
     536:	35dd                	jal	41c <skip_mmc>
			if (buff) {	/* Store data to the memory */
     538:	cc81                	beqz	s1,550 <disk_readp+0x8e>
     53a:	9426                	add	s0,s0,s1
					*buff++ = rcvr_mmc();
     53c:	0485                	addi	s1,s1,1
     53e:	3de1                	jal	416 <rcvr_mmc>
     540:	fea48fa3          	sb	a0,-1(s1)
				while (--count);
     544:	fe849ce3          	bne	s1,s0,53c <disk_readp+0x7a>
			skip_mmc(bc);
     548:	4502                	lw	a0,0(sp)
			res = RES_OK;
     54a:	4401                	li	s0,0
			skip_mmc(bc);
     54c:	3dc1                	jal	41c <skip_mmc>
			res = RES_OK;
     54e:	bf61                	j	4e6 <disk_readp+0x24>
				} while (--count);
     550:	147d                	addi	s0,s0,-1
					d = rcvr_mmc();
     552:	35d1                	jal	416 <rcvr_mmc>
				} while (--count);
     554:	fc75                	bnez	s0,550 <disk_readp+0x8e>
     556:	bfcd                	j	548 <disk_readp+0x86>

00000558 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     558:	4785                	li	a5,1
     55a:	00a7e463          	bltu	a5,a0,562 <get_fat+0xa>
     55e:	4505                	li	a0,1
}
     560:	8082                	ret
	FATFS *fs = FatFs;
     562:	c741a783          	lw	a5,-908(gp) # 20000070 <FatFs>
	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     566:	4798                	lw	a4,8(a5)
     568:	fee57be3          	bgeu	a0,a4,55e <get_fat+0x6>
{
     56c:	1141                	addi	sp,sp,-16
     56e:	c606                	sw	ra,12(sp)
	switch (fs->fs_type) {
     570:	0007c703          	lbu	a4,0(a5)
     574:	4689                	li	a3,2
     576:	00d70963          	beq	a4,a3,588 <get_fat+0x30>
     57a:	468d                	li	a3,3
     57c:	02d70363          	beq	a4,a3,5a2 <get_fat+0x4a>
     580:	4505                	li	a0,1
}
     582:	40b2                	lw	ra,12(sp)
     584:	0141                	addi	sp,sp,16
     586:	8082                	ret
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
     588:	47cc                	lw	a1,12(a5)
     58a:	0ff57613          	andi	a2,a0,255
     58e:	8121                	srli	a0,a0,0x8
     590:	95aa                	add	a1,a1,a0
     592:	4689                	li	a3,2
     594:	0606                	slli	a2,a2,0x1
     596:	850a                	mv	a0,sp
     598:	372d                	jal	4c2 <disk_readp>
     59a:	f17d                	bnez	a0,580 <get_fat+0x28>
		return ld_word(buf);
     59c:	00015503          	lhu	a0,0(sp)
     5a0:	b7cd                	j	582 <get_fat+0x2a>
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
     5a2:	47cc                	lw	a1,12(a5)
     5a4:	07f57613          	andi	a2,a0,127
     5a8:	811d                	srli	a0,a0,0x7
     5aa:	95aa                	add	a1,a1,a0
     5ac:	4691                	li	a3,4
     5ae:	060a                	slli	a2,a2,0x2
     5b0:	850a                	mv	a0,sp
     5b2:	3f01                	jal	4c2 <disk_readp>
     5b4:	f571                	bnez	a0,580 <get_fat+0x28>
		return ld_dword(buf) & 0x0FFFFFFF;
     5b6:	850a                	mv	a0,sp
     5b8:	3399                	jal	2fe <ld_dword>
     5ba:	0512                	slli	a0,a0,0x4
     5bc:	8111                	srli	a0,a0,0x4
     5be:	b7d1                	j	582 <get_fat+0x2a>

000005c0 <disk_writep.part.0>:
/*-----------------------------------------------------------------------*/
/* Write partial sector                                                  */
/*-----------------------------------------------------------------------*/
#if PF_USE_WRITE

DRESULT disk_writep (
     5c0:	1151                	addi	sp,sp,-12
     5c2:	c406                	sw	ra,8(sp)
     5c4:	c222                	sw	s0,4(sp)
			xmit_mmc(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sc) {	/* Initiate sector write transaction */
     5c6:	cd0d                	beqz	a0,600 <disk_writep.part.0+0x40>
			if (!(CardType & CT_BLOCK)) sc *= 512;	/* Convert to byte address if needed */
     5c8:	c701c783          	lbu	a5,-912(gp) # 2000006c <CardType>
     5cc:	85aa                	mv	a1,a0
     5ce:	8ba1                	andi	a5,a5,8
     5d0:	e399                	bnez	a5,5d6 <disk_writep.part.0+0x16>
     5d2:	00951593          	slli	a1,a0,0x9
			if (send_cmd(CMD24, sc) == 0) {			/* WRITE_SINGLE_BLOCK */
     5d6:	05800513          	li	a0,88
     5da:	3db1                	jal	436 <send_cmd>
	res = RES_ERROR;
     5dc:	4405                	li	s0,1
			if (send_cmd(CMD24, sc) == 0) {			/* WRITE_SINGLE_BLOCK */
     5de:	ed01                	bnez	a0,5f6 <disk_writep.part.0+0x36>
	SPI_transfer_8(d);
     5e0:	0ff00513          	li	a0,255
     5e4:	3519                	jal	3ea <SPI_transfer_8>
     5e6:	0fe00513          	li	a0,254
     5ea:	3501                	jal	3ea <SPI_transfer_8>
				xmit_mmc(0xFF); xmit_mmc(0xFE);		/* Data block header */
				wc = 512;							/* Set byte counter */
     5ec:	20000713          	li	a4,512
     5f0:	c8e1aa23          	sw	a4,-876(gp) # 20000090 <wc.1>
				res = RES_OK;
     5f4:	4401                	li	s0,0
			release_spi();
		}
	}

	return res;
}
     5f6:	40a2                	lw	ra,8(sp)
     5f8:	8522                	mv	a0,s0
     5fa:	4412                	lw	s0,4(sp)
     5fc:	0131                	addi	sp,sp,12
     5fe:	8082                	ret
			bc = wc + 2;
     600:	c941a403          	lw	s0,-876(gp) # 20000090 <wc.1>
     604:	0409                	addi	s0,s0,2
			while (bc--) xmit_mmc(0);	/* Fill left bytes and CRC with zeros */
     606:	e809                	bnez	s0,618 <disk_writep.part.0+0x58>
			if ((rcvr_mmc() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
     608:	3539                	jal	416 <rcvr_mmc>
     60a:	897d                	andi	a0,a0,31
     60c:	4795                	li	a5,5
     60e:	02f50563          	beq	a0,a5,638 <disk_writep.part.0+0x78>
	res = RES_ERROR;
     612:	4405                	li	s0,1
	rcvr_mmc();
     614:	3509                	jal	416 <rcvr_mmc>
     616:	b7c5                	j	5f6 <disk_writep.part.0+0x36>
	SPI_transfer_8(d);
     618:	4501                	li	a0,0
     61a:	3bc1                	jal	3ea <SPI_transfer_8>
     61c:	147d                	addi	s0,s0,-1
     61e:	b7e5                	j	606 <disk_writep.part.0+0x46>
					DLY_US(100);
     620:	6505                	lui	a0,0x1
     622:	2c050513          	addi	a0,a0,704 # 12c0 <main+0x56a>
     626:	3111                	jal	22a <DelaySysTick>
				for (tmr = 10000; rcvr_mmc() != 0xFF && tmr; tmr--)	/* Wait for ready (max 1000ms) */
     628:	147d                	addi	s0,s0,-1
     62a:	33f5                	jal	416 <rcvr_mmc>
     62c:	0ff00793          	li	a5,255
     630:	00f50863          	beq	a0,a5,640 <disk_writep.part.0+0x80>
     634:	f475                	bnez	s0,620 <disk_writep.part.0+0x60>
     636:	bff1                	j	612 <disk_writep.part.0+0x52>
     638:	6409                	lui	s0,0x2
     63a:	71040413          	addi	s0,s0,1808 # 2710 <_data_lma+0x698>
     63e:	b7f5                	j	62a <disk_writep.part.0+0x6a>
				if (tmr) res = RES_OK;
     640:	00143413          	seqz	s0,s0
     644:	bfc1                	j	614 <disk_writep.part.0+0x54>

00000646 <pf_write.constprop.0>:
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/
#if PF_USE_WRITE

FRESULT pf_write (
     646:	fdc10113          	addi	sp,sp,-36
     64a:	cc26                	sw	s1,24(sp)
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	BYTE cs;
	UINT wcnt;
	FATFS *fs = FatFs;
     64c:	c741a483          	lw	s1,-908(gp) # 20000070 <FatFs>


	*bw = 0;
     650:	c801a423          	sw	zero,-888(gp) # 20000084 <br>
     654:	c8818793          	addi	a5,gp,-888 # 20000084 <br>
FRESULT pf_write (
     658:	ce22                	sw	s0,28(sp)
     65a:	d006                	sw	ra,32(sp)
     65c:	c02a                	sw	a0,0(sp)
     65e:	c43e                	sw	a5,8(sp)
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     660:	4415                	li	s0,5
     662:	c88d                	beqz	s1,694 <pf_write.constprop.0+0x4e>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
     664:	0014c703          	lbu	a4,1(s1)
     668:	4411                	li	s0,4
     66a:	00177693          	andi	a3,a4,1
     66e:	c29d                	beqz	a3,694 <pf_write.constprop.0+0x4e>
     670:	842e                	mv	s0,a1
     672:	04077713          	andi	a4,a4,64

	if (!btw) {		/* Finalize request */
     676:	e595                	bnez	a1,6a2 <pf_write.constprop.0+0x5c>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) ABORT(FR_DISK_ERR);
     678:	cb01                	beqz	a4,688 <pf_write.constprop.0+0x42>
     67a:	4501                	li	a0,0
     67c:	3791                	jal	5c0 <disk_writep.part.0>
     67e:	c509                	beqz	a0,688 <pf_write.constprop.0+0x42>
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) ABORT(FR_DISK_ERR);	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
		btw -= wcnt; *bw += wcnt;
		if ((UINT)fs->fptr % 512 == 0) {
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
     680:	000480a3          	sb	zero,1(s1)
     684:	4405                	li	s0,1
     686:	a039                	j	694 <pf_write.constprop.0+0x4e>
		fs->flag &= ~FA__WIP;
     688:	0014c703          	lbu	a4,1(s1)
     68c:	fbf77713          	andi	a4,a4,-65
     690:	00e480a3          	sb	a4,1(s1)
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
}
     694:	5082                	lw	ra,32(sp)
     696:	8522                	mv	a0,s0
     698:	4472                	lw	s0,28(sp)
     69a:	44e2                	lw	s1,24(sp)
     69c:	02410113          	addi	sp,sp,36
     6a0:	8082                	ret
		if (!(fs->flag & FA__WIP)) {	/* Round-down fptr to the sector boundary */
     6a2:	e709                	bnez	a4,6ac <pf_write.constprop.0+0x66>
			fs->fptr &= 0xFFFFFE00;
     6a4:	4c98                	lw	a4,24(s1)
     6a6:	e0077713          	andi	a4,a4,-512
     6aa:	cc98                	sw	a4,24(s1)
	remain = fs->fsize - fs->fptr;
     6ac:	4cd8                	lw	a4,28(s1)
     6ae:	4c94                	lw	a3,24(s1)
     6b0:	8f15                	sub	a4,a4,a3
     6b2:	00877363          	bgeu	a4,s0,6b8 <pf_write.constprop.0+0x72>
     6b6:	843a                	mv	s0,a4
	while (btw)	{									/* Repeat until all data transferred */
     6b8:	dc71                	beqz	s0,694 <pf_write.constprop.0+0x4e>
		if ((UINT)fs->fptr % 512 == 0) {			/* On the sector boundary? */
     6ba:	4c98                	lw	a4,24(s1)
     6bc:	1ff77693          	andi	a3,a4,511
     6c0:	ee9d                	bnez	a3,6fe <pf_write.constprop.0+0xb8>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
     6c2:	0024c503          	lbu	a0,2(s1)
     6c6:	00975693          	srli	a3,a4,0x9
     6ca:	157d                	addi	a0,a0,-1
     6cc:	8d75                	and	a0,a0,a3
     6ce:	0ff57793          	andi	a5,a0,255
     6d2:	c23e                	sw	a5,4(sp)
			if (!cs) {								/* On the cluster boundary? */
     6d4:	e799                	bnez	a5,6e2 <pf_write.constprop.0+0x9c>
				if (fs->fptr == 0) {				/* On the top of the file? */
     6d6:	e745                	bnez	a4,77e <pf_write.constprop.0+0x138>
					clst = fs->org_clust;
     6d8:	5088                	lw	a0,32(s1)
				if (clst <= 1) ABORT(FR_DISK_ERR);
     6da:	4705                	li	a4,1
     6dc:	faa772e3          	bgeu	a4,a0,680 <pf_write.constprop.0+0x3a>
				fs->curr_clust = clst;				/* Update current cluster */
     6e0:	d0c8                	sw	a0,36(s1)
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
     6e2:	50c8                	lw	a0,36(s1)
     6e4:	3925                	jal	31c <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
     6e6:	dd49                	beqz	a0,680 <pf_write.constprop.0+0x3a>
			fs->dsect = sect + cs;
     6e8:	4792                	lw	a5,4(sp)
     6ea:	953e                	add	a0,a0,a5
     6ec:	d488                	sw	a0,40(s1)
     6ee:	3dc9                	jal	5c0 <disk_writep.part.0>
			if (disk_writep(0, fs->dsect)) ABORT(FR_DISK_ERR);	/* Initiate a sector write operation */
     6f0:	f941                	bnez	a0,680 <pf_write.constprop.0+0x3a>
			fs->flag |= FA__WIP;
     6f2:	0014c703          	lbu	a4,1(s1)
     6f6:	04076713          	ori	a4,a4,64
     6fa:	00e480a3          	sb	a4,1(s1)
		wcnt = 512 - (UINT)fs->fptr % 512;			/* Number of bytes to write to the sector */
     6fe:	4c98                	lw	a4,24(s1)
     700:	20000693          	li	a3,512
     704:	1ff77713          	andi	a4,a4,511
     708:	40e68733          	sub	a4,a3,a4
     70c:	00e47363          	bgeu	s0,a4,712 <pf_write.constprop.0+0xcc>
     710:	8722                	mv	a4,s0
	if (buff) {		/* Send data bytes */
     712:	4782                	lw	a5,0(sp)
     714:	cba5                	beqz	a5,784 <pf_write.constprop.0+0x13e>
     716:	00e782b3          	add	t0,a5,a4
     71a:	863e                	mv	a2,a5
		while (bc && wc) {		/* Send data bytes to the card */
     71c:	c9418313          	addi	t1,gp,-876 # 20000090 <wc.1>
     720:	00032683          	lw	a3,0(t1)
     724:	c685                	beqz	a3,74c <pf_write.constprop.0+0x106>
	SPI_transfer_8(d);
     726:	00064503          	lbu	a0,0(a2)
			xmit_mmc(*buff++);
     72a:	0605                	addi	a2,a2,1
     72c:	ca16                	sw	t0,20(sp)
     72e:	c836                	sw	a3,16(sp)
     730:	c63a                	sw	a4,12(sp)
	SPI_transfer_8(d);
     732:	c232                	sw	a2,4(sp)
     734:	395d                	jal	3ea <SPI_transfer_8>
			wc--; bc--;
     736:	46c2                	lw	a3,16(sp)
		while (bc && wc) {		/* Send data bytes to the card */
     738:	4612                	lw	a2,4(sp)
     73a:	42d2                	lw	t0,20(sp)
			wc--; bc--;
     73c:	16fd                	addi	a3,a3,-1
     73e:	c9418313          	addi	t1,gp,-876 # 20000090 <wc.1>
     742:	00d32023          	sw	a3,0(t1)
		while (bc && wc) {		/* Send data bytes to the card */
     746:	4732                	lw	a4,12(sp)
     748:	fc561ae3          	bne	a2,t0,71c <pf_write.constprop.0+0xd6>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
     74c:	4782                	lw	a5,0(sp)
     74e:	4c94                	lw	a3,24(s1)
		btw -= wcnt; *bw += wcnt;
     750:	8c19                	sub	s0,s0,a4
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
     752:	97ba                	add	a5,a5,a4
     754:	c03e                	sw	a5,0(sp)
		btw -= wcnt; *bw += wcnt;
     756:	47a2                	lw	a5,8(sp)
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
     758:	96ba                	add	a3,a3,a4
     75a:	cc94                	sw	a3,24(s1)
		btw -= wcnt; *bw += wcnt;
     75c:	4390                	lw	a2,0(a5)
		if ((UINT)fs->fptr % 512 == 0) {
     75e:	1ff6f693          	andi	a3,a3,511
		btw -= wcnt; *bw += wcnt;
     762:	9732                	add	a4,a4,a2
     764:	c398                	sw	a4,0(a5)
		if ((UINT)fs->fptr % 512 == 0) {
     766:	faa9                	bnez	a3,6b8 <pf_write.constprop.0+0x72>
     768:	4501                	li	a0,0
     76a:	3d99                	jal	5c0 <disk_writep.part.0>
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
     76c:	f0051ae3          	bnez	a0,680 <pf_write.constprop.0+0x3a>
			fs->flag &= ~FA__WIP;
     770:	0014c703          	lbu	a4,1(s1)
     774:	fbf77713          	andi	a4,a4,-65
     778:	00e480a3          	sb	a4,1(s1)
     77c:	bf35                	j	6b8 <pf_write.constprop.0+0x72>
					clst = get_fat(fs->curr_clust);
     77e:	50c8                	lw	a0,36(s1)
     780:	3be1                	jal	558 <get_fat>
     782:	bfa1                	j	6da <pf_write.constprop.0+0x94>
     784:	853a                	mv	a0,a4
     786:	c23a                	sw	a4,4(sp)
     788:	3d25                	jal	5c0 <disk_writep.part.0>
		if (disk_writep(p, wcnt)) ABORT(FR_DISK_ERR);	/* Send data to the sector */
     78a:	4712                	lw	a4,4(sp)
     78c:	d161                	beqz	a0,74c <pf_write.constprop.0+0x106>
     78e:	bdcd                	j	680 <pf_write.constprop.0+0x3a>

00000790 <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     790:	e00007b7          	lui	a5,0xe0000
     794:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
}
     798:	8082                	ret

0000079a <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     79a:	e0000737          	lui	a4,0xe0000
     79e:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     7a2:	1111                	addi	sp,sp,-28
     7a4:	cc06                	sw	ra,24(sp)
     7a6:	ca22                	sw	s0,20(sp)
     7a8:	c826                	sw	s1,16(sp)
     7aa:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     7ac:	0c07f793          	andi	a5,a5,192
     7b0:	0c000693          	li	a3,192
     7b4:	0cd78863          	beq	a5,a3,884 <_write.constprop.0+0xea>
	char buffer[4] = { 0 };
     7b8:	c602                	sw	zero,12(sp)
     7ba:	842e                	mv	s0,a1
	if( size == 0 )
     7bc:	e5f1                	bnez	a1,888 <_write.constprop.0+0xee>
		lastdmd = (*DMDATA0);
     7be:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     7c2:	c789                	beqz	a5,7cc <_write.constprop.0+0x32>
     7c4:	0807f793          	andi	a5,a5,128
     7c8:	e391                	bnez	a5,7cc <_write.constprop.0+0x32>
     7ca:	37d9                	jal	790 <internal_handle_input.constprop.0>
}
     7cc:	40e2                	lw	ra,24(sp)
     7ce:	8522                	mv	a0,s0
     7d0:	4452                	lw	s0,20(sp)
     7d2:	44c2                	lw	s1,16(sp)
     7d4:	0171                	addi	sp,sp,28
     7d6:	8082                	ret
		int tosend = size - place;
     7d8:	409405b3          	sub	a1,s0,s1
     7dc:	469d                	li	a3,7
     7de:	872e                	mv	a4,a1
     7e0:	00b6d363          	bge	a3,a1,7e6 <_write.constprop.0+0x4c>
     7e4:	471d                	li	a4,7
     7e6:	001006b7          	lui	a3,0x100
     7ea:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     7ec:	e0000537          	lui	a0,0xe0000
     7f0:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     7f4:	0f450313          	addi	t1,a0,244
     7f8:	08067293          	andi	t0,a2,128
     7fc:	06029c63          	bnez	t0,874 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     800:	c611                	beqz	a2,80c <_write.constprop.0+0x72>
     802:	c43a                	sw	a4,8(sp)
     804:	c22e                	sw	a1,4(sp)
     806:	3769                	jal	790 <internal_handle_input.constprop.0>
     808:	4722                	lw	a4,8(sp)
     80a:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     80c:	4689                	li	a3,2
     80e:	4601                	li	a2,0
     810:	00b6d463          	bge	a3,a1,818 <_write.constprop.0+0x7e>
     814:	ffd70613          	addi	a2,a4,-3
     818:	4782                	lw	a5,0(sp)
     81a:	00348593          	addi	a1,s1,3
     81e:	0068                	addi	a0,sp,12
     820:	95be                	add	a1,a1,a5
     822:	c23a                	sw	a4,4(sp)
     824:	211d                	jal	c4a <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     826:	4632                	lw	a2,12(sp)
     828:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     82a:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     82c:	e00006b7          	lui	a3,0xe0000
     830:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     834:	458d                	li	a1,3
     836:	00978633          	add	a2,a5,s1
		t = 0;
     83a:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     83c:	00064303          	lbu	t1,0(a2)
     840:	0685                	addi	a3,a3,1
     842:	007c                	addi	a5,sp,12
     844:	00d78533          	add	a0,a5,a3
     848:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     84c:	00d70563          	beq	a4,a3,856 <_write.constprop.0+0xbc>
     850:	0605                	addi	a2,a2,1
     852:	feb695e3          	bne	a3,a1,83c <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     856:	00470693          	addi	a3,a4,4
     85a:	f806e693          	ori	a3,a3,-128
     85e:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     862:	4632                	lw	a2,12(sp)
     864:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     868:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     86a:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     86e:	f684c5e3          	blt	s1,s0,7d8 <_write.constprop.0+0x3e>
     872:	bfa9                	j	7cc <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     874:	16fd                	addi	a3,a3,-1
     876:	fead                	bnez	a3,7f0 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     878:	00032783          	lw	a5,0(t1)
     87c:	0c07e793          	ori	a5,a5,192
     880:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     884:	4401                	li	s0,0
     886:	b799                	j	7cc <_write.constprop.0+0x32>
	if( size == 0 )
     888:	4481                	li	s1,0
     88a:	b7d5                	j	86e <_write.constprop.0+0xd4>

0000088c <__puts_uart>:
{
     88c:	1151                	addi	sp,sp,-12
     88e:	c222                	sw	s0,4(sp)
     890:	c406                	sw	ra,8(sp)
     892:	842e                	mv	s0,a1
	_write( 0, s, len );
     894:	3719                	jal	79a <_write.constprop.0>
}
     896:	40a2                	lw	ra,8(sp)
     898:	8522                	mv	a0,s0
     89a:	4412                	lw	s0,4(sp)
     89c:	0131                	addi	sp,sp,12
     89e:	8082                	ret

000008a0 <handle_reset>:
	asm volatile( "\n\
     8a0:	20000197          	auipc	gp,0x20000
     8a4:	b5c18193          	addi	gp,gp,-1188 # 200003fc <__global_pointer$>
     8a8:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     8ac:	6509                	lui	a0,0x2
     8ae:	88050513          	addi	a0,a0,-1920 # 1880 <main+0xb2a>
     8b2:	30051073          	csrw	mstatus,a0
     8b6:	468d                	li	a3,3
     8b8:	fffff517          	auipc	a0,0xfffff
     8bc:	74850513          	addi	a0,a0,1864 # 0 <InterruptVector>
     8c0:	8d55                	or	a0,a0,a3
     8c2:	30551073          	csrw	mtvec,a0
asm volatile(
     8c6:	c7018513          	addi	a0,gp,-912 # 2000006c <CardType>
     8ca:	d5018593          	addi	a1,gp,-688 # 2000014c <_ebss>
     8ce:	4601                	li	a2,0
     8d0:	00b55663          	bge	a0,a1,8dc <handle_reset+0x3c>
     8d4:	c110                	sw	a2,0(a0)
     8d6:	0511                	addi	a0,a0,4
     8d8:	feb54ee3          	blt	a0,a1,8d4 <handle_reset+0x34>
     8dc:	00001517          	auipc	a0,0x1
     8e0:	79c50513          	addi	a0,a0,1948 # 2078 <_data_lma>
     8e4:	c0418593          	addi	a1,gp,-1020 # 20000000 <i2c_registers>
     8e8:	1ffff617          	auipc	a2,0x1ffff
     8ec:	78460613          	addi	a2,a2,1924 # 2000006c <CardType>
     8f0:	00c58863          	beq	a1,a2,900 <handle_reset+0x60>
     8f4:	4114                	lw	a3,0(a0)
     8f6:	c194                	sw	a3,0(a1)
     8f8:	0511                	addi	a0,a0,4
     8fa:	0591                	addi	a1,a1,4
     8fc:	fec59ae3          	bne	a1,a2,8f0 <handle_reset+0x50>
	SysTick->CTLR = 5;
     900:	e000f7b7          	lui	a5,0xe000f
     904:	4715                	li	a4,5
     906:	c398                	sw	a4,0(a5)
asm volatile(
     908:	6785                	lui	a5,0x1
     90a:	d5678793          	addi	a5,a5,-682 # d56 <main>
     90e:	34179073          	csrw	mepc,a5
     912:	30200073          	mret

00000916 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     916:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     91a:	8b9ff0ef          	jal	ra,1d2 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     91e:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     922:	8b1ff0ef          	jal	ra,1d2 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     926:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     92a:	8a9ff0ef          	jal	ra,1d2 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     92e:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     932:	8a1ff0ef          	jal	ra,1d2 <PrintHex>
	while( (*DMDATA0) & 0x80 );
     936:	e0000737          	lui	a4,0xe0000
     93a:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     93e:	0f470693          	addi	a3,a4,244
     942:	0807f793          	andi	a5,a5,128
     946:	fbf5                	bnez	a5,93a <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     948:	6785                	lui	a5,0x1
     94a:	a8578793          	addi	a5,a5,-1403 # a85 <mini_vpprintf+0xf7>
     94e:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     950:	e0000737          	lui	a4,0xe0000
     954:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     958:	0f470693          	addi	a3,a4,244
     95c:	0807f793          	andi	a5,a5,128
     960:	fbf5                	bnez	a5,954 <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     962:	aaaab7b7          	lui	a5,0xaaaab
     966:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     96a:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     96c:	a001                	j	96c <ADC1_2_IRQHandler+0x56>

0000096e <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     96e:	40021737          	lui	a4,0x40021
     972:	471c                	lw	a5,8(a4)
     974:	008006b7          	lui	a3,0x800
     978:	8fd5                	or	a5,a5,a3
     97a:	c71c                	sw	a5,8(a4)

0000097c <strlen>:
{
     97c:	87aa                	mv	a5,a0
	for (; *s; s++);
     97e:	0007c703          	lbu	a4,0(a5)
     982:	e701                	bnez	a4,98a <strlen+0xe>
}
     984:	40a78533          	sub	a0,a5,a0
     988:	8082                	ret
	for (; *s; s++);
     98a:	0785                	addi	a5,a5,1
     98c:	bfcd                	j	97e <strlen+0x2>

0000098e <mini_vpprintf>:
{
     98e:	fa410113          	addi	sp,sp,-92
     992:	c8a6                	sw	s1,80(sp)
     994:	cc86                	sw	ra,88(sp)
     996:	caa2                	sw	s0,84(sp)
     998:	c02a                	sw	a0,0(sp)
     99a:	c22e                	sw	a1,4(sp)
     99c:	84b2                	mv	s1,a2
     99e:	87b6                	mv	a5,a3
	int n = 0;
     9a0:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     9a2:	0004c703          	lbu	a4,0(s1)
     9a6:	00148413          	addi	s0,s1,1
     9aa:	00e10fa3          	sb	a4,31(sp)
     9ae:	eb01                	bnez	a4,9be <mini_vpprintf+0x30>
}
     9b0:	40e6                	lw	ra,88(sp)
     9b2:	4456                	lw	s0,84(sp)
     9b4:	4542                	lw	a0,16(sp)
     9b6:	44c6                	lw	s1,80(sp)
     9b8:	05c10113          	addi	sp,sp,92
     9bc:	8082                	ret
		if (ch!='%') {
     9be:	02500693          	li	a3,37
     9c2:	00d70f63          	beq	a4,a3,9e0 <mini_vpprintf+0x52>
     9c6:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     9c8:	4612                	lw	a2,4(sp)
     9ca:	4782                	lw	a5,0(sp)
     9cc:	4585                	li	a1,1
     9ce:	01f10513          	addi	a0,sp,31
     9d2:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     9d4:	84a2                	mv	s1,s0
		n = n + len;
     9d6:	47c2                	lw	a5,16(sp)
     9d8:	97aa                	add	a5,a5,a0
     9da:	c83e                	sw	a5,16(sp)
     9dc:	47a2                	lw	a5,8(sp)
     9de:	b7d1                	j	9a2 <mini_vpprintf+0x14>
			ch=*(fmt++);
     9e0:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     9e4:	03000613          	li	a2,48
			ch=*(fmt++);
     9e8:	00248713          	addi	a4,s1,2
     9ec:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     9f0:	03000413          	li	s0,48
     9f4:	08c69063          	bne	a3,a2,a74 <mini_vpprintf+0xe6>
				ch=*(fmt++);
     9f8:	84ba                	mv	s1,a4
     9fa:	4601                	li	a2,0
     9fc:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     9fe:	4525                	li	a0,9
     a00:	a811                	j	a14 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     a02:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     a06:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     a08:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     a0a:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     a0e:	0706                	slli	a4,a4,0x1
     a10:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     a12:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     a14:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f6f69>
     a18:	0ff5f313          	andi	t1,a1,255
     a1c:	fe6573e3          	bgeu	a0,t1,a02 <mini_vpprintf+0x74>
     a20:	c219                	beqz	a2,a26 <mini_vpprintf+0x98>
     a22:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     a26:	c63a                	sw	a4,12(sp)
     a28:	4661                	li	a2,24
     a2a:	00e65363          	bge	a2,a4,a30 <mini_vpprintf+0xa2>
     a2e:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     a30:	06c00593          	li	a1,108
			char l = 0;
     a34:	4601                	li	a2,0
			if (ch == 'l') {
     a36:	00b69863          	bne	a3,a1,a46 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     a3a:	0004c683          	lbu	a3,0(s1)
				l = 1;
     a3e:	4605                	li	a2,1
				ch=*(fmt++);
     a40:	0485                	addi	s1,s1,1
     a42:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     a46:	01f14683          	lbu	a3,31(sp)
     a4a:	06400593          	li	a1,100
     a4e:	06b68363          	beq	a3,a1,ab4 <mini_vpprintf+0x126>
     a52:	02d5e463          	bltu	a1,a3,a7a <mini_vpprintf+0xec>
     a56:	05800713          	li	a4,88
     a5a:	0ae68263          	beq	a3,a4,afe <mini_vpprintf+0x170>
     a5e:	06300713          	li	a4,99
     a62:	0ce68063          	beq	a3,a4,b22 <mini_vpprintf+0x194>
     a66:	d6a9                	beqz	a3,9b0 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     a68:	4612                	lw	a2,4(sp)
     a6a:	c43e                	sw	a5,8(sp)
     a6c:	4585                	li	a1,1
     a6e:	01f10513          	addi	a0,sp,31
     a72:	a88d                	j	ae4 <mini_vpprintf+0x156>
			char pad_char = ' ';
     a74:	02000413          	li	s0,32
     a78:	b741                	j	9f8 <mini_vpprintf+0x6a>
			switch (ch) {
     a7a:	07500593          	li	a1,117
     a7e:	02b68b63          	beq	a3,a1,ab4 <mini_vpprintf+0x126>
     a82:	07800613          	li	a2,120
     a86:	06c68c63          	beq	a3,a2,afe <mini_vpprintf+0x170>
     a8a:	07300613          	li	a2,115
     a8e:	fcc69de3          	bne	a3,a2,a68 <mini_vpprintf+0xda>
     a92:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     a94:	00478713          	addi	a4,a5,4
     a98:	439c                	lw	a5,0(a5)
     a9a:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     a9c:	853e                	mv	a0,a5
     a9e:	ca3e                	sw	a5,20(sp)
     aa0:	3df1                	jal	97c <strlen>
					if (pad_to > 0) {
     aa2:	4762                	lw	a4,24(sp)
     aa4:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     aa6:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     aa8:	cb51                	beqz	a4,b3c <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     aaa:	46b2                	lw	a3,12(sp)
     aac:	1838                	addi	a4,sp,56
     aae:	8622                	mv	a2,s0
     ab0:	853e                	mv	a0,a5
     ab2:	a025                	j	ada <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     ab4:	00478713          	addi	a4,a5,4
     ab8:	c43a                	sw	a4,8(sp)
					if(l) {
     aba:	ca05                	beqz	a2,aea <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     abc:	f8b68693          	addi	a3,a3,-117
     ac0:	1018                	addi	a4,sp,32
     ac2:	0016b693          	seqz	a3,a3
     ac6:	4388                	lw	a0,0(a5)
     ac8:	4601                	li	a2,0
     aca:	45a9                	li	a1,10
     acc:	f74ff0ef          	jal	ra,240 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ad0:	46b2                	lw	a3,12(sp)
     ad2:	1838                	addi	a4,sp,56
     ad4:	8622                	mv	a2,s0
     ad6:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ad8:	1008                	addi	a0,sp,32
     ada:	e5cff0ef          	jal	ra,136 <mini_pad>
					len = puts(bf, len, buf);
     ade:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ae0:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     ae2:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     ae4:	4782                	lw	a5,0(sp)
     ae6:	9782                	jalr	a5
					break;
     ae8:	b5fd                	j	9d6 <mini_vpprintf+0x48>
						if(ch == 'u') {
     aea:	07500713          	li	a4,117
     aee:	00e69563          	bne	a3,a4,af8 <mini_vpprintf+0x16a>
	if (radix > 16)
     af2:	1018                	addi	a4,sp,32
     af4:	4685                	li	a3,1
     af6:	bfc1                	j	ac6 <mini_vpprintf+0x138>
     af8:	1018                	addi	a4,sp,32
     afa:	4681                	li	a3,0
     afc:	b7e9                	j	ac6 <mini_vpprintf+0x138>
					if(l) {
     afe:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     b00:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     b04:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     b08:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     b0a:	4685                	li	a3,1
     b0c:	1018                	addi	a4,sp,32
     b0e:	00163613          	seqz	a2,a2
     b12:	45c1                	li	a1,16
     b14:	f2cff0ef          	jal	ra,240 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     b18:	46b2                	lw	a3,12(sp)
     b1a:	85aa                	mv	a1,a0
     b1c:	1838                	addi	a4,sp,56
     b1e:	8622                	mv	a2,s0
     b20:	bf65                	j	ad8 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     b22:	00478713          	addi	a4,a5,4
     b26:	439c                	lw	a5,0(a5)
     b28:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     b2a:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     b2c:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     b30:	1838                	addi	a4,sp,56
     b32:	8622                	mv	a2,s0
     b34:	4585                	li	a1,1
     b36:	01f10513          	addi	a0,sp,31
     b3a:	b745                	j	ada <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     b3c:	4612                	lw	a2,4(sp)
     b3e:	853e                	mv	a0,a5
     b40:	b755                	j	ae4 <mini_vpprintf+0x156>

00000b42 <printf>:
{
     b42:	fdc10113          	addi	sp,sp,-36
     b46:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     b48:	862a                	mv	a2,a0
     b4a:	6505                	lui	a0,0x1
{
     b4c:	c82e                	sw	a1,16(sp)
     b4e:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     b50:	4581                	li	a1,0
	va_start( args, format );
     b52:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     b54:	88c50513          	addi	a0,a0,-1908 # 88c <__puts_uart>
{
     b58:	c606                	sw	ra,12(sp)
     b5a:	ce3a                	sw	a4,28(sp)
     b5c:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     b5e:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     b60:	353d                	jal	98e <mini_vpprintf>
}
     b62:	40b2                	lw	ra,12(sp)
     b64:	02410113          	addi	sp,sp,36
     b68:	8082                	ret

00000b6a <check_fs>:
{
     b6a:	1141                	addi	sp,sp,-16
     b6c:	c422                	sw	s0,8(sp)
     b6e:	c226                	sw	s1,4(sp)
     b70:	c606                	sw	ra,12(sp)
     b72:	842a                	mv	s0,a0
     b74:	c02e                	sw	a1,0(sp)
	for (BYTE i=1; i<=retries; i++) {
     b76:	4485                	li	s1,1
		if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
     b78:	4582                	lw	a1,0(sp)
     b7a:	4689                	li	a3,2
     b7c:	1fe00613          	li	a2,510
     b80:	8522                	mv	a0,s0
     b82:	941ff0ef          	jal	ra,4c2 <disk_readp>
     b86:	c501                	beqz	a0,b8e <check_fs+0x24>
			if (i == retries) return 3;
     b88:	470d                	li	a4,3
     b8a:	08e48763          	beq	s1,a4,c18 <check_fs+0xae>
		WORD sig = ld_dword(buf);
     b8e:	8522                	mv	a0,s0
     b90:	f6eff0ef          	jal	ra,2fe <ld_dword>
		if (sig == 0xAA55 || sig == 0xBA55) {
     b94:	777d                	lui	a4,0xfffff
     b96:	177d                	addi	a4,a4,-1
     b98:	8f69                	and	a4,a4,a0
     b9a:	0742                	slli	a4,a4,0x10
     b9c:	66ad                	lui	a3,0xb
     b9e:	8341                	srli	a4,a4,0x10
     ba0:	a5568693          	addi	a3,a3,-1451 # aa55 <lib_i2c.c.d894f163+0x19ee>
     ba4:	02d70163          	beq	a4,a3,bc6 <check_fs+0x5c>
			printf("check_fs_err: bad signature %08X\n\r", sig);
     ba8:	01051593          	slli	a1,a0,0x10
     bac:	6789                	lui	a5,0x2
     bae:	81c1                	srli	a1,a1,0x10
     bb0:	e3878513          	addi	a0,a5,-456 # 1e38 <I2C1_ER_IRQHandler+0x7e>
     bb4:	3779                	jal	b42 <printf>
			if (i == retries) return 2;
     bb6:	470d                	li	a4,3
     bb8:	06e48663          	beq	s1,a4,c24 <check_fs+0xba>
	for (BYTE i=1; i<=retries; i++) {
     bbc:	00148793          	addi	a5,s1,1
     bc0:	0ff7f493          	andi	s1,a5,255
     bc4:	bf55                	j	b78 <check_fs+0xe>
	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
     bc6:	4582                	lw	a1,0(sp)
     bc8:	4689                	li	a3,2
     bca:	03600613          	li	a2,54
     bce:	8522                	mv	a0,s0
     bd0:	8f3ff0ef          	jal	ra,4c2 <disk_readp>
     bd4:	ed09                	bnez	a0,bee <check_fs+0x84>
     bd6:	00144703          	lbu	a4,1(s0)
     bda:	00044783          	lbu	a5,0(s0)
     bde:	6691                	lui	a3,0x4
     be0:	0722                	slli	a4,a4,0x8
     be2:	8f5d                	or	a4,a4,a5
     be4:	14668693          	addi	a3,a3,326 # 4146 <ch32_mess.c.51b2a96d+0x3c2>
		return 0;
     be8:	4481                	li	s1,0
	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
     bea:	02d70763          	beq	a4,a3,c18 <check_fs+0xae>
	if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
     bee:	4582                	lw	a1,0(sp)
     bf0:	4689                	li	a3,2
     bf2:	05200613          	li	a2,82
     bf6:	8522                	mv	a0,s0
     bf8:	8cbff0ef          	jal	ra,4c2 <disk_readp>
	return 1;
     bfc:	4485                	li	s1,1
	if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
     bfe:	ed09                	bnez	a0,c18 <check_fs+0xae>
     c00:	00144783          	lbu	a5,1(s0)
     c04:	00044703          	lbu	a4,0(s0)
     c08:	07a2                	slli	a5,a5,0x8
     c0a:	8fd9                	or	a5,a5,a4
     c0c:	7771                	lui	a4,0xffffc
     c0e:	eba70713          	addi	a4,a4,-326 # ffffbeba <_eusrstack+0xdfffb6ba>
     c12:	97ba                	add	a5,a5,a4
			if (i == retries) return 3;
     c14:	00f034b3          	snez	s1,a5
}
     c18:	40b2                	lw	ra,12(sp)
     c1a:	4422                	lw	s0,8(sp)
     c1c:	8526                	mv	a0,s1
     c1e:	4492                	lw	s1,4(sp)
     c20:	0141                	addi	sp,sp,16
     c22:	8082                	ret
			if (i == retries) return 2;
     c24:	4489                	li	s1,2
     c26:	bfcd                	j	c18 <check_fs+0xae>

00000c28 <onI2C_SlaveWrite>:
#include "../Mess-libs/sd_card/mod_sdCard.h"

#define BUTTON_PIN 		PC0

void onI2C_SlaveWrite(uint8_t reg, uint8_t length) {
	printf("IM WRITEEN TO\n\r");
     c28:	6509                	lui	a0,0x2
     c2a:	e5c50513          	addi	a0,a0,-420 # 1e5c <I2C1_ER_IRQHandler+0xa2>
     c2e:	bf11                	j	b42 <printf>

00000c30 <onI2C_SlaveRead>:
}

void onI2C_SlaveRead(uint8_t reg) {
	printf("IM READEN FROM.\n\r");
     c30:	6509                	lui	a0,0x2
     c32:	e6c50513          	addi	a0,a0,-404 # 1e6c <I2C1_ER_IRQHandler+0xb2>
     c36:	b731                	j	b42 <printf>

00000c38 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     c38:	962a                	add	a2,a2,a0
     c3a:	87aa                	mv	a5,a0
     c3c:	00c79363          	bne	a5,a2,c42 <memset+0xa>
     c40:	8082                	ret
     c42:	00b78023          	sb	a1,0(a5)
     c46:	0785                	addi	a5,a5,1
     c48:	bfd5                	j	c3c <memset+0x4>

00000c4a <memcpy>:
{
     c4a:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     c4c:	00f61363          	bne	a2,a5,c52 <memcpy+0x8>
}
     c50:	8082                	ret
	for (; n; n--) *d++ = *s++;
     c52:	00f58733          	add	a4,a1,a5
     c56:	00074683          	lbu	a3,0(a4)
     c5a:	00f50733          	add	a4,a0,a5
     c5e:	0785                	addi	a5,a5,1
     c60:	00d70023          	sb	a3,0(a4)
     c64:	b7e5                	j	c4c <memcpy+0x2>

00000c66 <puts>:
{
     c66:	1151                	addi	sp,sp,-12
     c68:	c406                	sw	ra,8(sp)
     c6a:	c222                	sw	s0,4(sp)
     c6c:	c026                	sw	s1,0(sp)
     c6e:	84aa                	mv	s1,a0
	int sl = strlen( s );
     c70:	3331                	jal	97c <strlen>
     c72:	842a                	mv	s0,a0
	_write(0, s, sl );
     c74:	85aa                	mv	a1,a0
     c76:	8526                	mv	a0,s1
     c78:	360d                	jal	79a <_write.constprop.0>
	_write(0, "\n", 1 );
     c7a:	6509                	lui	a0,0x2
     c7c:	4585                	li	a1,1
     c7e:	e8050513          	addi	a0,a0,-384 # 1e80 <I2C1_ER_IRQHandler+0xc6>
     c82:	3e21                	jal	79a <_write.constprop.0>
}
     c84:	40a2                	lw	ra,8(sp)
     c86:	00140513          	addi	a0,s0,1
     c8a:	4412                	lw	s0,4(sp)
     c8c:	4482                	lw	s1,0(sp)
     c8e:	0131                	addi	sp,sp,12
     c90:	8082                	ret

00000c92 <putchar>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c92:	e00007b7          	lui	a5,0xe0000
     c96:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
     c9a:	0c000713          	li	a4,192
     c9e:	0c07f793          	andi	a5,a5,192
     ca2:	04e78c63          	beq	a5,a4,cfa <putchar+0x68>
{
     ca6:	1151                	addi	sp,sp,-12
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     ca8:	001007b7          	lui	a5,0x100
{
     cac:	c222                	sw	s0,4(sp)
     cae:	c406                	sw	ra,8(sp)
     cb0:	842a                	mv	s0,a0
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     cb2:	0785                	addi	a5,a5,1
	while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     cb4:	e00006b7          	lui	a3,0xe0000
     cb8:	0f46a703          	lw	a4,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
     cbc:	0f468613          	addi	a2,a3,244
     cc0:	08077593          	andi	a1,a4,128
     cc4:	e185                	bnez	a1,ce4 <putchar+0x52>
	if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     cc6:	c311                	beqz	a4,cca <putchar+0x38>
     cc8:	34e1                	jal	790 <internal_handle_input.constprop.0>
	*DMDATA0 = 0x85 | ((const char)c<<8);
     cca:	6541                	lui	a0,0x10
     ccc:	157d                	addi	a0,a0,-1
     cce:	00841793          	slli	a5,s0,0x8
     cd2:	8fe9                	and	a5,a5,a0
     cd4:	0857e793          	ori	a5,a5,133
     cd8:	e0000737          	lui	a4,0xe0000
     cdc:	0ef72a23          	sw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
	return 1;
     ce0:	4505                	li	a0,1
     ce2:	a801                	j	cf2 <putchar+0x60>
		if( timeout-- == 0 )
     ce4:	17fd                	addi	a5,a5,-1
     ce6:	fbe9                	bnez	a5,cb8 <putchar+0x26>
			*DMDATA0 |= 0xc0;
     ce8:	421c                	lw	a5,0(a2)
     cea:	4501                	li	a0,0
     cec:	0c07e793          	ori	a5,a5,192
     cf0:	c21c                	sw	a5,0(a2)
}
     cf2:	40a2                	lw	ra,8(sp)
     cf4:	4412                	lw	s0,4(sp)
     cf6:	0131                	addi	sp,sp,12
     cf8:	8082                	ret
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     cfa:	4501                	li	a0,0
}
     cfc:	8082                	ret

00000cfe <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
     cfe:	400227b7          	lui	a5,0x40022
     d02:	4705                	li	a4,1
     d04:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
     d06:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     d0a:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
     d0e:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     d12:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x107701a>
     d16:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
     d18:	009f0737          	lui	a4,0x9f0
     d1c:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
     d1e:	020006b7          	lui	a3,0x2000
     d22:	40021737          	lui	a4,0x40021
     d26:	431c                	lw	a5,0(a4)
     d28:	8ff5                	and	a5,a5,a3
     d2a:	dff5                	beqz	a5,d26 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     d2c:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     d2e:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     d32:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
     d34:	0027e793          	ori	a5,a5,2
     d38:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     d3a:	4721                	li	a4,8
     d3c:	42dc                	lw	a5,4(a3)
     d3e:	8bb1                	andi	a5,a5,12
     d40:	fee79ee3          	bne	a5,a4,d3c <SystemInit+0x3e>
	*DMDATA1 = 0x00;
     d44:	e00007b7          	lui	a5,0xe0000
     d48:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
     d4c:	08000713          	li	a4,128
     d50:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     d54:	8082                	ret

00000d56 <main>:

void encoder_onChanged(Encoder_t *model) {
	printf("Encoder: %d\n", model->last_count);
}

int main() {
     d56:	7175                	addi	sp,sp,-144
     d58:	c706                	sw	ra,140(sp)
     d5a:	c522                	sw	s0,136(sp)
     d5c:	c326                	sw	s1,132(sp)
	uint32_t counter = 0;
	uint32_t ledc_time = 0;
	uint32_t sec_time = 0;
	uint32_t time_ref = 0;

	SystemInit();
     d5e:	3745                	jal	cfe <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
     d60:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     d64:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
     d66:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     d6a:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x2b18>
     d6e:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
     d70:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
     d74:	c9018613          	addi	a2,gp,-880 # 2000008c <systick_millis>
     d78:	00062023          	sw	zero,0(a2)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
     d7c:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     d7e:	e000e437          	lui	s0,0xe000e
	systick_init();			//! required for millis()

	funGpioInitAll();
     d82:	400214b7          	lui	s1,0x40021
     d86:	00776713          	ori	a4,a4,7
     d8a:	c398                	sw	a4,0(a5)
     d8c:	6785                	lui	a5,0x1
     d8e:	10f42023          	sw	a5,256(s0) # e000e100 <_eusrstack+0xc000d900>
     d92:	4c9c                	lw	a5,24(s1)
	Delay_Ms(100);
     d94:	00494537          	lui	a0,0x494
     d98:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.d894f163+0x48ad99>
	funGpioInitAll();
     d9c:	0357e793          	ori	a5,a5,53
     da0:	cc9c                	sw	a5,24(s1)
	Delay_Ms(100);
     da2:	c88ff0ef          	jal	ra,22a <DelaySysTick>
}

void button_setup(Button_t *model) {
    if (model->pin == 0xFF) return; 

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
     da6:	40011737          	lui	a4,0x40011
     daa:	431c                	lw	a5,0(a4)
    funDigitalWrite(model->pin, 1);
     dac:	4585                	li	a1,1
    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
     dae:	9bc1                	andi	a5,a5,-16
     db0:	0087e793          	ori	a5,a5,8
     db4:	c31c                	sw	a5,0(a4)
    funDigitalWrite(model->pin, 1);
     db6:	cb0c                	sw	a1,16(a4)
    model->debounce_time = millis();
     db8:	c9018613          	addi	a2,gp,-880 # 2000008c <systick_millis>
     dbc:	421c                	lw	a5,0(a2)
     dbe:	c03e                	sw	a5,0(sp)
    model->release_time = millis();
     dc0:	421c                	lw	a5,0(a2)
     dc2:	c63e                	sw	a5,12(sp)
	button_setup(&button1);

	//# I2C1: uses PC1 & PC2
	// modI2C_setup();

	uint8_t slave_mode = funDigitalRead(BUTTON_PIN);
     dc4:	471c                	lw	a5,8(a4)

	//# Hold BUTTON_PIN low to enter slave mode
	if (slave_mode == 0) {
     dc6:	c9018713          	addi	a4,gp,-880 # 2000008c <systick_millis>
     dca:	c43a                	sw	a4,8(sp)
     dcc:	8b85                	andi	a5,a5,1
     dce:	0e079c63          	bnez	a5,ec6 <main+0x170>
		printf("I2C Slave mode\n");
     dd2:	6509                	lui	a0,0x2
     dd4:	e9450513          	addi	a0,a0,-364 # 1e94 <I2C1_ER_IRQHandler+0xda>
     dd8:	3579                	jal	c66 <puts>
} i2c_slave_state;

void SetupI2CSlave(uint8_t address, volatile uint8_t* registers, uint8_t size,
    i2c_write_callback_t write_callback, i2c_read_callback_t read_callback, bool read_only
) {
    i2c_slave_state.first_write = 1;
     dda:	d2418793          	addi	a5,gp,-732 # 20000120 <i2c_slave_state>
    i2c_slave_state.offset = 0;
    i2c_slave_state.position = 0;
    i2c_slave_state.registers1 = registers;
     dde:	c0418713          	addi	a4,gp,-1020 # 20000000 <i2c_registers>
     de2:	c3d8                	sw	a4,4(a5)
    i2c_slave_state.size1 = size;
    i2c_slave_state.registers2 = NULL;
    i2c_slave_state.size2 = 0;
    i2c_slave_state.write_callback1 = write_callback;
     de4:	6705                	lui	a4,0x1
     de6:	c2870713          	addi	a4,a4,-984 # c28 <onI2C_SlaveWrite>
     dea:	cbd8                	sw	a4,20(a5)
    i2c_slave_state.size1 = size;
     dec:	02000613          	li	a2,32
    i2c_slave_state.first_write = 1;
     df0:	4585                	li	a1,1
    i2c_slave_state.read_callback1 = read_callback;
     df2:	6705                	lui	a4,0x1
    i2c_slave_state.registers2 = NULL;
     df4:	0007a623          	sw	zero,12(a5) # 100c <main+0x2b6>
    i2c_slave_state.first_write = 1;
     df8:	00b79023          	sh	a1,0(a5)
    i2c_slave_state.position = 0;
     dfc:	00078123          	sb	zero,2(a5)
    i2c_slave_state.size1 = size;
     e00:	00c78423          	sb	a2,8(a5)
    i2c_slave_state.size2 = 0;
     e04:	00078823          	sb	zero,16(a5)
    i2c_slave_state.read_callback1 = read_callback;
     e08:	c3070713          	addi	a4,a4,-976 # c30 <onI2C_SlaveRead>
     e0c:	cf98                	sw	a4,24(a5)
    i2c_slave_state.write_callback2 = NULL;
    i2c_slave_state.read_callback2 = NULL;
    i2c_slave_state.read_only2 = false;

    // Enable I2C1
    RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     e0e:	4cd8                	lw	a4,28(s1)
     e10:	002006b7          	lui	a3,0x200
    i2c_slave_state.read_only1 = read_only;
     e14:	00078e23          	sb	zero,28(a5)
    i2c_slave_state.write_callback2 = NULL;
     e18:	0207a023          	sw	zero,32(a5)
    i2c_slave_state.read_callback2 = NULL;
     e1c:	0207a223          	sw	zero,36(a5)
    i2c_slave_state.read_only2 = false;
     e20:	02078423          	sb	zero,40(a5)
    RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     e24:	8f55                	or	a4,a4,a3
     e26:	ccd8                	sw	a4,28(s1)

    // Reset I2C1 to init all regs
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
     e28:	489c                	lw	a5,16(s1)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     e2a:	ffe00737          	lui	a4,0xffe00
     e2e:	177d                	addi	a4,a4,-1
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
     e30:	8fd5                	or	a5,a5,a3
     e32:	c89c                	sw	a5,16(s1)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     e34:	489c                	lw	a5,16(s1)

    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
     e36:	65a1                	lui	a1,0x8
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     e38:	8ff9                	and	a5,a5,a4
     e3a:	c89c                	sw	a5,16(s1)
    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
     e3c:	400057b7          	lui	a5,0x40005
     e40:	4007d683          	lhu	a3,1024(a5) # 40005400 <_eusrstack+0x20004c00>
     e44:	06c2                	slli	a3,a3,0x10
     e46:	82c1                	srli	a3,a3,0x10
     e48:	8ecd                	or	a3,a3,a1
     e4a:	40d79023          	sh	a3,1024(a5)
    I2C1->CTLR1 &= ~I2C_CTLR1_SWRST;
     e4e:	4007d683          	lhu	a3,1024(a5)
     e52:	06c6                	slli	a3,a3,0x11
     e54:	82c5                	srli	a3,a3,0x11
     e56:	40d79023          	sh	a3,1024(a5)

    // Set module clock frequency
    uint32_t prerate = 2000000; // I2C Logic clock rate, must be higher than the bus clock rate
    I2C1->CTLR2 |= (FUNCONF_SYSTEM_CORE_CLOCK/prerate) & I2C_CTLR2_FREQ;
     e5a:	4047d683          	lhu	a3,1028(a5)
     e5e:	06c2                	slli	a3,a3,0x10
     e60:	82c1                	srli	a3,a3,0x10
     e62:	0186e693          	ori	a3,a3,24
     e66:	40d79223          	sh	a3,1028(a5)

    // Enable interrupts
    I2C1->CTLR2 |= I2C_CTLR2_ITBUFEN | I2C_CTLR2_ITEVTEN | I2C_CTLR2_ITERREN;
     e6a:	4047d683          	lhu	a3,1028(a5)
     e6e:	06c2                	slli	a3,a3,0x10
     e70:	82c1                	srli	a3,a3,0x10
     e72:	7006e693          	ori	a3,a3,1792
     e76:	40d79223          	sh	a3,1028(a5)
     e7a:	400006b7          	lui	a3,0x40000
     e7e:	10d42023          	sw	a3,256(s0)
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
     e82:	40c40f23          	sb	a2,1054(s0)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e86:	800006b7          	lui	a3,0x80000
     e8a:	10d42023          	sw	a3,256(s0)
    NVIC_EnableIRQ(I2C1_ER_IRQn); // Error interrupt
    NVIC_SetPriority(I2C1_ER_IRQn, 2 << 4);

    // Set clock configuration
    uint32_t clockrate = 1000000; // I2C Bus clock rate, must be lower than the logic clock rate
    I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(3*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_FS; // Fast mode 33% duty cycle
     e8e:	76e1                	lui	a3,0xffff8
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
     e90:	40c40fa3          	sb	a2,1055(s0)
     e94:	06c1                	addi	a3,a3,16
     e96:	40d79e23          	sh	a3,1052(a5)
    //I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(25*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_DUTY | I2C_CKCFGR_FS; // Fast mode 36% duty cycle
    //I2C1->CKCFGR = (FUNCONF_SYSTEM_CORE_CLOCK/(2*clockrate))&I2C_CKCFGR_CCR; // Standard mode good to 100kHz

    // Set I2C address
    I2C1->OADDR1 = address << 1;
     e9a:	0ee00693          	li	a3,238
     e9e:	40d79423          	sh	a3,1032(a5)
    I2C1->OADDR2 = 0;
     ea2:	40079623          	sh	zero,1036(a5)

    // Enable I2C
    I2C1->CTLR1 |= I2C_CTLR1_PE;
     ea6:	4007d703          	lhu	a4,1024(a5)
     eaa:	0742                	slli	a4,a4,0x10
     eac:	8341                	srli	a4,a4,0x10
     eae:	00176713          	ori	a4,a4,1
     eb2:	40e79023          	sh	a4,1024(a5)

    // Acknowledge bytes when they are received
    I2C1->CTLR1 |= I2C_CTLR1_ACK;
     eb6:	4007d703          	lhu	a4,1024(a5)
     eba:	0742                	slli	a4,a4,0x10
     ebc:	8341                	srli	a4,a4,0x10
     ebe:	40076713          	ori	a4,a4,1024
     ec2:	40e79023          	sh	a4,1024(a5)
}

static void uart_setup(void)
{
	// Enable UART and GPIOD
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_USART1;
     ec6:	40021637          	lui	a2,0x40021
     eca:	4e1c                	lw	a5,24(a2)
     ecc:	6711                	lui	a4,0x4
     ece:	02070713          	addi	a4,a4,32 # 4020 <ch32_mess.c.51b2a96d+0x29c>
     ed2:	8fd9                	or	a5,a5,a4
     ed4:	ce1c                	sw	a5,24(a2)

	// Push-Pull, 10MHz Output on D5, with AutoFunction
	GPIOD->CFGLR = (GPIOD->CFGLR & ~(0xF<<(4*5))) |
     ed6:	40011437          	lui	s0,0x40011
     eda:	40042783          	lw	a5,1024(s0) # 40011400 <_eusrstack+0x20010c00>
     ede:	ff100737          	lui	a4,0xff100
     ee2:	177d                	addi	a4,a4,-1
     ee4:	8ff9                	and	a5,a5,a4
     ee6:	009006b7          	lui	a3,0x900
     eea:	8fd5                	or	a5,a5,a3
			((GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*5));

	// Setup UART for Tx 8n1
	USART1->CTLR1 = USART_WordLength_8b | USART_Parity_No | USART_Mode_Tx;
     eec:	400146b7          	lui	a3,0x40014
	GPIOD->CFGLR = (GPIOD->CFGLR & ~(0xF<<(4*5))) |
     ef0:	40f42023          	sw	a5,1024(s0)
	USART1->CTLR1 = USART_WordLength_8b | USART_Parity_No | USART_Mode_Tx;
     ef4:	45a1                	li	a1,8
     ef6:	80068793          	addi	a5,a3,-2048 # 40013800 <_eusrstack+0x20013000>
     efa:	c7cc                	sw	a1,12(a5)
	USART1->CTLR2 = USART_StopBits_1;
     efc:	0007a823          	sw	zero,16(a5)
	// Enable Tx DMA event
	USART1->CTLR3 = USART_DMAReq_Tx;
     f00:	08000593          	li	a1,128
     f04:	cbcc                	sw	a1,20(a5)

	// Set baud rate and enable UART
	USART1->BRR = ((FUNCONF_SYSTEM_CORE_CLOCK) + (UART_BR)/2) / (UART_BR);
     f06:	1a100593          	li	a1,417
     f0a:	c78c                	sw	a1,8(a5)
	USART1->CTLR1 |= CTLR1_UE_Set;
     f0c:	47cc                	lw	a1,12(a5)
     f0e:	6509                	lui	a0,0x2

	// Disable channel just in case there is a transfer in progress
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;

	// USART1 TX uses DMA channel 4
	DMA1_Channel4->PADDR = (uint32_t)&USART1->DATAR;
     f10:	80468693          	addi	a3,a3,-2044
	USART1->CTLR1 |= CTLR1_UE_Set;
     f14:	8dc9                	or	a1,a1,a0
     f16:	c7cc                	sw	a1,12(a5)
	RCC->AHBPCENR = RCC_AHBPeriph_SRAM | RCC_AHBPeriph_DMA1;
     f18:	4795                	li	a5,5
     f1a:	ca5c                	sw	a5,20(a2)
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
     f1c:	400207b7          	lui	a5,0x40020
     f20:	43ec                	lw	a1,68(a5)
    SPI1->CTLR1 = 0;
     f22:	400134b7          	lui	s1,0x40013
    SPI_set_prescaler(0);
     f26:	4501                	li	a0,0
     f28:	99f9                	andi	a1,a1,-2
     f2a:	c3ec                	sw	a1,68(a5)
	DMA1_Channel4->PADDR = (uint32_t)&USART1->DATAR;
     f2c:	c7f4                	sw	a3,76(a5)
	// DIR: 1 (read from memory)
	// TEIE: 0 (no tx error interrupt)
	// HTIE: 0 (no half tx interrupt)
	// TCIE: 1 (transmission complete interrupt enable)
	// EN: 0 (do not enable DMA yet)
	DMA1_Channel4->CFGR = DMA_CFGR1_MINC | DMA_CFGR1_DIR | DMA_CFGR1_TCIE;
     f2e:	09200693          	li	a3,146
     f32:	c3f4                	sw	a3,68(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f34:	e000e7b7          	lui	a5,0xe000e
     f38:	020006b7          	lui	a3,0x2000
     f3c:	10d7a023          	sw	a3,256(a5) # e000e100 <_eusrstack+0xc000d900>
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
     f40:	4e1c                	lw	a5,24(a2)
     f42:	6685                	lui	a3,0x1
     f44:	06c1                	addi	a3,a3,16
     f46:	8fd5                	or	a5,a5,a3
     f48:	ce1c                	sw	a5,24(a2)
    SPI1->CTLR1 = 0;
     f4a:	00049023          	sh	zero,0(s1) # 40013000 <_eusrstack+0x20012800>
    SPI_set_prescaler(0);
     f4e:	c72ff0ef          	jal	ra,3c0 <SPI_set_prescaler>
    SPI1->CTLR1 |= (SPI_CPOL_Low | SPI_CPHA_1Edge);
     f52:	0004d783          	lhu	a5,0(s1)
    GPIOC->CFGLR &= ~(0xf << (4 * 5));
     f56:	ff100737          	lui	a4,0xff100
     f5a:	177d                	addi	a4,a4,-1
    SPI1->CTLR1 |= (SPI_CPOL_Low | SPI_CPHA_1Edge);
     f5c:	07c2                	slli	a5,a5,0x10
     f5e:	83c1                	srli	a5,a5,0x10
     f60:	00f49023          	sh	a5,0(s1)
    SPI1->CTLR1 |= SPI_NSS_Soft; // SSM NSS software control mode
     f64:	0004d783          	lhu	a5,0(s1)
FATFS fatfs; /* File system object */
UINT br;
FRESULT rc;

FRESULT mod_sdCard_write(const char filename[], const char data[]) {
	printf("\nMounting volume.\n\r");
     f68:	6509                	lui	a0,0x2
     f6a:	ea450513          	addi	a0,a0,-348 # 1ea4 <I2C1_ER_IRQHandler+0xea>
     f6e:	07c2                	slli	a5,a5,0x10
     f70:	83c1                	srli	a5,a5,0x10
     f72:	2007e793          	ori	a5,a5,512
     f76:	00f49023          	sh	a5,0(s1)
    GPIOC->CFGLR &= ~(0xf << (4 * 5));
     f7a:	401c                	lw	a5,0(s0)
     f7c:	8f7d                	and	a4,a4,a5
     f7e:	c018                	sw	a4,0(s0)
    GPIOC->CFGLR |= (GPIO_Speed_50MHz | GPIO_CNF_OUT_PP_AF) << (4 * 5);
     f80:	401c                	lw	a5,0(s0)
     f82:	00b00737          	lui	a4,0xb00
     f86:	8fd9                	or	a5,a5,a4
     f88:	c01c                	sw	a5,0(s0)
    SPI1->CTLR1 |= SPI_Mode_Master;
     f8a:	0004d783          	lhu	a5,0(s1)
    GPIOC->CFGLR &= ~(0xf << (4 * 6));
     f8e:	f1000737          	lui	a4,0xf1000
     f92:	177d                	addi	a4,a4,-1
    SPI1->CTLR1 |= SPI_Mode_Master;
     f94:	07c2                	slli	a5,a5,0x10
     f96:	83c1                	srli	a5,a5,0x10
     f98:	1047e793          	ori	a5,a5,260
     f9c:	00f49023          	sh	a5,0(s1)
    SPI1->CTLR1 |= SPI_Direction_2Lines_FullDuplex;
     fa0:	0004d783          	lhu	a5,0(s1)
     fa4:	07c2                	slli	a5,a5,0x10
     fa6:	83c1                	srli	a5,a5,0x10
     fa8:	00f49023          	sh	a5,0(s1)
    GPIOC->CFGLR &= ~(0xf << (4 * 6));
     fac:	401c                	lw	a5,0(s0)
     fae:	8ff9                	and	a5,a5,a4
     fb0:	c01c                	sw	a5,0(s0)
    GPIOC->CFGLR |= (GPIO_Speed_50MHz | GPIO_CNF_OUT_PP_AF) << (4 * 6);
     fb2:	401c                	lw	a5,0(s0)
     fb4:	0b000737          	lui	a4,0xb000
     fb8:	8fd9                	or	a5,a5,a4
     fba:	c01c                	sw	a5,0(s0)
    GPIOC->CFGLR &= ~(0xf << (4 * 7));
     fbc:	401c                	lw	a5,0(s0)
    GPIOC->CFGLR |= GPIO_CNF_IN_FLOATING << (4 * 7);
     fbe:	40000737          	lui	a4,0x40000
    GPIOC->CFGLR &= ~(0xf << (4 * 7));
     fc2:	0792                	slli	a5,a5,0x4
     fc4:	8391                	srli	a5,a5,0x4
     fc6:	c01c                	sw	a5,0(s0)
    GPIOC->CFGLR |= GPIO_CNF_IN_FLOATING << (4 * 7);
     fc8:	401c                	lw	a5,0(s0)
     fca:	8fd9                	or	a5,a5,a4
     fcc:	c01c                	sw	a5,0(s0)
	SPI1->CTLR1 &= ~(SPI_CTLR1_DFF); // DFF 16bit data-length enable, writable only when SPE is 0
     fce:	0004d783          	lhu	a5,0(s1)
     fd2:	777d                	lui	a4,0xfffff
     fd4:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_eusrstack+0xdfffefff>
     fd8:	07c2                	slli	a5,a5,0x10
     fda:	83c1                	srli	a5,a5,0x10
     fdc:	8ff9                	and	a5,a5,a4
     fde:	00f49023          	sh	a5,0(s1)
    SPI1->CTLR1 |= SPI_CTLR1_SPE;
     fe2:	0004d783          	lhu	a5,0(s1)
     fe6:	07c2                	slli	a5,a5,0x10
     fe8:	83c1                	srli	a5,a5,0x10
     fea:	0407e793          	ori	a5,a5,64
     fee:	00f49023          	sh	a5,0(s1)
     ff2:	3e81                	jal	b42 <printf>
	SPI_set_prescaler(7);
     ff4:	451d                	li	a0,7
	FatFs = 0;
     ff6:	c601aa23          	sw	zero,-908(gp) # 20000070 <FatFs>
     ffa:	bc6ff0ef          	jal	ra,3c0 <SPI_set_prescaler>
	skip_mmc(10);			/* Dummy clocks */
     ffe:	4529                	li	a0,10
    1000:	c1cff0ef          	jal	ra,41c <skip_mmc>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1004:	4581                	li	a1,0
    1006:	04000513          	li	a0,64
    100a:	c2cff0ef          	jal	ra,436 <send_cmd>
    100e:	c7418713          	addi	a4,gp,-908 # 20000070 <FatFs>
    1012:	4785                	li	a5,1
    1014:	c83a                	sw	a4,16(sp)
    1016:	842a                	mv	s0,a0
    1018:	02f50763          	beq	a0,a5,1046 <main+0x2f0>
	ty = 0;
    101c:	4401                	li	s0,0
	CardType = ty;
    101e:	c6818823          	sb	s0,-912(gp) # 2000006c <CardType>
	rcvr_mmc();
    1022:	bf4ff0ef          	jal	ra,416 <rcvr_mmc>
	SPI_set_prescaler(0);
    1026:	4501                	li	a0,0
    1028:	b98ff0ef          	jal	ra,3c0 <SPI_set_prescaler>
	return ty ? 0 : STA_NOINIT;
    102c:	c8c18793          	addi	a5,gp,-884 # 20000088 <rc>
    1030:	c23e                	sw	a5,4(sp)
	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
    1032:	e45d                	bnez	s0,10e0 <main+0x38a>
	rc = pf_mount(&fatfs);
    1034:	4712                	lw	a4,4(sp)
    1036:	4789                	li	a5,2
		return FR_NOT_READY;
    1038:	4489                	li	s1,2
    103a:	c31c                	sw	a5,0(a4)
	if (rc == 0) {
		Delay_Ms(200);
		rc = mod_sdCard_loadFile("testfile.txt",0);
		printf("read result: %u\n\r", rc);
	} else {
		printf("write error: %u\n\r", rc);
    103c:	6509                	lui	a0,0x2
    103e:	85a6                	mv	a1,s1
    1040:	f6c50513          	addi	a0,a0,-148 # 1f6c <I2C1_ER_IRQHandler+0x1b2>
    1044:	aec5                	j	1434 <main+0x6de>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1046:	1aa00593          	li	a1,426
    104a:	04800513          	li	a0,72
    104e:	be8ff0ef          	jal	ra,436 <send_cmd>
    1052:	04851a63          	bne	a0,s0,10a6 <main+0x350>
    1056:	4401                	li	s0,0
			for (n = 0; n < 4; n++) buf[n] = rcvr_mmc();	/* Get trailing return value of R7 resp */
    1058:	bbeff0ef          	jal	ra,416 <rcvr_mmc>
    105c:	00dc                	addi	a5,sp,68
    105e:	97a2                	add	a5,a5,s0
    1060:	00a78023          	sb	a0,0(a5)
    1064:	0405                	addi	s0,s0,1
    1066:	4791                	li	a5,4
    1068:	fef418e3          	bne	s0,a5,1058 <main+0x302>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    106c:	04614703          	lbu	a4,70(sp)
    1070:	4785                	li	a5,1
    1072:	faf715e3          	bne	a4,a5,101c <main+0x2c6>
    1076:	04714703          	lbu	a4,71(sp)
    107a:	0aa00793          	li	a5,170
    107e:	f8f71fe3          	bne	a4,a5,101c <main+0x2c6>
    1082:	3e800413          	li	s0,1000
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    1086:	400005b7          	lui	a1,0x40000
    108a:	0e900513          	li	a0,233
    108e:	ba8ff0ef          	jal	ra,436 <send_cmd>
    1092:	080505e3          	beqz	a0,191c <main+0xbc6>
					DLY_US(1000);
    1096:	6531                	lui	a0,0xc
    1098:	b8050513          	addi	a0,a0,-1152 # bb80 <lib_i2c.c.d894f163+0x2b19>
				for (tmr = 1000; tmr; tmr--) {				/* Wait for leaving idle state (ACMD41 with HCS bit) */
    109c:	147d                	addi	s0,s0,-1
					DLY_US(1000);
    109e:	98cff0ef          	jal	ra,22a <DelaySysTick>
				for (tmr = 1000; tmr; tmr--) {				/* Wait for leaving idle state (ACMD41 with HCS bit) */
    10a2:	f075                	bnez	s0,1086 <main+0x330>
    10a4:	bfa5                	j	101c <main+0x2c6>
			if (send_cmd(ACMD41, 0) <= 1) 	{
    10a6:	4581                	li	a1,0
    10a8:	0e900513          	li	a0,233
    10ac:	b8aff0ef          	jal	ra,436 <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    10b0:	04100793          	li	a5,65
			if (send_cmd(ACMD41, 0) <= 1) 	{
    10b4:	00a46563          	bltu	s0,a0,10be <main+0x368>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    10b8:	4409                	li	s0,2
    10ba:	0e900793          	li	a5,233
    10be:	c23e                	sw	a5,4(sp)
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    10c0:	3e800493          	li	s1,1000
				if (send_cmd(cmd, 0) == 0) break;
    10c4:	4512                	lw	a0,4(sp)
    10c6:	4581                	li	a1,0
    10c8:	b6eff0ef          	jal	ra,436 <send_cmd>
    10cc:	080504e3          	beqz	a0,1954 <main+0xbfe>
				DLY_US(1000);
    10d0:	6531                	lui	a0,0xc
    10d2:	b8050513          	addi	a0,a0,-1152 # bb80 <lib_i2c.c.d894f163+0x2b19>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    10d6:	14fd                	addi	s1,s1,-1
				DLY_US(1000);
    10d8:	952ff0ef          	jal	ra,22a <DelaySysTick>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    10dc:	f4e5                	bnez	s1,10c4 <main+0x36e>
    10de:	bf3d                	j	101c <main+0x2c6>
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    10e0:	4581                	li	a1,0
    10e2:	00c8                	addi	a0,sp,68
    10e4:	3459                	jal	b6a <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    10e6:	4785                	li	a5,1
	bsect = 0;
    10e8:	4401                	li	s0,0
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    10ea:	02f51e63          	bne	a0,a5,1126 <main+0x3d0>
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    10ee:	46c1                	li	a3,16
    10f0:	1be00613          	li	a2,446
    10f4:	4581                	li	a1,0
    10f6:	00c8                	addi	a0,sp,68
    10f8:	bcaff0ef          	jal	ra,4c2 <disk_readp>
    10fc:	c511                	beqz	a0,1108 <main+0x3b2>
    10fe:	4712                	lw	a4,4(sp)
    1100:	4785                	li	a5,1
	if (fmt == 3) return FR_DISK_ERR;
    1102:	4485                	li	s1,1
    1104:	c31c                	sw	a5,0(a4)
    1106:	bf1d                	j	103c <main+0x2e6>
			if (buf[4]) {					/* Is the partition existing? */
    1108:	04814783          	lbu	a5,72(sp)
    110c:	e791                	bnez	a5,1118 <main+0x3c2>
    110e:	4712                	lw	a4,4(sp)
    1110:	4799                	li	a5,6
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1112:	4499                	li	s1,6
    1114:	c31c                	sw	a5,0(a4)
    1116:	b71d                	j	103c <main+0x2e6>
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
    1118:	00e8                	addi	a0,sp,76
    111a:	9e4ff0ef          	jal	ra,2fe <ld_dword>
    111e:	842a                	mv	s0,a0
				fmt = check_fs(buf, bsect);	/* Check the partition */
    1120:	85aa                	mv	a1,a0
    1122:	00c8                	addi	a0,sp,68
    1124:	3499                	jal	b6a <check_fs>
	if (fmt == 3) return FR_DISK_ERR;
    1126:	478d                	li	a5,3
    1128:	fcf50be3          	beq	a0,a5,10fe <main+0x3a8>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    112c:	f16d                	bnez	a0,110e <main+0x3b8>
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
    112e:	02400693          	li	a3,36
    1132:	4635                	li	a2,13
    1134:	85a2                	mv	a1,s0
    1136:	00c8                	addi	a0,sp,68
    1138:	b8aff0ef          	jal	ra,4c2 <disk_readp>
    113c:	f169                	bnez	a0,10fe <main+0x3a8>
	fsize = ld_word(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    113e:	04e14583          	lbu	a1,78(sp)
    1142:	04d14503          	lbu	a0,77(sp)
    1146:	05a2                	slli	a1,a1,0x8
    1148:	8dc9                	or	a1,a1,a0
	if (!fsize) fsize = ld_dword(buf+BPB_FATSz32-13);
    114a:	e591                	bnez	a1,1156 <main+0x400>
    114c:	05b10513          	addi	a0,sp,91
    1150:	9aeff0ef          	jal	ra,2fe <ld_dword>
    1154:	85aa                	mv	a1,a0
	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1156:	04714503          	lbu	a0,71(sp)
    115a:	f47fe0ef          	jal	ra,a0 <__mulsi3>
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    115e:	04614703          	lbu	a4,70(sp)
	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1162:	ca2a                	sw	a0,20(sp)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1164:	04514503          	lbu	a0,69(sp)
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    1168:	04414583          	lbu	a1,68(sp)
    116c:	04815483          	lhu	s1,72(sp)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1170:	0722                	slli	a4,a4,0x8
    1172:	8f49                	or	a4,a4,a0
	tsect = ld_word(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    1174:	04a15503          	lhu	a0,74(sp)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1178:	cf818693          	addi	a3,gp,-776 # 200000f4 <fatfs>
    117c:	943a                	add	s0,s0,a4
    117e:	c6c0                	sw	s0,12(a3)
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    1180:	00b68123          	sb	a1,2(a3) # 1002 <main+0x2ac>
	fs->n_rootdir = ld_word(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    1184:	00969223          	sh	s1,4(a3)
	if (!tsect) tsect = ld_dword(buf+BPB_TotSec32-13);
    1188:	e909                	bnez	a0,119a <main+0x444>
    118a:	05710513          	addi	a0,sp,87
    118e:	ce2e                	sw	a1,28(sp)
    1190:	cc3a                	sw	a4,24(sp)
    1192:	96cff0ef          	jal	ra,2fe <ld_dword>
    1196:	45f2                	lw	a1,28(sp)
    1198:	4762                	lw	a4,24(sp)
		- ld_word(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    119a:	47d2                	lw	a5,20(sp)
    119c:	8091                	srli	s1,s1,0x4
    119e:	9726                	add	a4,a4,s1
    11a0:	973e                	add	a4,a4,a5
		) / fs->csize + 2;
    11a2:	8d19                	sub	a0,a0,a4
    11a4:	f1dfe0ef          	jal	ra,c0 <__hidden___udivsi3>
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    11a8:	777d                	lui	a4,0xfffff
	mclst = (tsect						/* Last cluster# + 1 */
    11aa:	00250693          	addi	a3,a0,2
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    11ae:	0729                	addi	a4,a4,10
	fs->n_fatent = (CLUST)mclst;
    11b0:	cf818793          	addi	a5,gp,-776 # 200000f4 <fatfs>
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    11b4:	663d                	lui	a2,0xf
    11b6:	953a                	add	a0,a0,a4
	fs->n_fatent = (CLUST)mclst;
    11b8:	c794                	sw	a3,8(a5)
    11ba:	6741                	lui	a4,0x10
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    11bc:	1679                	addi	a2,a2,-2
    11be:	1759                	addi	a4,a4,-10
    11c0:	74a67563          	bgeu	a2,a0,190a <main+0xbb4>
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
    11c4:	f4d775e3          	bgeu	a4,a3,110e <main+0x3b8>
	fs->fs_type = fmt;
    11c8:	470d                	li	a4,3
		fs->dirbase = ld_dword(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    11ca:	06310513          	addi	a0,sp,99
	fs->fs_type = fmt;
    11ce:	00e78023          	sb	a4,0(a5)
		fs->dirbase = ld_dword(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    11d2:	92cff0ef          	jal	ra,2fe <ld_dword>
    11d6:	cf818793          	addi	a5,gp,-776 # 200000f4 <fatfs>
    11da:	cb88                	sw	a0,16(a5)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    11dc:	4752                	lw	a4,20(sp)
    11de:	9426                	add	s0,s0,s1
	fs->flag = 0;
    11e0:	000780a3          	sb	zero,1(a5)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    11e4:	00e40533          	add	a0,s0,a4
	FatFs = fs;
    11e8:	4742                	lw	a4,16(sp)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    11ea:	cbc8                	sw	a0,20(a5)
	if (rc) return rc;

	printf("Opening file \"%s\"\n\r", filename);
    11ec:	6489                	lui	s1,0x2
	FatFs = fs;
    11ee:	c31c                	sw	a5,0(a4)
	rc = pf_mount(&fatfs);
    11f0:	4792                	lw	a5,4(sp)
	printf("Opening file \"%s\"\n\r", filename);
    11f2:	6509                	lui	a0,0x2
    11f4:	e8448593          	addi	a1,s1,-380 # 1e84 <I2C1_ER_IRQHandler+0xca>
    11f8:	eb850513          	addi	a0,a0,-328 # 1eb8 <I2C1_ER_IRQHandler+0xfe>
	rc = pf_mount(&fatfs);
    11fc:	0007a023          	sw	zero,0(a5)
	printf("Opening file \"%s\"\n\r", filename);
    1200:	943ff0ef          	jal	ra,b42 <printf>
	FATFS *fs = FatFs;
    1204:	47c2                	lw	a5,16(sp)
    1206:	4380                	lw	s0,0(a5)
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1208:	4a040d63          	beqz	s0,16c2 <main+0x96c>
	fs->flag = 0;
    120c:	000400a3          	sb	zero,1(s0)
	dj.fn = sp;
    1210:	105c                	addi	a5,sp,36
    1212:	da3e                	sw	a5,52(sp)
	dj->sclust = 0;						/* Set start directory (always root dir) */
    1214:	e8448793          	addi	a5,s1,-380
    1218:	dc02                	sw	zero,56(sp)
    121a:	ca3e                	sw	a5,20(sp)
    121c:	5352                	lw	t1,52(sp)
	while (cnt--) *d++ = (char)val;
    121e:	02000593          	li	a1,32
    1222:	462d                	li	a2,11
    1224:	851a                	mv	a0,t1
    1226:	3c09                	jal	c38 <memset>
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
    1228:	6789                	lui	a5,0x2
	while (cnt--) *d++ = (char)val;
    122a:	832a                	mv	t1,a0
	si = i = 0; ni = 8;
    122c:	4681                	li	a3,0
    122e:	4581                	li	a1,0
    1230:	4721                	li	a4,8
		if (c == '.' || i >= ni) {
    1232:	02e00513          	li	a0,46
			if (ni != 8 || c != '.') break;
    1236:	42a1                	li	t0,8
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
    1238:	fe878393          	addi	t2,a5,-24 # 1fe8 <cvt.2>
		c = p[si++];
    123c:	47d2                	lw	a5,20(sp)
    123e:	00158613          	addi	a2,a1,1 # 40000001 <_eusrstack+0x1ffff801>
    1242:	0ff67613          	andi	a2,a2,255
    1246:	95be                	add	a1,a1,a5
    1248:	0005c783          	lbu	a5,0(a1)
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    124c:	02000593          	li	a1,32
    1250:	04f5f863          	bgeu	a1,a5,12a0 <main+0x54a>
    1254:	02f00593          	li	a1,47
    1258:	04b78463          	beq	a5,a1,12a0 <main+0x54a>
		if (c == '.' || i >= ni) {
    125c:	70a78663          	beq	a5,a0,1968 <main+0xc12>
    1260:	04e6f063          	bgeu	a3,a4,12a0 <main+0x54a>
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
    1264:	01879593          	slli	a1,a5,0x18
    1268:	85e1                	srai	a1,a1,0x18
    126a:	0005d563          	bgez	a1,1274 <main+0x51e>
    126e:	979e                	add	a5,a5,t2
    1270:	f807c783          	lbu	a5,-128(a5)
			if (PF_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
    1274:	f9f78593          	addi	a1,a5,-97
    1278:	0ff5f593          	andi	a1,a1,255
    127c:	40e5                	li	ra,25
    127e:	00b0e563          	bltu	ra,a1,1288 <main+0x532>
    1282:	1781                	addi	a5,a5,-32
    1284:	0ff7f793          	andi	a5,a5,255
			sfn[i++] = c;
    1288:	00168593          	addi	a1,a3,1
    128c:	969a                	add	a3,a3,t1
    128e:	00f68023          	sb	a5,0(a3)
    1292:	87ba                	mv	a5,a4
    1294:	0ff5f713          	andi	a4,a1,255
			i = 8; ni = 11;
    1298:	86ba                	mv	a3,a4
		c = p[si++];
    129a:	85b2                	mv	a1,a2
    129c:	873e                	mv	a4,a5
    129e:	bf79                	j	123c <main+0x4e6>
	*path = &p[si];						/* Rerurn pointer to the next segment */
    12a0:	4752                	lw	a4,20(sp)
	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    12a2:	0217b793          	sltiu	a5,a5,33
    12a6:	00f305a3          	sb	a5,11(t1)
	*path = &p[si];						/* Rerurn pointer to the next segment */
    12aa:	9732                	add	a4,a4,a2
	res = dir_rewind(dj);			/* Rewind directory object */
    12ac:	1808                	addi	a0,sp,48
	*path = &p[si];						/* Rerurn pointer to the next segment */
    12ae:	ca3a                	sw	a4,20(sp)
	res = dir_rewind(dj);			/* Rewind directory object */
    12b0:	8c6ff0ef          	jal	ra,376 <dir_rewind>
    12b4:	84aa                	mv	s1,a0
	if (res != FR_OK) return res;
    12b6:	ed09                	bnez	a0,12d0 <main+0x57a>
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
    12b8:	03015603          	lhu	a2,48(sp)
    12bc:	4586                	lw	a1,64(sp)
    12be:	02000693          	li	a3,32
    12c2:	8a3d                	andi	a2,a2,15
    12c4:	0616                	slli	a2,a2,0x5
    12c6:	00c8                	addi	a0,sp,68
    12c8:	9faff0ef          	jal	ra,4c2 <disk_readp>
		if (res != FR_OK) break;
    12cc:	c509                	beqz	a0,12d6 <main+0x580>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    12ce:	4485                	li	s1,1
	rc = pf_open(filename);
    12d0:	4792                	lw	a5,4(sp)
    12d2:	c384                	sw	s1,0(a5)
    12d4:	b3a5                	j	103c <main+0x2e6>
    12d6:	04414783          	lbu	a5,68(sp)
    12da:	e399                	bnez	a5,12e0 <main+0x58a>
    12dc:	448d                	li	s1,3
    12de:	bfcd                	j	12d0 <main+0x57a>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) break;	/* Is it a valid entry? */
    12e0:	04f14783          	lbu	a5,79(sp)
    12e4:	0087f713          	andi	a4,a5,8
    12e8:	ef11                	bnez	a4,1304 <main+0x5ae>
    12ea:	5752                	lw	a4,52(sp)
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    12ec:	45ad                	li	a1,11
    12ee:	00d4                	addi	a3,sp,68
    12f0:	96aa                	add	a3,a3,a0
    12f2:	0505                	addi	a0,a0,1
    12f4:	00a70633          	add	a2,a4,a0
    12f8:	0006c683          	lbu	a3,0(a3)
    12fc:	fff64603          	lbu	a2,-1(a2) # efff <lib_i2c.c.d894f163+0x5f98>
    1300:	02d60963          	beq	a2,a3,1332 <main+0x5dc>
	i = dj->index + 1;
    1304:	03015783          	lhu	a5,48(sp)
    1308:	0785                	addi	a5,a5,1
    130a:	01079493          	slli	s1,a5,0x10
    130e:	80c1                	srli	s1,s1,0x10
	if (!i || !dj->sect) return FR_NO_FILE;	/* Report EOT when index has reached 65535 */
    1310:	d4f1                	beqz	s1,12dc <main+0x586>
    1312:	4706                	lw	a4,64(sp)
    1314:	d761                	beqz	a4,12dc <main+0x586>
	if (!(i % 16)) {		/* Sector changed? */
    1316:	00f4f693          	andi	a3,s1,15
    131a:	ea89                	bnez	a3,132c <main+0x5d6>
		if (dj->clust == 0) {	/* Static table */
    131c:	5572                	lw	a0,60(sp)
		dj->sect++;			/* Next sector */
    131e:	0705                	addi	a4,a4,1
    1320:	c0ba                	sw	a4,64(sp)
		if (dj->clust == 0) {	/* Static table */
    1322:	e505                	bnez	a0,134a <main+0x5f4>
			if (i >= fs->n_rootdir) return FR_NO_FILE;	/* Report EOT when end of table */
    1324:	00445703          	lhu	a4,4(s0)
    1328:	fae4fae3          	bgeu	s1,a4,12dc <main+0x586>
	dj->index = i;
    132c:	02911823          	sh	s1,48(sp)
	} while (res == FR_OK);
    1330:	b761                	j	12b8 <main+0x562>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1332:	fab51ee3          	bne	a0,a1,12ee <main+0x598>
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
    1336:	00b74703          	lbu	a4,11(a4) # 1000b <lib_i2c.c.d894f163+0x6fa4>
    133a:	8bc1                	andi	a5,a5,16
    133c:	eb1d                	bnez	a4,1372 <main+0x61c>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
    133e:	dfd9                	beqz	a5,12dc <main+0x586>
			dj->sclust = get_clust(dir);	/* Follow next */
    1340:	00c8                	addi	a0,sp,68
    1342:	804ff0ef          	jal	ra,346 <get_clust>
    1346:	dc2a                	sw	a0,56(sp)
    1348:	bdd1                	j	121c <main+0x4c6>
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    134a:	00244703          	lbu	a4,2(s0)
    134e:	0044d693          	srli	a3,s1,0x4
    1352:	177d                	addi	a4,a4,-1
    1354:	8f75                	and	a4,a4,a3
    1356:	fb79                	bnez	a4,132c <main+0x5d6>
				clst = get_fat(dj->clust);		/* Get next cluster */
    1358:	a00ff0ef          	jal	ra,558 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
    135c:	4685                	li	a3,1
    135e:	f6a6f8e3          	bgeu	a3,a0,12ce <main+0x578>
				if (clst >= fs->n_fatent) return FR_NO_FILE;	/* Report EOT when it reached end of dynamic table */
    1362:	4414                	lw	a3,8(s0)
    1364:	f6d57ce3          	bgeu	a0,a3,12dc <main+0x586>
				dj->clust = clst;				/* Initialize data for new cluster */
    1368:	de2a                	sw	a0,60(sp)
				dj->sect = clust2sect(clst);
    136a:	fb3fe0ef          	jal	ra,31c <clust2sect>
    136e:	c0aa                	sw	a0,64(sp)
    1370:	bf75                	j	132c <main+0x5d6>
    1372:	0ff7f713          	andi	a4,a5,255
    1376:	ca3a                	sw	a4,20(sp)
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) return FR_NO_FILE;	/* It is a directory */
    1378:	34079063          	bnez	a5,16b8 <main+0x962>
	fs->org_clust = get_clust(dir);		/* File start cluster */
    137c:	00c8                	addi	a0,sp,68
    137e:	fc9fe0ef          	jal	ra,346 <get_clust>
    1382:	d008                	sw	a0,32(s0)
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
    1384:	1088                	addi	a0,sp,96
    1386:	f79fe0ef          	jal	ra,2fe <ld_dword>
	fs->flag = FA_OPENED;
    138a:	4785                	li	a5,1
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
    138c:	cc48                	sw	a0,28(s0)
	if (rc) return rc;

	rc = pf_write(data, strlen(data), &br);
    138e:	6509                	lui	a0,0x2
	fs->flag = FA_OPENED;
    1390:	00f400a3          	sb	a5,1(s0)
	fs->fptr = 0;						/* File pointer */
    1394:	00042c23          	sw	zero,24(s0)
    1398:	02300593          	li	a1,35
    139c:	ecc50513          	addi	a0,a0,-308 # 1ecc <I2C1_ER_IRQHandler+0x112>
    13a0:	aa6ff0ef          	jal	ra,646 <pf_write.constprop.0>
    13a4:	4792                	lw	a5,4(sp)
    13a6:	84aa                	mv	s1,a0
    13a8:	c388                	sw	a0,0(a5)
	if (rc) return rc;
    13aa:	c80519e3          	bnez	a0,103c <main+0x2e6>

	rc = pf_write(0, 0, &br);
    13ae:	4581                	li	a1,0
    13b0:	a96ff0ef          	jal	ra,646 <pf_write.constprop.0>
    13b4:	4792                	lw	a5,4(sp)
    13b6:	84aa                	mv	s1,a0
    13b8:	c388                	sw	a0,0(a5)
	if (rc == 0) {
    13ba:	c80511e3          	bnez	a0,103c <main+0x2e6>
		Delay_Ms(200);
    13be:	00928537          	lui	a0,0x928
    13c2:	c0050513          	addi	a0,a0,-1024 # 927c00 <lib_i2c.c.d894f163+0x91eb99>
    13c6:	e65fe0ef          	jal	ra,22a <DelaySysTick>
}

FRESULT mod_sdCard_loadFile(const char filename[], uint32_t addr) {
	BYTE buff[64];

	printf("\nlseek to %u\n\r", addr);
    13ca:	6509                	lui	a0,0x2
    13cc:	4581                	li	a1,0
    13ce:	ef050513          	addi	a0,a0,-272 # 1ef0 <I2C1_ER_IRQHandler+0x136>
    13d2:	f70ff0ef          	jal	ra,b42 <printf>
	DWORD ofs		/* File pointer from top of file */
)
{
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    13d6:	47c2                	lw	a5,16(sp)


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    13d8:	4595                	li	a1,5
	FATFS *fs = FatFs;
    13da:	4398                	lw	a4,0(a5)
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    13dc:	cb09                	beqz	a4,13ee <main+0x698>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
    13de:	00174683          	lbu	a3,1(a4)
    13e2:	4591                	li	a1,4
    13e4:	8a85                	andi	a3,a3,1
    13e6:	c681                	beqz	a3,13ee <main+0x698>

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
	fs->fptr = 0;
    13e8:	00072c23          	sw	zero,24(a4)
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) ABORT(FR_DISK_ERR);
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
	}

	return FR_OK;
    13ec:	4581                	li	a1,0
	rc = pf_lseek(addr);
    13ee:	4792                	lw	a5,4(sp)
	printf("rc=%u\n\r", rc);
    13f0:	6509                	lui	a0,0x2
    13f2:	f0050513          	addi	a0,a0,-256 # 1f00 <I2C1_ER_IRQHandler+0x146>
	rc = pf_lseek(addr);
    13f6:	c38c                	sw	a1,0(a5)
	printf("rc=%u\n\r", rc);
    13f8:	f4aff0ef          	jal	ra,b42 <printf>
	// printf("rc=%u\n\r", rc);
	// if (rc) return;

	uint32_t total_bytes = 0;
	uint8_t cnt = 0;
	const char spinner[] = "/-\\|";
    13fc:	7c5c3737          	lui	a4,0x7c5c3
    1400:	d2f70713          	addi	a4,a4,-721 # 7c5c2d2f <_eusrstack+0x5c5c252f>
    1404:	d83a                	sw	a4,48(sp)
    1406:	02010a23          	sb	zero,52(sp)
	FATFS *fs = FatFs;
    140a:	47c2                	lw	a5,16(sp)
    140c:	4398                	lw	a4,0(a5)
	*br = 0;
    140e:	c801a423          	sw	zero,-888(gp) # 20000084 <br>
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1412:	2a071d63          	bnez	a4,16cc <main+0x976>

	for (;;) {
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    1416:	4715                	li	a4,5
    1418:	4792                	lw	a5,4(sp)
    141a:	c398                	sw	a4,0(a5)
			putchar(spinner[cnt%4]);
			putchar('\r');
		}
	}

	printf("\n\rLoaded %d kilobytes.\n\r", total_bytes/1024);
    141c:	6509                	lui	a0,0x2
    141e:	00a4d593          	srli	a1,s1,0xa
    1422:	f3c50513          	addi	a0,a0,-196 # 1f3c <I2C1_ER_IRQHandler+0x182>
    1426:	f1cff0ef          	jal	ra,b42 <printf>
		printf("read result: %u\n\r", rc);
    142a:	4792                	lw	a5,4(sp)
    142c:	6509                	lui	a0,0x2
    142e:	f5850513          	addi	a0,a0,-168 # 1f58 <I2C1_ER_IRQHandler+0x19e>
    1432:	438c                	lw	a1,0(a5)
		printf("write error: %u\n\r", rc);
    1434:	f0eff0ef          	jal	ra,b42 <printf>
} TIM1_PWM_t;

//! Expected funGpioInitAll() before init
void fun_t1pwm_init(TIM1_PWM_t* model) {
	// Enable TIM1
	RCC->APB2PCENR |= RCC_APB2Periph_TIM1;
    1438:	400217b7          	lui	a5,0x40021
    143c:	4f94                	lw	a3,24(a5)
    143e:	6705                	lui	a4,0x1
    1440:	80070713          	addi	a4,a4,-2048 # 800 <_write.constprop.0+0x66>
    1444:	8ed9                	or	a3,a3,a4
    1446:	cf94                	sw	a3,24(a5)
	
	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM1_REMAP_NOREMAP;
    1448:	40010537          	lui	a0,0x40010
    144c:	4154                	lw	a3,4(a0)

	TIM_TypeDef* timer = model->TIM;
	
	// CTLR1: default is up, events generated, edge align
	// SMCFGR: default clk input is CK_INT
	timer->PSC = 0x0000;			// Prescaler 
    144e:	40013637          	lui	a2,0x40013
	timer->ATRLR = 255;				// Auto Reload - sets period
    1452:	0ff00593          	li	a1,255
	AFIO->PCFR1 |= AFIO_PCFR1_TIM1_REMAP_NOREMAP;
    1456:	c154                	sw	a3,4(a0)
	RCC->APB2PRSTR |= RCC_APB2Periph_TIM1;
    1458:	47d4                	lw	a3,12(a5)
	timer->BDTR |= TIM_MOE;			// Enable TIM1 outputs
    145a:	6321                	lui	t1,0x8
	RCC->APB2PRSTR |= RCC_APB2Periph_TIM1;
    145c:	8f55                	or	a4,a4,a3
    145e:	c7d8                	sw	a4,12(a5)
	RCC->APB2PRSTR &= ~RCC_APB2Periph_TIM1;
    1460:	47d8                	lw	a4,12(a5)
    1462:	76fd                	lui	a3,0xfffff
    1464:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
    1468:	8f75                	and	a4,a4,a3
    146a:	c7d8                	sw	a4,12(a5)
	timer->PSC = 0x0000;			// Prescaler 
    146c:	c2061423          	sh	zero,-984(a2) # 40012c28 <_eusrstack+0x20012428>
	timer->ATRLR = 255;				// Auto Reload - sets period
    1470:	c2b61623          	sh	a1,-980(a2)
	timer->BDTR |= TIM_MOE;			// Enable TIM1 outputs
    1474:	c4465703          	lhu	a4,-956(a2)
	timer->PSC = 0x0000;			// Prescaler 
    1478:	c0060693          	addi	a3,a2,-1024
	timer->BDTR |= TIM_MOE;			// Enable TIM1 outputs
    147c:	0742                	slli	a4,a4,0x10
    147e:	8341                	srli	a4,a4,0x10
    1480:	00676733          	or	a4,a4,t1
    1484:	c4e61223          	sh	a4,-956(a2)

	timer->SWEVGR |= TIM_UG;		// Reload immediately
    1488:	c1465703          	lhu	a4,-1004(a2)
    148c:	0742                	slli	a4,a4,0x10
    148e:	8341                	srli	a4,a4,0x10
    1490:	00176713          	ori	a4,a4,1
    1494:	c0e61a23          	sh	a4,-1004(a2)
	timer->CTLR1 |= TIM_CEN;		// Enable TIM1
    1498:	c0065703          	lhu	a4,-1024(a2)
    149c:	0742                	slli	a4,a4,0x10
    149e:	8341                	srli	a4,a4,0x10
    14a0:	00176713          	ori	a4,a4,1
    14a4:	c0e61023          	sh	a4,-1024(a2)
}

void fun_t1pwm_reload(TIM1_PWM_t* model) {
	model->counter = 0;
	model->timeRef = 0;
	funPinMode(model->pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF);
    14a8:	40011637          	lui	a2,0x40011
    14ac:	40060713          	addi	a4,a2,1024 # 40011400 <_eusrstack+0x20010c00>
    14b0:	00072303          	lw	t1,0(a4)
    14b4:	ff037313          	andi	t1,t1,-16
    14b8:	00936313          	ori	t1,t1,9
    14bc:	00672023          	sw	t1,0(a4)
	TIM_TypeDef* timer = model->TIM;

	// default value
	timer->CH1CVR = 255;
    14c0:	dacc                	sw	a1,52(a3)
	timer->CH2CVR = 255;
    14c2:	de8c                	sw	a1,56(a3)
	timer->CH3CVR = 255;
    14c4:	decc                	sw	a1,60(a3)
	timer->CH4CVR = 255;
    14c6:	c2ac                	sw	a1,64(a3)
			timer->CCER |= TIM_CC1E | TIM_CC1P;
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1;
			model->channel = 1;
			break;
		case TIM_CC1NE:
			timer->CCER |= TIM_CC1NE | TIM_CC1NP;
    14c8:	0206d583          	lhu	a1,32(a3)
    14cc:	05c2                	slli	a1,a1,0x10
    14ce:	81c1                	srli	a1,a1,0x10
    14d0:	00c5e593          	ori	a1,a1,12
    14d4:	02b69023          	sh	a1,32(a3)
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1;
    14d8:	0186d583          	lhu	a1,24(a3)
    14dc:	05c2                	slli	a1,a1,0x10
    14de:	81c1                	srli	a1,a1,0x10
    14e0:	0605e593          	ori	a1,a1,96
    14e4:	00b69c23          	sh	a1,24(a3)
		D5		T2CH4_		//! UART_RX
*/

void fun_encoder_setup(Encoder_t *model) {
	//! Enable GPIOC, TIM2, and AFIO *very important!*
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    14e8:	4f94                	lw	a3,24(a5)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	// PD3 is T2CH2_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    14ea:	75c5                	lui	a1,0xffff1
    14ec:	15fd                	addi	a1,a1,-1
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    14ee:	0316e693          	ori	a3,a3,49
    14f2:	cf94                	sw	a3,24(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    14f4:	4fd4                	lw	a3,28(a5)
    14f6:	0016e693          	ori	a3,a3,1
    14fa:	cfd4                	sw	a3,28(a5)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
    14fc:	4154                	lw	a3,4(a0)
    14fe:	c154                	sw	a3,4(a0)
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    1500:	4314                	lw	a3,0(a4)
    1502:	8eed                	and	a3,a3,a1
    1504:	c314                	sw	a3,0(a4)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*3); 		//set new ones
    1506:	4314                	lw	a3,0(a4)
    1508:	65a1                	lui	a1,0x8
    150a:	8ecd                	or	a3,a3,a1
    150c:	c314                	sw	a3,0(a4)
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    150e:	4754                	lw	a3,12(a4)

	// PD4 is T2CH1_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    1510:	fff105b7          	lui	a1,0xfff10
    1514:	15fd                	addi	a1,a1,-1
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    1516:	0046e693          	ori	a3,a3,4
    151a:	c754                	sw	a3,12(a4)
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    151c:	4314                	lw	a3,0(a4)
    151e:	8eed                	and	a3,a3,a1
    1520:	c314                	sw	a3,0(a4)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*4); 		//set new ones
    1522:	4314                	lw	a3,0(a4)
    1524:	000805b7          	lui	a1,0x80
    1528:	8ecd                	or	a3,a3,a1
    152a:	c314                	sw	a3,0(a4)
	GPIOD->OUTDR |= 1<<4;							//1 = pull-up, 0 = pull-down
    152c:	4754                	lw	a3,12(a4)
#define ADC_NUMCHLS 2
volatile uint16_t adc_buffer[ADC_NUMCHLS];

void fun_joystick_setup() {
	// ADCCLK = 24 MHz => RCC_ADCPRE = 0: divide by 2
	RCC->CFGR0 &= ~(0x1F<<11);
    152e:	75c1                	lui	a1,0xffff0
    1530:	7ff58593          	addi	a1,a1,2047 # ffff07ff <_eusrstack+0xdffeffff>
    1534:	0106e693          	ori	a3,a3,16
    1538:	c754                	sw	a3,12(a4)
	// //# added
	// GPIOC->CFGLR &= ~(0xf<<(4*0));
	// GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*0);

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    153a:	4b98                	lw	a4,16(a5)
    153c:	00176713          	ori	a4,a4,1
    1540:	cb98                	sw	a4,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    1542:	4b98                	lw	a4,16(a5)
    1544:	9b79                	andi	a4,a4,-2
    1546:	cb98                	sw	a4,16(a5)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
    1548:	40000737          	lui	a4,0x40000
    154c:	00875683          	lhu	a3,8(a4) # 40000008 <_eusrstack+0x1ffff808>
    1550:	06c2                	slli	a3,a3,0x10
    1552:	82c1                	srli	a3,a3,0x10
    1554:	0036e693          	ori	a3,a3,3
    1558:	00d71423          	sh	a3,8(a4)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
    155c:	76e5                	lui	a3,0xffff9
    155e:	16fd                	addi	a3,a3,-1
    1560:	02d71223          	sh	a3,36(a4)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
    1564:	01475683          	lhu	a3,20(a4)
    1568:	06c2                	slli	a3,a3,0x10
    156a:	82c1                	srli	a3,a3,0x10
    156c:	0016e693          	ori	a3,a3,1
    1570:	00d71a23          	sh	a3,20(a4)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
    1574:	00075683          	lhu	a3,0(a4)
    1578:	06c2                	slli	a3,a3,0x10
    157a:	82c1                	srli	a3,a3,0x10
    157c:	0016e693          	ori	a3,a3,1
    1580:	00d71023          	sh	a3,0(a4)

	model->initial_count = TIM2->CNT;
    1584:	02475683          	lhu	a3,36(a4)
	model->last_count = TIM2->CNT;
    1588:	02475703          	lhu	a4,36(a4)
    158c:	43d4                	lw	a3,4(a5)
    158e:	0742                	slli	a4,a4,0x10
    1590:	8eed                	and	a3,a3,a1
    1592:	c3d4                	sw	a3,4(a5)
	
	// Enable GPIOD and ADC
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_ADC1;
    1594:	4f94                	lw	a3,24(a5)
    1596:	8341                	srli	a4,a4,0x10
    1598:	2046e693          	ori	a3,a3,516
    159c:	cf94                	sw	a3,24(a5)
	// GPIOA->CFGLR &= ~(0xf<<(4*0));	// PA1 Analog input Chan1
	// GPIOA->CFGLR &= ~(0xf<<(4*1));	// PA2 Analog input Chan0

    int chanA = 0;
    int chanB = 1;
    GPIOA->CFGLR &= ~(0xf<<(4*0));
    159e:	80060693          	addi	a3,a2,-2048
    15a2:	4290                	lw	a2,0(a3)
    15a4:	9a41                	andi	a2,a2,-16
    15a6:	c290                	sw	a2,0(a3)
    GPIOA->CFGLR &= ~(0xf<<(4*1));
    15a8:	4290                	lw	a2,0(a3)
    15aa:	f0f67613          	andi	a2,a2,-241
    15ae:	c290                	sw	a2,0(a3)
	
	// Reset the ADC to init all regs
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    15b0:	47d4                	lw	a3,12(a5)
    // turn on ADC
	ADC1->CTLR2 |= ADC_ADON;
	
	// Reset and calibrate
	ADC1->CTLR2 |= ADC_RSTCAL;
	while(ADC1->CTLR2 & ADC_RSTCAL);
    15b2:	40012637          	lui	a2,0x40012
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    15b6:	2006e693          	ori	a3,a3,512
    15ba:	c7d4                	sw	a3,12(a5)
	RCC->APB2PRSTR &= ~RCC_APB2Periph_ADC1;
    15bc:	47d4                	lw	a3,12(a5)
    15be:	dff6f693          	andi	a3,a3,-513
    15c2:	c7d4                	sw	a3,12(a5)
	ADC1->RSQR1 = (ADC_NUMCHLS-1) << 20;	// four chls in the sequence
    15c4:	400127b7          	lui	a5,0x40012
    15c8:	40078793          	addi	a5,a5,1024 # 40012400 <_eusrstack+0x20011c00>
    15cc:	001006b7          	lui	a3,0x100
    15d0:	d7d4                	sw	a3,44(a5)
	ADC1->RSQR2 = 0;
    15d2:	0207a823          	sw	zero,48(a5)
    ADC1->RSQR3 = (chanA<<(5*0)) | (chanB<<(5*1));
    15d6:	02000693          	li	a3,32
    15da:	dbd4                	sw	a3,52(a5)
    ADC1->SAMPTR2 = (7<<(3*chanA)) | (7<<(3*chanB));
    15dc:	03f00693          	li	a3,63
    15e0:	cb94                	sw	a3,16(a5)
	ADC1->CTLR2 |= ADC_ADON;
    15e2:	4794                	lw	a3,8(a5)
    15e4:	0016e693          	ori	a3,a3,1
    15e8:	c794                	sw	a3,8(a5)
	ADC1->CTLR2 |= ADC_RSTCAL;
    15ea:	4794                	lw	a3,8(a5)
    15ec:	0086e693          	ori	a3,a3,8
    15f0:	c794                	sw	a3,8(a5)
	while(ADC1->CTLR2 & ADC_RSTCAL);
    15f2:	40060793          	addi	a5,a2,1024 # 40012400 <_eusrstack+0x20011c00>
    15f6:	4794                	lw	a3,8(a5)
    15f8:	8aa1                	andi	a3,a3,8
    15fa:	fee5                	bnez	a3,15f2 <main+0x89c>
	ADC1->CTLR2 |= ADC_CAL;
    15fc:	4794                	lw	a3,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    15fe:	40012637          	lui	a2,0x40012
	ADC1->CTLR2 |= ADC_CAL;
    1602:	0046e693          	ori	a3,a3,4
    1606:	c794                	sw	a3,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    1608:	40060793          	addi	a5,a2,1024 # 40012400 <_eusrstack+0x20011c00>
    160c:	4780                	lw	s0,8(a5)
    160e:	8811                	andi	s0,s0,4
    1610:	fc65                	bnez	s0,1608 <main+0x8b2>
	
	// Turn on DMA
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    1612:	400215b7          	lui	a1,0x40021
    1616:	49d4                	lw	a3,20(a1)
	
	//DMA1_Channel1 is for ADC
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    1618:	44c60613          	addi	a2,a2,1100
    model->btn_state = newState;
    161c:	448d                	li	s1,3
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    161e:	0016e693          	ori	a3,a3,1
    1622:	c9d4                	sw	a3,20(a1)
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    1624:	400206b7          	lui	a3,0x40020
    1628:	ca90                	sw	a2,16(a3)
	DMA1_Channel1->MADDR = (uint32_t)adc_buffer;
    162a:	c8418613          	addi	a2,gp,-892 # 20000080 <adc_buffer>
    162e:	cad0                	sw	a2,20(a3)
	DMA1_Channel1->CNTR  = ADC_NUMCHLS;
    1630:	4609                	li	a2,2
    1632:	c6d0                	sw	a2,12(a3)
	DMA1_Channel1->CFGR  =
    1634:	660d                	lui	a2,0x3
    1636:	5a060613          	addi	a2,a2,1440 # 35a0 <ch32fun.c.963ac852+0x9a4>
    163a:	c690                	sw	a2,8(a3)
		DMA_PeripheralDataSize_HalfWord |
		DMA_MemoryInc_Enable |
		DMA_Mode_Circular |
		DMA_DIR_PeripheralSRC;
	
	DMA1_Channel1->CFGR |= DMA_CFGR1_EN;    // Turn on DMA channel 1
    163c:	4690                	lw	a2,8(a3)
    163e:	00166613          	ori	a2,a2,1
    1642:	c690                	sw	a2,8(a3)
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
    1644:	43d4                	lw	a3,4(a5)
	
	// Enable continuous conversion and DMA
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    1646:	000e0637          	lui	a2,0xe0
    164a:	10260613          	addi	a2,a2,258 # e0102 <lib_i2c.c.d894f163+0xd709b>
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
    164e:	1006e693          	ori	a3,a3,256
    1652:	c3d4                	sw	a3,4(a5)
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    1654:	4794                	lw	a3,8(a5)
    1656:	8ed1                	or	a3,a3,a2
    1658:	c794                	sw	a3,8(a5)
	ADC1->CTLR2 |= ADC_SWSTART;             // start conversion
    165a:	4794                	lw	a3,8(a5)
    165c:	00400637          	lui	a2,0x400
    1660:	8ed1                	or	a3,a3,a2
    1662:	c794                	sw	a3,8(a5)
{
	// Disable DMA channel (just in case a transfer is pending)
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
	// Set transfer length and source address
	DMA1_Channel4->CNTR = len;
	DMA1_Channel4->MADDR = (uint32_t)data;
    1664:	6689                	lui	a3,0x2
    1666:	06868793          	addi	a5,a3,104 # 2068 <message.0>
	Button_t button1 = { BUTTON_PIN, BUTTON_IDLE, 0, 0, 0, 0, 0, 0 };
    166a:	cc02                	sw	zero,24(sp)
	model->timeRef = 0;
    166c:	ca02                	sw	zero,20(sp)
	uint32_t sec_time = 0;
    166e:	c802                	sw	zero,16(sp)
    1670:	ce3e                	sw	a5,28(sp)

	//# ADC - DMA1_CH1: use PA2(CH0) and PA1(CH1)
	fun_joystick_setup();

	while(1) {
		uint32_t now = millis();
    1672:	47a2                	lw	a5,8(sp)

		button_run(&button1, button_onChanged);
		fun_encoder_task(now, &encoder_a, encoder_onChanged);
		fun_t1pwm_task(now, &pwm_CH1c);

		if (now - sec_time > 1000) {
    1674:	4682                	lw	a3,0(sp)

void fun_encoder_task(uint32_t current_time, Encoder_t *model, void (*handler)(Encoder_t *model)) {
	// if (current_time - encoder_debounceTime < 50) return;
	// encoder_debounceTime = current_time;

	uint16_t count = TIM2->CNT;
    1676:	85ba                	mv	a1,a4
		uint32_t now = millis();
    1678:	439c                	lw	a5,0(a5)

void button_run(Button_t *model, void (*handler)(int, uint32_t)) {
    if (model->pin == 0xFF) return;
    
    uint32_t now = millis();
    uint8_t read = funDigitalRead(model->pin);
    167a:	40011737          	lui	a4,0x40011

    // Debounce check
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    167e:	464d                	li	a2,19
    1680:	c23e                	sw	a5,4(sp)
    uint32_t now = millis();
    1682:	47a2                	lw	a5,8(sp)
    1684:	439c                	lw	a5,0(a5)
    uint8_t read = funDigitalRead(model->pin);
    1686:	4718                	lw	a4,8(a4)
    uint32_t now = millis();
    1688:	c03e                	sw	a5,0(sp)
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    168a:	40d78533          	sub	a0,a5,a3
    168e:	26a67c63          	bgeu	a2,a0,1906 <main+0xbb0>
    model->debounce_time = now;

    switch (model->btn_state) {
    1692:	4689                	li	a3,2
    uint8_t read = funDigitalRead(model->pin);
    1694:	8b05                	andi	a4,a4,1
    switch (model->btn_state) {
    1696:	26d48263          	beq	s1,a3,18fa <main+0xba4>
    169a:	468d                	li	a3,3
    169c:	16d48163          	beq	s1,a3,17fe <main+0xaa8>
    16a0:	20049963          	bnez	s1,18b2 <main+0xb5c>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
    16a4:	1e070663          	beqz	a4,1890 <main+0xb3a>
    model->debounce_time = millis();
    16a8:	47a2                	lw	a5,8(sp)
    model->btn_state = newState;
    16aa:	84ba                	mv	s1,a4
    model->debounce_time = millis();
    16ac:	439c                	lw	a5,0(a5)
    16ae:	c03e                	sw	a5,0(sp)
    model->release_time = millis();
    16b0:	47a2                	lw	a5,8(sp)
    16b2:	439c                	lw	a5,0(a5)
    16b4:	c63e                	sw	a5,12(sp)
    16b6:	aab1                	j	1812 <main+0xabc>
	rc = pf_open(filename);
    16b8:	4712                	lw	a4,4(sp)
    16ba:	478d                	li	a5,3
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) return FR_NO_FILE;	/* It is a directory */
    16bc:	448d                	li	s1,3
    16be:	c31c                	sw	a5,0(a4)
    16c0:	bab5                	j	103c <main+0x2e6>
    16c2:	4712                	lw	a4,4(sp)
    16c4:	4795                	li	a5,5
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    16c6:	4495                	li	s1,5
    16c8:	c31c                	sw	a5,0(a4)
    16ca:	ba8d                	j	103c <main+0x2e6>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
    16cc:	00174683          	lbu	a3,1(a4) # 40011001 <_eusrstack+0x20010801>
    16d0:	8a85                	andi	a3,a3,1
    16d2:	e299                	bnez	a3,16d8 <main+0x982>
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    16d4:	4711                	li	a4,4
    16d6:	b389                	j	1418 <main+0x6c2>
	remain = fs->fsize - fs->fptr;
    16d8:	4f14                	lw	a3,24(a4)
    16da:	01c72303          	lw	t1,28(a4)
    16de:	40d30333          	sub	t1,t1,a3
    16e2:	04000693          	li	a3,64
    16e6:	0066f463          	bgeu	a3,t1,16ee <main+0x998>
    16ea:	04000313          	li	t1,64
    16ee:	00dc                	addi	a5,sp,68
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
    16f0:	cc3e                	sw	a5,24(sp)
	while (btr)	{									/* Repeat until all data transferred */
    16f2:	06031663          	bnez	t1,175e <main+0xa08>
		if (rc || !br) break; /* Error or end of file */
    16f6:	c8818793          	addi	a5,gp,-888 # 20000084 <br>
    16fa:	438c                	lw	a1,0(a5)
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    16fc:	c801a623          	sw	zero,-884(gp) # 20000088 <rc>
		if (rc || !br) break; /* Error or end of file */
    1700:	d0058ee3          	beqz	a1,141c <main+0x6c6>
		printf("Read %u bytes\n\r", br);
    1704:	6509                	lui	a0,0x2
    1706:	f0850513          	addi	a0,a0,-248 # 1f08 <I2C1_ER_IRQHandler+0x14e>
    170a:	c38ff0ef          	jal	ra,b42 <printf>
		printf("string: %s\n\r", buff);
    170e:	6509                	lui	a0,0x2
    1710:	00cc                	addi	a1,sp,68
    1712:	f1850513          	addi	a0,a0,-232 # 1f18 <I2C1_ER_IRQHandler+0x15e>
    1716:	c2cff0ef          	jal	ra,b42 <printf>
		total_bytes += br;
    171a:	c8818793          	addi	a5,gp,-888 # 20000084 <br>
    171e:	4398                	lw	a4,0(a5)
    1720:	94ba                	add	s1,s1,a4
		if(total_bytes % (16*1024) == 0){
    1722:	01249713          	slli	a4,s1,0x12
    1726:	ce0712e3          	bnez	a4,140a <main+0x6b4>
			cnt++;
    172a:	47d2                	lw	a5,20(sp)
			printf("%d kb so far...  ", total_bytes/1024);
    172c:	6509                	lui	a0,0x2
    172e:	00a4d593          	srli	a1,s1,0xa
			cnt++;
    1732:	00178713          	addi	a4,a5,1
    1736:	0ff77793          	andi	a5,a4,255
			printf("%d kb so far...  ", total_bytes/1024);
    173a:	f2850513          	addi	a0,a0,-216 # 1f28 <I2C1_ER_IRQHandler+0x16e>
			cnt++;
    173e:	ca3e                	sw	a5,20(sp)
			printf("%d kb so far...  ", total_bytes/1024);
    1740:	c02ff0ef          	jal	ra,b42 <printf>
			putchar(spinner[cnt%4]);
    1744:	47d2                	lw	a5,20(sp)
    1746:	0037f713          	andi	a4,a5,3
    174a:	015c                	addi	a5,sp,132
    174c:	973e                	add	a4,a4,a5
    174e:	fac74503          	lbu	a0,-84(a4)
    1752:	d40ff0ef          	jal	ra,c92 <putchar>
			putchar('\r');
    1756:	4535                	li	a0,13
    1758:	d3aff0ef          	jal	ra,c92 <putchar>
    175c:	b17d                	j	140a <main+0x6b4>
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    175e:	4f14                	lw	a3,24(a4)
    1760:	1ff6f613          	andi	a2,a3,511
    1764:	ea39                	bnez	a2,17ba <main+0xa64>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1766:	00274403          	lbu	s0,2(a4)
    176a:	0096d613          	srli	a2,a3,0x9
    176e:	147d                	addi	s0,s0,-1
    1770:	8c71                	and	s0,s0,a2
    1772:	0ff47413          	andi	s0,s0,255
			if (!cs) {								/* On the cluster boundary? */
    1776:	e405                	bnez	s0,179e <main+0xa48>
				if (fs->fptr == 0) {				/* On the top of the file? */
    1778:	ea91                	bnez	a3,178c <main+0xa36>
					clst = fs->org_clust;
    177a:	5308                	lw	a0,32(a4)
				if (clst <= 1) ABORT(FR_DISK_ERR);
    177c:	4685                	li	a3,1
    177e:	00a6ef63          	bltu	a3,a0,179c <main+0xa46>
    1782:	000700a3          	sb	zero,1(a4)
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    1786:	c8d1a623          	sw	a3,-884(gp) # 20000088 <rc>
    178a:	b949                	j	141c <main+0x6c6>
					clst = get_fat(fs->curr_clust);
    178c:	5348                	lw	a0,36(a4)
    178e:	d01a                	sw	t1,32(sp)
    1790:	ce3a                	sw	a4,28(sp)
    1792:	dc7fe0ef          	jal	ra,558 <get_fat>
    1796:	5302                	lw	t1,32(sp)
    1798:	4772                	lw	a4,28(sp)
    179a:	b7cd                	j	177c <main+0xa26>
				fs->curr_clust = clst;				/* Update current cluster */
    179c:	d348                	sw	a0,36(a4)
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    179e:	5348                	lw	a0,36(a4)
    17a0:	d01a                	sw	t1,32(sp)
    17a2:	ce3a                	sw	a4,28(sp)
    17a4:	b79fe0ef          	jal	ra,31c <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
    17a8:	4772                	lw	a4,28(sp)
    17aa:	5302                	lw	t1,32(sp)
    17ac:	e509                	bnez	a0,17b6 <main+0xa60>
		if (dr) ABORT(FR_DISK_ERR);
    17ae:	000700a3          	sb	zero,1(a4)
    17b2:	4685                	li	a3,1
    17b4:	bfc9                	j	1786 <main+0xa30>
			fs->dsect = sect + cs;
    17b6:	942a                	add	s0,s0,a0
    17b8:	d700                	sw	s0,40(a4)
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    17ba:	4f10                	lw	a2,24(a4)
    17bc:	20000413          	li	s0,512
    17c0:	1ff67613          	andi	a2,a2,511
    17c4:	8c11                	sub	s0,s0,a2
    17c6:	00837363          	bgeu	t1,s0,17cc <main+0xa76>
    17ca:	841a                	mv	s0,t1
		dr = disk_readp(rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    17cc:	570c                	lw	a1,40(a4)
    17ce:	4562                	lw	a0,24(sp)
    17d0:	86a2                	mv	a3,s0
    17d2:	d01a                	sw	t1,32(sp)
    17d4:	ce3a                	sw	a4,28(sp)
    17d6:	cedfe0ef          	jal	ra,4c2 <disk_readp>
		if (dr) ABORT(FR_DISK_ERR);
    17da:	4772                	lw	a4,28(sp)
    17dc:	5302                	lw	t1,32(sp)
    17de:	f961                	bnez	a0,17ae <main+0xa58>
		fs->fptr += rcnt;							/* Advances file read pointer */
    17e0:	4f14                	lw	a3,24(a4)
		btr -= rcnt; *br += rcnt;					/* Update read counter */
    17e2:	40830333          	sub	t1,t1,s0
		fs->fptr += rcnt;							/* Advances file read pointer */
    17e6:	96a2                	add	a3,a3,s0
    17e8:	cf14                	sw	a3,24(a4)
		btr -= rcnt; *br += rcnt;					/* Update read counter */
    17ea:	c8818693          	addi	a3,gp,-888 # 20000084 <br>
    17ee:	4294                	lw	a3,0(a3)
    17f0:	c8818793          	addi	a5,gp,-888 # 20000084 <br>
    17f4:	96a2                	add	a3,a3,s0
    17f6:	c394                	sw	a3,0(a5)
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
    17f8:	47e2                	lw	a5,24(sp)
    17fa:	97a2                	add	a5,a5,s0
    17fc:	bdd5                	j	16f0 <main+0x99a>
        if (read == 0) {
    17fe:	eb11                	bnez	a4,1812 <main+0xabc>
    model->debounce_time = millis();
    1800:	47a2                	lw	a5,8(sp)
    model->release_time = millis();
    1802:	4722                	lw	a4,8(sp)
    model->btn_state = newState;
    1804:	4481                	li	s1,0
    model->debounce_time = millis();
    1806:	439c                	lw	a5,0(a5)
    model->release_time = millis();
    1808:	4318                	lw	a4,0(a4)
    180a:	c63a                	sw	a4,12(sp)
            model->press_time = now;
    180c:	4702                	lw	a4,0(sp)
    model->debounce_time = millis();
    180e:	c03e                	sw	a5,0(sp)
            model->press_time = now;
    1810:	cc3a                	sw	a4,24(sp)
    1812:	40000737          	lui	a4,0x40000
    1816:	02475703          	lhu	a4,36(a4) # 40000024 <_eusrstack+0x1ffff824>
    181a:	0742                	slli	a4,a4,0x10
    181c:	8341                	srli	a4,a4,0x10
	model->count = count;

	if( count != model->last_count) {
    181e:	00b70963          	beq	a4,a1,1830 <main+0xada>
	printf("Encoder: %d\n", model->last_count);
    1822:	6509                	lui	a0,0x2
    1824:	fac50513          	addi	a0,a0,-84 # 1fac <I2C1_ER_IRQHandler+0x1f2>
    1828:	d03a                	sw	a4,32(sp)
    182a:	b18ff0ef          	jal	ra,b42 <printf>
    182e:	5702                	lw	a4,32(sp)
	}
}


void fun_t1pwm_task(uint32_t time, TIM1_PWM_t* model) {
	if (time - model->timeRef < 5) { return; }
    1830:	4792                	lw	a5,4(sp)
    1832:	46d2                	lw	a3,20(sp)
    1834:	4611                	li	a2,4
    1836:	40d786b3          	sub	a3,a5,a3
    183a:	00d67c63          	bgeu	a2,a3,1852 <main+0xafc>
		uint32_t now = millis();
    183e:	4792                	lw	a5,4(sp)
		case 1: timer->CH1CVR = width; break;
    1840:	400136b7          	lui	a3,0x40013
    1844:	c0068693          	addi	a3,a3,-1024 # 40012c00 <_eusrstack+0x20012400>
    1848:	dac0                	sw	s0,52(a3)
	model->timeRef = time;

	fun_t1pwm_setpw(model, model->counter);
	model->counter++;
    184a:	0405                	addi	s0,s0,1
	model->counter &= 255;
    184c:	0ff47413          	andi	s0,s0,255
    1850:	ca3e                	sw	a5,20(sp)
		if (now - sec_time > 1000) {
    1852:	4792                	lw	a5,4(sp)
    1854:	46c2                	lw	a3,16(sp)
    1856:	3e800613          	li	a2,1000
    185a:	40d786b3          	sub	a3,a5,a3
    185e:	e0d67ae3          	bgeu	a2,a3,1672 <main+0x91c>
			sec_time = now;

			printf("IM HERE\n\r");
    1862:	6509                	lui	a0,0x2
    1864:	fbc50513          	addi	a0,a0,-68 # 1fbc <I2C1_ER_IRQHandler+0x202>
    1868:	d03a                	sw	a4,32(sp)
    186a:	ad8ff0ef          	jal	ra,b42 <printf>
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
    186e:	400206b7          	lui	a3,0x40020
    1872:	42f0                	lw	a2,68(a3)
	DMA1_Channel4->MADDR = (uint32_t)data;
    1874:	47f2                	lw	a5,28(sp)
    1876:	5702                	lw	a4,32(sp)
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
    1878:	9a79                	andi	a2,a2,-2
    187a:	c2f0                	sw	a2,68(a3)
	DMA1_Channel4->CNTR = len;
    187c:	4639                	li	a2,14
    187e:	c6b0                	sw	a2,72(a3)
	DMA1_Channel4->MADDR = (uint32_t)data;
    1880:	cabc                	sw	a5,80(a3)
	// Enable DMA channel to start the transfer
	DMA1_Channel4->CFGR |= DMA_CFGR1_EN;
    1882:	42f0                	lw	a2,68(a3)
		uint32_t now = millis();
    1884:	4792                	lw	a5,4(sp)
    1886:	00166613          	ori	a2,a2,1
    188a:	c2f0                	sw	a2,68(a3)
    188c:	c83e                	sw	a5,16(sp)
    188e:	b3d5                	j	1672 <main+0x91c>
            _reset_timers(BTN_UP, model);        // First Release

        } else {
            // Long press detection
            uint32_t press_duration = now - model->press_time;
    1890:	4762                	lw	a4,24(sp)
    1892:	4782                	lw	a5,0(sp)
    1894:	40e786b3          	sub	a3,a5,a4
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1898:	6705                	lui	a4,0x1
    189a:	fa070713          	addi	a4,a4,-96 # fa0 <main+0x24a>
    189e:	f6d77ae3          	bgeu	a4,a3,1812 <main+0xabc>
			printf("Long Press\n"); break;
    18a2:	6509                	lui	a0,0x2
    18a4:	f8050513          	addi	a0,a0,-128 # 1f80 <I2C1_ER_IRQHandler+0x1c6>
    18a8:	d02e                	sw	a1,32(sp)
    18aa:	bbcff0ef          	jal	ra,c66 <puts>
    18ae:	5582                	lw	a1,32(sp)
    18b0:	b78d                	j	1812 <main+0xabc>
            }
        }
        break;

    case BTN_UP: {
        uint32_t release_duration = now - model->release_time;
    18b2:	4782                	lw	a5,0(sp)
    18b4:	46b2                	lw	a3,12(sp)
    18b6:	40d786b3          	sub	a3,a5,a3

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    18ba:	ef09                	bnez	a4,18d4 <main+0xb7e>
    18bc:	09f00793          	li	a5,159
    18c0:	00d7ea63          	bltu	a5,a3,18d4 <main+0xb7e>
    model->debounce_time = millis();
    18c4:	47a2                	lw	a5,8(sp)
    model->btn_state = newState;
    18c6:	4489                	li	s1,2
    model->debounce_time = millis();
    18c8:	439c                	lw	a5,0(a5)
    18ca:	c03e                	sw	a5,0(sp)
    model->release_time = millis();
    18cc:	47a2                	lw	a5,8(sp)
    18ce:	439c                	lw	a5,0(a5)
    18d0:	c63e                	sw	a5,12(sp)
    18d2:	b781                	j	1812 <main+0xabc>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    18d4:	0a000713          	li	a4,160
    18d8:	4485                	li	s1,1
    18da:	f2d77ce3          	bgeu	a4,a3,1812 <main+0xabc>
			printf("Single Click\n");
    18de:	6509                	lui	a0,0x2
    18e0:	d02e                	sw	a1,32(sp)
    18e2:	f8c50513          	addi	a0,a0,-116 # 1f8c <I2C1_ER_IRQHandler+0x1d2>
			printf("Double Click\n");
    18e6:	b80ff0ef          	jal	ra,c66 <puts>
    model->debounce_time = millis();
    18ea:	47a2                	lw	a5,8(sp)
    model->btn_state = newState;
    18ec:	448d                	li	s1,3
    model->debounce_time = millis();
    18ee:	439c                	lw	a5,0(a5)
    18f0:	c03e                	sw	a5,0(sp)
    model->release_time = millis();
    18f2:	47a2                	lw	a5,8(sp)
    18f4:	439c                	lw	a5,0(a5)
    18f6:	c63e                	sw	a5,12(sp)
    18f8:	bf5d                	j	18ae <main+0xb58>
        break;
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
    18fa:	df01                	beqz	a4,1812 <main+0xabc>
    18fc:	6789                	lui	a5,0x2
    18fe:	d02e                	sw	a1,32(sp)
    1900:	f9c78513          	addi	a0,a5,-100 # 1f9c <I2C1_ER_IRQHandler+0x1e2>
    1904:	b7cd                	j	18e6 <main+0xb90>
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1906:	c036                	sw	a3,0(sp)
    1908:	b729                	j	1812 <main+0xabc>
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
    190a:	8ad76fe3          	bltu	a4,a3,11c8 <main+0x472>
	fs->fs_type = fmt;
    190e:	4709                	li	a4,2
    1910:	00e78023          	sb	a4,0(a5)
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    1914:	4752                	lw	a4,20(sp)
    1916:	9722                	add	a4,a4,s0
    1918:	cb98                	sw	a4,16(a5)
    191a:	b0c9                	j	11dc <main+0x486>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    191c:	4581                	li	a1,0
    191e:	07a00513          	li	a0,122
    1922:	b15fe0ef          	jal	ra,436 <send_cmd>
    1926:	ee051b63          	bnez	a0,101c <main+0x2c6>
    192a:	4401                	li	s0,0
					for (n = 0; n < 4; n++) buf[n] = rcvr_mmc();
    192c:	aebfe0ef          	jal	ra,416 <rcvr_mmc>
    1930:	00dc                	addi	a5,sp,68
    1932:	97a2                	add	a5,a5,s0
    1934:	00a78023          	sb	a0,0(a5)
    1938:	0405                	addi	s0,s0,1
    193a:	4791                	li	a5,4
    193c:	fef418e3          	bne	s0,a5,192c <main+0xbd6>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    1940:	04414783          	lbu	a5,68(sp)
    1944:	4431                	li	s0,12
    1946:	0407f793          	andi	a5,a5,64
    194a:	ec079a63          	bnez	a5,101e <main+0x2c8>
    194e:	4411                	li	s0,4
    1950:	eceff06f          	j	101e <main+0x2c8>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1954:	20000593          	li	a1,512
    1958:	05000513          	li	a0,80
    195c:	adbfe0ef          	jal	ra,436 <send_cmd>
    1960:	ea051e63          	bnez	a0,101c <main+0x2c6>
    1964:	ebaff06f          	j	101e <main+0x2c8>
			if (ni != 8 || c != '.') break;
    1968:	92571ce3          	bne	a4,t0,12a0 <main+0x54a>
			i = 8; ni = 11;
    196c:	47ad                	li	a5,11
    196e:	b22d                	j	1298 <main+0x542>

00001970 <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    1970:	fdc10113          	addi	sp,sp,-36
    1974:	ce22                	sw	s0,28(sp)
    1976:	d006                	sw	ra,32(sp)
    1978:	cc26                	sw	s1,24(sp)
    197a:	842a                	mv	s0,a0
	if( tween <= 0 ) return hexa;
    197c:	0ac05f63          	blez	a2,1a3a <TweenHexColors+0xca>
	if( tween >= 255 ) return hexb;
    1980:	0fe00793          	li	a5,254
    1984:	84ae                	mv	s1,a1
    1986:	0cc7c163          	blt	a5,a2,1a48 <TweenHexColors+0xd8>
	int32_t aamt = 255-tween;
    198a:	0ff00293          	li	t0,255
    198e:	40c282b3          	sub	t0,t0,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1992:	8596                	mv	a1,t0
    1994:	0ff57513          	andi	a0,a0,255
    1998:	c216                	sw	t0,4(sp)
	int32_t aamt = 255-tween;
    199a:	c032                	sw	a2,0(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    199c:	1fffe097          	auipc	ra,0x1fffe
    19a0:	68c080e7          	jalr	1676(ra) # 20000028 <FastMultiply>
    19a4:	4602                	lw	a2,0(sp)
    19a6:	ca2a                	sw	a0,20(sp)
    19a8:	0ff4f513          	andi	a0,s1,255
    19ac:	85b2                	mv	a1,a2
    19ae:	1fffe097          	auipc	ra,0x1fffe
    19b2:	67a080e7          	jalr	1658(ra) # 20000028 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    19b6:	4292                	lw	t0,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    19b8:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    19ba:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    19be:	8596                	mv	a1,t0
    19c0:	0ff57513          	andi	a0,a0,255
    19c4:	c616                	sw	t0,12(sp)
    19c6:	1fffe097          	auipc	ra,0x1fffe
    19ca:	662080e7          	jalr	1634(ra) # 20000028 <FastMultiply>
    19ce:	4602                	lw	a2,0(sp)
    19d0:	c42a                	sw	a0,8(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    19d2:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    19d6:	85b2                	mv	a1,a2
    19d8:	0ff57513          	andi	a0,a0,255
    19dc:	c232                	sw	a2,4(sp)
    19de:	1fffe097          	auipc	ra,0x1fffe
    19e2:	64a080e7          	jalr	1610(ra) # 20000028 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    19e6:	42b2                	lw	t0,12(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    19e8:	c02a                	sw	a0,0(sp)
	int32_t hag = (hexa>>16) & 0xff;
    19ea:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    19ee:	8596                	mv	a1,t0
    19f0:	0ff57513          	andi	a0,a0,255
    19f4:	1fffe097          	auipc	ra,0x1fffe
    19f8:	634080e7          	jalr	1588(ra) # 20000028 <FastMultiply>
    19fc:	4612                	lw	a2,4(sp)
    19fe:	842a                	mv	s0,a0
	int32_t hbg = (hexb>>16) & 0xff;
    1a00:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1a04:	85b2                	mv	a1,a2
    1a06:	0ff57513          	andi	a0,a0,255
    1a0a:	1fffe097          	auipc	ra,0x1fffe
    1a0e:	61e080e7          	jalr	1566(ra) # 20000028 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1a12:	4342                	lw	t1,16(sp)
    1a14:	47d2                	lw	a5,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1a16:	4682                	lw	a3,0(sp)
    1a18:	4722                	lw	a4,8(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1a1a:	979a                	add	a5,a5,t1
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1a1c:	942a                	add	s0,s0,a0
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1a1e:	9736                	add	a4,a4,a3
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1a20:	08078793          	addi	a5,a5,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1a24:	08070713          	addi	a4,a4,128
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1a28:	08040413          	addi	s0,s0,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1a2c:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    1a2e:	f0077713          	andi	a4,a4,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1a32:	8021                	srli	s0,s0,0x8
	return b | (r<<8) | (g<<16);
    1a34:	8fd9                	or	a5,a5,a4
    1a36:	0442                	slli	s0,s0,0x10
    1a38:	8c5d                	or	s0,s0,a5
}
    1a3a:	5082                	lw	ra,32(sp)
    1a3c:	8522                	mv	a0,s0
    1a3e:	4472                	lw	s0,28(sp)
    1a40:	44e2                	lw	s1,24(sp)
    1a42:	02410113          	addi	sp,sp,36
    1a46:	8082                	ret
	if( tween >= 255 ) return hexb;
    1a48:	842e                	mv	s0,a1
    1a4a:	bfc5                	j	1a3a <TweenHexColors+0xca>

00001a4c <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1a4c:	1111                	addi	sp,sp,-28
    1a4e:	c826                	sw	s1,16(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    1a50:	c801a483          	lw	s1,-896(gp) # 2000007c <WS2812LEDs>
	int place = WS2812LEDPlace;
    1a54:	c7c18713          	addi	a4,gp,-900 # 20000078 <WS2812LEDPlace>
    1a58:	4318                	lw	a4,0(a4)
    1a5a:	c7c18613          	addi	a2,gp,-900 # 20000078 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1a5e:	ca22                	sw	s0,20(sp)
    1a60:	cc06                	sw	ra,24(sp)
    1a62:	87aa                	mv	a5,a0
    1a64:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
    1a66:	03050693          	addi	a3,a0,48
    1a6a:	c032                	sw	a2,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    1a6c:	04074a63          	bltz	a4,1ac0 <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    1a70:	04f68a63          	beq	a3,a5,1ac4 <WS2812FillBuffSec.constprop.0+0x78>
	{
		if( place >= ledcount )
    1a74:	04974f63          	blt	a4,s1,1ad2 <WS2812FillBuffSec.constprop.0+0x86>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    1a78:	40f68633          	sub	a2,a3,a5
    1a7c:	4581                	li	a1,0
    1a7e:	853e                	mv	a0,a5
    1a80:	c23a                	sw	a4,4(sp)
    1a82:	9b6ff0ef          	jal	ra,c38 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    1a86:	4712                	lw	a4,4(sp)
    1a88:	cc15                	beqz	s0,1ac4 <WS2812FillBuffSec.constprop.0+0x78>
			{
				if( place == ledcount )
    1a8a:	00e49a63          	bne	s1,a4,1a9e <WS2812FillBuffSec.constprop.0+0x52>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    1a8e:	400206b7          	lui	a3,0x40020
    1a92:	5a9c                	lw	a5,48(a3)
    1a94:	fdf7f793          	andi	a5,a5,-33
    1a98:	da9c                	sw	a5,48(a3)
					WS2812BLEDInUse = 0;
    1a9a:	c601ac23          	sw	zero,-904(gp) # 20000074 <WS2812BLEDInUse>
				}
				place++;
    1a9e:	0705                	addi	a4,a4,1
    1aa0:	a015                	j	1ac4 <WS2812FillBuffSec.constprop.0+0x78>
		(*ptr++) = 0;
    1aa2:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
    1aa6:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    1aaa:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    1aae:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    1ab2:	00079423          	sh	zero,8(a5)
		place++;
    1ab6:	0705                	addi	a4,a4,1
    1ab8:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
    1aba:	fe079f23          	sh	zero,-2(a5)
    1abe:	b77d                	j	1a6c <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
    1ac0:	fef691e3          	bne	a3,a5,1aa2 <WS2812FillBuffSec.constprop.0+0x56>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
    1ac4:	4782                	lw	a5,0(sp)
}
    1ac6:	40e2                	lw	ra,24(sp)
    1ac8:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
    1aca:	c398                	sw	a4,0(a5)
}
    1acc:	44c2                	lw	s1,16(sp)
    1ace:	0171                	addi	sp,sp,28
    1ad0:	8082                	ret
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    1ad2:	c2418613          	addi	a2,gp,-988 # 20000020 <tween>
    1ad6:	4210                	lw	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1ad8:	00170293          	addi	t0,a4,1
    1adc:	9732                	add	a4,a4,a2
    1ade:	0ff00613          	li	a2,255
    1ae2:	00e04363          	bgtz	a4,1ae8 <WS2812FillBuffSec.constprop.0+0x9c>
    1ae6:	4601                	li	a2,0
    1ae8:	007f45b7          	lui	a1,0x7f4
    1aec:	650d                	lui	a0,0x3
    1aee:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.d894f163+0x7eafd9>
    1af2:	0ff50513          	addi	a0,a0,255 # 30ff <ch32fun.c.963ac852+0x503>
    1af6:	c616                	sw	t0,12(sp)
    1af8:	c43e                	sw	a5,8(sp)
    1afa:	c236                	sw	a3,4(sp)
    1afc:	3d95                	jal	1970 <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1afe:	00b55613          	srli	a2,a0,0xb
    1b02:	6709                	lui	a4,0x2
    1b04:	fc870713          	addi	a4,a4,-56 # 1fc8 <bitquartets.10>
    1b08:	8a79                	andi	a2,a2,30
    1b0a:	963a                	add	a2,a2,a4
    1b0c:	47a2                	lw	a5,8(sp)
    1b0e:	00065603          	lhu	a2,0(a2) # 400000 <lib_i2c.c.d894f163+0x3f6f99>
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1b12:	42b2                	lw	t0,12(sp)
    1b14:	4692                	lw	a3,4(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1b16:	00c79023          	sh	a2,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1b1a:	00755613          	srli	a2,a0,0x7
    1b1e:	8a79                	andi	a2,a2,30
    1b20:	963a                	add	a2,a2,a4
    1b22:	00065603          	lhu	a2,0(a2)
		ptr += 6;
    1b26:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1b28:	fec79b23          	sh	a2,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    1b2c:	00355613          	srli	a2,a0,0x3
    1b30:	8a79                	andi	a2,a2,30
    1b32:	963a                	add	a2,a2,a4
    1b34:	00065603          	lhu	a2,0(a2)
    1b38:	fec79c23          	sh	a2,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    1b3c:	00f57613          	andi	a2,a0,15
    1b40:	0606                	slli	a2,a2,0x1
    1b42:	963a                	add	a2,a2,a4
    1b44:	00065603          	lhu	a2,0(a2)
    1b48:	fec79d23          	sh	a2,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1b4c:	01355613          	srli	a2,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1b50:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1b52:	8a79                	andi	a2,a2,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1b54:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1b56:	963a                	add	a2,a2,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1b58:	953a                	add	a0,a0,a4
    1b5a:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1b5e:	00065603          	lhu	a2,0(a2)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1b62:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1b66:	fec79e23          	sh	a2,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1b6a:	8716                	mv	a4,t0
    1b6c:	b711                	j	1a70 <WS2812FillBuffSec.constprop.0+0x24>

00001b6e <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    1b6e:	fcc10113          	addi	sp,sp,-52
    1b72:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    1b74:	400207b7          	lui	a5,0x40020
    1b78:	439c                	lw	a5,0(a5)
{
    1b7a:	d022                	sw	s0,32(sp)
    1b7c:	ce26                	sw	s1,28(sp)
    1b7e:	d806                	sw	ra,48(sp)
    1b80:	d616                	sw	t0,44(sp)
    1b82:	d41a                	sw	t1,40(sp)
    1b84:	d21e                	sw	t2,36(sp)
    1b86:	cc2a                	sw	a0,24(sp)
    1b88:	ca2e                	sw	a1,20(sp)
    1b8a:	c832                	sw	a2,16(sp)
    1b8c:	c636                	sw	a3,12(sp)
    1b8e:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    1b90:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    1b92:	40020437          	lui	s0,0x40020
    1b96:	10000493          	li	s1,256
    1b9a:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    1b9c:	4782                	lw	a5,0(sp)
    1b9e:	4007f793          	andi	a5,a5,1024
    1ba2:	c789                	beqz	a5,1bac <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    1ba4:	4585                	li	a1,1
    1ba6:	c9818513          	addi	a0,gp,-872 # 20000094 <WS2812dmabuff>
    1baa:	354d                	jal	1a4c <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    1bac:	4782                	lw	a5,0(sp)
    1bae:	2007f793          	andi	a5,a5,512
    1bb2:	c789                	beqz	a5,1bbc <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    1bb4:	4581                	li	a1,0
    1bb6:	cc818513          	addi	a0,gp,-824 # 200000c4 <WS2812dmabuff+0x30>
    1bba:	3d49                	jal	1a4c <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    1bbc:	401c                	lw	a5,0(s0)
    1bbe:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    1bc0:	4782                	lw	a5,0(sp)
    1bc2:	1007f793          	andi	a5,a5,256
    1bc6:	fbf1                	bnez	a5,1b9a <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    1bc8:	5402                	lw	s0,32(sp)
    1bca:	50c2                	lw	ra,48(sp)
    1bcc:	52b2                	lw	t0,44(sp)
    1bce:	5322                	lw	t1,40(sp)
    1bd0:	5392                	lw	t2,36(sp)
    1bd2:	44f2                	lw	s1,28(sp)
    1bd4:	4562                	lw	a0,24(sp)
    1bd6:	45d2                	lw	a1,20(sp)
    1bd8:	4642                	lw	a2,16(sp)
    1bda:	46b2                	lw	a3,12(sp)
    1bdc:	4722                	lw	a4,8(sp)
    1bde:	4792                	lw	a5,4(sp)
    1be0:	03410113          	addi	sp,sp,52
    1be4:	30200073          	mret

00001be8 <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
    1be8:	1151                	addi	sp,sp,-12
    1bea:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1bec:	e000f7b7          	lui	a5,0xe000f
{
    1bf0:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1bf2:	4b98                	lw	a4,16(a5)
{
    1bf4:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1bf6:	66b1                	lui	a3,0xc
    1bf8:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x2b19>
    1bfc:	9736                	add	a4,a4,a3
    1bfe:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
    1c00:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
    1c04:	c9018793          	addi	a5,gp,-880 # 2000008c <systick_millis>
    1c08:	4398                	lw	a4,0(a5)
}
    1c0a:	46a2                	lw	a3,8(sp)
	systick_millis++;
    1c0c:	0705                	addi	a4,a4,1
    1c0e:	c398                	sw	a4,0(a5)
}
    1c10:	4712                	lw	a4,4(sp)
    1c12:	4782                	lw	a5,0(sp)
    1c14:	0131                	addi	sp,sp,12
    1c16:	30200073          	mret

00001c1a <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    1c1a:	7179                	addi	sp,sp,-48
    1c1c:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    1c1e:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    1c22:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    1c24:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    1c28:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    1c2c:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    1c30:	cc26                	sw	s1,24(sp)
    1c32:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    1c34:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    1c38:	d416                	sw	t0,40(sp)
    1c3a:	d21a                	sw	t1,36(sp)
    1c3c:	d01e                	sw	t2,32(sp)
    1c3e:	ce22                	sw	s0,28(sp)
    1c40:	ca2a                	sw	a0,20(sp)
    1c42:	c82e                	sw	a1,16(sp)
    1c44:	c632                	sw	a2,12(sp)
    1c46:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    1c48:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    1c4a:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    1c4c:	c305                	beqz	a4,1c6c <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    1c4e:	d2418713          	addi	a4,gp,-732 # 20000120 <i2c_slave_state>
    1c52:	4685                	li	a3,1
    1c54:	07c2                	slli	a5,a5,0x10
    1c56:	83c1                	srli	a5,a5,0x10
    1c58:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1c5c:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1c60:	839d                	srli	a5,a5,0x7
    1c62:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1c64:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1c68:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    1c6c:	0404f793          	andi	a5,s1,64
    1c70:	c795                	beqz	a5,1c9c <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    1c72:	d2418793          	addi	a5,gp,-732 # 20000120 <i2c_slave_state>
    1c76:	0007c703          	lbu	a4,0(a5)
    1c7a:	c379                	beqz	a4,1d40 <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
    1c7c:	40005737          	lui	a4,0x40005
    1c80:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    1c84:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    1c88:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    1c8c:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    1c90:	0ff77713          	andi	a4,a4,255
    1c94:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    1c98:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    1c9c:	0804f793          	andi	a5,s1,128
    1ca0:	c7a1                	beqz	a5,1ce8 <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    1ca2:	d2418793          	addi	a5,gp,-732 # 20000120 <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    1ca6:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1caa:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    1cae:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    1cb2:	400057b7          	lui	a5,0x40005
    1cb6:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    1cba:	d2418413          	addi	s0,gp,-732 # 20000120 <i2c_slave_state>
    1cbe:	cb79                	beqz	a4,1d94 <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1cc0:	01044703          	lbu	a4,16(s0) # 40020010 <_eusrstack+0x2001f810>
    1cc4:	0ee57663          	bgeu	a0,a4,1db0 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    1cc8:	4458                	lw	a4,12(s0)
    1cca:	972a                	add	a4,a4,a0
    1ccc:	00074703          	lbu	a4,0(a4)
    1cd0:	0ff77713          	andi	a4,a4,255
    1cd4:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    1cd8:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    1cda:	c391                	beqz	a5,1cde <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    1cdc:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    1cde:	00244783          	lbu	a5,2(s0)
    1ce2:	0785                	addi	a5,a5,1
    1ce4:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    1ce8:	88c1                	andi	s1,s1,16
    1cea:	cc85                	beqz	s1,1d22 <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    1cec:	40005737          	lui	a4,0x40005
    1cf0:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    1cf4:	07c2                	slli	a5,a5,0x10
    1cf6:	83c1                	srli	a5,a5,0x10
    1cf8:	dff7f793          	andi	a5,a5,-513
    1cfc:	07c2                	slli	a5,a5,0x10
    1cfe:	83c1                	srli	a5,a5,0x10
    1d00:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
    1d04:	d2418793          	addi	a5,gp,-732 # 20000120 <i2c_slave_state>
    1d08:	02a7c703          	lbu	a4,42(a5)
    1d0c:	c74d                	beqz	a4,1db6 <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
    1d0e:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    1d10:	cb09                	beqz	a4,1d22 <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    1d12:	0017c503          	lbu	a0,1(a5)
    1d16:	0027c583          	lbu	a1,2(a5)
    1d1a:	8d89                	sub	a1,a1,a0
    1d1c:	0ff5f593          	andi	a1,a1,255
    1d20:	9702                	jalr	a4
            }
        }
    }
}
    1d22:	4472                	lw	s0,28(sp)
    1d24:	50b2                	lw	ra,44(sp)
    1d26:	52a2                	lw	t0,40(sp)
    1d28:	5312                	lw	t1,36(sp)
    1d2a:	5382                	lw	t2,32(sp)
    1d2c:	44e2                	lw	s1,24(sp)
    1d2e:	4552                	lw	a0,20(sp)
    1d30:	45c2                	lw	a1,16(sp)
    1d32:	4632                	lw	a2,12(sp)
    1d34:	46a2                	lw	a3,8(sp)
    1d36:	4712                	lw	a4,4(sp)
    1d38:	4782                	lw	a5,0(sp)
    1d3a:	6145                	addi	sp,sp,48
    1d3c:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    1d40:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    1d44:	4705                	li	a4,1
    1d46:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    1d4a:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    1d4e:	c695                	beqz	a3,1d7a <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    1d50:	0107c683          	lbu	a3,16(a5)
    1d54:	f4d774e3          	bgeu	a4,a3,1c9c <I2C1_EV_IRQHandler+0x82>
    1d58:	0287c683          	lbu	a3,40(a5)
    1d5c:	f2a1                	bnez	a3,1c9c <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    1d5e:	400056b7          	lui	a3,0x40005
    1d62:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1d66:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    1d68:	96ba                	add	a3,a3,a4
    1d6a:	0ff67613          	andi	a2,a2,255
    1d6e:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    1d72:	0705                	addi	a4,a4,1
    1d74:	00e78123          	sb	a4,2(a5)
    1d78:	b715                	j	1c9c <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    1d7a:	0087c683          	lbu	a3,8(a5)
    1d7e:	f0d77fe3          	bgeu	a4,a3,1c9c <I2C1_EV_IRQHandler+0x82>
    1d82:	01c7c683          	lbu	a3,28(a5)
    1d86:	fa99                	bnez	a3,1c9c <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    1d88:	400056b7          	lui	a3,0x40005
    1d8c:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1d90:	43d4                	lw	a3,4(a5)
    1d92:	bfd9                	j	1d68 <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    1d94:	00844703          	lbu	a4,8(s0)
    1d98:	00e57c63          	bgeu	a0,a4,1db0 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    1d9c:	4058                	lw	a4,4(s0)
    1d9e:	972a                	add	a4,a4,a0
    1da0:	00074703          	lbu	a4,0(a4)
    1da4:	0ff77713          	andi	a4,a4,255
    1da8:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    1dac:	4c1c                	lw	a5,24(s0)
    1dae:	b735                	j	1cda <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    1db0:	00079823          	sh	zero,16(a5)
    1db4:	bf15                	j	1ce8 <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    1db6:	4bd8                	lw	a4,20(a5)
    1db8:	bfa1                	j	1d10 <I2C1_EV_IRQHandler+0xf6>

00001dba <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    1dba:	1151                	addi	sp,sp,-12
    1dbc:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1dbe:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
    1dc2:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1dc4:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    1dc8:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1dca:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1dce:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
    1dd2:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1dd4:	cf89                	beqz	a5,1dee <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    1dd6:	41475783          	lhu	a5,1044(a4)
    1dda:	40070713          	addi	a4,a4,1024
    1dde:	07c2                	slli	a5,a5,0x10
    1de0:	83c1                	srli	a5,a5,0x10
    1de2:	eff7f793          	andi	a5,a5,-257
    1de6:	07c2                	slli	a5,a5,0x10
    1de8:	83c1                	srli	a5,a5,0x10
    1dea:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    1dee:	2006f793          	andi	a5,a3,512
    1df2:	cf89                	beqz	a5,1e0c <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    1df4:	40005737          	lui	a4,0x40005
    1df8:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    1dfc:	07c2                	slli	a5,a5,0x10
    1dfe:	83c1                	srli	a5,a5,0x10
    1e00:	dff7f793          	andi	a5,a5,-513
    1e04:	07c2                	slli	a5,a5,0x10
    1e06:	83c1                	srli	a5,a5,0x10
    1e08:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    1e0c:	4006f693          	andi	a3,a3,1024
    1e10:	ce89                	beqz	a3,1e2a <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    1e12:	40005737          	lui	a4,0x40005
    1e16:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    1e1a:	07c2                	slli	a5,a5,0x10
    1e1c:	83c1                	srli	a5,a5,0x10
    1e1e:	bff7f793          	andi	a5,a5,-1025
    1e22:	07c2                	slli	a5,a5,0x10
    1e24:	83c1                	srli	a5,a5,0x10
    1e26:	40f71a23          	sh	a5,1044(a4)
    }
}
    1e2a:	46a2                	lw	a3,8(sp)
    1e2c:	4712                	lw	a4,4(sp)
    1e2e:	4782                	lw	a5,0(sp)
    1e30:	0131                	addi	sp,sp,12
    1e32:	30200073          	mret
    1e36:	0000                	unimp
    1e38:	63656863          	bltu	a0,s6,2468 <_data_lma+0x3f0>
    1e3c:	73665f6b          	0x73665f6b
    1e40:	655f 7272 203a      	0x203a7272655f
    1e46:	6162                	flw	ft2,24(sp)
    1e48:	2064                	fld	fs1,192(s0)
    1e4a:	6e676973          	csrrsi	s2,0x6e6,14
    1e4e:	7461                	lui	s0,0xffff8
    1e50:	7275                	lui	tp,0xffffd
    1e52:	2065                	jal	1efa <I2C1_ER_IRQHandler+0x140>
    1e54:	3025                	jal	167c <main+0x926>
    1e56:	5838                	lw	a4,112(s0)
    1e58:	0d0a                	slli	s10,s10,0x2
    1e5a:	0000                	unimp
    1e5c:	4d49                	li	s10,18
    1e5e:	5720                	lw	s0,104(a4)
    1e60:	4952                	lw	s2,20(sp)
    1e62:	4554                	lw	a3,12(a0)
    1e64:	4e45                	li	t3,17
    1e66:	5420                	lw	s0,104(s0)
    1e68:	000d0a4f          	fnmadd.s	fs4,fs10,ft0,ft0,rne
    1e6c:	4d49                	li	s10,18
    1e6e:	5220                	lw	s0,96(a2)
    1e70:	4145                	li	sp,17
    1e72:	4544                	lw	s1,12(a0)
    1e74:	204e                	fld	ft0,208(sp)
    1e76:	5246                	lw	tp,112(sp)
    1e78:	0a2e4d4f          	fnmadd.d	fs10,ft8,ft2,ft1,rmm
    1e7c:	000d                	c.nop	3
    1e7e:	0000                	unimp
    1e80:	000a                	c.slli	zero,0x2
    1e82:	0000                	unimp
    1e84:	6574                	flw	fa3,76(a0)
    1e86:	69667473          	csrrci	s0,0x696,12
    1e8a:	656c                	flw	fa1,76(a0)
    1e8c:	742e                	flw	fs0,232(sp)
    1e8e:	7478                	flw	fa4,108(s0)
    1e90:	0000                	unimp
    1e92:	0000                	unimp
    1e94:	3249                	jal	1816 <main+0xac0>
    1e96:	6c532043          	0x6c532043
    1e9a:	7661                	lui	a2,0xffff8
    1e9c:	2065                	jal	1f44 <I2C1_ER_IRQHandler+0x18a>
    1e9e:	6f6d                	lui	t5,0x1b
    1ea0:	6564                	flw	fs1,76(a0)
    1ea2:	0000                	unimp
    1ea4:	4d0a                	lw	s10,128(sp)
    1ea6:	746e756f          	jal	a0,e95ec <lib_i2c.c.d894f163+0xe0585>
    1eaa:	6e69                	lui	t3,0x1a
    1eac:	6f762067          	0x6f762067
    1eb0:	756c                	flw	fa1,108(a0)
    1eb2:	656d                	lui	a0,0x1b
    1eb4:	0a2e                	slli	s4,s4,0xb
    1eb6:	000d                	c.nop	3
    1eb8:	6e65704f          	fnmadd.q	ft0,fa0,ft6,fa3
    1ebc:	6e69                	lui	t3,0x1a
    1ebe:	69662067          	0x69662067
    1ec2:	656c                	flw	fa1,76(a0)
    1ec4:	2220                	fld	fs0,64(a2)
    1ec6:	7325                	lui	t1,0xfffe9
    1ec8:	0a22                	slli	s4,s4,0x8
    1eca:	000d                	c.nop	3
    1ecc:	6568                	flw	fa0,76(a0)
    1ece:	6c6c                	flw	fa1,92(s0)
    1ed0:	6f77206f          	j	74dc6 <lib_i2c.c.d894f163+0x6bd5f>
    1ed4:	6c72                	flw	fs8,28(sp)
    1ed6:	2064                	fld	fs1,192(s0)
    1ed8:	3939                	jal	1af6 <WS2812FillBuffSec.constprop.0+0xaa>
    1eda:	3939                	jal	1af8 <WS2812FillBuffSec.constprop.0+0xac>
    1edc:	3939                	jal	1afa <WS2812FillBuffSec.constprop.0+0xae>
    1ede:	3939                	jal	1afc <WS2812FillBuffSec.constprop.0+0xb0>
    1ee0:	3939                	jal	1afe <WS2812FillBuffSec.constprop.0+0xb2>
    1ee2:	3939                	jal	1b00 <WS2812FillBuffSec.constprop.0+0xb4>
    1ee4:	3939                	jal	1b02 <WS2812FillBuffSec.constprop.0+0xb6>
    1ee6:	3939                	jal	1b04 <WS2812FillBuffSec.constprop.0+0xb8>
    1ee8:	3939                	jal	1b06 <WS2812FillBuffSec.constprop.0+0xba>
    1eea:	3939                	jal	1b08 <WS2812FillBuffSec.constprop.0+0xbc>
    1eec:	0a21                	addi	s4,s4,8
    1eee:	000d                	c.nop	3
    1ef0:	6c0a                	flw	fs8,128(sp)
    1ef2:	6b656573          	csrrsi	a0,0x6b6,10
    1ef6:	7420                	flw	fs0,104(s0)
    1ef8:	7525206f          	j	5464a <lib_i2c.c.d894f163+0x4b5e3>
    1efc:	0d0a                	slli	s10,s10,0x2
    1efe:	0000                	unimp
    1f00:	6372                	flw	ft6,28(sp)
    1f02:	253d                	jal	2530 <_data_lma+0x4b8>
    1f04:	0a75                	addi	s4,s4,29
    1f06:	000d                	c.nop	3
    1f08:	6552                	flw	fa0,20(sp)
    1f0a:	6461                	lui	s0,0x18
    1f0c:	2520                	fld	fs0,72(a0)
    1f0e:	2075                	jal	1fba <I2C1_ER_IRQHandler+0x200>
    1f10:	7962                	flw	fs2,56(sp)
    1f12:	6574                	flw	fa3,76(a0)
    1f14:	000d0a73          	0xd0a73
    1f18:	69727473          	csrrci	s0,0x697,4
    1f1c:	676e                	flw	fa4,216(sp)
    1f1e:	203a                	fld	ft0,392(sp)
    1f20:	7325                	lui	t1,0xfffe9
    1f22:	0d0a                	slli	s10,s10,0x2
    1f24:	0000                	unimp
    1f26:	0000                	unimp
    1f28:	6425                	lui	s0,0x9
    1f2a:	6b20                	flw	fs0,80(a4)
    1f2c:	2062                	fld	ft0,24(sp)
    1f2e:	66206f73          	csrrsi	t5,0x662,0
    1f32:	7261                	lui	tp,0xffff8
    1f34:	2e2e                	fld	ft8,200(sp)
    1f36:	202e                	fld	ft0,200(sp)
    1f38:	0020                	addi	s0,sp,8
    1f3a:	0000                	unimp
    1f3c:	0d0a                	slli	s10,s10,0x2
    1f3e:	6f4c                	flw	fa1,28(a4)
    1f40:	6461                	lui	s0,0x18
    1f42:	6465                	lui	s0,0x19
    1f44:	2520                	fld	fs0,72(a0)
    1f46:	2064                	fld	fs1,192(s0)
    1f48:	6f6c696b          	0x6f6c696b
    1f4c:	7962                	flw	fs2,56(sp)
    1f4e:	6574                	flw	fa3,76(a0)
    1f50:	0d0a2e73          	csrrs	t3,0xd0,s4
    1f54:	0000                	unimp
    1f56:	0000                	unimp
    1f58:	6572                	flw	fa0,28(sp)
    1f5a:	6461                	lui	s0,0x18
    1f5c:	7220                	flw	fs0,96(a2)
    1f5e:	7365                	lui	t1,0xffff9
    1f60:	6c75                	lui	s8,0x1d
    1f62:	3a74                	fld	fa3,240(a2)
    1f64:	2520                	fld	fs0,72(a0)
    1f66:	0a75                	addi	s4,s4,29
    1f68:	000d                	c.nop	3
    1f6a:	0000                	unimp
    1f6c:	74697277          	0x74697277
    1f70:	2065                	jal	2018 <cvt.2+0x30>
    1f72:	7265                	lui	tp,0xffff9
    1f74:	6f72                	flw	ft10,28(sp)
    1f76:	3a72                	fld	fs4,312(sp)
    1f78:	2520                	fld	fs0,72(a0)
    1f7a:	0a75                	addi	s4,s4,29
    1f7c:	000d                	c.nop	3
    1f7e:	0000                	unimp
    1f80:	6f4c                	flw	fa1,28(a4)
    1f82:	676e                	flw	fa4,216(sp)
    1f84:	5020                	lw	s0,96(s0)
    1f86:	6572                	flw	fa0,28(sp)
    1f88:	00007373          	csrrci	t1,ustatus,0
    1f8c:	676e6953          	0x676e6953
    1f90:	656c                	flw	fa1,76(a0)
    1f92:	4320                	lw	s0,64(a4)
    1f94:	696c                	flw	fa1,84(a0)
    1f96:	00006b63          	bltu	zero,zero,1fac <I2C1_ER_IRQHandler+0x1f2>
    1f9a:	0000                	unimp
    1f9c:	6f44                	flw	fs1,28(a4)
    1f9e:	6275                	lui	tp,0x1d
    1fa0:	656c                	flw	fa1,76(a0)
    1fa2:	4320                	lw	s0,64(a4)
    1fa4:	696c                	flw	fa1,84(a0)
    1fa6:	00006b63          	bltu	zero,zero,1fbc <I2C1_ER_IRQHandler+0x202>
    1faa:	0000                	unimp
    1fac:	6e45                	lui	t3,0x11
    1fae:	65646f63          	bltu	s0,s6,260c <_data_lma+0x594>
    1fb2:	3a72                	fld	fs4,312(sp)
    1fb4:	2520                	fld	fs0,72(a0)
    1fb6:	0a64                	addi	s1,sp,284
    1fb8:	0000                	unimp
    1fba:	0000                	unimp
    1fbc:	4d49                	li	s10,18
    1fbe:	4820                	lw	s0,80(s0)
    1fc0:	5245                	li	tp,-15
    1fc2:	0a45                	addi	s4,s4,17
    1fc4:	000d                	c.nop	3
	...

00001fc8 <bitquartets.10>:
    1fc8:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    1fd8:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

00001fe8 <cvt.2>:
    1fe8:	9a80 4145 418e 808f 4545 4945 4949 8f8e     ..EA.A..EEEIII..
    1ff8:	9290 4f92 4f99 5555 9959 9b9a 9d9c 9f9e     ...O.OUUY.......
    2008:	4941 554f a5a5 a7a6 a9a8 abaa adac afae     AIOU............
    2018:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    2028:	c1c0 c3c2 c5c4 c7c6 c9c8 cbca cdcc cfce     ................
    2038:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    2048:	e1e0 e3e2 e5e4 e7e6 e9e8 ebea edec efee     ................
    2058:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00002068 <message.0>:
    2068:	6548 6c6c 206f 6f57 6c72 2164 0a0d 0000     Hello World!....

Disassembly of section .data:

20000000 <i2c_registers>:
20000000:	00aa 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000020 <tween>:
20000020:	ff42 ffff 0000 0000                         B.......

20000028 <FastMultiply>:
{
20000028:	87aa                	mv	a5,a0
	uint32_t ret = 0;
2000002a:	4501                	li	a0,0
		if( multiplicand & 1 )
2000002c:	0015f713          	andi	a4,a1,1
20000030:	c311                	beqz	a4,20000034 <FastMultiply+0xc>
			ret += mutliplicant;
20000032:	953e                	add	a0,a0,a5
		multiplicand>>=1;
20000034:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
20000036:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000038:	f9f5                	bnez	a1,2000002c <FastMultiply+0x4>
}
2000003a:	8082                	ret

2000003c <DMA1_Channel4_IRQHandler>:
{
2000003c:	1151                	addi	sp,sp,-12
2000003e:	c23a                	sw	a4,4(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000040:	40020737          	lui	a4,0x40020
{
20000044:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000046:	435c                	lw	a5,4(a4)
{
20000048:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000004a:	6689                	lui	a3,0x2
2000004c:	8fd5                	or	a5,a5,a3
2000004e:	c35c                	sw	a5,4(a4)
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000050:	400117b7          	lui	a5,0x40011
20000054:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000058:	47d8                	lw	a4,12(a5)
}
2000005a:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
2000005c:	04074713          	xori	a4,a4,64
20000060:	c7d8                	sw	a4,12(a5)
}
20000062:	4712                	lw	a4,4(sp)
20000064:	4782                	lw	a5,0(sp)
20000066:	0131                	addi	sp,sp,12
20000068:	30200073          	mret
