
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	2230006f          	j	a22 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0af0                	addi	a2,sp,348
   a:	0000                	unimp
   c:	0a98                	addi	a4,sp,336
	...
  2e:	0000                	unimp
  30:	150a                	slli	a0,a0,0x22
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0a98                	addi	a4,sp,336
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0a98                	addi	a4,sp,336
  42:	0000                	unimp
  44:	0a98                	addi	a4,sp,336
  46:	0000                	unimp
  48:	0a98                	addi	a4,sp,336
  4a:	0000                	unimp
  4c:	0a98                	addi	a4,sp,336
  4e:	0000                	unimp
  50:	0a98                	addi	a4,sp,336
  52:	0000                	unimp
  54:	0a98                	addi	a4,sp,336
  56:	0000                	unimp
  58:	0a98                	addi	a4,sp,336
  5a:	0000                	unimp
  5c:	0a98                	addi	a4,sp,336
  5e:	0000                	unimp
  60:	153c                	addi	a5,sp,680
  62:	0000                	unimp
  64:	0030                	addi	a2,sp,8
  66:	2000                	fld	fs0,0(s0)
  68:	0a98                	addi	a4,sp,336
  6a:	0000                	unimp
  6c:	0a98                	addi	a4,sp,336
  6e:	0000                	unimp
  70:	0a98                	addi	a4,sp,336
  72:	0000                	unimp
  74:	0a98                	addi	a4,sp,336
  76:	0000                	unimp
  78:	15be                	slli	a1,a1,0x2f
  7a:	0000                	unimp
  7c:	175e                	slli	a4,a4,0x37
  7e:	0000                	unimp
  80:	0a98                	addi	a4,sp,336
  82:	0000                	unimp
  84:	0a98                	addi	a4,sp,336
  86:	0000                	unimp
  88:	0a98                	addi	a4,sp,336
  8a:	0000                	unimp
  8c:	0a98                	addi	a4,sp,336
  8e:	0000                	unimp
  90:	0a98                	addi	a4,sp,336
  92:	0000                	unimp
  94:	0a98                	addi	a4,sp,336
  96:	0000                	unimp
  98:	0a98                	addi	a4,sp,336
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	andi	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srli	a1,a1,0x1
      ae:	0606                	slli	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	slli	a2,a2,0x1
      d4:	0686                	slli	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srli	a3,a3,0x1
      e6:	8205                	srli	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
{
     136:	1131                	addi	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
	int overflow = 0;
     144:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     146:	cab5                	beqz	a3,1ba <mini_pad+0x84>
	if(len > pad_to) {
     148:	0096d463          	bge	a3,s1,150 <mini_pad+0x1a>
     14c:	84b6                	mv	s1,a3
		overflow = 1;
     14e:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     150:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     154:	00045363          	bgez	s0,15a <mini_pad+0x24>
     158:	4401                	li	s0,0
     15a:	8622                	mv	a2,s0
     15c:	853a                	mv	a0,a4
     15e:	c23e                	sw	a5,4(sp)
     160:	c01a                	sw	t1,0(sp)
     162:	3dd000ef          	jal	ra,d3e <memset>
     166:	4302                	lw	t1,0(sp)
     168:	4792                	lw	a5,4(sp)
     16a:	872a                	mv	a4,a0
     16c:	008506b3          	add	a3,a0,s0
     170:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     172:	40c485b3          	sub	a1,s1,a2
     176:	04b04463          	bgtz	a1,1be <mini_pad+0x88>
     17a:	0004d363          	bgez	s1,180 <mini_pad+0x4a>
     17e:	4481                	li	s1,0
     180:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     184:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     188:	02030463          	beqz	t1,1b0 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     18c:	02c77263          	bgeu	a4,a2,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     190:	02a00793          	li	a5,42
     194:	fef60fa3          	sb	a5,-1(a2)
     198:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     19c:	00d77a63          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1a0:	fef60f23          	sb	a5,-2(a2)
     1a4:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     1a8:	00d77463          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1ac:	fef60ea3          	sb	a5,-3(a2)
}
     1b0:	40c2                	lw	ra,16(sp)
     1b2:	4432                	lw	s0,12(sp)
     1b4:	44a2                	lw	s1,8(sp)
     1b6:	0151                	addi	sp,sp,20
     1b8:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1ba:	86a6                	mv	a3,s1
     1bc:	bf51                	j	150 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1be:	00c785b3          	add	a1,a5,a2
     1c2:	0005c503          	lbu	a0,0(a1)
     1c6:	00c685b3          	add	a1,a3,a2
     1ca:	0605                	addi	a2,a2,1
     1cc:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1d0:	b74d                	j	172 <mini_pad+0x3c>

000001d2 <_puts>:
{
     1d2:	832a                	mv	t1,a0
     1d4:	852e                	mv	a0,a1
	if(!buf) return len;
     1d6:	ce01                	beqz	a2,1ee <_puts+0x1c>
	char * p0 = b->buffer;
     1d8:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1dc:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1de:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1e0:	00a74863          	blt	a4,a0,1f0 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1e4:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1e8:	4248                	lw	a0,4(a2)
     1ea:	40550533          	sub	a0,a0,t0
}
     1ee:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1f0:	4614                	lw	a3,8(a2)
     1f2:	fff68593          	addi	a1,a3,-1
     1f6:	4214                	lw	a3,0(a2)
     1f8:	96ae                	add	a3,a3,a1
     1fa:	fed785e3          	beq	a5,a3,1e4 <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1fe:	00178693          	addi	a3,a5,1
     202:	c254                	sw	a3,4(a2)
     204:	00e306b3          	add	a3,t1,a4
     208:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     20c:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     20e:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     212:	b7f1                	j	1de <_puts+0xc>

00000214 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     214:	e0000737          	lui	a4,0xe0000
     218:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     21c:	0f470693          	addi	a3,a4,244
     220:	0807f793          	andi	a5,a5,128
     224:	fbf5                	bnez	a5,218 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     226:	783027b7          	lui	a5,0x78302
     22a:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     22e:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     230:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     232:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     236:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     238:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     23a:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     23e:	0807f793          	andi	a5,a5,128
     242:	ffe5                	bnez	a5,23a <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     244:	00e557b3          	srl	a5,a0,a4
     248:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     24c:	03000793          	li	a5,48
     250:	00d35463          	bge	t1,a3,258 <PrintHex+0x44>
     254:	05700793          	li	a5,87
     258:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     25a:	07a2                	slli	a5,a5,0x8
     25c:	0857e793          	ori	a5,a5,133
     260:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     264:	1771                	addi	a4,a4,-4
     266:	fcb71ae3          	bne	a4,a1,23a <PrintHex+0x26>
}
     26a:	8082                	ret

0000026c <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     26c:	1101                	addi	sp,sp,-32
     26e:	ce06                	sw	ra,28(sp)
     270:	cc22                	sw	s0,24(sp)
     272:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     274:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     276:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     278:	00055763          	bgez	a0,286 <mini_itoa.part.0+0x1a>
     27c:	e689                	bnez	a3,286 <mini_itoa.part.0+0x1a>
		negative = 1;
     27e:	4785                	li	a5,1
		value = -value;
     280:	40a00333          	neg	t1,a0
		negative = 1;
     284:	c03e                	sw	a5,0(sp)
     286:	06100413          	li	s0,97
     28a:	c219                	beqz	a2,290 <mini_itoa.part.0+0x24>
     28c:	04100413          	li	s0,65
	int	negative = 0;
     290:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     292:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     294:	851a                	mv	a0,t1
     296:	c83a                	sw	a4,16(sp)
     298:	c21a                	sw	t1,4(sp)
     29a:	c62e                	sw	a1,12(sp)
     29c:	c41a                	sw	t1,8(sp)
     29e:	35b9                	jal	ec <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2a0:	47a5                	li	a5,9
     2a2:	4322                	lw	t1,8(sp)
     2a4:	45b2                	lw	a1,12(sp)
     2a6:	4742                	lw	a4,16(sp)
     2a8:	0ff57693          	andi	a3,a0,255
     2ac:	06a7e163          	bltu	a5,a0,30e <mini_itoa.part.0+0xa2>
     2b0:	03068693          	addi	a3,a3,48
     2b4:	0ff6f693          	andi	a3,a3,255
     2b8:	00148793          	addi	a5,s1,1
     2bc:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2c0:	851a                	mv	a0,t1
     2c2:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2c4:	c63e                	sw	a5,12(sp)
		value /= radix;
     2c6:	c42e                	sw	a1,8(sp)
     2c8:	3be5                	jal	c0 <__hidden___udivsi3>
	} while (value > 0);
     2ca:	4692                	lw	a3,4(sp)
     2cc:	45a2                	lw	a1,8(sp)
     2ce:	47b2                	lw	a5,12(sp)
     2d0:	4742                	lw	a4,16(sp)
		value /= radix;
     2d2:	832a                	mv	t1,a0
	} while (value > 0);
     2d4:	02b6fb63          	bgeu	a3,a1,30a <mini_itoa.part.0+0x9e>
	if (negative)
     2d8:	4682                	lw	a3,0(sp)
     2da:	c699                	beqz	a3,2e8 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2dc:	02d00693          	li	a3,45
     2e0:	00d78023          	sb	a3,0(a5)
     2e4:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2e8:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2ec:	01f55693          	srli	a3,a0,0x1f
     2f0:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2f2:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2f6:	8685                	srai	a3,a3,0x1
     2f8:	4601                	li	a2,0
     2fa:	17fd                	addi	a5,a5,-1
     2fc:	00d64b63          	blt	a2,a3,312 <mini_itoa.part.0+0xa6>
}
     300:	40f2                	lw	ra,28(sp)
     302:	4462                	lw	s0,24(sp)
     304:	44d2                	lw	s1,20(sp)
     306:	6105                	addi	sp,sp,32
     308:	8082                	ret
	} while (value > 0);
     30a:	84be                	mv	s1,a5
     30c:	b761                	j	294 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     30e:	96a2                	add	a3,a3,s0
     310:	b755                	j	2b4 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     312:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     316:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     31a:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     31e:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     320:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     324:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     328:	bfc9                	j	2fa <mini_itoa.part.0+0x8e>

0000032a <Neo_render_colorFlashing.constprop.0>:

    return led_arr[ledIdx].packed;
}

uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
    if (systick_handleTimeout(&fr->ref_time, fr->frame_duration)) {
     32a:	c1018693          	addi	a3,gp,-1008 # 2000000c <leds_frame>
	uint32_t now = millis();
     32e:	c6c1a603          	lw	a2,-916(gp) # 20000068 <systick_millis>
	if (now - *ref_time > duration) {
     332:	4a9c                	lw	a5,16(a3)
     334:	42cc                	lw	a1,4(a3)
uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
     336:	fc410113          	addi	sp,sp,-60
     33a:	dc06                	sw	ra,56(sp)
     33c:	da22                	sw	s0,52(sp)
     33e:	d826                	sw	s1,48(sp)
     340:	c82a                	sw	a0,16(sp)
	if (now - *ref_time > duration) {
     342:	40f607b3          	sub	a5,a2,a5
     346:	0cf5fc63          	bgeu	a1,a5,41e <Neo_render_colorFlashing.constprop.0+0xf4>
     34a:	c1018493          	addi	s1,gp,-1008 # 2000000c <leds_frame>
    return ani->colors[ani->ref_index];
     34e:	c2818593          	addi	a1,gp,-984 # 20000024 <color_ani>
        fr->frame_value += 1;
     352:	0094c783          	lbu	a5,9(s1)
    return ani->colors[ani->ref_index];
     356:	0055c703          	lbu	a4,5(a1)
		*ref_time = now;
     35a:	c890                	sw	a2,16(s1)
    return ani->colors[ani->ref_index];
     35c:	4190                	lw	a2,0(a1)
        fr->frame_value += 1;
     35e:	0785                	addi	a5,a5,1
     360:	0ff7f793          	andi	a5,a5,255
    return ani->colors[ani->ref_index];
     364:	00271513          	slli	a0,a4,0x2
        fr->frame_value += 1;
     368:	00f484a3          	sb	a5,9(s1)
    return ani->colors[ani->ref_index];
     36c:	962a                	add	a2,a2,a0
     36e:	c43a                	sw	a4,8(sp)
     370:	00064703          	lbu	a4,0(a2)
     374:	420c                	lw	a1,0(a2)
        RGB_t color = animation_currentColor(ani);

        for (int i=0; i < NR_LEDS; i++) {
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     376:	00879513          	slli	a0,a5,0x8
    return ani->colors[ani->ref_index];
     37a:	c63a                	sw	a4,12(sp)
     37c:	00164703          	lbu	a4,1(a2)
     380:	d62e                	sw	a1,44(sp)
     382:	d02e                	sw	a1,32(sp)
     384:	c23a                	sw	a4,4(sp)
     386:	00264703          	lbu	a4,2(a2)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     38a:	06400593          	li	a1,100
     38e:	8d1d                	sub	a0,a0,a5
     390:	ca3e                	sw	a5,20(sp)
    return ani->colors[ani->ref_index];
     392:	c03a                	sw	a4,0(sp)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     394:	3315                	jal	b8 <__divsi3>
     396:	0ff57593          	andi	a1,a0,255
     39a:	6509                	lui	a0,0x2
     39c:	85450513          	addi	a0,a0,-1964 # 1854 <SIN_LUT2>
     3a0:	952e                	add	a0,a0,a1
     3a2:	00054583          	lbu	a1,0(a0)
     3a6:	47d2                	lw	a5,20(sp)
     3a8:	cfc18693          	addi	a3,gp,-772 # 200000f8 <led_arr>
     3ac:	c2818413          	addi	s0,gp,-984 # 20000024 <color_ani>
     3b0:	ce3e                	sw	a5,28(sp)
     3b2:	47b2                	lw	a5,12(sp)
     3b4:	cc36                	sw	a3,24(sp)
     3b6:	ca2e                	sw	a1,20(sp)
     3b8:	02f10023          	sb	a5,32(sp)
     3bc:	4792                	lw	a5,4(sp)
     3be:	02f100a3          	sb	a5,33(sp)
     3c2:	4782                	lw	a5,0(sp)
     3c4:	02f10123          	sb	a5,34(sp)
     3c8:	5502                	lw	a0,32(sp)
     3ca:	d22a                	sw	a0,36(sp)
     3cc:	4532                	lw	a0,12(sp)
     3ce:	39c9                	jal	a0 <__mulsi3>
     3d0:	8521                	srai	a0,a0,0x8
     3d2:	45d2                	lw	a1,20(sp)
     3d4:	02a10223          	sb	a0,36(sp)
     3d8:	4512                	lw	a0,4(sp)
     3da:	31d9                	jal	a0 <__mulsi3>
     3dc:	8521                	srai	a0,a0,0x8
     3de:	45d2                	lw	a1,20(sp)
     3e0:	02a102a3          	sb	a0,37(sp)
     3e4:	4502                	lw	a0,0(sp)
     3e6:	396d                	jal	a0 <__mulsi3>
     3e8:	8521                	srai	a0,a0,0x8
     3ea:	02a10323          	sb	a0,38(sp)
     3ee:	46e2                	lw	a3,24(sp)
     3f0:	5512                	lw	a0,36(sp)
        for (int i=0; i < NR_LEDS; i++) {
     3f2:	d1418613          	addi	a2,gp,-748 # 20000110 <printBuff>
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     3f6:	c288                	sw	a0,0(a3)
        for (int i=0; i < NR_LEDS; i++) {
     3f8:	0691                	addi	a3,a3,4
     3fa:	45d2                	lw	a1,20(sp)
     3fc:	47f2                	lw	a5,28(sp)
     3fe:	fad619e3          	bne	a2,a3,3b0 <Neo_render_colorFlashing.constprop.0+0x86>
        }

        if (fr->frame_value >= 100) {
     402:	06300693          	li	a3,99
     406:	00f6fc63          	bgeu	a3,a5,41e <Neo_render_colorFlashing.constprop.0+0xf4>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     40a:	47a2                	lw	a5,8(sp)
     40c:	00444583          	lbu	a1,4(s0)
            fr->frame_value = 0;
     410:	000484a3          	sb	zero,9(s1)
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     414:	00178513          	addi	a0,a5,1
     418:	39e5                	jal	110 <__modsi3>
     41a:	00a402a3          	sb	a0,5(s0)

            animation_step(ani);
        }
    }

    return led_arr[ledIdx].packed;
     41e:	47c2                	lw	a5,16(sp)
}
     420:	50e2                	lw	ra,56(sp)
     422:	5452                	lw	s0,52(sp)
    return led_arr[ledIdx].packed;
     424:	00279513          	slli	a0,a5,0x2
     428:	cfc18793          	addi	a5,gp,-772 # 200000f8 <led_arr>
     42c:	953e                	add	a0,a0,a5
}
     42e:	4108                	lw	a0,0(a0)
     430:	54c2                	lw	s1,48(sp)
     432:	03c10113          	addi	sp,sp,60
     436:	8082                	ret

00000438 <WS2812FillBuffSec>:
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };
#endif

	int i;
	uint16_t * end = ptr + numhalfwords;
     438:	0586                	slli	a1,a1,0x1
{
     43a:	711d                	addi	sp,sp,-96
	uint16_t * end = ptr + numhalfwords;
     43c:	00b507b3          	add	a5,a0,a1
     440:	c83e                	sw	a5,16(sp)
	int ledcount = WS2812LEDs;
     442:	c5c1a783          	lw	a5,-932(gp) # 20000058 <WS2812LEDs>
{
     446:	caa6                	sw	s1,84(sp)
     448:	cca2                	sw	s0,88(sp)
	int ledcount = WS2812LEDs;
     44a:	ce3e                	sw	a5,28(sp)
	int place = WS2812LEDPlace;
     44c:	c5818713          	addi	a4,gp,-936 # 20000054 <WS2812LEDPlace>
     450:	4304                	lw	s1,0(a4)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
     452:	c5818793          	addi	a5,gp,-936 # 20000054 <WS2812LEDPlace>
{
     456:	ce86                	sw	ra,92(sp)
     458:	842a                	mv	s0,a0
     45a:	d832                	sw	a2,48(sp)
     45c:	da3e                	sw	a5,52(sp)
	while( place < 0 && ptr != end )
     45e:	0604c363          	bltz	s1,4c4 <WS2812FillBuffSec+0x8c>
     462:	c026                	sw	s1,0(sp)
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
     464:	47c2                	lw	a5,16(sp)
     466:	4482                	lw	s1,0(sp)
     468:	06f40163          	beq	s0,a5,4ca <WS2812FillBuffSec+0x92>
	{
		if( place >= ledcount )
     46c:	4782                	lw	a5,0(sp)
     46e:	4772                	lw	a4,28(sp)
     470:	06e7c463          	blt	a5,a4,4d8 <WS2812FillBuffSec+0xa0>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
     474:	47c2                	lw	a5,16(sp)
     476:	4581                	li	a1,0
     478:	8522                	mv	a0,s0
     47a:	40878633          	sub	a2,a5,s0
     47e:	0c1000ef          	jal	ra,d3e <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
     482:	57c2                	lw	a5,48(sp)
     484:	c3b9                	beqz	a5,4ca <WS2812FillBuffSec+0x92>
			{
				if( place == ledcount )
     486:	4782                	lw	a5,0(sp)
     488:	4772                	lw	a4,28(sp)
     48a:	00e79a63          	bne	a5,a4,49e <WS2812FillBuffSec+0x66>
				{
					// Take the DMA out of circular mode and let it expire.
#if defined(CH57x) || defined(CH58x) || defined(CH59x)
					R8_SPI_INTER_EN &= ~RB_SPI_IE_DMA_END;  // Disable DMA end interrupt
#else
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
     48e:	40020737          	lui	a4,0x40020
     492:	5b1c                	lw	a5,48(a4)
     494:	fdf7f793          	andi	a5,a5,-33
     498:	db1c                	sw	a5,48(a4)
#endif
					WS2812BLEDInUse = 0;
     49a:	c401aa23          	sw	zero,-940(gp) # 20000050 <WS2812BLEDInUse>
				}
				place++;
     49e:	4782                	lw	a5,0(sp)
     4a0:	00178493          	addi	s1,a5,1
     4a4:	a01d                	j	4ca <WS2812FillBuffSec+0x92>
		(*ptr++) = 0;
     4a6:	00041023          	sh	zero,0(s0)
		(*ptr++) = 0;
     4aa:	00041123          	sh	zero,2(s0)
		(*ptr++) = 0;
     4ae:	00041223          	sh	zero,4(s0)
		(*ptr++) = 0;
     4b2:	00041323          	sh	zero,6(s0)
		(*ptr++) = 0;
     4b6:	00041423          	sh	zero,8(s0)
		place++;
     4ba:	0485                	addi	s1,s1,1
     4bc:	0431                	addi	s0,s0,12
		(*ptr++) = 0;
     4be:	fe041f23          	sh	zero,-2(s0)
		place++;
     4c2:	bf71                	j	45e <WS2812FillBuffSec+0x26>
	while( place < 0 && ptr != end )
     4c4:	47c2                	lw	a5,16(sp)
     4c6:	fef410e3          	bne	s0,a5,4a6 <WS2812FillBuffSec+0x6e>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
     4ca:	57d2                	lw	a5,52(sp)
}
     4cc:	40f6                	lw	ra,92(sp)
     4ce:	4466                	lw	s0,88(sp)
	WS2812LEDPlace = place;
     4d0:	c384                	sw	s1,0(a5)
}
     4d2:	44d6                	lw	s1,84(sp)
     4d4:	6125                	addi	sp,sp,96
     4d6:	8082                	ret
    color_ani.ref_index = 0;
    memset(led_arr, 0, sizeof(led_arr));
}

uint32_t WS2812BLEDCallback(int ledIdx){
    leds_frame.frame_duration = 70;
     4d8:	c1018793          	addi	a5,gp,-1008 # 2000000c <leds_frame>
     4dc:	04600713          	li	a4,70
     4e0:	c3d8                	sw	a4,4(a5)

    switch (Neo_LedCmd) {
     4e2:	c241c703          	lbu	a4,-988(gp) # 20000020 <Neo_LedCmd>
     4e6:	4691                	li	a3,4
     4e8:	c1018793          	addi	a5,gp,-1008 # 2000000c <leds_frame>
     4ec:	177d                	addi	a4,a4,-1
     4ee:	0ff77713          	andi	a4,a4,255
     4f2:	40e6ed63          	bltu	a3,a4,90c <WS2812FillBuffSec+0x4d4>
     4f6:	6685                	lui	a3,0x1
     4f8:	070a                	slli	a4,a4,0x2
     4fa:	7dc68693          	addi	a3,a3,2012 # 17dc <I2C1_ER_IRQHandler+0x7e>
     4fe:	9736                	add	a4,a4,a3
     500:	4318                	lw	a4,0(a4)
     502:	8702                	jr	a4
	uint32_t now = millis();
     504:	c6c1a683          	lw	a3,-916(gp) # 20000068 <systick_millis>
	if (now - *ref_time > duration) {
     508:	4b98                	lw	a4,16(a5)
     50a:	04600613          	li	a2,70
     50e:	40e68733          	sub	a4,a3,a4
     512:	cfc18313          	addi	t1,gp,-772 # 200000f8 <led_arr>
     516:	06e67063          	bgeu	a2,a4,576 <WS2812FillBuffSec+0x13e>
		*ref_time = now;
     51a:	cb94                	sw	a3,16(a5)
		return 1;
     51c:	cfc18493          	addi	s1,gp,-772 # 200000f8 <led_arr>
        for (int i=0; i < NR_LEDS; i++) {
     520:	4681                	li	a3,0
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     522:	00e7c703          	lbu	a4,14(a5)
    return ani->colors[(index/steps) % ani->num_colors];
     526:	4595                	li	a1,5
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     528:	c436                	sw	a3,8(sp)
     52a:	00d70533          	add	a0,a4,a3
    return ani->colors[(index/steps) % ani->num_colors];
     52e:	0ff57513          	andi	a0,a0,255
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     532:	c23a                	sw	a4,4(sp)
    return ani->colors[(index/steps) % ani->num_colors];
     534:	3671                	jal	c0 <__hidden___udivsi3>
     536:	c2818613          	addi	a2,gp,-984 # 20000024 <color_ani>
     53a:	00464583          	lbu	a1,4(a2)
     53e:	0ff57513          	andi	a0,a0,255
     542:	36f9                	jal	110 <__modsi3>
     544:	c2818613          	addi	a2,gp,-984 # 20000024 <color_ani>
     548:	420c                	lw	a1,0(a2)
     54a:	050a                	slli	a0,a0,0x2
        for (int i=0; i < NR_LEDS; i++) {
     54c:	46a2                	lw	a3,8(sp)
    return ani->colors[(index/steps) % ani->num_colors];
     54e:	952e                	add	a0,a0,a1
     550:	410c                	lw	a1,0(a0)
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     552:	c08c                	sw	a1,0(s1)
    return ani->colors[(index/steps) % ani->num_colors];
     554:	de2e                	sw	a1,60(sp)
     556:	c4ae                	sw	a1,72(sp)
        for (int i=0; i < NR_LEDS; i++) {
     558:	0685                	addi	a3,a3,1
     55a:	4299                	li	t0,6
     55c:	4712                	lw	a4,4(sp)
     55e:	0491                	addi	s1,s1,4
     560:	c1018793          	addi	a5,gp,-1008 # 2000000c <leds_frame>
     564:	cfc18313          	addi	t1,gp,-772 # 200000f8 <led_arr>
     568:	fa569de3          	bne	a3,t0,522 <WS2812FillBuffSec+0xea>
        fr->ref_index += fr->frame_step;
     56c:	0087c683          	lbu	a3,8(a5)
     570:	9736                	add	a4,a4,a3
     572:	00e78723          	sb	a4,14(a5)
    return led_arr[ledIdx].packed;
     576:	4782                	lw	a5,0(sp)
     578:	078a                	slli	a5,a5,0x2
     57a:	933e                	add	t1,t1,a5
     57c:	00032503          	lw	a0,0(t1)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     580:	00b55713          	srli	a4,a0,0xb
     584:	6789                	lui	a5,0x2
     586:	95478793          	addi	a5,a5,-1708 # 1954 <bitquartets.10>
     58a:	8b79                	andi	a4,a4,30
     58c:	973e                	add	a4,a4,a5
     58e:	00075703          	lhu	a4,0(a4) # 40020000 <_eusrstack+0x2001f800>
		ptr += 6;
     592:	0431                	addi	s0,s0,12
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     594:	fee41a23          	sh	a4,-12(s0)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     598:	00755713          	srli	a4,a0,0x7
     59c:	8b79                	andi	a4,a4,30
     59e:	973e                	add	a4,a4,a5
     5a0:	00075703          	lhu	a4,0(a4)
     5a4:	fee41b23          	sh	a4,-10(s0)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
     5a8:	00355713          	srli	a4,a0,0x3
     5ac:	8b79                	andi	a4,a4,30
     5ae:	973e                	add	a4,a4,a5
     5b0:	00075703          	lhu	a4,0(a4)
     5b4:	fee41c23          	sh	a4,-8(s0)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
     5b8:	00f57713          	andi	a4,a0,15
     5bc:	0706                	slli	a4,a4,0x1
     5be:	973e                	add	a4,a4,a5
     5c0:	00075703          	lhu	a4,0(a4)
     5c4:	fee41d23          	sh	a4,-6(s0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     5c8:	01355713          	srli	a4,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     5cc:	813d                	srli	a0,a0,0xf
     5ce:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     5d0:	8b79                	andi	a4,a4,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     5d2:	953e                	add	a0,a0,a5
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     5d4:	973e                	add	a4,a4,a5
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     5d6:	00055783          	lhu	a5,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     5da:	00075703          	lhu	a4,0(a4)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     5de:	fef41f23          	sh	a5,-2(s0)
     5e2:	4782                	lw	a5,0(sp)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     5e4:	fee41e23          	sh	a4,-4(s0)
		i += 6;
     5e8:	0785                	addi	a5,a5,1
     5ea:	c03e                	sw	a5,0(sp)
     5ec:	bda5                	j	464 <WS2812FillBuffSec+0x2c>
	uint32_t now = millis();
     5ee:	c6c1a603          	lw	a2,-916(gp) # 20000068 <systick_millis>
	if (now - *ref_time > duration) {
     5f2:	4b98                	lw	a4,16(a5)
     5f4:	04600593          	li	a1,70
     5f8:	40e60733          	sub	a4,a2,a4
     5fc:	cfc18693          	addi	a3,gp,-772 # 200000f8 <led_arr>
     600:	06e5fc63          	bgeu	a1,a4,678 <WS2812FillBuffSec+0x240>
        led_arr[fr->prev_index] = COLOR_BLACK;       // Turn off previous LED
     604:	00d7c703          	lbu	a4,13(a5)
		*ref_time = now;
     608:	cb90                	sw	a2,16(a5)
    return ani->colors[ani->ref_index];
     60a:	c2818613          	addi	a2,gp,-984 # 20000024 <color_ani>
     60e:	00564303          	lbu	t1,5(a2)
     612:	420c                	lw	a1,0(a2)
        led_arr[fr->prev_index] = COLOR_BLACK;       // Turn off previous LED
     614:	070a                	slli	a4,a4,0x2
     616:	9736                	add	a4,a4,a3
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     618:	0087c483          	lbu	s1,8(a5)
        led_arr[fr->prev_index] = COLOR_BLACK;       // Turn off previous LED
     61c:	00072023          	sw	zero,0(a4)
    return ani->colors[ani->ref_index];
     620:	00231513          	slli	a0,t1,0x2
        led_arr[fr->ref_index] = animation_currentColor(ani);
     624:	00e7c703          	lbu	a4,14(a5)
    return ani->colors[ani->ref_index];
     628:	95aa                	add	a1,a1,a0
     62a:	4188                	lw	a0,0(a1)
        fr->prev_index = fr->ref_index;
     62c:	00e786a3          	sb	a4,13(a5)
        led_arr[fr->ref_index] = animation_currentColor(ani);
     630:	00271593          	slli	a1,a4,0x2
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     634:	9726                	add	a4,a4,s1
        led_arr[fr->ref_index] = animation_currentColor(ani);
     636:	95b6                	add	a1,a1,a3
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     638:	0ff77493          	andi	s1,a4,255
        led_arr[fr->ref_index] = animation_currentColor(ani);
     63c:	c188                	sw	a0,0(a1)
    return ani->colors[ani->ref_index];
     63e:	c0aa                	sw	a0,64(sp)
     640:	c4aa                	sw	a0,72(sp)
        fr->ref_index = next_idx % NR_LEDS;
     642:	4599                	li	a1,6
     644:	8526                	mv	a0,s1
    return ani->colors[ani->ref_index];
     646:	c21a                	sw	t1,4(sp)
        fr->ref_index = next_idx % NR_LEDS;
     648:	3455                	jal	ec <__umodsi3>
     64a:	c1018793          	addi	a5,gp,-1008 # 2000000c <leds_frame>
     64e:	00a78723          	sb	a0,14(a5)
        if (next_idx >= NR_LEDS) animation_step(ani);
     652:	cfc18693          	addi	a3,gp,-772 # 200000f8 <led_arr>
     656:	4795                	li	a5,5
     658:	4312                	lw	t1,4(sp)
     65a:	c2818613          	addi	a2,gp,-984 # 20000024 <color_ani>
     65e:	0097fd63          	bgeu	a5,s1,678 <WS2812FillBuffSec+0x240>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     662:	00464583          	lbu	a1,4(a2)
     666:	00130513          	addi	a0,t1,1
     66a:	345d                	jal	110 <__modsi3>
     66c:	c2818613          	addi	a2,gp,-984 # 20000024 <color_ani>
     670:	00a602a3          	sb	a0,5(a2)
     674:	cfc18693          	addi	a3,gp,-772 # 200000f8 <led_arr>
    return led_arr[ledIdx].packed;
     678:	4782                	lw	a5,0(sp)
     67a:	078a                	slli	a5,a5,0x2
     67c:	96be                	add	a3,a3,a5
     67e:	4288                	lw	a0,0(a3)
     680:	b701                	j	580 <WS2812FillBuffSec+0x148>
	uint32_t now = millis();
     682:	c6c1a603          	lw	a2,-916(gp) # 20000068 <systick_millis>
	if (now - *ref_time > duration) {
     686:	4b98                	lw	a4,16(a5)
     688:	04600593          	li	a1,70
     68c:	40e60733          	sub	a4,a2,a4
     690:	16e5f263          	bgeu	a1,a4,7f4 <WS2812FillBuffSec+0x3bc>
		*ref_time = now;
     694:	cfc18713          	addi	a4,gp,-772 # 200000f8 <led_arr>
     698:	c43a                	sw	a4,8(sp)
    return ani->colors[ani->ref_index];
     69a:	c2818713          	addi	a4,gp,-984 # 20000024 <color_ani>
		*ref_time = now;
     69e:	cb90                	sw	a2,16(a5)
        for (int i = 0; i < NR_LEDS; i++) {
     6a0:	c202                	sw	zero,4(sp)
    return ani->colors[ani->ref_index];
     6a2:	c63a                	sw	a4,12(sp)
            uint8_t diff = fr->ref_index - i;
     6a4:	00e7c703          	lbu	a4,14(a5)
    return ani->colors[ani->ref_index];
     6a8:	47b2                	lw	a5,12(sp)
            uint8_t diff = fr->ref_index - i;
     6aa:	d03a                	sw	a4,32(sp)
    return ani->colors[ani->ref_index];
     6ac:	0057c783          	lbu	a5,5(a5)
     6b0:	00279693          	slli	a3,a5,0x2
     6b4:	d63e                	sw	a5,44(sp)
     6b6:	47b2                	lw	a5,12(sp)
     6b8:	4398                	lw	a4,0(a5)
     6ba:	9736                	add	a4,a4,a3
     6bc:	00174783          	lbu	a5,1(a4)
     6c0:	00074683          	lbu	a3,0(a4)
     6c4:	cc3e                	sw	a5,24(sp)
     6c6:	00274783          	lbu	a5,2(a4)
            uint8_t diff = fr->ref_index - i;
     6ca:	4712                	lw	a4,4(sp)
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     6cc:	8536                	mv	a0,a3
    return ani->colors[ani->ref_index];
     6ce:	ca3e                	sw	a5,20(sp)
            uint8_t diff = fr->ref_index - i;
     6d0:	5782                	lw	a5,32(sp)
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     6d2:	d236                	sw	a3,36(sp)
            uint8_t diff = fr->ref_index - i;
     6d4:	40e784b3          	sub	s1,a5,a4
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     6d8:	0ff4f493          	andi	s1,s1,255
     6dc:	85a6                	mv	a1,s1
     6de:	32c9                	jal	a0 <__mulsi3>
     6e0:	00151713          	slli	a4,a0,0x1
     6e4:	972a                	add	a4,a4,a0
     6e6:	0712                	slli	a4,a4,0x4
     6e8:	972a                	add	a4,a4,a0
     6ea:	f9c00593          	li	a1,-100
     6ee:	853a                	mv	a0,a4
     6f0:	dc3a                	sw	a4,56(sp)
     6f2:	32d9                	jal	b8 <__divsi3>
     6f4:	5692                	lw	a3,36(sp)
     6f6:	d202                	sw	zero,36(sp)
     6f8:	9536                	add	a0,a0,a3
     6fa:	d436                	sw	a3,40(sp)
     6fc:	00a05c63          	blez	a0,714 <WS2812FillBuffSec+0x2dc>
     700:	5762                	lw	a4,56(sp)
     702:	06400593          	li	a1,100
     706:	853a                	mv	a0,a4
     708:	3a45                	jal	b8 <__divsi3>
     70a:	56a2                	lw	a3,40(sp)
     70c:	8e89                	sub	a3,a3,a0
     70e:	0ff6f793          	andi	a5,a3,255
     712:	d23e                	sw	a5,36(sp)
     714:	45e2                	lw	a1,24(sp)
     716:	8526                	mv	a0,s1
     718:	3261                	jal	a0 <__mulsi3>
     71a:	00151713          	slli	a4,a0,0x1
     71e:	972a                	add	a4,a4,a0
     720:	0712                	slli	a4,a4,0x4
     722:	972a                	add	a4,a4,a0
     724:	f9c00593          	li	a1,-100
     728:	853a                	mv	a0,a4
     72a:	dc3a                	sw	a4,56(sp)
     72c:	3271                	jal	b8 <__divsi3>
     72e:	47e2                	lw	a5,24(sp)
     730:	d402                	sw	zero,40(sp)
     732:	953e                	add	a0,a0,a5
     734:	00a05d63          	blez	a0,74e <WS2812FillBuffSec+0x316>
     738:	5762                	lw	a4,56(sp)
     73a:	06400593          	li	a1,100
     73e:	853a                	mv	a0,a4
     740:	3aa5                	jal	b8 <__divsi3>
     742:	47e2                	lw	a5,24(sp)
     744:	40a78533          	sub	a0,a5,a0
     748:	0ff57793          	andi	a5,a0,255
     74c:	d43e                	sw	a5,40(sp)
     74e:	45d2                	lw	a1,20(sp)
     750:	8526                	mv	a0,s1
     752:	32b9                	jal	a0 <__mulsi3>
     754:	00151493          	slli	s1,a0,0x1
     758:	94aa                	add	s1,s1,a0
     75a:	0492                	slli	s1,s1,0x4
     75c:	94aa                	add	s1,s1,a0
     75e:	f9c00593          	li	a1,-100
     762:	8526                	mv	a0,s1
     764:	3a91                	jal	b8 <__divsi3>
     766:	47d2                	lw	a5,20(sp)
     768:	4681                	li	a3,0
     76a:	953e                	add	a0,a0,a5
     76c:	c1018713          	addi	a4,gp,-1008 # 2000000c <leds_frame>
     770:	87ba                	mv	a5,a4
     772:	00a05d63          	blez	a0,78c <WS2812FillBuffSec+0x354>
     776:	06400593          	li	a1,100
     77a:	8526                	mv	a0,s1
     77c:	3a35                	jal	b8 <__divsi3>
     77e:	47d2                	lw	a5,20(sp)
     780:	40a78533          	sub	a0,a5,a0
     784:	0ff57693          	andi	a3,a0,255
     788:	c1018793          	addi	a5,gp,-1008 # 2000000c <leds_frame>
     78c:	4712                	lw	a4,4(sp)
     78e:	cfc18613          	addi	a2,gp,-772 # 200000f8 <led_arr>
     792:	070a                	slli	a4,a4,0x2
     794:	9732                	add	a4,a4,a2
     796:	00072023          	sw	zero,0(a4)
     79a:	5612                	lw	a2,36(sp)
     79c:	4722                	lw	a4,8(sp)
     79e:	00c70023          	sb	a2,0(a4)
     7a2:	5622                	lw	a2,40(sp)
     7a4:	00d70123          	sb	a3,2(a4)
        for (int i = 0; i < NR_LEDS; i++) {
     7a8:	4699                	li	a3,6
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     7aa:	00c700a3          	sb	a2,1(a4)
        for (int i = 0; i < NR_LEDS; i++) {
     7ae:	4712                	lw	a4,4(sp)
     7b0:	0705                	addi	a4,a4,1
     7b2:	c23a                	sw	a4,4(sp)
     7b4:	4722                	lw	a4,8(sp)
     7b6:	0711                	addi	a4,a4,4
     7b8:	c43a                	sw	a4,8(sp)
     7ba:	4712                	lw	a4,4(sp)
     7bc:	eed714e3          	bne	a4,a3,6a4 <WS2812FillBuffSec+0x26c>
        uint8_t next_increment = fr->ref_index + fr->frame_step;
     7c0:	0087c483          	lbu	s1,8(a5)
     7c4:	5782                	lw	a5,32(sp)
        fr->ref_index = next_increment % NR_LEDS;
     7c6:	4599                	li	a1,6
        uint8_t next_increment = fr->ref_index + fr->frame_step;
     7c8:	94be                	add	s1,s1,a5
     7ca:	0ff4f493          	andi	s1,s1,255
        fr->ref_index = next_increment % NR_LEDS;
     7ce:	8526                	mv	a0,s1
     7d0:	3a31                	jal	ec <__umodsi3>
     7d2:	c1018793          	addi	a5,gp,-1008 # 2000000c <leds_frame>
     7d6:	00a78723          	sb	a0,14(a5)
        if (next_increment >= NR_LEDS) {
     7da:	4795                	li	a5,5
     7dc:	0097fc63          	bgeu	a5,s1,7f4 <WS2812FillBuffSec+0x3bc>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     7e0:	47b2                	lw	a5,12(sp)
     7e2:	0047c583          	lbu	a1,4(a5)
     7e6:	57b2                	lw	a5,44(sp)
     7e8:	00178513          	addi	a0,a5,1
     7ec:	3215                	jal	110 <__modsi3>
     7ee:	47b2                	lw	a5,12(sp)
     7f0:	00a782a3          	sb	a0,5(a5)
    return led_arr[ledIdx].packed;
     7f4:	4782                	lw	a5,0(sp)
     7f6:	cfc18713          	addi	a4,gp,-772 # 200000f8 <led_arr>
     7fa:	078a                	slli	a5,a5,0x2
    return led_arr[ledIdx].packed;
     7fc:	97ba                	add	a5,a5,a4
     7fe:	4388                	lw	a0,0(a5)
     800:	b341                	j	580 <WS2812FillBuffSec+0x148>
	uint32_t now = millis();
     802:	c6c1a683          	lw	a3,-916(gp) # 20000068 <systick_millis>
	if (now - *ref_time > duration) {
     806:	4b98                	lw	a4,16(a5)
            break;
        case NEO_COLOR_FADE:
            return Neo_render_colorFade(&leds_frame, &color_ani, ledIdx);
            break;
        case NEO_SOLO_COLOR_FADE:
            leds_frame.frame_duration = 10;
     808:	4629                	li	a2,10
     80a:	cfc18593          	addi	a1,gp,-772 # 200000f8 <led_arr>
     80e:	c3d0                	sw	a2,4(a5)
	if (now - *ref_time > duration) {
     810:	40e68733          	sub	a4,a3,a4
     814:	c42e                	sw	a1,8(sp)
     816:	0ee67563          	bgeu	a2,a4,900 <WS2812FillBuffSec+0x4c8>
        fr->frame_value += 3;
     81a:	0097c703          	lbu	a4,9(a5)
    return ani->colors[ani->ref_index];
     81e:	c2818493          	addi	s1,gp,-984 # 20000024 <color_ani>
        fr->frame_value += 3;
     822:	070d                	addi	a4,a4,3
     824:	0ff77713          	andi	a4,a4,255
     828:	00e784a3          	sb	a4,9(a5)
		*ref_time = now;
     82c:	cb94                	sw	a3,16(a5)
    return ani->colors[ani->ref_index];
     82e:	0054c783          	lbu	a5,5(s1)
     832:	4094                	lw	a3,0(s1)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     834:	00871513          	slli	a0,a4,0x8
    return ani->colors[ani->ref_index];
     838:	00279593          	slli	a1,a5,0x2
     83c:	96ae                	add	a3,a3,a1
     83e:	428c                	lw	a1,0(a3)
     840:	0016c303          	lbu	t1,1(a3)
     844:	0006c283          	lbu	t0,0(a3)
     848:	0026c683          	lbu	a3,2(a3)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     84c:	8d19                	sub	a0,a0,a4
    return ani->colors[ani->ref_index];
     84e:	c8ae                	sw	a1,80(sp)
     850:	c2ae                	sw	a1,68(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     852:	c4ae                	sw	a1,72(sp)
     854:	06400593          	li	a1,100
    return ani->colors[ani->ref_index];
     858:	c23e                	sw	a5,4(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     85a:	ca3a                	sw	a4,20(sp)
    return ani->colors[ani->ref_index];
     85c:	cc36                	sw	a3,24(sp)
     85e:	d01a                	sw	t1,32(sp)
     860:	d216                	sw	t0,36(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     862:	3899                	jal	b8 <__divsi3>
     864:	0ff57593          	andi	a1,a0,255
     868:	6509                	lui	a0,0x2
     86a:	85450513          	addi	a0,a0,-1964 # 1854 <SIN_LUT2>
     86e:	5292                	lw	t0,36(sp)
     870:	952e                	add	a0,a0,a1
     872:	00054583          	lbu	a1,0(a0)
     876:	8516                	mv	a0,t0
     878:	c62e                	sw	a1,12(sp)
     87a:	827ff0ef          	jal	ra,a0 <__mulsi3>
     87e:	5302                	lw	t1,32(sp)
     880:	45b2                	lw	a1,12(sp)
     882:	8521                	srai	a0,a0,0x8
     884:	04a10423          	sb	a0,72(sp)
     888:	851a                	mv	a0,t1
     88a:	817ff0ef          	jal	ra,a0 <__mulsi3>
     88e:	46e2                	lw	a3,24(sp)
     890:	45b2                	lw	a1,12(sp)
     892:	8521                	srai	a0,a0,0x8
     894:	04a104a3          	sb	a0,73(sp)
     898:	8536                	mv	a0,a3
     89a:	807ff0ef          	jal	ra,a0 <__mulsi3>
     89e:	c1018713          	addi	a4,gp,-1008 # 2000000c <leds_frame>
     8a2:	00e74683          	lbu	a3,14(a4)
     8a6:	8521                	srai	a0,a0,0x8
     8a8:	87ba                	mv	a5,a4
     8aa:	4722                	lw	a4,8(sp)
     8ac:	04a10523          	sb	a0,74(sp)
     8b0:	4526                	lw	a0,72(sp)
     8b2:	00269593          	slli	a1,a3,0x2
     8b6:	95ba                	add	a1,a1,a4
        if (fr->frame_value >= 100) {
     8b8:	4752                	lw	a4,20(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     8ba:	c188                	sw	a0,0(a1)
     8bc:	c6aa                	sw	a0,76(sp)
        if (fr->frame_value >= 100) {
     8be:	06300593          	li	a1,99
     8c2:	02e5ff63          	bgeu	a1,a4,900 <WS2812FillBuffSec+0x4c8>
            uint8_t next_idx = fr->ref_index + fr->frame_step;
     8c6:	0087c703          	lbu	a4,8(a5)
            fr->frame_value = 0;
     8ca:	000784a3          	sb	zero,9(a5)
            fr->ref_index = next_idx % NR_LEDS;
     8ce:	4599                	li	a1,6
            uint8_t next_idx = fr->ref_index + fr->frame_step;
     8d0:	9736                	add	a4,a4,a3
     8d2:	0ff77713          	andi	a4,a4,255
            fr->ref_index = next_idx % NR_LEDS;
     8d6:	853a                	mv	a0,a4
     8d8:	c63a                	sw	a4,12(sp)
     8da:	813ff0ef          	jal	ra,ec <__umodsi3>
            if (next_idx >= NR_LEDS) {
     8de:	4732                	lw	a4,12(sp)
            fr->ref_index = next_idx % NR_LEDS;
     8e0:	c1018793          	addi	a5,gp,-1008 # 2000000c <leds_frame>
     8e4:	00a78723          	sb	a0,14(a5)
            if (next_idx >= NR_LEDS) {
     8e8:	4795                	li	a5,5
     8ea:	00e7fb63          	bgeu	a5,a4,900 <WS2812FillBuffSec+0x4c8>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     8ee:	4792                	lw	a5,4(sp)
     8f0:	0044c583          	lbu	a1,4(s1)
     8f4:	00178513          	addi	a0,a5,1
     8f8:	819ff0ef          	jal	ra,110 <__modsi3>
     8fc:	00a482a3          	sb	a0,5(s1)
    return led_arr[ledIdx].packed;
     900:	4782                	lw	a5,0(sp)
     902:	4722                	lw	a4,8(sp)
     904:	078a                	slli	a5,a5,0x2
     906:	bddd                	j	7fc <WS2812FillBuffSec+0x3c4>
            return Neo_render_soloColorFade(&leds_frame, &color_ani, ledIdx);
            break;
        case NEO_COLOR_FLASHING:
            leds_frame.frame_duration = 10;
     908:	4729                	li	a4,10
     90a:	c3d8                	sw	a4,4(a5)
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
            break;
        default:
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
     90c:	4502                	lw	a0,0(sp)
     90e:	3c31                	jal	32a <Neo_render_colorFlashing.constprop.0>
     910:	b985                	j	580 <WS2812FillBuffSec+0x148>

00000912 <internal_handle_input.constprop.0>:
void handle_debug_input( int numbytes, uint8_t * data ) __attribute__((weak));
void handle_debug_input( int numbytes, uint8_t * data ) { (void)numbytes; (void)data; }

static void internal_handle_input( volatile uint32_t * dmdata0 )
{
	uint32_t dmd0 = *dmdata0;
     912:	e00007b7          	lui	a5,0xe0000
     916:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 && bytes < 16 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
     91a:	8082                	ret

0000091c <_write.constprop.0>:
//     status word = 0xcx = timed out.
// declare as weak to allow overriding.
WEAK int _write(int fd, const char *buf, int size)
{
	(void)fd;
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     91c:	e0000737          	lui	a4,0xe0000
     920:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     924:	1111                	addi	sp,sp,-28
     926:	cc06                	sw	ra,24(sp)
     928:	ca22                	sw	s0,20(sp)
     92a:	c826                	sw	s1,16(sp)
     92c:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     92e:	0c07f793          	andi	a5,a5,192
     932:	0c000693          	li	a3,192
     936:	0cd78863          	beq	a5,a3,a06 <_write.constprop.0+0xea>

	char buffer[4] = { 0 };
     93a:	c602                	sw	zero,12(sp)
     93c:	842e                	mv	s0,a1
	int place = 0;
	uint32_t lastdmd;
	uint32_t timeout = FUNCONF_DEBUGPRINTF_TIMEOUT; // Give up after ~120ms

	if( size == 0 )
     93e:	e5f1                	bnez	a1,a0a <_write.constprop.0+0xee>
	{
		lastdmd = (*DMDATA0);
     940:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     944:	c789                	beqz	a5,94e <_write.constprop.0+0x32>
     946:	0807f793          	andi	a5,a5,128
     94a:	e391                	bnez	a5,94e <_write.constprop.0+0x32>
     94c:	37d9                	jal	912 <internal_handle_input.constprop.0>

		//buf += tosend;
		place += tosend;
	}
	return size;
}
     94e:	40e2                	lw	ra,24(sp)
     950:	8522                	mv	a0,s0
     952:	4452                	lw	s0,20(sp)
     954:	44c2                	lw	s1,16(sp)
     956:	0171                	addi	sp,sp,28
     958:	8082                	ret
		int tosend = size - place;
     95a:	409405b3          	sub	a1,s0,s1
     95e:	469d                	li	a3,7
     960:	872e                	mv	a4,a1
     962:	00b6d363          	bge	a3,a1,968 <_write.constprop.0+0x4c>
     966:	471d                	li	a4,7
     968:	001006b7          	lui	a3,0x100
     96c:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     96e:	e0000537          	lui	a0,0xe0000
     972:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     976:	0f450313          	addi	t1,a0,244
     97a:	08067293          	andi	t0,a2,128
     97e:	06029c63          	bnez	t0,9f6 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     982:	c611                	beqz	a2,98e <_write.constprop.0+0x72>
     984:	c43a                	sw	a4,8(sp)
     986:	c22e                	sw	a1,4(sp)
     988:	3769                	jal	912 <internal_handle_input.constprop.0>
     98a:	4722                	lw	a4,8(sp)
     98c:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     98e:	4689                	li	a3,2
     990:	4601                	li	a2,0
     992:	00b6d463          	bge	a3,a1,99a <_write.constprop.0+0x7e>
     996:	ffd70613          	addi	a2,a4,-3
     99a:	4782                	lw	a5,0(sp)
     99c:	00348593          	addi	a1,s1,3
     9a0:	0068                	addi	a0,sp,12
     9a2:	95be                	add	a1,a1,a5
     9a4:	c23a                	sw	a4,4(sp)
     9a6:	26d9                	jal	d6c <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     9a8:	4632                	lw	a2,12(sp)
     9aa:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     9ac:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     9ae:	e00006b7          	lui	a3,0xe0000
     9b2:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     9b6:	458d                	li	a1,3
     9b8:	00978633          	add	a2,a5,s1
		t = 0;
     9bc:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     9be:	00064303          	lbu	t1,0(a2)
     9c2:	0685                	addi	a3,a3,1
     9c4:	007c                	addi	a5,sp,12
     9c6:	00d78533          	add	a0,a5,a3
     9ca:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     9ce:	00d70563          	beq	a4,a3,9d8 <_write.constprop.0+0xbc>
     9d2:	0605                	addi	a2,a2,1
     9d4:	feb695e3          	bne	a3,a1,9be <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     9d8:	00470693          	addi	a3,a4,4
     9dc:	f806e693          	ori	a3,a3,-128
     9e0:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     9e4:	4632                	lw	a2,12(sp)
     9e6:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     9ea:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     9ec:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     9f0:	f684c5e3          	blt	s1,s0,95a <_write.constprop.0+0x3e>
     9f4:	bfa9                	j	94e <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     9f6:	16fd                	addi	a3,a3,-1
     9f8:	fead                	bnez	a3,972 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     9fa:	00032783          	lw	a5,0(t1)
     9fe:	0c07e793          	ori	a5,a5,192
     a02:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     a06:	4401                	li	s0,0
     a08:	b799                	j	94e <_write.constprop.0+0x32>
	if( size == 0 )
     a0a:	4481                	li	s1,0
     a0c:	b7d5                	j	9f0 <_write.constprop.0+0xd4>

00000a0e <__puts_uart>:
{
     a0e:	1151                	addi	sp,sp,-12
     a10:	c222                	sw	s0,4(sp)
     a12:	c406                	sw	ra,8(sp)
     a14:	842e                	mv	s0,a1
	_write( 0, s, len );
     a16:	3719                	jal	91c <_write.constprop.0>
}
     a18:	40a2                	lw	ra,8(sp)
     a1a:	8522                	mv	a0,s0
     a1c:	4412                	lw	s0,4(sp)
     a1e:	0131                	addi	sp,sp,12
     a20:	8082                	ret

00000a22 <handle_reset>:
	asm volatile( "\n\
     a22:	20000197          	auipc	gp,0x20000
     a26:	9da18193          	addi	gp,gp,-1574 # 200003fc <__global_pointer$>
     a2a:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     a2e:	6509                	lui	a0,0x2
     a30:	88050513          	addi	a0,a0,-1920 # 1880 <SIN_LUT2+0x2c>
     a34:	30051073          	csrw	mstatus,a0
     a38:	468d                	li	a3,3
     a3a:	fffff517          	auipc	a0,0xfffff
     a3e:	5c650513          	addi	a0,a0,1478 # 0 <InterruptVector>
     a42:	8d55                	or	a0,a0,a3
     a44:	30551073          	csrw	mtvec,a0
asm volatile(
     a48:	c5418513          	addi	a0,gp,-940 # 20000050 <WS2812BLEDInUse>
     a4c:	db418593          	addi	a1,gp,-588 # 200001b0 <_ebss>
     a50:	4601                	li	a2,0
     a52:	00b55663          	bge	a0,a1,a5e <handle_reset+0x3c>
     a56:	c110                	sw	a2,0(a0)
     a58:	0511                	addi	a0,a0,4
     a5a:	feb54ee3          	blt	a0,a1,a56 <handle_reset+0x34>
     a5e:	00001517          	auipc	a0,0x1
     a62:	f2650513          	addi	a0,a0,-218 # 1984 <_data_lma>
     a66:	c0418593          	addi	a1,gp,-1020 # 20000000 <color_arr>
     a6a:	1ffff617          	auipc	a2,0x1ffff
     a6e:	5e660613          	addi	a2,a2,1510 # 20000050 <WS2812BLEDInUse>
     a72:	00c58863          	beq	a1,a2,a82 <handle_reset+0x60>
     a76:	4114                	lw	a3,0(a0)
     a78:	c194                	sw	a3,0(a1)
     a7a:	0511                	addi	a0,a0,4
     a7c:	0591                	addi	a1,a1,4
     a7e:	fec59ae3          	bne	a1,a2,a72 <handle_reset+0x50>
	SysTick->CTLR = 5;
     a82:	e000f7b7          	lui	a5,0xe000f
     a86:	4715                	li	a4,5
     a88:	c398                	sw	a4,0(a5)
asm volatile(
     a8a:	6785                	lui	a5,0x1
     a8c:	e9478793          	addi	a5,a5,-364 # e94 <main>
     a90:	34179073          	csrw	mepc,a5
     a94:	30200073          	mret

00000a98 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     a98:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     a9c:	f78ff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     aa0:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     aa4:	f70ff0ef          	jal	ra,214 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     aa8:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     aac:	f68ff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     ab0:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     ab4:	f60ff0ef          	jal	ra,214 <PrintHex>
	while( (*DMDATA0) & 0x80 );
     ab8:	e0000737          	lui	a4,0xe0000
     abc:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     ac0:	0f470693          	addi	a3,a4,244
     ac4:	0807f793          	andi	a5,a5,128
     ac8:	fbf5                	bnez	a5,abc <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     aca:	6785                	lui	a5,0x1
     acc:	a8578793          	addi	a5,a5,-1403 # a85 <handle_reset+0x63>
     ad0:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     ad2:	e0000737          	lui	a4,0xe0000
     ad6:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     ada:	0f470693          	addi	a3,a4,244
     ade:	0807f793          	andi	a5,a5,128
     ae2:	fbf5                	bnez	a5,ad6 <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     ae4:	aaaab7b7          	lui	a5,0xaaaab
     ae8:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     aec:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     aee:	a001                	j	aee <ADC1_2_IRQHandler+0x56>

00000af0 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     af0:	40021737          	lui	a4,0x40021
     af4:	471c                	lw	a5,8(a4)
     af6:	008006b7          	lui	a3,0x800
     afa:	8fd5                	or	a5,a5,a3
     afc:	c71c                	sw	a5,8(a4)

00000afe <strlen>:
{
     afe:	87aa                	mv	a5,a0
	for (; *s; s++);
     b00:	0007c703          	lbu	a4,0(a5)
     b04:	e701                	bnez	a4,b0c <strlen+0xe>
}
     b06:	40a78533          	sub	a0,a5,a0
     b0a:	8082                	ret
	for (; *s; s++);
     b0c:	0785                	addi	a5,a5,1
     b0e:	bfcd                	j	b00 <strlen+0x2>

00000b10 <mini_vpprintf>:
{
     b10:	fa410113          	addi	sp,sp,-92
     b14:	c8a6                	sw	s1,80(sp)
     b16:	cc86                	sw	ra,88(sp)
     b18:	caa2                	sw	s0,84(sp)
     b1a:	c02a                	sw	a0,0(sp)
     b1c:	c22e                	sw	a1,4(sp)
     b1e:	84b2                	mv	s1,a2
     b20:	87b6                	mv	a5,a3
	int n = 0;
     b22:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     b24:	0004c703          	lbu	a4,0(s1)
     b28:	00148413          	addi	s0,s1,1
     b2c:	00e10fa3          	sb	a4,31(sp)
     b30:	eb01                	bnez	a4,b40 <mini_vpprintf+0x30>
}
     b32:	40e6                	lw	ra,88(sp)
     b34:	4456                	lw	s0,84(sp)
     b36:	4542                	lw	a0,16(sp)
     b38:	44c6                	lw	s1,80(sp)
     b3a:	05c10113          	addi	sp,sp,92
     b3e:	8082                	ret
		if (ch!='%') {
     b40:	02500693          	li	a3,37
     b44:	00d70f63          	beq	a4,a3,b62 <mini_vpprintf+0x52>
     b48:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     b4a:	4612                	lw	a2,4(sp)
     b4c:	4782                	lw	a5,0(sp)
     b4e:	4585                	li	a1,1
     b50:	01f10513          	addi	a0,sp,31
     b54:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     b56:	84a2                	mv	s1,s0
		n = n + len;
     b58:	47c2                	lw	a5,16(sp)
     b5a:	97aa                	add	a5,a5,a0
     b5c:	c83e                	sw	a5,16(sp)
     b5e:	47a2                	lw	a5,8(sp)
     b60:	b7d1                	j	b24 <mini_vpprintf+0x14>
			ch=*(fmt++);
     b62:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     b66:	03000613          	li	a2,48
			ch=*(fmt++);
     b6a:	00248713          	addi	a4,s1,2
     b6e:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     b72:	03000413          	li	s0,48
     b76:	08c69063          	bne	a3,a2,bf6 <mini_vpprintf+0xe6>
				ch=*(fmt++);
     b7a:	84ba                	mv	s1,a4
     b7c:	4601                	li	a2,0
     b7e:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     b80:	4525                	li	a0,9
     b82:	a811                	j	b96 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     b84:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     b88:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     b8a:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     b8c:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     b90:	0706                	slli	a4,a4,0x1
     b92:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     b94:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     b96:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f7774>
     b9a:	0ff5f313          	andi	t1,a1,255
     b9e:	fe6573e3          	bgeu	a0,t1,b84 <mini_vpprintf+0x74>
     ba2:	c219                	beqz	a2,ba8 <mini_vpprintf+0x98>
     ba4:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     ba8:	c63a                	sw	a4,12(sp)
     baa:	4661                	li	a2,24
     bac:	00e65363          	bge	a2,a4,bb2 <mini_vpprintf+0xa2>
     bb0:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     bb2:	06c00593          	li	a1,108
			char l = 0;
     bb6:	4601                	li	a2,0
			if (ch == 'l') {
     bb8:	00b69863          	bne	a3,a1,bc8 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     bbc:	0004c683          	lbu	a3,0(s1)
				l = 1;
     bc0:	4605                	li	a2,1
				ch=*(fmt++);
     bc2:	0485                	addi	s1,s1,1
     bc4:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     bc8:	01f14683          	lbu	a3,31(sp)
     bcc:	06400593          	li	a1,100
     bd0:	06b68363          	beq	a3,a1,c36 <mini_vpprintf+0x126>
     bd4:	02d5e463          	bltu	a1,a3,bfc <mini_vpprintf+0xec>
     bd8:	05800713          	li	a4,88
     bdc:	0ae68263          	beq	a3,a4,c80 <mini_vpprintf+0x170>
     be0:	06300713          	li	a4,99
     be4:	0ce68063          	beq	a3,a4,ca4 <mini_vpprintf+0x194>
     be8:	d6a9                	beqz	a3,b32 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     bea:	4612                	lw	a2,4(sp)
     bec:	c43e                	sw	a5,8(sp)
     bee:	4585                	li	a1,1
     bf0:	01f10513          	addi	a0,sp,31
     bf4:	a88d                	j	c66 <mini_vpprintf+0x156>
			char pad_char = ' ';
     bf6:	02000413          	li	s0,32
     bfa:	b741                	j	b7a <mini_vpprintf+0x6a>
			switch (ch) {
     bfc:	07500593          	li	a1,117
     c00:	02b68b63          	beq	a3,a1,c36 <mini_vpprintf+0x126>
     c04:	07800613          	li	a2,120
     c08:	06c68c63          	beq	a3,a2,c80 <mini_vpprintf+0x170>
     c0c:	07300613          	li	a2,115
     c10:	fcc69de3          	bne	a3,a2,bea <mini_vpprintf+0xda>
     c14:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     c16:	00478713          	addi	a4,a5,4
     c1a:	439c                	lw	a5,0(a5)
     c1c:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     c1e:	853e                	mv	a0,a5
     c20:	ca3e                	sw	a5,20(sp)
     c22:	3df1                	jal	afe <strlen>
					if (pad_to > 0) {
     c24:	4762                	lw	a4,24(sp)
     c26:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     c28:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     c2a:	cb51                	beqz	a4,cbe <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     c2c:	46b2                	lw	a3,12(sp)
     c2e:	1838                	addi	a4,sp,56
     c30:	8622                	mv	a2,s0
     c32:	853e                	mv	a0,a5
     c34:	a025                	j	c5c <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     c36:	00478713          	addi	a4,a5,4
     c3a:	c43a                	sw	a4,8(sp)
					if(l) {
     c3c:	ca05                	beqz	a2,c6c <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     c3e:	f8b68693          	addi	a3,a3,-117
     c42:	1018                	addi	a4,sp,32
     c44:	0016b693          	seqz	a3,a3
     c48:	4388                	lw	a0,0(a5)
     c4a:	4601                	li	a2,0
     c4c:	45a9                	li	a1,10
     c4e:	e1eff0ef          	jal	ra,26c <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     c52:	46b2                	lw	a3,12(sp)
     c54:	1838                	addi	a4,sp,56
     c56:	8622                	mv	a2,s0
     c58:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     c5a:	1008                	addi	a0,sp,32
     c5c:	cdaff0ef          	jal	ra,136 <mini_pad>
					len = puts(bf, len, buf);
     c60:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     c62:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     c64:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     c66:	4782                	lw	a5,0(sp)
     c68:	9782                	jalr	a5
					break;
     c6a:	b5fd                	j	b58 <mini_vpprintf+0x48>
						if(ch == 'u') {
     c6c:	07500713          	li	a4,117
     c70:	00e69563          	bne	a3,a4,c7a <mini_vpprintf+0x16a>
	if (radix > 16)
     c74:	1018                	addi	a4,sp,32
     c76:	4685                	li	a3,1
     c78:	bfc1                	j	c48 <mini_vpprintf+0x138>
     c7a:	1018                	addi	a4,sp,32
     c7c:	4681                	li	a3,0
     c7e:	b7e9                	j	c48 <mini_vpprintf+0x138>
					if(l) {
     c80:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     c82:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     c86:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     c8a:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     c8c:	4685                	li	a3,1
     c8e:	1018                	addi	a4,sp,32
     c90:	00163613          	seqz	a2,a2
     c94:	45c1                	li	a1,16
     c96:	dd6ff0ef          	jal	ra,26c <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     c9a:	46b2                	lw	a3,12(sp)
     c9c:	85aa                	mv	a1,a0
     c9e:	1838                	addi	a4,sp,56
     ca0:	8622                	mv	a2,s0
     ca2:	bf65                	j	c5a <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     ca4:	00478713          	addi	a4,a5,4
     ca8:	439c                	lw	a5,0(a5)
     caa:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     cac:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     cae:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     cb2:	1838                	addi	a4,sp,56
     cb4:	8622                	mv	a2,s0
     cb6:	4585                	li	a1,1
     cb8:	01f10513          	addi	a0,sp,31
     cbc:	b745                	j	c5c <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     cbe:	4612                	lw	a2,4(sp)
     cc0:	853e                	mv	a0,a5
     cc2:	b755                	j	c66 <mini_vpprintf+0x156>

00000cc4 <printf>:
{
     cc4:	fdc10113          	addi	sp,sp,-36
     cc8:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     cca:	862a                	mv	a2,a0
     ccc:	6505                	lui	a0,0x1
{
     cce:	c82e                	sw	a1,16(sp)
     cd0:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     cd2:	4581                	li	a1,0
	va_start( args, format );
     cd4:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     cd6:	a0e50513          	addi	a0,a0,-1522 # a0e <__puts_uart>
{
     cda:	c606                	sw	ra,12(sp)
     cdc:	ce3a                	sw	a4,28(sp)
     cde:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     ce0:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     ce2:	353d                	jal	b10 <mini_vpprintf>
}
     ce4:	40b2                	lw	ra,12(sp)
     ce6:	02410113          	addi	sp,sp,36
     cea:	8082                	ret

00000cec <mini_vsnprintf>:
{
     cec:	1121                	addi	sp,sp,-24
     cee:	ca06                	sw	ra,20(sp)
     cf0:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
     cf2:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
     cf4:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
     cf6:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
     cf8:	c185                	beqz	a1,d18 <mini_vsnprintf+0x2c>
     cfa:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
     cfc:	858a                	mv	a1,sp
     cfe:	e111                	bnez	a0,d02 <mini_vsnprintf+0x16>
     d00:	4581                	li	a1,0
     d02:	1d200513          	li	a0,466
     d06:	3529                	jal	b10 <mini_vpprintf>
	if(buffer == (void*) 0) {
     d08:	c401                	beqz	s0,d10 <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
     d0a:	4512                	lw	a0,4(sp)
     d0c:	4782                	lw	a5,0(sp)
     d0e:	8d1d                	sub	a0,a0,a5
}
     d10:	40d2                	lw	ra,20(sp)
     d12:	4442                	lw	s0,16(sp)
     d14:	0161                	addi	sp,sp,24
     d16:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
     d18:	4401                	li	s0,0
     d1a:	b7dd                	j	d00 <mini_vsnprintf+0x14>

00000d1c <sprintf>:
{
     d1c:	1101                	addi	sp,sp,-32
     d1e:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     d20:	862e                	mv	a2,a1
     d22:	800005b7          	lui	a1,0x80000
{
     d26:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     d28:	fff5c593          	not	a1,a1
	va_start( args, format );
     d2c:	0814                	addi	a3,sp,16
{
     d2e:	c606                	sw	ra,12(sp)
     d30:	cc3a                	sw	a4,24(sp)
     d32:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
     d34:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     d36:	3f5d                	jal	cec <mini_vsnprintf>
}
     d38:	40b2                	lw	ra,12(sp)
     d3a:	6105                	addi	sp,sp,32
     d3c:	8082                	ret

00000d3e <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     d3e:	962a                	add	a2,a2,a0
     d40:	87aa                	mv	a5,a0
     d42:	00c79363          	bne	a5,a2,d48 <memset+0xa>
     d46:	8082                	ret
     d48:	00b78023          	sb	a1,0(a5)
     d4c:	0785                	addi	a5,a5,1
     d4e:	bfd5                	j	d42 <memset+0x4>

00000d50 <strncpy>:
{
     d50:	4781                	li	a5,0
	for (; n && (*d=*s); n--, s++, d++);
     d52:	00f60c63          	beq	a2,a5,d6a <strncpy+0x1a>
     d56:	00f58733          	add	a4,a1,a5
     d5a:	00074703          	lbu	a4,0(a4) # 40021000 <_eusrstack+0x20020800>
     d5e:	00f506b3          	add	a3,a0,a5
     d62:	0785                	addi	a5,a5,1
     d64:	00e68023          	sb	a4,0(a3)
     d68:	f76d                	bnez	a4,d52 <strncpy+0x2>
}
     d6a:	8082                	ret

00000d6c <memcpy>:
{
     d6c:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     d6e:	00f61363          	bne	a2,a5,d74 <memcpy+0x8>
}
     d72:	8082                	ret
	for (; n; n--) *d++ = *s++;
     d74:	00f58733          	add	a4,a1,a5
     d78:	00074683          	lbu	a3,0(a4)
     d7c:	00f50733          	add	a4,a0,a5
     d80:	0785                	addi	a5,a5,1
     d82:	00d70023          	sb	a3,0(a4)
     d86:	b7e5                	j	d6e <memcpy+0x2>

00000d88 <puts>:
{
     d88:	1151                	addi	sp,sp,-12
     d8a:	c406                	sw	ra,8(sp)
     d8c:	c222                	sw	s0,4(sp)
     d8e:	c026                	sw	s1,0(sp)
     d90:	84aa                	mv	s1,a0
	int sl = strlen( s );
     d92:	33b5                	jal	afe <strlen>
     d94:	842a                	mv	s0,a0
	_write(0, s, sl );
     d96:	85aa                	mv	a1,a0
     d98:	8526                	mv	a0,s1
     d9a:	3649                	jal	91c <_write.constprop.0>
	_write(0, "\n", 1 );
     d9c:	6505                	lui	a0,0x1
     d9e:	4585                	li	a1,1
     da0:	7f050513          	addi	a0,a0,2032 # 17f0 <I2C1_ER_IRQHandler+0x92>
     da4:	3ea5                	jal	91c <_write.constprop.0>
}
     da6:	40a2                	lw	ra,8(sp)
     da8:	00140513          	addi	a0,s0,1
     dac:	4412                	lw	s0,4(sp)
     dae:	4482                	lw	s1,0(sp)
     db0:	0131                	addi	sp,sp,12
     db2:	8082                	ret

00000db4 <button_onChanged>:

void onI2C_SlaveRead(uint8_t reg) {
	printf("IM READEN FROM.\n\r");
}

void button_onChanged(Button_Event_e event, uint32_t time) {
     db4:	1151                	addi	sp,sp,-12
     db6:	c222                	sw	s0,4(sp)
     db8:	c406                	sw	ra,8(sp)
     dba:	c026                	sw	s1,0(sp)
	switch (event) {
     dbc:	4789                	li	a5,2
void button_onChanged(Button_Event_e event, uint32_t time) {
     dbe:	842a                	mv	s0,a0
	switch (event) {
     dc0:	06f50663          	beq	a0,a5,e2c <button_onChanged+0x78>
     dc4:	478d                	li	a5,3
     dc6:	06f50763          	beq	a0,a5,e34 <button_onChanged+0x80>
     dca:	4785                	li	a5,1
     dcc:	00f51663          	bne	a0,a5,dd8 <button_onChanged+0x24>
		case BTN_SINGLECLICK:
			printf("Single Click\n");
     dd0:	6505                	lui	a0,0x1
     dd2:	7f450513          	addi	a0,a0,2036 # 17f4 <I2C1_ER_IRQHandler+0x96>
			break;
		case BTN_DOUBLECLICK:
			printf("Double Click\n");
			break;
		case BTN_LONGPRESS:
			printf("Long Press\n"); break;
     dd6:	3f4d                	jal	d88 <puts>
	}

	mngI2c_load_buttonState(millis(), event);
     dd8:	c6c1a783          	lw	a5,-916(gp) # 20000068 <systick_millis>
}

void mngI2c_load_buttonState(uint32_t time, uint8_t state) {
	line6_preserve_time = time;

	sprintf(str_output, "button: %d", state);
     ddc:	0ff47613          	andi	a2,s0,255
     de0:	6589                	lui	a1,0x2
	PrintBuff_t *buff = &printBuff[printBuff_idx];
     de2:	c6818413          	addi	s0,gp,-920 # 20000064 <printBuff_idx>
	sprintf(str_output, "button: %d", state);
     de6:	82058593          	addi	a1,a1,-2016 # 1820 <I2C1_ER_IRQHandler+0xc2>
     dea:	d9818513          	addi	a0,gp,-616 # 20000194 <str_output>
     dee:	373d                	jal	d1c <sprintf>
	PrintBuff_t *buff = &printBuff[printBuff_idx];
     df0:	00044483          	lbu	s1,0(s0)
	buff->line_num = line_idx + 1;
     df4:	d1418713          	addi	a4,gp,-748 # 20000110 <printBuff>
     df8:	00149513          	slli	a0,s1,0x1
     dfc:	9526                	add	a0,a0,s1
     dfe:	050a                	slli	a0,a0,0x2
     e00:	9526                	add	a0,a0,s1
     e02:	0506                	slli	a0,a0,0x1
     e04:	953a                	add	a0,a0,a4
     e06:	471d                	li	a4,7
	strncpy(buff->str, str, SSD1306_STR_SIZE);
     e08:	d9818593          	addi	a1,gp,-616 # 20000194 <str_output>
	buff->line_num = line_idx + 1;
     e0c:	00e50ca3          	sb	a4,25(a0)
	strncpy(buff->str, str, SSD1306_STR_SIZE);
     e10:	4665                	li	a2,25
     e12:	3f3d                	jal	d50 <strncpy>
	printBuff_idx = (printBuff_idx + 1) % PRINT_BUFF_SIZE;
     e14:	00148513          	addi	a0,s1,1
     e18:	4595                	li	a1,5
     e1a:	af6ff0ef          	jal	ra,110 <__modsi3>
     e1e:	00a40023          	sb	a0,0(s0)
}
     e22:	40a2                	lw	ra,8(sp)
     e24:	4412                	lw	s0,4(sp)
     e26:	4482                	lw	s1,0(sp)
     e28:	0131                	addi	sp,sp,12
     e2a:	8082                	ret
			printf("Double Click\n");
     e2c:	6509                	lui	a0,0x2
     e2e:	80450513          	addi	a0,a0,-2044 # 1804 <I2C1_ER_IRQHandler+0xa6>
     e32:	b755                	j	dd6 <button_onChanged+0x22>
			printf("Long Press\n"); break;
     e34:	6509                	lui	a0,0x2
     e36:	81450513          	addi	a0,a0,-2028 # 1814 <I2C1_ER_IRQHandler+0xb6>
     e3a:	bf71                	j	dd6 <button_onChanged+0x22>

00000e3c <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
     e3c:	400227b7          	lui	a5,0x40022
     e40:	4705                	li	a4,1
     e42:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
     e44:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     e48:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
     e4c:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     e50:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x1077825>
     e54:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
     e56:	009f0737          	lui	a4,0x9f0
     e5a:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
     e5c:	020006b7          	lui	a3,0x2000
     e60:	40021737          	lui	a4,0x40021
     e64:	431c                	lw	a5,0(a4)
     e66:	8ff5                	and	a5,a5,a3
     e68:	dff5                	beqz	a5,e64 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     e6a:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     e6c:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     e70:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
     e72:	0027e793          	ori	a5,a5,2
     e76:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     e78:	4721                	li	a4,8
     e7a:	42dc                	lw	a5,4(a3)
     e7c:	8bb1                	andi	a5,a5,12
     e7e:	fee79ee3          	bne	a5,a4,e7a <SystemInit+0x3e>
	*DMDATA1 = 0x00;
     e82:	e00007b7          	lui	a5,0xe0000
     e86:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
     e8a:	08000713          	li	a4,128
     e8e:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     e92:	8082                	ret

00000e94 <main>:
//# 	*BTN*		PC0 - [ 				] - PC1		*SDA*


volatile uint8_t i2c_registers[32] = {0xaa};

int main() {
     e94:	fbc10113          	addi	sp,sp,-68
     e98:	c086                	sw	ra,64(sp)
     e9a:	de22                	sw	s0,60(sp)
     e9c:	dc26                	sw	s1,56(sp)
	SystemInit();
     e9e:	3f79                	jal	e3c <SystemInit>
	return;
}


uint16_t fun_optionByte_getValue() {
    uint8_t data0 = OB->Data0;
     ea0:	200006b7          	lui	a3,0x20000
     ea4:	8046d583          	lhu	a1,-2044(a3) # 1ffff804 <lib_i2c.c.d894f163+0x1fff6fa8>
    uint8_t data1 = OB->Data1;
     ea8:	8066d783          	lhu	a5,-2042(a3)
    uint8_t data0 = OB->Data0;
     eac:	80068713          	addi	a4,a3,-2048
    return data0 + (data1 << 8);
     eb0:	0ff5f593          	andi	a1,a1,255
    uint8_t data1 = OB->Data1;
     eb4:	07c2                	slli	a5,a5,0x10
     eb6:	83c1                	srli	a5,a5,0x10
    return data0 + (data1 << 8);
     eb8:	07a2                	slli	a5,a5,0x8
     eba:	8ddd                	or	a1,a1,a5

	uint16_t bootCnt = fun_optionByte_getValue();
	bootCnt++;
     ebc:	0585                	addi	a1,a1,1
	hold32p[0]=ob32p[0]; 			// Copy RDPR and USER
     ebe:	8006a783          	lw	a5,-2048(a3)
     ec2:	05c2                	slli	a1,a1,0x10
     ec4:	81c1                	srli	a1,a1,0x10
     ec6:	d63e                	sw	a5,44(sp)
	hold32p[1]=(uint32_t)data;	    // Copy in the two Data values to be written
     ec8:	d82e                	sw	a1,48(sp)
	hold32p[2]=ob32p[2];			// Copy WRPR0 and WEPR1
     eca:	471c                	lw	a5,8(a4)
	FLASH->KEYR = FLASH_KEY1;
     ecc:	456706b7          	lui	a3,0x45670
     ed0:	12368693          	addi	a3,a3,291 # 45670123 <_eusrstack+0x2566f923>
	hold32p[2]=ob32p[2];			// Copy WRPR0 and WEPR1
     ed4:	da3e                	sw	a5,52(sp)
	FLASH->KEYR = FLASH_KEY2;
     ed6:	cdef9737          	lui	a4,0xcdef9
	FLASH->KEYR = FLASH_KEY1;
     eda:	400227b7          	lui	a5,0x40022
     ede:	c3d4                	sw	a3,4(a5)
	FLASH->KEYR = FLASH_KEY2;
     ee0:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef81ab>
     ee4:	c3d8                	sw	a4,4(a5)
	FLASH->OBKEYR = FLASH_KEY1;
     ee6:	c794                	sw	a3,8(a5)
	FLASH->OBKEYR = FLASH_KEY2;
     ee8:	c798                	sw	a4,8(a5)
	FLASH->CTLR |= CR_OPTER_Set;			// OBER RW Perform user-selected word erasure	
     eea:	4b98                	lw	a4,16(a5)
     eec:	02076713          	ori	a4,a4,32
     ef0:	cb98                	sw	a4,16(a5)
	FLASH->CTLR |= CR_STRT_Set;    			// STRT RW1 Start. Set 1 to start an erase action,hw automatically clears to 0
     ef2:	4b98                	lw	a4,16(a5)
     ef4:	04076713          	ori	a4,a4,64
     ef8:	cb98                	sw	a4,16(a5)
	while (FLASH->STATR & FLASH_BUSY);		// Wait for flash operation to be done
     efa:	47d8                	lw	a4,12(a5)
     efc:	8b05                	andi	a4,a4,1
     efe:	ff75                	bnez	a4,efa <main+0x66>
	FLASH->CTLR &= CR_OPTER_Reset; 			// Disable erasure mode	
     f00:	4b98                	lw	a4,16(a5)
		ob16p[i]=hold[i];
     f02:	20000537          	lui	a0,0x20000
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
     f06:	4619                	li	a2,6
	FLASH->CTLR &= CR_OPTER_Reset; 			// Disable erasure mode	
     f08:	fdf77713          	andi	a4,a4,-33
     f0c:	cb98                	sw	a4,16(a5)
	FLASH->CTLR |= CR_OPTPG_Set;   			// OBG  RW Perform user-selected word programming
     f0e:	4b98                	lw	a4,16(a5)
     f10:	01076713          	ori	a4,a4,16
     f14:	cb98                	sw	a4,16(a5)
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
     f16:	4701                	li	a4,0
		while (FLASH->STATR & FLASH_BUSY);	// Wait for flash operation to be done
     f18:	400227b7          	lui	a5,0x40022
		ob16p[i]=hold[i];
     f1c:	00171693          	slli	a3,a4,0x1
     f20:	1820                	addi	s0,sp,56
     f22:	00d40333          	add	t1,s0,a3
     f26:	ff435303          	lhu	t1,-12(t1)
     f2a:	96aa                	add	a3,a3,a0
     f2c:	80669023          	sh	t1,-2048(a3)
		while (FLASH->STATR & FLASH_BUSY);	// Wait for flash operation to be done
     f30:	47d4                	lw	a3,12(a5)
     f32:	8a85                	andi	a3,a3,1
     f34:	fef5                	bnez	a3,f30 <main+0x9c>
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
     f36:	0705                	addi	a4,a4,1
     f38:	fec712e3          	bne	a4,a2,f1c <main+0x88>
	FLASH->CTLR &= CR_OPTPG_Reset;			// Disable programming mode
     f3c:	4b98                	lw	a4,16(a5)
	fun_optionByte_store(bootCnt);
	printf("Boot Count: %d\n", bootCnt);
     f3e:	6509                	lui	a0,0x2
     f40:	82c50513          	addi	a0,a0,-2004 # 182c <I2C1_ER_IRQHandler+0xce>
     f44:	9b3d                	andi	a4,a4,-17
     f46:	cb98                	sw	a4,16(a5)
	FLASH->CTLR|=CR_LOCK_Set;				// Lock flash memories again
     f48:	4b98                	lw	a4,16(a5)
     f4a:	08076713          	ori	a4,a4,128
     f4e:	cb98                	sw	a4,16(a5)
     f50:	3b95                	jal	cc4 <printf>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
     f52:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     f56:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
     f58:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     f5c:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x3323>
     f60:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
     f62:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
     f66:	c6c18713          	addi	a4,gp,-916 # 20000068 <systick_millis>
     f6a:	00072023          	sw	zero,0(a4)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
     f6e:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f70:	6685                	lui	a3,0x1
     f72:	c6c18413          	addi	s0,gp,-916 # 20000068 <systick_millis>
     f76:	00776713          	ori	a4,a4,7
     f7a:	c398                	sw	a4,0(a5)
     f7c:	e000e737          	lui	a4,0xe000e
     f80:	10d72023          	sw	a3,256(a4) # e000e100 <_eusrstack+0xc000d900>

	systick_init();			//! required for millis()
	funGpioInitAll();
     f84:	400216b7          	lui	a3,0x40021
     f88:	4e98                	lw	a4,24(a3)
     f8a:	03576713          	ori	a4,a4,53
     f8e:	ce98                	sw	a4,24(a3)
	uint32_t targend = SysTick->CNT + n;
     f90:	4798                	lw	a4,8(a5)
     f92:	000757b7          	lui	a5,0x75
     f96:	30078793          	addi	a5,a5,768 # 75300 <lib_i2c.c.d894f163+0x6caa4>
     f9a:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     f9c:	e000f6b7          	lui	a3,0xe000f
     fa0:	469c                	lw	a5,8(a3)
     fa2:	8f99                	sub	a5,a5,a4
     fa4:	fe07cee3          	bltz	a5,fa0 <main+0x10c>
    model->btn_state = BUTTON_IDLE;
    model->debounce_time = 0;
    model->release_time = 0;
    model->press_time = 0;

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
     fa8:	40011637          	lui	a2,0x40011
     fac:	421c                	lw	a5,0(a2)
}

static void uart_setup(void)
{
	// Enable UART and GPIOD
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_USART1;
     fae:	6591                	lui	a1,0x4
     fb0:	02058593          	addi	a1,a1,32 # 4020 <ch32_mess.c.214d2bc2+0x1135>
     fb4:	9bc1                	andi	a5,a5,-16
     fb6:	0087e793          	ori	a5,a5,8
     fba:	c21c                	sw	a5,0(a2)
    funDigitalWrite(model->pin, 1);
     fbc:	4785                	li	a5,1
     fbe:	ca1c                	sw	a5,16(a2)
     fc0:	400217b7          	lui	a5,0x40021
    model->debounce_time = millis();
     fc4:	4018                	lw	a4,0(s0)
    model->release_time = millis();
     fc6:	00042303          	lw	t1,0(s0)
     fca:	4f94                	lw	a3,24(a5)

	// Push-Pull, 10MHz Output on D5, with AutoFunction
	GPIOD->CFGLR = (GPIOD->CFGLR & ~(0xF<<(4*5))) |
     fcc:	ff100537          	lui	a0,0xff100
     fd0:	157d                	addi	a0,a0,-1
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_USART1;
     fd2:	8ecd                	or	a3,a3,a1
     fd4:	cf94                	sw	a3,24(a5)
	GPIOD->CFGLR = (GPIOD->CFGLR & ~(0xF<<(4*5))) |
     fd6:	40060593          	addi	a1,a2,1024 # 40011400 <_eusrstack+0x20010c00>
     fda:	4194                	lw	a3,0(a1)
			((GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*5));

	// Setup UART for Tx 8n1
	USART1->CTLR1 = USART_WordLength_8b | USART_Parity_No | USART_Mode_Tx;
     fdc:	400142b7          	lui	t0,0x40014
	USART1->CTLR2 = USART_StopBits_1;
	// Enable Tx DMA event
	USART1->CTLR3 = USART_DMAReq_Tx;
     fe0:	08000393          	li	t2,128
	GPIOD->CFGLR = (GPIOD->CFGLR & ~(0xF<<(4*5))) |
     fe4:	8ee9                	and	a3,a3,a0
     fe6:	00900537          	lui	a0,0x900
     fea:	8ec9                	or	a3,a3,a0
     fec:	c194                	sw	a3,0(a1)
	USART1->CTLR1 = USART_WordLength_8b | USART_Parity_No | USART_Mode_Tx;
     fee:	4521                	li	a0,8
     ff0:	80028693          	addi	a3,t0,-2048 # 40013800 <_eusrstack+0x20013000>
     ff4:	c6c8                	sw	a0,12(a3)
	USART1->CTLR2 = USART_StopBits_1;
     ff6:	0006a823          	sw	zero,16(a3) # e000f010 <_eusrstack+0xc000e810>
	USART1->CTLR3 = USART_DMAReq_Tx;
     ffa:	0076aa23          	sw	t2,20(a3)

	// Set baud rate and enable UART
	USART1->BRR = ((FUNCONF_SYSTEM_CORE_CLOCK) + (UART_BR)/2) / (UART_BR);
     ffe:	1a100393          	li	t2,417
    1002:	0076a423          	sw	t2,8(a3)
	USART1->CTLR1 |= CTLR1_UE_Set;
    1006:	00c6a383          	lw	t2,12(a3)
    100a:	6089                	lui	ra,0x2

	// Disable channel just in case there is a transfer in progress
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;

	// USART1 TX uses DMA channel 4
	DMA1_Channel4->PADDR = (uint32_t)&USART1->DATAR;
    100c:	80428293          	addi	t0,t0,-2044
	USART1->CTLR1 |= CTLR1_UE_Set;
    1010:	0013e3b3          	or	t2,t2,ra
    1014:	0076a623          	sw	t2,12(a3)
	RCC->AHBPCENR = RCC_AHBPeriph_SRAM | RCC_AHBPeriph_DMA1;
    1018:	4695                	li	a3,5
    101a:	cbd4                	sw	a3,20(a5)
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
    101c:	400206b7          	lui	a3,0x40020
    1020:	0446a383          	lw	t2,68(a3) # 40020044 <_eusrstack+0x2001f844>

		// Reset TIM1 to init all regs
		RCC->APB2PRSTR |= RCC_APB2Periph_TIM1;
		RCC->APB2PRSTR &= ~RCC_APB2Periph_TIM1;
		
		timer->BDTR |= TIM_MOE;			// Enable TIM1 outputs
    1024:	400130b7          	lui	ra,0x40013
    1028:	64a1                	lui	s1,0x8
    102a:	ffe3f393          	andi	t2,t2,-2
    102e:	0476a223          	sw	t2,68(a3)
	DMA1_Channel4->PADDR = (uint32_t)&USART1->DATAR;
    1032:	0456a623          	sw	t0,76(a3)
	// DIR: 1 (read from memory)
	// TEIE: 0 (no tx error interrupt)
	// HTIE: 0 (no half tx interrupt)
	// TCIE: 1 (transmission complete interrupt enable)
	// EN: 0 (do not enable DMA yet)
	DMA1_Channel4->CFGR = DMA_CFGR1_MINC | DMA_CFGR1_DIR | DMA_CFGR1_TCIE;
    1036:	09200293          	li	t0,146
    103a:	0456a223          	sw	t0,68(a3)
    103e:	e000e6b7          	lui	a3,0xe000e
    1042:	020002b7          	lui	t0,0x2000
    1046:	1056a023          	sw	t0,256(a3) # e000e100 <_eusrstack+0xc000d900>
	AFIO->PCFR1 |= AFIO_PCFR1_TIM1_REMAP_NOREMAP;
    104a:	400103b7          	lui	t2,0x40010
    104e:	0043a683          	lw	a3,4(t2) # 40010004 <_eusrstack+0x2000f804>
	// GPIOA->CFGLR &= ~(0xf<<(4*0));	// PA1 Analog input Chan1
	// GPIOA->CFGLR &= ~(0xf<<(4*1));	// PA2 Analog input Chan0

    int chanA = 0;
    int chanB = 1;
    GPIOA->CFGLR &= ~(0xf<<(4*0));
    1052:	80060613          	addi	a2,a2,-2048
    1056:	00d3a223          	sw	a3,4(t2)
		RCC->APB2PCENR |= RCC_APB2Periph_TIM1;
    105a:	0187a283          	lw	t0,24(a5) # 40021018 <_eusrstack+0x20020818>
    105e:	6685                	lui	a3,0x1
    1060:	80068693          	addi	a3,a3,-2048 # 800 <WS2812FillBuffSec+0x3c8>
    1064:	00d2e2b3          	or	t0,t0,a3
    1068:	0057ac23          	sw	t0,24(a5)
		RCC->APB2PRSTR |= RCC_APB2Periph_TIM1;
    106c:	00c7a283          	lw	t0,12(a5)
    1070:	00d2e6b3          	or	a3,t0,a3
    1074:	c7d4                	sw	a3,12(a5)
		RCC->APB2PRSTR &= ~RCC_APB2Periph_TIM1;
    1076:	47d4                	lw	a3,12(a5)
    1078:	72fd                	lui	t0,0xfffff
    107a:	7ff28293          	addi	t0,t0,2047 # fffff7ff <_eusrstack+0xdfffefff>
    107e:	0056f6b3          	and	a3,a3,t0
    1082:	c7d4                	sw	a3,12(a5)
		timer->BDTR |= TIM_MOE;			// Enable TIM1 outputs
    1084:	c440d283          	lhu	t0,-956(ra) # 40012c44 <_eusrstack+0x20012444>
    1088:	c0008693          	addi	a3,ra,-1024
    108c:	02c2                	slli	t0,t0,0x10
    108e:	0102d293          	srli	t0,t0,0x10
    1092:	0092e2b3          	or	t0,t0,s1
    1096:	c4509223          	sh	t0,-956(ra)
		RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
	}

	// CTLR1: default is up, events generated, edge align
	// SMCFGR: default clk input is CK_INT
	timer->PSC = 0x0000;			// Prescaler 
    109a:	c2009423          	sh	zero,-984(ra)
	timer->ATRLR = 255;				// Auto Reload - sets period
    109e:	0ff00293          	li	t0,255
    10a2:	c2509623          	sh	t0,-980(ra)

	timer->SWEVGR |= TIM_UG;		// Reload immediately
    10a6:	c140d483          	lhu	s1,-1004(ra)
    10aa:	04c2                	slli	s1,s1,0x10
    10ac:	80c1                	srli	s1,s1,0x10
    10ae:	0014e493          	ori	s1,s1,1
    10b2:	c0909a23          	sh	s1,-1004(ra)
	timer->CTLR1 |= TIM_CEN;		// Enable timer
    10b6:	c000d483          	lhu	s1,-1024(ra)
    10ba:	04c2                	slli	s1,s1,0x10
    10bc:	80c1                	srli	s1,s1,0x10
    10be:	0014e493          	ori	s1,s1,1
    10c2:	c0909023          	sh	s1,-1024(ra)
}

void fun_timPWM_reload(TIM_PWM_t* model) {
	model->counter = 0;
	model->timeRef = 0;
	funPinMode(model->pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF);
    10c6:	4184                	lw	s1,0(a1)
    10c8:	98c1                	andi	s1,s1,-16
    10ca:	0094e493          	ori	s1,s1,9
    10ce:	c184                	sw	s1,0(a1)
	TIM_TypeDef* timer = model->TIM;

	// default value
	timer->CH1CVR = 255;
    10d0:	0256aa23          	sw	t0,52(a3)
	timer->CH2CVR = 255;
    10d4:	0256ac23          	sw	t0,56(a3)
	timer->CH3CVR = 255;
    10d8:	0256ae23          	sw	t0,60(a3)
	timer->CH4CVR = 255;
    10dc:	0456a023          	sw	t0,64(a3)
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1 | TIM_OC1PE;		// TIM_OC1PE is used by TIM2 only
			timer->CCER |= TIM_CC1E | TIM_CC1P;
			model->channel = 1;
			break;
		case TIM_CC1NE:
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1;
    10e0:	c180d283          	lhu	t0,-1000(ra)
    10e4:	02c2                	slli	t0,t0,0x10
    10e6:	0102d293          	srli	t0,t0,0x10
    10ea:	0602e293          	ori	t0,t0,96
    10ee:	c0509c23          	sh	t0,-1000(ra)
			timer->CCER |= TIM_CC1NE | TIM_CC1NP;
    10f2:	c200d283          	lhu	t0,-992(ra)
    10f6:	02c2                	slli	t0,t0,0x10
    10f8:	0102d293          	srli	t0,t0,0x10
    10fc:	00c2e293          	ori	t0,t0,12
    1100:	c2509023          	sh	t0,-992(ra)
		D5		T2CH4_		//! UART_RX
*/

//! Expected funGpioInitAll() before init
void fun_encoder_setup(Encoder_t *model) {
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    1104:	4fd4                	lw	a3,28(a5)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	funPinMode(PD3, GPIO_CFGLR_IN_PUPD);
    1106:	72c5                	lui	t0,0xffff1
    1108:	12fd                	addi	t0,t0,-1
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    110a:	0016e693          	ori	a3,a3,1
    110e:	cfd4                	sw	a3,28(a5)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
    1110:	0043a683          	lw	a3,4(t2)
    1114:	00d3a223          	sw	a3,4(t2)
	funPinMode(PD3, GPIO_CFGLR_IN_PUPD);
    1118:	4194                	lw	a3,0(a1)
    111a:	0056f6b3          	and	a3,a3,t0
    111e:	62a1                	lui	t0,0x8
    1120:	0056e6b3          	or	a3,a3,t0
    1124:	c194                	sw	a3,0(a1)
	funPinMode(PD4, GPIO_CFGLR_IN_PUPD);
    1126:	4194                	lw	a3,0(a1)
    1128:	fff102b7          	lui	t0,0xfff10
    112c:	12fd                	addi	t0,t0,-1
    112e:	0056f6b3          	and	a3,a3,t0
    1132:	000802b7          	lui	t0,0x80
    1136:	0056e6b3          	or	a3,a3,t0
    113a:	c194                	sw	a3,0(a1)
	funDigitalWrite(PD3, 1);
    113c:	c988                	sw	a0,16(a1)
	funDigitalWrite(PD4, 1);
    113e:	46c1                	li	a3,16
    1140:	c994                	sw	a3,16(a1)

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    1142:	4b94                	lw	a3,16(a5)
    1144:	0016e693          	ori	a3,a3,1
    1148:	cb94                	sw	a3,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    114a:	4b94                	lw	a3,16(a5)
    114c:	9af9                	andi	a3,a3,-2
    114e:	cb94                	sw	a3,16(a5)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
    1150:	400006b7          	lui	a3,0x40000
    1154:	0086d583          	lhu	a1,8(a3) # 40000008 <_eusrstack+0x1ffff808>
    1158:	05c2                	slli	a1,a1,0x10
    115a:	81c1                	srli	a1,a1,0x10
    115c:	0035e593          	ori	a1,a1,3
    1160:	00b69423          	sh	a1,8(a3)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
    1164:	75e5                	lui	a1,0xffff9
    1166:	15fd                	addi	a1,a1,-1
    1168:	02b69223          	sh	a1,36(a3)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
    116c:	0146d583          	lhu	a1,20(a3)
    1170:	05c2                	slli	a1,a1,0x10
    1172:	81c1                	srli	a1,a1,0x10
    1174:	0015e593          	ori	a1,a1,1
    1178:	00b69a23          	sh	a1,20(a3)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
    117c:	0006d583          	lhu	a1,0(a3)
    1180:	05c2                	slli	a1,a1,0x10
    1182:	81c1                	srli	a1,a1,0x10
    1184:	0015e593          	ori	a1,a1,1
    1188:	00b69023          	sh	a1,0(a3)

	model->initial_count = TIM2->CNT;
    118c:	0246d583          	lhu	a1,36(a3)
	model->last_count = TIM2->CNT;
    1190:	0246d683          	lhu	a3,36(a3)
	RCC->CFGR0 &= ~(0x1F<<11);
    1194:	43d4                	lw	a3,4(a5)
    1196:	75c1                	lui	a1,0xffff0
    1198:	7ff58593          	addi	a1,a1,2047 # ffff07ff <_eusrstack+0xdffeffff>
    119c:	8eed                	and	a3,a3,a1
    119e:	c3d4                	sw	a3,4(a5)
	RCC->APB2PCENR |= RCC_APB2Periph_ADC1;
    11a0:	4f94                	lw	a3,24(a5)
    11a2:	2006e693          	ori	a3,a3,512
    11a6:	cf94                	sw	a3,24(a5)
    GPIOA->CFGLR &= ~(0xf<<(4*0));
    11a8:	4214                	lw	a3,0(a2)
    11aa:	9ac1                	andi	a3,a3,-16
    11ac:	c214                	sw	a3,0(a2)
    GPIOA->CFGLR &= ~(0xf<<(4*1));
    11ae:	4214                	lw	a3,0(a2)
    11b0:	f0f6f693          	andi	a3,a3,-241
    11b4:	c214                	sw	a3,0(a2)
	
	// Reset the ADC to init all regs
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    11b6:	47d4                	lw	a3,12(a5)
    // turn on ADC
	ADC1->CTLR2 |= ADC_ADON;
	
	// Reset and calibrate
	ADC1->CTLR2 |= ADC_RSTCAL;
	while(ADC1->CTLR2 & ADC_RSTCAL);
    11b8:	40012637          	lui	a2,0x40012
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    11bc:	2006e693          	ori	a3,a3,512
    11c0:	c7d4                	sw	a3,12(a5)
	RCC->APB2PRSTR &= ~RCC_APB2Periph_ADC1;
    11c2:	47d4                	lw	a3,12(a5)
    11c4:	dff6f693          	andi	a3,a3,-513
    11c8:	c7d4                	sw	a3,12(a5)
	ADC1->RSQR1 = (ADC_NUMCHLS-1) << 20;	// four chls in the sequence
    11ca:	400127b7          	lui	a5,0x40012
    11ce:	40078793          	addi	a5,a5,1024 # 40012400 <_eusrstack+0x20011c00>
    11d2:	001006b7          	lui	a3,0x100
    11d6:	d7d4                	sw	a3,44(a5)
	ADC1->RSQR2 = 0;
    11d8:	0207a823          	sw	zero,48(a5)
    ADC1->RSQR3 = (chanA<<(5*0)) | (chanB<<(5*1));
    11dc:	02000693          	li	a3,32
    11e0:	dbd4                	sw	a3,52(a5)
    ADC1->SAMPTR2 = (7<<(3*chanA)) | (7<<(3*chanB));
    11e2:	03f00693          	li	a3,63
    11e6:	cb94                	sw	a3,16(a5)
	ADC1->CTLR2 |= ADC_ADON;
    11e8:	4794                	lw	a3,8(a5)
    11ea:	0016e693          	ori	a3,a3,1
    11ee:	c794                	sw	a3,8(a5)
	ADC1->CTLR2 |= ADC_RSTCAL;
    11f0:	4794                	lw	a3,8(a5)
    11f2:	0086e693          	ori	a3,a3,8
    11f6:	c794                	sw	a3,8(a5)
	while(ADC1->CTLR2 & ADC_RSTCAL);
    11f8:	40060793          	addi	a5,a2,1024 # 40012400 <_eusrstack+0x20011c00>
    11fc:	4794                	lw	a3,8(a5)
    11fe:	8aa1                	andi	a3,a3,8
    1200:	fee5                	bnez	a3,11f8 <main+0x364>
	ADC1->CTLR2 |= ADC_CAL;
    1202:	4794                	lw	a3,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    1204:	400125b7          	lui	a1,0x40012
	ADC1->CTLR2 |= ADC_CAL;
    1208:	0046e693          	ori	a3,a3,4
    120c:	c794                	sw	a3,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    120e:	40058793          	addi	a5,a1,1024 # 40012400 <_eusrstack+0x20011c00>
    1212:	4794                	lw	a3,8(a5)
    1214:	8a91                	andi	a3,a3,4
    1216:	c236                	sw	a3,4(sp)
    1218:	fafd                	bnez	a3,120e <main+0x37a>
	
	// Turn on DMA
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    121a:	40021637          	lui	a2,0x40021
    121e:	4a54                	lw	a3,20(a2)
    1220:	d21a                	sw	t1,36(sp)
    1222:	d03a                	sw	a4,32(sp)
    1224:	0016e693          	ori	a3,a3,1
    1228:	ca54                	sw	a3,20(a2)
	
	//DMA1_Channel1 is for ADC
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    122a:	44c58593          	addi	a1,a1,1100
    122e:	400206b7          	lui	a3,0x40020
    1232:	ca8c                	sw	a1,16(a3)
	DMA1_Channel1->MADDR = (uint32_t)adc_buffer;
    1234:	c6018593          	addi	a1,gp,-928 # 2000005c <adc_buffer>
    1238:	cacc                	sw	a1,20(a3)
	DMA1_Channel1->CNTR  = ADC_NUMCHLS;
    123a:	4509                	li	a0,2
	DMA1_Channel1->CFGR  =
    123c:	6585                	lui	a1,0x1
	DMA1_Channel1->CNTR  = ADC_NUMCHLS;
    123e:	c6c8                	sw	a0,12(a3)
	DMA1_Channel1->CFGR  =
    1240:	5a058293          	addi	t0,a1,1440 # 15a0 <DMA1_Channel3_IRQHandler+0x64>
    1244:	0056a423          	sw	t0,8(a3) # 40020008 <_eusrstack+0x2001f808>
		DMA_PeripheralDataSize_HalfWord |
		DMA_MemoryInc_Enable |
		DMA_Mode_Circular |
		DMA_DIR_PeripheralSRC;
	
	DMA1_Channel1->CFGR |= DMA_CFGR1_EN;    // Turn on DMA channel 1
    1248:	0086a283          	lw	t0,8(a3)
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
	
	// Enable continuous conversion and DMA
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    124c:	000e03b7          	lui	t2,0xe0
    1250:	10238393          	addi	t2,t2,258 # e0102 <lib_i2c.c.d894f163+0xd78a6>
	DMA1_Channel1->CFGR |= DMA_CFGR1_EN;    // Turn on DMA channel 1
    1254:	0012e293          	ori	t0,t0,1
    1258:	0056a423          	sw	t0,8(a3)
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
    125c:	0047a283          	lw	t0,4(a5)
	R8_SPI_CTRL_CFG |= RB_SPI_BIT_ORDER;

	NVIC_EnableIRQ( SPI0_IRQn );
#else
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    1260:	05c1                	addi	a1,a1,16
		SPI_NSS_Soft | SPI_CPHA_1Edge | SPI_CPOL_Low | SPI_DataSize_16b |
		SPI_Mode_Master | SPI_Direction_1Line_Tx |
		3<<3; // Divisior = 16 (48/16 = 3MHz)

	SPI1->CTLR2 = SPI_CTLR2_TXDMAEN;  // Enable Tx buffer DMA
	SPI1->HSCR = 1; // Enable high-speed read mode
    1262:	4485                	li	s1,1
    1264:	1002e293          	ori	t0,t0,256
    1268:	0057a223          	sw	t0,4(a5)
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    126c:	0087a283          	lw	t0,8(a5)
    1270:	0072e2b3          	or	t0,t0,t2
    1274:	0057a423          	sw	t0,8(a5)
	ADC1->CTLR2 |= ADC_SWSTART;             // start conversion
    1278:	0087a283          	lw	t0,8(a5)
    127c:	004003b7          	lui	t2,0x400
    1280:	0072e2b3          	or	t0,t0,t2
    1284:	0057a423          	sw	t0,8(a5)
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    1288:	4a5c                	lw	a5,20(a2)
    128a:	0017e793          	ori	a5,a5,1
    128e:	ca5c                	sw	a5,20(a2)
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    1290:	4e1c                	lw	a5,24(a2)
    1292:	8ddd                	or	a1,a1,a5
    1294:	ce0c                	sw	a1,24(a2)
	GPIOC->CFGLR &= ~(0xf<<(4*6));
    1296:	400117b7          	lui	a5,0x40011
    129a:	4390                	lw	a2,0(a5)
    129c:	f10005b7          	lui	a1,0xf1000
    12a0:	15fd                	addi	a1,a1,-1
    12a2:	8e6d                	and	a2,a2,a1
    12a4:	c390                	sw	a2,0(a5)
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*6);
    12a6:	4390                	lw	a2,0(a5)
    12a8:	090005b7          	lui	a1,0x9000
    12ac:	8e4d                	or	a2,a2,a1
    12ae:	c390                	sw	a2,0(a5)
	SPI1->CTLR1 = 
    12b0:	7675                	lui	a2,0xffffd
    12b2:	400137b7          	lui	a5,0x40013
    12b6:	b1c60613          	addi	a2,a2,-1252 # ffffcb1c <_eusrstack+0xdfffc31c>
    12ba:	00c79023          	sh	a2,0(a5) # 40013000 <_eusrstack+0x20012800>
	SPI1->CTLR2 = SPI_CTLR2_TXDMAEN;  // Enable Tx buffer DMA
    12be:	00a79223          	sh	a0,4(a5)
	SPI1->HSCR = 1; // Enable high-speed read mode
    12c2:	02979223          	sh	s1,36(a5)

	SPI1->CTLR1 |= CTLR1_SPE_Set; // Enable SPI
    12c6:	0007d603          	lhu	a2,0(a5)

	SPI1->DATAR = 0; // Set SPI line Low.

	//DMA1_Channel3 is for SPI1TX
	DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    12ca:	07b1                	addi	a5,a5,12
    printf("Neo_loadCommand: %02X\n", cmd);
    12cc:	6509                	lui	a0,0x2
	SPI1->CTLR1 |= CTLR1_SPE_Set; // Enable SPI
    12ce:	0642                	slli	a2,a2,0x10
    12d0:	8241                	srli	a2,a2,0x10
    12d2:	04066613          	ori	a2,a2,64
    12d6:	fec79a23          	sh	a2,-12(a5)
	SPI1->DATAR = 0; // Set SPI line Low.
    12da:	00079023          	sh	zero,0(a5)
	DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    12de:	de9c                	sw	a5,56(a3)
	DMA1_Channel3->MADDR = (uint32_t)WS2812dmabuff;
    12e0:	c7018793          	addi	a5,gp,-912 # 2000006c <WS2812dmabuff>
    12e4:	cc3e                	sw	a5,24(sp)
    12e6:	dedc                	sw	a5,60(a3)
	DMA1_Channel3->CNTR  = 0;// sizeof( bufferset )/2; // Number of unique copies.  (Don't start, yet!)
	DMA1_Channel3->CFGR  =
    12e8:	678d                	lui	a5,0x3
	DMA1_Channel3->CNTR  = 0;// sizeof( bufferset )/2; // Number of unique copies.  (Don't start, yet!)
    12ea:	0206aa23          	sw	zero,52(a3)
	DMA1_Channel3->CFGR  =
    12ee:	59678793          	addi	a5,a5,1430 # 3596 <ch32_mess.c.214d2bc2+0x6ab>
    12f2:	da9c                	sw	a5,48(a3)
    12f4:	01000637          	lui	a2,0x1000
    12f8:	e000e7b7          	lui	a5,0xe000e
    12fc:	10c7a023          	sw	a2,256(a5) # e000e100 <_eusrstack+0xc000d900>
		DMA_DIR_PeripheralDST |
		DMA_IT_TC | DMA_IT_HT; // Transmission Complete + Half Empty Interrupts. 

//	NVIC_SetPriority( DMA1_Channel3_IRQn, 0<<4 ); //We don't need to tweak priority.
	NVIC_EnableIRQ( DMA1_Channel3_IRQn );
	DMA1_Channel3->CFGR |= DMA_CFGR1_EN;
    1300:	5a9c                	lw	a5,48(a3)
    1302:	4585                	li	a1,1
    1304:	83c50513          	addi	a0,a0,-1988 # 183c <I2C1_ER_IRQHandler+0xde>
    1308:	0017e793          	ori	a5,a5,1
    130c:	da9c                	sw	a5,48(a3)
    130e:	9b7ff0ef          	jal	ra,cc4 <printf>
    leds_frame.ref_time = millis();
    1312:	4010                	lw	a2,0(s0)
    Neo_LedCmd = cmd;
    1314:	c2918223          	sb	s1,-988(gp) # 20000020 <Neo_LedCmd>
    leds_frame.is_enabled = 1;
    1318:	c1018693          	addi	a3,gp,-1008 # 2000000c <leds_frame>
    leds_frame.ref_time = millis();
    131c:	ca90                	sw	a2,16(a3)
    leds_frame.is_enabled = 1;
    131e:	009685a3          	sb	s1,11(a3)
    leds_frame.ref_index = 0;
    1322:	00068723          	sb	zero,14(a3)
    memset(led_arr, 0, sizeof(led_arr));
    1326:	4661                	li	a2,24
    1328:	4581                	li	a1,0
    132a:	cfc18513          	addi	a0,gp,-772 # 200000f8 <led_arr>
    color_ani.ref_index = 0;
    132e:	c20186a3          	sb	zero,-979(gp) # 20000029 <color_ani+0x5>
    memset(led_arr, 0, sizeof(led_arr));
    1332:	3431                	jal	d3e <memset>
	// }

	WS2812BDMAInit();
	Neo_loadCommand(NEO_COLOR_CHASE);

	uint32_t now = millis();
    1334:	4014                	lw	a3,0(s0)
	Session_t session = { 0, 0, now };
    1336:	5312                	lw	t1,36(sp)
    1338:	5702                	lw	a4,32(sp)
    133a:	c1018793          	addi	a5,gp,-1008 # 2000000c <leds_frame>
	model->timeRef = 0;
    133e:	ca02                	sw	zero,20(sp)
	model->counter = 0;
    1340:	c002                	sw	zero,0(sp)
    1342:	c802                	sw	zero,16(sp)
    1344:	c602                	sw	zero,12(sp)
    1346:	c402                	sw	zero,8(sp)
    model->btn_state = newState;
    1348:	468d                	li	a3,3
    134a:	ce3e                	sw	a5,28(sp)

	while(1) {
		now = millis();
    134c:	4004                	lw	s1,0(s0)
    _reset_timers(BUTTON_IDLE, model);
}

void fun_button_task(uint32_t time, Button_t *model, void (*handler)(int, uint32_t)) {
    if (model->pin == 0xFF) return;
    uint8_t read = funDigitalRead(model->pin);
    134e:	40011637          	lui	a2,0x40011
    1352:	4610                	lw	a2,8(a2)

    // Debounce check
    if (time - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1354:	40e48533          	sub	a0,s1,a4
    1358:	45cd                	li	a1,19
    135a:	02a5f963          	bgeu	a1,a0,138c <main+0x4f8>
    model->debounce_time = time;

    switch (model->btn_state) {
    135e:	4709                	li	a4,2
    uint8_t read = funDigitalRead(model->pin);
    1360:	8a05                	andi	a2,a2,1
    switch (model->btn_state) {
    1362:	16e68963          	beq	a3,a4,14d4 <main+0x640>
    1366:	470d                	li	a4,3
    1368:	00e68b63          	beq	a3,a4,137e <main+0x4ea>
    136c:	12069b63          	bnez	a3,14a2 <main+0x60e>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
    1370:	10060563          	beqz	a2,147a <main+0x5e6>
    model->debounce_time = millis();
    1374:	4018                	lw	a4,0(s0)
    model->btn_state = newState;
    1376:	86b2                	mv	a3,a2
    model->release_time = millis();
    1378:	00042303          	lw	t1,0(s0)
    137c:	a801                	j	138c <main+0x4f8>
    model->debounce_time = time;
    137e:	8726                	mv	a4,s1
        if (read == 0) {
    1380:	e611                	bnez	a2,138c <main+0x4f8>
    model->debounce_time = millis();
    1382:	4018                	lw	a4,0(s0)
    model->release_time = millis();
    1384:	00042303          	lw	t1,0(s0)
            model->press_time = time;
    1388:	c226                	sw	s1,4(sp)
    model->btn_state = newState;
    138a:	4681                	li	a3,0
	}
}


void fun_timPWM_task(uint32_t time, TIM_PWM_t* model) {
	if (time - model->timeRef < 5) { return; }
    138c:	47d2                	lw	a5,20(sp)
    138e:	4591                	li	a1,4
    1390:	40f48633          	sub	a2,s1,a5
    1394:	00c5fe63          	bgeu	a1,a2,13b0 <main+0x51c>
		case 1: timer->CH1CVR = width; break;
    1398:	4782                	lw	a5,0(sp)
    139a:	40013637          	lui	a2,0x40013
    139e:	c0060613          	addi	a2,a2,-1024 # 40012c00 <_eusrstack+0x20012400>
    13a2:	da5c                	sw	a5,52(a2)
	model->timeRef = time;

	fun_timPWM_setpw(model, model->counter);
	model->counter++;
    13a4:	4782                	lw	a5,0(sp)
	model->timeRef = time;
    13a6:	ca26                	sw	s1,20(sp)
	model->counter++;
    13a8:	0785                	addi	a5,a5,1
	model->counter &= 255;
    13aa:	0ff7f793          	andi	a5,a5,255
    13ae:	c03e                	sw	a5,0(sp)
}

uint32_t neo_timeRef = 0;

void Neo_task(uint32_t time) {
    if (time - neo_timeRef < 10) return;
    13b0:	c6418593          	addi	a1,gp,-924 # 20000060 <neo_timeRef>
    13b4:	4190                	lw	a2,0(a1)
    13b6:	4525                	li	a0,9
    13b8:	40c48633          	sub	a2,s1,a2
    13bc:	08c57663          	bgeu	a0,a2,1448 <main+0x5b4>
    neo_timeRef = time;
    
    if (WS2812BLEDInUse || leds_frame.is_enabled == 0) return;
    13c0:	c5418613          	addi	a2,gp,-940 # 20000050 <WS2812BLEDInUse>
    neo_timeRef = time;
    13c4:	c184                	sw	s1,0(a1)
    if (WS2812BLEDInUse || leds_frame.is_enabled == 0) return;
    13c6:	420c                	lw	a1,0(a2)
    13c8:	e1c1                	bnez	a1,1448 <main+0x5b4>
    13ca:	47f2                	lw	a5,28(sp)
    13cc:	00b7c583          	lbu	a1,11(a5)
    13d0:	cda5                	beqz	a1,1448 <main+0x5b4>
    13d2:	d41a                	sw	t1,40(sp)
    13d4:	d23a                	sw	a4,36(sp)
    13d6:	d036                	sw	a3,32(sp)
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
    13d8:	300025f3          	csrr	a1,mstatus
	result &= ~0x88; __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
    13dc:	f775f593          	andi	a1,a1,-137
    13e0:	30059073          	csrw	mstatus,a1
	WS2812BLEDInUse = 1;
    13e4:	4585                	li	a1,1
    13e6:	c20c                	sw	a1,0(a2)
	DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    13e8:	400202b7          	lui	t0,0x40020
    13ec:	0302a603          	lw	a2,48(t0) # 40020030 <_eusrstack+0x2001f830>
	DMA1_Channel3->MADDR = (uint32_t)WS2812dmabuff;
    13f0:	47e2                	lw	a5,24(sp)
	DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    13f2:	fdf67613          	andi	a2,a2,-33
    13f6:	02c2a823          	sw	a2,48(t0)
	DMA1_Channel3->CNTR  = 0;
    13fa:	0202aa23          	sw	zero,52(t0)
	DMA1_Channel3->MADDR = (uint32_t)WS2812dmabuff;
    13fe:	02f2ae23          	sw	a5,60(t0)
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
    1402:	30002673          	csrr	a2,mstatus
	result |= 0x88;  __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
    1406:	08866613          	ori	a2,a2,136
    140a:	30061073          	csrw	mstatus,a2
	WS2812LEDs = leds;
    140e:	4599                	li	a1,6
    1410:	c4b1ae23          	sw	a1,-932(gp) # 20000058 <WS2812LEDs>
	WS2812LEDPlace = -WS2812B_RESET_PERIOD;
    1414:	55f9                	li	a1,-2
    1416:	c4b1ac23          	sw	a1,-936(gp) # 20000054 <WS2812LEDPlace>
	WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 0 );
    141a:	c7018513          	addi	a0,gp,-912 # 2000006c <WS2812dmabuff>
    141e:	4601                	li	a2,0
    1420:	03000593          	li	a1,48
    1424:	814ff0ef          	jal	ra,438 <WS2812FillBuffSec>
	DMA1_Channel3->CNTR = DMA_BUFFER_LEN; // Number of unique uint16_t entries.
    1428:	03000613          	li	a2,48
    142c:	400207b7          	lui	a5,0x40020
    1430:	dbd0                	sw	a2,52(a5)
	DMA1_Channel3->CFGR |= DMA_Mode_Circular;
    1432:	400202b7          	lui	t0,0x40020
    1436:	0302a603          	lw	a2,48(t0) # 40020030 <_eusrstack+0x2001f830>
    143a:	5322                	lw	t1,40(sp)
    143c:	5712                	lw	a4,36(sp)
    143e:	5682                	lw	a3,32(sp)
    1440:	02066613          	ori	a2,a2,32
    1444:	02c2a823          	sw	a2,48(t0)
		//# prioritize tasks
		fun_button_task(now, &button1, button_onChanged);
		fun_timPWM_task(now, &pwm_CH1c);
		Neo_task(now);

		if (now - session.timeRef_1sec > 1000) {
    1448:	47a2                	lw	a5,8(sp)
    144a:	3e800593          	li	a1,1000
    144e:	40f48633          	sub	a2,s1,a5
    1452:	08c5fa63          	bgeu	a1,a2,14e6 <main+0x652>
}

static void dma_uart_tx(const void *data, uint32_t len)
{
	// Disable DMA channel (just in case a transfer is pending)
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
    1456:	40020637          	lui	a2,0x40020
    145a:	426c                	lw	a1,68(a2)
    145c:	99f9                	andi	a1,a1,-2
    145e:	c26c                	sw	a1,68(a2)
	// Set transfer length and source address
	DMA1_Channel4->CNTR = len;
    1460:	45b9                	li	a1,14
    1462:	c62c                	sw	a1,72(a2)
	DMA1_Channel4->MADDR = (uint32_t)data;
    1464:	6589                	lui	a1,0x2
    1466:	97458593          	addi	a1,a1,-1676 # 1974 <message.0>
    146a:	ca2c                	sw	a1,80(a2)
	// Enable DMA channel to start the transfer
	DMA1_Channel4->CFGR |= DMA_CFGR1_EN;
    146c:	426c                	lw	a1,68(a2)
    146e:	0015e593          	ori	a1,a1,1
    1472:	c26c                	sw	a1,68(a2)
			session.timeRef_1sec = now;
    1474:	c426                	sw	s1,8(sp)

			// fun_encoder_task(&encoder_a, encoder_onChanged);
			// fun_joystick_task(joystick_onChanged);
		}

		session.fullCycle_time = millis() - now;
    1476:	401c                	lw	a5,0(s0)
	while(1) {
    1478:	bdd1                	j	134c <main+0x4b8>
            _reset_timers(BTN_UP, model);        // First Release

        } else {
            // Long press detection
            uint32_t press_duration = time - model->press_time;
    147a:	4792                	lw	a5,4(sp)
            if (press_duration > TICK_LONG_PRESS_DUR) {
    147c:	6605                	lui	a2,0x1
    147e:	fa060613          	addi	a2,a2,-96 # fa0 <main+0x10c>
            uint32_t press_duration = time - model->press_time;
    1482:	40f485b3          	sub	a1,s1,a5
    model->debounce_time = time;
    1486:	8726                	mv	a4,s1
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1488:	f0b672e3          	bgeu	a2,a1,138c <main+0x4f8>
            handler(BTN_LONGPRESS, press_duration - TICK_LONG_PRESS_DUR);
    148c:	8d91                	sub	a1,a1,a2
    148e:	450d                	li	a0,3
    1490:	d41a                	sw	t1,40(sp)
    1492:	d036                	sw	a3,32(sp)
    1494:	d226                	sw	s1,36(sp)
    1496:	91fff0ef          	jal	ra,db4 <button_onChanged>
    149a:	5682                	lw	a3,32(sp)
    149c:	5712                	lw	a4,36(sp)
    149e:	5322                	lw	t1,40(sp)
    14a0:	b5f5                	j	138c <main+0x4f8>
            }
        }
        break;

    case BTN_UP: {
        uint32_t release_duration = time - model->release_time;
    14a2:	40648733          	sub	a4,s1,t1

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    14a6:	ea11                	bnez	a2,14ba <main+0x626>
    14a8:	09f00693          	li	a3,159
    14ac:	00e6e763          	bltu	a3,a4,14ba <main+0x626>
    model->debounce_time = millis();
    14b0:	4018                	lw	a4,0(s0)
    model->btn_state = newState;
    14b2:	4689                	li	a3,2
    model->release_time = millis();
    14b4:	00042303          	lw	t1,0(s0)
    14b8:	bdd1                	j	138c <main+0x4f8>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    14ba:	0a000693          	li	a3,160
    14be:	02e6f163          	bgeu	a3,a4,14e0 <main+0x64c>
            handler(BTN_SINGLECLICK, 0);  // Single Click
    14c2:	4581                	li	a1,0
    14c4:	4505                	li	a0,1
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
            handler(BTN_DOUBLECLICK, 0);  // Double Click
    14c6:	8efff0ef          	jal	ra,db4 <button_onChanged>
    model->debounce_time = millis();
    14ca:	4018                	lw	a4,0(s0)
    model->btn_state = newState;
    14cc:	468d                	li	a3,3
    model->release_time = millis();
    14ce:	00042303          	lw	t1,0(s0)
    14d2:	bd6d                	j	138c <main+0x4f8>
    model->debounce_time = time;
    14d4:	8726                	mv	a4,s1
        if (read > 0) {
    14d6:	ea060be3          	beqz	a2,138c <main+0x4f8>
            handler(BTN_DOUBLECLICK, 0);  // Double Click
    14da:	4581                	li	a1,0
    14dc:	4509                	li	a0,2
    14de:	b7e5                	j	14c6 <main+0x632>
    model->debounce_time = time;
    14e0:	8726                	mv	a4,s1
        } else if (release_duration > TICK_CLICK_DUR) {
    14e2:	4685                	li	a3,1
    14e4:	b565                	j	138c <main+0x4f8>
		else if (now - session.timeRef_100ms > 100) {
    14e6:	47c2                	lw	a5,16(sp)
    14e8:	06400593          	li	a1,100
    14ec:	40f48633          	sub	a2,s1,a5
    14f0:	00c5eb63          	bltu	a1,a2,1506 <main+0x672>
		else if (now - session.timeRef_50ms > 50) {
    14f4:	47b2                	lw	a5,12(sp)
    14f6:	03200593          	li	a1,50
    14fa:	40f48633          	sub	a2,s1,a5
    14fe:	f6c5fce3          	bgeu	a1,a2,1476 <main+0x5e2>
			session.timeRef_50ms = now;
    1502:	c626                	sw	s1,12(sp)
    1504:	bf8d                	j	1476 <main+0x5e2>
			session.timeRef_100ms = now;
    1506:	c826                	sw	s1,16(sp)
    1508:	b7bd                	j	1476 <main+0x5e2>

0000150a <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
    150a:	1151                	addi	sp,sp,-12
    150c:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    150e:	e000f7b7          	lui	a5,0xe000f
{
    1512:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1514:	4b98                	lw	a4,16(a5)
{
    1516:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1518:	66b1                	lui	a3,0xc
    151a:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x3324>
    151e:	9736                	add	a4,a4,a3
    1520:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
    1522:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
    1526:	c6c18793          	addi	a5,gp,-916 # 20000068 <systick_millis>
    152a:	4398                	lw	a4,0(a5)
}
    152c:	46a2                	lw	a3,8(sp)
	systick_millis++;
    152e:	0705                	addi	a4,a4,1
    1530:	c398                	sw	a4,0(a5)
}
    1532:	4712                	lw	a4,4(sp)
    1534:	4782                	lw	a5,0(sp)
    1536:	0131                	addi	sp,sp,12
    1538:	30200073          	mret

0000153c <DMA1_Channel3_IRQHandler>:
{
    153c:	fcc10113          	addi	sp,sp,-52
    1540:	c23e                	sw	a5,4(sp)
	volatile int intfr = DMA1->INTFR;
    1542:	400207b7          	lui	a5,0x40020
    1546:	439c                	lw	a5,0(a5)
{
    1548:	d022                	sw	s0,32(sp)
    154a:	ce26                	sw	s1,28(sp)
    154c:	d806                	sw	ra,48(sp)
    154e:	d616                	sw	t0,44(sp)
    1550:	d41a                	sw	t1,40(sp)
    1552:	d21e                	sw	t2,36(sp)
    1554:	cc2a                	sw	a0,24(sp)
    1556:	ca2e                	sw	a1,20(sp)
    1558:	c832                	sw	a2,16(sp)
    155a:	c636                	sw	a3,12(sp)
    155c:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    155e:	c03e                	sw	a5,0(sp)
		DMA1->INTFCR = DMA1_IT_GL3;
    1560:	40020437          	lui	s0,0x40020
    1564:	10000493          	li	s1,256
    1568:	c044                	sw	s1,4(s0)
		if( intfr & DMA1_IT_HT3 )
    156a:	4782                	lw	a5,0(sp)
    156c:	4007f793          	andi	a5,a5,1024
    1570:	c799                	beqz	a5,157e <DMA1_Channel3_IRQHandler+0x42>
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    1572:	4605                	li	a2,1
    1574:	45e1                	li	a1,24
    1576:	c7018513          	addi	a0,gp,-912 # 2000006c <WS2812dmabuff>
    157a:	ebffe0ef          	jal	ra,438 <WS2812FillBuffSec>
		if( intfr & DMA1_IT_TC3 )
    157e:	4782                	lw	a5,0(sp)
    1580:	2007f793          	andi	a5,a5,512
    1584:	c799                	beqz	a5,1592 <DMA1_Channel3_IRQHandler+0x56>
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    1586:	4601                	li	a2,0
    1588:	45e1                	li	a1,24
    158a:	ca018513          	addi	a0,gp,-864 # 2000009c <WS2812dmabuff+0x30>
    158e:	eabfe0ef          	jal	ra,438 <WS2812FillBuffSec>
		intfr = DMA1->INTFR;
    1592:	401c                	lw	a5,0(s0)
    1594:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    1596:	4782                	lw	a5,0(sp)
    1598:	1007f793          	andi	a5,a5,256
    159c:	f7f1                	bnez	a5,1568 <DMA1_Channel3_IRQHandler+0x2c>
}
    159e:	5402                	lw	s0,32(sp)
    15a0:	50c2                	lw	ra,48(sp)
    15a2:	52b2                	lw	t0,44(sp)
    15a4:	5322                	lw	t1,40(sp)
    15a6:	5392                	lw	t2,36(sp)
    15a8:	44f2                	lw	s1,28(sp)
    15aa:	4562                	lw	a0,24(sp)
    15ac:	45d2                	lw	a1,20(sp)
    15ae:	4642                	lw	a2,16(sp)
    15b0:	46b2                	lw	a3,12(sp)
    15b2:	4722                	lw	a4,8(sp)
    15b4:	4792                	lw	a5,4(sp)
    15b6:	03410113          	addi	sp,sp,52
    15ba:	30200073          	mret

000015be <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    15be:	7179                	addi	sp,sp,-48
    15c0:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    15c2:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    15c6:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    15c8:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    15cc:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    15d0:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    15d4:	cc26                	sw	s1,24(sp)
    15d6:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    15d8:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    15dc:	d416                	sw	t0,40(sp)
    15de:	d21a                	sw	t1,36(sp)
    15e0:	d01e                	sw	t2,32(sp)
    15e2:	ce22                	sw	s0,28(sp)
    15e4:	ca2a                	sw	a0,20(sp)
    15e6:	c82e                	sw	a1,16(sp)
    15e8:	c632                	sw	a2,12(sp)
    15ea:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    15ec:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    15ee:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    15f0:	c305                	beqz	a4,1610 <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    15f2:	cd018713          	addi	a4,gp,-816 # 200000cc <i2c_slave_state>
    15f6:	4685                	li	a3,1
    15f8:	07c2                	slli	a5,a5,0x10
    15fa:	83c1                	srli	a5,a5,0x10
    15fc:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1600:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1604:	839d                	srli	a5,a5,0x7
    1606:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1608:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    160c:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    1610:	0404f793          	andi	a5,s1,64
    1614:	c795                	beqz	a5,1640 <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    1616:	cd018793          	addi	a5,gp,-816 # 200000cc <i2c_slave_state>
    161a:	0007c703          	lbu	a4,0(a5)
    161e:	c379                	beqz	a4,16e4 <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
    1620:	40005737          	lui	a4,0x40005
    1624:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    1628:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    162c:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    1630:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    1634:	0ff77713          	andi	a4,a4,255
    1638:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    163c:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    1640:	0804f793          	andi	a5,s1,128
    1644:	c7a1                	beqz	a5,168c <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    1646:	cd018793          	addi	a5,gp,-816 # 200000cc <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    164a:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    164e:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    1652:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    1656:	400057b7          	lui	a5,0x40005
    165a:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    165e:	cd018413          	addi	s0,gp,-816 # 200000cc <i2c_slave_state>
    1662:	cb79                	beqz	a4,1738 <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1664:	01044703          	lbu	a4,16(s0) # 40020010 <_eusrstack+0x2001f810>
    1668:	0ee57663          	bgeu	a0,a4,1754 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    166c:	4458                	lw	a4,12(s0)
    166e:	972a                	add	a4,a4,a0
    1670:	00074703          	lbu	a4,0(a4)
    1674:	0ff77713          	andi	a4,a4,255
    1678:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    167c:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    167e:	c391                	beqz	a5,1682 <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    1680:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    1682:	00244783          	lbu	a5,2(s0)
    1686:	0785                	addi	a5,a5,1
    1688:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    168c:	88c1                	andi	s1,s1,16
    168e:	cc85                	beqz	s1,16c6 <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    1690:	40005737          	lui	a4,0x40005
    1694:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    1698:	07c2                	slli	a5,a5,0x10
    169a:	83c1                	srli	a5,a5,0x10
    169c:	dff7f793          	andi	a5,a5,-513
    16a0:	07c2                	slli	a5,a5,0x10
    16a2:	83c1                	srli	a5,a5,0x10
    16a4:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
    16a8:	cd018793          	addi	a5,gp,-816 # 200000cc <i2c_slave_state>
    16ac:	02a7c703          	lbu	a4,42(a5)
    16b0:	c74d                	beqz	a4,175a <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
    16b2:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    16b4:	cb09                	beqz	a4,16c6 <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    16b6:	0017c503          	lbu	a0,1(a5)
    16ba:	0027c583          	lbu	a1,2(a5)
    16be:	8d89                	sub	a1,a1,a0
    16c0:	0ff5f593          	andi	a1,a1,255
    16c4:	9702                	jalr	a4
            }
        }
    }
}
    16c6:	4472                	lw	s0,28(sp)
    16c8:	50b2                	lw	ra,44(sp)
    16ca:	52a2                	lw	t0,40(sp)
    16cc:	5312                	lw	t1,36(sp)
    16ce:	5382                	lw	t2,32(sp)
    16d0:	44e2                	lw	s1,24(sp)
    16d2:	4552                	lw	a0,20(sp)
    16d4:	45c2                	lw	a1,16(sp)
    16d6:	4632                	lw	a2,12(sp)
    16d8:	46a2                	lw	a3,8(sp)
    16da:	4712                	lw	a4,4(sp)
    16dc:	4782                	lw	a5,0(sp)
    16de:	6145                	addi	sp,sp,48
    16e0:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    16e4:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    16e8:	4705                	li	a4,1
    16ea:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    16ee:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    16f2:	c695                	beqz	a3,171e <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    16f4:	0107c683          	lbu	a3,16(a5)
    16f8:	f4d774e3          	bgeu	a4,a3,1640 <I2C1_EV_IRQHandler+0x82>
    16fc:	0287c683          	lbu	a3,40(a5)
    1700:	f2a1                	bnez	a3,1640 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    1702:	400056b7          	lui	a3,0x40005
    1706:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    170a:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    170c:	96ba                	add	a3,a3,a4
    170e:	0ff67613          	andi	a2,a2,255
    1712:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    1716:	0705                	addi	a4,a4,1
    1718:	00e78123          	sb	a4,2(a5)
    171c:	b715                	j	1640 <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    171e:	0087c683          	lbu	a3,8(a5)
    1722:	f0d77fe3          	bgeu	a4,a3,1640 <I2C1_EV_IRQHandler+0x82>
    1726:	01c7c683          	lbu	a3,28(a5)
    172a:	fa99                	bnez	a3,1640 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    172c:	400056b7          	lui	a3,0x40005
    1730:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1734:	43d4                	lw	a3,4(a5)
    1736:	bfd9                	j	170c <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    1738:	00844703          	lbu	a4,8(s0)
    173c:	00e57c63          	bgeu	a0,a4,1754 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    1740:	4058                	lw	a4,4(s0)
    1742:	972a                	add	a4,a4,a0
    1744:	00074703          	lbu	a4,0(a4)
    1748:	0ff77713          	andi	a4,a4,255
    174c:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    1750:	4c1c                	lw	a5,24(s0)
    1752:	b735                	j	167e <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    1754:	00079823          	sh	zero,16(a5)
    1758:	bf15                	j	168c <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    175a:	4bd8                	lw	a4,20(a5)
    175c:	bfa1                	j	16b4 <I2C1_EV_IRQHandler+0xf6>

0000175e <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    175e:	1151                	addi	sp,sp,-12
    1760:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1762:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
    1766:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1768:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    176c:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    176e:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1772:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
    1776:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1778:	cf89                	beqz	a5,1792 <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    177a:	41475783          	lhu	a5,1044(a4)
    177e:	40070713          	addi	a4,a4,1024
    1782:	07c2                	slli	a5,a5,0x10
    1784:	83c1                	srli	a5,a5,0x10
    1786:	eff7f793          	andi	a5,a5,-257
    178a:	07c2                	slli	a5,a5,0x10
    178c:	83c1                	srli	a5,a5,0x10
    178e:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    1792:	2006f793          	andi	a5,a3,512
    1796:	cf89                	beqz	a5,17b0 <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    1798:	40005737          	lui	a4,0x40005
    179c:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    17a0:	07c2                	slli	a5,a5,0x10
    17a2:	83c1                	srli	a5,a5,0x10
    17a4:	dff7f793          	andi	a5,a5,-513
    17a8:	07c2                	slli	a5,a5,0x10
    17aa:	83c1                	srli	a5,a5,0x10
    17ac:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    17b0:	4006f693          	andi	a3,a3,1024
    17b4:	ce89                	beqz	a3,17ce <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    17b6:	40005737          	lui	a4,0x40005
    17ba:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    17be:	07c2                	slli	a5,a5,0x10
    17c0:	83c1                	srli	a5,a5,0x10
    17c2:	bff7f793          	andi	a5,a5,-1025
    17c6:	07c2                	slli	a5,a5,0x10
    17c8:	83c1                	srli	a5,a5,0x10
    17ca:	40f71a23          	sh	a5,1044(a4)
    }
}
    17ce:	46a2                	lw	a3,8(sp)
    17d0:	4712                	lw	a4,4(sp)
    17d2:	4782                	lw	a5,0(sp)
    17d4:	0131                	addi	sp,sp,12
    17d6:	30200073          	mret
    17da:	0000                	unimp
    17dc:	0504                	addi	s1,sp,640
    17de:	0000                	unimp
    17e0:	05ee                	slli	a1,a1,0x1b
    17e2:	0000                	unimp
    17e4:	0682                	c.slli64	a3
    17e6:	0000                	unimp
    17e8:	0802                	c.slli64	a6
    17ea:	0000                	unimp
    17ec:	0908                	addi	a0,sp,144
    17ee:	0000                	unimp
    17f0:	000a                	c.slli	zero,0x2
    17f2:	0000                	unimp
    17f4:	676e6953          	0x676e6953
    17f8:	656c                	flw	fa1,76(a0)
    17fa:	4320                	lw	s0,64(a4)
    17fc:	696c                	flw	fa1,84(a0)
    17fe:	00006b63          	bltu	zero,zero,1814 <I2C1_ER_IRQHandler+0xb6>
    1802:	0000                	unimp
    1804:	6f44                	flw	fs1,28(a4)
    1806:	6275                	lui	tp,0x1d
    1808:	656c                	flw	fa1,76(a0)
    180a:	4320                	lw	s0,64(a4)
    180c:	696c                	flw	fa1,84(a0)
    180e:	00006b63          	bltu	zero,zero,1824 <I2C1_ER_IRQHandler+0xc6>
    1812:	0000                	unimp
    1814:	6f4c                	flw	fa1,28(a4)
    1816:	676e                	flw	fa4,216(sp)
    1818:	5020                	lw	s0,96(s0)
    181a:	6572                	flw	fa0,28(sp)
    181c:	00007373          	csrrci	t1,ustatus,0
    1820:	7562                	flw	fa0,56(sp)
    1822:	7474                	flw	fa3,108(s0)
    1824:	203a6e6f          	jal	t3,a8226 <lib_i2c.c.d894f163+0x9f9ca>
    1828:	6425                	lui	s0,0x9
    182a:	0000                	unimp
    182c:	6f42                	flw	ft10,16(sp)
    182e:	4320746f          	jal	s0,8c60 <lib_i2c.c.d894f163+0x404>
    1832:	746e756f          	jal	a0,e8f78 <lib_i2c.c.d894f163+0xe071c>
    1836:	203a                	fld	ft0,392(sp)
    1838:	6425                	lui	s0,0x9
    183a:	000a                	c.slli	zero,0x2
    183c:	654e                	flw	fa0,208(sp)
    183e:	6f6c5f6f          	jal	t5,c6f34 <lib_i2c.c.d894f163+0xbe6d8>
    1842:	6461                	lui	s0,0x18
    1844:	6d6d6f43          	0x6d6d6f43
    1848:	6e61                	lui	t3,0x18
    184a:	3a64                	fld	fs1,240(a2)
    184c:	2520                	fld	fs0,72(a0)
    184e:	3230                	fld	fa2,96(a2)
    1850:	0a58                	addi	a4,sp,276
	...

00001854 <SIN_LUT2>:
    1854:	0100 0101 0101 0202 0403 0504 0706 0908     ................
    1864:	0b0a 0e0d 1110 1413 1816 1b1a 1f1d 2421     ..............!$
    1874:	2826 2d2a 312f 3634 3c39 413e 4744 4c49     &(*-/1469<>ADGIL
    1884:	524f 5855 5e5b 6461 6a67 706d 7673 7d79     ORUX[^adgjmpsvy}
    1894:	8380 8986 8f8c 9592 9c99 a29f a8a5 adab     ................
    18a4:	b3b0 b9b6 bebc c4c1 c9c6 cecb d3d0 d7d5     ................
    18b4:	dcda e0de e4e2 e8e6 ebe9 eeed f1f0 f4f3     ................
    18c4:	f6f5 f8f7 faf9 fcfb fdfc fefe fffe ffff     ................
    18d4:	ffff ffff fefe fdfe fcfc fafb f8f9 f6f7     ................
    18e4:	f4f5 f1f3 eef0 ebed e8e9 e4e6 e0e2 dcde     ................
    18f4:	d7da d3d5 ced0 c9cb c4c6 bec1 b9bc b3b6     ................
    1904:	adb0 a8ab a2a5 9c9f 9599 8f92 898c 8386     ................
    1914:	7d80 7679 7073 6a6d 6467 5e61 585b 5255     .}yvspmjgda^[XUR
    1924:	4c4f 4749 4144 3c3e 3639 3134 2d2f 282a     OLIGDA><9641/-*(
    1934:	2426 1f21 1b1d 181a 1416 1113 0e10 0b0d     &$!.............
    1944:	090a 0708 0506 0404 0203 0102 0101 0101     ................

00001954 <bitquartets.10>:
    1954:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    1964:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

00001974 <message.0>:
    1974:	6548 6c6c 206f 6f57 6c72 2164 0a0d 0000     Hello World!....

Disassembly of section .data:

20000000 <color_arr>:
20000000:	0033 0000 3300 0000 0000 0033               3....3....3.

2000000c <leds_frame>:
2000000c:	0000 0000 0046 0000 0001 0000 0000 0000     ....F...........
2000001c:	0000 0000                                   ....

20000020 <Neo_LedCmd>:
20000020:	0061 0000                                   a...

20000024 <color_ani>:
20000024:	0000 2000 0003 0000 0000 0000               ... ........

20000030 <DMA1_Channel4_IRQHandler>:
{
20000030:	1151                	addi	sp,sp,-12
20000032:	c23a                	sw	a4,4(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000034:	40020737          	lui	a4,0x40020
{
20000038:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000003a:	435c                	lw	a5,4(a4)
{
2000003c:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000003e:	6689                	lui	a3,0x2
20000040:	8fd5                	or	a5,a5,a3
20000042:	c35c                	sw	a5,4(a4)
}
20000044:	46a2                	lw	a3,8(sp)
20000046:	4712                	lw	a4,4(sp)
20000048:	4782                	lw	a5,0(sp)
2000004a:	0131                	addi	sp,sp,12
2000004c:	30200073          	mret
