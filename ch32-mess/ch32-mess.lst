
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	6f60006f          	j	6f6 <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	000007b8          	.word	0x000007b8
   c:	0000076c          	.word	0x0000076c
	...
  30:	00000f6e          	.word	0x00000f6e
  34:	00000000          	.word	0x00000000
  38:	0000076c          	.word	0x0000076c
  3c:	00000000          	.word	0x00000000
  40:	0000076c          	.word	0x0000076c
  44:	0000076c          	.word	0x0000076c
  48:	0000076c          	.word	0x0000076c
  4c:	0000076c          	.word	0x0000076c
  50:	0000076c          	.word	0x0000076c
  54:	0000076c          	.word	0x0000076c
  58:	0000076c          	.word	0x0000076c
  5c:	0000076c          	.word	0x0000076c
  60:	000013a8          	.word	0x000013a8
  64:	20000034          	.word	0x20000034
  68:	0000076c          	.word	0x0000076c
  6c:	0000076c          	.word	0x0000076c
  70:	0000076c          	.word	0x0000076c
  74:	0000076c          	.word	0x0000076c
  78:	00000fa0          	.word	0x00000fa0
  7c:	0000113c          	.word	0x0000113c
  80:	0000076c          	.word	0x0000076c
  84:	0000076c          	.word	0x0000076c
  88:	0000076c          	.word	0x0000076c
  8c:	0000076c          	.word	0x0000076c
  90:	0000076c          	.word	0x0000076c
  94:	0000076c          	.word	0x0000076c
  98:	0000076c          	.word	0x0000076c
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <__divsi3>:
      a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
      a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
      a8:	862e                	mv	a2,a1
      aa:	85aa                	mv	a1,a0
      ac:	557d                	li	a0,-1
      ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
      b0:	4685                	li	a3,1
      b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
      b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
      ba:	0606                	slli	a2,a2,0x1
      bc:	0686                	slli	a3,a3,0x1
      be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
      c2:	4501                	li	a0,0
      c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
      c8:	8d91                	sub	a1,a1,a2
      ca:	8d55                	or	a0,a0,a3
      cc:	8285                	srli	a3,a3,0x1
      ce:	8205                	srli	a2,a2,0x1
      d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
      d2:	8082                	ret

000000d4 <__umodsi3>:
      d4:	8286                	mv	t0,ra
      d6:	3fc9                	jal	a8 <__hidden___udivsi3>
      d8:	852e                	mv	a0,a1
      da:	8282                	jr	t0
      dc:	40a00533          	neg	a0,a0
      e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
      e4:	40b005b3          	neg	a1,a1
      e8:	b7c1                	j	a8 <__hidden___udivsi3>
      ea:	40b005b3          	neg	a1,a1
      ee:	8286                	mv	t0,ra
      f0:	3f65                	jal	a8 <__hidden___udivsi3>
      f2:	40a00533          	neg	a0,a0
      f6:	8282                	jr	t0

000000f8 <__modsi3>:
      f8:	8286                	mv	t0,ra
      fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
      fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
     102:	375d                	jal	a8 <__hidden___udivsi3>
     104:	852e                	mv	a0,a1
     106:	8282                	jr	t0
     108:	40b005b3          	neg	a1,a1
     10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
     110:	40a00533          	neg	a0,a0
     114:	3f51                	jal	a8 <__hidden___udivsi3>
     116:	40b00533          	neg	a0,a1
     11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
     11e:	1131                	addi	sp,sp,-20
     120:	c426                	sw	s1,8(sp)
     122:	c806                	sw	ra,16(sp)
     124:	c622                	sw	s0,12(sp)
     126:	84ae                	mv	s1,a1
     128:	87aa                	mv	a5,a0
     12a:	85b2                	mv	a1,a2
     12c:	c699                	beqz	a3,13a <mini_pad+0x1c>
     12e:	4301                	li	t1,0
     130:	0096d763          	bge	a3,s1,13e <mini_pad+0x20>
     134:	84b6                	mv	s1,a3
     136:	4305                	li	t1,1
     138:	a019                	j	13e <mini_pad+0x20>
     13a:	4301                	li	t1,0
     13c:	86a6                	mv	a3,s1
     13e:	40968433          	sub	s0,a3,s1
     142:	00045363          	bgez	s0,148 <mini_pad+0x2a>
     146:	4401                	li	s0,0
     148:	8622                	mv	a2,s0
     14a:	853a                	mv	a0,a4
     14c:	c23e                	sw	a5,4(sp)
     14e:	c01a                	sw	t1,0(sp)
     150:	0b5000ef          	jal	a04 <memset>
     154:	4302                	lw	t1,0(sp)
     156:	4792                	lw	a5,4(sp)
     158:	872a                	mv	a4,a0
     15a:	008506b3          	add	a3,a0,s0
     15e:	4601                	li	a2,0
     160:	40c485b3          	sub	a1,s1,a2
     164:	04b04263          	bgtz	a1,1a8 <mini_pad+0x8a>
     168:	0004d363          	bgez	s1,16e <mini_pad+0x50>
     16c:	4481                	li	s1,0
     16e:	009685b3          	add	a1,a3,s1
     172:	40e58533          	sub	a0,a1,a4
     176:	02030463          	beqz	t1,19e <mini_pad+0x80>
     17a:	02b77263          	bgeu	a4,a1,19e <mini_pad+0x80>
     17e:	02a00793          	li	a5,42
     182:	fef58fa3          	sb	a5,-1(a1)
     186:	fff58693          	addi	a3,a1,-1
     18a:	00d77a63          	bgeu	a4,a3,19e <mini_pad+0x80>
     18e:	fef58f23          	sb	a5,-2(a1)
     192:	ffe58693          	addi	a3,a1,-2
     196:	00d77463          	bgeu	a4,a3,19e <mini_pad+0x80>
     19a:	fef58ea3          	sb	a5,-3(a1)
     19e:	40c2                	lw	ra,16(sp)
     1a0:	4432                	lw	s0,12(sp)
     1a2:	44a2                	lw	s1,8(sp)
     1a4:	0151                	addi	sp,sp,20
     1a6:	8082                	ret
     1a8:	00c785b3          	add	a1,a5,a2
     1ac:	0005c503          	lbu	a0,0(a1)
     1b0:	00c685b3          	add	a1,a3,a2
     1b4:	0605                	addi	a2,a2,1
     1b6:	00a58023          	sb	a0,0(a1)
     1ba:	b75d                	j	160 <mini_pad+0x42>

000001bc <_puts>:
     1bc:	832a                	mv	t1,a0
     1be:	852e                	mv	a0,a1
     1c0:	ce01                	beqz	a2,1d8 <_puts+0x1c>
     1c2:	00062283          	lw	t0,0(a2)
     1c6:	4701                	li	a4,0
     1c8:	425c                	lw	a5,4(a2)
     1ca:	00a74863          	blt	a4,a0,1da <_puts+0x1e>
     1ce:	00078023          	sb	zero,0(a5)
     1d2:	4248                	lw	a0,4(a2)
     1d4:	40550533          	sub	a0,a0,t0
     1d8:	8082                	ret
     1da:	460c                	lw	a1,8(a2)
     1dc:	4214                	lw	a3,0(a2)
     1de:	15fd                	addi	a1,a1,-1
     1e0:	96ae                	add	a3,a3,a1
     1e2:	fed786e3          	beq	a5,a3,1ce <_puts+0x12>
     1e6:	00178693          	addi	a3,a5,1
     1ea:	c254                	sw	a3,4(a2)
     1ec:	00e306b3          	add	a3,t1,a4
     1f0:	0006c683          	lbu	a3,0(a3)
     1f4:	0705                	addi	a4,a4,1
     1f6:	00d78023          	sb	a3,0(a5)
     1fa:	b7f9                	j	1c8 <_puts+0xc>

000001fc <PrintHex>:
     1fc:	e00007b7          	lui	a5,0xe0000
     200:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
     204:	4398                	lw	a4,0(a5)
     206:	08077713          	andi	a4,a4,128
     20a:	ff6d                	bnez	a4,204 <PrintHex+0x8>
     20c:	78302737          	lui	a4,0x78302
     210:	08870713          	addi	a4,a4,136 # 78302088 <_eusrstack+0x58301888>
     214:	e00006b7          	lui	a3,0xe0000
     218:	c398                	sw	a4,0(a5)
     21a:	0f468693          	addi	a3,a3,244 # e00000f4 <_eusrstack+0xbffff8f4>
     21e:	4771                	li	a4,28
     220:	4325                	li	t1,9
     222:	55f1                	li	a1,-4
     224:	429c                	lw	a5,0(a3)
     226:	0807f793          	andi	a5,a5,128
     22a:	ffed                	bnez	a5,224 <PrintHex+0x28>
     22c:	00e55633          	srl	a2,a0,a4
     230:	8a3d                	andi	a2,a2,15
     232:	05700793          	li	a5,87
     236:	00c36463          	bltu	t1,a2,23e <PrintHex+0x42>
     23a:	03000793          	li	a5,48
     23e:	97b2                	add	a5,a5,a2
     240:	07a2                	slli	a5,a5,0x8
     242:	0857e793          	ori	a5,a5,133
     246:	c29c                	sw	a5,0(a3)
     248:	1771                	addi	a4,a4,-4
     24a:	fcb71de3          	bne	a4,a1,224 <PrintHex+0x28>
     24e:	8082                	ret

00000250 <mini_itoa.part.0>:
     250:	1101                	addi	sp,sp,-32
     252:	ce06                	sw	ra,28(sp)
     254:	cc22                	sw	s0,24(sp)
     256:	ca26                	sw	s1,20(sp)
     258:	c002                	sw	zero,0(sp)
     25a:	832a                	mv	t1,a0
     25c:	00055763          	bgez	a0,26a <mini_itoa.part.0+0x1a>
     260:	e689                	bnez	a3,26a <mini_itoa.part.0+0x1a>
     262:	4785                	li	a5,1
     264:	40a00333          	neg	t1,a0
     268:	c03e                	sw	a5,0(sp)
     26a:	8a05                	andi	a2,a2,1
     26c:	06100413          	li	s0,97
     270:	c219                	beqz	a2,276 <mini_itoa.part.0+0x26>
     272:	04100413          	li	s0,65
     276:	84ba                	mv	s1,a4
     278:	1459                	addi	s0,s0,-10
     27a:	851a                	mv	a0,t1
     27c:	c83a                	sw	a4,16(sp)
     27e:	c21a                	sw	t1,4(sp)
     280:	c62e                	sw	a1,12(sp)
     282:	c41a                	sw	t1,8(sp)
     284:	3d81                	jal	d4 <__umodsi3>
     286:	47a5                	li	a5,9
     288:	4322                	lw	t1,8(sp)
     28a:	45b2                	lw	a1,12(sp)
     28c:	4742                	lw	a4,16(sp)
     28e:	0ff57693          	zext.b	a3,a0
     292:	06a7e163          	bltu	a5,a0,2f4 <mini_itoa.part.0+0xa4>
     296:	03068693          	addi	a3,a3,48
     29a:	0ff6f693          	zext.b	a3,a3
     29e:	00148793          	addi	a5,s1,1
     2a2:	00d48023          	sb	a3,0(s1)
     2a6:	851a                	mv	a0,t1
     2a8:	c83a                	sw	a4,16(sp)
     2aa:	c63e                	sw	a5,12(sp)
     2ac:	c42e                	sw	a1,8(sp)
     2ae:	3bed                	jal	a8 <__hidden___udivsi3>
     2b0:	4692                	lw	a3,4(sp)
     2b2:	45a2                	lw	a1,8(sp)
     2b4:	47b2                	lw	a5,12(sp)
     2b6:	4742                	lw	a4,16(sp)
     2b8:	832a                	mv	t1,a0
     2ba:	02b6fb63          	bgeu	a3,a1,2f0 <mini_itoa.part.0+0xa0>
     2be:	4682                	lw	a3,0(sp)
     2c0:	c699                	beqz	a3,2ce <mini_itoa.part.0+0x7e>
     2c2:	02d00693          	li	a3,45
     2c6:	00d78023          	sb	a3,0(a5)
     2ca:	00248793          	addi	a5,s1,2
     2ce:	40e78533          	sub	a0,a5,a4
     2d2:	01f55693          	srli	a3,a0,0x1f
     2d6:	96aa                	add	a3,a3,a0
     2d8:	00078023          	sb	zero,0(a5)
     2dc:	8685                	srai	a3,a3,0x1
     2de:	4601                	li	a2,0
     2e0:	17fd                	addi	a5,a5,-1
     2e2:	00d64b63          	blt	a2,a3,2f8 <mini_itoa.part.0+0xa8>
     2e6:	40f2                	lw	ra,28(sp)
     2e8:	4462                	lw	s0,24(sp)
     2ea:	44d2                	lw	s1,20(sp)
     2ec:	6105                	addi	sp,sp,32
     2ee:	8082                	ret
     2f0:	84be                	mv	s1,a5
     2f2:	b761                	j	27a <mini_itoa.part.0+0x2a>
     2f4:	96a2                	add	a3,a3,s0
     2f6:	b755                	j	29a <mini_itoa.part.0+0x4a>
     2f8:	00c705b3          	add	a1,a4,a2
     2fc:	0007c283          	lbu	t0,0(a5)
     300:	0005c303          	lbu	t1,0(a1)
     304:	0605                	addi	a2,a2,1
     306:	00558023          	sb	t0,0(a1)
     30a:	00678023          	sb	t1,0(a5)
     30e:	bfc9                	j	2e0 <mini_itoa.part.0+0x90>

00000310 <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     310:	400057b7          	lui	a5,0x40005
     314:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     318:	40078793          	addi	a5,a5,1024
     31c:	10077713          	andi	a4,a4,256
     320:	cb19                	beqz	a4,336 <i2c_error+0x26>
     322:	0147d703          	lhu	a4,20(a5)
     326:	66c1                	lui	a3,0x10
     328:	eff68693          	addi	a3,a3,-257 # feff <lib_i2c.c.829168c6+0x7335>
     32c:	8f75                	and	a4,a4,a3
     32e:	00e79a23          	sh	a4,20(a5)
     332:	4505                	li	a0,1
     334:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     336:	0147d703          	lhu	a4,20(a5)
     33a:	40077713          	andi	a4,a4,1024
     33e:	cb19                	beqz	a4,354 <i2c_error+0x44>
     340:	0147d703          	lhu	a4,20(a5)
     344:	66c1                	lui	a3,0x10
     346:	bff68693          	addi	a3,a3,-1025 # fbff <lib_i2c.c.829168c6+0x7035>
     34a:	8f75                	and	a4,a4,a3
     34c:	00e79a23          	sh	a4,20(a5)
     350:	4509                	li	a0,2
     352:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     354:	0147d703          	lhu	a4,20(a5)
     358:	20077713          	andi	a4,a4,512
     35c:	cb19                	beqz	a4,372 <i2c_error+0x62>
     35e:	0147d703          	lhu	a4,20(a5)
     362:	66c1                	lui	a3,0x10
     364:	dff68693          	addi	a3,a3,-513 # fdff <lib_i2c.c.829168c6+0x7235>
     368:	8f75                	and	a4,a4,a3
     36a:	00e79a23          	sh	a4,20(a5)
     36e:	450d                	li	a0,3
     370:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     372:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     376:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     378:	01471693          	slli	a3,a4,0x14
     37c:	0006db63          	bgez	a3,392 <i2c_error+0x82>
     380:	0147d703          	lhu	a4,20(a5)
     384:	76fd                	lui	a3,0xfffff
     386:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     38a:	8f75                	and	a4,a4,a3
     38c:	00e79a23          	sh	a4,20(a5)
     390:	4511                	li	a0,4
}
     392:	8082                	ret

00000394 <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     394:	415c                	lw	a5,4(a0)
     396:	e3b9                	bnez	a5,3dc <i2c_send_addr_write+0x48>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     398:	00855783          	lhu	a5,8(a0)
     39c:	400056b7          	lui	a3,0x40005
     3a0:	40068693          	addi	a3,a3,1024 # 40005400 <_eusrstack+0x20004c00>
     3a4:	0786                	slli	a5,a5,0x1
     3a6:	0fe7f793          	andi	a5,a5,254
     3aa:	00f69823          	sh	a5,16(a3)
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3ae:	6789                	lui	a5,0x2
     3b0:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.de574efd+0x620>
	return (status & status_mask) == status_mask; 
     3b4:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3b8:	c6f1aa23          	sw	a5,-908(gp) # 20000070 <_i2c_timeout>
     3bc:	4501                	li	a0,0
	return (status & status_mask) == status_mask; 
     3be:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.829168c6+0x674b8>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     3c2:	0146d303          	lhu	t1,20(a3)
     3c6:	0186d703          	lhu	a4,24(a3)
     3ca:	0742                	slli	a4,a4,0x10
     3cc:	00676733          	or	a4,a4,t1
	return (status & status_mask) == status_mask; 
     3d0:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3d2:	00c71763          	bne	a4,a2,3e0 <i2c_send_addr_write+0x4c>
     3d6:	c119                	beqz	a0,3dc <i2c_send_addr_write+0x48>
     3d8:	c6f1aa23          	sw	a5,-908(gp) # 20000070 <_i2c_timeout>
	i2c_err_t i2c_ret = I2C_OK;
     3dc:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     3de:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3e0:	17fd                	addi	a5,a5,-1
     3e2:	4505                	li	a0,1
     3e4:	fff9                	bnez	a5,3c2 <i2c_send_addr_write+0x2e>
{
     3e6:	1151                	addi	sp,sp,-12
     3e8:	c406                	sw	ra,8(sp)
     3ea:	c601aa23          	sw	zero,-908(gp) # 20000070 <_i2c_timeout>
	i2c_err_t i2c_err = i2c_error();
     3ee:	370d                	jal	310 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     3f0:	e111                	bnez	a0,3f4 <i2c_send_addr_write+0x60>
     3f2:	4515                	li	a0,5
}
     3f4:	40a2                	lw	ra,8(sp)
     3f6:	0131                	addi	sp,sp,12
     3f8:	8082                	ret

000003fa <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     3fa:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     3fc:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     3fe:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     400:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.de574efd+0x620>
     404:	40005637          	lui	a2,0x40005
{
     408:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     40a:	c002                	sw	zero,0(sp)
     40c:	c202                	sw	zero,4(sp)
     40e:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     412:	c6f1aa23          	sw	a5,-908(gp) # 20000070 <_i2c_timeout>
     416:	4581                	li	a1,0
     418:	40060613          	addi	a2,a2,1024 # 40005400 <_eusrstack+0x20004c00>
     41c:	01865683          	lhu	a3,24(a2)
     420:	8a89                	andi	a3,a3,2
     422:	eaa9                	bnez	a3,474 <i2c_ping+0x7a>
     424:	c199                	beqz	a1,42a <i2c_ping+0x30>
     426:	c6f1aa23          	sw	a5,-908(gp) # 20000070 <_i2c_timeout>
	i2c_err_t i2c_ret = I2C_OK;
     42a:	4501                	li	a0,0
	I2C1->CTLR1 |= I2C_CTLR1_START;
     42c:	40005737          	lui	a4,0x40005
     430:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
     434:	000306b7          	lui	a3,0x30
	I2C1->CTLR1 |= I2C_CTLR1_START;
     438:	40070713          	addi	a4,a4,1024
     43c:	1007e793          	ori	a5,a5,256
     440:	00f71023          	sh	a5,0(a4)
	return (status & status_mask) == status_mask; 
     444:	0685                	addi	a3,a3,1 # 30001 <lib_i2c.c.829168c6+0x27437>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     446:	01475603          	lhu	a2,20(a4)
     44a:	01875783          	lhu	a5,24(a4)
     44e:	07c2                	slli	a5,a5,0x10
     450:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     452:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     454:	fed799e3          	bne	a5,a3,446 <i2c_ping+0x4c>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     458:	e119                	bnez	a0,45e <i2c_ping+0x64>
     45a:	850a                	mv	a0,sp
     45c:	3f25                	jal	394 <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     45e:	400057b7          	lui	a5,0x40005
     462:	4007d703          	lhu	a4,1024(a5) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     466:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     468:	20076713          	ori	a4,a4,512
     46c:	40e79023          	sh	a4,1024(a5)
}
     470:	0161                	addi	sp,sp,24
     472:	8082                	ret
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     474:	17fd                	addi	a5,a5,-1
     476:	4585                	li	a1,1
     478:	f3d5                	bnez	a5,41c <i2c_ping+0x22>
     47a:	c601aa23          	sw	zero,-908(gp) # 20000070 <_i2c_timeout>
	i2c_err_t i2c_err = i2c_error();
     47e:	3d49                	jal	310 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     480:	f555                	bnez	a0,42c <i2c_ping+0x32>
     482:	4515                	li	a0,5
     484:	b765                	j	42c <i2c_ping+0x32>

00000486 <i2c_write_raw.constprop.0>:

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     486:	1111                	addi	sp,sp,-28
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     488:	6789                	lui	a5,0x2
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     48a:	c826                	sw	s1,16(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     48c:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.de574efd+0x620>
     490:	40005737          	lui	a4,0x40005
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     494:	cc06                	sw	ra,24(sp)
     496:	ca22                	sw	s0,20(sp)
     498:	c02a                	sw	a0,0(sp)
     49a:	c22e                	sw	a1,4(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     49c:	c6f1aa23          	sw	a5,-908(gp) # 20000070 <_i2c_timeout>
     4a0:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
     4a4:	01875603          	lhu	a2,24(a4)
     4a8:	8a09                	andi	a2,a2,2
     4aa:	ee41                	bnez	a2,542 <i2c_write_raw.constprop.0+0xbc>
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4ac:	00075783          	lhu	a5,0(a4)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     4b0:	40005637          	lui	a2,0x40005
     4b4:	40060613          	addi	a2,a2,1024 # 40005400 <_eusrstack+0x20004c00>
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4b8:	1007e793          	ori	a5,a5,256
     4bc:	00f71023          	sh	a5,0(a4)
	return (status & status_mask) == status_mask; 
     4c0:	00030737          	lui	a4,0x30
     4c4:	0705                	addi	a4,a4,1 # 30001 <lib_i2c.c.829168c6+0x27437>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     4c6:	01465583          	lhu	a1,20(a2)
     4ca:	01865783          	lhu	a5,24(a2)
     4ce:	07c2                	slli	a5,a5,0x10
     4d0:	8fcd                	or	a5,a5,a1
	return (status & status_mask) == status_mask; 
     4d2:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     4d4:	fee799e3          	bne	a5,a4,4c6 <i2c_write_raw.constprop.0+0x40>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     4d8:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
     4dc:	3d65                	jal	394 <i2c_send_addr_write>
	{
		uint8_t cbyte = 0;
		while(cbyte < len)
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     4de:	6589                	lui	a1,0x2
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     4e0:	842a                	mv	s0,a0
		uint8_t cbyte = 0;
     4e2:	4701                	li	a4,0
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     4e4:	71058593          	addi	a1,a1,1808 # 2710 <ch32fun.c.de574efd+0x620>
	if(i2c_ret == I2C_OK)
     4e8:	e13d                	bnez	a0,54e <i2c_write_raw.constprop.0+0xc8>
		while(cbyte < len)
     4ea:	4792                	lw	a5,4(sp)
     4ec:	06f77163          	bgeu	a4,a5,54e <i2c_write_raw.constprop.0+0xc8>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     4f0:	6609                	lui	a2,0x2
     4f2:	40005337          	lui	t1,0x40005
     4f6:	c6b1aa23          	sw	a1,-908(gp) # 20000070 <_i2c_timeout>
     4fa:	4281                	li	t0,0
     4fc:	71060613          	addi	a2,a2,1808 # 2710 <ch32fun.c.de574efd+0x620>
     500:	40030313          	addi	t1,t1,1024 # 40005400 <_eusrstack+0x20004c00>
     504:	01435503          	lhu	a0,20(t1)
     508:	08057513          	andi	a0,a0,128
     50c:	c959                	beqz	a0,5a2 <i2c_write_raw.constprop.0+0x11c>
     50e:	00028463          	beqz	t0,516 <i2c_write_raw.constprop.0+0x90>
     512:	c6c1aa23          	sw	a2,-908(gp) # 20000070 <_i2c_timeout>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     516:	4501                	li	a0,0
			//while(!(I2C1->STAR1 & I2C_STAR1_TXE));
			I2C1->DATAR = buf[cbyte];
     518:	4782                	lw	a5,0(sp)
     51a:	c62e                	sw	a1,12(sp)
     51c:	00e78633          	add	a2,a5,a4
     520:	00064303          	lbu	t1,0(a2)
			++cbyte;
     524:	0705                	addi	a4,a4,1
			I2C1->DATAR = buf[cbyte];
     526:	40005637          	lui	a2,0x40005
     52a:	40661823          	sh	t1,1040(a2) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     52e:	0ff77713          	zext.b	a4,a4
     532:	c43a                	sw	a4,8(sp)

			// Make sure no errors occured for this byte
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     534:	e509                	bnez	a0,53e <i2c_write_raw.constprop.0+0xb8>
     536:	3be9                	jal	310 <i2c_error>
     538:	4722                	lw	a4,8(sp)
     53a:	45b2                	lw	a1,12(sp)
     53c:	d55d                	beqz	a0,4ea <i2c_write_raw.constprop.0+0x64>
     53e:	842a                	mv	s0,a0
     540:	a039                	j	54e <i2c_write_raw.constprop.0+0xc8>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     542:	17fd                	addi	a5,a5,-1
     544:	f3a5                	bnez	a5,4a4 <i2c_write_raw.constprop.0+0x1e>
	i2c_err_t i2c_err = i2c_error();
     546:	33e9                	jal	310 <i2c_error>
     548:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     54a:	e111                	bnez	a0,54e <i2c_write_raw.constprop.0+0xc8>
     54c:	4415                	li	s0,5
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     54e:	6709                	lui	a4,0x2
     550:	71070713          	addi	a4,a4,1808 # 2710 <ch32fun.c.de574efd+0x620>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     554:	40005537          	lui	a0,0x40005
	return (status & status_mask) == status_mask; 
     558:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     55c:	c6e1aa23          	sw	a4,-908(gp) # 20000070 <_i2c_timeout>
     560:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     562:	40050513          	addi	a0,a0,1024 # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
     566:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.829168c6+0x674ba>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     56a:	01455283          	lhu	t0,20(a0)
     56e:	01855603          	lhu	a2,24(a0)
     572:	0642                	slli	a2,a2,0x10
     574:	00566633          	or	a2,a2,t0
	return (status & status_mask) == status_mask; 
     578:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     57a:	04b61163          	bne	a2,a1,5bc <i2c_write_raw.constprop.0+0x136>
     57e:	00030463          	beqz	t1,586 <i2c_write_raw.constprop.0+0x100>
     582:	c6e1aa23          	sw	a4,-908(gp) # 20000070 <_i2c_timeout>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     586:	40005737          	lui	a4,0x40005
     58a:	40075683          	lhu	a3,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     58e:	40e2                	lw	ra,24(sp)
     590:	8522                	mv	a0,s0
     592:	4452                	lw	s0,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     594:	2006e693          	ori	a3,a3,512
     598:	40d71023          	sh	a3,1024(a4)
}
     59c:	44c2                	lw	s1,16(sp)
     59e:	0171                	addi	sp,sp,28
     5a0:	8082                	ret
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     5a2:	167d                	addi	a2,a2,-1
     5a4:	4285                	li	t0,1
     5a6:	fe39                	bnez	a2,504 <i2c_write_raw.constprop.0+0x7e>
     5a8:	c62e                	sw	a1,12(sp)
     5aa:	c43a                	sw	a4,8(sp)
     5ac:	c601aa23          	sw	zero,-908(gp) # 20000070 <_i2c_timeout>
	i2c_err_t i2c_err = i2c_error();
     5b0:	3385                	jal	310 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     5b2:	4722                	lw	a4,8(sp)
     5b4:	45b2                	lw	a1,12(sp)
     5b6:	f12d                	bnez	a0,518 <i2c_write_raw.constprop.0+0x92>
     5b8:	4515                	li	a0,5
     5ba:	bfb9                	j	518 <i2c_write_raw.constprop.0+0x92>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     5bc:	177d                	addi	a4,a4,-1
     5be:	4305                	li	t1,1
     5c0:	f74d                	bnez	a4,56a <i2c_write_raw.constprop.0+0xe4>
     5c2:	c601aa23          	sw	zero,-908(gp) # 20000070 <_i2c_timeout>
	i2c_err_t i2c_err = i2c_error();
     5c6:	33a9                	jal	310 <i2c_error>
     5c8:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     5ca:	fd55                	bnez	a0,586 <i2c_write_raw.constprop.0+0x100>
     5cc:	4415                	li	s0,5
     5ce:	bf65                	j	586 <i2c_write_raw.constprop.0+0x100>

000005d0 <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     5d0:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     5d2:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     5d6:	4589                	li	a1,2
     5d8:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     5da:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     5dc:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     5e0:	355d                	jal	486 <i2c_write_raw.constprop.0>
}
     5e2:	40b2                	lw	ra,12(sp)
     5e4:	0ff57513          	zext.b	a0,a0
     5e8:	0141                	addi	sp,sp,16
     5ea:	8082                	ret

000005ec <internal_handle_input.constprop.0>:
     5ec:	e00007b7          	lui	a5,0xe0000
     5f0:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
     5f4:	439c                	lw	a5,0(a5)
     5f6:	8082                	ret

000005f8 <_write.constprop.0>:
     5f8:	1101                	addi	sp,sp,-32
     5fa:	cc22                	sw	s0,24(sp)
     5fc:	e0000437          	lui	s0,0xe0000
     600:	0f440413          	addi	s0,s0,244 # e00000f4 <_eusrstack+0xbffff8f4>
     604:	4018                	lw	a4,0(s0)
     606:	ce06                	sw	ra,28(sp)
     608:	ca26                	sw	s1,20(sp)
     60a:	c02a                	sw	a0,0(sp)
     60c:	0c077713          	andi	a4,a4,192
     610:	0c000693          	li	a3,192
     614:	00d70b63          	beq	a4,a3,62a <_write.constprop.0+0x32>
     618:	c802                	sw	zero,16(sp)
     61a:	84ae                	mv	s1,a1
     61c:	e1e9                	bnez	a1,6de <_write.constprop.0+0xe6>
     61e:	401c                	lw	a5,0(s0)
     620:	c789                	beqz	a5,62a <_write.constprop.0+0x32>
     622:	0807f793          	andi	a5,a5,128
     626:	e391                	bnez	a5,62a <_write.constprop.0+0x32>
     628:	37d1                	jal	5ec <internal_handle_input.constprop.0>
     62a:	4481                	li	s1,0
     62c:	40f2                	lw	ra,28(sp)
     62e:	4462                	lw	s0,24(sp)
     630:	8526                	mv	a0,s1
     632:	44d2                	lw	s1,20(sp)
     634:	6105                	addi	sp,sp,32
     636:	8082                	ret
     638:	40e48633          	sub	a2,s1,a4
     63c:	459d                	li	a1,7
     63e:	86b2                	mv	a3,a2
     640:	00c5d363          	bge	a1,a2,646 <_write.constprop.0+0x4e>
     644:	469d                	li	a3,7
     646:	001005b7          	lui	a1,0x100
     64a:	0585                	addi	a1,a1,1 # 100001 <lib_i2c.c.829168c6+0xf7437>
     64c:	4008                	lw	a0,0(s0)
     64e:	08057313          	andi	t1,a0,128
     652:	06031f63          	bnez	t1,6d0 <_write.constprop.0+0xd8>
     656:	c901                	beqz	a0,666 <_write.constprop.0+0x6e>
     658:	c636                	sw	a3,12(sp)
     65a:	c432                	sw	a2,8(sp)
     65c:	c23a                	sw	a4,4(sp)
     65e:	3779                	jal	5ec <internal_handle_input.constprop.0>
     660:	46b2                	lw	a3,12(sp)
     662:	4622                	lw	a2,8(sp)
     664:	4712                	lw	a4,4(sp)
     666:	00362593          	slti	a1,a2,3
     66a:	4601                	li	a2,0
     66c:	e199                	bnez	a1,672 <_write.constprop.0+0x7a>
     66e:	ffd68613          	addi	a2,a3,-3
     672:	4782                	lw	a5,0(sp)
     674:	00370593          	addi	a1,a4,3
     678:	0808                	addi	a0,sp,16
     67a:	95be                	add	a1,a1,a5
     67c:	c436                	sw	a3,8(sp)
     67e:	c23a                	sw	a4,4(sp)
     680:	266d                	jal	a2a <memcpy>
     682:	45c2                	lw	a1,16(sp)
     684:	4782                	lw	a5,0(sp)
     686:	4712                	lw	a4,4(sp)
     688:	e0000637          	lui	a2,0xe0000
     68c:	46a2                	lw	a3,8(sp)
     68e:	0f860613          	addi	a2,a2,248 # e00000f8 <_eusrstack+0xbffff8f8>
     692:	c20c                	sw	a1,0(a2)
     694:	450d                	li	a0,3
     696:	00e785b3          	add	a1,a5,a4
     69a:	4601                	li	a2,0
     69c:	0005c283          	lbu	t0,0(a1)
     6a0:	0605                	addi	a2,a2,1
     6a2:	01060793          	addi	a5,a2,16
     6a6:	00278333          	add	t1,a5,sp
     6aa:	00530023          	sb	t0,0(t1)
     6ae:	00c68563          	beq	a3,a2,6b8 <_write.constprop.0+0xc0>
     6b2:	0585                	addi	a1,a1,1
     6b4:	fea614e3          	bne	a2,a0,69c <_write.constprop.0+0xa4>
     6b8:	00468613          	addi	a2,a3,4
     6bc:	f8066613          	ori	a2,a2,-128
     6c0:	00c10823          	sb	a2,16(sp)
     6c4:	4642                	lw	a2,16(sp)
     6c6:	9736                	add	a4,a4,a3
     6c8:	c010                	sw	a2,0(s0)
     6ca:	f69747e3          	blt	a4,s1,638 <_write.constprop.0+0x40>
     6ce:	bfb9                	j	62c <_write.constprop.0+0x34>
     6d0:	15fd                	addi	a1,a1,-1
     6d2:	fdad                	bnez	a1,64c <_write.constprop.0+0x54>
     6d4:	401c                	lw	a5,0(s0)
     6d6:	0c07e793          	ori	a5,a5,192
     6da:	c01c                	sw	a5,0(s0)
     6dc:	b7b9                	j	62a <_write.constprop.0+0x32>
     6de:	4701                	li	a4,0
     6e0:	b7ed                	j	6ca <_write.constprop.0+0xd2>

000006e2 <__puts_uart>:
     6e2:	1151                	addi	sp,sp,-12
     6e4:	c222                	sw	s0,4(sp)
     6e6:	c406                	sw	ra,8(sp)
     6e8:	842e                	mv	s0,a1
     6ea:	3739                	jal	5f8 <_write.constprop.0>
     6ec:	40a2                	lw	ra,8(sp)
     6ee:	8522                	mv	a0,s0
     6f0:	4412                	lw	s0,4(sp)
     6f2:	0131                	addi	sp,sp,12
     6f4:	8082                	ret

000006f6 <handle_reset>:
     6f6:	20000197          	auipc	gp,0x20000
     6fa:	d0618193          	addi	gp,gp,-762 # 200003fc <__global_pointer$>
     6fe:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     702:	6509                	lui	a0,0x2
     704:	88050513          	addi	a0,a0,-1920 # 1880 <_data_lma+0x1cc>
     708:	30051073          	csrw	mstatus,a0
     70c:	468d                	li	a3,3
     70e:	00000517          	auipc	a0,0x0
     712:	8f250513          	addi	a0,a0,-1806 # 0 <InterruptVector>
     716:	8d55                	or	a0,a0,a3
     718:	30551073          	csrw	mtvec,a0
     71c:	c6818513          	addi	a0,gp,-920 # 20000064 <WS2812BLEDInUse>
     720:	12018593          	addi	a1,gp,288 # 2000051c <_ebss>
     724:	4601                	li	a2,0
     726:	00b55663          	bge	a0,a1,732 <handle_reset+0x3c>
     72a:	c110                	sw	a2,0(a0)
     72c:	0511                	addi	a0,a0,4
     72e:	feb54ee3          	blt	a0,a1,72a <handle_reset+0x34>
     732:	00001517          	auipc	a0,0x1
     736:	f8250513          	addi	a0,a0,-126 # 16b4 <_data_lma>
     73a:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_aht21>
     73e:	20000617          	auipc	a2,0x20000
     742:	92660613          	addi	a2,a2,-1754 # 20000064 <WS2812BLEDInUse>
     746:	00c58863          	beq	a1,a2,756 <handle_reset+0x60>
     74a:	4114                	lw	a3,0(a0)
     74c:	c194                	sw	a3,0(a1)
     74e:	0511                	addi	a0,a0,4
     750:	0591                	addi	a1,a1,4
     752:	fec59ae3          	bne	a1,a2,746 <handle_reset+0x50>
     756:	e000f7b7          	lui	a5,0xe000f
     75a:	4715                	li	a4,5
     75c:	c398                	sw	a4,0(a5)
     75e:	6785                	lui	a5,0x1
     760:	c3678793          	addi	a5,a5,-970 # c36 <main>
     764:	34179073          	csrw	mepc,a5
     768:	30200073          	mret

0000076c <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     76c:	34102573          	csrr	a0,mepc
void DefaultIRQHandler( void )
{
#if FUNCONF_DEBUG_HARDFAULT && ( FUNCONF_USE_DEBUGPRINTF || FUNCONF_USE_UARTPRINTF || FUNCONF_USE_USBPRINTF )
	//This is kind of like a crash handler.
	//printf( "DEAD MSTATUS:%08x MTVAL:%08x MCAUSE:%08x MEPC:%08x\n", (int)__get_MSTATUS(), (int)__get_MTVAL(), (int)__get_MCAUSE(), (int)__get_MEPC() );
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     770:	3471                	jal	1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     772:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     776:	3459                	jal	1fc <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     778:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     77c:	3441                	jal	1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     77e:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     782:	3cad                	jal	1fc <PrintHex>
#if FUNCONF_USE_DEBUGPRINTF
	while( (*DMDATA0) & 0x80 );
     784:	e00007b7          	lui	a5,0xe0000
     788:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
     78c:	4398                	lw	a4,0(a5)
     78e:	08077713          	andi	a4,a4,128
     792:	ff6d                	bnez	a4,78c <ADC1_2_IRQHandler+0x20>
	*DMDATA0 = 0x0a85;
     794:	6705                	lui	a4,0x1
     796:	a8570713          	addi	a4,a4,-1403 # a85 <ssd1306_print_str_at.constprop.0+0x15>
     79a:	c398                	sw	a4,0(a5)
	while( (*DMDATA0) & 0x80 );
     79c:	e00007b7          	lui	a5,0xe0000
     7a0:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
     7a4:	4398                	lw	a4,0(a5)
     7a6:	08077713          	andi	a4,a4,128
     7aa:	ff6d                	bnez	a4,7a4 <ADC1_2_IRQHandler+0x38>
	*DMDATA0 = 0xaaaaaa83;
     7ac:	aaaab737          	lui	a4,0xaaaab
     7b0:	a8370713          	addi	a4,a4,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     7b4:	c398                	sw	a4,0(a5)
	putchar( '\n' );
#endif
#endif
	//printf( "DEAD MSTATUS:%08x MTVAL:%08x MCAUSE:%08x MEPC:%08x\n", (int)__get_MSTATUS(), (int)__get_MTVAL(), (int)__get_MCAUSE(), (int)__get_MEPC() );
	// Infinite Loop
	asm volatile( "1: j 1b" );
     7b6:	a001                	j	7b6 <ADC1_2_IRQHandler+0x4a>

000007b8 <NMI_Handler>:
 * 			The sys clock is switched to HSI.
 * 			Clears the CSSF flag in RCC->INTR
 */
void NMI_RCC_CSS_IRQHandler( void )
{
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     7b8:	40021737          	lui	a4,0x40021
     7bc:	471c                	lw	a5,8(a4)
     7be:	008006b7          	lui	a3,0x800
     7c2:	8fd5                	or	a5,a5,a3
     7c4:	c71c                	sw	a5,8(a4)

000007c6 <strlen>:
     7c6:	87aa                	mv	a5,a0
     7c8:	0007c703          	lbu	a4,0(a5)
     7cc:	e701                	bnez	a4,7d4 <strlen+0xe>
     7ce:	40a78533          	sub	a0,a5,a0
     7d2:	8082                	ret
     7d4:	0785                	addi	a5,a5,1
     7d6:	bfcd                	j	7c8 <strlen+0x2>

000007d8 <mini_vpprintf>:
     7d8:	fa410113          	addi	sp,sp,-92
     7dc:	caa2                	sw	s0,84(sp)
     7de:	c8a6                	sw	s1,80(sp)
     7e0:	cc86                	sw	ra,88(sp)
     7e2:	c02a                	sw	a0,0(sp)
     7e4:	c22e                	sw	a1,4(sp)
     7e6:	8432                	mv	s0,a2
     7e8:	84b6                	mv	s1,a3
     7ea:	ca02                	sw	zero,20(sp)
     7ec:	00044783          	lbu	a5,0(s0)
     7f0:	00140693          	addi	a3,s0,1
     7f4:	00f10fa3          	sb	a5,31(sp)
     7f8:	eb81                	bnez	a5,808 <mini_vpprintf+0x30>
     7fa:	40e6                	lw	ra,88(sp)
     7fc:	4456                	lw	s0,84(sp)
     7fe:	4552                	lw	a0,20(sp)
     800:	44c6                	lw	s1,80(sp)
     802:	05c10113          	addi	sp,sp,92
     806:	8082                	ret
     808:	c636                	sw	a3,12(sp)
     80a:	02500713          	li	a4,37
     80e:	02e78063          	beq	a5,a4,82e <mini_vpprintf+0x56>
     812:	4612                	lw	a2,4(sp)
     814:	4782                	lw	a5,0(sp)
     816:	4585                	li	a1,1
     818:	01f10513          	addi	a0,sp,31
     81c:	9782                	jalr	a5
     81e:	46b2                	lw	a3,12(sp)
     820:	c426                	sw	s1,8(sp)
     822:	8436                	mv	s0,a3
     824:	47d2                	lw	a5,20(sp)
     826:	44a2                	lw	s1,8(sp)
     828:	97aa                	add	a5,a5,a0
     82a:	ca3e                	sw	a5,20(sp)
     82c:	b7c1                	j	7ec <mini_vpprintf+0x14>
     82e:	00144703          	lbu	a4,1(s0)
     832:	03000613          	li	a2,48
     836:	03000693          	li	a3,48
     83a:	00e10fa3          	sb	a4,31(sp)
     83e:	c632                	sw	a2,12(sp)
     840:	00240793          	addi	a5,s0,2
     844:	08d71263          	bne	a4,a3,8c8 <mini_vpprintf+0xf0>
     848:	843e                	mv	s0,a5
     84a:	4681                	li	a3,0
     84c:	4781                	li	a5,0
     84e:	45a5                	li	a1,9
     850:	a811                	j	864 <mini_vpprintf+0x8c>
     852:	00279713          	slli	a4,a5,0x2
     856:	0405                	addi	s0,s0,1
     858:	97ba                	add	a5,a5,a4
     85a:	fff44703          	lbu	a4,-1(s0)
     85e:	0786                	slli	a5,a5,0x1
     860:	97b2                	add	a5,a5,a2
     862:	4685                	li	a3,1
     864:	fd070613          	addi	a2,a4,-48 # 40020fd0 <_eusrstack+0x200207d0>
     868:	0ff67513          	zext.b	a0,a2
     86c:	fea5f3e3          	bgeu	a1,a0,852 <mini_vpprintf+0x7a>
     870:	c299                	beqz	a3,876 <mini_vpprintf+0x9e>
     872:	00e10fa3          	sb	a4,31(sp)
     876:	c83e                	sw	a5,16(sp)
     878:	46e1                	li	a3,24
     87a:	00f6d363          	bge	a3,a5,880 <mini_vpprintf+0xa8>
     87e:	c836                	sw	a3,16(sp)
     880:	06c00613          	li	a2,108
     884:	4681                	li	a3,0
     886:	00c71863          	bne	a4,a2,896 <mini_vpprintf+0xbe>
     88a:	00044703          	lbu	a4,0(s0)
     88e:	4685                	li	a3,1
     890:	0405                	addi	s0,s0,1
     892:	00e10fa3          	sb	a4,31(sp)
     896:	01f14603          	lbu	a2,31(sp)
     89a:	06400713          	li	a4,100
     89e:	06e60563          	beq	a2,a4,908 <mini_vpprintf+0x130>
     8a2:	02c76763          	bltu	a4,a2,8d0 <mini_vpprintf+0xf8>
     8a6:	05800793          	li	a5,88
     8aa:	0af60163          	beq	a2,a5,94c <mini_vpprintf+0x174>
     8ae:	06300793          	li	a5,99
     8b2:	0af60e63          	beq	a2,a5,96e <mini_vpprintf+0x196>
     8b6:	d231                	beqz	a2,7fa <mini_vpprintf+0x22>
     8b8:	4612                	lw	a2,4(sp)
     8ba:	4782                	lw	a5,0(sp)
     8bc:	4585                	li	a1,1
     8be:	01f10513          	addi	a0,sp,31
     8c2:	9782                	jalr	a5
     8c4:	c426                	sw	s1,8(sp)
     8c6:	bfb9                	j	824 <mini_vpprintf+0x4c>
     8c8:	02000693          	li	a3,32
     8cc:	c636                	sw	a3,12(sp)
     8ce:	bfad                	j	848 <mini_vpprintf+0x70>
     8d0:	07500713          	li	a4,117
     8d4:	02e60a63          	beq	a2,a4,908 <mini_vpprintf+0x130>
     8d8:	07800713          	li	a4,120
     8dc:	06e60863          	beq	a2,a4,94c <mini_vpprintf+0x174>
     8e0:	07300713          	li	a4,115
     8e4:	fce61ae3          	bne	a2,a4,8b8 <mini_vpprintf+0xe0>
     8e8:	cc3e                	sw	a5,24(sp)
     8ea:	00448793          	addi	a5,s1,4
     8ee:	4084                	lw	s1,0(s1)
     8f0:	c43e                	sw	a5,8(sp)
     8f2:	8526                	mv	a0,s1
     8f4:	3dc9                	jal	7c6 <strlen>
     8f6:	47e2                	lw	a5,24(sp)
     8f8:	85aa                	mv	a1,a0
     8fa:	08f05763          	blez	a5,988 <mini_vpprintf+0x1b0>
     8fe:	46c2                	lw	a3,16(sp)
     900:	4632                	lw	a2,12(sp)
     902:	1838                	addi	a4,sp,56
     904:	8526                	mv	a0,s1
     906:	a01d                	j	92c <mini_vpprintf+0x154>
     908:	00448793          	addi	a5,s1,4
     90c:	c43e                	sw	a5,8(sp)
     90e:	c69d                	beqz	a3,93c <mini_vpprintf+0x164>
     910:	f8b60613          	addi	a2,a2,-117
     914:	1018                	addi	a4,sp,32
     916:	00163693          	seqz	a3,a2
     91a:	4088                	lw	a0,0(s1)
     91c:	4601                	li	a2,0
     91e:	45a9                	li	a1,10
     920:	3a05                	jal	250 <mini_itoa.part.0>
     922:	46c2                	lw	a3,16(sp)
     924:	4632                	lw	a2,12(sp)
     926:	1838                	addi	a4,sp,56
     928:	85aa                	mv	a1,a0
     92a:	1008                	addi	a0,sp,32
     92c:	ff2ff0ef          	jal	11e <mini_pad>
     930:	4612                	lw	a2,4(sp)
     932:	85aa                	mv	a1,a0
     934:	1828                	addi	a0,sp,56
     936:	4782                	lw	a5,0(sp)
     938:	9782                	jalr	a5
     93a:	b5ed                	j	824 <mini_vpprintf+0x4c>
     93c:	07500793          	li	a5,117
     940:	1018                	addi	a4,sp,32
     942:	4685                	li	a3,1
     944:	fcf60be3          	beq	a2,a5,91a <mini_vpprintf+0x142>
     948:	4681                	li	a3,0
     94a:	bfc1                	j	91a <mini_vpprintf+0x142>
     94c:	4088                	lw	a0,0(s1)
     94e:	fa860613          	addi	a2,a2,-88
     952:	00448793          	addi	a5,s1,4
     956:	1018                	addi	a4,sp,32
     958:	4685                	li	a3,1
     95a:	00163613          	seqz	a2,a2
     95e:	45c1                	li	a1,16
     960:	c43e                	sw	a5,8(sp)
     962:	30fd                	jal	250 <mini_itoa.part.0>
     964:	46c2                	lw	a3,16(sp)
     966:	4632                	lw	a2,12(sp)
     968:	85aa                	mv	a1,a0
     96a:	1838                	addi	a4,sp,56
     96c:	bf7d                	j	92a <mini_vpprintf+0x152>
     96e:	00448793          	addi	a5,s1,4
     972:	c43e                	sw	a5,8(sp)
     974:	409c                	lw	a5,0(s1)
     976:	46c2                	lw	a3,16(sp)
     978:	4632                	lw	a2,12(sp)
     97a:	00f10fa3          	sb	a5,31(sp)
     97e:	1838                	addi	a4,sp,56
     980:	4585                	li	a1,1
     982:	01f10513          	addi	a0,sp,31
     986:	b75d                	j	92c <mini_vpprintf+0x154>
     988:	4612                	lw	a2,4(sp)
     98a:	8526                	mv	a0,s1
     98c:	b76d                	j	936 <mini_vpprintf+0x15e>

0000098e <printf>:
     98e:	fdc10113          	addi	sp,sp,-36
     992:	ca32                	sw	a2,20(sp)
     994:	862a                	mv	a2,a0
     996:	c82e                	sw	a1,16(sp)
     998:	cc36                	sw	a3,24(sp)
     99a:	4581                	li	a1,0
     99c:	0814                	addi	a3,sp,16
     99e:	6e200513          	li	a0,1762
     9a2:	c606                	sw	ra,12(sp)
     9a4:	ce3a                	sw	a4,28(sp)
     9a6:	d03e                	sw	a5,32(sp)
     9a8:	c036                	sw	a3,0(sp)
     9aa:	353d                	jal	7d8 <mini_vpprintf>
     9ac:	40b2                	lw	ra,12(sp)
     9ae:	02410113          	addi	sp,sp,36
     9b2:	8082                	ret

000009b4 <mini_vsnprintf>:
     9b4:	1121                	addi	sp,sp,-24
     9b6:	ca06                	sw	ra,20(sp)
     9b8:	c822                	sw	s0,16(sp)
     9ba:	c02a                	sw	a0,0(sp)
     9bc:	c22a                	sw	a0,4(sp)
     9be:	c42e                	sw	a1,8(sp)
     9c0:	c185                	beqz	a1,9e0 <mini_vsnprintf+0x2c>
     9c2:	842a                	mv	s0,a0
     9c4:	858a                	mv	a1,sp
     9c6:	e111                	bnez	a0,9ca <mini_vsnprintf+0x16>
     9c8:	4581                	li	a1,0
     9ca:	1bc00513          	li	a0,444
     9ce:	3529                	jal	7d8 <mini_vpprintf>
     9d0:	c401                	beqz	s0,9d8 <mini_vsnprintf+0x24>
     9d2:	4512                	lw	a0,4(sp)
     9d4:	4782                	lw	a5,0(sp)
     9d6:	8d1d                	sub	a0,a0,a5
     9d8:	40d2                	lw	ra,20(sp)
     9da:	4442                	lw	s0,16(sp)
     9dc:	0161                	addi	sp,sp,24
     9de:	8082                	ret
     9e0:	4401                	li	s0,0
     9e2:	b7dd                	j	9c8 <mini_vsnprintf+0x14>

000009e4 <sprintf>:
     9e4:	1101                	addi	sp,sp,-32
     9e6:	c832                	sw	a2,16(sp)
     9e8:	862e                	mv	a2,a1
     9ea:	800005b7          	lui	a1,0x80000
     9ee:	ca36                	sw	a3,20(sp)
     9f0:	15fd                	addi	a1,a1,-1 # 7fffffff <_eusrstack+0x5ffff7ff>
     9f2:	0814                	addi	a3,sp,16
     9f4:	c606                	sw	ra,12(sp)
     9f6:	cc3a                	sw	a4,24(sp)
     9f8:	ce3e                	sw	a5,28(sp)
     9fa:	c036                	sw	a3,0(sp)
     9fc:	3f65                	jal	9b4 <mini_vsnprintf>
     9fe:	40b2                	lw	ra,12(sp)
     a00:	6105                	addi	sp,sp,32
     a02:	8082                	ret

00000a04 <memset>:
     a04:	962a                	add	a2,a2,a0
     a06:	87aa                	mv	a5,a0
     a08:	00c79363          	bne	a5,a2,a0e <memset+0xa>
     a0c:	8082                	ret
     a0e:	00b78023          	sb	a1,0(a5)
     a12:	0785                	addi	a5,a5,1
     a14:	bfd5                	j	a08 <memset+0x4>

00000a16 <strcpy>:
     a16:	87aa                	mv	a5,a0
     a18:	0005c703          	lbu	a4,0(a1)
     a1c:	00e78023          	sb	a4,0(a5)
     a20:	e311                	bnez	a4,a24 <strcpy+0xe>
     a22:	8082                	ret
     a24:	0585                	addi	a1,a1,1
     a26:	0785                	addi	a5,a5,1
     a28:	bfc5                	j	a18 <strcpy+0x2>

00000a2a <memcpy>:
     a2a:	4781                	li	a5,0
     a2c:	00f61363          	bne	a2,a5,a32 <memcpy+0x8>
     a30:	8082                	ret
     a32:	00f58733          	add	a4,a1,a5
     a36:	00074683          	lbu	a3,0(a4)
     a3a:	00f50733          	add	a4,a0,a5
     a3e:	0785                	addi	a5,a5,1
     a40:	00d70023          	sb	a3,0(a4)
     a44:	b7e5                	j	a2c <memcpy+0x2>

00000a46 <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
     a46:	7179                	addi	sp,sp,-48
     a48:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
     a4a:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
     a4e:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
     a50:	862e                	mv	a2,a1
     a52:	85aa                	mv	a1,a0
     a54:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
     a58:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
     a5a:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
     a5e:	37f1                	jal	a2a <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
     a60:	00140593          	addi	a1,s0,1
     a64:	850a                	mv	a0,sp
     a66:	3405                	jal	486 <i2c_write_raw.constprop.0>
}
     a68:	50b2                	lw	ra,44(sp)
     a6a:	5422                	lw	s0,40(sp)
     a6c:	6145                	addi	sp,sp,48
     a6e:	8082                	ret

00000a70 <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
     a70:	1151                	addi	sp,sp,-12
     a72:	c222                	sw	s0,4(sp)
     a74:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
     a76:	02100513          	li	a0,33
void ssd1306_print_str_at(
     a7a:	c406                	sw	ra,8(sp)
     a7c:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
     a7e:	3e89                	jal	5d0 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
     a80:	4501                	li	a0,0
     a82:	36b9                	jal	5d0 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
     a84:	07f00513          	li	a0,127
     a88:	36a1                	jal	5d0 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
     a8a:	02200513          	li	a0,34
     a8e:	3689                	jal	5d0 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
     a90:	8522                	mv	a0,s0
     a92:	3e3d                	jal	5d0 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
     a94:	8522                	mv	a0,s0
     a96:	3e2d                	jal	5d0 <ssd1306_cmd>
     a98:	4465                	li	s0,25
     a9a:	08018493          	addi	s1,gp,128 # 2000047c <str_output>
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i<25; i++) {
		if (*str) {
     a9e:	0004c783          	lbu	a5,0(s1)
     aa2:	c78d                	beqz	a5,acc <ssd1306_print_str_at.constprop.0+0x5c>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
     aa4:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
     aa6:	0ff7f793          	zext.b	a5,a5
     aaa:	00279513          	slli	a0,a5,0x2
     aae:	6705                	lui	a4,0x1
     ab0:	97aa                	add	a5,a5,a0
     ab2:	4bc70513          	addi	a0,a4,1212 # 14bc <FONT_7x5>
     ab6:	4595                	li	a1,5
     ab8:	953e                	add	a0,a0,a5
     aba:	3771                	jal	a46 <ssd1306_data.isra.0>
			str++;
     abc:	0485                	addi	s1,s1,1
	for (int i=0; i<25; i++) {
     abe:	147d                	addi	s0,s0,-1
     ac0:	fc79                	bnez	s0,a9e <ssd1306_print_str_at.constprop.0+0x2e>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
     ac2:	40a2                	lw	ra,8(sp)
     ac4:	4412                	lw	s0,4(sp)
     ac6:	4482                	lw	s1,0(sp)
     ac8:	0131                	addi	sp,sp,12
     aca:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
     acc:	6785                	lui	a5,0x1
     ace:	4595                	li	a1,5
     ad0:	4bc78513          	addi	a0,a5,1212 # 14bc <FONT_7x5>
     ad4:	3f8d                	jal	a46 <ssd1306_data.isra.0>
     ad6:	b7e5                	j	abe <ssd1306_print_str_at.constprop.0+0x4e>

00000ad8 <puts>:
     ad8:	1151                	addi	sp,sp,-12
     ada:	c406                	sw	ra,8(sp)
     adc:	c222                	sw	s0,4(sp)
     ade:	c026                	sw	s1,0(sp)
     ae0:	84aa                	mv	s1,a0
     ae2:	31d5                	jal	7c6 <strlen>
     ae4:	842a                	mv	s0,a0
     ae6:	85aa                	mv	a1,a0
     ae8:	8526                	mv	a0,s1
     aea:	3639                	jal	5f8 <_write.constprop.0>
     aec:	6505                	lui	a0,0x1
     aee:	4585                	li	a1,1
     af0:	42450513          	addi	a0,a0,1060 # 1424 <DMA1_Channel3_IRQHandler+0x7c>
     af4:	3611                	jal	5f8 <_write.constprop.0>
     af6:	40a2                	lw	ra,8(sp)
     af8:	00140513          	addi	a0,s0,1
     afc:	4412                	lw	s0,4(sp)
     afe:	4482                	lw	s1,0(sp)
     b00:	0131                	addi	sp,sp,12
     b02:	8082                	ret

00000b04 <putchar>:
     b04:	e00007b7          	lui	a5,0xe0000
     b08:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
     b0c:	4398                	lw	a4,0(a5)
     b0e:	0c000693          	li	a3,192
     b12:	0c077713          	andi	a4,a4,192
     b16:	04d70963          	beq	a4,a3,b68 <putchar+0x64>
     b1a:	1151                	addi	sp,sp,-12
     b1c:	00100737          	lui	a4,0x100
     b20:	c222                	sw	s0,4(sp)
     b22:	c406                	sw	ra,8(sp)
     b24:	842a                	mv	s0,a0
     b26:	0705                	addi	a4,a4,1 # 100001 <lib_i2c.c.829168c6+0xf7437>
     b28:	4394                	lw	a3,0(a5)
     b2a:	0806f613          	andi	a2,a3,128
     b2e:	e215                	bnez	a2,b52 <putchar+0x4e>
     b30:	c291                	beqz	a3,b34 <putchar+0x30>
     b32:	3c6d                	jal	5ec <internal_handle_input.constprop.0>
     b34:	6741                	lui	a4,0x10
     b36:	f0070713          	addi	a4,a4,-256 # ff00 <lib_i2c.c.829168c6+0x7336>
     b3a:	00841793          	slli	a5,s0,0x8
     b3e:	8ff9                	and	a5,a5,a4
     b40:	e0000737          	lui	a4,0xe0000
     b44:	0857e793          	ori	a5,a5,133
     b48:	0f470713          	addi	a4,a4,244 # e00000f4 <_eusrstack+0xbffff8f4>
     b4c:	c31c                	sw	a5,0(a4)
     b4e:	4505                	li	a0,1
     b50:	a801                	j	b60 <putchar+0x5c>
     b52:	177d                	addi	a4,a4,-1
     b54:	fb71                	bnez	a4,b28 <putchar+0x24>
     b56:	4398                	lw	a4,0(a5)
     b58:	4501                	li	a0,0
     b5a:	0c076713          	ori	a4,a4,192
     b5e:	c398                	sw	a4,0(a5)
     b60:	40a2                	lw	ra,8(sp)
     b62:	4412                	lw	s0,4(sp)
     b64:	0131                	addi	sp,sp,12
     b66:	8082                	ret
     b68:	4501                	li	a0,0
     b6a:	8082                	ret

00000b6c <i2c_scan_callback>:
	if (i2c_ping(0x3C) != I2C_OK) return;
	ssd1306_print_str_at(str, line, 0);
}

void i2c_scan_callback(const uint8_t addr) {
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
     b6c:	c13d                	beqz	a0,bd2 <i2c_scan_callback+0x66>
     b6e:	07f00793          	li	a5,127
     b72:	862a                	mv	a2,a0
     b74:	04f50f63          	beq	a0,a5,bd2 <i2c_scan_callback+0x66>
void i2c_scan_callback(const uint8_t addr) {
     b78:	1151                	addi	sp,sp,-12
     b7a:	c026                	sw	s1,0(sp)
	
	static int line = 1;
	sprintf(str_output, "I2C: 0x%02X", addr);
     b7c:	6585                	lui	a1,0x1
     b7e:	42858593          	addi	a1,a1,1064 # 1428 <DMA1_Channel3_IRQHandler+0x80>
     b82:	08018513          	addi	a0,gp,128 # 2000047c <str_output>
void i2c_scan_callback(const uint8_t addr) {
     b86:	c406                	sw	ra,8(sp)
     b88:	c222                	sw	s0,4(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
     b8a:	3da9                	jal	9e4 <sprintf>
	printf("%s\n", str_output);
     b8c:	08018513          	addi	a0,gp,128 # 2000047c <str_output>
     b90:	37a1                	jal	ad8 <puts>
	modI2C_display(str_output, line++);
     b92:	c201a403          	lw	s0,-992(gp) # 2000001c <line.5>
     b96:	00140713          	addi	a4,s0,1
     b9a:	c2e1a023          	sw	a4,-992(gp) # 2000001c <line.5>
     b9e:	0ff47413          	zext.b	s0,s0
	if (line != 7) { printf(str); printf("\n"); }
     ba2:	479d                	li	a5,7
     ba4:	00f40763          	beq	s0,a5,bb2 <i2c_scan_callback+0x46>
     ba8:	08018513          	addi	a0,gp,128 # 2000047c <str_output>
     bac:	33cd                	jal	98e <printf>
     bae:	4529                	li	a0,10
     bb0:	3f91                	jal	b04 <putchar>
	if (i2c_ping(0x3C) != I2C_OK) return;
     bb2:	03c00513          	li	a0,60
     bb6:	845ff0ef          	jal	3fa <i2c_ping>
     bba:	e519                	bnez	a0,bc8 <i2c_scan_callback+0x5c>
	ssd1306_print_str_at(str, line, 0);
     bbc:	8522                	mv	a0,s0
}
     bbe:	4412                	lw	s0,4(sp)
     bc0:	40a2                	lw	ra,8(sp)
     bc2:	4482                	lw	s1,0(sp)
     bc4:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
     bc6:	b56d                	j	a70 <ssd1306_print_str_at.constprop.0>
}
     bc8:	40a2                	lw	ra,8(sp)
     bca:	4412                	lw	s0,4(sp)
     bcc:	4482                	lw	s1,0(sp)
     bce:	0131                	addi	sp,sp,12
     bd0:	8082                	ret
     bd2:	8082                	ret

00000bd4 <SystemInit>:
     bd4:	400227b7          	lui	a5,0x40022
     bd8:	4705                	li	a4,1
     bda:	c398                	sw	a4,0(a5)
     bdc:	400217b7          	lui	a5,0x40021
     be0:	01080737          	lui	a4,0x1080
     be4:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
     be8:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.829168c6+0x10774b7>
     bec:	c398                	sw	a4,0(a5)
     bee:	009f0737          	lui	a4,0x9f0
     bf2:	c798                	sw	a4,8(a5)
     bf4:	40021737          	lui	a4,0x40021
     bf8:	431c                	lw	a5,0(a4)
     bfa:	00679693          	slli	a3,a5,0x6
     bfe:	fe06dde3          	bgez	a3,bf8 <SystemInit+0x24>
     c02:	435c                	lw	a5,4(a4)
     c04:	400216b7          	lui	a3,0x40021
     c08:	9bf1                	andi	a5,a5,-4
     c0a:	0027e793          	ori	a5,a5,2
     c0e:	c35c                	sw	a5,4(a4)
     c10:	4721                	li	a4,8
     c12:	42dc                	lw	a5,4(a3)
     c14:	8bb1                	andi	a5,a5,12
     c16:	fee79ee3          	bne	a5,a4,c12 <SystemInit+0x3e>
     c1a:	e00007b7          	lui	a5,0xe0000
     c1e:	0f878793          	addi	a5,a5,248 # e00000f8 <_eusrstack+0xbffff8f8>
     c22:	0007a023          	sw	zero,0(a5)
     c26:	e00007b7          	lui	a5,0xe0000
     c2a:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
     c2e:	08000713          	li	a4,128
     c32:	c398                	sw	a4,0(a5)
     c34:	8082                	ret

00000c36 <main>:

#include "ST7735/modTFT.h"
#include "Storage/modStorage.h"

int main()
{
     c36:	1121                	addi	sp,sp,-24
     c38:	c626                	sw	s1,12(sp)
     c3a:	ca06                	sw	ra,20(sp)
     c3c:	c822                	sw	s0,16(sp)
	uint32_t time_ref = 0;

	M_Encoder encoder_a = {0, 0, 0};
	M_Button button_a = {0xC0, BUTTON_IDLE, 0, 0, 0, 0, 0, 0};

	SystemInit();
     c3e:	3f59                	jal	bd4 <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
     c40:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     c44:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
     c46:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     c4a:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.829168c6+0x2fb5>
     c4e:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
     c50:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
     c54:	c601ae23          	sw	zero,-900(gp) # 20000078 <systick_millis>
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
     c58:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     c5a:	6685                	lui	a3,0x1
     c5c:	00776713          	ori	a4,a4,7
     c60:	c398                	sw	a4,0(a5)
     c62:	e000e737          	lui	a4,0xe000e
     c66:	10d72023          	sw	a3,256(a4) # e000e100 <_eusrstack+0xc000d900>
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     c6a:	4798                	lw	a4,8(a5)
     c6c:	004947b7          	lui	a5,0x494
     c70:	e0078793          	addi	a5,a5,-512 # 493e00 <lib_i2c.c.829168c6+0x48b236>
     c74:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     c76:	e000f6b7          	lui	a3,0xe000f
     c7a:	469c                	lw	a5,8(a3)
     c7c:	8f99                	sub	a5,a5,a4
     c7e:	fe07cee3          	bltz	a5,c7a <main+0x44>
*/


void modEncoder_setup(M_Encoder *model) {
	//! Enable GPIOC, TIM2, and AFIO *very important!*
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
     c82:	40021737          	lui	a4,0x40021
     c86:	4f1c                	lw	a5,24(a4)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	// PD3 is T2CH1_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
     c88:	7645                	lui	a2,0xffff1
     c8a:	167d                	addi	a2,a2,-1 # ffff0fff <_eusrstack+0xdfff07ff>
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
     c8c:	0317e793          	ori	a5,a5,49
     c90:	cf1c                	sw	a5,24(a4)
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
     c92:	4f5c                	lw	a5,28(a4)
     c94:	0017e793          	ori	a5,a5,1
     c98:	cf5c                	sw	a5,28(a4)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
     c9a:	400107b7          	lui	a5,0x40010
     c9e:	43d4                	lw	a3,4(a5)
     ca0:	c3d4                	sw	a3,4(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
     ca2:	400117b7          	lui	a5,0x40011
     ca6:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
     caa:	4394                	lw	a3,0(a5)
     cac:	8ef1                	and	a3,a3,a2
     cae:	c394                	sw	a3,0(a5)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*3); 		//set new ones
     cb0:	4394                	lw	a3,0(a5)
     cb2:	6621                	lui	a2,0x8
     cb4:	8ed1                	or	a3,a3,a2
     cb6:	c394                	sw	a3,0(a5)
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
     cb8:	47d4                	lw	a3,12(a5)

	// PD4 is T2CH2_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
     cba:	fff10637          	lui	a2,0xfff10
     cbe:	167d                	addi	a2,a2,-1 # fff0ffff <_eusrstack+0xdff0f7ff>
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
     cc0:	0046e693          	ori	a3,a3,4
     cc4:	c7d4                	sw	a3,12(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
     cc6:	4394                	lw	a3,0(a5)
     cc8:	8ef1                	and	a3,a3,a2
     cca:	c394                	sw	a3,0(a5)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*4); 		//set new ones
     ccc:	4394                	lw	a3,0(a5)
     cce:	00080637          	lui	a2,0x80
     cd2:	8ed1                	or	a3,a3,a2
     cd4:	c394                	sw	a3,0(a5)
	GPIOD->OUTDR |= 1<<4;							//1 = pull-up, 0 = pull-down
     cd6:	47d4                	lw	a3,12(a5)
     cd8:	0106e693          	ori	a3,a3,16
     cdc:	c7d4                	sw	a3,12(a5)
	// //# added
	// GPIOC->CFGLR &= ~(0xf<<(4*0));
	// GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*0);

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
     cde:	4b1c                	lw	a5,16(a4)
     ce0:	0017e793          	ori	a5,a5,1
     ce4:	cb1c                	sw	a5,16(a4)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
     ce6:	4b1c                	lw	a5,16(a4)
     ce8:	9bf9                	andi	a5,a5,-2
     cea:	cb1c                	sw	a5,16(a4)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
     cec:	400007b7          	lui	a5,0x40000
     cf0:	0087d703          	lhu	a4,8(a5) # 40000008 <_eusrstack+0x1ffff808>
     cf4:	00376713          	ori	a4,a4,3
     cf8:	00e79423          	sh	a4,8(a5)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
     cfc:	7765                	lui	a4,0xffff9
     cfe:	177d                	addi	a4,a4,-1 # ffff8fff <_eusrstack+0xdfff87ff>
     d00:	02e79223          	sh	a4,36(a5)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
     d04:	0147d703          	lhu	a4,20(a5)
     d08:	00176713          	ori	a4,a4,1
     d0c:	00e79a23          	sh	a4,20(a5)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
     d10:	0007d703          	lhu	a4,0(a5)
     d14:	00176713          	ori	a4,a4,1
     d18:	00e79023          	sh	a4,0(a5)

	model->initial_count = TIM2->CNT;
     d1c:	0247d703          	lhu	a4,36(a5)
	model->last_count = TIM2->CNT;
     d20:	0247d783          	lhu	a5,36(a5)
	if(dev->regb == 0) dev->regb = 1;
     d24:	c0418793          	addi	a5,gp,-1020 # 20000000 <dev_aht21>
     d28:	00a7c683          	lbu	a3,10(a5)
     d2c:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_aht21>
     d30:	4785                	li	a5,1
     d32:	c681                	beqz	a3,d3a <main+0x104>
	if(dev->regb  > 4) dev->regb = 4;
     d34:	4791                	li	a5,4
     d36:	00d7f463          	bgeu	a5,a3,d3e <main+0x108>
     d3a:	00f70523          	sb	a5,10(a4)
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
     d3e:	400217b7          	lui	a5,0x40021
     d42:	4b94                	lw	a3,16(a5)
     d44:	002005b7          	lui	a1,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     d48:	ffe00637          	lui	a2,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
     d4c:	8ecd                	or	a3,a3,a1
     d4e:	cb94                	sw	a3,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     d50:	4b94                	lw	a3,16(a5)
     d52:	167d                	addi	a2,a2,-1 # ffdfffff <_eusrstack+0xdfdff7ff>
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
     d54:	6405                	lui	s0,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     d56:	8ef1                	and	a3,a3,a2
     d58:	cb94                	sw	a3,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     d5a:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
     d5c:	fbc00637          	lui	a2,0xfbc00
     d60:	1675                	addi	a2,a2,-3 # fbbffffd <_eusrstack+0xdbbff7fd>
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     d62:	8ecd                	or	a3,a3,a1
     d64:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
     d66:	4f94                	lw	a3,24(a5)
     d68:	0116e693          	ori	a3,a3,17
     d6c:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
     d6e:	400107b7          	lui	a5,0x40010
     d72:	43d4                	lw	a3,4(a5)
     d74:	8ef1                	and	a3,a3,a2
     d76:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
     d78:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
     d7a:	767d                	lui	a2,0xfffff
     d7c:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
     d80:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
     d82:	400117b7          	lui	a5,0x40011
     d86:	4394                	lw	a3,0(a5)
     d88:	f0f6f693          	andi	a3,a3,-241
     d8c:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
     d8e:	4394                	lw	a3,0(a5)
     d90:	0d06e693          	ori	a3,a3,208
     d94:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
     d96:	4394                	lw	a3,0(a5)
     d98:	8ef1                	and	a3,a3,a2
     d9a:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
     d9c:	4394                	lw	a3,0(a5)
     d9e:	6605                	lui	a2,0x1
     da0:	d0060613          	addi	a2,a2,-768 # d00 <main+0xca>
     da4:	8ed1                	or	a3,a3,a2
     da6:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
     da8:	400056b7          	lui	a3,0x40005
     dac:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
     db0:	6641                	lui	a2,0x10
     db2:	fc060613          	addi	a2,a2,-64 # ffc0 <lib_i2c.c.829168c6+0x73f6>
     db6:	8ff1                	and	a5,a5,a2
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
     db8:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
     dbc:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
     dc0:	431c                	lw	a5,0(a4)
     dc2:	6761                	lui	a4,0x18
     dc4:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.829168c6+0xfad6>
     dc8:	00179593          	slli	a1,a5,0x1
     dcc:	06f76a63          	bltu	a4,a5,e40 <main+0x20a>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
     dd0:	02dc7537          	lui	a0,0x2dc7
     dd4:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.829168c6+0x2dbe036>
     dd8:	ad0ff0ef          	jal	a8 <__hidden___udivsi3>
     ddc:	147d                	addi	s0,s0,-1 # fff <I2C1_EV_IRQHandler+0x5f>
     dde:	8d61                	and	a0,a0,s0
     de0:	0542                	slli	a0,a0,0x10
     de2:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
     de4:	400057b7          	lui	a5,0x40005
     de8:	40a79e23          	sh	a0,1052(a5) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
     dec:	4007d703          	lhu	a4,1024(a5)
     df0:	00176713          	ori	a4,a4,1
     df4:	40e79023          	sh	a4,1024(a5)
	return i2c_error();
     df8:	d18ff0ef          	jal	310 <i2c_error>

void modI2C_setup() {
	if(i2c_init(&dev_aht21) != I2C_OK) {
     dfc:	c125                	beqz	a0,e5c <main+0x226>
		printf("Failed to init I2C\n");
     dfe:	6505                	lui	a0,0x1
     e00:	43450513          	addi	a0,a0,1076 # 1434 <DMA1_Channel3_IRQHandler+0x8c>
     e04:	39d1                	jal	ad8 <puts>
	ssd1306_cmd(end_page); 		// Page end address
     e06:	4781                	li	a5,0
     e08:	4601                	li	a2,0
		uint32_t now = millis();

		// button_run(&button_a, button_onChanged);
		// modEncoder_task(now, &encoder_a, encoder_onChanged);

		if (now - sec_time > 2000) {
     e0a:	7d000713          	li	a4,2000
		uint32_t now = millis();
     e0e:	c7c1a403          	lw	s0,-900(gp) # 20000078 <systick_millis>
		if (now - sec_time > 2000) {
     e12:	40f406b3          	sub	a3,s0,a5
     e16:	fed77ce3          	bgeu	a4,a3,e0e <main+0x1d8>
			sec_time = now;

			modI2C_task2(counter++);
     e1a:	00160793          	addi	a5,a2,1
     e1e:	c03e                	sw	a5,0(sp)

	// SetupI2CSlave(0xFE, i2c_registers, sizeof(i2c_registers), onI2C_SlaveWrite, onI2C_SlaveRead, false);
}

void modI2C_task2(uint32_t counter) {
	sprintf(str_output, "counter %lu", counter);
     e20:	6785                	lui	a5,0x1
     e22:	49078593          	addi	a1,a5,1168 # 1490 <DMA1_Channel3_IRQHandler+0xe8>
     e26:	08018513          	addi	a0,gp,128 # 2000047c <str_output>
     e2a:	3e6d                	jal	9e4 <sprintf>
	if (i2c_ping(0x3C) != I2C_OK) return;
     e2c:	03c00513          	li	a0,60
     e30:	dcaff0ef          	jal	3fa <i2c_ping>
     e34:	e119                	bnez	a0,e3a <main+0x204>
	ssd1306_print_str_at(str, line, 0);
     e36:	451d                	li	a0,7
     e38:	3925                	jal	a70 <ssd1306_print_str_at.constprop.0>
     e3a:	4602                	lw	a2,0(sp)
     e3c:	87a2                	mv	a5,s0
     e3e:	b7f1                	j	e0a <main+0x1d4>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
     e40:	02dc7537          	lui	a0,0x2dc7
     e44:	95be                	add	a1,a1,a5
     e46:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.829168c6+0x2dbe036>
     e4a:	a5eff0ef          	jal	a8 <__hidden___udivsi3>
     e4e:	147d                	addi	s0,s0,-1
     e50:	8d61                	and	a0,a0,s0
     e52:	0542                	slli	a0,a0,0x10
     e54:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
     e56:	67a1                	lui	a5,0x8
     e58:	8d5d                	or	a0,a0,a5
     e5a:	b769                	j	de4 <main+0x1ae>
		printf("----Scanning I2C Bus for Devices---\n");
     e5c:	6505                	lui	a0,0x1
     e5e:	44850513          	addi	a0,a0,1096 # 1448 <DMA1_Channel3_IRQHandler+0xa0>
     e62:	399d                	jal	ad8 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
     e64:	4401                	li	s0,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
     e66:	8522                	mv	a0,s0
     e68:	d92ff0ef          	jal	3fa <i2c_ping>
     e6c:	e119                	bnez	a0,e72 <main+0x23c>
     e6e:	8522                	mv	a0,s0
     e70:	39f5                	jal	b6c <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
     e72:	0405                	addi	s0,s0,1
     e74:	0ff47413          	zext.b	s0,s0
     e78:	07f00793          	li	a5,127
     e7c:	fef415e3          	bne	s0,a5,e66 <main+0x230>
		printf("----Done Scanning----\n\n");
     e80:	6505                	lui	a0,0x1
     e82:	46c50513          	addi	a0,a0,1132 # 146c <DMA1_Channel3_IRQHandler+0xc4>
     e86:	3989                	jal	ad8 <puts>
		if (i2c_ping(0x3C) == I2C_OK) {
     e88:	03c00513          	li	a0,60
     e8c:	d6eff0ef          	jal	3fa <i2c_ping>
     e90:	f93d                	bnez	a0,e06 <main+0x1d0>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
     e92:	6785                	lui	a5,0x1
	memset(ssd1306_buffer, color ? 0xFF : 0x00, sizeof(ssd1306_buffer));
     e94:	c6018c23          	sb	zero,-904(gp) # 20000074 <ssd1306_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
     e98:	69878793          	addi	a5,a5,1688 # 1698 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
     e9c:	0007c503          	lbu	a0,0(a5)
     ea0:	0ff00713          	li	a4,255
     ea4:	02e51d63          	bne	a0,a4,ede <main+0x2a8>
		ssd1306_cmd(SSD1306_COLUMNADDR);
     ea8:	02100513          	li	a0,33
     eac:	f24ff0ef          	jal	5d0 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
     eb0:	4501                	li	a0,0
     eb2:	f1eff0ef          	jal	5d0 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
     eb6:	07f00513          	li	a0,127
     eba:	f16ff0ef          	jal	5d0 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
     ebe:	02200513          	li	a0,34
     ec2:	f0eff0ef          	jal	5d0 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
     ec6:	4501                	li	a0,0
     ec8:	f08ff0ef          	jal	5d0 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
     ecc:	451d                	li	a0,7
     ece:	f02ff0ef          	jal	5d0 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
     ed2:	02000593          	li	a1,32
     ed6:	c7818513          	addi	a0,gp,-904 # 20000074 <ssd1306_buffer>
     eda:	36b5                	jal	a46 <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
     edc:	a039                	j	eea <main+0x2b4>
			if(ssd1306_cmd(*cmd_list++)) return 1;
     ede:	0785                	addi	a5,a5,1
     ee0:	c03e                	sw	a5,0(sp)
     ee2:	eeeff0ef          	jal	5d0 <ssd1306_cmd>
     ee6:	4782                	lw	a5,0(sp)
     ee8:	d955                	beqz	a0,e9c <main+0x266>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
     eea:	40000613          	li	a2,1024
     eee:	4581                	li	a1,0
     ef0:	c8018513          	addi	a0,gp,-896 # 2000007c <frame_buffer>
     ef4:	3e01                	jal	a04 <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
     ef6:	02100513          	li	a0,33
     efa:	ed6ff0ef          	jal	5d0 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
     efe:	4501                	li	a0,0
     f00:	ed0ff0ef          	jal	5d0 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
     f04:	07f00513          	li	a0,127
     f08:	ec8ff0ef          	jal	5d0 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
     f0c:	02200513          	li	a0,34
     f10:	ec0ff0ef          	jal	5d0 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
     f14:	4501                	li	a0,0
     f16:	ebaff0ef          	jal	5d0 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
     f1a:	451d                	li	a0,7
     f1c:	eb4ff0ef          	jal	5d0 <ssd1306_cmd>
     f20:	4781                	li	a5,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
     f22:	c8018713          	addi	a4,gp,-896 # 2000007c <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
     f26:	4501                	li	a0,0
     f28:	973e                	add	a4,a4,a5
			uint16_t chunk_end = chunk + CHUNK_SIZE;
     f2a:	02050693          	addi	a3,a0,32
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
     f2e:	01069593          	slli	a1,a3,0x10
     f32:	81c1                	srli	a1,a1,0x10
     f34:	8d89                	sub	a1,a1,a0
     f36:	953a                	add	a0,a0,a4
     f38:	c43e                	sw	a5,8(sp)
     f3a:	c236                	sw	a3,4(sp)
     f3c:	c03a                	sw	a4,0(sp)
     f3e:	3621                	jal	a46 <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
     f40:	4692                	lw	a3,4(sp)
     f42:	4702                	lw	a4,0(sp)
     f44:	47a2                	lw	a5,8(sp)
     f46:	8536                	mv	a0,a3
     f48:	08000693          	li	a3,128
     f4c:	fcd51fe3          	bne	a0,a3,f2a <main+0x2f4>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
     f50:	08078793          	addi	a5,a5,128
     f54:	40000713          	li	a4,1024
     f58:	fce795e3          	bne	a5,a4,f22 <main+0x2ec>
			sprintf(str_output, "Hello Bee!");
     f5c:	6585                	lui	a1,0x1
     f5e:	48458593          	addi	a1,a1,1156 # 1484 <DMA1_Channel3_IRQHandler+0xdc>
     f62:	08018513          	addi	a0,gp,128 # 2000047c <str_output>
     f66:	3c45                	jal	a16 <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
     f68:	4501                	li	a0,0
     f6a:	3619                	jal	a70 <ssd1306_print_str_at.constprop.0>
     f6c:	bd69                	j	e06 <main+0x1d0>

00000f6e <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
     f6e:	1151                	addi	sp,sp,-12
     f70:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
     f72:	e000f7b7          	lui	a5,0xe000f
{
     f76:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
     f78:	4b98                	lw	a4,16(a5)
{
     f7a:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
     f7c:	66b1                	lui	a3,0xc
     f7e:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.829168c6+0x2fb6>
     f82:	9736                	add	a4,a4,a3
     f84:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
     f86:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
     f8a:	c7c1a783          	lw	a5,-900(gp) # 20000078 <systick_millis>
}
     f8e:	46a2                	lw	a3,8(sp)
	systick_millis++;
     f90:	0785                	addi	a5,a5,1
     f92:	c6f1ae23          	sw	a5,-900(gp) # 20000078 <systick_millis>
}
     f96:	4712                	lw	a4,4(sp)
     f98:	4782                	lw	a5,0(sp)
     f9a:	0131                	addi	sp,sp,12
     f9c:	30200073          	mret

00000fa0 <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
     fa0:	7179                	addi	sp,sp,-48
     fa2:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
     fa4:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
     fa8:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
     faa:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     fae:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
     fb2:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
     fb6:	cc26                	sw	s1,24(sp)
     fb8:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
     fba:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
     fbe:	d416                	sw	t0,40(sp)
     fc0:	d21a                	sw	t1,36(sp)
     fc2:	d01e                	sw	t2,32(sp)
     fc4:	ce22                	sw	s0,28(sp)
     fc6:	ca2a                	sw	a0,20(sp)
     fc8:	c82e                	sw	a1,16(sp)
     fca:	c632                	sw	a2,12(sp)
     fcc:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
     fce:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
     fd0:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
     fd2:	c305                	beqz	a4,ff2 <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
     fd4:	0f418713          	addi	a4,gp,244 # 200004f0 <i2c_slave_state>
     fd8:	4685                	li	a3,1
     fda:	07c2                	slli	a5,a5,0x10
     fdc:	83c1                	srli	a5,a5,0x10
     fde:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
     fe2:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
     fe6:	839d                	srli	a5,a5,0x7
     fe8:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
     fea:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
     fee:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
     ff2:	0404f793          	andi	a5,s1,64
     ff6:	c795                	beqz	a5,1022 <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
     ff8:	0f418793          	addi	a5,gp,244 # 200004f0 <i2c_slave_state>
     ffc:	0007c703          	lbu	a4,0(a5)
    1000:	c369                	beqz	a4,10c2 <I2C1_EV_IRQHandler+0x122>
            i2c_slave_state.offset = I2C1->DATAR;
    1002:	40005737          	lui	a4,0x40005
    1006:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    100a:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    100e:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    1012:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    1016:	0ff77713          	zext.b	a4,a4
    101a:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    101e:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    1022:	0804f793          	andi	a5,s1,128
    1026:	c7a1                	beqz	a5,106e <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    1028:	0f418793          	addi	a5,gp,244 # 200004f0 <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    102c:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1030:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    1034:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    1038:	400057b7          	lui	a5,0x40005
    103c:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    1040:	0f418413          	addi	s0,gp,244 # 200004f0 <i2c_slave_state>
    1044:	cb69                	beqz	a4,1116 <I2C1_EV_IRQHandler+0x176>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1046:	01044703          	lbu	a4,16(s0)
    104a:	0ee57463          	bgeu	a0,a4,1132 <I2C1_EV_IRQHandler+0x192>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    104e:	4458                	lw	a4,12(s0)
    1050:	972a                	add	a4,a4,a0
    1052:	00074703          	lbu	a4,0(a4)
    1056:	0ff77713          	zext.b	a4,a4
    105a:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    105e:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    1060:	c391                	beqz	a5,1064 <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    1062:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    1064:	00244783          	lbu	a5,2(s0)
    1068:	0785                	addi	a5,a5,1
    106a:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    106e:	88c1                	andi	s1,s1,16
    1070:	c895                	beqz	s1,10a4 <I2C1_EV_IRQHandler+0x104>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    1072:	400057b7          	lui	a5,0x40005
    1076:	4007d703          	lhu	a4,1024(a5) # 40005400 <_eusrstack+0x20004c00>
    107a:	66c1                	lui	a3,0x10
    107c:	dff68693          	addi	a3,a3,-513 # fdff <lib_i2c.c.829168c6+0x7235>
    1080:	8f75                	and	a4,a4,a3
    1082:	40e79023          	sh	a4,1024(a5)
        if (i2c_slave_state.address2matched) {
    1086:	0f418793          	addi	a5,gp,244 # 200004f0 <i2c_slave_state>
    108a:	02a7c703          	lbu	a4,42(a5)
    108e:	c74d                	beqz	a4,1138 <I2C1_EV_IRQHandler+0x198>
            if (i2c_slave_state.write_callback2 != NULL) {
    1090:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    1092:	cb09                	beqz	a4,10a4 <I2C1_EV_IRQHandler+0x104>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    1094:	0017c503          	lbu	a0,1(a5)
    1098:	0027c583          	lbu	a1,2(a5)
    109c:	8d89                	sub	a1,a1,a0
    109e:	0ff5f593          	zext.b	a1,a1
    10a2:	9702                	jalr	a4
            }
        }
    }
}
    10a4:	4472                	lw	s0,28(sp)
    10a6:	50b2                	lw	ra,44(sp)
    10a8:	52a2                	lw	t0,40(sp)
    10aa:	5312                	lw	t1,36(sp)
    10ac:	5382                	lw	t2,32(sp)
    10ae:	44e2                	lw	s1,24(sp)
    10b0:	4552                	lw	a0,20(sp)
    10b2:	45c2                	lw	a1,16(sp)
    10b4:	4632                	lw	a2,12(sp)
    10b6:	46a2                	lw	a3,8(sp)
    10b8:	4712                	lw	a4,4(sp)
    10ba:	4782                	lw	a5,0(sp)
    10bc:	6145                	addi	sp,sp,48
    10be:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    10c2:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    10c6:	4705                	li	a4,1
    10c8:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    10cc:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    10d0:	c695                	beqz	a3,10fc <I2C1_EV_IRQHandler+0x15c>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    10d2:	0107c683          	lbu	a3,16(a5)
    10d6:	f4d776e3          	bgeu	a4,a3,1022 <I2C1_EV_IRQHandler+0x82>
    10da:	0287c683          	lbu	a3,40(a5)
    10de:	f2b1                	bnez	a3,1022 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    10e0:	400056b7          	lui	a3,0x40005
    10e4:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    10e8:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    10ea:	96ba                	add	a3,a3,a4
    10ec:	0ff67613          	zext.b	a2,a2
    10f0:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    10f4:	0705                	addi	a4,a4,1
    10f6:	00e78123          	sb	a4,2(a5)
    10fa:	b725                	j	1022 <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    10fc:	0087c683          	lbu	a3,8(a5)
    1100:	f2d771e3          	bgeu	a4,a3,1022 <I2C1_EV_IRQHandler+0x82>
    1104:	01c7c683          	lbu	a3,28(a5)
    1108:	fe89                	bnez	a3,1022 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    110a:	400056b7          	lui	a3,0x40005
    110e:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1112:	43d4                	lw	a3,4(a5)
    1114:	bfd9                	j	10ea <I2C1_EV_IRQHandler+0x14a>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    1116:	00844703          	lbu	a4,8(s0)
    111a:	00e57c63          	bgeu	a0,a4,1132 <I2C1_EV_IRQHandler+0x192>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    111e:	4058                	lw	a4,4(s0)
    1120:	972a                	add	a4,a4,a0
    1122:	00074703          	lbu	a4,0(a4)
    1126:	0ff77713          	zext.b	a4,a4
    112a:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    112e:	4c1c                	lw	a5,24(s0)
    1130:	bf05                	j	1060 <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    1132:	00079823          	sh	zero,16(a5)
    1136:	bf25                	j	106e <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    1138:	4bd8                	lw	a4,20(a5)
    113a:	bfa1                	j	1092 <I2C1_EV_IRQHandler+0xf2>

0000113c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    113c:	1141                	addi	sp,sp,-16
    113e:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1140:	400057b7          	lui	a5,0x40005
void I2C1_ER_IRQHandler(void) {
    1144:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1146:	4147d683          	lhu	a3,1044(a5) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    114a:	c23a                	sw	a4,4(sp)
    114c:	c632                	sw	a2,12(sp)
    uint16_t STAR1 = I2C1->STAR1;
    114e:	01069713          	slli	a4,a3,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1152:	1006f693          	andi	a3,a3,256
    uint16_t STAR1 = I2C1->STAR1;
    1156:	8341                	srli	a4,a4,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1158:	ca99                	beqz	a3,116e <I2C1_ER_IRQHandler+0x32>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    115a:	4147d683          	lhu	a3,1044(a5)
    115e:	6641                	lui	a2,0x10
    1160:	eff60613          	addi	a2,a2,-257 # feff <lib_i2c.c.829168c6+0x7335>
    1164:	8ef1                	and	a3,a3,a2
    1166:	40078793          	addi	a5,a5,1024
    116a:	00d79a23          	sh	a3,20(a5)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    116e:	20077793          	andi	a5,a4,512
    1172:	cb99                	beqz	a5,1188 <I2C1_ER_IRQHandler+0x4c>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    1174:	400057b7          	lui	a5,0x40005
    1178:	4147d683          	lhu	a3,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    117c:	6641                	lui	a2,0x10
    117e:	dff60613          	addi	a2,a2,-513 # fdff <lib_i2c.c.829168c6+0x7235>
    1182:	8ef1                	and	a3,a3,a2
    1184:	40d79a23          	sh	a3,1044(a5)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    1188:	40077713          	andi	a4,a4,1024
    118c:	cb19                	beqz	a4,11a2 <I2C1_ER_IRQHandler+0x66>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    118e:	400057b7          	lui	a5,0x40005
    1192:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    1196:	66c1                	lui	a3,0x10
    1198:	bff68693          	addi	a3,a3,-1025 # fbff <lib_i2c.c.829168c6+0x7035>
    119c:	8f75                	and	a4,a4,a3
    119e:	40e79a23          	sh	a4,1044(a5)
    }
}
    11a2:	4632                	lw	a2,12(sp)
    11a4:	46a2                	lw	a3,8(sp)
    11a6:	4712                	lw	a4,4(sp)
    11a8:	4782                	lw	a5,0(sp)
    11aa:	0141                	addi	sp,sp,16
    11ac:	30200073          	mret

000011b0 <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    11b0:	fdc10113          	addi	sp,sp,-36
    11b4:	cc26                	sw	s1,24(sp)
    11b6:	d006                	sw	ra,32(sp)
    11b8:	ce22                	sw	s0,28(sp)
    11ba:	c032                	sw	a2,0(sp)
    11bc:	84aa                	mv	s1,a0
	if( tween <= 0 ) return hexa;
    11be:	0ac05863          	blez	a2,126e <TweenHexColors+0xbe>
	if( tween >= 255 ) return hexb;
    11c2:	0fe00713          	li	a4,254
    11c6:	842e                	mv	s0,a1
    11c8:	0ac74a63          	blt	a4,a2,127c <TweenHexColors+0xcc>
	int32_t aamt = 255-tween;
    11cc:	0ff00793          	li	a5,255
    11d0:	8f91                	sub	a5,a5,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    11d2:	85be                	mv	a1,a5
    11d4:	0ff57513          	zext.b	a0,a0
	int32_t aamt = 255-tween;
    11d8:	c23e                	sw	a5,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    11da:	1ffff097          	auipc	ra,0x1ffff
    11de:	e46080e7          	jalr	-442(ra) # 20000020 <FastMultiply>
    11e2:	4582                	lw	a1,0(sp)
    11e4:	ca2a                	sw	a0,20(sp)
    11e6:	0ff47513          	zext.b	a0,s0
    11ea:	1ffff097          	auipc	ra,0x1ffff
    11ee:	e36080e7          	jalr	-458(ra) # 20000020 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    11f2:	4592                	lw	a1,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    11f4:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    11f6:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    11fa:	0ff57513          	zext.b	a0,a0
    11fe:	1ffff097          	auipc	ra,0x1ffff
    1202:	e22080e7          	jalr	-478(ra) # 20000020 <FastMultiply>
    1206:	4582                	lw	a1,0(sp)
    1208:	c62a                	sw	a0,12(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    120a:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    120e:	0ff57513          	zext.b	a0,a0
    1212:	1ffff097          	auipc	ra,0x1ffff
    1216:	e0e080e7          	jalr	-498(ra) # 20000020 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    121a:	4592                	lw	a1,4(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    121c:	c42a                	sw	a0,8(sp)
	int32_t hag = (hexa>>16) & 0xff;
    121e:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1222:	0ff57513          	zext.b	a0,a0
    1226:	1ffff097          	auipc	ra,0x1ffff
    122a:	dfa080e7          	jalr	-518(ra) # 20000020 <FastMultiply>
    122e:	4582                	lw	a1,0(sp)
    1230:	84aa                	mv	s1,a0
	int32_t hbg = (hexb>>16) & 0xff;
    1232:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1236:	0ff57513          	zext.b	a0,a0
    123a:	1ffff097          	auipc	ra,0x1ffff
    123e:	de6080e7          	jalr	-538(ra) # 20000020 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1242:	4342                	lw	t1,16(sp)
    1244:	4752                	lw	a4,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1246:	4622                	lw	a2,8(sp)
    1248:	46b2                	lw	a3,12(sp)
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    124a:	00a487b3          	add	a5,s1,a0
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    124e:	971a                	add	a4,a4,t1
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1250:	96b2                	add	a3,a3,a2
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1252:	08070713          	addi	a4,a4,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1256:	08068693          	addi	a3,a3,128
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    125a:	08078793          	addi	a5,a5,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    125e:	8321                	srli	a4,a4,0x8
	return b | (r<<8) | (g<<16);
    1260:	f006f693          	andi	a3,a3,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1264:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    1266:	8f55                	or	a4,a4,a3
    1268:	07c2                	slli	a5,a5,0x10
    126a:	00f764b3          	or	s1,a4,a5
}
    126e:	5082                	lw	ra,32(sp)
    1270:	4472                	lw	s0,28(sp)
    1272:	8526                	mv	a0,s1
    1274:	44e2                	lw	s1,24(sp)
    1276:	02410113          	addi	sp,sp,36
    127a:	8082                	ret
	if( tween >= 255 ) return hexb;
    127c:	84ae                	mv	s1,a1
    127e:	bfc5                	j	126e <TweenHexColors+0xbe>

00001280 <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1280:	fdc10113          	addi	sp,sp,-36
    1284:	ce22                	sw	s0,28(sp)
    1286:	cc26                	sw	s1,24(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    1288:	c701a483          	lw	s1,-912(gp) # 2000006c <WS2812LEDs>
	int place = WS2812LEDPlace;
    128c:	c6c1a703          	lw	a4,-916(gp) # 20000068 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1290:	d006                	sw	ra,32(sp)
    1292:	87aa                	mv	a5,a0
    1294:	c02e                	sw	a1,0(sp)
	uint16_t * end = ptr + numhalfwords;
    1296:	03050313          	addi	t1,a0,48
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    129a:	06074263          	bltz	a4,12fe <WS2812FillBuffSec.constprop.0+0x7e>
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    129e:	007f45b7          	lui	a1,0x7f4
    12a2:	628d                	lui	t0,0x3
    12a4:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.829168c6+0x7eb476>
    12a8:	0ff28293          	addi	t0,t0,255 # 30ff <ch32fun.c.de574efd+0x100f>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    12ac:	04f30b63          	beq	t1,a5,1302 <WS2812FillBuffSec.constprop.0+0x82>
	{
		if( place >= ledcount )
    12b0:	06974163          	blt	a4,s1,1312 <WS2812FillBuffSec.constprop.0+0x92>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    12b4:	40f30633          	sub	a2,t1,a5
    12b8:	853e                	mv	a0,a5
    12ba:	4581                	li	a1,0
    12bc:	c23a                	sw	a4,4(sp)
    12be:	f46ff0ef          	jal	a04 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    12c2:	4782                	lw	a5,0(sp)
    12c4:	4712                	lw	a4,4(sp)
    12c6:	cf95                	beqz	a5,1302 <WS2812FillBuffSec.constprop.0+0x82>
			{
				if( place == ledcount )
    12c8:	00e49a63          	bne	s1,a4,12dc <WS2812FillBuffSec.constprop.0+0x5c>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    12cc:	400207b7          	lui	a5,0x40020
    12d0:	5b94                	lw	a3,48(a5)
    12d2:	fdf6f693          	andi	a3,a3,-33
    12d6:	db94                	sw	a3,48(a5)
					WS2812BLEDInUse = 0;
    12d8:	c601a423          	sw	zero,-920(gp) # 20000064 <WS2812BLEDInUse>
				}
				place++;
    12dc:	0705                	addi	a4,a4,1
    12de:	a015                	j	1302 <WS2812FillBuffSec.constprop.0+0x82>
		(*ptr++) = 0;
    12e0:	00079023          	sh	zero,0(a5) # 40020000 <_eusrstack+0x2001f800>
		(*ptr++) = 0;
    12e4:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    12e8:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    12ec:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    12f0:	00079423          	sh	zero,8(a5)
		place++;
    12f4:	0705                	addi	a4,a4,1
		(*ptr++) = 0;
    12f6:	07b1                	addi	a5,a5,12
    12f8:	fe079f23          	sh	zero,-2(a5)
    12fc:	bf79                	j	129a <WS2812FillBuffSec.constprop.0+0x1a>
	while( place < 0 && ptr != end )
    12fe:	fef311e3          	bne	t1,a5,12e0 <WS2812FillBuffSec.constprop.0+0x60>
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
}
    1302:	5082                	lw	ra,32(sp)
	WS2812LEDPlace = place;
    1304:	c6e1a623          	sw	a4,-916(gp) # 20000068 <WS2812LEDPlace>
}
    1308:	4472                	lw	s0,28(sp)
    130a:	44e2                	lw	s1,24(sp)
    130c:	02410113          	addi	sp,sp,36
    1310:	8082                	ret
    1312:	c1c1a603          	lw	a2,-996(gp) # 20000018 <tween>
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1316:	00170393          	addi	t2,a4,1
    131a:	9732                	add	a4,a4,a2
    131c:	4601                	li	a2,0
    131e:	00e05463          	blez	a4,1326 <WS2812FillBuffSec.constprop.0+0xa6>
    1322:	0ff00613          	li	a2,255
    1326:	8516                	mv	a0,t0
    1328:	ca1e                	sw	t2,20(sp)
    132a:	c83e                	sw	a5,16(sp)
    132c:	c61a                	sw	t1,12(sp)
    132e:	c42e                	sw	a1,8(sp)
    1330:	c216                	sw	t0,4(sp)
    1332:	3dbd                	jal	11b0 <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1334:	00b55713          	srli	a4,a0,0xb
    1338:	6785                	lui	a5,0x1
    133a:	49c78693          	addi	a3,a5,1180 # 149c <bitquartets.8>
    133e:	8b79                	andi	a4,a4,30
    1340:	9736                	add	a4,a4,a3
    1342:	47c2                	lw	a5,16(sp)
    1344:	00075703          	lhu	a4,0(a4)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1348:	43d2                	lw	t2,20(sp)
    134a:	4332                	lw	t1,12(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    134c:	00e79023          	sh	a4,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1350:	00755713          	srli	a4,a0,0x7
    1354:	8b79                	andi	a4,a4,30
    1356:	9736                	add	a4,a4,a3
    1358:	00075703          	lhu	a4,0(a4)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    135c:	45a2                	lw	a1,8(sp)
    135e:	4292                	lw	t0,4(sp)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1360:	00e79123          	sh	a4,2(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    1364:	00355713          	srli	a4,a0,0x3
    1368:	8b79                	andi	a4,a4,30
    136a:	9736                	add	a4,a4,a3
    136c:	00075703          	lhu	a4,0(a4)
		ptr += 6;
    1370:	07b1                	addi	a5,a5,12
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    1372:	fee79c23          	sh	a4,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    1376:	00f57713          	andi	a4,a0,15
    137a:	0706                	slli	a4,a4,0x1
    137c:	9736                	add	a4,a4,a3
    137e:	00075703          	lhu	a4,0(a4)
    1382:	fee79d23          	sh	a4,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1386:	01355713          	srli	a4,a0,0x13
    138a:	8b79                	andi	a4,a4,30
    138c:	9736                	add	a4,a4,a3
    138e:	00075703          	lhu	a4,0(a4)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1392:	813d                	srli	a0,a0,0xf
    1394:	8979                	andi	a0,a0,30
    1396:	9536                	add	a0,a0,a3
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1398:	fee79e23          	sh	a4,-4(a5)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    139c:	00055703          	lhu	a4,0(a0)
    13a0:	fee79f23          	sh	a4,-2(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    13a4:	871e                	mv	a4,t2
    13a6:	b719                	j	12ac <WS2812FillBuffSec.constprop.0+0x2c>

000013a8 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    13a8:	fcc10113          	addi	sp,sp,-52
    13ac:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    13ae:	400207b7          	lui	a5,0x40020
    13b2:	439c                	lw	a5,0(a5)
{
    13b4:	d022                	sw	s0,32(sp)
    13b6:	ce26                	sw	s1,28(sp)
    13b8:	d806                	sw	ra,48(sp)
    13ba:	d616                	sw	t0,44(sp)
    13bc:	d41a                	sw	t1,40(sp)
    13be:	d21e                	sw	t2,36(sp)
    13c0:	cc2a                	sw	a0,24(sp)
    13c2:	ca2e                	sw	a1,20(sp)
    13c4:	c832                	sw	a2,16(sp)
    13c6:	c636                	sw	a3,12(sp)
    13c8:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    13ca:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    13cc:	40020437          	lui	s0,0x40020
    13d0:	10000493          	li	s1,256
    13d4:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    13d6:	4782                	lw	a5,0(sp)
    13d8:	4007f793          	andi	a5,a5,1024
    13dc:	c789                	beqz	a5,13e6 <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    13de:	4585                	li	a1,1
    13e0:	09418513          	addi	a0,gp,148 # 20000490 <WS2812dmabuff>
    13e4:	3d71                	jal	1280 <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    13e6:	4782                	lw	a5,0(sp)
    13e8:	2007f793          	andi	a5,a5,512
    13ec:	c789                	beqz	a5,13f6 <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    13ee:	4581                	li	a1,0
    13f0:	0c418513          	addi	a0,gp,196 # 200004c0 <WS2812dmabuff+0x30>
    13f4:	3571                	jal	1280 <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    13f6:	401c                	lw	a5,0(s0)
    13f8:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    13fa:	4782                	lw	a5,0(sp)
    13fc:	1007f793          	andi	a5,a5,256
    1400:	fbf1                	bnez	a5,13d4 <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    1402:	5402                	lw	s0,32(sp)
    1404:	50c2                	lw	ra,48(sp)
    1406:	52b2                	lw	t0,44(sp)
    1408:	5322                	lw	t1,40(sp)
    140a:	5392                	lw	t2,36(sp)
    140c:	44f2                	lw	s1,28(sp)
    140e:	4562                	lw	a0,24(sp)
    1410:	45d2                	lw	a1,20(sp)
    1412:	4642                	lw	a2,16(sp)
    1414:	46b2                	lw	a3,12(sp)
    1416:	4722                	lw	a4,8(sp)
    1418:	4792                	lw	a5,4(sp)
    141a:	03410113          	addi	sp,sp,52
    141e:	30200073          	mret
    1422:	0000                	unimp
    1424:	000a                	c.slli	zero,0x2
    1426:	0000                	unimp
    1428:	3249                	jal	daa <main+0x174>
    142a:	30203a43          	.insn	4, 0x30203a43
    142e:	2578                	.insn	2, 0x2578
    1430:	3230                	.insn	2, 0x3230
    1432:	0058                	addi	a4,sp,4
    1434:	6146                	.insn	2, 0x6146
    1436:	6c69                	lui	s8,0x1a
    1438:	6465                	lui	s0,0x19
    143a:	7420                	.insn	2, 0x7420
    143c:	6e69206f          	j	93b22 <lib_i2c.c.829168c6+0x8af58>
    1440:	7469                	lui	s0,0xffffa
    1442:	4920                	lw	s0,80(a0)
    1444:	4332                	lw	t1,12(sp)
    1446:	0000                	unimp
    1448:	2d2d                	jal	1a82 <_data_lma+0x3ce>
    144a:	2d2d                	jal	1a84 <_data_lma+0x3d0>
    144c:	6e616353          	.insn	4, 0x6e616353
    1450:	696e                	.insn	2, 0x696e
    1452:	676e                	.insn	2, 0x676e
    1454:	4920                	lw	s0,80(a0)
    1456:	4332                	lw	t1,12(sp)
    1458:	4220                	lw	s0,64(a2)
    145a:	7375                	lui	t1,0xffffd
    145c:	6620                	.insn	2, 0x6620
    145e:	4420726f          	jal	tp,88a0 <nrf24l01_low_level.c.43cfed78+0x11a>
    1462:	7665                	lui	a2,0xffff9
    1464:	6369                	lui	t1,0x1a
    1466:	7365                	lui	t1,0xffff9
    1468:	2d2d                	jal	1aa2 <_data_lma+0x3ee>
    146a:	002d                	c.nop	11
    146c:	2d2d                	jal	1aa6 <_data_lma+0x3f2>
    146e:	2d2d                	jal	1aa8 <_data_lma+0x3f4>
    1470:	6f44                	.insn	2, 0x6f44
    1472:	656e                	.insn	2, 0x656e
    1474:	5320                	lw	s0,96(a4)
    1476:	6e6e6163          	bltu	t3,t1,1b58 <_data_lma+0x4a4>
    147a:	6e69                	lui	t3,0x1a
    147c:	2d2d2d67          	.insn	4, 0x2d2d2d67
    1480:	0a2d                	addi	s4,s4,11
    1482:	0000                	unimp
    1484:	6548                	.insn	2, 0x6548
    1486:	6c6c                	.insn	2, 0x6c6c
    1488:	6542206f          	j	23adc <lib_i2c.c.829168c6+0x1af12>
    148c:	2165                	jal	1934 <_data_lma+0x280>
    148e:	0000                	unimp
    1490:	6e756f63          	bltu	a0,t2,1b8e <_data_lma+0x4da>
    1494:	6574                	.insn	2, 0x6574
    1496:	2072                	.insn	2, 0x2072
    1498:	6c25                	lui	s8,0x9
    149a:	0075                	c.nop	29

0000149c <bitquartets.8>:
    149c:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    14ac:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

000014bc <FONT_7x5>:
    14bc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    14cc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    14dc:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    14ec:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    14fc:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    150c:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    151c:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    152c:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    153c:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    154c:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    155c:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    156c:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    157c:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    158c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    159c:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    15ac:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    15bc:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    15cc:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    15dc:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    15ec:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    15fc:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    160c:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    161c:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    162c:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    163c:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    164c:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    165c:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    166c:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    167c:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    168c:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

00001698 <ssd1306_init_array>:
    1698:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    16a8:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......

Disassembly of section .data:

20000000 <dev_aht21>:
20000000:	1a80 0006 0000 0000 0038 0001               ........8...

2000000c <dev_ssd1306>:
2000000c:	86a0 0001 0000 0000 003c 0001               ........<...

20000018 <tween>:
20000018:	ff42 ffff                                   B...

2000001c <line.5>:
2000001c:	0001 0000                                   ....

20000020 <FastMultiply>:
{
20000020:	87aa                	mv	a5,a0
	uint32_t ret = 0;
20000022:	4501                	li	a0,0
		if( multiplicand & 1 )
20000024:	0015f713          	andi	a4,a1,1
20000028:	c311                	beqz	a4,2000002c <FastMultiply+0xc>
			ret += mutliplicant;
2000002a:	953e                	add	a0,a0,a5
		multiplicand>>=1;
2000002c:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
2000002e:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000030:	f9f5                	bnez	a1,20000024 <FastMultiply+0x4>
}
20000032:	8082                	ret

20000034 <DMA1_Channel4_IRQHandler>:

// DMA transfer completion interrupt. It will fire when the DMA transfer is
// complete. We use it just to blink the LED
__attribute__((interrupt)) __attribute__((section(".srodata")))
void DMA1_Channel4_IRQHandler(void)
{
20000034:	1151                	addi	sp,sp,-12
20000036:	c23a                	sw	a4,4(sp)
	// Clear flag
	DMA1->INTFCR |= DMA_CTCIF4;
20000038:	40020737          	lui	a4,0x40020
{
2000003c:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000003e:	435c                	lw	a5,4(a4)
{
20000040:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000042:	6689                	lui	a3,0x2
20000044:	8fd5                	or	a5,a5,a3
20000046:	c35c                	sw	a5,4(a4)

	// Blink LED
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000048:	400117b7          	lui	a5,0x40011
2000004c:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000050:	47d8                	lw	a4,12(a5)
}
20000052:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000054:	04074713          	xori	a4,a4,64
20000058:	c7d8                	sw	a4,12(a5)
}
2000005a:	4712                	lw	a4,4(sp)
2000005c:	4782                	lw	a5,0(sp)
2000005e:	0131                	addi	sp,sp,12
20000060:	30200073          	mret
