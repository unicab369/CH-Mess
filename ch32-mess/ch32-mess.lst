
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	52f0006f          	j	d2e <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0df8                	addi	a4,sp,732
   a:	0000                	unimp
   c:	0da0                	addi	s0,sp,728
	...
  2e:	0000                	unimp
  30:	1d4a                	slli	s10,s10,0x32
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0da0                	addi	s0,sp,728
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0da0                	addi	s0,sp,728
  42:	0000                	unimp
  44:	0da0                	addi	s0,sp,728
  46:	0000                	unimp
  48:	0da0                	addi	s0,sp,728
  4a:	0000                	unimp
  4c:	0da0                	addi	s0,sp,728
  4e:	0000                	unimp
  50:	1fbc                	addi	a5,sp,1016
  52:	0000                	unimp
  54:	0da0                	addi	s0,sp,728
  56:	0000                	unimp
  58:	0da0                	addi	s0,sp,728
  5a:	0000                	unimp
  5c:	0da0                	addi	s0,sp,728
  5e:	0000                	unimp
  60:	1d7c                	addi	a5,sp,700
  62:	0000                	unimp
  64:	0da0                	addi	s0,sp,728
  66:	0000                	unimp
  68:	0da0                	addi	s0,sp,728
  6a:	0000                	unimp
  6c:	0da0                	addi	s0,sp,728
  6e:	0000                	unimp
  70:	0da0                	addi	s0,sp,728
  72:	0000                	unimp
  74:	0da0                	addi	s0,sp,728
  76:	0000                	unimp
  78:	0da0                	addi	s0,sp,728
  7a:	0000                	unimp
  7c:	0da0                	addi	s0,sp,728
  7e:	0000                	unimp
  80:	0da0                	addi	s0,sp,728
  82:	0000                	unimp
  84:	0da0                	addi	s0,sp,728
  86:	0000                	unimp
  88:	0da0                	addi	s0,sp,728
  8a:	0000                	unimp
  8c:	0da0                	addi	s0,sp,728
  8e:	0000                	unimp
  90:	0da0                	addi	s0,sp,728
  92:	0000                	unimp
  94:	0da0                	addi	s0,sp,728
  96:	0000                	unimp
  98:	0da0                	addi	s0,sp,728
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	andi	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srli	a1,a1,0x1
      ae:	0606                	slli	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	slli	a2,a2,0x1
      d4:	0686                	slli	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srli	a3,a3,0x1
      e6:	8205                	srli	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
{
     136:	1131                	addi	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
	int overflow = 0;
     144:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     146:	cab5                	beqz	a3,1ba <mini_pad+0x84>
	if(len > pad_to) {
     148:	0096d463          	bge	a3,s1,150 <mini_pad+0x1a>
     14c:	84b6                	mv	s1,a3
		overflow = 1;
     14e:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     150:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     154:	00045363          	bgez	s0,15a <mini_pad+0x24>
     158:	4401                	li	s0,0
     15a:	8622                	mv	a2,s0
     15c:	853a                	mv	a0,a4
     15e:	c23e                	sw	a5,4(sp)
     160:	c01a                	sw	t1,0(sp)
     162:	6e5000ef          	jal	ra,1046 <memset>
     166:	4302                	lw	t1,0(sp)
     168:	4792                	lw	a5,4(sp)
     16a:	872a                	mv	a4,a0
     16c:	008506b3          	add	a3,a0,s0
     170:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     172:	40c485b3          	sub	a1,s1,a2
     176:	04b04463          	bgtz	a1,1be <mini_pad+0x88>
     17a:	0004d363          	bgez	s1,180 <mini_pad+0x4a>
     17e:	4481                	li	s1,0
     180:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     184:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     188:	02030463          	beqz	t1,1b0 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     18c:	02c77263          	bgeu	a4,a2,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     190:	02a00793          	li	a5,42
     194:	fef60fa3          	sb	a5,-1(a2)
     198:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     19c:	00d77a63          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1a0:	fef60f23          	sb	a5,-2(a2)
     1a4:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     1a8:	00d77463          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1ac:	fef60ea3          	sb	a5,-3(a2)
}
     1b0:	40c2                	lw	ra,16(sp)
     1b2:	4432                	lw	s0,12(sp)
     1b4:	44a2                	lw	s1,8(sp)
     1b6:	0151                	addi	sp,sp,20
     1b8:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1ba:	86a6                	mv	a3,s1
     1bc:	bf51                	j	150 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1be:	00c785b3          	add	a1,a5,a2
     1c2:	0005c503          	lbu	a0,0(a1)
     1c6:	00c685b3          	add	a1,a3,a2
     1ca:	0605                	addi	a2,a2,1
     1cc:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1d0:	b74d                	j	172 <mini_pad+0x3c>

000001d2 <_puts>:
{
     1d2:	832a                	mv	t1,a0
     1d4:	852e                	mv	a0,a1
	if(!buf) return len;
     1d6:	ce01                	beqz	a2,1ee <_puts+0x1c>
	char * p0 = b->buffer;
     1d8:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1dc:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1de:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1e0:	00a74863          	blt	a4,a0,1f0 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1e4:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1e8:	4248                	lw	a0,4(a2)
     1ea:	40550533          	sub	a0,a0,t0
}
     1ee:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1f0:	4614                	lw	a3,8(a2)
     1f2:	fff68593          	addi	a1,a3,-1
     1f6:	4214                	lw	a3,0(a2)
     1f8:	96ae                	add	a3,a3,a1
     1fa:	fed785e3          	beq	a5,a3,1e4 <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1fe:	00178693          	addi	a3,a5,1
     202:	c254                	sw	a3,4(a2)
     204:	00e306b3          	add	a3,t1,a4
     208:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     20c:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     20e:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     212:	b7f1                	j	1de <_puts+0xc>

00000214 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     214:	e0000737          	lui	a4,0xe0000
     218:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     21c:	0f470693          	addi	a3,a4,244
     220:	0807f793          	andi	a5,a5,128
     224:	fbf5                	bnez	a5,218 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     226:	783027b7          	lui	a5,0x78302
     22a:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     22e:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     230:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     232:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     236:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     238:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     23a:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     23e:	0807f793          	andi	a5,a5,128
     242:	ffe5                	bnez	a5,23a <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     244:	00e557b3          	srl	a5,a0,a4
     248:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     24c:	03000793          	li	a5,48
     250:	00d35463          	bge	t1,a3,258 <PrintHex+0x44>
     254:	05700793          	li	a5,87
     258:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     25a:	07a2                	slli	a5,a5,0x8
     25c:	0857e793          	ori	a5,a5,133
     260:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     264:	1771                	addi	a4,a4,-4
     266:	fcb71ae3          	bne	a4,a1,23a <PrintHex+0x26>
}
     26a:	8082                	ret

0000026c <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     26c:	1101                	addi	sp,sp,-32
     26e:	ce06                	sw	ra,28(sp)
     270:	cc22                	sw	s0,24(sp)
     272:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     274:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     276:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     278:	00055763          	bgez	a0,286 <mini_itoa.part.0+0x1a>
     27c:	e689                	bnez	a3,286 <mini_itoa.part.0+0x1a>
		negative = 1;
     27e:	4785                	li	a5,1
		value = -value;
     280:	40a00333          	neg	t1,a0
		negative = 1;
     284:	c03e                	sw	a5,0(sp)
     286:	06100413          	li	s0,97
     28a:	c219                	beqz	a2,290 <mini_itoa.part.0+0x24>
     28c:	04100413          	li	s0,65
	int	negative = 0;
     290:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     292:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     294:	851a                	mv	a0,t1
     296:	c83a                	sw	a4,16(sp)
     298:	c21a                	sw	t1,4(sp)
     29a:	c62e                	sw	a1,12(sp)
     29c:	c41a                	sw	t1,8(sp)
     29e:	35b9                	jal	ec <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2a0:	47a5                	li	a5,9
     2a2:	4322                	lw	t1,8(sp)
     2a4:	45b2                	lw	a1,12(sp)
     2a6:	4742                	lw	a4,16(sp)
     2a8:	0ff57693          	andi	a3,a0,255
     2ac:	06a7e163          	bltu	a5,a0,30e <mini_itoa.part.0+0xa2>
     2b0:	03068693          	addi	a3,a3,48
     2b4:	0ff6f693          	andi	a3,a3,255
     2b8:	00148793          	addi	a5,s1,1
     2bc:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2c0:	851a                	mv	a0,t1
     2c2:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2c4:	c63e                	sw	a5,12(sp)
		value /= radix;
     2c6:	c42e                	sw	a1,8(sp)
     2c8:	3be5                	jal	c0 <__hidden___udivsi3>
	} while (value > 0);
     2ca:	4692                	lw	a3,4(sp)
     2cc:	45a2                	lw	a1,8(sp)
     2ce:	47b2                	lw	a5,12(sp)
     2d0:	4742                	lw	a4,16(sp)
		value /= radix;
     2d2:	832a                	mv	t1,a0
	} while (value > 0);
     2d4:	02b6fb63          	bgeu	a3,a1,30a <mini_itoa.part.0+0x9e>
	if (negative)
     2d8:	4682                	lw	a3,0(sp)
     2da:	c699                	beqz	a3,2e8 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2dc:	02d00693          	li	a3,45
     2e0:	00d78023          	sb	a3,0(a5)
     2e4:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2e8:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2ec:	01f55693          	srli	a3,a0,0x1f
     2f0:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2f2:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2f6:	8685                	srai	a3,a3,0x1
     2f8:	4601                	li	a2,0
     2fa:	17fd                	addi	a5,a5,-1
     2fc:	00d64b63          	blt	a2,a3,312 <mini_itoa.part.0+0xa6>
}
     300:	40f2                	lw	ra,28(sp)
     302:	4462                	lw	s0,24(sp)
     304:	44d2                	lw	s1,20(sp)
     306:	6105                	addi	sp,sp,32
     308:	8082                	ret
	} while (value > 0);
     30a:	84be                	mv	s1,a5
     30c:	b761                	j	294 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     30e:	96a2                	add	a3,a3,s0
     310:	b755                	j	2b4 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     312:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     316:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     31a:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     31e:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     320:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     324:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     328:	bfc9                	j	2fa <mini_itoa.part.0+0x8e>

0000032a <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     32a:	400057b7          	lui	a5,0x40005
     32e:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     332:	40078793          	addi	a5,a5,1024
     336:	10077713          	andi	a4,a4,256
     33a:	cf09                	beqz	a4,354 <i2c_error+0x2a>
     33c:	0147d703          	lhu	a4,20(a5)
     340:	4505                	li	a0,1
     342:	0742                	slli	a4,a4,0x10
     344:	8341                	srli	a4,a4,0x10
     346:	eff77713          	andi	a4,a4,-257
     34a:	0742                	slli	a4,a4,0x10
     34c:	8341                	srli	a4,a4,0x10
     34e:	00e79a23          	sh	a4,20(a5)
     352:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     354:	0147d703          	lhu	a4,20(a5)
     358:	40077713          	andi	a4,a4,1024
     35c:	cf09                	beqz	a4,376 <i2c_error+0x4c>
     35e:	0147d703          	lhu	a4,20(a5)
     362:	4509                	li	a0,2
     364:	0742                	slli	a4,a4,0x10
     366:	8341                	srli	a4,a4,0x10
     368:	bff77713          	andi	a4,a4,-1025
     36c:	0742                	slli	a4,a4,0x10
     36e:	8341                	srli	a4,a4,0x10
     370:	00e79a23          	sh	a4,20(a5)
     374:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     376:	0147d703          	lhu	a4,20(a5)
     37a:	20077713          	andi	a4,a4,512
     37e:	cf09                	beqz	a4,398 <i2c_error+0x6e>
     380:	0147d703          	lhu	a4,20(a5)
     384:	450d                	li	a0,3
     386:	0742                	slli	a4,a4,0x10
     388:	8341                	srli	a4,a4,0x10
     38a:	dff77713          	andi	a4,a4,-513
     38e:	0742                	slli	a4,a4,0x10
     390:	8341                	srli	a4,a4,0x10
     392:	00e79a23          	sh	a4,20(a5)
     396:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     398:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     39c:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     39e:	832d                	srli	a4,a4,0xb
     3a0:	8b05                	andi	a4,a4,1
     3a2:	cf01                	beqz	a4,3ba <i2c_error+0x90>
     3a4:	0147d703          	lhu	a4,20(a5)
     3a8:	76fd                	lui	a3,0xfffff
     3aa:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     3ae:	0742                	slli	a4,a4,0x10
     3b0:	8341                	srli	a4,a4,0x10
     3b2:	8f75                	and	a4,a4,a3
     3b4:	00e79a23          	sh	a4,20(a5)
     3b8:	4511                	li	a0,4
}
     3ba:	8082                	ret

000003bc <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     3bc:	415c                	lw	a5,4(a0)
     3be:	e7b1                	bnez	a5,40a <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     3c0:	00855783          	lhu	a5,8(a0)
     3c4:	40005737          	lui	a4,0x40005
     3c8:	0786                	slli	a5,a5,0x1
     3ca:	0fe7f793          	andi	a5,a5,254
     3ce:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3d2:	6789                	lui	a5,0x2
     3d4:	71078793          	addi	a5,a5,1808 # 2710 <SIN_LUT2+0x44>
	return (status & status_mask) == status_mask; 
     3d8:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3dc:	c6f1ac23          	sw	a5,-904(gp) # 20000074 <_i2c_timeout>
     3e0:	4501                	li	a0,0
     3e2:	c7818693          	addi	a3,gp,-904 # 20000074 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     3e6:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     3ea:	08260613          	addi	a2,a2,130 # 70082 <rv003usb.c.2a5f0f89+0x6843d>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     3ee:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     3f2:	01071593          	slli	a1,a4,0x10
     3f6:	41835703          	lhu	a4,1048(t1)
     3fa:	81c1                	srli	a1,a1,0x10
     3fc:	0742                	slli	a4,a4,0x10
     3fe:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     400:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     402:	00c71663          	bne	a4,a2,40e <i2c_send_addr_write+0x52>
     406:	c111                	beqz	a0,40a <i2c_send_addr_write+0x4e>
     408:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     40a:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     40c:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     40e:	17fd                	addi	a5,a5,-1
     410:	4505                	li	a0,1
     412:	fff1                	bnez	a5,3ee <i2c_send_addr_write+0x32>
{
     414:	1151                	addi	sp,sp,-12
     416:	c406                	sw	ra,8(sp)
     418:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     41c:	3739                	jal	32a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     41e:	e111                	bnez	a0,422 <i2c_send_addr_write+0x66>
     420:	4515                	li	a0,5
}
     422:	40a2                	lw	ra,8(sp)
     424:	0131                	addi	sp,sp,12
     426:	8082                	ret

00000428 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     428:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     42a:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     42c:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     42e:	71078793          	addi	a5,a5,1808 # 2710 <SIN_LUT2+0x44>
     432:	c6f1ac23          	sw	a5,-904(gp) # 20000074 <_i2c_timeout>
{
     436:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     438:	c002                	sw	zero,0(sp)
     43a:	c202                	sw	zero,4(sp)
     43c:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     440:	4601                	li	a2,0
     442:	c7818713          	addi	a4,gp,-904 # 20000074 <_i2c_timeout>
     446:	400055b7          	lui	a1,0x40005
     44a:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     44e:	8a89                	andi	a3,a3,2
     450:	e689                	bnez	a3,45a <i2c_ping+0x32>
     452:	c211                	beqz	a2,456 <i2c_ping+0x2e>
     454:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
     456:	4501                	li	a0,0
     458:	a809                	j	46a <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     45a:	17fd                	addi	a5,a5,-1
     45c:	4605                	li	a2,1
     45e:	f7f5                	bnez	a5,44a <i2c_ping+0x22>
     460:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
     464:	35d9                	jal	32a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     466:	e111                	bnez	a0,46a <i2c_ping+0x42>
     468:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     46a:	40005737          	lui	a4,0x40005
     46e:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     472:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     476:	07c2                	slli	a5,a5,0x10
     478:	83c1                	srli	a5,a5,0x10
     47a:	1007e793          	ori	a5,a5,256
     47e:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     482:	00030737          	lui	a4,0x30
     486:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     488:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     48c:	01079693          	slli	a3,a5,0x10
     490:	4185d783          	lhu	a5,1048(a1)
     494:	82c1                	srli	a3,a3,0x10
     496:	07c2                	slli	a5,a5,0x10
     498:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     49a:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     49c:	fee796e3          	bne	a5,a4,488 <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     4a0:	e119                	bnez	a0,4a6 <i2c_ping+0x7e>
     4a2:	850a                	mv	a0,sp
     4a4:	3f21                	jal	3bc <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     4a6:	40005737          	lui	a4,0x40005
     4aa:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     4ae:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     4b0:	07c2                	slli	a5,a5,0x10
     4b2:	83c1                	srli	a5,a5,0x10
     4b4:	2007e793          	ori	a5,a5,512
     4b8:	40f71023          	sh	a5,1024(a4)
}
     4bc:	0161                	addi	sp,sp,24
     4be:	8082                	ret

000004c0 <i2c_write_raw.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4c0:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     4c2:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4c4:	71078793          	addi	a5,a5,1808 # 2710 <SIN_LUT2+0x44>
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     4c8:	c626                	sw	s1,12(sp)
     4ca:	c22e                	sw	a1,4(sp)
     4cc:	ca06                	sw	ra,20(sp)
     4ce:	c822                	sw	s0,16(sp)
     4d0:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4d2:	c6f1ac23          	sw	a5,-904(gp) # 20000074 <_i2c_timeout>
     4d6:	4601                	li	a2,0
     4d8:	c7818493          	addi	s1,gp,-904 # 20000074 <_i2c_timeout>
     4dc:	400055b7          	lui	a1,0x40005
     4e0:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     4e4:	8a89                	andi	a3,a3,2
     4e6:	e6bd                	bnez	a3,554 <i2c_write_raw.constprop.0+0x94>
     4e8:	c211                	beqz	a2,4ec <i2c_write_raw.constprop.0+0x2c>
     4ea:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4ec:	400056b7          	lui	a3,0x40005
     4f0:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     4f4:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4f8:	07c2                	slli	a5,a5,0x10
     4fa:	83c1                	srli	a5,a5,0x10
     4fc:	1007e793          	ori	a5,a5,256
     500:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     504:	000306b7          	lui	a3,0x30
     508:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     50a:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     50e:	01079613          	slli	a2,a5,0x10
     512:	4185d783          	lhu	a5,1048(a1)
     516:	8241                	srli	a2,a2,0x10
     518:	07c2                	slli	a5,a5,0x10
     51a:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     51c:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     51e:	fed796e3          	bne	a5,a3,50a <i2c_write_raw.constprop.0+0x4a>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     522:	c2018513          	addi	a0,gp,-992 # 2000001c <dev_ssd1306>
     526:	3d59                	jal	3bc <i2c_send_addr_write>
     528:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     52a:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
     52c:	e91d                	bnez	a0,562 <i2c_write_raw.constprop.0+0xa2>
		while(cbyte < len)
     52e:	4792                	lw	a5,4(sp)
     530:	02f67963          	bgeu	a2,a5,562 <i2c_write_raw.constprop.0+0xa2>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     534:	6689                	lui	a3,0x2
     536:	71068693          	addi	a3,a3,1808 # 2710 <SIN_LUT2+0x44>
     53a:	c094                	sw	a3,0(s1)
     53c:	4501                	li	a0,0
     53e:	40005337          	lui	t1,0x40005
     542:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     546:	0805f593          	andi	a1,a1,128
     54a:	c5b9                	beqz	a1,598 <i2c_write_raw.constprop.0+0xd8>
     54c:	c111                	beqz	a0,550 <i2c_write_raw.constprop.0+0x90>
     54e:	c094                	sw	a3,0(s1)
     550:	4501                	li	a0,0
     552:	a8a9                	j	5ac <i2c_write_raw.constprop.0+0xec>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     554:	17fd                	addi	a5,a5,-1
     556:	4605                	li	a2,1
     558:	f7c1                	bnez	a5,4e0 <i2c_write_raw.constprop.0+0x20>
	i2c_err_t i2c_err = i2c_error();
     55a:	3bc1                	jal	32a <i2c_error>
     55c:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     55e:	e111                	bnez	a0,562 <i2c_write_raw.constprop.0+0xa2>
     560:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     562:	6689                	lui	a3,0x2
     564:	71068693          	addi	a3,a3,1808 # 2710 <SIN_LUT2+0x44>
	return (status & status_mask) == status_mask; 
     568:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     56c:	c094                	sw	a3,0(s1)
     56e:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     570:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     574:	08458593          	addi	a1,a1,132 # 70084 <rv003usb.c.2a5f0f89+0x6843f>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     578:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     57c:	01061513          	slli	a0,a2,0x10
     580:	4182d603          	lhu	a2,1048(t0)
     584:	8141                	srli	a0,a0,0x10
     586:	0642                	slli	a2,a2,0x10
     588:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     58a:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     58c:	04b61363          	bne	a2,a1,5d2 <i2c_write_raw.constprop.0+0x112>
     590:	04030a63          	beqz	t1,5e4 <i2c_write_raw.constprop.0+0x124>
     594:	c094                	sw	a3,0(s1)
     596:	a0b9                	j	5e4 <i2c_write_raw.constprop.0+0x124>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     598:	16fd                	addi	a3,a3,-1
     59a:	4505                	li	a0,1
     59c:	f2dd                	bnez	a3,542 <i2c_write_raw.constprop.0+0x82>
     59e:	c432                	sw	a2,8(sp)
     5a0:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     5a4:	3359                	jal	32a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     5a6:	4622                	lw	a2,8(sp)
     5a8:	e111                	bnez	a0,5ac <i2c_write_raw.constprop.0+0xec>
     5aa:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     5ac:	4782                	lw	a5,0(sp)
     5ae:	00c786b3          	add	a3,a5,a2
     5b2:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     5b6:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     5b8:	400056b7          	lui	a3,0x40005
     5bc:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     5c0:	0ff67613          	andi	a2,a2,255
     5c4:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     5c6:	e501                	bnez	a0,5ce <i2c_write_raw.constprop.0+0x10e>
     5c8:	338d                	jal	32a <i2c_error>
     5ca:	4622                	lw	a2,8(sp)
     5cc:	d12d                	beqz	a0,52e <i2c_write_raw.constprop.0+0x6e>
     5ce:	842a                	mv	s0,a0
     5d0:	bf49                	j	562 <i2c_write_raw.constprop.0+0xa2>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     5d2:	16fd                	addi	a3,a3,-1
     5d4:	4305                	li	t1,1
     5d6:	f2cd                	bnez	a3,578 <i2c_write_raw.constprop.0+0xb8>
     5d8:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     5dc:	33b9                	jal	32a <i2c_error>
     5de:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     5e0:	e111                	bnez	a0,5e4 <i2c_write_raw.constprop.0+0x124>
     5e2:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5e4:	400056b7          	lui	a3,0x40005
     5e8:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     5ec:	40d2                	lw	ra,20(sp)
     5ee:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5f0:	0742                	slli	a4,a4,0x10
}
     5f2:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5f4:	8341                	srli	a4,a4,0x10
     5f6:	20076713          	ori	a4,a4,512
     5fa:	40e69023          	sh	a4,1024(a3)
}
     5fe:	44b2                	lw	s1,12(sp)
     600:	0161                	addi	sp,sp,24
     602:	8082                	ret

00000604 <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     604:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     606:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     60a:	4589                	li	a1,2
     60c:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     60e:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     610:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     614:	3575                	jal	4c0 <i2c_write_raw.constprop.0>
}
     616:	40b2                	lw	ra,12(sp)
     618:	0ff57513          	andi	a0,a0,255
     61c:	0141                	addi	sp,sp,16
     61e:	8082                	ret

00000620 <Neo_render_colorFlashing.constprop.0>:

    return led_arr[ledIdx].packed;
}

uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
    if (systick_handleTimeout(&fr->ref_time, fr->frame_duration)) {
     620:	c2c18693          	addi	a3,gp,-980 # 20000028 <leds_frame>
	uint32_t now = millis();
     624:	c881a603          	lw	a2,-888(gp) # 20000084 <systick_millis>
	if (now - *ref_time > duration) {
     628:	4a9c                	lw	a5,16(a3)
     62a:	42cc                	lw	a1,4(a3)
uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
     62c:	fc410113          	addi	sp,sp,-60
     630:	dc06                	sw	ra,56(sp)
     632:	da22                	sw	s0,52(sp)
     634:	d826                	sw	s1,48(sp)
     636:	c82a                	sw	a0,16(sp)
	if (now - *ref_time > duration) {
     638:	40f607b3          	sub	a5,a2,a5
     63c:	0cf5fc63          	bgeu	a1,a5,714 <Neo_render_colorFlashing.constprop.0+0xf4>
     640:	c2c18493          	addi	s1,gp,-980 # 20000028 <leds_frame>
    return ani->colors[ani->ref_index];
     644:	c5818593          	addi	a1,gp,-936 # 20000054 <color_ani>
        fr->frame_value += 1;
     648:	0094c783          	lbu	a5,9(s1)
    return ani->colors[ani->ref_index];
     64c:	0055c703          	lbu	a4,5(a1)
		*ref_time = now;
     650:	c890                	sw	a2,16(s1)
    return ani->colors[ani->ref_index];
     652:	4190                	lw	a2,0(a1)
        fr->frame_value += 1;
     654:	0785                	addi	a5,a5,1
     656:	0ff7f793          	andi	a5,a5,255
    return ani->colors[ani->ref_index];
     65a:	00271513          	slli	a0,a4,0x2
        fr->frame_value += 1;
     65e:	00f484a3          	sb	a5,9(s1)
    return ani->colors[ani->ref_index];
     662:	962a                	add	a2,a2,a0
     664:	c43a                	sw	a4,8(sp)
     666:	00064703          	lbu	a4,0(a2)
     66a:	420c                	lw	a1,0(a2)
        RGB_t color = animation_currentColor(ani);

        for (int i=0; i < NR_LEDS; i++) {
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     66c:	00879513          	slli	a0,a5,0x8
    return ani->colors[ani->ref_index];
     670:	c63a                	sw	a4,12(sp)
     672:	00164703          	lbu	a4,1(a2)
     676:	d62e                	sw	a1,44(sp)
     678:	d02e                	sw	a1,32(sp)
     67a:	c23a                	sw	a4,4(sp)
     67c:	00264703          	lbu	a4,2(a2)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     680:	06400593          	li	a1,100
     684:	8d1d                	sub	a0,a0,a5
     686:	ca3e                	sw	a5,20(sp)
    return ani->colors[ani->ref_index];
     688:	c03a                	sw	a4,0(sp)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     68a:	343d                	jal	b8 <__divsi3>
     68c:	0ff57593          	andi	a1,a0,255
     690:	6509                	lui	a0,0x2
     692:	6cc50513          	addi	a0,a0,1740 # 26cc <SIN_LUT2>
     696:	952e                	add	a0,a0,a1
     698:	00054583          	lbu	a1,0(a0)
     69c:	47d2                	lw	a5,20(sp)
     69e:	0f418693          	addi	a3,gp,244 # 200004f0 <led_arr>
     6a2:	c5818413          	addi	s0,gp,-936 # 20000054 <color_ani>
     6a6:	ce3e                	sw	a5,28(sp)
     6a8:	47b2                	lw	a5,12(sp)
     6aa:	cc36                	sw	a3,24(sp)
     6ac:	ca2e                	sw	a1,20(sp)
     6ae:	02f10023          	sb	a5,32(sp)
     6b2:	4792                	lw	a5,4(sp)
     6b4:	02f100a3          	sb	a5,33(sp)
     6b8:	4782                	lw	a5,0(sp)
     6ba:	02f10123          	sb	a5,34(sp)
     6be:	5502                	lw	a0,32(sp)
     6c0:	d22a                	sw	a0,36(sp)
     6c2:	4532                	lw	a0,12(sp)
     6c4:	3af1                	jal	a0 <__mulsi3>
     6c6:	8521                	srai	a0,a0,0x8
     6c8:	45d2                	lw	a1,20(sp)
     6ca:	02a10223          	sb	a0,36(sp)
     6ce:	4512                	lw	a0,4(sp)
     6d0:	3ac1                	jal	a0 <__mulsi3>
     6d2:	8521                	srai	a0,a0,0x8
     6d4:	45d2                	lw	a1,20(sp)
     6d6:	02a102a3          	sb	a0,37(sp)
     6da:	4502                	lw	a0,0(sp)
     6dc:	32d1                	jal	a0 <__mulsi3>
     6de:	8521                	srai	a0,a0,0x8
     6e0:	02a10323          	sb	a0,38(sp)
     6e4:	46e2                	lw	a3,24(sp)
     6e6:	5512                	lw	a0,36(sp)
        for (int i=0; i < NR_LEDS; i++) {
     6e8:	10c18613          	addi	a2,gp,268 # 20000508 <printBuff>
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     6ec:	c288                	sw	a0,0(a3)
        for (int i=0; i < NR_LEDS; i++) {
     6ee:	0691                	addi	a3,a3,4
     6f0:	45d2                	lw	a1,20(sp)
     6f2:	47f2                	lw	a5,28(sp)
     6f4:	fad619e3          	bne	a2,a3,6a6 <Neo_render_colorFlashing.constprop.0+0x86>
        }

        if (fr->frame_value >= 100) {
     6f8:	06300693          	li	a3,99
     6fc:	00f6fc63          	bgeu	a3,a5,714 <Neo_render_colorFlashing.constprop.0+0xf4>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     700:	47a2                	lw	a5,8(sp)
     702:	00444583          	lbu	a1,4(s0)
            fr->frame_value = 0;
     706:	000484a3          	sb	zero,9(s1)
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     70a:	00178513          	addi	a0,a5,1
     70e:	3409                	jal	110 <__modsi3>
     710:	00a402a3          	sb	a0,5(s0)

            animation_step(ani);
        }
    }

    return led_arr[ledIdx].packed;
     714:	47c2                	lw	a5,16(sp)
}
     716:	50e2                	lw	ra,56(sp)
     718:	5452                	lw	s0,52(sp)
    return led_arr[ledIdx].packed;
     71a:	00279513          	slli	a0,a5,0x2
     71e:	0f418793          	addi	a5,gp,244 # 200004f0 <led_arr>
     722:	953e                	add	a0,a0,a5
}
     724:	4108                	lw	a0,0(a0)
     726:	54c2                	lw	s1,48(sp)
     728:	03c10113          	addi	sp,sp,60
     72c:	8082                	ret

0000072e <WS2812FillBuffSec.constprop.0>:
#define R16_SPI_TOTAL_CNT R16_SPI0_TOTAL_CNT
#define R8_SPI_INT_FLAG R8_SPI0_INT_FLAG
#endif
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     72e:	f9810113          	addi	sp,sp,-104
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };
#endif

	int i;
	uint16_t * end = ptr + numhalfwords;
     732:	03050793          	addi	a5,a0,48
     736:	d03e                	sw	a5,32(sp)
	int ledcount = WS2812LEDs;
     738:	c741a783          	lw	a5,-908(gp) # 20000070 <WS2812LEDs>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     73c:	cea6                	sw	s1,92(sp)
     73e:	d286                	sw	ra,100(sp)
	int ledcount = WS2812LEDs;
     740:	d23e                	sw	a5,36(sp)
	int place = WS2812LEDPlace;
     742:	c7018713          	addi	a4,gp,-912 # 2000006c <WS2812LEDPlace>
     746:	4304                	lw	s1,0(a4)
     748:	c7018793          	addi	a5,gp,-912 # 2000006c <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     74c:	d0a2                	sw	s0,96(sp)
     74e:	ce2a                	sw	a0,28(sp)
     750:	dc2e                	sw	a1,56(sp)
	int place = WS2812LEDPlace;
     752:	c02a                	sw	a0,0(sp)
     754:	de3e                	sw	a5,60(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
     756:	0604c863          	bltz	s1,7c6 <WS2812FillBuffSec.constprop.0+0x98>
     75a:	c226                	sw	s1,4(sp)
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
     75c:	5782                	lw	a5,32(sp)
     75e:	4702                	lw	a4,0(sp)
     760:	4492                	lw	s1,4(sp)
     762:	06e78663          	beq	a5,a4,7ce <WS2812FillBuffSec.constprop.0+0xa0>
	{
		if( place >= ledcount )
     766:	5792                	lw	a5,36(sp)
     768:	4712                	lw	a4,4(sp)
     76a:	06f74a63          	blt	a4,a5,7de <WS2812FillBuffSec.constprop.0+0xb0>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
     76e:	47f2                	lw	a5,28(sp)
     770:	4581                	li	a1,0
     772:	03078613          	addi	a2,a5,48
     776:	4782                	lw	a5,0(sp)
     778:	8e1d                	sub	a2,a2,a5
     77a:	853e                	mv	a0,a5
     77c:	0cb000ef          	jal	ra,1046 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
     780:	57e2                	lw	a5,56(sp)
     782:	c7b1                	beqz	a5,7ce <WS2812FillBuffSec.constprop.0+0xa0>
			{
				if( place == ledcount )
     784:	5792                	lw	a5,36(sp)
     786:	4712                	lw	a4,4(sp)
     788:	00e79a63          	bne	a5,a4,79c <WS2812FillBuffSec.constprop.0+0x6e>
				{
					// Take the DMA out of circular mode and let it expire.
#if defined(CH57x) || defined(CH58x) || defined(CH59x)
					R8_SPI_INTER_EN &= ~RB_SPI_IE_DMA_END;  // Disable DMA end interrupt
#else
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
     78c:	40020737          	lui	a4,0x40020
     790:	5b1c                	lw	a5,48(a4)
     792:	fdf7f793          	andi	a5,a5,-33
     796:	db1c                	sw	a5,48(a4)
#endif
					WS2812BLEDInUse = 0;
     798:	c601a623          	sw	zero,-916(gp) # 20000068 <WS2812BLEDInUse>
				}
				place++;
     79c:	4792                	lw	a5,4(sp)
     79e:	00178493          	addi	s1,a5,1
     7a2:	a035                	j	7ce <WS2812FillBuffSec.constprop.0+0xa0>
		(*ptr++) = 0;
     7a4:	4782                	lw	a5,0(sp)
		place++;
     7a6:	0485                	addi	s1,s1,1
		(*ptr++) = 0;
     7a8:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
     7ac:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
     7b0:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
     7b4:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
     7b8:	00079423          	sh	zero,8(a5)
     7bc:	07b1                	addi	a5,a5,12
     7be:	c03e                	sw	a5,0(sp)
		(*ptr++) = 0;
     7c0:	fe079f23          	sh	zero,-2(a5)
     7c4:	bf49                	j	756 <WS2812FillBuffSec.constprop.0+0x28>
	while( place < 0 && ptr != end )
     7c6:	5782                	lw	a5,32(sp)
     7c8:	4702                	lw	a4,0(sp)
     7ca:	fce79de3          	bne	a5,a4,7a4 <WS2812FillBuffSec.constprop.0+0x76>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
     7ce:	57f2                	lw	a5,60(sp)
}
     7d0:	5096                	lw	ra,100(sp)
     7d2:	5406                	lw	s0,96(sp)
	WS2812LEDPlace = place;
     7d4:	c384                	sw	s1,0(a5)
}
     7d6:	44f6                	lw	s1,92(sp)
     7d8:	06810113          	addi	sp,sp,104
     7dc:	8082                	ret
    color_ani.ref_index = 0;
    memset(led_arr, 0, sizeof(led_arr));
}

uint32_t WS2812BLEDCallback(int ledIdx){
    leds_frame.frame_duration = 70;
     7de:	c2c18793          	addi	a5,gp,-980 # 20000028 <leds_frame>
     7e2:	04600713          	li	a4,70
     7e6:	c3d8                	sw	a4,4(a5)
     7e8:	c541c703          	lbu	a4,-940(gp) # 20000050 <Neo_LedCmd>
     7ec:	4691                	li	a3,4
     7ee:	c2c18413          	addi	s0,gp,-980 # 20000028 <leds_frame>
     7f2:	177d                	addi	a4,a4,-1
     7f4:	0ff77713          	andi	a4,a4,255
     7f8:	42e6e063          	bltu	a3,a4,c18 <WS2812FillBuffSec.constprop.0+0x4ea>
     7fc:	6689                	lui	a3,0x2
     7fe:	070a                	slli	a4,a4,0x2
     800:	3e468693          	addi	a3,a3,996 # 23e4 <string0+0x4>
     804:	9736                	add	a4,a4,a3
     806:	4318                	lw	a4,0(a4)
     808:	8702                	jr	a4
	uint32_t now = millis();
     80a:	c881a683          	lw	a3,-888(gp) # 20000084 <systick_millis>
	if (now - *ref_time > duration) {
     80e:	4818                	lw	a4,16(s0)
     810:	04600613          	li	a2,70
     814:	40e68733          	sub	a4,a3,a4
     818:	0f418313          	addi	t1,gp,244 # 200004f0 <led_arr>
     81c:	04e67f63          	bgeu	a2,a4,87a <WS2812FillBuffSec.constprop.0+0x14c>
		*ref_time = now;
     820:	c814                	sw	a3,16(s0)
     822:	0f418493          	addi	s1,gp,244 # 200004f0 <led_arr>
        for (int i=0; i < NR_LEDS; i++) {
     826:	4681                	li	a3,0
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     828:	00e44703          	lbu	a4,14(s0)
    return ani->colors[(index/steps) % ani->num_colors];
     82c:	4595                	li	a1,5
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     82e:	c636                	sw	a3,12(sp)
     830:	00d70533          	add	a0,a4,a3
    return ani->colors[(index/steps) % ani->num_colors];
     834:	0ff57513          	andi	a0,a0,255
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     838:	c43a                	sw	a4,8(sp)
    return ani->colors[(index/steps) % ani->num_colors];
     83a:	887ff0ef          	jal	ra,c0 <__hidden___udivsi3>
     83e:	c5818613          	addi	a2,gp,-936 # 20000054 <color_ani>
     842:	00464583          	lbu	a1,4(a2)
     846:	0ff57513          	andi	a0,a0,255
     84a:	30d9                	jal	110 <__modsi3>
     84c:	c5818613          	addi	a2,gp,-936 # 20000054 <color_ani>
     850:	420c                	lw	a1,0(a2)
     852:	050a                	slli	a0,a0,0x2
        for (int i=0; i < NR_LEDS; i++) {
     854:	46b2                	lw	a3,12(sp)
    return ani->colors[(index/steps) % ani->num_colors];
     856:	952e                	add	a0,a0,a1
     858:	410c                	lw	a1,0(a0)
        for (int i=0; i < NR_LEDS; i++) {
     85a:	0685                	addi	a3,a3,1
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     85c:	c08c                	sw	a1,0(s1)
    return ani->colors[(index/steps) % ani->num_colors];
     85e:	c2ae                	sw	a1,68(sp)
     860:	c8ae                	sw	a1,80(sp)
        for (int i=0; i < NR_LEDS; i++) {
     862:	4299                	li	t0,6
     864:	4722                	lw	a4,8(sp)
     866:	0491                	addi	s1,s1,4
     868:	0f418313          	addi	t1,gp,244 # 200004f0 <led_arr>
     86c:	fa569ee3          	bne	a3,t0,828 <WS2812FillBuffSec.constprop.0+0xfa>
        fr->ref_index += fr->frame_step;
     870:	00844683          	lbu	a3,8(s0)
     874:	9736                	add	a4,a4,a3
     876:	00e40723          	sb	a4,14(s0)
    return led_arr[ledIdx].packed;
     87a:	4792                	lw	a5,4(sp)
     87c:	078a                	slli	a5,a5,0x2
     87e:	933e                	add	t1,t1,a5
     880:	00032503          	lw	a0,0(t1)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     884:	00b55713          	srli	a4,a0,0xb
     888:	6789                	lui	a5,0x2
     88a:	7cc78793          	addi	a5,a5,1996 # 27cc <bitquartets.5>
     88e:	8b79                	andi	a4,a4,30
     890:	973e                	add	a4,a4,a5
     892:	4682                	lw	a3,0(sp)
     894:	00075703          	lhu	a4,0(a4) # 40020000 <_eusrstack+0x2001f800>
     898:	00e69023          	sh	a4,0(a3)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     89c:	00755713          	srli	a4,a0,0x7
     8a0:	8b79                	andi	a4,a4,30
     8a2:	973e                	add	a4,a4,a5
     8a4:	00075703          	lhu	a4,0(a4)
     8a8:	00e69123          	sh	a4,2(a3)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
     8ac:	00355713          	srli	a4,a0,0x3
     8b0:	8b79                	andi	a4,a4,30
     8b2:	973e                	add	a4,a4,a5
     8b4:	00075703          	lhu	a4,0(a4)
     8b8:	00e69223          	sh	a4,4(a3)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
     8bc:	00f57713          	andi	a4,a0,15
     8c0:	0706                	slli	a4,a4,0x1
     8c2:	973e                	add	a4,a4,a5
     8c4:	00075703          	lhu	a4,0(a4)
     8c8:	00e69323          	sh	a4,6(a3)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     8cc:	01355713          	srli	a4,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     8d0:	813d                	srli	a0,a0,0xf
     8d2:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     8d4:	8b79                	andi	a4,a4,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     8d6:	953e                	add	a0,a0,a5
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     8d8:	973e                	add	a4,a4,a5
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     8da:	00055783          	lhu	a5,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     8de:	00075703          	lhu	a4,0(a4)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     8e2:	00f69523          	sh	a5,10(a3)
		ptr += 6;
     8e6:	00c68793          	addi	a5,a3,12
     8ea:	c03e                	sw	a5,0(sp)
     8ec:	4792                	lw	a5,4(sp)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     8ee:	00e69423          	sh	a4,8(a3)
     8f2:	0785                	addi	a5,a5,1
     8f4:	c23e                	sw	a5,4(sp)
     8f6:	b59d                	j	75c <WS2812FillBuffSec.constprop.0+0x2e>
	uint32_t now = millis();
     8f8:	c881a603          	lw	a2,-888(gp) # 20000084 <systick_millis>
	if (now - *ref_time > duration) {
     8fc:	4818                	lw	a4,16(s0)
     8fe:	04600593          	li	a1,70
     902:	40e60733          	sub	a4,a2,a4
     906:	0f418693          	addi	a3,gp,244 # 200004f0 <led_arr>
     90a:	06e5fc63          	bgeu	a1,a4,982 <WS2812FillBuffSec.constprop.0+0x254>
		*ref_time = now;
     90e:	c810                	sw	a2,16(s0)
        led_arr[fr->prev_index] = COLOR_BLACK;       // Turn off previous LED
     910:	00d44703          	lbu	a4,13(s0)
    return ani->colors[ani->ref_index];
     914:	c5818613          	addi	a2,gp,-936 # 20000054 <color_ani>
     918:	00564303          	lbu	t1,5(a2)
     91c:	420c                	lw	a1,0(a2)
        led_arr[fr->prev_index] = COLOR_BLACK;       // Turn off previous LED
     91e:	070a                	slli	a4,a4,0x2
     920:	9736                	add	a4,a4,a3
     922:	00072023          	sw	zero,0(a4)
    return ani->colors[ani->ref_index];
     926:	00231513          	slli	a0,t1,0x2
        led_arr[fr->ref_index] = animation_currentColor(ani);
     92a:	00e44703          	lbu	a4,14(s0)
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     92e:	00844483          	lbu	s1,8(s0)
    return ani->colors[ani->ref_index];
     932:	95aa                	add	a1,a1,a0
     934:	4188                	lw	a0,0(a1)
        led_arr[fr->ref_index] = animation_currentColor(ani);
     936:	00271593          	slli	a1,a4,0x2
        fr->prev_index = fr->ref_index;
     93a:	00e406a3          	sb	a4,13(s0)
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     93e:	9726                	add	a4,a4,s1
        led_arr[fr->ref_index] = animation_currentColor(ani);
     940:	95b6                	add	a1,a1,a3
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     942:	0ff77493          	andi	s1,a4,255
        led_arr[fr->ref_index] = animation_currentColor(ani);
     946:	c188                	sw	a0,0(a1)
    return ani->colors[ani->ref_index];
     948:	c4aa                	sw	a0,72(sp)
     94a:	c8aa                	sw	a0,80(sp)
        fr->ref_index = next_idx % NR_LEDS;
     94c:	4599                	li	a1,6
     94e:	8526                	mv	a0,s1
    return ani->colors[ani->ref_index];
     950:	c41a                	sw	t1,8(sp)
        fr->ref_index = next_idx % NR_LEDS;
     952:	f9aff0ef          	jal	ra,ec <__umodsi3>
        if (next_idx >= NR_LEDS) animation_step(ani);
     956:	0f418693          	addi	a3,gp,244 # 200004f0 <led_arr>
        fr->ref_index = next_idx % NR_LEDS;
     95a:	00a40723          	sb	a0,14(s0)
        if (next_idx >= NR_LEDS) animation_step(ani);
     95e:	4795                	li	a5,5
     960:	4322                	lw	t1,8(sp)
     962:	c5818613          	addi	a2,gp,-936 # 20000054 <color_ani>
     966:	0097fe63          	bgeu	a5,s1,982 <WS2812FillBuffSec.constprop.0+0x254>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     96a:	00464583          	lbu	a1,4(a2)
     96e:	00130513          	addi	a0,t1,1
     972:	f9eff0ef          	jal	ra,110 <__modsi3>
     976:	c5818613          	addi	a2,gp,-936 # 20000054 <color_ani>
     97a:	00a602a3          	sb	a0,5(a2)
     97e:	0f418693          	addi	a3,gp,244 # 200004f0 <led_arr>
    return led_arr[ledIdx].packed;
     982:	4792                	lw	a5,4(sp)
     984:	078a                	slli	a5,a5,0x2
     986:	96be                	add	a3,a3,a5
     988:	4288                	lw	a0,0(a3)
     98a:	bded                	j	884 <WS2812FillBuffSec.constprop.0+0x156>
	uint32_t now = millis();
     98c:	c881a603          	lw	a2,-888(gp) # 20000084 <systick_millis>
	if (now - *ref_time > duration) {
     990:	4818                	lw	a4,16(s0)
     992:	04600593          	li	a1,70
     996:	40e60733          	sub	a4,a2,a4
     99a:	16e5f763          	bgeu	a1,a4,b08 <WS2812FillBuffSec.constprop.0+0x3da>
     99e:	0f418793          	addi	a5,gp,244 # 200004f0 <led_arr>
    return ani->colors[ani->ref_index];
     9a2:	c63e                	sw	a5,12(sp)
     9a4:	c5818793          	addi	a5,gp,-936 # 20000054 <color_ani>
		*ref_time = now;
     9a8:	c810                	sw	a2,16(s0)
        for (int i = 0; i < NR_LEDS; i++) {
     9aa:	c402                	sw	zero,8(sp)
    return ani->colors[ani->ref_index];
     9ac:	c83e                	sw	a5,16(sp)
            uint8_t diff = fr->ref_index - i;
     9ae:	00e44783          	lbu	a5,14(s0)
     9b2:	d43e                	sw	a5,40(sp)
    return ani->colors[ani->ref_index];
     9b4:	47c2                	lw	a5,16(sp)
     9b6:	0057c783          	lbu	a5,5(a5)
     9ba:	00279693          	slli	a3,a5,0x2
     9be:	da3e                	sw	a5,52(sp)
     9c0:	47c2                	lw	a5,16(sp)
     9c2:	4398                	lw	a4,0(a5)
     9c4:	9736                	add	a4,a4,a3
     9c6:	00174783          	lbu	a5,1(a4)
     9ca:	00074683          	lbu	a3,0(a4)
     9ce:	ca3e                	sw	a5,20(sp)
     9d0:	00274783          	lbu	a5,2(a4)
            uint8_t diff = fr->ref_index - i;
     9d4:	4722                	lw	a4,8(sp)
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     9d6:	8536                	mv	a0,a3
    return ani->colors[ani->ref_index];
     9d8:	cc3e                	sw	a5,24(sp)
            uint8_t diff = fr->ref_index - i;
     9da:	57a2                	lw	a5,40(sp)
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     9dc:	d636                	sw	a3,44(sp)
            uint8_t diff = fr->ref_index - i;
     9de:	40e784b3          	sub	s1,a5,a4
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     9e2:	0ff4f493          	andi	s1,s1,255
     9e6:	85a6                	mv	a1,s1
     9e8:	eb8ff0ef          	jal	ra,a0 <__mulsi3>
     9ec:	00151713          	slli	a4,a0,0x1
     9f0:	972a                	add	a4,a4,a0
     9f2:	0712                	slli	a4,a4,0x4
     9f4:	972a                	add	a4,a4,a0
     9f6:	f9c00593          	li	a1,-100
     9fa:	853a                	mv	a0,a4
     9fc:	c0ba                	sw	a4,64(sp)
     9fe:	ebaff0ef          	jal	ra,b8 <__divsi3>
     a02:	56b2                	lw	a3,44(sp)
     a04:	d602                	sw	zero,44(sp)
     a06:	9536                	add	a0,a0,a3
     a08:	d836                	sw	a3,48(sp)
     a0a:	00a05d63          	blez	a0,a24 <WS2812FillBuffSec.constprop.0+0x2f6>
     a0e:	4706                	lw	a4,64(sp)
     a10:	06400593          	li	a1,100
     a14:	853a                	mv	a0,a4
     a16:	ea2ff0ef          	jal	ra,b8 <__divsi3>
     a1a:	56c2                	lw	a3,48(sp)
     a1c:	8e89                	sub	a3,a3,a0
     a1e:	0ff6f793          	andi	a5,a3,255
     a22:	d63e                	sw	a5,44(sp)
     a24:	45d2                	lw	a1,20(sp)
     a26:	8526                	mv	a0,s1
     a28:	e78ff0ef          	jal	ra,a0 <__mulsi3>
     a2c:	00151713          	slli	a4,a0,0x1
     a30:	972a                	add	a4,a4,a0
     a32:	0712                	slli	a4,a4,0x4
     a34:	972a                	add	a4,a4,a0
     a36:	f9c00593          	li	a1,-100
     a3a:	853a                	mv	a0,a4
     a3c:	c0ba                	sw	a4,64(sp)
     a3e:	e7aff0ef          	jal	ra,b8 <__divsi3>
     a42:	47d2                	lw	a5,20(sp)
     a44:	d802                	sw	zero,48(sp)
     a46:	953e                	add	a0,a0,a5
     a48:	00a05e63          	blez	a0,a64 <WS2812FillBuffSec.constprop.0+0x336>
     a4c:	4706                	lw	a4,64(sp)
     a4e:	06400593          	li	a1,100
     a52:	853a                	mv	a0,a4
     a54:	e64ff0ef          	jal	ra,b8 <__divsi3>
     a58:	47d2                	lw	a5,20(sp)
     a5a:	40a78533          	sub	a0,a5,a0
     a5e:	0ff57793          	andi	a5,a0,255
     a62:	d83e                	sw	a5,48(sp)
     a64:	45e2                	lw	a1,24(sp)
     a66:	8526                	mv	a0,s1
     a68:	e38ff0ef          	jal	ra,a0 <__mulsi3>
     a6c:	00151493          	slli	s1,a0,0x1
     a70:	94aa                	add	s1,s1,a0
     a72:	0492                	slli	s1,s1,0x4
     a74:	94aa                	add	s1,s1,a0
     a76:	f9c00593          	li	a1,-100
     a7a:	8526                	mv	a0,s1
     a7c:	e3cff0ef          	jal	ra,b8 <__divsi3>
     a80:	47e2                	lw	a5,24(sp)
     a82:	4681                	li	a3,0
     a84:	953e                	add	a0,a0,a5
     a86:	00a05c63          	blez	a0,a9e <WS2812FillBuffSec.constprop.0+0x370>
     a8a:	06400593          	li	a1,100
     a8e:	8526                	mv	a0,s1
     a90:	e28ff0ef          	jal	ra,b8 <__divsi3>
     a94:	47e2                	lw	a5,24(sp)
     a96:	40a78533          	sub	a0,a5,a0
     a9a:	0ff57693          	andi	a3,a0,255
     a9e:	47a2                	lw	a5,8(sp)
     aa0:	00279713          	slli	a4,a5,0x2
     aa4:	0f418793          	addi	a5,gp,244 # 200004f0 <led_arr>
     aa8:	973e                	add	a4,a4,a5
     aaa:	00072023          	sw	zero,0(a4)
     aae:	47b2                	lw	a5,12(sp)
     ab0:	5732                	lw	a4,44(sp)
     ab2:	00d78123          	sb	a3,2(a5)
     ab6:	00e78023          	sb	a4,0(a5)
     aba:	5742                	lw	a4,48(sp)
     abc:	00e780a3          	sb	a4,1(a5)
        for (int i = 0; i < NR_LEDS; i++) {
     ac0:	47a2                	lw	a5,8(sp)
     ac2:	4719                	li	a4,6
     ac4:	0785                	addi	a5,a5,1
     ac6:	c43e                	sw	a5,8(sp)
     ac8:	47b2                	lw	a5,12(sp)
     aca:	0791                	addi	a5,a5,4
     acc:	c63e                	sw	a5,12(sp)
     ace:	47a2                	lw	a5,8(sp)
     ad0:	ece79fe3          	bne	a5,a4,9ae <WS2812FillBuffSec.constprop.0+0x280>
        uint8_t next_increment = fr->ref_index + fr->frame_step;
     ad4:	57a2                	lw	a5,40(sp)
     ad6:	00844483          	lbu	s1,8(s0)
        fr->ref_index = next_increment % NR_LEDS;
     ada:	4599                	li	a1,6
        uint8_t next_increment = fr->ref_index + fr->frame_step;
     adc:	94be                	add	s1,s1,a5
     ade:	0ff4f493          	andi	s1,s1,255
        fr->ref_index = next_increment % NR_LEDS;
     ae2:	8526                	mv	a0,s1
     ae4:	e08ff0ef          	jal	ra,ec <__umodsi3>
     ae8:	00a40723          	sb	a0,14(s0)
        if (next_increment >= NR_LEDS) {
     aec:	4795                	li	a5,5
     aee:	0097fd63          	bgeu	a5,s1,b08 <WS2812FillBuffSec.constprop.0+0x3da>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     af2:	47c2                	lw	a5,16(sp)
     af4:	0047c583          	lbu	a1,4(a5)
     af8:	57d2                	lw	a5,52(sp)
     afa:	00178513          	addi	a0,a5,1
     afe:	e12ff0ef          	jal	ra,110 <__modsi3>
     b02:	47c2                	lw	a5,16(sp)
     b04:	00a782a3          	sb	a0,5(a5)
    return led_arr[ledIdx].packed;
     b08:	4792                	lw	a5,4(sp)
     b0a:	0f418713          	addi	a4,gp,244 # 200004f0 <led_arr>
     b0e:	078a                	slli	a5,a5,0x2
    return led_arr[ledIdx].packed;
     b10:	97ba                	add	a5,a5,a4
     b12:	4388                	lw	a0,0(a5)
     b14:	bb85                	j	884 <WS2812FillBuffSec.constprop.0+0x156>
	uint32_t now = millis();
     b16:	c881a683          	lw	a3,-888(gp) # 20000084 <systick_millis>
	if (now - *ref_time > duration) {
     b1a:	4818                	lw	a4,16(s0)
            break;
        case NEO_COLOR_FADE:
            return Neo_render_colorFade(&leds_frame, &color_ani, ledIdx);
            break;
        case NEO_SOLO_COLOR_FADE:
            leds_frame.frame_duration = 10;
     b1c:	4629                	li	a2,10
     b1e:	0f418793          	addi	a5,gp,244 # 200004f0 <led_arr>
     b22:	c050                	sw	a2,4(s0)
	if (now - *ref_time > duration) {
     b24:	40e68733          	sub	a4,a3,a4
     b28:	c63e                	sw	a5,12(sp)
     b2a:	0ee67163          	bgeu	a2,a4,c0c <WS2812FillBuffSec.constprop.0+0x4de>
    return ani->colors[ani->ref_index];
     b2e:	c5818493          	addi	s1,gp,-936 # 20000054 <color_ani>
        fr->frame_value += 3;
     b32:	00944703          	lbu	a4,9(s0)
    return ani->colors[ani->ref_index];
     b36:	0054c783          	lbu	a5,5(s1)
		*ref_time = now;
     b3a:	c814                	sw	a3,16(s0)
    return ani->colors[ani->ref_index];
     b3c:	4094                	lw	a3,0(s1)
        fr->frame_value += 3;
     b3e:	070d                	addi	a4,a4,3
     b40:	0ff77713          	andi	a4,a4,255
    return ani->colors[ani->ref_index];
     b44:	00279593          	slli	a1,a5,0x2
        fr->frame_value += 3;
     b48:	00e404a3          	sb	a4,9(s0)
    return ani->colors[ani->ref_index];
     b4c:	96ae                	add	a3,a3,a1
     b4e:	428c                	lw	a1,0(a3)
     b50:	0016c303          	lbu	t1,1(a3)
     b54:	0006c283          	lbu	t0,0(a3)
     b58:	0026c683          	lbu	a3,2(a3)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     b5c:	00871513          	slli	a0,a4,0x8
     b60:	8d19                	sub	a0,a0,a4
    return ani->colors[ani->ref_index];
     b62:	ccae                	sw	a1,88(sp)
     b64:	c6ae                	sw	a1,76(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     b66:	c8ae                	sw	a1,80(sp)
     b68:	06400593          	li	a1,100
    return ani->colors[ani->ref_index];
     b6c:	c43e                	sw	a5,8(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     b6e:	ca3a                	sw	a4,20(sp)
    return ani->colors[ani->ref_index];
     b70:	cc36                	sw	a3,24(sp)
     b72:	d41a                	sw	t1,40(sp)
     b74:	d616                	sw	t0,44(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     b76:	d42ff0ef          	jal	ra,b8 <__divsi3>
     b7a:	0ff57593          	andi	a1,a0,255
     b7e:	6509                	lui	a0,0x2
     b80:	6cc50513          	addi	a0,a0,1740 # 26cc <SIN_LUT2>
     b84:	52b2                	lw	t0,44(sp)
     b86:	952e                	add	a0,a0,a1
     b88:	00054583          	lbu	a1,0(a0)
     b8c:	8516                	mv	a0,t0
     b8e:	c82e                	sw	a1,16(sp)
     b90:	d10ff0ef          	jal	ra,a0 <__mulsi3>
     b94:	5322                	lw	t1,40(sp)
     b96:	45c2                	lw	a1,16(sp)
     b98:	8521                	srai	a0,a0,0x8
     b9a:	04a10823          	sb	a0,80(sp)
     b9e:	851a                	mv	a0,t1
     ba0:	d00ff0ef          	jal	ra,a0 <__mulsi3>
     ba4:	46e2                	lw	a3,24(sp)
     ba6:	45c2                	lw	a1,16(sp)
     ba8:	8521                	srai	a0,a0,0x8
     baa:	04a108a3          	sb	a0,81(sp)
     bae:	8536                	mv	a0,a3
     bb0:	cf0ff0ef          	jal	ra,a0 <__mulsi3>
     bb4:	8521                	srai	a0,a0,0x8
     bb6:	00e44683          	lbu	a3,14(s0)
     bba:	47b2                	lw	a5,12(sp)
     bbc:	04a10923          	sb	a0,82(sp)
     bc0:	4546                	lw	a0,80(sp)
     bc2:	00269593          	slli	a1,a3,0x2
        if (fr->frame_value >= 100) {
     bc6:	4752                	lw	a4,20(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     bc8:	95be                	add	a1,a1,a5
     bca:	c188                	sw	a0,0(a1)
     bcc:	caaa                	sw	a0,84(sp)
        if (fr->frame_value >= 100) {
     bce:	06300593          	li	a1,99
     bd2:	02e5fd63          	bgeu	a1,a4,c0c <WS2812FillBuffSec.constprop.0+0x4de>
            uint8_t next_idx = fr->ref_index + fr->frame_step;
     bd6:	00844703          	lbu	a4,8(s0)
            fr->ref_index = next_idx % NR_LEDS;
     bda:	4599                	li	a1,6
            fr->frame_value = 0;
     bdc:	000404a3          	sb	zero,9(s0)
            uint8_t next_idx = fr->ref_index + fr->frame_step;
     be0:	9736                	add	a4,a4,a3
     be2:	0ff77713          	andi	a4,a4,255
            fr->ref_index = next_idx % NR_LEDS;
     be6:	853a                	mv	a0,a4
     be8:	c83a                	sw	a4,16(sp)
     bea:	d02ff0ef          	jal	ra,ec <__umodsi3>
            if (next_idx >= NR_LEDS) {
     bee:	4742                	lw	a4,16(sp)
            fr->ref_index = next_idx % NR_LEDS;
     bf0:	00a40723          	sb	a0,14(s0)
            if (next_idx >= NR_LEDS) {
     bf4:	4795                	li	a5,5
     bf6:	00e7fb63          	bgeu	a5,a4,c0c <WS2812FillBuffSec.constprop.0+0x4de>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     bfa:	47a2                	lw	a5,8(sp)
     bfc:	0044c583          	lbu	a1,4(s1)
     c00:	00178513          	addi	a0,a5,1
     c04:	d0cff0ef          	jal	ra,110 <__modsi3>
     c08:	00a482a3          	sb	a0,5(s1)
    return led_arr[ledIdx].packed;
     c0c:	4792                	lw	a5,4(sp)
     c0e:	4732                	lw	a4,12(sp)
     c10:	078a                	slli	a5,a5,0x2
     c12:	bdfd                	j	b10 <WS2812FillBuffSec.constprop.0+0x3e2>
            return Neo_render_soloColorFade(&leds_frame, &color_ani, ledIdx);
            break;
        case NEO_COLOR_FLASHING:
            leds_frame.frame_duration = 10;
     c14:	4729                	li	a4,10
     c16:	c058                	sw	a4,4(s0)
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
            break;
        default:
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
     c18:	4512                	lw	a0,4(sp)
     c1a:	3419                	jal	620 <Neo_render_colorFlashing.constprop.0>
     c1c:	b1a5                	j	884 <WS2812FillBuffSec.constprop.0+0x156>

00000c1e <internal_handle_input.constprop.0>:
void handle_debug_input( int numbytes, uint8_t * data ) __attribute__((weak));
void handle_debug_input( int numbytes, uint8_t * data ) { (void)numbytes; (void)data; }

static void internal_handle_input( volatile uint32_t * dmdata0 )
{
	uint32_t dmd0 = *dmdata0;
     c1e:	e00007b7          	lui	a5,0xe0000
     c22:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 && bytes < 16 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
     c26:	8082                	ret

00000c28 <_write.constprop.0>:
//     status word = 0xcx = timed out.
// declare as weak to allow overriding.
WEAK int _write(int fd, const char *buf, int size)
{
	(void)fd;
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c28:	e0000737          	lui	a4,0xe0000
     c2c:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     c30:	1111                	addi	sp,sp,-28
     c32:	cc06                	sw	ra,24(sp)
     c34:	ca22                	sw	s0,20(sp)
     c36:	c826                	sw	s1,16(sp)
     c38:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c3a:	0c07f793          	andi	a5,a5,192
     c3e:	0c000693          	li	a3,192
     c42:	0cd78863          	beq	a5,a3,d12 <_write.constprop.0+0xea>

	char buffer[4] = { 0 };
     c46:	c602                	sw	zero,12(sp)
     c48:	842e                	mv	s0,a1
	int place = 0;
	uint32_t lastdmd;
	uint32_t timeout = FUNCONF_DEBUGPRINTF_TIMEOUT; // Give up after ~120ms

	if( size == 0 )
     c4a:	e5f1                	bnez	a1,d16 <_write.constprop.0+0xee>
	{
		lastdmd = (*DMDATA0);
     c4c:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     c50:	c789                	beqz	a5,c5a <_write.constprop.0+0x32>
     c52:	0807f793          	andi	a5,a5,128
     c56:	e391                	bnez	a5,c5a <_write.constprop.0+0x32>
     c58:	37d9                	jal	c1e <internal_handle_input.constprop.0>

		//buf += tosend;
		place += tosend;
	}
	return size;
}
     c5a:	40e2                	lw	ra,24(sp)
     c5c:	8522                	mv	a0,s0
     c5e:	4452                	lw	s0,20(sp)
     c60:	44c2                	lw	s1,16(sp)
     c62:	0171                	addi	sp,sp,28
     c64:	8082                	ret
		int tosend = size - place;
     c66:	409405b3          	sub	a1,s0,s1
     c6a:	469d                	li	a3,7
     c6c:	872e                	mv	a4,a1
     c6e:	00b6d363          	bge	a3,a1,c74 <_write.constprop.0+0x4c>
     c72:	471d                	li	a4,7
     c74:	001006b7          	lui	a3,0x100
     c78:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     c7a:	e0000537          	lui	a0,0xe0000
     c7e:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     c82:	0f450313          	addi	t1,a0,244
     c86:	08067293          	andi	t0,a2,128
     c8a:	06029c63          	bnez	t0,d02 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     c8e:	c611                	beqz	a2,c9a <_write.constprop.0+0x72>
     c90:	c43a                	sw	a4,8(sp)
     c92:	c22e                	sw	a1,4(sp)
     c94:	3769                	jal	c1e <internal_handle_input.constprop.0>
     c96:	4722                	lw	a4,8(sp)
     c98:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     c9a:	4689                	li	a3,2
     c9c:	4601                	li	a2,0
     c9e:	00b6d463          	bge	a3,a1,ca6 <_write.constprop.0+0x7e>
     ca2:	ffd70613          	addi	a2,a4,-3
     ca6:	4782                	lw	a5,0(sp)
     ca8:	00348593          	addi	a1,s1,3
     cac:	0068                	addi	a0,sp,12
     cae:	95be                	add	a1,a1,a5
     cb0:	c23a                	sw	a4,4(sp)
     cb2:	211d                	jal	10d8 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     cb4:	4632                	lw	a2,12(sp)
     cb6:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     cb8:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     cba:	e00006b7          	lui	a3,0xe0000
     cbe:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     cc2:	458d                	li	a1,3
     cc4:	00978633          	add	a2,a5,s1
		t = 0;
     cc8:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     cca:	00064303          	lbu	t1,0(a2)
     cce:	0685                	addi	a3,a3,1
     cd0:	007c                	addi	a5,sp,12
     cd2:	00d78533          	add	a0,a5,a3
     cd6:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     cda:	00d70563          	beq	a4,a3,ce4 <_write.constprop.0+0xbc>
     cde:	0605                	addi	a2,a2,1
     ce0:	feb695e3          	bne	a3,a1,cca <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     ce4:	00470693          	addi	a3,a4,4
     ce8:	f806e693          	ori	a3,a3,-128
     cec:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     cf0:	4632                	lw	a2,12(sp)
     cf2:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     cf6:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     cf8:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     cfc:	f684c5e3          	blt	s1,s0,c66 <_write.constprop.0+0x3e>
     d00:	bfa9                	j	c5a <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     d02:	16fd                	addi	a3,a3,-1
     d04:	fead                	bnez	a3,c7e <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     d06:	00032783          	lw	a5,0(t1)
     d0a:	0c07e793          	ori	a5,a5,192
     d0e:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     d12:	4401                	li	s0,0
     d14:	b799                	j	c5a <_write.constprop.0+0x32>
	if( size == 0 )
     d16:	4481                	li	s1,0
     d18:	b7d5                	j	cfc <_write.constprop.0+0xd4>

00000d1a <__puts_uart>:
{
     d1a:	1151                	addi	sp,sp,-12
     d1c:	c222                	sw	s0,4(sp)
     d1e:	c406                	sw	ra,8(sp)
     d20:	842e                	mv	s0,a1
	_write( 0, s, len );
     d22:	3719                	jal	c28 <_write.constprop.0>
}
     d24:	40a2                	lw	ra,8(sp)
     d26:	8522                	mv	a0,s0
     d28:	4412                	lw	s0,4(sp)
     d2a:	0131                	addi	sp,sp,12
     d2c:	8082                	ret

00000d2e <handle_reset>:
	asm volatile( "\n\
     d2e:	1ffff197          	auipc	gp,0x1ffff
     d32:	6ce18193          	addi	gp,gp,1742 # 200003fc <__global_pointer$>
     d36:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     d3a:	6509                	lui	a0,0x2
     d3c:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x610>
     d40:	30051073          	csrw	mstatus,a0
     d44:	468d                	li	a3,3
     d46:	fffff517          	auipc	a0,0xfffff
     d4a:	2ba50513          	addi	a0,a0,698 # 0 <InterruptVector>
     d4e:	8d55                	or	a0,a0,a3
     d50:	30551073          	csrw	mtvec,a0
asm volatile(
     d54:	c6c18513          	addi	a0,gp,-916 # 20000068 <WS2812BLEDInUse>
     d58:	22818593          	addi	a1,gp,552 # 20000624 <_ebss>
     d5c:	4601                	li	a2,0
     d5e:	00b55663          	bge	a0,a1,d6a <handle_reset+0x3c>
     d62:	c110                	sw	a2,0(a0)
     d64:	0511                	addi	a0,a0,4
     d66:	feb54ee3          	blt	a0,a1,d62 <handle_reset+0x34>
     d6a:	00002517          	auipc	a0,0x2
     d6e:	bca50513          	addi	a0,a0,-1078 # 2934 <_data_lma>
     d72:	c0418593          	addi	a1,gp,-1020 # 20000000 <button1.1>
     d76:	c6c18613          	addi	a2,gp,-916 # 20000068 <WS2812BLEDInUse>
     d7a:	00c58863          	beq	a1,a2,d8a <handle_reset+0x5c>
     d7e:	4114                	lw	a3,0(a0)
     d80:	c194                	sw	a3,0(a1)
     d82:	0511                	addi	a0,a0,4
     d84:	0591                	addi	a1,a1,4
     d86:	fec59ae3          	bne	a1,a2,d7a <handle_reset+0x4c>
	SysTick->CTLR = 5;
     d8a:	e000f7b7          	lui	a5,0xe000f
     d8e:	4715                	li	a4,5
     d90:	c398                	sw	a4,0(a5)
asm volatile(
     d92:	6785                	lui	a5,0x1
     d94:	27078793          	addi	a5,a5,624 # 1270 <main>
     d98:	34179073          	csrw	mepc,a5
     d9c:	30200073          	mret

00000da0 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     da0:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     da4:	c70ff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     da8:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     dac:	c68ff0ef          	jal	ra,214 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     db0:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     db4:	c60ff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     db8:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     dbc:	c58ff0ef          	jal	ra,214 <PrintHex>
	while( (*DMDATA0) & 0x80 );
     dc0:	e0000737          	lui	a4,0xe0000
     dc4:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     dc8:	0f470693          	addi	a3,a4,244
     dcc:	0807f793          	andi	a5,a5,128
     dd0:	fbf5                	bnez	a5,dc4 <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     dd2:	6785                	lui	a5,0x1
     dd4:	a8578793          	addi	a5,a5,-1403 # a85 <WS2812FillBuffSec.constprop.0+0x357>
     dd8:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     dda:	e0000737          	lui	a4,0xe0000
     dde:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     de2:	0f470693          	addi	a3,a4,244
     de6:	0807f793          	andi	a5,a5,128
     dea:	fbf5                	bnez	a5,dde <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     dec:	aaaab7b7          	lui	a5,0xaaaab
     df0:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     df4:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     df6:	a001                	j	df6 <ADC1_2_IRQHandler+0x56>

00000df8 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     df8:	40021737          	lui	a4,0x40021
     dfc:	471c                	lw	a5,8(a4)
     dfe:	008006b7          	lui	a3,0x800
     e02:	8fd5                	or	a5,a5,a3
     e04:	c71c                	sw	a5,8(a4)

00000e06 <strlen>:
{
     e06:	87aa                	mv	a5,a0
	for (; *s; s++);
     e08:	0007c703          	lbu	a4,0(a5)
     e0c:	e701                	bnez	a4,e14 <strlen+0xe>
}
     e0e:	40a78533          	sub	a0,a5,a0
     e12:	8082                	ret
	for (; *s; s++);
     e14:	0785                	addi	a5,a5,1
     e16:	bfcd                	j	e08 <strlen+0x2>

00000e18 <mini_vpprintf>:
{
     e18:	fa410113          	addi	sp,sp,-92
     e1c:	c8a6                	sw	s1,80(sp)
     e1e:	cc86                	sw	ra,88(sp)
     e20:	caa2                	sw	s0,84(sp)
     e22:	c02a                	sw	a0,0(sp)
     e24:	c22e                	sw	a1,4(sp)
     e26:	84b2                	mv	s1,a2
     e28:	87b6                	mv	a5,a3
	int n = 0;
     e2a:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     e2c:	0004c703          	lbu	a4,0(s1)
     e30:	00148413          	addi	s0,s1,1
     e34:	00e10fa3          	sb	a4,31(sp)
     e38:	eb01                	bnez	a4,e48 <mini_vpprintf+0x30>
}
     e3a:	40e6                	lw	ra,88(sp)
     e3c:	4456                	lw	s0,84(sp)
     e3e:	4542                	lw	a0,16(sp)
     e40:	44c6                	lw	s1,80(sp)
     e42:	05c10113          	addi	sp,sp,92
     e46:	8082                	ret
		if (ch!='%') {
     e48:	02500693          	li	a3,37
     e4c:	00d70f63          	beq	a4,a3,e6a <mini_vpprintf+0x52>
     e50:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     e52:	4612                	lw	a2,4(sp)
     e54:	4782                	lw	a5,0(sp)
     e56:	4585                	li	a1,1
     e58:	01f10513          	addi	a0,sp,31
     e5c:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     e5e:	84a2                	mv	s1,s0
		n = n + len;
     e60:	47c2                	lw	a5,16(sp)
     e62:	97aa                	add	a5,a5,a0
     e64:	c83e                	sw	a5,16(sp)
     e66:	47a2                	lw	a5,8(sp)
     e68:	b7d1                	j	e2c <mini_vpprintf+0x14>
			ch=*(fmt++);
     e6a:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     e6e:	03000613          	li	a2,48
			ch=*(fmt++);
     e72:	00248713          	addi	a4,s1,2
     e76:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     e7a:	03000413          	li	s0,48
     e7e:	08c69063          	bne	a3,a2,efe <mini_vpprintf+0xe6>
				ch=*(fmt++);
     e82:	84ba                	mv	s1,a4
     e84:	4601                	li	a2,0
     e86:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     e88:	4525                	li	a0,9
     e8a:	a811                	j	e9e <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     e8c:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     e90:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     e92:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     e94:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     e98:	0706                	slli	a4,a4,0x1
     e9a:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     e9c:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     e9e:	fd068593          	addi	a1,a3,-48 # 7fffd0 <rv003usb.c.2a5f0f89+0x7f838b>
     ea2:	0ff5f313          	andi	t1,a1,255
     ea6:	fe6573e3          	bgeu	a0,t1,e8c <mini_vpprintf+0x74>
     eaa:	c219                	beqz	a2,eb0 <mini_vpprintf+0x98>
     eac:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     eb0:	c63a                	sw	a4,12(sp)
     eb2:	4661                	li	a2,24
     eb4:	00e65363          	bge	a2,a4,eba <mini_vpprintf+0xa2>
     eb8:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     eba:	06c00593          	li	a1,108
			char l = 0;
     ebe:	4601                	li	a2,0
			if (ch == 'l') {
     ec0:	00b69863          	bne	a3,a1,ed0 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     ec4:	0004c683          	lbu	a3,0(s1)
				l = 1;
     ec8:	4605                	li	a2,1
				ch=*(fmt++);
     eca:	0485                	addi	s1,s1,1
     ecc:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     ed0:	01f14683          	lbu	a3,31(sp)
     ed4:	06400593          	li	a1,100
     ed8:	06b68363          	beq	a3,a1,f3e <mini_vpprintf+0x126>
     edc:	02d5e463          	bltu	a1,a3,f04 <mini_vpprintf+0xec>
     ee0:	05800713          	li	a4,88
     ee4:	0ae68263          	beq	a3,a4,f88 <mini_vpprintf+0x170>
     ee8:	06300713          	li	a4,99
     eec:	0ce68063          	beq	a3,a4,fac <mini_vpprintf+0x194>
     ef0:	d6a9                	beqz	a3,e3a <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     ef2:	4612                	lw	a2,4(sp)
     ef4:	c43e                	sw	a5,8(sp)
     ef6:	4585                	li	a1,1
     ef8:	01f10513          	addi	a0,sp,31
     efc:	a88d                	j	f6e <mini_vpprintf+0x156>
			char pad_char = ' ';
     efe:	02000413          	li	s0,32
     f02:	b741                	j	e82 <mini_vpprintf+0x6a>
			switch (ch) {
     f04:	07500593          	li	a1,117
     f08:	02b68b63          	beq	a3,a1,f3e <mini_vpprintf+0x126>
     f0c:	07800613          	li	a2,120
     f10:	06c68c63          	beq	a3,a2,f88 <mini_vpprintf+0x170>
     f14:	07300613          	li	a2,115
     f18:	fcc69de3          	bne	a3,a2,ef2 <mini_vpprintf+0xda>
     f1c:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     f1e:	00478713          	addi	a4,a5,4
     f22:	439c                	lw	a5,0(a5)
     f24:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     f26:	853e                	mv	a0,a5
     f28:	ca3e                	sw	a5,20(sp)
     f2a:	3df1                	jal	e06 <strlen>
					if (pad_to > 0) {
     f2c:	4762                	lw	a4,24(sp)
     f2e:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     f30:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     f32:	cb51                	beqz	a4,fc6 <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     f34:	46b2                	lw	a3,12(sp)
     f36:	1838                	addi	a4,sp,56
     f38:	8622                	mv	a2,s0
     f3a:	853e                	mv	a0,a5
     f3c:	a025                	j	f64 <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f3e:	00478713          	addi	a4,a5,4
     f42:	c43a                	sw	a4,8(sp)
					if(l) {
     f44:	ca05                	beqz	a2,f74 <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f46:	f8b68693          	addi	a3,a3,-117
     f4a:	1018                	addi	a4,sp,32
     f4c:	0016b693          	seqz	a3,a3
     f50:	4388                	lw	a0,0(a5)
     f52:	4601                	li	a2,0
     f54:	45a9                	li	a1,10
     f56:	b16ff0ef          	jal	ra,26c <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     f5a:	46b2                	lw	a3,12(sp)
     f5c:	1838                	addi	a4,sp,56
     f5e:	8622                	mv	a2,s0
     f60:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     f62:	1008                	addi	a0,sp,32
     f64:	9d2ff0ef          	jal	ra,136 <mini_pad>
					len = puts(bf, len, buf);
     f68:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     f6a:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     f6c:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     f6e:	4782                	lw	a5,0(sp)
     f70:	9782                	jalr	a5
					break;
     f72:	b5fd                	j	e60 <mini_vpprintf+0x48>
						if(ch == 'u') {
     f74:	07500713          	li	a4,117
     f78:	00e69563          	bne	a3,a4,f82 <mini_vpprintf+0x16a>
	if (radix > 16)
     f7c:	1018                	addi	a4,sp,32
     f7e:	4685                	li	a3,1
     f80:	bfc1                	j	f50 <mini_vpprintf+0x138>
     f82:	1018                	addi	a4,sp,32
     f84:	4681                	li	a3,0
     f86:	b7e9                	j	f50 <mini_vpprintf+0x138>
					if(l) {
     f88:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f8a:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     f8e:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f92:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     f94:	4685                	li	a3,1
     f96:	1018                	addi	a4,sp,32
     f98:	00163613          	seqz	a2,a2
     f9c:	45c1                	li	a1,16
     f9e:	aceff0ef          	jal	ra,26c <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     fa2:	46b2                	lw	a3,12(sp)
     fa4:	85aa                	mv	a1,a0
     fa6:	1838                	addi	a4,sp,56
     fa8:	8622                	mv	a2,s0
     faa:	bf65                	j	f62 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     fac:	00478713          	addi	a4,a5,4
     fb0:	439c                	lw	a5,0(a5)
     fb2:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     fb4:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     fb6:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     fba:	1838                	addi	a4,sp,56
     fbc:	8622                	mv	a2,s0
     fbe:	4585                	li	a1,1
     fc0:	01f10513          	addi	a0,sp,31
     fc4:	b745                	j	f64 <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     fc6:	4612                	lw	a2,4(sp)
     fc8:	853e                	mv	a0,a5
     fca:	b755                	j	f6e <mini_vpprintf+0x156>

00000fcc <printf>:
{
     fcc:	fdc10113          	addi	sp,sp,-36
     fd0:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     fd2:	862a                	mv	a2,a0
     fd4:	6505                	lui	a0,0x1
{
     fd6:	c82e                	sw	a1,16(sp)
     fd8:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     fda:	4581                	li	a1,0
	va_start( args, format );
     fdc:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     fde:	d1a50513          	addi	a0,a0,-742 # d1a <__puts_uart>
{
     fe2:	c606                	sw	ra,12(sp)
     fe4:	ce3a                	sw	a4,28(sp)
     fe6:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     fe8:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     fea:	353d                	jal	e18 <mini_vpprintf>
}
     fec:	40b2                	lw	ra,12(sp)
     fee:	02410113          	addi	sp,sp,36
     ff2:	8082                	ret

00000ff4 <mini_vsnprintf>:
{
     ff4:	1121                	addi	sp,sp,-24
     ff6:	ca06                	sw	ra,20(sp)
     ff8:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
     ffa:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
     ffc:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
     ffe:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
    1000:	c185                	beqz	a1,1020 <mini_vsnprintf+0x2c>
    1002:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
    1004:	858a                	mv	a1,sp
    1006:	e111                	bnez	a0,100a <mini_vsnprintf+0x16>
    1008:	4581                	li	a1,0
    100a:	1d200513          	li	a0,466
    100e:	3529                	jal	e18 <mini_vpprintf>
	if(buffer == (void*) 0) {
    1010:	c401                	beqz	s0,1018 <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
    1012:	4512                	lw	a0,4(sp)
    1014:	4782                	lw	a5,0(sp)
    1016:	8d1d                	sub	a0,a0,a5
}
    1018:	40d2                	lw	ra,20(sp)
    101a:	4442                	lw	s0,16(sp)
    101c:	0161                	addi	sp,sp,24
    101e:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
    1020:	4401                	li	s0,0
    1022:	b7dd                	j	1008 <mini_vsnprintf+0x14>

00001024 <sprintf>:
{
    1024:	1101                	addi	sp,sp,-32
    1026:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1028:	862e                	mv	a2,a1
    102a:	800005b7          	lui	a1,0x80000
{
    102e:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1030:	fff5c593          	not	a1,a1
	va_start( args, format );
    1034:	0814                	addi	a3,sp,16
{
    1036:	c606                	sw	ra,12(sp)
    1038:	cc3a                	sw	a4,24(sp)
    103a:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
    103c:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    103e:	3f5d                	jal	ff4 <mini_vsnprintf>
}
    1040:	40b2                	lw	ra,12(sp)
    1042:	6105                	addi	sp,sp,32
    1044:	8082                	ret

00001046 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
    1046:	962a                	add	a2,a2,a0
    1048:	87aa                	mv	a5,a0
    104a:	00c79363          	bne	a5,a2,1050 <memset+0xa>
    104e:	8082                	ret
    1050:	00b78023          	sb	a1,0(a5)
    1054:	0785                	addi	a5,a5,1
    1056:	bfd5                	j	104a <memset+0x4>

00001058 <strcpy>:
{
    1058:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
    105a:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
    105e:	00e78023          	sb	a4,0(a5)
    1062:	e311                	bnez	a4,1066 <strcpy+0xe>
}
    1064:	8082                	ret
	for (; (*d=*s); s++, d++);
    1066:	0585                	addi	a1,a1,1
    1068:	0785                	addi	a5,a5,1
    106a:	bfc5                	j	105a <strcpy+0x2>

0000106c <strncpy>:
{
    106c:	4781                	li	a5,0
	for (; n && (*d=*s); n--, s++, d++);
    106e:	00f60c63          	beq	a2,a5,1086 <strncpy+0x1a>
    1072:	00f58733          	add	a4,a1,a5
    1076:	00074703          	lbu	a4,0(a4) # 40021000 <_eusrstack+0x20020800>
    107a:	00f506b3          	add	a3,a0,a5
    107e:	0785                	addi	a5,a5,1
    1080:	00e68023          	sb	a4,0(a3)
    1084:	f76d                	bnez	a4,106e <strncpy+0x2>
}
    1086:	8082                	ret

00001088 <mngI2c_load_printBuff.constprop.0>:
uint32_t lock_printTime = 0;
uint8_t printBuff_idx = 0;
PrintBuff_t printBuff[PRINT_BUFF_SIZE] = { 0 };
uint8_t flag_printBuff_data = 1;					// set to 1 to allow initial print

void mngI2c_load_printBuff(const char *str, uint8_t line_idx) {
    1088:	1151                	addi	sp,sp,-12
    108a:	c222                	sw	s0,4(sp)
	flag_printBuff_data = 1;
	PrintBuff_t *buff = &printBuff[printBuff_idx];
    108c:	c8018413          	addi	s0,gp,-896 # 2000007c <printBuff_idx>
void mngI2c_load_printBuff(const char *str, uint8_t line_idx) {
    1090:	c026                	sw	s1,0(sp)
	PrintBuff_t *buff = &printBuff[printBuff_idx];
    1092:	00044483          	lbu	s1,0(s0)
	flag_printBuff_data = 1;
    1096:	4705                	li	a4,1
    1098:	c6e18023          	sb	a4,-928(gp) # 2000005c <flag_printBuff_data>
	buff->line_num = line_idx + 1;
    109c:	00149793          	slli	a5,s1,0x1
    10a0:	97a6                	add	a5,a5,s1
    10a2:	078a                	slli	a5,a5,0x2
    10a4:	97a6                	add	a5,a5,s1
    10a6:	10c18713          	addi	a4,gp,268 # 20000508 <printBuff>
    10aa:	0786                	slli	a5,a5,0x1
void mngI2c_load_printBuff(const char *str, uint8_t line_idx) {
    10ac:	c406                	sw	ra,8(sp)
	buff->line_num = line_idx + 1;
    10ae:	97ba                	add	a5,a5,a4
    10b0:	0505                	addi	a0,a0,1
    10b2:	00a78ca3          	sb	a0,25(a5)
	strncpy(buff->str, str, SSD1306_STR_SIZE);
    10b6:	4665                	li	a2,25
    10b8:	20c18593          	addi	a1,gp,524 # 20000608 <str_output>
    10bc:	853e                	mv	a0,a5
    10be:	377d                	jal	106c <strncpy>
	// buff->str[24] = '\0';
	printBuff_idx = (printBuff_idx + 1) % PRINT_BUFF_SIZE;
    10c0:	00148513          	addi	a0,s1,1
    10c4:	4595                	li	a1,5
    10c6:	84aff0ef          	jal	ra,110 <__modsi3>
}
    10ca:	40a2                	lw	ra,8(sp)
	printBuff_idx = (printBuff_idx + 1) % PRINT_BUFF_SIZE;
    10cc:	00a40023          	sb	a0,0(s0)
}
    10d0:	4412                	lw	s0,4(sp)
    10d2:	4482                	lw	s1,0(sp)
    10d4:	0131                	addi	sp,sp,12
    10d6:	8082                	ret

000010d8 <memcpy>:
{
    10d8:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
    10da:	00f61363          	bne	a2,a5,10e0 <memcpy+0x8>
}
    10de:	8082                	ret
	for (; n; n--) *d++ = *s++;
    10e0:	00f58733          	add	a4,a1,a5
    10e4:	00074683          	lbu	a3,0(a4)
    10e8:	00f50733          	add	a4,a0,a5
    10ec:	0785                	addi	a5,a5,1
    10ee:	00d70023          	sb	a3,0(a4)
    10f2:	b7e5                	j	10da <memcpy+0x2>

000010f4 <ssd1306_data.isra.0>:
uint8_t ssd1306_data(uint8_t *data, int sz) {
    10f4:	7179                	addi	sp,sp,-48
    10f6:	d422                	sw	s0,40(sp)
	pkt[0] = 0x40;
    10f8:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
    10fc:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
    10fe:	862e                	mv	a2,a1
    1100:	85aa                	mv	a1,a0
    1102:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1106:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    1108:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    110c:	37f1                	jal	10d8 <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    110e:	00140593          	addi	a1,s0,1
    1112:	850a                	mv	a0,sp
    1114:	bacff0ef          	jal	ra,4c0 <i2c_write_raw.constprop.0>
}
    1118:	50b2                	lw	ra,44(sp)
    111a:	5422                	lw	s0,40(sp)
    111c:	6145                	addi	sp,sp,48
    111e:	8082                	ret

00001120 <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
    1120:	1151                	addi	sp,sp,-12
    1122:	c222                	sw	s0,4(sp)
    1124:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1126:	02100513          	li	a0,33
void ssd1306_print_str_at(
    112a:	c406                	sw	ra,8(sp)
    112c:	c026                	sw	s1,0(sp)
    112e:	84ae                	mv	s1,a1
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1130:	cd4ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1134:	4501                	li	a0,0
    1136:	cceff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    113a:	07f00513          	li	a0,127
    113e:	cc6ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1142:	02200513          	li	a0,34
    1146:	cbeff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    114a:	8526                	mv	a0,s1
    114c:	cb8ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1150:	8526                	mv	a0,s1
    1152:	cb2ff0ef          	jal	ra,604 <ssd1306_cmd>
    1156:	44e5                	li	s1,25
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i < SSD1306_STR_SIZE; i++) {
		if (*str) {
    1158:	00044783          	lbu	a5,0(s0)
    115c:	c78d                	beqz	a5,1186 <ssd1306_print_str_at.constprop.0+0x66>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    115e:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    1160:	0ff7f793          	andi	a5,a5,255
    1164:	6709                	lui	a4,0x2
    1166:	00279693          	slli	a3,a5,0x2
    116a:	4f070513          	addi	a0,a4,1264 # 24f0 <FONT_7x5>
    116e:	97b6                	add	a5,a5,a3
    1170:	4595                	li	a1,5
    1172:	953e                	add	a0,a0,a5
    1174:	3741                	jal	10f4 <ssd1306_data.isra.0>
			str++;
    1176:	0405                	addi	s0,s0,1
	for (int i=0; i < SSD1306_STR_SIZE; i++) {
    1178:	14fd                	addi	s1,s1,-1
    117a:	fcf9                	bnez	s1,1158 <ssd1306_print_str_at.constprop.0+0x38>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
    117c:	40a2                	lw	ra,8(sp)
    117e:	4412                	lw	s0,4(sp)
    1180:	4482                	lw	s1,0(sp)
    1182:	0131                	addi	sp,sp,12
    1184:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    1186:	6789                	lui	a5,0x2
    1188:	4595                	li	a1,5
    118a:	4f078513          	addi	a0,a5,1264 # 24f0 <FONT_7x5>
    118e:	379d                	jal	10f4 <ssd1306_data.isra.0>
    1190:	b7e5                	j	1178 <ssd1306_print_str_at.constprop.0+0x58>

00001192 <puts>:
{
    1192:	1151                	addi	sp,sp,-12
    1194:	c406                	sw	ra,8(sp)
    1196:	c222                	sw	s0,4(sp)
    1198:	c026                	sw	s1,0(sp)
    119a:	84aa                	mv	s1,a0
	int sl = strlen( s );
    119c:	31ad                	jal	e06 <strlen>
    119e:	842a                	mv	s0,a0
	_write(0, s, sl );
    11a0:	85aa                	mv	a1,a0
    11a2:	8526                	mv	a0,s1
    11a4:	3451                	jal	c28 <_write.constprop.0>
	_write(0, "\n", 1 );
    11a6:	6509                	lui	a0,0x2
    11a8:	4585                	li	a1,1
    11aa:	3f850513          	addi	a0,a0,1016 # 23f8 <string0+0x18>
    11ae:	3cad                	jal	c28 <_write.constprop.0>
}
    11b0:	40a2                	lw	ra,8(sp)
    11b2:	00140513          	addi	a0,s0,1
    11b6:	4412                	lw	s0,4(sp)
    11b8:	4482                	lw	s1,0(sp)
    11ba:	0131                	addi	sp,sp,12
    11bc:	8082                	ret

000011be <i2c_scan_callback>:
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    11be:	cd21                	beqz	a0,1216 <i2c_scan_callback+0x58>
    11c0:	07f00793          	li	a5,127
    11c4:	862a                	mv	a2,a0
    11c6:	04f50863          	beq	a0,a5,1216 <i2c_scan_callback+0x58>
void i2c_scan_callback(const uint8_t addr) {
    11ca:	1151                	addi	sp,sp,-12
    11cc:	c222                	sw	s0,4(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    11ce:	6589                	lui	a1,0x2
    11d0:	3fc58593          	addi	a1,a1,1020 # 23fc <string0+0x1c>
    11d4:	20c18513          	addi	a0,gp,524 # 20000608 <str_output>
void i2c_scan_callback(const uint8_t addr) {
    11d8:	c406                	sw	ra,8(sp)
    11da:	c026                	sw	s1,0(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    11dc:	35a1                	jal	1024 <sprintf>
	printf("%s\n", str_output);
    11de:	20c18513          	addi	a0,gp,524 # 20000608 <str_output>
    11e2:	3f45                	jal	1192 <puts>
	modI2C_display(str_output, line++);
    11e4:	c6418793          	addi	a5,gp,-924 # 20000060 <line.2>
    11e8:	4384                	lw	s1,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    11ea:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
    11ee:	00148713          	addi	a4,s1,1
    11f2:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    11f4:	a34ff0ef          	jal	ra,428 <i2c_ping>
    11f8:	e911                	bnez	a0,120c <i2c_scan_callback+0x4e>
	ssd1306_print_str_at(str, line, 0);
    11fa:	20c18513          	addi	a0,gp,524 # 20000608 <str_output>
}
    11fe:	4412                	lw	s0,4(sp)
    1200:	40a2                	lw	ra,8(sp)
	ssd1306_print_str_at(str, line, 0);
    1202:	0ff4f593          	andi	a1,s1,255
}
    1206:	4482                	lw	s1,0(sp)
    1208:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    120a:	bf19                	j	1120 <ssd1306_print_str_at.constprop.0>
}
    120c:	40a2                	lw	ra,8(sp)
    120e:	4412                	lw	s0,4(sp)
    1210:	4482                	lw	s1,0(sp)
    1212:	0131                	addi	sp,sp,12
    1214:	8082                	ret
    1216:	8082                	ret

00001218 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    1218:	400227b7          	lui	a5,0x40022
    121c:	4705                	li	a4,1
    121e:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    1220:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1224:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    1228:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    122c:	08170713          	addi	a4,a4,129 # 1080081 <rv003usb.c.2a5f0f89+0x107843c>
    1230:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    1232:	009f0737          	lui	a4,0x9f0
    1236:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    1238:	020006b7          	lui	a3,0x2000
    123c:	40021737          	lui	a4,0x40021
    1240:	431c                	lw	a5,0(a4)
    1242:	8ff5                	and	a5,a5,a3
    1244:	dff5                	beqz	a5,1240 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1246:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1248:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    124c:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    124e:	0027e793          	ori	a5,a5,2
    1252:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1254:	4721                	li	a4,8
    1256:	42dc                	lw	a5,4(a3)
    1258:	8bb1                	andi	a5,a5,12
    125a:	fee79ee3          	bne	a5,a4,1256 <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    125e:	e00007b7          	lui	a5,0xe0000
    1262:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    1266:	08000713          	li	a4,128
    126a:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    126e:	8082                	ret

00001270 <main>:
//# 	*BTN*		PC0 - [ 				] - PC1		*SDA*


volatile uint8_t i2c_registers[32] = {0xaa};

int main() {
    1270:	7139                	addi	sp,sp,-64
    1272:	de06                	sw	ra,60(sp)
    1274:	dc22                	sw	s0,56(sp)
    1276:	da26                	sw	s1,52(sp)
	SystemInit();
    1278:	3745                	jal	1218 <SystemInit>
	uint32_t targend = SysTick->CNT + n;
    127a:	e000f7b7          	lui	a5,0xe000f
    127e:	4798                	lw	a4,8(a5)
    1280:	67b1                	lui	a5,0xc
    1282:	b8078793          	addi	a5,a5,-1152 # bb80 <rv003usb.c.2a5f0f89+0x3f3b>
    1286:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
    1288:	e000f6b7          	lui	a3,0xe000f
    128c:	469c                	lw	a5,8(a3)
    128e:	8f99                	sub	a5,a5,a4
    1290:	fe07cee3          	bltz	a5,128c <main+0x1c>
#define LOCAL_CONCAT(A, B) A##B
#define LOCAL_EXP(A, B) LOCAL_CONCAT(A,B)

void usb_setup()
{
	rv003usb_internal_data.se0_windup = 0;
    1294:	1a01a423          	sw	zero,424(gp) # 200005a4 <rv003usb_internal_data+0x18>

	// Enable GPIOs, TIMERs
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
    1298:	40021737          	lui	a4,0x40021
    129c:	4f1c                	lw	a5,24(a4)
	}
#endif

	// GPIO Setup
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
    129e:	ff0016b7          	lui	a3,0xff001
    12a2:	16fd                	addi	a3,a3,-1
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
    12a4:	0217e793          	ori	a5,a5,33
    12a8:	cf1c                	sw	a5,24(a4)
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
    12aa:	40011737          	lui	a4,0x40011
    12ae:	40072783          	lw	a5,1024(a4) # 40011400 <_eusrstack+0x20010c00>
    12b2:	40070613          	addi	a2,a4,1024
    12b6:	8ff5                	and	a5,a5,a3
			) )) )
		 |
#ifdef USB_PIN_DPU
		(GPIO_Speed_50MHz | GPIO_CNF_OUT_PP)<<(4*USB_PIN_DPU) |
#endif
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DP) | 
    12b8:	003886b7          	lui	a3,0x388
    12bc:	8fd5                	or	a5,a5,a3
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
    12be:	40f72023          	sw	a5,1024(a4)
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DM);

	// Configure USB_PIN_DM (D-) as an interrupt on falling edge.
	AFIO->EXTICR = LOCAL_EXP(GPIO_PortSourceGPIO,USB_PORT)<<(USB_PIN_DM*2); // Configure EXTI interrupt for USB_PIN_DM
    12c2:	400107b7          	lui	a5,0x40010
    12c6:	30000713          	li	a4,768
    12ca:	c798                	sw	a4,8(a5)
	EXTI->INTENR = 1<<USB_PIN_DM; // Enable EXTI interrupt
    12cc:	4741                	li	a4,16
    12ce:	40e7a023          	sw	a4,1024(a5) # 40010400 <_eusrstack+0x2000fc00>
    12d2:	40078693          	addi	a3,a5,1024
	EXTI->FTENR = 1<<USB_PIN_DM;  // Enable falling edge trigger for USB_PIN_DM (D-)
    12d6:	c6d8                	sw	a4,12(a3)

#ifdef USB_PIN_DPU
	// This drives USB_PIN_DPU (D- Pull-Up) high, which will tell the host that we are going on-bus.
	LOCAL_EXP(GPIO,USB_PORT)->BSHR = 1<<USB_PIN_DPU;
    12d8:	02000793          	li	a5,32
    12dc:	ca1c                	sw	a5,16(a2)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    12de:	00100737          	lui	a4,0x100
    12e2:	e000e7b7          	lui	a5,0xe000e
    12e6:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>
	return;
}


uint16_t fun_optionByte_getValue() {
    uint8_t data0 = OB->Data0;
    12ea:	200006b7          	lui	a3,0x20000
    12ee:	8046d403          	lhu	s0,-2044(a3) # 1ffff804 <rv003usb.c.2a5f0f89+0x1fff7bbf>
    uint8_t data1 = OB->Data1;
    12f2:	8066d783          	lhu	a5,-2042(a3)
    uint8_t data0 = OB->Data0;
    12f6:	80068713          	addi	a4,a3,-2048
    return data0 + (data1 << 8);
    12fa:	0ff47413          	andi	s0,s0,255
    uint8_t data1 = OB->Data1;
    12fe:	07c2                	slli	a5,a5,0x10
    1300:	83c1                	srli	a5,a5,0x10
    return data0 + (data1 << 8);
    1302:	07a2                	slli	a5,a5,0x8
    1304:	8c5d                	or	s0,s0,a5
	Delay_Ms(1);
	usb_setup();

	uint16_t bootCnt = fun_optionByte_getValue();
	bootCnt++;
    1306:	0405                	addi	s0,s0,1
	hold32p[0]=ob32p[0]; 			// Copy RDPR and USER
    1308:	8006a783          	lw	a5,-2048(a3)
    130c:	0442                	slli	s0,s0,0x10
    130e:	8041                	srli	s0,s0,0x10
    1310:	d43e                	sw	a5,40(sp)
	hold32p[1]=(uint32_t)data;	    // Copy in the two Data values to be written
    1312:	d622                	sw	s0,44(sp)
	hold32p[2]=ob32p[2];			// Copy WRPR0 and WEPR1
    1314:	471c                	lw	a5,8(a4)
	FLASH->KEYR = FLASH_KEY1;
    1316:	456706b7          	lui	a3,0x45670
    131a:	12368693          	addi	a3,a3,291 # 45670123 <_eusrstack+0x2566f923>
	hold32p[2]=ob32p[2];			// Copy WRPR0 and WEPR1
    131e:	d83e                	sw	a5,48(sp)
	FLASH->KEYR = FLASH_KEY2;
    1320:	cdef9737          	lui	a4,0xcdef9
	FLASH->KEYR = FLASH_KEY1;
    1324:	400227b7          	lui	a5,0x40022
    1328:	c3d4                	sw	a3,4(a5)
	FLASH->KEYR = FLASH_KEY2;
    132a:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef81ab>
    132e:	c3d8                	sw	a4,4(a5)
	FLASH->OBKEYR = FLASH_KEY1;
    1330:	c794                	sw	a3,8(a5)
	FLASH->OBKEYR = FLASH_KEY2;
    1332:	c798                	sw	a4,8(a5)
	FLASH->CTLR |= CR_OPTER_Set;			// OBER RW Perform user-selected word erasure	
    1334:	4b98                	lw	a4,16(a5)
    1336:	02076713          	ori	a4,a4,32
    133a:	cb98                	sw	a4,16(a5)
	FLASH->CTLR |= CR_STRT_Set;    			// STRT RW1 Start. Set 1 to start an erase action,hw automatically clears to 0
    133c:	4b98                	lw	a4,16(a5)
    133e:	04076713          	ori	a4,a4,64
    1342:	cb98                	sw	a4,16(a5)
	while (FLASH->STATR & FLASH_BUSY);		// Wait for flash operation to be done
    1344:	47d8                	lw	a4,12(a5)
    1346:	8b05                	andi	a4,a4,1
    1348:	ff75                	bnez	a4,1344 <main+0xd4>
	FLASH->CTLR &= CR_OPTER_Reset; 			// Disable erasure mode	
    134a:	4b98                	lw	a4,16(a5)
		ob16p[i]=hold[i];
    134c:	200005b7          	lui	a1,0x20000
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
    1350:	4619                	li	a2,6
	FLASH->CTLR &= CR_OPTER_Reset; 			// Disable erasure mode	
    1352:	fdf77713          	andi	a4,a4,-33
    1356:	cb98                	sw	a4,16(a5)
	FLASH->CTLR |= CR_OPTPG_Set;   			// OBG  RW Perform user-selected word programming
    1358:	4b98                	lw	a4,16(a5)
    135a:	01076713          	ori	a4,a4,16
    135e:	cb98                	sw	a4,16(a5)
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
    1360:	4701                	li	a4,0
		while (FLASH->STATR & FLASH_BUSY);	// Wait for flash operation to be done
    1362:	400227b7          	lui	a5,0x40022
		ob16p[i]=hold[i];
    1366:	00171693          	slli	a3,a4,0x1
    136a:	1848                	addi	a0,sp,52
    136c:	9536                	add	a0,a0,a3
    136e:	ff455503          	lhu	a0,-12(a0)
    1372:	96ae                	add	a3,a3,a1
    1374:	80a69023          	sh	a0,-2048(a3)
		while (FLASH->STATR & FLASH_BUSY);	// Wait for flash operation to be done
    1378:	47d4                	lw	a3,12(a5)
    137a:	8a85                	andi	a3,a3,1
    137c:	fef5                	bnez	a3,1378 <main+0x108>
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
    137e:	0705                	addi	a4,a4,1
    1380:	fec713e3          	bne	a4,a2,1366 <main+0xf6>
	FLASH->CTLR &= CR_OPTPG_Reset;			// Disable programming mode
    1384:	4b98                	lw	a4,16(a5)
	fun_optionByte_store(bootCnt);
	printf("Boot Count: %d\n", bootCnt);
    1386:	6509                	lui	a0,0x2
    1388:	85a2                	mv	a1,s0
    138a:	9b3d                	andi	a4,a4,-17
    138c:	cb98                	sw	a4,16(a5)
	FLASH->CTLR|=CR_LOCK_Set;				// Lock flash memories again
    138e:	4b98                	lw	a4,16(a5)
    1390:	40850513          	addi	a0,a0,1032 # 2408 <string0+0x28>
    1394:	08076713          	ori	a4,a4,128
    1398:	cb98                	sw	a4,16(a5)
    139a:	390d                	jal	fcc <printf>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    139c:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    13a0:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    13a2:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    13a6:	b7f70713          	addi	a4,a4,-1153 # bb7f <rv003usb.c.2a5f0f89+0x3f3a>
    13aa:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    13ac:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    13b0:	c8818713          	addi	a4,gp,-888 # 20000084 <systick_millis>
    13b4:	00072023          	sw	zero,0(a4)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    13b8:	4398                	lw	a4,0(a5)
    13ba:	c8818613          	addi	a2,gp,-888 # 20000084 <systick_millis>
    13be:	00776713          	ori	a4,a4,7
    13c2:	c398                	sw	a4,0(a5)
    13c4:	e000e7b7          	lui	a5,0xe000e
    13c8:	6705                	lui	a4,0x1
    13ca:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>

	systick_init();			//! required for millis()
	funGpioInitAll();
    13ce:	40021737          	lui	a4,0x40021
    13d2:	4f1c                	lw	a5,24(a4)
    13d4:	0357e793          	ori	a5,a5,53
    13d8:	cf1c                	sw	a5,24(a4)
    model->debounce_time = millis();
    model->release_time = millis();
}

void fun_button_setup(Button_t *model) {
    if (model->pin == 0xFF) return; 
    13da:	c041c683          	lbu	a3,-1020(gp) # 20000000 <button1.1>
    13de:	c0418793          	addi	a5,gp,-1020 # 20000000 <button1.1>
    13e2:	0ff00713          	li	a4,255
    13e6:	c232                	sw	a2,4(sp)
    13e8:	c03e                	sw	a5,0(sp)
    13ea:	04e68a63          	beq	a3,a4,143e <main+0x1ce>

    model->btn_state = BUTTON_IDLE;
    model->debounce_time = 0;
    model->release_time = 0;
    model->press_time = 0;
    13ee:	0007a623          	sw	zero,12(a5)

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
    13f2:	0046d713          	srli	a4,a3,0x4
    13f6:	400117b7          	lui	a5,0x40011
    13fa:	80078793          	addi	a5,a5,-2048 # 40010800 <_eusrstack+0x20010000>
    13fe:	072a                	slli	a4,a4,0xa
    1400:	973e                	add	a4,a4,a5
    1402:	00f6f613          	andi	a2,a3,15
    1406:	4308                	lw	a0,0(a4)
    1408:	00261593          	slli	a1,a2,0x2
    140c:	47bd                	li	a5,15
    140e:	00b797b3          	sll	a5,a5,a1
    1412:	fff7c793          	not	a5,a5
    1416:	46a1                	li	a3,8
    1418:	8fe9                	and	a5,a5,a0
    141a:	00b696b3          	sll	a3,a3,a1
    141e:	8fd5                	or	a5,a5,a3
    1420:	c31c                	sw	a5,0(a4)
    funDigitalWrite(model->pin, 1);
    1422:	4785                	li	a5,1
    1424:	00c797b3          	sll	a5,a5,a2
    1428:	cb1c                	sw	a5,16(a4)
    model->btn_state = newState;
    142a:	4702                	lw	a4,0(sp)
    142c:	478d                	li	a5,3
    142e:	00f700a3          	sb	a5,1(a4) # 40021001 <_eusrstack+0x20020801>
    model->debounce_time = millis();
    1432:	4792                	lw	a5,4(sp)
    1434:	439c                	lw	a5,0(a5)
    1436:	c35c                	sw	a5,4(a4)
    model->release_time = millis();
    1438:	4792                	lw	a5,4(sp)
    143a:	439c                	lw	a5,0(a5)
    143c:	c71c                	sw	a5,8(a4)
	//# Button: uses PC0
	static Button_t button1 = { .pin = BUTTON_PIN };
	fun_button_setup(&button1);

	//# Hold BUTTON_PIN low to enter slave mode
	uint8_t i2cMaster_mode = funDigitalRead(BUTTON_PIN);
    143e:	400117b7          	lui	a5,0x40011
    1442:	479c                	lw	a5,8(a5)
    1444:	8b85                	andi	a5,a5,1
    1446:	cc3e                	sw	a5,24(sp)
	if(dev->regb == 0) dev->regb = 1;
    1448:	c2018793          	addi	a5,gp,-992 # 2000001c <dev_ssd1306>
    144c:	00a7c683          	lbu	a3,10(a5) # 4001100a <_eusrstack+0x2001080a>
    1450:	c2018713          	addi	a4,gp,-992 # 2000001c <dev_ssd1306>
    1454:	4785                	li	a5,1
    1456:	c681                	beqz	a3,145e <main+0x1ee>
	if(dev->regb  > 4) dev->regb = 4;
    1458:	4791                	li	a5,4
    145a:	00d7f463          	bgeu	a5,a3,1462 <main+0x1f2>
    145e:	00f70523          	sb	a5,10(a4)
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1462:	400217b7          	lui	a5,0x40021
    1466:	4b90                	lw	a2,16(a5)
    1468:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    146c:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1470:	8e49                	or	a2,a2,a0
    1472:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1474:	4b90                	lw	a2,16(a5)
    1476:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1478:	6485                	lui	s1,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    147a:	8e6d                	and	a2,a2,a1
    147c:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    147e:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    1480:	fbc00637          	lui	a2,0xfbc00
    1484:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1486:	8ec9                	or	a3,a3,a0
    1488:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    148a:	4f94                	lw	a3,24(a5)
    148c:	0116e693          	ori	a3,a3,17
    1490:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    1492:	400107b7          	lui	a5,0x40010
    1496:	43d4                	lw	a3,4(a5)
    1498:	8ef1                	and	a3,a3,a2
    149a:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    149c:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    149e:	767d                	lui	a2,0xfffff
    14a0:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    14a4:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    14a6:	400117b7          	lui	a5,0x40011
    14aa:	4394                	lw	a3,0(a5)
    14ac:	f0f6f693          	andi	a3,a3,-241
    14b0:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    14b2:	4394                	lw	a3,0(a5)
    14b4:	0d06e693          	ori	a3,a3,208
    14b8:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    14ba:	4394                	lw	a3,0(a5)
    14bc:	8ef1                	and	a3,a3,a2
    14be:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    14c0:	4394                	lw	a3,0(a5)
    14c2:	d0048613          	addi	a2,s1,-768 # d00 <_write.constprop.0+0xd8>
    14c6:	8ed1                	or	a3,a3,a2
    14c8:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    14ca:	400056b7          	lui	a3,0x40005
    14ce:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
    14d2:	07c2                	slli	a5,a5,0x10
    14d4:	83c1                	srli	a5,a5,0x10
    14d6:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    14da:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    14de:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
    14e2:	431c                	lw	a5,0(a4)
    14e4:	6761                	lui	a4,0x18
    14e6:	6a070713          	addi	a4,a4,1696 # 186a0 <rv003usb.c.2a5f0f89+0x10a5b>
    14ea:	00179593          	slli	a1,a5,0x1
    14ee:	3af76663          	bltu	a4,a5,189a <main+0x62a>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    14f2:	02dc7537          	lui	a0,0x2dc7
    14f6:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <rv003usb.c.2a5f0f89+0x2dbefbb>
    14fa:	bc7fe0ef          	jal	ra,c0 <__hidden___udivsi3>
    14fe:	14fd                	addi	s1,s1,-1
    1500:	8d65                	and	a0,a0,s1
    1502:	0542                	slli	a0,a0,0x10
    1504:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    1506:	40005737          	lui	a4,0x40005
    150a:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    150e:	40075783          	lhu	a5,1024(a4)
    1512:	07c2                	slli	a5,a5,0x10
    1514:	83c1                	srli	a5,a5,0x10
    1516:	0017e793          	ori	a5,a5,1
    151a:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    151e:	e0dfe0ef          	jal	ra,32a <i2c_error>
	if(i2c_init(&dev_ssd1306) != I2C_OK) {
    1522:	38050a63          	beqz	a0,18b6 <main+0x646>
		printf("Failed to init I2C\n");
    1526:	6509                	lui	a0,0x2
    1528:	41850513          	addi	a0,a0,1048 # 2418 <string0+0x38>
		printf("----Done Scanning----\n\n");
    152c:	319d                	jal	1192 <puts>
} TIM_PWM_t;

//! Expected funGpioInitAll() before init
void fun_timPWM_init(TIM_PWM_t* model) {	
	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM1_REMAP_NOREMAP;
    152e:	400107b7          	lui	a5,0x40010
    1532:	43d8                	lw	a4,4(a5)
    1534:	c3d8                	sw	a4,4(a5)
	
	TIM_TypeDef* timer = model->TIM;
    1536:	c4018793          	addi	a5,gp,-960 # 2000003c <pwm_CH1c.0>
    153a:	43dc                	lw	a5,4(a5)
	
	if (timer == TIM1) {
    153c:	40013737          	lui	a4,0x40013
    1540:	c0070713          	addi	a4,a4,-1024 # 40012c00 <_eusrstack+0x20012400>
    1544:	c4018413          	addi	s0,gp,-960 # 2000003c <pwm_CH1c.0>
    1548:	48e79863          	bne	a5,a4,19d8 <main+0x768>
		RCC->APB2PCENR |= RCC_APB2Periph_TIM1;
    154c:	40021737          	lui	a4,0x40021
    1550:	4f10                	lw	a2,24(a4)
    1552:	6685                	lui	a3,0x1
    1554:	80068693          	addi	a3,a3,-2048 # 800 <WS2812FillBuffSec.constprop.0+0xd2>
    1558:	8e55                	or	a2,a2,a3
    155a:	cf10                	sw	a2,24(a4)

		// Reset TIM1 to init all regs
		RCC->APB2PRSTR |= RCC_APB2Periph_TIM1;
    155c:	4750                	lw	a2,12(a4)
    155e:	8ed1                	or	a3,a3,a2
    1560:	c754                	sw	a3,12(a4)
		RCC->APB2PRSTR &= ~RCC_APB2Periph_TIM1;
    1562:	4754                	lw	a3,12(a4)
    1564:	767d                	lui	a2,0xfffff
    1566:	7ff60613          	addi	a2,a2,2047 # fffff7ff <_eusrstack+0xdfffefff>
    156a:	8ef1                	and	a3,a3,a2
    156c:	c754                	sw	a3,12(a4)
		
		timer->BDTR |= TIM_MOE;			// Enable TIM1 outputs
    156e:	0447d703          	lhu	a4,68(a5) # 40010044 <_eusrstack+0x2000f844>
    1572:	66a1                	lui	a3,0x8
    1574:	0742                	slli	a4,a4,0x10
    1576:	8341                	srli	a4,a4,0x10
    1578:	8f55                	or	a4,a4,a3
    157a:	04e79223          	sh	a4,68(a5)
		RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
	}

	// CTLR1: default is up, events generated, edge align
	// SMCFGR: default clk input is CK_INT
	timer->PSC = 0x0000;			// Prescaler 
    157e:	02079423          	sh	zero,40(a5)
	timer->ATRLR = 255;				// Auto Reload - sets period
    1582:	0ff00593          	li	a1,255
    1586:	02b79623          	sh	a1,44(a5)

	timer->SWEVGR |= TIM_UG;		// Reload immediately
    158a:	0147d703          	lhu	a4,20(a5)
    158e:	0742                	slli	a4,a4,0x10
    1590:	8341                	srli	a4,a4,0x10
    1592:	00176713          	ori	a4,a4,1
    1596:	00e79a23          	sh	a4,20(a5)
	timer->CTLR1 |= TIM_CEN;		// Enable timer
    159a:	0007d703          	lhu	a4,0(a5)
    159e:	0742                	slli	a4,a4,0x10
    15a0:	8341                	srli	a4,a4,0x10
    15a2:	00176713          	ori	a4,a4,1
    15a6:	00e79023          	sh	a4,0(a5)
}

void fun_timPWM_reload(TIM_PWM_t* model) {
	model->counter = 0;
	model->timeRef = 0;
	funPinMode(model->pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF);
    15aa:	00044683          	lbu	a3,0(s0)
    15ae:	40011737          	lui	a4,0x40011
    15b2:	80070713          	addi	a4,a4,-2048 # 40010800 <_eusrstack+0x20010000>
    15b6:	0046d613          	srli	a2,a3,0x4
    15ba:	062a                	slli	a2,a2,0xa
    15bc:	963a                	add	a2,a2,a4
    15be:	8abd                	andi	a3,a3,15
    15c0:	4208                	lw	a0,0(a2)
    15c2:	068a                	slli	a3,a3,0x2
    15c4:	473d                	li	a4,15
    15c6:	00d71733          	sll	a4,a4,a3
    15ca:	fff74713          	not	a4,a4
    15ce:	8f69                	and	a4,a4,a0
    15d0:	4525                	li	a0,9
    15d2:	00d516b3          	sll	a3,a0,a3
    15d6:	8f55                	or	a4,a4,a3
	model->counter = 0;
    15d8:	00042423          	sw	zero,8(s0)
	model->timeRef = 0;
    15dc:	00042623          	sw	zero,12(s0)
	funPinMode(model->pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF);
    15e0:	c218                	sw	a4,0(a2)
	TIM_TypeDef* timer = model->TIM;

	// default value
	timer->CH1CVR = 255;
    15e2:	dbcc                	sw	a1,52(a5)
	timer->CH2CVR = 255;
    15e4:	df8c                	sw	a1,56(a5)
	timer->CH3CVR = 255;
	timer->CH4CVR = 255;

	switch (model->CCER) {
    15e6:	00245703          	lhu	a4,2(s0)
	timer->CH3CVR = 255;
    15ea:	dfcc                	sw	a1,60(a5)
	timer->CH4CVR = 255;
    15ec:	c3ac                	sw	a1,64(a5)
	switch (model->CCER) {
    15ee:	04000693          	li	a3,64
    15f2:	4ad70f63          	beq	a4,a3,1ab0 <main+0x840>
    15f6:	40e6e363          	bltu	a3,a4,19fc <main+0x78c>
    15fa:	4691                	li	a3,4
    15fc:	46d70063          	beq	a4,a3,1a5c <main+0x7ec>
    1600:	46c1                	li	a3,16
    1602:	48d70163          	beq	a4,a3,1a84 <main+0x814>
    1606:	4685                	li	a3,1
    1608:	42d70763          	beq	a4,a3,1a36 <main+0x7c6>
		D5		T2CH4_		//! UART_RX
*/

//! Expected funGpioInitAll() before init
void fun_encoder_setup(Encoder_t *model) {
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    160c:	400217b7          	lui	a5,0x40021
    1610:	4fd8                	lw	a4,28(a5)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	funPinMode(PD3, GPIO_CFGLR_IN_PUPD);
    1612:	75c5                	lui	a1,0xffff1
    1614:	15fd                	addi	a1,a1,-1
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    1616:	00176713          	ori	a4,a4,1
    161a:	cfd8                	sw	a4,28(a5)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
    161c:	40010737          	lui	a4,0x40010
    1620:	4354                	lw	a3,4(a4)
    1622:	c354                	sw	a3,4(a4)
	funPinMode(PD3, GPIO_CFGLR_IN_PUPD);
    1624:	400116b7          	lui	a3,0x40011
    1628:	40068713          	addi	a4,a3,1024 # 40011400 <_eusrstack+0x20010c00>
    162c:	4310                	lw	a2,0(a4)
    162e:	8e6d                	and	a2,a2,a1
    1630:	65a1                	lui	a1,0x8
    1632:	8e4d                	or	a2,a2,a1
    1634:	c310                	sw	a2,0(a4)
	funPinMode(PD4, GPIO_CFGLR_IN_PUPD);
    1636:	4310                	lw	a2,0(a4)
    1638:	fff105b7          	lui	a1,0xfff10
    163c:	15fd                	addi	a1,a1,-1
    163e:	8e6d                	and	a2,a2,a1
    1640:	000805b7          	lui	a1,0x80
    1644:	8e4d                	or	a2,a2,a1
    1646:	c310                	sw	a2,0(a4)
	funDigitalWrite(PD3, 1);
    1648:	4621                	li	a2,8
    164a:	cb10                	sw	a2,16(a4)
	funDigitalWrite(PD4, 1);
    164c:	4641                	li	a2,16
    164e:	cb10                	sw	a2,16(a4)

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    1650:	4b98                	lw	a4,16(a5)
    1652:	00176713          	ori	a4,a4,1
    1656:	cb98                	sw	a4,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    1658:	4b98                	lw	a4,16(a5)
    165a:	9b79                	andi	a4,a4,-2
    165c:	cb98                	sw	a4,16(a5)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
    165e:	40000737          	lui	a4,0x40000
    1662:	00875603          	lhu	a2,8(a4) # 40000008 <_eusrstack+0x1ffff808>
    1666:	0642                	slli	a2,a2,0x10
    1668:	8241                	srli	a2,a2,0x10
    166a:	00366613          	ori	a2,a2,3
    166e:	00c71423          	sh	a2,8(a4)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
    1672:	7665                	lui	a2,0xffff9
    1674:	167d                	addi	a2,a2,-1
    1676:	02c71223          	sh	a2,36(a4)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
    167a:	01475603          	lhu	a2,20(a4)
    167e:	0642                	slli	a2,a2,0x10
    1680:	8241                	srli	a2,a2,0x10
    1682:	00166613          	ori	a2,a2,1
    1686:	00c71a23          	sh	a2,20(a4)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
    168a:	00075603          	lhu	a2,0(a4)
    168e:	0642                	slli	a2,a2,0x10
    1690:	8241                	srli	a2,a2,0x10
    1692:	00166613          	ori	a2,a2,1
    1696:	00c71023          	sh	a2,0(a4)

	model->initial_count = TIM2->CNT;
    169a:	02475603          	lhu	a2,36(a4)
	model->last_count = TIM2->CNT;
    169e:	02475703          	lhu	a4,36(a4)
volatile uint16_t adc_buffer[ADC_NUMCHLS];

//! Expected funGpioInitAll() before init
void fun_joystick_setup() {
	// ADCCLK = 24 MHz => RCC_ADCPRE = 0: divide by 2
	RCC->CFGR0 &= ~(0x1F<<11);
    16a2:	43d8                	lw	a4,4(a5)
    16a4:	7641                	lui	a2,0xffff0
    16a6:	7ff60613          	addi	a2,a2,2047 # ffff07ff <_eusrstack+0xdffeffff>
    16aa:	8f71                	and	a4,a4,a2
    16ac:	c3d8                	sw	a4,4(a5)
	
	// Enable GPIOD and ADC
	RCC->APB2PCENR |= RCC_APB2Periph_ADC1;
    16ae:	4f98                	lw	a4,24(a5)
    16b0:	20076713          	ori	a4,a4,512
    16b4:	cf98                	sw	a4,24(a5)
	// GPIOA->CFGLR &= ~(0xf<<(4*0));	// PA1 Analog input Chan1
	// GPIOA->CFGLR &= ~(0xf<<(4*1));	// PA2 Analog input Chan0

    int chanA = 0;
    int chanB = 1;
    GPIOA->CFGLR &= ~(0xf<<(4*0));
    16b6:	80068713          	addi	a4,a3,-2048
    16ba:	4314                	lw	a3,0(a4)
    16bc:	9ac1                	andi	a3,a3,-16
    16be:	c314                	sw	a3,0(a4)
    GPIOA->CFGLR &= ~(0xf<<(4*1));
    16c0:	4314                	lw	a3,0(a4)
    16c2:	f0f6f693          	andi	a3,a3,-241
    16c6:	c314                	sw	a3,0(a4)
	
	// Reset the ADC to init all regs
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    16c8:	47d8                	lw	a4,12(a5)
    // turn on ADC
	ADC1->CTLR2 |= ADC_ADON;
	
	// Reset and calibrate
	ADC1->CTLR2 |= ADC_RSTCAL;
	while(ADC1->CTLR2 & ADC_RSTCAL);
    16ca:	400126b7          	lui	a3,0x40012
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    16ce:	20076713          	ori	a4,a4,512
    16d2:	c7d8                	sw	a4,12(a5)
	RCC->APB2PRSTR &= ~RCC_APB2Periph_ADC1;
    16d4:	47d8                	lw	a4,12(a5)
    16d6:	dff77713          	andi	a4,a4,-513
    16da:	c7d8                	sw	a4,12(a5)
	ADC1->RSQR1 = (ADC_NUMCHLS-1) << 20;	// four chls in the sequence
    16dc:	400127b7          	lui	a5,0x40012
    16e0:	40078793          	addi	a5,a5,1024 # 40012400 <_eusrstack+0x20011c00>
    16e4:	00100737          	lui	a4,0x100
    16e8:	d7d8                	sw	a4,44(a5)
	ADC1->RSQR2 = 0;
    16ea:	0207a823          	sw	zero,48(a5)
    ADC1->RSQR3 = (chanA<<(5*0)) | (chanB<<(5*1));
    16ee:	02000713          	li	a4,32
    16f2:	dbd8                	sw	a4,52(a5)
    ADC1->SAMPTR2 = (7<<(3*chanA)) | (7<<(3*chanB));
    16f4:	03f00713          	li	a4,63
    16f8:	cb98                	sw	a4,16(a5)
	ADC1->CTLR2 |= ADC_ADON;
    16fa:	4798                	lw	a4,8(a5)
    16fc:	00176713          	ori	a4,a4,1
    1700:	c798                	sw	a4,8(a5)
	ADC1->CTLR2 |= ADC_RSTCAL;
    1702:	4798                	lw	a4,8(a5)
    1704:	00876713          	ori	a4,a4,8
    1708:	c798                	sw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_RSTCAL);
    170a:	40068793          	addi	a5,a3,1024 # 40012400 <_eusrstack+0x20011c00>
    170e:	4798                	lw	a4,8(a5)
    1710:	8b21                	andi	a4,a4,8
    1712:	ff65                	bnez	a4,170a <main+0x49a>
	ADC1->CTLR2 |= ADC_CAL;
    1714:	4798                	lw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    1716:	40012637          	lui	a2,0x40012
	ADC1->CTLR2 |= ADC_CAL;
    171a:	00476713          	ori	a4,a4,4
    171e:	c798                	sw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    1720:	40060793          	addi	a5,a2,1024 # 40012400 <_eusrstack+0x20011c00>
    1724:	4798                	lw	a4,8(a5)
    1726:	8b11                	andi	a4,a4,4
    1728:	ff65                	bnez	a4,1720 <main+0x4b0>
	
	// Turn on DMA
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    172a:	400216b7          	lui	a3,0x40021
    172e:	4ad8                	lw	a4,20(a3)
	
	//DMA1_Channel1 is for ADC
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    1730:	44c60613          	addi	a2,a2,1100
	DMA1_Channel1->MADDR = (uint32_t)adc_buffer;
	DMA1_Channel1->CNTR  = ADC_NUMCHLS;
    1734:	4589                	li	a1,2
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    1736:	00176713          	ori	a4,a4,1
    173a:	cad8                	sw	a4,20(a3)
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    173c:	40020737          	lui	a4,0x40020
    1740:	cb10                	sw	a2,16(a4)
	DMA1_Channel1->MADDR = (uint32_t)adc_buffer;
    1742:	c7c18613          	addi	a2,gp,-900 # 20000078 <adc_buffer>
    1746:	cb50                	sw	a2,20(a4)
	DMA1_Channel1->CFGR  =
    1748:	6605                	lui	a2,0x1
	DMA1_Channel1->CNTR  = ADC_NUMCHLS;
    174a:	c74c                	sw	a1,12(a4)
	DMA1_Channel1->CFGR  =
    174c:	5a060513          	addi	a0,a2,1440 # 15a0 <main+0x330>
    1750:	c708                	sw	a0,8(a4)
		DMA_PeripheralDataSize_HalfWord |
		DMA_MemoryInc_Enable |
		DMA_Mode_Circular |
		DMA_DIR_PeripheralSRC;
	
	DMA1_Channel1->CFGR |= DMA_CFGR1_EN;    // Turn on DMA channel 1
    1752:	4708                	lw	a0,8(a4)
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
	
	// Enable continuous conversion and DMA
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    1754:	000e0337          	lui	t1,0xe0
    1758:	10230313          	addi	t1,t1,258 # e0102 <rv003usb.c.2a5f0f89+0xd84bd>
	DMA1_Channel1->CFGR |= DMA_CFGR1_EN;    // Turn on DMA channel 1
    175c:	00156513          	ori	a0,a0,1
    1760:	c708                	sw	a0,8(a4)
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
    1762:	43c8                	lw	a0,4(a5)
	R8_SPI_CTRL_CFG |= RB_SPI_BIT_ORDER;

	NVIC_EnableIRQ( SPI0_IRQn );
#else
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    1764:	0641                	addi	a2,a2,16
		SPI_NSS_Soft | SPI_CPHA_1Edge | SPI_CPOL_Low | SPI_DataSize_16b |
		SPI_Mode_Master | SPI_Direction_1Line_Tx |
		3<<3; // Divisior = 16 (48/16 = 3MHz)

	SPI1->CTLR2 = SPI_CTLR2_TXDMAEN;  // Enable Tx buffer DMA
	SPI1->HSCR = 1; // Enable high-speed read mode
    1766:	4485                	li	s1,1
    1768:	10056513          	ori	a0,a0,256
    176c:	c3c8                	sw	a0,4(a5)
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    176e:	4788                	lw	a0,8(a5)
    1770:	00656533          	or	a0,a0,t1
    1774:	c788                	sw	a0,8(a5)
	ADC1->CTLR2 |= ADC_SWSTART;             // start conversion
    1776:	4788                	lw	a0,8(a5)
    1778:	00400337          	lui	t1,0x400
    177c:	00656533          	or	a0,a0,t1
    1780:	c788                	sw	a0,8(a5)
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    1782:	4adc                	lw	a5,20(a3)
    printf("Neo_loadCommand: %02X\n", cmd);
    1784:	6509                	lui	a0,0x2
    1786:	47850513          	addi	a0,a0,1144 # 2478 <string0+0x98>
    178a:	0017e793          	ori	a5,a5,1
    178e:	cadc                	sw	a5,20(a3)
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    1790:	4e9c                	lw	a5,24(a3)
    1792:	8e5d                	or	a2,a2,a5
    1794:	ce90                	sw	a2,24(a3)
	GPIOC->CFGLR &= ~(0xf<<(4*6));
    1796:	400117b7          	lui	a5,0x40011
    179a:	4394                	lw	a3,0(a5)
    179c:	f1000637          	lui	a2,0xf1000
    17a0:	167d                	addi	a2,a2,-1
    17a2:	8ef1                	and	a3,a3,a2
    17a4:	c394                	sw	a3,0(a5)
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*6);
    17a6:	4394                	lw	a3,0(a5)
    17a8:	09000637          	lui	a2,0x9000
    17ac:	8ed1                	or	a3,a3,a2
    17ae:	c394                	sw	a3,0(a5)
	SPI1->CTLR1 = 
    17b0:	76f5                	lui	a3,0xffffd
    17b2:	400137b7          	lui	a5,0x40013
    17b6:	b1c68693          	addi	a3,a3,-1252 # ffffcb1c <_eusrstack+0xdfffc31c>
    17ba:	00d79023          	sh	a3,0(a5) # 40013000 <_eusrstack+0x20012800>
	SPI1->CTLR2 = SPI_CTLR2_TXDMAEN;  // Enable Tx buffer DMA
    17be:	00b79223          	sh	a1,4(a5)
	SPI1->HSCR = 1; // Enable high-speed read mode
    17c2:	02979223          	sh	s1,36(a5)

	SPI1->CTLR1 |= CTLR1_SPE_Set; // Enable SPI
    17c6:	0007d683          	lhu	a3,0(a5)

	SPI1->DATAR = 0; // Set SPI line Low.

	//DMA1_Channel3 is for SPI1TX
	DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    17ca:	07b1                	addi	a5,a5,12
    17cc:	4585                	li	a1,1
	SPI1->CTLR1 |= CTLR1_SPE_Set; // Enable SPI
    17ce:	06c2                	slli	a3,a3,0x10
    17d0:	82c1                	srli	a3,a3,0x10
    17d2:	0406e693          	ori	a3,a3,64
    17d6:	fed79a23          	sh	a3,-12(a5)
	SPI1->DATAR = 0; // Set SPI line Low.
    17da:	00079023          	sh	zero,0(a5)
	DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    17de:	df1c                	sw	a5,56(a4)
	DMA1_Channel3->MADDR = (uint32_t)WS2812dmabuff;
    17e0:	c9418793          	addi	a5,gp,-876 # 20000090 <WS2812dmabuff>
    17e4:	df5c                	sw	a5,60(a4)
	DMA1_Channel3->CNTR  = 0;// sizeof( bufferset )/2; // Number of unique copies.  (Don't start, yet!)
	DMA1_Channel3->CFGR  =
    17e6:	678d                	lui	a5,0x3
	DMA1_Channel3->CNTR  = 0;// sizeof( bufferset )/2; // Number of unique copies.  (Don't start, yet!)
    17e8:	02072a23          	sw	zero,52(a4) # 40020034 <_eusrstack+0x2001f834>
	DMA1_Channel3->CFGR  =
    17ec:	59678793          	addi	a5,a5,1430 # 3596 <ch32fun.c.963ac852+0xa5e>
    17f0:	db1c                	sw	a5,48(a4)
    17f2:	010006b7          	lui	a3,0x1000
    17f6:	e000e7b7          	lui	a5,0xe000e
    17fa:	10d7a023          	sw	a3,256(a5) # e000e100 <_eusrstack+0xc000d900>
		DMA_DIR_PeripheralDST |
		DMA_IT_TC | DMA_IT_HT; // Transmission Complete + Half Empty Interrupts. 

//	NVIC_SetPriority( DMA1_Channel3_IRQn, 0<<4 ); //We don't need to tweak priority.
	NVIC_EnableIRQ( DMA1_Channel3_IRQn );
	DMA1_Channel3->CFGR |= DMA_CFGR1_EN;
    17fe:	5b1c                	lw	a5,48(a4)
    1800:	0017e793          	ori	a5,a5,1
    1804:	db1c                	sw	a5,48(a4)
    1806:	fc6ff0ef          	jal	ra,fcc <printf>
    leds_frame.ref_time = millis();
    180a:	4712                	lw	a4,4(sp)
    Neo_LedCmd = cmd;
    180c:	c4918a23          	sb	s1,-940(gp) # 20000050 <Neo_LedCmd>
    leds_frame.ref_time = millis();
    1810:	4318                	lw	a4,0(a4)
    leds_frame.is_enabled = 1;
    1812:	c2c18793          	addi	a5,gp,-980 # 20000028 <leds_frame>
    1816:	009785a3          	sb	s1,11(a5)
    leds_frame.ref_index = 0;
    181a:	00078723          	sb	zero,14(a5)
    leds_frame.ref_time = millis();
    181e:	cb98                	sw	a4,16(a5)
    memset(led_arr, 0, sizeof(led_arr));
    1820:	4661                	li	a2,24
    1822:	4581                	li	a1,0
    1824:	0f418513          	addi	a0,gp,244 # 200004f0 <led_arr>
    color_ani.ref_index = 0;
    1828:	c4018ea3          	sb	zero,-931(gp) # 20000059 <color_ani+0x5>
    memset(led_arr, 0, sizeof(led_arr));
    182c:	81bff0ef          	jal	ra,1046 <memset>
	#endif

	WS2812BDMAInit();
	Neo_loadCommand(NEO_COLOR_CHASE);

	uint32_t now = millis();
    1830:	4792                	lw	a5,4(sp)
	Session_t session = { 0, 0, now };
    1832:	c602                	sw	zero,12(sp)
    1834:	ca02                	sw	zero,20(sp)
	uint32_t now = millis();
    1836:	439c                	lw	a5,0(a5)
	Session_t session = { 0, 0, now };
    1838:	c402                	sw	zero,8(sp)
    183a:	4681                	li	a3,0
	uint32_t now = millis();
    183c:	c83e                	sw	a5,16(sp)

	while(1) {
		now = millis();
    183e:	4792                	lw	a5,4(sp)
    _reset_timers(BUTTON_IDLE, model);
}

void fun_button_task(uint32_t time, Button_t *model, void (*handler)(int, uint32_t)) {
    if (model->pin == 0xFF) return;
    1840:	0ff00713          	li	a4,255
		session.cycle_count++;
    1844:	0685                	addi	a3,a3,1
		now = millis();
    1846:	4384                	lw	s1,0(a5)
    1848:	4782                	lw	a5,0(sp)
    184a:	0007c603          	lbu	a2,0(a5)
    184e:	2ce60263          	beq	a2,a4,1b12 <main+0x8a2>
    uint8_t read = funDigitalRead(model->pin);
    1852:	00465713          	srli	a4,a2,0x4
    1856:	400115b7          	lui	a1,0x40011
    185a:	80058593          	addi	a1,a1,-2048 # 40010800 <_eusrstack+0x20010000>
    185e:	072a                	slli	a4,a4,0xa
    1860:	972e                	add	a4,a4,a1

    // Debounce check
    if (time - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1862:	43cc                	lw	a1,4(a5)
    uint8_t read = funDigitalRead(model->pin);
    1864:	4718                	lw	a4,8(a4)
    if (time - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1866:	454d                	li	a0,19
    1868:	40b485b3          	sub	a1,s1,a1
    186c:	2ab57363          	bgeu	a0,a1,1b12 <main+0x8a2>
    uint8_t read = funDigitalRead(model->pin);
    1870:	8a3d                	andi	a2,a2,15
    1872:	00c75733          	srl	a4,a4,a2
    model->debounce_time = time;

    switch (model->btn_state) {
    1876:	0017c603          	lbu	a2,1(a5)
    model->debounce_time = time;
    187a:	c3c4                	sw	s1,4(a5)
    switch (model->btn_state) {
    187c:	4589                	li	a1,2
    uint8_t read = funDigitalRead(model->pin);
    187e:	8b05                	andi	a4,a4,1
    switch (model->btn_state) {
    1880:	3cb60063          	beq	a2,a1,1c40 <main+0x9d0>
    1884:	26c5e763          	bltu	a1,a2,1af2 <main+0x882>
    1888:	34061963          	bnez	a2,1bda <main+0x96a>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
    188c:	30070963          	beqz	a4,1b9e <main+0x92e>
    model->btn_state = newState;
    1890:	4782                	lw	a5,0(sp)
    1892:	4705                	li	a4,1
    1894:	00e780a3          	sb	a4,1(a5)
    1898:	a4ad                	j	1b02 <main+0x892>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    189a:	02dc7537          	lui	a0,0x2dc7
    189e:	95be                	add	a1,a1,a5
    18a0:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <rv003usb.c.2a5f0f89+0x2dbefbb>
    18a4:	81dfe0ef          	jal	ra,c0 <__hidden___udivsi3>
    18a8:	14fd                	addi	s1,s1,-1
    18aa:	8d65                	and	a0,a0,s1
    18ac:	0542                	slli	a0,a0,0x10
    18ae:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    18b0:	67a1                	lui	a5,0x8
    18b2:	8d5d                	or	a0,a0,a5
    18b4:	b989                	j	1506 <main+0x296>
		if (i2c_ping(0x3C) == I2C_OK) {
    18b6:	03c00513          	li	a0,60
    18ba:	b6ffe0ef          	jal	ra,428 <i2c_ping>
    18be:	0e051563          	bnez	a0,19a8 <main+0x738>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    18c2:	678d                	lui	a5,0x3
    18c4:	c8018223          	sb	zero,-892(gp) # 20000080 <ssd1306_buffer>
    18c8:	91878793          	addi	a5,a5,-1768 # 2918 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    18cc:	0007c503          	lbu	a0,0(a5)
    18d0:	0ff00713          	li	a4,255
    18d4:	02e51e63          	bne	a0,a4,1910 <main+0x6a0>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    18d8:	02100513          	li	a0,33
    18dc:	d29fe0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    18e0:	4501                	li	a0,0
    18e2:	d23fe0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    18e6:	07f00513          	li	a0,127
    18ea:	d1bfe0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    18ee:	02200513          	li	a0,34
    18f2:	d13fe0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    18f6:	4501                	li	a0,0
    18f8:	d0dfe0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    18fc:	451d                	li	a0,7
    18fe:	d07fe0ef          	jal	ra,604 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    1902:	02000593          	li	a1,32
    1906:	c8418513          	addi	a0,gp,-892 # 20000080 <ssd1306_buffer>
    190a:	feaff0ef          	jal	ra,10f4 <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    190e:	a039                	j	191c <main+0x6ac>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    1910:	0785                	addi	a5,a5,1
    1912:	c43e                	sw	a5,8(sp)
    1914:	cf1fe0ef          	jal	ra,604 <ssd1306_cmd>
    1918:	47a2                	lw	a5,8(sp)
    191a:	d94d                	beqz	a0,18cc <main+0x65c>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    191c:	cf418513          	addi	a0,gp,-780 # 200000f0 <frame_buffer>
    1920:	40000613          	li	a2,1024
    1924:	4581                	li	a1,0
    1926:	f20ff0ef          	jal	ra,1046 <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    192a:	02100513          	li	a0,33
    192e:	cd7fe0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1932:	4501                	li	a0,0
    1934:	cd1fe0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1938:	07f00513          	li	a0,127
    193c:	cc9fe0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1940:	02200513          	li	a0,34
    1944:	cc1fe0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1948:	4501                	li	a0,0
    194a:	cbbfe0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    194e:	451d                	li	a0,7
    1950:	cb5fe0ef          	jal	ra,604 <ssd1306_cmd>
    1954:	4481                	li	s1,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    1956:	cf418793          	addi	a5,gp,-780 # 200000f0 <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    195a:	4501                	li	a0,0
    195c:	97a6                	add	a5,a5,s1
    195e:	02050713          	addi	a4,a0,32
    1962:	01071593          	slli	a1,a4,0x10
    1966:	81c1                	srli	a1,a1,0x10
    1968:	8d89                	sub	a1,a1,a0
    196a:	953e                	add	a0,a0,a5
    196c:	c63a                	sw	a4,12(sp)
    196e:	c43e                	sw	a5,8(sp)
    1970:	f84ff0ef          	jal	ra,10f4 <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    1974:	4732                	lw	a4,12(sp)
    1976:	47a2                	lw	a5,8(sp)
    1978:	853a                	mv	a0,a4
    197a:	08000713          	li	a4,128
    197e:	fee510e3          	bne	a0,a4,195e <main+0x6ee>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    1982:	08048493          	addi	s1,s1,128
    1986:	40000793          	li	a5,1024
    198a:	fcf496e3          	bne	s1,a5,1956 <main+0x6e6>
			sprintf(str_output, "Hello Bee %ld", counter);
    198e:	6589                	lui	a1,0x2
    1990:	42c58593          	addi	a1,a1,1068 # 242c <string0+0x4c>
    1994:	8622                	mv	a2,s0
    1996:	20c18513          	addi	a0,gp,524 # 20000608 <str_output>
    199a:	e8aff0ef          	jal	ra,1024 <sprintf>
			ssd1306_print_str_at(str_output, 0, 0);
    199e:	4581                	li	a1,0
    19a0:	20c18513          	addi	a0,gp,524 # 20000608 <str_output>
    19a4:	f7cff0ef          	jal	ra,1120 <ssd1306_print_str_at.constprop.0>
		printf("----Scanning I2C Bus for Devices---\n");
    19a8:	6509                	lui	a0,0x2
    19aa:	43c50513          	addi	a0,a0,1084 # 243c <string0+0x5c>
    19ae:	fe4ff0ef          	jal	ra,1192 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    19b2:	4401                	li	s0,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    19b4:	8522                	mv	a0,s0
    19b6:	a73fe0ef          	jal	ra,428 <i2c_ping>
    19ba:	e501                	bnez	a0,19c2 <main+0x752>
    19bc:	8522                	mv	a0,s0
    19be:	801ff0ef          	jal	ra,11be <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    19c2:	0405                	addi	s0,s0,1
    19c4:	0ff47413          	andi	s0,s0,255
    19c8:	07f00793          	li	a5,127
    19cc:	fef414e3          	bne	s0,a5,19b4 <main+0x744>
		printf("----Done Scanning----\n\n");
    19d0:	6509                	lui	a0,0x2
    19d2:	46050513          	addi	a0,a0,1120 # 2460 <string0+0x80>
    19d6:	be99                	j	152c <main+0x2bc>
	} else if (timer == TIM2) {
    19d8:	40000737          	lui	a4,0x40000
    19dc:	bae791e3          	bne	a5,a4,157e <main+0x30e>
		RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    19e0:	40021737          	lui	a4,0x40021
    19e4:	4f54                	lw	a3,28(a4)
    19e6:	0016e693          	ori	a3,a3,1
    19ea:	cf54                	sw	a3,28(a4)
		RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    19ec:	4b14                	lw	a3,16(a4)
    19ee:	0016e693          	ori	a3,a3,1
    19f2:	cb14                	sw	a3,16(a4)
		RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    19f4:	4b14                	lw	a3,16(a4)
    19f6:	9af9                	andi	a3,a3,-2
    19f8:	cb14                	sw	a3,16(a4)
    19fa:	b651                	j	157e <main+0x30e>
	switch (model->CCER) {
    19fc:	10000693          	li	a3,256
    1a00:	0cd70763          	beq	a4,a3,1ace <main+0x85e>
    1a04:	6685                	lui	a3,0x1
    1a06:	c0d713e3          	bne	a4,a3,160c <main+0x39c>
			timer->CCER |= TIM_CC3E | TIM_CC3P;
			model->channel = 3;
			break;
		// case TIM_CC3NE: TIM1->CCER |= TIM_CC3E | TIM_CC3NP; break;	//! Prevent overwrite SWDIO
		case TIM_CC4E:
			timer->CHCTLR2 |= TIM_OC4M_2 | TIM_OC4M_1 | TIM_OC4PE;		// TIM_OC4PE is used by TIM2 only
    1a0a:	01c7d703          	lhu	a4,28(a5)
    1a0e:	669d                	lui	a3,0x7
    1a10:	80068693          	addi	a3,a3,-2048 # 6800 <ch32_mess.c.4e4dc584+0x2b40>
    1a14:	0742                	slli	a4,a4,0x10
    1a16:	8341                	srli	a4,a4,0x10
    1a18:	8f55                	or	a4,a4,a3
    1a1a:	0742                	slli	a4,a4,0x10
    1a1c:	8341                	srli	a4,a4,0x10
    1a1e:	00e79e23          	sh	a4,28(a5)
			timer->CCER |= TIM_CC4E | TIM_CC4P;
    1a22:	0207d703          	lhu	a4,32(a5)
    1a26:	668d                	lui	a3,0x3
    1a28:	0742                	slli	a4,a4,0x10
    1a2a:	8341                	srli	a4,a4,0x10
    1a2c:	8f55                	or	a4,a4,a3
    1a2e:	02e79023          	sh	a4,32(a5)
			model->channel = 4;
    1a32:	4791                	li	a5,4
    1a34:	a0a9                	j	1a7e <main+0x80e>
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1 | TIM_OC1PE;		// TIM_OC1PE is used by TIM2 only
    1a36:	0187d683          	lhu	a3,24(a5)
			model->channel = 1;
    1a3a:	00e400a3          	sb	a4,1(s0)
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1 | TIM_OC1PE;		// TIM_OC1PE is used by TIM2 only
    1a3e:	06c2                	slli	a3,a3,0x10
    1a40:	82c1                	srli	a3,a3,0x10
    1a42:	0686e693          	ori	a3,a3,104
    1a46:	00d79c23          	sh	a3,24(a5)
			timer->CCER |= TIM_CC1E | TIM_CC1P;
    1a4a:	0207d683          	lhu	a3,32(a5)
    1a4e:	06c2                	slli	a3,a3,0x10
    1a50:	82c1                	srli	a3,a3,0x10
    1a52:	0036e693          	ori	a3,a3,3
    1a56:	02d79023          	sh	a3,32(a5)
    1a5a:	be4d                	j	160c <main+0x39c>
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1;
    1a5c:	0187d703          	lhu	a4,24(a5)
    1a60:	0742                	slli	a4,a4,0x10
    1a62:	8341                	srli	a4,a4,0x10
    1a64:	06076713          	ori	a4,a4,96
    1a68:	00e79c23          	sh	a4,24(a5)
			timer->CCER |= TIM_CC1NE | TIM_CC1NP;
    1a6c:	0207d703          	lhu	a4,32(a5)
    1a70:	0742                	slli	a4,a4,0x10
    1a72:	8341                	srli	a4,a4,0x10
    1a74:	00c76713          	ori	a4,a4,12
    1a78:	02e79023          	sh	a4,32(a5)
			model->channel = 1;
    1a7c:	4785                	li	a5,1
			model->channel = 4;
    1a7e:	00f400a3          	sb	a5,1(s0)
    1a82:	b669                	j	160c <main+0x39c>
			timer->CHCTLR1 |= TIM_OC2M_2 | TIM_OC2M_1 | TIM_OC2PE;		// TIM_OC2PE is used by TIM2 only
    1a84:	0187d703          	lhu	a4,24(a5)
    1a88:	669d                	lui	a3,0x7
    1a8a:	80068693          	addi	a3,a3,-2048 # 6800 <ch32_mess.c.4e4dc584+0x2b40>
    1a8e:	0742                	slli	a4,a4,0x10
    1a90:	8341                	srli	a4,a4,0x10
    1a92:	8f55                	or	a4,a4,a3
    1a94:	0742                	slli	a4,a4,0x10
    1a96:	8341                	srli	a4,a4,0x10
    1a98:	00e79c23          	sh	a4,24(a5)
			timer->CCER |= TIM_CC2E | TIM_CC2P;
    1a9c:	0207d703          	lhu	a4,32(a5)
    1aa0:	0742                	slli	a4,a4,0x10
    1aa2:	8341                	srli	a4,a4,0x10
    1aa4:	03076713          	ori	a4,a4,48
			timer->CCER |= TIM_CC2NE | TIM_CC2NP;
    1aa8:	02e79023          	sh	a4,32(a5)
			model->channel = 2;
    1aac:	4789                	li	a5,2
    1aae:	bfc1                	j	1a7e <main+0x80e>
			timer->CHCTLR1 |= TIM_OC2M_2 | TIM_OC2M_1;
    1ab0:	0187d703          	lhu	a4,24(a5)
    1ab4:	6699                	lui	a3,0x6
    1ab6:	0742                	slli	a4,a4,0x10
    1ab8:	8341                	srli	a4,a4,0x10
    1aba:	8f55                	or	a4,a4,a3
    1abc:	00e79c23          	sh	a4,24(a5)
			timer->CCER |= TIM_CC2NE | TIM_CC2NP;
    1ac0:	0207d703          	lhu	a4,32(a5)
    1ac4:	0742                	slli	a4,a4,0x10
    1ac6:	8341                	srli	a4,a4,0x10
    1ac8:	0c076713          	ori	a4,a4,192
    1acc:	bff1                	j	1aa8 <main+0x838>
			timer->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;		// TIM_OC3PE is used by TIM2 only
    1ace:	01c7d703          	lhu	a4,28(a5)
    1ad2:	0742                	slli	a4,a4,0x10
    1ad4:	8341                	srli	a4,a4,0x10
    1ad6:	06876713          	ori	a4,a4,104
    1ada:	00e79e23          	sh	a4,28(a5)
			timer->CCER |= TIM_CC3E | TIM_CC3P;
    1ade:	0207d703          	lhu	a4,32(a5)
    1ae2:	0742                	slli	a4,a4,0x10
    1ae4:	8341                	srli	a4,a4,0x10
    1ae6:	30076713          	ori	a4,a4,768
    1aea:	02e79023          	sh	a4,32(a5)
			model->channel = 3;
    1aee:	478d                	li	a5,3
    1af0:	b779                	j	1a7e <main+0x80e>
    switch (model->btn_state) {
    1af2:	458d                	li	a1,3
    1af4:	00b61f63          	bne	a2,a1,1b12 <main+0x8a2>
        if (read == 0) {
    1af8:	ef09                	bnez	a4,1b12 <main+0x8a2>
            model->press_time = time;
    1afa:	4782                	lw	a5,0(sp)
    1afc:	c7c4                	sw	s1,12(a5)
    model->btn_state = newState;
    1afe:	000780a3          	sb	zero,1(a5)
    model->debounce_time = millis();
    1b02:	4792                	lw	a5,4(sp)
    1b04:	4398                	lw	a4,0(a5)
    1b06:	4782                	lw	a5,0(sp)
    1b08:	c3d8                	sw	a4,4(a5)
    model->release_time = millis();
    1b0a:	4792                	lw	a5,4(sp)
    1b0c:	4398                	lw	a4,0(a5)
    1b0e:	4782                	lw	a5,0(sp)
    1b10:	c798                	sw	a4,8(a5)
	}
}


void fun_timPWM_task(uint32_t time, TIM_PWM_t* model) {
	if (time - model->timeRef < 5) { return; }
    1b12:	4458                	lw	a4,12(s0)
    1b14:	4511                	li	a0,4
    1b16:	40e48733          	sub	a4,s1,a4
    1b1a:	02e57663          	bgeu	a0,a4,1b46 <main+0x8d6>
	switch(model->channel) {
    1b1e:	00144603          	lbu	a2,1(s0)
	model->timeRef = time;
    1b22:	c444                	sw	s1,12(s0)
	switch(model->channel) {
    1b24:	430d                	li	t1,3

	fun_timPWM_setpw(model, model->counter);
    1b26:	4418                	lw	a4,8(s0)
	TIM_TypeDef* timer = model->TIM;
    1b28:	404c                	lw	a1,4(s0)
	switch(model->channel) {
    1b2a:	14660863          	beq	a2,t1,1c7a <main+0xa0a>
    1b2e:	12c36563          	bltu	t1,a2,1c58 <main+0x9e8>
    1b32:	4505                	li	a0,1
    1b34:	12a60963          	beq	a2,a0,1c66 <main+0x9f6>
    1b38:	4509                	li	a0,2
    1b3a:	12a60b63          	beq	a2,a0,1c70 <main+0xa00>
	model->counter++;
    1b3e:	0705                	addi	a4,a4,1
	model->counter &= 255;
    1b40:	0ff77713          	andi	a4,a4,255
    1b44:	c418                	sw	a4,8(s0)
		//# prioritize tasks
		fun_button_task(now, &button1, button_onChanged);
		fun_timPWM_task(now, &pwm_CH1c);
		// Neo_task(now);

		if (now - session.timeRef_1sec > 1000) {
    1b46:	47a2                	lw	a5,8(sp)
    1b48:	3e800613          	li	a2,1000
    1b4c:	40f48733          	sub	a4,s1,a5
    1b50:	16e67263          	bgeu	a2,a4,1cb4 <main+0xa44>
			session.timeRef_1sec = now;

			if (i2cMaster_mode) {
    1b54:	47e2                	lw	a5,24(sp)
    1b56:	c3a9                	beqz	a5,1b98 <main+0x928>
        case '-':	strcpy(loading_char, "\\"); break;
    }
}

void mngI2c_loadCounter(uint32_t counter, uint32_t runTime) {
	sprintf(str_output, "%s cyc/s %lu ~ %lums", loading_char, counter, runTime);
    1b58:	4742                	lw	a4,16(sp)
    1b5a:	6589                	lui	a1,0x2
    1b5c:	c6818613          	addi	a2,gp,-920 # 20000064 <loading_char>
    1b60:	4c858593          	addi	a1,a1,1224 # 24c8 <string0+0xe8>
    1b64:	20c18513          	addi	a0,gp,524 # 20000608 <str_output>
    1b68:	cbcff0ef          	jal	ra,1024 <sprintf>
	mngI2c_load_printBuff(str_output, 7);
    1b6c:	451d                	li	a0,7
    1b6e:	d1aff0ef          	jal	ra,1088 <mngI2c_load_printBuff.constprop.0>
    switch(loading_char[0]) {
    1b72:	c6818293          	addi	t0,gp,-920 # 20000064 <loading_char>
    1b76:	0002c703          	lbu	a4,0(t0)
    1b7a:	05c00693          	li	a3,92
    1b7e:	833e                	mv	t1,a5
    1b80:	10d70a63          	beq	a4,a3,1c94 <main+0xa24>
    1b84:	10e6e063          	bltu	a3,a4,1c84 <main+0xa14>
    1b88:	02d00693          	li	a3,45
    1b8c:	12d70063          	beq	a4,a3,1cac <main+0xa3c>
    1b90:	02f00693          	li	a3,47
    1b94:	10d70863          	beq	a4,a3,1ca4 <main+0xa34>
			session.timeRef_1sec = now;
    1b98:	c426                	sw	s1,8(sp)
				mngI2c_loadCounter(session.cycle_count, session.fullCycle_time);
			}
			session.cycle_count = 0;
    1b9a:	4681                	li	a3,0
    1b9c:	aa41                	j	1d2c <main+0xabc>
            _reset_timers(BTN_UP, model);        // First Release

        } else {
            // Long press detection
            uint32_t press_duration = time - model->press_time;
    1b9e:	4782                	lw	a5,0(sp)
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1ba0:	6705                	lui	a4,0x1
    1ba2:	fa070713          	addi	a4,a4,-96 # fa0 <mini_vpprintf+0x188>
            uint32_t press_duration = time - model->press_time;
    1ba6:	47d0                	lw	a2,12(a5)
    1ba8:	40c48633          	sub	a2,s1,a2
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1bac:	f6c773e3          	bgeu	a4,a2,1b12 <main+0x8a2>
			printf("Long Press\n"); break;
    1bb0:	6509                	lui	a0,0x2
    1bb2:	49050513          	addi	a0,a0,1168 # 2490 <string0+0xb0>
    1bb6:	ce36                	sw	a3,28(sp)
    1bb8:	ddaff0ef          	jal	ra,1192 <puts>
	mngI2c_load_buttonState(millis(), event);
    1bbc:	4792                	lw	a5,4(sp)
	sprintf(str_output, "button: %d", state);
    1bbe:	6589                	lui	a1,0x2
    1bc0:	4398                	lw	a4,0(a5)
    1bc2:	460d                	li	a2,3
    1bc4:	49c58593          	addi	a1,a1,1180 # 249c <string0+0xbc>
    1bc8:	20c18513          	addi	a0,gp,524 # 20000608 <str_output>
    1bcc:	c58ff0ef          	jal	ra,1024 <sprintf>
	mngI2c_load_printBuff(str_output, 6);
    1bd0:	4519                	li	a0,6
    1bd2:	cb6ff0ef          	jal	ra,1088 <mngI2c_load_printBuff.constprop.0>
    model->release_time = millis();
    1bd6:	46f2                	lw	a3,28(sp)
    1bd8:	bf2d                	j	1b12 <main+0x8a2>
            }
        }
        break;

    case BTN_UP: {
        uint32_t release_duration = time - model->release_time;
    1bda:	4782                	lw	a5,0(sp)
    1bdc:	4790                	lw	a2,8(a5)
    1bde:	40c48633          	sub	a2,s1,a2

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    1be2:	eb01                	bnez	a4,1bf2 <main+0x982>
    1be4:	09f00713          	li	a4,159
    1be8:	00c76563          	bltu	a4,a2,1bf2 <main+0x982>
    model->btn_state = newState;
    1bec:	00b780a3          	sb	a1,1(a5)
    1bf0:	bf09                	j	1b02 <main+0x892>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    1bf2:	0a000713          	li	a4,160
    1bf6:	f0c77ee3          	bgeu	a4,a2,1b12 <main+0x8a2>
			printf("Single Click\n");
    1bfa:	6509                	lui	a0,0x2
    1bfc:	4a850513          	addi	a0,a0,1192 # 24a8 <string0+0xc8>
    1c00:	ce36                	sw	a3,28(sp)
    1c02:	d90ff0ef          	jal	ra,1192 <puts>
	mngI2c_load_buttonState(millis(), event);
    1c06:	4792                	lw	a5,4(sp)

// Keyboard (8 bytes)
static uint8_t tsajoystick[8] = { 0x00 };

void usb_setKey(uint8_t key) {
    tsajoystick[4] = key;      // 0x05 = "b"; 0x53 = NUMLOCK; 0x39 = CAPSLOCK;
    1c08:	4615                	li	a2,5
    1c0a:	c8c18823          	sb	a2,-880(gp) # 2000008c <tsajoystick+0x4>
    1c0e:	4398                	lw	a4,0(a5)
	sprintf(str_output, "button: %d", state);
    1c10:	4605                	li	a2,1
    1c12:	6589                	lui	a1,0x2
    1c14:	49c58593          	addi	a1,a1,1180 # 249c <string0+0xbc>
    1c18:	20c18513          	addi	a0,gp,524 # 20000608 <str_output>
    1c1c:	c08ff0ef          	jal	ra,1024 <sprintf>
	mngI2c_load_printBuff(str_output, 6);
    1c20:	4519                	li	a0,6
    1c22:	c66ff0ef          	jal	ra,1088 <mngI2c_load_printBuff.constprop.0>
    model->btn_state = newState;
    1c26:	4782                	lw	a5,0(sp)
    1c28:	470d                	li	a4,3
    1c2a:	00e780a3          	sb	a4,1(a5)
    model->debounce_time = millis();
    1c2e:	4792                	lw	a5,4(sp)
    1c30:	4398                	lw	a4,0(a5)
    1c32:	4782                	lw	a5,0(sp)
    1c34:	c3d8                	sw	a4,4(a5)
    model->release_time = millis();
    1c36:	4792                	lw	a5,4(sp)
    1c38:	4398                	lw	a4,0(a5)
    1c3a:	4782                	lw	a5,0(sp)
    1c3c:	c798                	sw	a4,8(a5)
    1c3e:	bf61                	j	1bd6 <main+0x966>
        break;
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
    1c40:	ec0709e3          	beqz	a4,1b12 <main+0x8a2>
			printf("Double Click\n");
    1c44:	6789                	lui	a5,0x2
    1c46:	4b878513          	addi	a0,a5,1208 # 24b8 <string0+0xd8>
    1c4a:	ce36                	sw	a3,28(sp)
    1c4c:	d46ff0ef          	jal	ra,1192 <puts>
	mngI2c_load_buttonState(millis(), event);
    1c50:	4792                	lw	a5,4(sp)
	sprintf(str_output, "button: %d", state);
    1c52:	4609                	li	a2,2
    1c54:	4398                	lw	a4,0(a5)
    1c56:	bf75                	j	1c12 <main+0x9a2>
	switch(model->channel) {
    1c58:	eea613e3          	bne	a2,a0,1b3e <main+0x8ce>
    1c5c:	01071613          	slli	a2,a4,0x10
    1c60:	8241                	srli	a2,a2,0x10
		case 4: timer->CH4CVR = width; break;
    1c62:	c1b0                	sw	a2,64(a1)
    1c64:	bde9                	j	1b3e <main+0x8ce>
    1c66:	01071613          	slli	a2,a4,0x10
    1c6a:	8241                	srli	a2,a2,0x10
		case 1: timer->CH1CVR = width; break;
    1c6c:	d9d0                	sw	a2,52(a1)
    1c6e:	bdc1                	j	1b3e <main+0x8ce>
    1c70:	01071613          	slli	a2,a4,0x10
    1c74:	8241                	srli	a2,a2,0x10
		case 2: timer->CH2CVR = width; break;
    1c76:	dd90                	sw	a2,56(a1)
    1c78:	b5d9                	j	1b3e <main+0x8ce>
    1c7a:	01071613          	slli	a2,a4,0x10
    1c7e:	8241                	srli	a2,a2,0x10
		case 3: timer->CH3CVR = width; break;
    1c80:	ddd0                	sw	a2,60(a1)
    1c82:	bd75                	j	1b3e <main+0x8ce>
    switch(loading_char[0]) {
    1c84:	07c00693          	li	a3,124
    1c88:	f0d718e3          	bne	a4,a3,1b98 <main+0x928>
        case '|':	strcpy(loading_char, "/"); break;
    1c8c:	6589                	lui	a1,0x2
    1c8e:	4e458593          	addi	a1,a1,1252 # 24e4 <string0+0x104>
    1c92:	a021                	j	1c9a <main+0xa2a>
        case '\\':	strcpy(loading_char, "|"); break;
    1c94:	6589                	lui	a1,0x2
    1c96:	4e058593          	addi	a1,a1,1248 # 24e0 <string0+0x100>
        case '-':	strcpy(loading_char, "\\"); break;
    1c9a:	c6818513          	addi	a0,gp,-920 # 20000064 <loading_char>
    1c9e:	bbaff0ef          	jal	ra,1058 <strcpy>
    1ca2:	bddd                	j	1b98 <main+0x928>
        case '/':	strcpy(loading_char, "-"); break;
    1ca4:	6589                	lui	a1,0x2
    1ca6:	4e858593          	addi	a1,a1,1256 # 24e8 <string0+0x108>
    1caa:	bfc5                	j	1c9a <main+0xa2a>
        case '-':	strcpy(loading_char, "\\"); break;
    1cac:	6589                	lui	a1,0x2
    1cae:	4ec58593          	addi	a1,a1,1260 # 24ec <string0+0x10c>
    1cb2:	b7e5                	j	1c9a <main+0xa2a>
				// uint32_t runtime_tft = SysTick_getRunTime(mod_st7735_test2);
				// printf("ST7735 runtime: %lu us\n", runtime_tft);
			#endif
		}

		else if (now - session.timeRef_100ms > 100) {
    1cb4:	47b2                	lw	a5,12(sp)
    1cb6:	06400613          	li	a2,100
    1cba:	40f48733          	sub	a4,s1,a5
    1cbe:	06e67d63          	bgeu	a2,a4,1d38 <main+0xac8>
	cycle_loading_char();
}

void mngI2c_printBuff_task() {
	if (!flag_printBuff_data) return;
    1cc2:	c601c603          	lbu	a2,-928(gp) # 2000005c <flag_printBuff_data>
    1cc6:	c6018793          	addi	a5,gp,-928 # 2000005c <flag_printBuff_data>
    1cca:	c83e                	sw	a5,16(sp)
			session.timeRef_100ms = now;
    1ccc:	c626                	sw	s1,12(sp)
    1cce:	ce39                	beqz	a2,1d2c <main+0xabc>
    1cd0:	10c18713          	addi	a4,gp,268 # 20000508 <printBuff>
    1cd4:	c63e                	sw	a5,12(sp)

	for (int i = 0; i < PRINT_BUFF_SIZE; i++) {
		if (printBuff[i].line_num == 0) continue;
    1cd6:	01974583          	lbu	a1,25(a4)
    1cda:	d22e                	sw	a1,36(sp)
    1cdc:	c58d                	beqz	a1,1d06 <main+0xa96>
	if (i2c_ping(0x3C) != I2C_OK) return;
    1cde:	03c00513          	li	a0,60
    1ce2:	d03a                	sw	a4,32(sp)
    1ce4:	ce36                	sw	a3,28(sp)
    1ce6:	f42fe0ef          	jal	ra,428 <i2c_ping>
    1cea:	46f2                	lw	a3,28(sp)
    1cec:	5702                	lw	a4,32(sp)
    1cee:	ed01                	bnez	a0,1d06 <main+0xa96>
		modI2C_display(printBuff[i].str, printBuff[i].line_num-1);
    1cf0:	5592                	lw	a1,36(sp)
	ssd1306_print_str_at(str, line, 0);
    1cf2:	853a                	mv	a0,a4
    1cf4:	d036                	sw	a3,32(sp)
		modI2C_display(printBuff[i].str, printBuff[i].line_num-1);
    1cf6:	15fd                	addi	a1,a1,-1
	ssd1306_print_str_at(str, line, 0);
    1cf8:	0ff5f593          	andi	a1,a1,255
    1cfc:	ce3a                	sw	a4,28(sp)
    1cfe:	c22ff0ef          	jal	ra,1120 <ssd1306_print_str_at.constprop.0>
    1d02:	5682                	lw	a3,32(sp)
    1d04:	4772                	lw	a4,28(sp)
	for (int i = 0; i < PRINT_BUFF_SIZE; i++) {
    1d06:	0769                	addi	a4,a4,26
    1d08:	18e18793          	addi	a5,gp,398 # 2000058a <printBuff+0x82>
    1d0c:	fce795e3          	bne	a5,a4,1cd6 <main+0xa66>
	}

	//! Clear printBuff
	memset(printBuff, 0, sizeof(printBuff));
    1d10:	47b2                	lw	a5,12(sp)
    1d12:	08200613          	li	a2,130
    1d16:	4581                	li	a1,0
    1d18:	10c18513          	addi	a0,gp,268 # 20000508 <printBuff>
    1d1c:	ce36                	sw	a3,28(sp)
    1d1e:	b28ff0ef          	jal	ra,1046 <memset>
	flag_printBuff_data = 0;
    1d22:	47c2                	lw	a5,16(sp)
    1d24:	46f2                	lw	a3,28(sp)
    1d26:	c626                	sw	s1,12(sp)
    1d28:	00078023          	sb	zero,0(a5)

			// fun_encoder_task(&encoder_a, encoder_onChanged);
			// fun_joystick_task(joystick_onChanged);
		}

		session.fullCycle_time = millis() - now;
    1d2c:	4792                	lw	a5,4(sp)
    1d2e:	4398                	lw	a4,0(a5)
    1d30:	409707b3          	sub	a5,a4,s1
    1d34:	c83e                	sw	a5,16(sp)
	while(1) {
    1d36:	b621                	j	183e <main+0x5ce>
		else if (now - session.timeRef_50ms > 50) {
    1d38:	47d2                	lw	a5,20(sp)
    1d3a:	03200613          	li	a2,50
    1d3e:	40f48733          	sub	a4,s1,a5
    1d42:	fee675e3          	bgeu	a2,a4,1d2c <main+0xabc>
			session.timeRef_50ms = now;
    1d46:	ca26                	sw	s1,20(sp)
    1d48:	b7d5                	j	1d2c <main+0xabc>

00001d4a <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
    1d4a:	1151                	addi	sp,sp,-12
    1d4c:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1d4e:	e000f7b7          	lui	a5,0xe000f
{
    1d52:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1d54:	4b98                	lw	a4,16(a5)
{
    1d56:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1d58:	66b1                	lui	a3,0xc
    1d5a:	b8068693          	addi	a3,a3,-1152 # bb80 <rv003usb.c.2a5f0f89+0x3f3b>
    1d5e:	9736                	add	a4,a4,a3
    1d60:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
    1d62:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
    1d66:	c8818793          	addi	a5,gp,-888 # 20000084 <systick_millis>
    1d6a:	4398                	lw	a4,0(a5)
}
    1d6c:	46a2                	lw	a3,8(sp)
	systick_millis++;
    1d6e:	0705                	addi	a4,a4,1
    1d70:	c398                	sw	a4,0(a5)
}
    1d72:	4712                	lw	a4,4(sp)
    1d74:	4782                	lw	a5,0(sp)
    1d76:	0131                	addi	sp,sp,12
    1d78:	30200073          	mret

00001d7c <DMA1_Channel3_IRQHandler>:
{
    1d7c:	fcc10113          	addi	sp,sp,-52
    1d80:	c23e                	sw	a5,4(sp)
	volatile int intfr = DMA1->INTFR;
    1d82:	400207b7          	lui	a5,0x40020
    1d86:	439c                	lw	a5,0(a5)
{
    1d88:	d022                	sw	s0,32(sp)
    1d8a:	ce26                	sw	s1,28(sp)
    1d8c:	d806                	sw	ra,48(sp)
    1d8e:	d616                	sw	t0,44(sp)
    1d90:	d41a                	sw	t1,40(sp)
    1d92:	d21e                	sw	t2,36(sp)
    1d94:	cc2a                	sw	a0,24(sp)
    1d96:	ca2e                	sw	a1,20(sp)
    1d98:	c832                	sw	a2,16(sp)
    1d9a:	c636                	sw	a3,12(sp)
    1d9c:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    1d9e:	c03e                	sw	a5,0(sp)
		DMA1->INTFCR = DMA1_IT_GL3;
    1da0:	40020437          	lui	s0,0x40020
    1da4:	10000493          	li	s1,256
    1da8:	c044                	sw	s1,4(s0)
		if( intfr & DMA1_IT_HT3 )
    1daa:	4782                	lw	a5,0(sp)
    1dac:	4007f793          	andi	a5,a5,1024
    1db0:	c791                	beqz	a5,1dbc <DMA1_Channel3_IRQHandler+0x40>
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    1db2:	4585                	li	a1,1
    1db4:	c9418513          	addi	a0,gp,-876 # 20000090 <WS2812dmabuff>
    1db8:	977fe0ef          	jal	ra,72e <WS2812FillBuffSec.constprop.0>
		if( intfr & DMA1_IT_TC3 )
    1dbc:	4782                	lw	a5,0(sp)
    1dbe:	2007f793          	andi	a5,a5,512
    1dc2:	c791                	beqz	a5,1dce <DMA1_Channel3_IRQHandler+0x52>
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    1dc4:	4581                	li	a1,0
    1dc6:	cc418513          	addi	a0,gp,-828 # 200000c0 <WS2812dmabuff+0x30>
    1dca:	965fe0ef          	jal	ra,72e <WS2812FillBuffSec.constprop.0>
		intfr = DMA1->INTFR;
    1dce:	401c                	lw	a5,0(s0)
    1dd0:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    1dd2:	4782                	lw	a5,0(sp)
    1dd4:	1007f793          	andi	a5,a5,256
    1dd8:	fbe1                	bnez	a5,1da8 <DMA1_Channel3_IRQHandler+0x2c>
}
    1dda:	5402                	lw	s0,32(sp)
    1ddc:	50c2                	lw	ra,48(sp)
    1dde:	52b2                	lw	t0,44(sp)
    1de0:	5322                	lw	t1,40(sp)
    1de2:	5392                	lw	t2,36(sp)
    1de4:	44f2                	lw	s1,28(sp)
    1de6:	4562                	lw	a0,24(sp)
    1de8:	45d2                	lw	a1,20(sp)
    1dea:	4642                	lw	a2,16(sp)
    1dec:	46b2                	lw	a3,12(sp)
    1dee:	4722                	lw	a4,8(sp)
    1df0:	4792                	lw	a5,4(sp)
    1df2:	03410113          	addi	sp,sp,52
    1df6:	30200073          	mret

00001dfa <usb_pid_handle_in>:
	NVIC_EnableIRQ( EXTI7_0_IRQn );
}


void usb_pid_handle_in( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )
{
    1dfa:	1131                	addi	sp,sp,-20
    1dfc:	c622                	sw	s0,12(sp)
    1dfe:	c426                	sw	s1,8(sp)
    1e00:	c806                	sw	ra,16(sp)
	ist->current_endpoint = endp;
	struct usb_endpoint * e = &ist->eps[endp];

	int tosend = 0;
	uint8_t * sendnow;
	int sendtok = e->toggle_in?0b01001011:0b11000011;
    1e02:	00561793          	slli	a5,a2,0x5
{
    1e06:	843a                	mv	s0,a4
	ist->current_endpoint = endp;
    1e08:	c310                	sw	a2,0(a4)
	int sendtok = e->toggle_in?0b01001011:0b11000011;
    1e0a:	973e                	add	a4,a4,a5
    1e0c:	5318                	lw	a4,32(a4)
{
    1e0e:	84b2                	mv	s1,a2
	int sendtok = e->toggle_in?0b01001011:0b11000011;
    1e10:	0c300693          	li	a3,195
    1e14:	c319                	beqz	a4,1e1a <usb_pid_handle_in+0x20>
    1e16:	04b00693          	li	a3,75



#if RV003USB_USE_REBOOT_FEATURE_REPORT
	if( ist->reboot_armed == 2 )
    1e1a:	4450                	lw	a2,12(s0)
    1e1c:	4709                	li	a4,2
    1e1e:	04e61663          	bne	a2,a4,1e6a <usb_pid_handle_in+0x70>
	{
		usb_send_empty( sendtok );
    1e22:	8536                	mv	a0,a3
    1e24:	c23e                	sw	a5,4(sp)
    1e26:	c036                	sw	a3,0(sp)
    1e28:	21a1                	jal	2270 <usb_send_empty>

		// Initiate boot into bootloader
		FLASH->BOOT_MODEKEYR = FLASH_KEY1;
    1e2a:	45670637          	lui	a2,0x45670
    1e2e:	40022737          	lui	a4,0x40022
    1e32:	12360613          	addi	a2,a2,291 # 45670123 <_eusrstack+0x2566f923>
    1e36:	d710                	sw	a2,40(a4)
		FLASH->BOOT_MODEKEYR = FLASH_KEY2;
    1e38:	cdef9637          	lui	a2,0xcdef9
    1e3c:	9ab60613          	addi	a2,a2,-1621 # cdef89ab <_eusrstack+0xadef81ab>
    1e40:	d710                	sw	a2,40(a4)
		FLASH->STATR = 1<<14; // 1<<14 is zero, so, boot bootloader code. Unset for user code.
    1e42:	6611                	lui	a2,0x4
    1e44:	c750                	sw	a2,12(a4)
		FLASH->CTLR = CR_LOCK_Set;
    1e46:	08000613          	li	a2,128
    1e4a:	cb10                	sw	a2,16(a4)
		RCC->RSTSCKR |= 0x1000000;
    1e4c:	40021637          	lui	a2,0x40021
    1e50:	5258                	lw	a4,36(a2)
    1e52:	010005b7          	lui	a1,0x1000
		PFIC->SCTLR = 1<<31;
    1e56:	4792                	lw	a5,4(sp)
		RCC->RSTSCKR |= 0x1000000;
    1e58:	8f4d                	or	a4,a4,a1
		PFIC->SCTLR = 1<<31;
    1e5a:	4682                	lw	a3,0(sp)
		RCC->RSTSCKR |= 0x1000000;
    1e5c:	d258                	sw	a4,36(a2)
		PFIC->SCTLR = 1<<31;
    1e5e:	e000f737          	lui	a4,0xe000f
    1e62:	80000637          	lui	a2,0x80000
    1e66:	d0c72823          	sw	a2,-752(a4) # e000ed10 <_eusrstack+0xc000e510>
	}
#endif

#if RV003USB_HANDLE_IN_REQUEST
	if( e->custom || endp )
    1e6a:	97a2                	add	a5,a5,s0
    1e6c:	579c                	lw	a5,40(a5)
    1e6e:	8fc5                	or	a5,a5,s1
    1e70:	c78d                	beqz	a5,1e9a <usb_pid_handle_in+0xa0>

void usb_handle_user_in_request(
	struct usb_endpoint* e, uint8_t* scratchpad, int endp,
	uint32_t sendtok, struct rv003usb_internal* ist
) {
	if( endp == 1 ) {
    1e72:	4785                	li	a5,1
    1e74:	00f48e63          	beq	s1,a5,1e90 <usb_pid_handle_in+0x96>
		// 	case 2: tsajoystick[1] = -1; tsajoystick[2] = 0; break;
		// 	case 3: tsajoystick[1] =  0; tsajoystick[2] =-1; break;
		// }
		// usb_send_data( tsajoystick, 4, 0, sendtok );
	}
	else if( endp == 2 ) {
    1e78:	4789                	li	a5,2
    1e7a:	02f49b63          	bne	s1,a5,1eb0 <usb_pid_handle_in+0xb6>
		usb_send_data( tsajoystick, 8, 0, sendtok );
    1e7e:	c8c18413          	addi	s0,gp,-884 # 20000088 <tsajoystick>
    1e82:	4601                	li	a2,0
    1e84:	45a1                	li	a1,8
    1e86:	c8c18513          	addi	a0,gp,-884 # 20000088 <tsajoystick>
    1e8a:	2ed5                	jal	227e <usb_send_data>
    tsajoystick[4] = key;      // 0x05 = "b"; 0x53 = NUMLOCK; 0x39 = CAPSLOCK;
    1e8c:	00040223          	sb	zero,4(s0) # 40020004 <_eusrstack+0x2001f804>
	}
	else
	{
		usb_send_data( sendnow, tosend, 0, sendtok );
	}
}
    1e90:	40c2                	lw	ra,16(sp)
    1e92:	4432                	lw	s0,12(sp)
    1e94:	44a2                	lw	s1,8(sp)
    1e96:	0151                	addi	sp,sp,20
    1e98:	8082                	ret
	int offset = (e->count)<<3;
    1e9a:	4c48                	lw	a0,28(s0)
	sendnow = tsend + offset;
    1e9c:	5c1c                	lw	a5,56(s0)
	tosend = (int)e->max_len - offset;
    1e9e:	544c                	lw	a1,44(s0)
	int offset = (e->count)<<3;
    1ea0:	050e                	slli	a0,a0,0x3
	tosend = (int)e->max_len - offset;
    1ea2:	8d89                	sub	a1,a1,a0
	sendnow = tsend + offset;
    1ea4:	953e                	add	a0,a0,a5
	if( tosend > ENDPOINT0_SIZE ) tosend = ENDPOINT0_SIZE;
    1ea6:	47a1                	li	a5,8
    1ea8:	00b7ca63          	blt	a5,a1,1ebc <usb_pid_handle_in+0xc2>
	if( tosend <= 0 )
    1eac:	00b04963          	bgtz	a1,1ebe <usb_pid_handle_in+0xc4>
}
    1eb0:	4432                	lw	s0,12(sp)
    1eb2:	40c2                	lw	ra,16(sp)
    1eb4:	44a2                	lw	s1,8(sp)
		usb_send_empty( sendtok );
    1eb6:	8536                	mv	a0,a3
}
    1eb8:	0151                	addi	sp,sp,20
		usb_send_empty( sendtok );
    1eba:	ae5d                	j	2270 <usb_send_empty>
	if( tosend > ENDPOINT0_SIZE ) tosend = ENDPOINT0_SIZE;
    1ebc:	45a1                	li	a1,8
}
    1ebe:	4432                	lw	s0,12(sp)
    1ec0:	40c2                	lw	ra,16(sp)
    1ec2:	44a2                	lw	s1,8(sp)
		usb_send_data( sendnow, tosend, 0, sendtok );
    1ec4:	4601                	li	a2,0
}
    1ec6:	0151                	addi	sp,sp,20
		usb_send_data( sendnow, tosend, 0, sendtok );
    1ec8:	ae5d                	j	227e <usb_send_data>

00001eca <usb_pid_handle_data>:
}

void usb_pid_handle_data( uint32_t this_token, uint8_t * data, uint32_t which_data, uint32_t length, struct rv003usb_internal * ist )
{
	//Received data from host.
	int epno = ist->current_endpoint;
    1eca:	00072303          	lw	t1,0(a4)

	length -= 3;
	uint8_t * data_in = __builtin_assume_aligned( data, 4 );

	// Already received this packet.
	if( e->toggle_out != which_data )
    1ece:	00531793          	slli	a5,t1,0x5
    1ed2:	97ba                	add	a5,a5,a4
    1ed4:	53c8                	lw	a0,36(a5)
    1ed6:	04c51863          	bne	a0,a2,1f26 <usb_pid_handle_data+0x5c>
	{
		goto just_ack;
	}

	e->toggle_out = !e->toggle_out;
    1eda:	00153513          	seqz	a0,a0
    1ede:	d3c8                	sw	a0,36(a5)


#if RV003USB_HANDLE_USER_DATA || RV003USB_USE_REBOOT_FEATURE_REPORT || RV003USB_USB_TERMINAL
	if( epno || ( !ist->setup_request && length > 3 )  )
    1ee0:	00031863          	bnez	t1,1ef0 <usb_pid_handle_data+0x26>
    1ee4:	471c                	lw	a5,8(a4)
    1ee6:	e7b1                	bnez	a5,1f32 <usb_pid_handle_data+0x68>
	length -= 3;
    1ee8:	16f5                	addi	a3,a3,-3
	if( epno || ( !ist->setup_request && length > 3 )  )
    1eea:	478d                	li	a5,3
    1eec:	02d7fd63          	bgeu	a5,a3,1f26 <usb_pid_handle_data+0x5c>
	{
#if RV003USB_USE_REBOOT_FEATURE_REPORT
		if( ist->reboot_armed )
    1ef0:	475c                	lw	a5,12(a4)
    1ef2:	cb95                	beqz	a5,1f26 <usb_pid_handle_data+0x5c>
		{
			uint32_t * base = __builtin_assume_aligned( data_in, 4 );
			if( epno == 0 && base[0] == 0xaa3412fd && (base[1] & 0x00ffffff) == 0x00ddccbb )
    1ef4:	02031763          	bnez	t1,1f22 <usb_pid_handle_data+0x58>
    1ef8:	4194                	lw	a3,0(a1)
    1efa:	aa3417b7          	lui	a5,0xaa341
    1efe:	2fd78793          	addi	a5,a5,765 # aa3412fd <_eusrstack+0x8a340afd>
    1f02:	02f69063          	bne	a3,a5,1f22 <usb_pid_handle_data+0x58>
    1f06:	41dc                	lw	a5,4(a1)
    1f08:	00ddd6b7          	lui	a3,0xddd
    1f0c:	cbb68693          	addi	a3,a3,-837 # ddccbb <rv003usb.c.2a5f0f89+0xdd5076>
    1f10:	07a2                	slli	a5,a5,0x8
    1f12:	83a1                	srli	a5,a5,0x8
    1f14:	00d79763          	bne	a5,a3,1f22 <usb_pid_handle_data+0x58>
			{
				e->count = 7;
    1f18:	479d                	li	a5,7
    1f1a:	cf5c                	sw	a5,28(a4)
				ist->reboot_armed = 2;
    1f1c:	4789                	li	a5,2

		if( reqShl == (0x0921>>1) )
		{
			// Class request (Will be writing)  This is hid_send_feature_report
#if RV003USB_USE_REBOOT_FEATURE_REPORT
			if( wvi == 0x000003fd ) ist->reboot_armed = 1;
    1f1e:	c75c                	sw	a5,12(a4)
    1f20:	a019                	j	1f26 <usb_pid_handle_data+0x5c>
				ist->reboot_armed = 0;
    1f22:	00072623          	sw	zero,12(a4)
		}
	}
just_ack:
	{
		//Got the right data.  Acknowledge.
		usb_send_data( 0, 0, 2, 0xD2 ); // Send ACK
    1f26:	0d200693          	li	a3,210
    1f2a:	4609                	li	a2,2
    1f2c:	4581                	li	a1,0
    1f2e:	4501                	li	a0,0
    1f30:	a6b9                	j	227e <usb_send_data>
		uint32_t wvi = s->lValueLSBIndexMSB;
    1f32:	0045d683          	lhu	a3,4(a1) # 1000004 <rv003usb.c.2a5f0f89+0xff83bf>
    1f36:	0025d783          	lhu	a5,2(a1)
		uint32_t wLength = s->wLength;
    1f3a:	0065d503          	lhu	a0,6(a1)
		uint32_t wvi = s->lValueLSBIndexMSB;
    1f3e:	06c2                	slli	a3,a3,0x10
    1f40:	8edd                	or	a3,a3,a5
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
    1f42:	0005d783          	lhu	a5,0(a1)
		e->count = 0;
    1f46:	00072e23          	sw	zero,28(a4)
		e->opaque = 0;
    1f4a:	02072c23          	sw	zero,56(a4)
		e->custom = 0;
    1f4e:	02072423          	sw	zero,40(a4)
		e->max_len = 0;
    1f52:	02072623          	sw	zero,44(a4)
		ist->setup_request = 0;
    1f56:	00072423          	sw	zero,8(a4)
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
    1f5a:	8385                	srli	a5,a5,0x1
		if( reqShl == (0x0921>>1) )
    1f5c:	49000613          	li	a2,1168
    1f60:	00c79863          	bne	a5,a2,1f70 <usb_pid_handle_data+0xa6>
			if( wvi == 0x000003fd ) ist->reboot_armed = 1;
    1f64:	3fd00793          	li	a5,1021
    1f68:	faf69fe3          	bne	a3,a5,1f26 <usb_pid_handle_data+0x5c>
    1f6c:	4785                	li	a5,1
    1f6e:	bf45                	j	1f1e <usb_pid_handle_data+0x54>
		if( reqShl == (0x0680>>1) ) // GET_DESCRIPTOR = 6 (msb)
    1f70:	34000613          	li	a2,832
    1f74:	02c79d63          	bne	a5,a2,1fae <usb_pid_handle_data+0xe4>
    1f78:	678d                	lui	a5,0x3
    1f7a:	82878793          	addi	a5,a5,-2008 # 2828 <descriptor_list>
    1f7e:	06078593          	addi	a1,a5,96
					e->max_len = (swLen < elLen)?swLen:elLen;
    1f82:	832a                	mv	t1,a0
				if( dl->lIndexValue == wvi )
    1f84:	4390                	lw	a2,0(a5)
    1f86:	02d61063          	bne	a2,a3,1fa6 <usb_pid_handle_data+0xdc>
					e->opaque = (uint8_t*)dl->addr;
    1f8a:	43d0                	lw	a2,4(a5)
    1f8c:	df10                	sw	a2,56(a4)
					uint16_t elLen = dl->length;
    1f8e:	0087c603          	lbu	a2,8(a5)
					e->max_len = (swLen < elLen)?swLen:elLen;
    1f92:	01061293          	slli	t0,a2,0x10
    1f96:	0102d293          	srli	t0,t0,0x10
    1f9a:	00557363          	bgeu	a0,t0,1fa0 <usb_pid_handle_data+0xd6>
    1f9e:	861a                	mv	a2,t1
    1fa0:	0642                	slli	a2,a2,0x10
    1fa2:	8241                	srli	a2,a2,0x10
    1fa4:	d750                	sw	a2,44(a4)
			for( i = 0; i < DESCRIPTOR_LIST_ENTRIES; i++ )
    1fa6:	07b1                	addi	a5,a5,12
    1fa8:	fcf59ee3          	bne	a1,a5,1f84 <usb_pid_handle_data+0xba>
    1fac:	bfad                	j	1f26 <usb_pid_handle_data+0x5c>
		else if( reqShl == (0x0500>>1) ) // SET_ADDRESS = 0x05
    1fae:	28000613          	li	a2,640
    1fb2:	f6c79ae3          	bne	a5,a2,1f26 <usb_pid_handle_data+0x5c>
			ist->my_address = wvi;
    1fb6:	c354                	sw	a3,4(a4)
    1fb8:	b7bd                	j	1f26 <usb_pid_handle_data+0x5c>
	...

00001fbc <EXTI7_0_IRQHandler>:
.section .text.vector_handler
.global EXTI7_0_IRQHandler

.balign 4
EXTI7_0_IRQHandler:
	addi	sp,sp,-80
    1fbc:	715d                	addi	sp,sp,-80
	sw	a0, 0(sp)
    1fbe:	c02a                	sw	a0,0(sp)
	sw	a5, 20(sp)
    1fc0:	ca3e                	sw	a5,20(sp)
	la a5, USB_GPIO_BASE
    1fc2:	400117b7          	lui	a5,0x40011
    1fc6:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
	c.lw a0, INDR_OFFSET(a5) // MUST check SE0 immediately.
    1fca:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK
    1fcc:	8961                	andi	a0,a0,24

	sw	a1, 4(sp)
    1fce:	c22e                	sw	a1,4(sp)
	sw	a2, 8(sp)
    1fd0:	c432                	sw	a2,8(sp)
	sw	a3, 12(sp)
    1fd2:	c636                	sw	a3,12(sp)
	sw	a4, 16(sp)
    1fd4:	c83a                	sw	a4,16(sp)
	sw	s1, 28(sp)
    1fd6:	ce26                	sw	s1,28(sp)
	c.lw a2, 0(a1)
	c.andi a2, USB_DMASK
	c.beqz a2, another_interrupt_check
#endif

	SAVE_DEBUG_MARKER( 48 );
    1fd8:	d812                	sw	tp,48(sp)
	DEBUG_TICK_SETUP
    1fda:	40013237          	lui	tp,0x40013
    1fde:	c5820213          	addi	tp,tp,-936 # 40012c58 <_eusrstack+0x20012458>
	c.lw a1, INDR_OFFSET(a5)
    1fe2:	478c                	lw	a1,8(a5)
	c.andi a1, USB_DMASK;
    1fe4:	89e1                	andi	a1,a1,24

	// Finish jump to se0
	c.beqz a0, handle_se0_keepalive
    1fe6:	22050763          	beqz	a0,2214 <handle_se0_keepalive>

	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    1fea:	4788                	lw	a0,8(a5)
    1fec:	8961                	andi	a0,a0,24
    1fee:	02b51b63          	bne	a0,a1,2024 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    1ff2:	4788                	lw	a0,8(a5)
    1ff4:	8961                	andi	a0,a0,24
    1ff6:	02b51763          	bne	a0,a1,2024 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    1ffa:	4788                	lw	a0,8(a5)
    1ffc:	8961                	andi	a0,a0,24
    1ffe:	02b51363          	bne	a0,a1,2024 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    2002:	4788                	lw	a0,8(a5)
    2004:	8961                	andi	a0,a0,24
    2006:	00b51f63          	bne	a0,a1,2024 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    200a:	4788                	lw	a0,8(a5)
    200c:	8961                	andi	a0,a0,24
    200e:	00b51b63          	bne	a0,a1,2024 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    2012:	4788                	lw	a0,8(a5)
    2014:	8961                	andi	a0,a0,24
    2016:	00b51763          	bne	a0,a1,2024 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
    201a:	4788                	lw	a0,8(a5)
    201c:	8961                	andi	a0,a0,24
    201e:	00b51363          	bne	a0,a1,2024 <syncout>
	c.j syncout
    2022:	a009                	j	2024 <syncout>

00002024 <syncout>:
syncout:
	sw	s0, 24(sp)
    2024:	cc22                	sw	s0,24(sp)
	li a2, 0
    2026:	4601                	li	a2,0
	sw	t0, 32(sp)  // XXX NOTE: This is actually unused register - remove some day?
    2028:	d016                	sw	t0,32(sp)
	sw	t1, 36(sp)
    202a:	d21a                	sw	t1,36(sp)

0000202c <preamble_loop>:
	
	// This is actually somewhat late.
	// The preamble loop should try to make it earlier.
.balign 4
preamble_loop:
	DEBUG_TICK_MARK
    202c:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
    2030:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
    2032:	8961                	andi	a0,a0,24
	c.beqz a0, done_usb_message // SE0 here?
    2034:	16050f63          	beqz	a0,21b2 <done_usb_message>
	c.xor a0, a1;
    2038:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1.
    203a:	8da9                	xor	a1,a1,a0
	j 1f; 1: // 4 cycles?
    203c:	a009                	j	203e <preamble_loop+0x12>
	c.beqz a0, done_preamble
    203e:	c909                	beqz	a0,2050 <done_preamble>
	j 1f; 1: // 4 cycles?
    2040:	a009                	j	2042 <preamble_loop+0x16>
	c.lw s0, INDR_OFFSET(a5);
    2042:	4780                	lw	s0,8(a5)
	c.andi s0, USB_DMASK;
    2044:	8861                	andi	s0,s0,24
	c.xor s0, a1
    2046:	8c2d                	xor	s0,s0,a1

	// TRICKY: This helps retime the USB sync.
	// If s0 is nonzero, then it's changed (we're going too slow)
	c.bnez s0, 2f;  // This code takes 6 cycles or 8 cycles, depending.
    2048:	e011                	bnez	s0,204c <preamble_loop+0x20>
	c.j 1f; 1:
    204a:	a009                	j	204c <preamble_loop+0x20>
	2:
	j preamble_loop // 4 cycles
    204c:	b7c5                	j	202c <preamble_loop>
    204e:	0001                	nop

00002050 <done_preamble>:
.balign 4
done_preamble:
	sw  t2, 40(sp)
    2050:	d41e                	sw	t2,40(sp)
	sw  ra, 52(sp)
    2052:	da06                	sw	ra,52(sp)
	// 16-byte temporary buffer at 56+sp

	// XXX TODO: Do one byte here to determine the header byte and from that set the CRC.
	c.li s1, 8
    2054:	44a1                	li	s1,8

	// This is the first bit that matters.
	c.li s0, 6 // 1 runs.
    2056:	4419                	li	s0,6

	c.nop; 
    2058:	0001                	nop
    205a:	0001                	nop

0000205c <packet_type_loop>:
packet_type_loop:
	// Up here to delay loop a tad, and we need to execute them anyway.
	// TODO: Maybe we could further sync bits here instead of take up time?
	// I.e. can we do what we're doing above, here, and take less time, but sync
	// up when possible.
	li a3, 0xffff // Starting CRC of 0.   Because USB doesn't respect reverse CRCing.
    205c:	66c1                	lui	a3,0x10
    205e:	16fd                	addi	a3,a3,-1
	li a4, 0xa001
    2060:	6729                	lui	a4,0xa
    2062:	0705                	addi	a4,a4,1
	addi  t2, sp, DATA_PTR_OFFSET //rv003usb_internal_data
    2064:	03f10393          	addi	t2,sp,63
	la  t0, 0x80
    2068:	08000293          	li	t0,128
	c.nop
    206c:	0001                	nop
    206e:	0001                	nop

	DEBUG_TICK_MARK
    2070:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
    2074:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
    2076:	8961                	andi	a0,a0,24
	c.beqz a0, done_usb_message // Not se0 complete, that can't happen here and be valid.
    2078:	12050d63          	beqz	a0,21b2 <done_usb_message>
	c.xor a0, a1;
    207c:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle
    207e:	8da9                	xor	a1,a1,a0

	// No CRC for the header.
	//c.srli a0, USB_PIN_DP
	//c.addi a0, 1 // 00 -> 1, 11 -> 100
	//c.andi a0, 1 // If 1, 1 if 0, 0
        c.nop
    2080:	0001                	nop
        seqz a0, a0
    2082:	00153513          	seqz	a0,a0

	// Write header into byte in reverse order, because we can.
	c.slli a2, 1
    2086:	0606                	slli	a2,a2,0x1
	c.or a2, a0
    2088:	8e49                	or	a2,a2,a0

	// Handle bit stuffing rules.
	c.addi a0, -1 // 0->0xffffffff 1->0
    208a:	157d                	addi	a0,a0,-1
	c.or s0, a0
    208c:	8c49                	or	s0,s0,a0
	c.andi s0, 7
    208e:	881d                	andi	s0,s0,7
	c.addi s0, -1
    2090:	147d                	addi	s0,s0,-1
	c.addi s1, -1
    2092:	14fd                	addi	s1,s1,-1
	c.bnez s1, packet_type_loop
    2094:	f4e1                	bnez	s1,205c <packet_type_loop>
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	

	// XXX Here, figure out CRC polynomial.

	li s1, (USB_BUFFER_SIZE*8) // # of bits we culd read.
    2096:	06000493          	li	s1,96
	//
	// When we get here, packet type is loaded in A2.
	// If packet type is 0xXX01 or 0xXX11
	// the LSBs are the inverted packet type.
	// we can branch off of bit 2.
	andi a0, a2, 0x0c
    209a:	00c67513          	andi	a0,a2,12

	// if a0 is 1 then it's DATA (full CRC) otherwise,
	// (0) for setup or PARTIAL CRC.
	// Careful:  This has to take a constant amount of time either way the branch goes.
	c.beqz a0, data_crc
    209e:	c509                	beqz	a0,20a8 <data_crc>
	c.li a4, 0x14	
    20a0:	4751                	li	a4,20
	c.li a3, 0x1e
    20a2:	46f9                	li	a3,30
    20a4:	00000013          	nop

000020a8 <data_crc>:

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	
.balign 4
is_end_of_byte:
	HANDLE_EOB_YES
    20a8:	00c38023          	sb	a2,0(t2)
    20ac:	00138393          	addi	t2,t2,1

000020b0 <bit_process>:
	// end-of-byte.
.balign 4
bit_process:
	// Debug blip
//	c.lw a4, INDR_OFFSET(a5);
	DEBUG_TICK_MARK
    20b0:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
    20b4:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
    20b6:	8961                	andi	a0,a0,24
	c.xor a0, a1;
    20b8:	8d2d                	xor	a0,a0,a1
#define HANDLE_NEXT_BYTE(is_end_of_byte, jumptype)  \
	c.addi s1, -1; \
	andi a0, s1, 7; /* s1 could be really really big */ \
	c.jumptype a0, is_end_of_byte /* 4 cycles for this section. (Checked) (Sometimes 5)? */ 

	c.beqz a0, handle_one_bit
    20ba:	c50d                	beqz	a0,20e4 <handle_one_bit>

000020bc <handle_zero_bit>:
handle_zero_bit:
	c.xor a1, a0; // Recover a1, for next cycle
    20bc:	8da9                	xor	a1,a1,a0
	// TODO: Do we have time to do time fixup here?
	// Can we resync time here?
	// If they are different, we need to sloowwww dowwwnnn
	// There is some free time.  Could do something interesting here!!!
	// I was thinking we could put the resync code here.
	c.j 1f; 1:  //Delay 4 cycles.
    20be:	a009                	j	20c0 <handle_zero_bit+0x4>

	c.li s0, 6      // reset runs-of-one.
    20c0:	4419                	li	s0,6
	c.beqz a1, se0_complete
    20c2:	c9bd                	beqz	a1,2138 <se0_complete>

	// Handle CRC (0 bit)  (From @Domkeykong)
	slli a0,a3,31 // Put a3s LSB into a0s MSB
    20c4:	01f69513          	slli	a0,a3,0x1f
	c.srai a0,31    // Copy MSB into all other bits
    20c8:	857d                	srai	a0,a0,0x1f
	c.srli a3,1
    20ca:	8285                	srli	a3,a3,0x1
	c.and  a0, a4
    20cc:	8d79                	and	a0,a0,a4
	c.xor  a3, a0
    20ce:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
    20d0:	8205                	srli	a2,a2,0x1
	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
    20d2:	14fd                	addi	s1,s1,-1
    20d4:	0074f513          	andi	a0,s1,7
    20d8:	d961                	beqz	a0,20a8 <data_crc>
	c.nop
    20da:	0001                	nop
	c.nop
    20dc:	0001                	nop
	c.nop
    20de:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
    20e0:	f8e1                	bnez	s1,20b0 <bit_process>
	c.j done_usb_message
    20e2:	a8c1                	j	21b2 <done_usb_message>

000020e4 <handle_one_bit>:


.balign 4
handle_one_bit:
	c.addi s0, -1; // Count # of runs of 1 (subtract 1)
    20e4:	147d                	addi	s0,s0,-1
	//HANDLE_CRC (1 bit)
	andi a0, a3, 1
    20e6:	0016f513          	andi	a0,a3,1
	c.addi a0, -1
    20ea:	157d                	addi	a0,a0,-1
	c.and a0, a4
    20ec:	8d79                	and	a0,a0,a4
	c.srli a3, 1
    20ee:	8285                	srli	a3,a3,0x1
	c.xor a3, a0
    20f0:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
    20f2:	8205                	srli	a2,a2,0x1
	ori a2, a2, 0x80
    20f4:	08066613          	ori	a2,a2,128
	c.beqz s0, handle_bit_stuff;
    20f8:	c811                	beqz	s0,210c <handle_bit_stuff>

	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
    20fa:	14fd                	addi	s1,s1,-1
    20fc:	0074f513          	andi	a0,s1,7
    2100:	d545                	beqz	a0,20a8 <data_crc>
	c.nop // Need extra delay here because we need more time if it's end-of-byte.
    2102:	0001                	nop
	c.nop
    2104:	0001                	nop
	c.nop
    2106:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
    2108:	f4c5                	bnez	s1,20b0 <bit_process>
	c.j done_usb_message
    210a:	a065                	j	21b2 <done_usb_message>

0000210c <handle_bit_stuff>:

handle_bit_stuff:
	// We want to wait a little bit, then read another byte, and make
	// sure everything is well, before heading back into the main loop
	// Debug blip
	HANDLE_NEXT_BYTE(not_is_end_of_byte_and_bit_stuffed, bnez)
    210c:	14fd                	addi	s1,s1,-1
    210e:	0074f513          	andi	a0,s1,7
    2112:	e509                	bnez	a0,211c <not_is_end_of_byte_and_bit_stuffed>
	HANDLE_EOB_YES
    2114:	00c38023          	sb	a2,0(t2)
    2118:	00138393          	addi	t2,t2,1

0000211c <not_is_end_of_byte_and_bit_stuffed>:

not_is_end_of_byte_and_bit_stuffed:
        DEBUG_TICK_MARK
    211c:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
    2120:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
    2122:	8961                	andi	a0,a0,24
	c.beqz a0, se0_complete
    2124:	c911                	beqz	a0,2138 <se0_complete>
	c.xor a0, a1;
    2126:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle.
    2128:	8da9                	xor	a1,a1,a0

	// If A0 is a 0 then that's bad, we just did a bit stuff
        //   and A0 == 0 means there was no signal transition
	c.beqz a0, done_usb_message
    212a:	c541                	beqz	a0,21b2 <done_usb_message>

        // Reset bit stuff, delay, then continue onto the next actual bit
	c.li s0, 6;
    212c:	4419                	li	s0,6

        c.nop;
    212e:	0001                	nop
	nx6p3delay( 2, a0 )
    2130:	450d                	li	a0,3
    2132:	157d                	addi	a0,a0,-1
    2134:	fd7d                	bnez	a0,2132 <not_is_end_of_byte_and_bit_stuffed+0x16>

	c.bnez s1, bit_process // + 4 cycles
    2136:	fcad                	bnez	s1,20b0 <bit_process>

00002138 <se0_complete>:

.balign 4
se0_complete:
	// This is triggered when we finished getting a packet.
	andi a0, s1, 7; // Make sure we received an even number of bytes.
    2138:	0074f513          	andi	a0,s1,7
	c.bnez a0, done_usb_message
    213c:	e93d                	bnez	a0,21b2 <done_usb_message>


	// Special: handle ACKs?
	// Now we have to decide what we're doing based on the
	// packet type.
	addi  a1, sp, DATA_PTR_OFFSET
    213e:	03f10593          	addi	a1,sp,63
    2142:	2188                	fld	fa0,0(a1)
	XW_C_LBU(a0, a1, 0);	//lbu  a0, 0(a1)
	c.addi a1, 1
    2144:	0585                	addi	a1,a1,1
	// 1001 => 10010110 => PID IN
	// 0001 => 10000111 => PID_OUT
	// 1101 => 10110100 => SETUP    (OK)

	// a0 contains first 4 bytes.
	la ra, done_usb_message_in // Common return address for all function calls.
    2146:	00000097          	auipc	ra,0x0
    214a:	06c08093          	addi	ra,ra,108 # 21b2 <done_usb_message>

	// For ACK don't worry about CRC.
	addi a5, a0, -0b01001011
    214e:	fb550793          	addi	a5,a0,-75

	RESTORE_DEBUG_MARKER(48) // restore x4 for whatever in C land.
    2152:	5242                	lw	tp,48(sp)

	la a4, rv003usb_internal_data
    2154:	19018713          	addi	a4,gp,400 # 2000058c <rv003usb_internal_data>

	// ACK doesn't need good CRC.
	c.beqz a5, usb_pid_handle_ack
    2158:	c7c9                	beqz	a5,21e2 <usb_pid_handle_ack>

	// Next, check for tokens.
	c.bnez a3, crc_for_tokens_would_be_bad_maybe_data
    215a:	ea85                	bnez	a3,218a <crc_for_tokens_would_be_bad_maybe_data>

0000215c <may_be_a_token>:
    215c:	2192                	fld	ft3,256(sp)
may_be_a_token:
	// Our CRC is 0, so we might be a token.

	// Do token-y things.
	XW_C_LHU( a2, a1, 0 )
	andi a0, a2, 0x7f // addr
    215e:	07f67513          	andi	a0,a2,127
	c.srli a2, 7
    2162:	821d                	srli	a2,a2,0x7
	c.andi a2, 0xf    // endp
    2164:	8a3d                	andi	a2,a2,15
	li s0, ENDPOINTS
    2166:	440d                	li	s0,3
	bgeu a2, s0, done_usb_message // Make sure < ENDPOINTS
    2168:	04867563          	bgeu	a2,s0,21b2 <done_usb_message>
	c.beqz a0,  yes_check_tokens
    216c:	c501                	beqz	a0,2174 <yes_check_tokens>
    216e:	2340                	fld	fs0,128(a4)
	// Otherwise, we might have our assigned address.
	XW_C_LBU(s0, a4, MY_ADDRESS_OFFSET_BYTES);	//	lbu s0, MY_ADDRESS_OFFSET_BYTES(a4)
	bne s0, a0, done_usb_message // addr != 0 && addr != ours.
    2170:	04a41163          	bne	s0,a0,21b2 <done_usb_message>

00002174 <yes_check_tokens>:
yes_check_tokens:
	addi a5, a5, (0b01001011-0b10000111)
    2174:	fc478793          	addi	a5,a5,-60
	c.beqz a5, usb_pid_handle_out
    2178:	cfc1                	beqz	a5,2210 <usb_pid_handle_out>
	c.addi a5, (0b10000111-0b10010110)
    217a:	17c5                	addi	a5,a5,-15
	c.beqz a5, usb_pid_handle_in
    217c:	00079463          	bnez	a5,2184 <yes_check_tokens+0x10>
    2180:	c7bff06f          	j	1dfa <usb_pid_handle_in>
	c.addi a5, (0b10010110-0b10110100)
    2184:	1789                	addi	a5,a5,-30
	c.beqz a5, usb_pid_handle_setup
    2186:	cbb5                	beqz	a5,21fa <usb_pid_handle_setup>

	c.j done_usb_message_in
    2188:	a02d                	j	21b2 <done_usb_message>

0000218a <crc_for_tokens_would_be_bad_maybe_data>:

	// CRC is nonzero. (Good for Data packets)
crc_for_tokens_would_be_bad_maybe_data:
	li s0, 0xb001  // UGH: You can't use the CRC16 in reverse :(
    218a:	642d                	lui	s0,0xb
    218c:	0405                	addi	s0,s0,1
	c.sub a3, s0
    218e:	8e81                	sub	a3,a3,s0
	c.bnez a3, done_usb_message_in
    2190:	e28d                	bnez	a3,21b2 <done_usb_message>
	// Good CRC!!
	sub a3, t2, a1 //a3 = # of bytes read..
    2192:	40b386b3          	sub	a3,t2,a1
	c.addi a3, 1
    2196:	0685                	addi	a3,a3,1
	addi a5, a5, (0b01001011-0b11000011)
    2198:	f8878793          	addi	a5,a5,-120
	c.li a2, 0
    219c:	4601                	li	a2,0
	c.beqz a5, usb_pid_handle_data
    219e:	00079463          	bnez	a5,21a6 <crc_for_tokens_would_be_bad_maybe_data+0x1c>
    21a2:	d29ff06f          	j	1eca <usb_pid_handle_data>
	c.addi a5, (0b11000011-0b11010010)
    21a6:	17c5                	addi	a5,a5,-15
	c.li a2, 1
    21a8:	4605                	li	a2,1
	c.beqz a5, usb_pid_handle_data
    21aa:	00079463          	bnez	a5,21b2 <done_usb_message>
    21ae:	d1dff06f          	j	1eca <usb_pid_handle_data>

000021b2 <done_usb_message>:

done_usb_message:
done_usb_message_in:
	lw	s0, 24(sp)
    21b2:	4462                	lw	s0,24(sp)
	lw	s1, 28(sp)
    21b4:	44f2                	lw	s1,28(sp)
	lw	t0, 32(sp)
    21b6:	5282                	lw	t0,32(sp)
	lw	t1, 36(sp)
    21b8:	5312                	lw	t1,36(sp)
	lw	t2, 40(sp)
    21ba:	53a2                	lw	t2,40(sp)
	lw  ra, 52(sp)
    21bc:	50d2                	lw	ra,52(sp)

000021be <ret_from_se0>:
another_interrupt_handler:
	RV003_ADD_EXTI_HANDLER
#endif

ret_from_se0:
	lw	s1, 28(sp)
    21be:	44f2                	lw	s1,28(sp)
	RESTORE_DEBUG_MARKER(48)
    21c0:	5242                	lw	tp,48(sp)
	lw	a2, 8(sp)
    21c2:	4622                	lw	a2,8(sp)
	lw	a3, 12(sp)
    21c4:	46b2                	lw	a3,12(sp)
	lw	a4, 16(sp)
    21c6:	4742                	lw	a4,16(sp)
	lw	a1, 4(sp)
    21c8:	4592                	lw	a1,4(sp)

000021ca <interrupt_complete>:

interrupt_complete:
	// Acknowledge interrupt.
	// EXTI->INTFR = 1<<4
	c.j 1f; 1: // Extra little bit of delay to make sure we don't accidentally false fire.
    21ca:	a009                	j	21cc <interrupt_complete+0x2>

	la a5, EXTI_BASE + 20
    21cc:	400107b7          	lui	a5,0x40010
    21d0:	41478793          	addi	a5,a5,1044 # 40010414 <_eusrstack+0x2000fc14>
#ifdef RV003_ADD_EXTI_MASK
	li a0, (RV003_ADD_EXTI_MASK|(1<<USB_PIN_DM))
#else
	li a0, (1<<USB_PIN_DM)
    21d4:	4541                	li	a0,16
#endif
	sw a0, 0(a5)
    21d6:	c388                	sw	a0,0(a5)
	
	// Restore stack.
	lw	a0, 0(sp)
    21d8:	4502                	lw	a0,0(sp)
	lw	a5, 20(sp)
    21da:	47d2                	lw	a5,20(sp)
	addi	sp,sp,80
    21dc:	6161                	addi	sp,sp,80
	mret
    21de:	30200073          	mret

000021e2 <usb_pid_handle_ack>:
	return;
}
*/

usb_pid_handle_ack:
	c.lw a2, 0(a4) //ist->current_endpoint -> endp;
    21e2:	4310                	lw	a2,0(a4)
	c.slli a2, 5
    21e4:	0616                	slli	a2,a2,0x5
	c.add a2, a4
    21e6:	963a                	add	a2,a2,a4
	c.addi a2, ENDP_OFFSET // usb_endpoint eps[ENDPOINTS];
    21e8:	0671                	addi	a2,a2,28

	c.lw a0, (EP_TOGGLE_IN_OFFSET)(a2) // toggle_in=!toggle_in
    21ea:	4248                	lw	a0,4(a2)
	c.li a1, 1
    21ec:	4585                	li	a1,1
	c.xor a0, a1
    21ee:	8d2d                	xor	a0,a0,a1
	c.sw a0, (EP_TOGGLE_IN_OFFSET)(a2)
    21f0:	c248                	sw	a0,4(a2)

	c.lw a0, (EP_COUNT_OFFSET)(a2) // count_in
    21f2:	4208                	lw	a0,0(a2)
	c.addi a0, 1
    21f4:	0505                	addi	a0,a0,1
	c.sw a0, (EP_COUNT_OFFSET)(a2)
    21f6:	c208                	sw	a0,0(a2)

	c.j done_usb_message_in
    21f8:	bf6d                	j	21b2 <done_usb_message>

000021fa <usb_pid_handle_setup>:
	e->count = 0;
	e->toggle_in = 1;
	ist->setup_request = 1;
}*/
usb_pid_handle_setup:
	c.sw a2, 0(a4) // ist->current_endpoint = endp
    21fa:	c310                	sw	a2,0(a4)
	c.li a1, 1
    21fc:	4585                	li	a1,1
	c.sw a1, SETUP_REQUEST_OFFSET(a4) //ist->setup_request = 1;
    21fe:	c70c                	sw	a1,8(a4)
	c.slli a2, 3+2
    2200:	0616                	slli	a2,a2,0x5
	c.add a2, a4
    2202:	963a                	add	a2,a2,a4
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_IN_OFFSET)(a2) //e->toggle_in = 1;
    2204:	d20c                	sw	a1,32(a2)
	c.li a1, 0
    2206:	4581                	li	a1,0
	c.sw a1, (ENDP_OFFSET+EP_COUNT_OFFSET)(a2)  //e->count = 0;
    2208:	ce4c                	sw	a1,28(a2)
	c.sw a1, (ENDP_OFFSET+EP_OPAQUE_OFFSET)(a2)  //e->opaque = 0;
    220a:	de0c                	sw	a1,56(a2)
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_OUT_OFFSET)(a2) //e->toggle_out = 0;
    220c:	d24c                	sw	a1,36(a2)
	c.j done_usb_message_in	
    220e:	b755                	j	21b2 <done_usb_message>

00002210 <usb_pid_handle_out>:
    2210:	a310                	fsd	fa2,0(a4)
//This will correctly swap back the endpoint.
usb_pid_handle_out:
	//void usb_pid_handle_out( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )	
	//sb a2, 0(a4) //ist->current_endpoint = endp;
	XW_C_SB( a2, a4, 0 ); // current_endpoint = endp
	c.j done_usb_message_in
    2212:	b745                	j	21b2 <done_usb_message>

00002214 <handle_se0_keepalive>:

handle_se0_keepalive:
	// In here, we want to do smart stuff with the
	// 1ms tick.

	la  a0, SYSTICK_CNT
    2214:	e000f537          	lui	a0,0xe000f
    2218:	0521                	addi	a0,a0,8
	la a4, rv003usb_internal_data
    221a:	19018713          	addi	a4,gp,400 # 2000058c <rv003usb_internal_data>
	c.lw a1, LAST_SE0_OFFSET(a4) //last cycle count   last_se0_cyccount
    221e:	4b0c                	lw	a1,16(a4)
	c.lw a2, 0(a0) //this cycle count
    2220:	4110                	lw	a2,0(a0)
	c.sw a2, LAST_SE0_OFFSET(a4) //store it back to last_se0_cyccount
    2222:	cb10                	sw	a2,16(a4)
	c.sub a2, a1
    2224:	8e0d                	sub	a2,a2,a1
	c.sw a2, DELTA_SE0_OFFSET(a4) //record delta_se0_cyccount
    2226:	cb50                	sw	a2,20(a4)

	li a1, 48000
    2228:	65b1                	lui	a1,0xc
    222a:	b8058593          	addi	a1,a1,-1152 # bb80 <rv003usb.c.2a5f0f89+0x3f3b>
	c.sub a2, a1
    222e:	8e0d                	sub	a2,a2,a1
	// This is our deviance from 48MHz.

	// Make sure we aren't in left field.
	li a5, 4000
    2230:	6785                	lui	a5,0x1
    2232:	fa078793          	addi	a5,a5,-96 # fa0 <mini_vpprintf+0x188>
	bge a2, a5, ret_from_se0
    2236:	f8f654e3          	bge	a2,a5,21be <ret_from_se0>
	li a5, -4000
    223a:	77fd                	lui	a5,0xfffff
    223c:	06078793          	addi	a5,a5,96 # fffff060 <_eusrstack+0xdfffe860>
	blt a2, a5, ret_from_se0
    2240:	f6f64fe3          	blt	a2,a5,21be <ret_from_se0>

	c.lw a1, SE0_WINDUP_OFFSET(a4) // load windup se0_windup
    2244:	4f0c                	lw	a1,24(a4)
	c.add a1, a2
    2246:	95b2                	add	a1,a1,a2
	c.sw a1, SE0_WINDUP_OFFSET(a4) // save windup
    2248:	cf0c                	sw	a1,24(a4)

	// No further adjustments
	beqz a1, ret_from_se0
    224a:	d9b5                	beqz	a1,21be <ret_from_se0>

	// 0x40021000 = RCC.CTLR
	la a4, 0x40021000
    224c:	40021737          	lui	a4,0x40021
	lw a0, 0(a4)
    2250:	4308                	lw	a0,0(a4)
	srli a2, a0, 3 // Extract HSI Trim.
    2252:	00355613          	srli	a2,a0,0x3
	andi a2, a2, 0b11111
    2256:	8a7d                	andi	a2,a2,31
	li a5, 0xffffff07  
    2258:	f0700793          	li	a5,-249
	and a0, a0, a5	// Mask off non-HSI
    225c:	8d7d                	and	a0,a0,a5

	// Decimate windup - use as HSIrim.
	neg a1, a1
    225e:	40b005b3          	neg	a1,a1
	srai a2, a1, 9
    2262:	4095d613          	srai	a2,a1,0x9
	addi a2, a2, 16  // add HSI offset.
    2266:	0641                	addi	a2,a2,16

	// Put trim in place in register.
	slli a2, a2, 3
    2268:	060e                	slli	a2,a2,0x3
	or a0, a0, a2
    226a:	8d51                	or	a0,a0,a2
	sw a0, 0(a4)
    226c:	c308                	sw	a0,0(a4)

	j ret_from_se0
    226e:	bf81                	j	21be <ret_from_se0>

00002270 <usb_send_empty>:


.balign 4
//void usb_send_empty( uint32_t token );
usb_send_empty:
	c.mv a3, a0
    2270:	86aa                	mv	a3,a0
	la a0, always0
    2272:	00000517          	auipc	a0,0x0
    2276:	13a50513          	addi	a0,a0,314 # 23ac <always0>
	li a1, 2
    227a:	4589                	li	a1,2
	c.mv a2, a1
    227c:	862e                	mv	a2,a1

0000227e <usb_send_data>:
//void usb_send_data( uint8_t * data, uint32_t length, uint32_t poly_function, uint32_t token );
usb_send_data:
	addi	sp,sp,-16
    227e:	1141                	addi	sp,sp,-16
	sw	s0, 0(sp)
    2280:	c022                	sw	s0,0(sp)
	sw	s1, 4(sp)
    2282:	c226                	sw	s1,4(sp)

	la a5, USB_GPIO_BASE
    2284:	400117b7          	lui	a5,0x40011
    2288:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>

	// ASAP: Turn the bus around and send our preamble + token.
	c.lw a4, CFGLR_OFFSET(a5)
    228c:	4398                	lw	a4,0(a5)

	li s1, ~((0b1111<<(USB_PIN_DP*4)) | (0b1111<<(USB_PIN_DM*4)))
    228e:	fff014b7          	lui	s1,0xfff01
    2292:	14fd                	addi	s1,s1,-1
	and a4, s1, a4
    2294:	8f65                	and	a4,a4,s1

	// Convert D+/D- into 2MHz outputs
	li s1, ((0b0010<<(USB_PIN_DP*4)) | (0b0010<<(USB_PIN_DM*4)))
    2296:	000224b7          	lui	s1,0x22
	or a4, s1, a4
    229a:	8f45                	or	a4,a4,s1

	li s1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16))
    229c:	001004b7          	lui	s1,0x100
    22a0:	04a1                	addi	s1,s1,8
	c.sw s1, BSHR_OFFSET(a5)
    22a2:	cb84                	sw	s1,16(a5)

	//00: Universal push-pull output mode
	c.sw a4, CFGLR_OFFSET(a5)
    22a4:	c398                	sw	a4,0(a5)

	li t1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16)) | (1<<USB_PIN_DM) | (1<<(USB_PIN_DP+16));
    22a6:	00180337          	lui	t1,0x180
    22aa:	0361                	addi	t1,t1,24

	SAVE_DEBUG_MARKER( 8 )
    22ac:	c412                	sw	tp,8(sp)

	// Save off our preamble and token.
	c.slli a3, 7     //Put token further up so it gets sent later.
    22ae:	069e                	slli	a3,a3,0x7
	ori s0, a3, 0x40  
    22b0:	0406e413          	ori	s0,a3,64

	li t0, 0x0000
    22b4:	4281                	li	t0,0
	c.bnez a2, done_poly_check
    22b6:	e609                	bnez	a2,22c0 <done_poly_check>
	li t0, 0xa001
    22b8:	62a9                	lui	t0,0xa
    22ba:	0285                	addi	t0,t0,1
	li a2, 0xffff
    22bc:	6641                	lui	a2,0x10
    22be:	167d                	addi	a2,a2,-1

000022c0 <done_poly_check>:
done_poly_check:

	c.slli a1, 3 // bump up one extra to be # of bits
    22c0:	058e                	slli	a1,a1,0x3
	mv t2, a1
    22c2:	83ae                	mv	t2,a1

	// t0 is our polynomial
	// a2 is our running CRC.
	// a3 is our token.
	DEBUG_TICK_SETUP
    22c4:	40013237          	lui	tp,0x40013
    22c8:	c5820213          	addi	tp,tp,-936 # 40012c58 <_eusrstack+0x20012458>

	c.li a4, 6 // reset bit stuffing.
    22cc:	4719                	li	a4,6
	c.li a1, 15 // 15 bits.
    22ce:	45bd                	li	a1,15

	//c.nop; c.nop; c.nop;
	c.j pre_and_tok_send_inner_loop
    22d0:	a011                	j	22d4 <pre_and_tok_send_inner_loop>
    22d2:	0001                	nop

000022d4 <pre_and_tok_send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
    22d4:	86a2                	mv	a3,s0
	c.srli s0, 1 // Shift down into the next bit.
    22d6:	8005                	srli	s0,s0,0x1
	c.andi a3, 1
    22d8:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.

	c.addi a4, -1
    22da:	177d                	addi	a4,a4,-1
	c.bnez a3, pre_and_tok_send_one_bit
    22dc:	e681                	bnez	a3,22e4 <pre_and_tok_send_one_bit>
//Send 0 bit. (Flip)
	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
    22de:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
    22e2:	4719                	li	a4,6

000022e4 <pre_and_tok_send_one_bit>:
	// DO NOT flip.  Allow a4 to increment.
// Deliberately unaligned for timing purposes.
.balign 4
pre_and_tok_send_one_bit:
	sw s1, BSHR_OFFSET(a5)
    22e4:	cb84                	sw	s1,16(a5)
	//Bit stuffing doesn't happen.
	c.addi a1, -1
    22e6:	15fd                	addi	a1,a1,-1
	c.beqz a1, pre_and_tok_done_sending_data
    22e8:	c591                	beqz	a1,22f4 <pre_and_tok_done_sending_data>
	nx6p3delay( 2, a3 );	c.nop;             // Free time!
    22ea:	468d                	li	a3,3
    22ec:	16fd                	addi	a3,a3,-1
    22ee:	fefd                	bnez	a3,22ec <pre_and_tok_send_one_bit+0x8>
    22f0:	0001                	nop
	c.j pre_and_tok_send_inner_loop
    22f2:	b7cd                	j	22d4 <pre_and_tok_send_inner_loop>

000022f4 <pre_and_tok_done_sending_data>:
////////////////////////////////////////////////////////////////////////////

	// We have very little time here.  Just enough to do this.

	//Restore size.
	mv a1, t2//lw  a1, 12(sp)
    22f4:	859e                	mv	a1,t2
	c.beqz a1, no_really_done_sending_data  //No actual payload?  Bail!
    22f6:	c5ad                	beqz	a1,2360 <no_really_done_sending_data>
	c.addi a1, -1
    22f8:	15fd                	addi	a1,a1,-1
//	beqz t2, no_really_done_sending_data 

	bnez t0, done_poly_check2
    22fa:	00029463          	bnez	t0,2302 <done_poly_check2>
	li a2, 0xffff
    22fe:	6641                	lui	a2,0x10
    2300:	167d                	addi	a2,a2,-1

00002302 <done_poly_check2>:
    2302:	0001                	nop

00002304 <load_next_byte>:
    2304:	2100                	fld	fs0,0(a0)
	// CH32v003 has the XW extension.
	// this replaces: lb s0, 0(a0)
	XW_C_LBU(s0, a0, 0);
	//lb s0, 0(a0)
	//	.long 0x00150513 // addi a0, a0, 1  (For alignment's sake)
	c.addi a0, 1
    2306:	0505                	addi	a0,a0,1

00002308 <send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
    2308:	86a2                	mv	a3,s0
	c.andi a3, 1
    230a:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.
	c.beqz a3, send_zero_bit
    230c:	ce81                	beqz	a3,2324 <send_zero_bit>
	c.srli s0, 1 // Shift down into the next bit.
    230e:	8005                	srli	s0,s0,0x1
//send_one_bit:
	//HANDLE_CRC (1 bit)
	andi a3, a2, 1
    2310:	00167693          	andi	a3,a2,1
	c.addi a3, -1
    2314:	16fd                	addi	a3,a3,-1
	and a3, a3, t0
    2316:	0056f6b3          	and	a3,a3,t0
	c.srli a2, 1
    231a:	8205                	srli	a2,a2,0x1
	c.xor a2, a3
    231c:	8e35                	xor	a2,a2,a3

	c.addi a4, -1
    231e:	177d                	addi	a4,a4,-1
	c.beqz a4, insert_stuffed_bit
    2320:	cf25                	beqz	a4,2398 <insert_stuffed_bit>
	c.j cont_after_jump
    2322:	a829                	j	233c <cont_after_jump>

00002324 <send_zero_bit>:
//Send 0 bit. (Flip)
.balign 4
send_zero_bit:
	c.srli s0, 1 // Shift down into the next bit.
    2324:	8005                	srli	s0,s0,0x1
	// a3 is temp
	// t0 is polynomial.

	// XXX WARNING: this was by https://github.com/cnlohr/rv003usb/issues/7 
	// TODO Check me!
	slli a3,a2,31 // Put a3s LSB into a0s MSB
    2326:	01f61693          	slli	a3,a2,0x1f
	c.srai a3,31    // Copy MSB into all other bits
    232a:	86fd                	srai	a3,a3,0x1f

	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
    232c:	0064c4b3          	xor	s1,s1,t1
	sw s1, BSHR_OFFSET(a5)
    2330:	cb84                	sw	s1,16(a5)

	c.li a4, 6 // reset bit stuffing.
    2332:	4719                	li	a4,6

	// XXX XXX CRC down here to make bit stuffing timings line up.
	c.srli a2,1
    2334:	8205                	srli	a2,a2,0x1
	and a3,a3,t0
    2336:	0056f6b3          	and	a3,a3,t0
	c.xor  a2,a3 
    233a:	8e35                	xor	a2,a2,a3

0000233c <cont_after_jump>:

.balign 4
cont_after_jump:
send_end_bit_complete:
	c.beqz a1, done_sending_data
    233c:	c981                	beqz	a1,234c <done_sending_data>
	andi a3, a1, 7
    233e:	0075f693          	andi	a3,a1,7
	c.addi a1, -1
    2342:	15fd                	addi	a1,a1,-1
	c.beqz a3, load_next_byte
    2344:	d2e1                	beqz	a3,2304 <load_next_byte>
	// Wait an extra few cycles.
	c.j 1f; 1:
    2346:	a009                	j	2348 <cont_after_jump+0xc>
	c.j send_inner_loop
    2348:	b7c1                	j	2308 <send_inner_loop>
    234a:	0001                	nop

0000234c <done_sending_data>:

.balign 4
done_sending_data:
	// BUT WAIT!! MAYBE WE NEED TO CRC!
	beqz t0, no_really_done_sending_data
    234c:	00028a63          	beqz	t0,2360 <no_really_done_sending_data>
	srli t0, t0, 8 // reset poly - we don't want it anymore.
    2350:	0082d293          	srli	t0,t0,0x8
	li a1, 7 // Load 8 more bits out
    2354:	459d                	li	a1,7
	beqz t0, send_inner_loop  //Second CRC byte
    2356:	fa0289e3          	beqz	t0,2308 <send_inner_loop>
	// First CRC byte
	not s0, a2 // get read to send out the CRC.
    235a:	fff64413          	not	s0,a2
	c.j send_inner_loop
    235e:	b76d                	j	2308 <send_inner_loop>

00002360 <no_really_done_sending_data>:
.balign 4
no_really_done_sending_data:

//	c.bnez a2, poly_function  TODO: Uncomment me!

	nx6p3delay( 2, a3 );
    2360:	468d                	li	a3,3
    2362:	16fd                	addi	a3,a3,-1
    2364:	fefd                	bnez	a3,2362 <no_really_done_sending_data+0x2>

	// Need to perform an SE0.
	li s1, (1<<(USB_PIN_DM+16)) | (1<<(USB_PIN_DP+16))
    2366:	001804b7          	lui	s1,0x180
	c.sw s1, BSHR_OFFSET(a5)
    236a:	cb84                	sw	s1,16(a5)

	nx6p3delay( 7, a3 );
    236c:	46a1                	li	a3,8
    236e:	16fd                	addi	a3,a3,-1
    2370:	fefd                	bnez	a3,236e <no_really_done_sending_data+0xe>

	li s1, (1<<(USB_PIN_DM)) | (1<<(USB_PIN_DP+16))
    2372:	000804b7          	lui	s1,0x80
    2376:	04c1                	addi	s1,s1,16
	c.sw s1, BSHR_OFFSET(a5)
    2378:	cb84                	sw	s1,16(a5)

	lw s1, CFGLR_OFFSET(a5)
    237a:	4384                	lw	s1,0(a5)
	// Convert D+/D- into inputs.
	li a3, ~((0b11<<(USB_PIN_DP*4)) | (0b11<<(USB_PIN_DM*4)))
    237c:	fffcd6b7          	lui	a3,0xfffcd
    2380:	16fd                	addi	a3,a3,-1
	and s1, a3, s1
    2382:	8cf5                	and	s1,s1,a3
	// 01: Floating input mode.
	li a3, ((0b01<<(USB_PIN_DP*4+2)) | (0b01<<(USB_PIN_DM*4+2)))
    2384:	000446b7          	lui	a3,0x44
	or s1, a3, s1
    2388:	8cd5                	or	s1,s1,a3
	sw s1, CFGLR_OFFSET(a5)
    238a:	c384                	sw	s1,0(a5)

	lw	s0, 0(sp)
    238c:	4402                	lw	s0,0(sp)
	lw	s1, 4(sp)
    238e:	4492                	lw	s1,4(sp)
	RESTORE_DEBUG_MARKER( 8 )
    2390:	4222                	lw	tp,8(sp)
	addi	sp,sp,16
    2392:	0141                	addi	sp,sp,16
	ret
    2394:	8082                	ret
    2396:	0001                	nop

00002398 <insert_stuffed_bit>:

.balign 4
// TODO: This seems to be either 222 or 226 (not 224) in cases.
// It's off by 2 clock cycles.  Probably OK, but, hmm.
insert_stuffed_bit:
	nx6p3delay(3, a3)
    2398:	4691                	li	a3,4
    239a:	16fd                	addi	a3,a3,-1
    239c:	fefd                	bnez	a3,239a <insert_stuffed_bit+0x2>
	xor s1, s1, t1
    239e:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
    23a2:	4719                	li	a4,6
	c.nop
    23a4:	0001                	nop
	c.nop
    23a6:	0001                	nop
	sw s1, BSHR_OFFSET(a5)
    23a8:	cb84                	sw	s1,16(a5)
	c.j send_end_bit_complete
    23aa:	bf49                	j	233c <cont_after_jump>

000023ac <always0>:
    23ac:	0000                	unimp
	...

000023b0 <string3>:
    23b0:	0308 0030 0030 0030 0000 0000               ..0.0.0.....

000023bc <string2>:
    23bc:	0312 0052 0056 0030 0030 0033 0055 0053     ..R.V.0.0.3.U.S.
    23cc:	0042 0000                                   B...

000023d0 <string1>:
    23d0:	030e 0043 004e 004c 006f 0068 0072 0000     ..C.N.L.o.h.r...

000023e0 <string0>:
    23e0:	0304 0409 080a 0000 08f8 0000 098c 0000     ................
    23f0:	0b16 0000 0c14 0000 000a 0000 3249 3a43     ............I2C:
    2400:	3020 2578 3230 0058 6f42 746f 4320 756f      0x%02X.Boot Cou
    2410:	746e 203a 6425 000a 6146 6c69 6465 7420     nt: %d..Failed t
    2420:	206f 6e69 7469 4920 4332 0000 6548 6c6c     o init I2C..Hell
    2430:	206f 6542 2065 6c25 0064 0000 2d2d 2d2d     o Bee %ld...----
    2440:	6353 6e61 696e 676e 4920 4332 4220 7375     Scanning I2C Bus
    2450:	6620 726f 4420 7665 6369 7365 2d2d 002d      for Devices---.
    2460:	2d2d 2d2d 6f44 656e 5320 6163 6e6e 6e69     ----Done Scannin
    2470:	2d67 2d2d 0a2d 0000 654e 5f6f 6f6c 6461     g----...Neo_load
    2480:	6f43 6d6d 6e61 3a64 2520 3230 0a58 0000     Command: %02X...
    2490:	6f4c 676e 5020 6572 7373 0000 7562 7474     Long Press..butt
    24a0:	6e6f 203a 6425 0000 6953 676e 656c 4320     on: %d..Single C
    24b0:	696c 6b63 0000 0000 6f44 6275 656c 4320     lick....Double C
    24c0:	696c 6b63 0000 0000 7325 6320 6379 732f     lick....%s cyc/s
    24d0:	2520 756c 7e20 2520 756c 736d 0000 0000      %lu ~ %lums....
    24e0:	007c 0000 002f 0000 002d 0000 005c 0000     |.../...-...\...

000024f0 <FONT_7x5>:
    24f0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    2500:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    2510:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    2520:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    2530:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    2540:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    2550:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    2560:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    2570:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    2580:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    2590:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    25a0:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    25b0:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    25c0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    25d0:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    25e0:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    25f0:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    2600:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    2610:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    2620:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    2630:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    2640:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    2650:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    2660:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    2670:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    2680:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    2690:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    26a0:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    26b0:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    26c0:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

000026cc <SIN_LUT2>:
    26cc:	0100 0101 0101 0202 0403 0504 0706 0908     ................
    26dc:	0b0a 0e0d 1110 1413 1816 1b1a 1f1d 2421     ..............!$
    26ec:	2826 2d2a 312f 3634 3c39 413e 4744 4c49     &(*-/1469<>ADGIL
    26fc:	524f 5855 5e5b 6461 6a67 706d 7673 7d79     ORUX[^adgjmpsvy}
    270c:	8380 8986 8f8c 9592 9c99 a29f a8a5 adab     ................
    271c:	b3b0 b9b6 bebc c4c1 c9c6 cecb d3d0 d7d5     ................
    272c:	dcda e0de e4e2 e8e6 ebe9 eeed f1f0 f4f3     ................
    273c:	f6f5 f8f7 faf9 fcfb fdfc fefe fffe ffff     ................
    274c:	ffff ffff fefe fdfe fcfc fafb f8f9 f6f7     ................
    275c:	f4f5 f1f3 eef0 ebed e8e9 e4e6 e0e2 dcde     ................
    276c:	d7da d3d5 ced0 c9cb c4c6 bec1 b9bc b3b6     ................
    277c:	adb0 a8ab a2a5 9c9f 9599 8f92 898c 8386     ................
    278c:	7d80 7679 7073 6a6d 6467 5e61 585b 5255     .}yvspmjgda^[XUR
    279c:	4c4f 4749 4144 3c3e 3639 3134 2d2f 282a     OLIGDA><9641/-*(
    27ac:	2426 1f21 1b1d 181a 1416 1113 0e10 0b0d     &$!.............
    27bc:	090a 0708 0506 0404 0203 0102 0101 0101     ................

000027cc <bitquartets.5>:
    27cc:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    27dc:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

000027ec <config_descriptor>:
    27ec:	0209 003b 0102 8000 0964 0004 0100 0103     ..;.....d.......
    27fc:	0002 2109 0110 0100 3422 0700 8105 0403     ...!...."4......
    280c:	0a00 0409 0001 0301 0101 0900 1021 0001     ............!...
    281c:	2201 0045 0507 0382 0008 000a               ."E.........

00002828 <descriptor_list>:
    2828:	0100 0000 2888 0000 0012 0000 0200 0000     .....(..........
    2838:	27ec 0000 003b 0000 2200 0000 28e4 0000     .'..;...."...(..
    2848:	0034 0000 2200 0001 289c 0000 0045 0000     4...."...(..E...
    2858:	0300 0000 23e0 0000 0004 0000 0301 0409     .....#..........
    2868:	23d0 0000 000e 0000 0302 0409 23bc 0000     .#...........#..
    2878:	0012 0000 0303 0409 23b0 0000 0008 0000     .........#......

00002888 <device_descriptor>:
    2888:	0112 0110 0000 0800 1209 c003 0002 0201     ................
    2898:	0103 0000                                   ....

0000289c <keyboard_hid_desc>:
    289c:	0105 0609 01a1 0175 0895 0705 e019 e729     ......u.......).
    28ac:	0015 0125 0281 0195 0875 0381 0595 0175     ..%.....u.....u.
    28bc:	0805 0119 0529 0291 0195 0375 0391 0795     ....).....u.....
    28cc:	0875 0391 0695 0875 0015 a725 0705 0019     u.....u...%.....
    28dc:	a729 0081 00c0 0000                         ).......

000028e4 <mouse_hid_desc>:
    28e4:	0105 0209 01a1 0109 00a1 0905 0119 0329     ..............).
    28f4:	0015 0125 0395 0175 0281 0195 0575 0381     ..%...u.....u...
    2904:	0105 3009 3109 3809 8115 7f25 0875 0395     ...0.1.8..%.u...
    2914:	0681 c0c0                                   ....

00002918 <ssd1306_init_array>:
    2918:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    2928:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......
