
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	7180006f          	j	718 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	07de                	slli	a5,a5,0x17
   a:	0000                	unimp
   c:	078e                	slli	a5,a5,0x3
	...
  2e:	0000                	unimp
  30:	12ba                	slli	t0,t0,0x2e
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	078e                	slli	a5,a5,0x3
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	078e                	slli	a5,a5,0x3
  42:	0000                	unimp
  44:	078e                	slli	a5,a5,0x3
  46:	0000                	unimp
  48:	078e                	slli	a5,a5,0x3
  4a:	0000                	unimp
  4c:	078e                	slli	a5,a5,0x3
  4e:	0000                	unimp
  50:	078e                	slli	a5,a5,0x3
  52:	0000                	unimp
  54:	078e                	slli	a5,a5,0x3
  56:	0000                	unimp
  58:	078e                	slli	a5,a5,0x3
  5a:	0000                	unimp
  5c:	078e                	slli	a5,a5,0x3
  5e:	0000                	unimp
  60:	1240                	addi	s0,sp,292
  62:	0000                	unimp
  64:	0054                	addi	a3,sp,4
  66:	2000                	fld	fs0,0(s0)
  68:	078e                	slli	a5,a5,0x3
  6a:	0000                	unimp
  6c:	078e                	slli	a5,a5,0x3
  6e:	0000                	unimp
  70:	078e                	slli	a5,a5,0x3
  72:	0000                	unimp
  74:	078e                	slli	a5,a5,0x3
  76:	0000                	unimp
  78:	12ec                	addi	a1,sp,364
  7a:	0000                	unimp
  7c:	148c                	addi	a1,sp,608
  7e:	0000                	unimp
  80:	078e                	slli	a5,a5,0x3
  82:	0000                	unimp
  84:	078e                	slli	a5,a5,0x3
  86:	0000                	unimp
  88:	078e                	slli	a5,a5,0x3
  8a:	0000                	unimp
  8c:	078e                	slli	a5,a5,0x3
  8e:	0000                	unimp
  90:	078e                	slli	a5,a5,0x3
  92:	0000                	unimp
  94:	078e                	slli	a5,a5,0x3
  96:	0000                	unimp
  98:	078e                	slli	a5,a5,0x3
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
      a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
      a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
      a8:	862e                	mv	a2,a1
      aa:	85aa                	mv	a1,a0
      ac:	557d                	li	a0,-1
      ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
      b0:	4685                	li	a3,1
      b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
      b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
      ba:	0606                	slli	a2,a2,0x1
      bc:	0686                	slli	a3,a3,0x1
      be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
      c2:	4501                	li	a0,0
      c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
      c8:	8d91                	sub	a1,a1,a2
      ca:	8d55                	or	a0,a0,a3
      cc:	8285                	srli	a3,a3,0x1
      ce:	8205                	srli	a2,a2,0x1
      d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
      d2:	8082                	ret

000000d4 <__umodsi3>:
      d4:	8286                	mv	t0,ra
      d6:	3fc9                	jal	a8 <__hidden___udivsi3>
      d8:	852e                	mv	a0,a1
      da:	8282                	jr	t0
      dc:	40a00533          	neg	a0,a0
      e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
      e4:	40b005b3          	neg	a1,a1
      e8:	b7c1                	j	a8 <__hidden___udivsi3>
      ea:	40b005b3          	neg	a1,a1
      ee:	8286                	mv	t0,ra
      f0:	3f65                	jal	a8 <__hidden___udivsi3>
      f2:	40a00533          	neg	a0,a0
      f6:	8282                	jr	t0

000000f8 <__modsi3>:
      f8:	8286                	mv	t0,ra
      fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
      fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
     102:	375d                	jal	a8 <__hidden___udivsi3>
     104:	852e                	mv	a0,a1
     106:	8282                	jr	t0
     108:	40b005b3          	neg	a1,a1
     10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
     110:	40a00533          	neg	a0,a0
     114:	3f51                	jal	a8 <__hidden___udivsi3>
     116:	40b00533          	neg	a0,a1
     11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
{
     11e:	1131                	addi	sp,sp,-20
     120:	c426                	sw	s1,8(sp)
     122:	c806                	sw	ra,16(sp)
     124:	c622                	sw	s0,12(sp)
     126:	84ae                	mv	s1,a1
     128:	87aa                	mv	a5,a0
     12a:	85b2                	mv	a1,a2
	int overflow = 0;
     12c:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     12e:	cab5                	beqz	a3,1a2 <mini_pad+0x84>
	if(len > pad_to) {
     130:	0096d463          	bge	a3,s1,138 <mini_pad+0x1a>
     134:	84b6                	mv	s1,a3
		overflow = 1;
     136:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     138:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     13c:	00045363          	bgez	s0,142 <mini_pad+0x24>
     140:	4401                	li	s0,0
     142:	8622                	mv	a2,s0
     144:	853a                	mv	a0,a4
     146:	c23e                	sw	a5,4(sp)
     148:	c01a                	sw	t1,0(sp)
     14a:	0ed000ef          	jal	ra,a36 <memset>
     14e:	4302                	lw	t1,0(sp)
     150:	4792                	lw	a5,4(sp)
     152:	872a                	mv	a4,a0
     154:	008506b3          	add	a3,a0,s0
     158:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     15a:	40c485b3          	sub	a1,s1,a2
     15e:	04b04463          	bgtz	a1,1a6 <mini_pad+0x88>
     162:	0004d363          	bgez	s1,168 <mini_pad+0x4a>
     166:	4481                	li	s1,0
     168:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     16c:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     170:	02030463          	beqz	t1,198 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     174:	02c77263          	bgeu	a4,a2,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     178:	02a00793          	li	a5,42
     17c:	fef60fa3          	sb	a5,-1(a2)
     180:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     184:	00d77a63          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     188:	fef60f23          	sb	a5,-2(a2)
     18c:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     190:	00d77463          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     194:	fef60ea3          	sb	a5,-3(a2)
}
     198:	40c2                	lw	ra,16(sp)
     19a:	4432                	lw	s0,12(sp)
     19c:	44a2                	lw	s1,8(sp)
     19e:	0151                	addi	sp,sp,20
     1a0:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1a2:	86a6                	mv	a3,s1
     1a4:	bf51                	j	138 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1a6:	00c785b3          	add	a1,a5,a2
     1aa:	0005c503          	lbu	a0,0(a1)
     1ae:	00c685b3          	add	a1,a3,a2
     1b2:	0605                	addi	a2,a2,1
     1b4:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1b8:	b74d                	j	15a <mini_pad+0x3c>

000001ba <_puts>:
{
     1ba:	832a                	mv	t1,a0
     1bc:	852e                	mv	a0,a1
	if(!buf) return len;
     1be:	ce01                	beqz	a2,1d6 <_puts+0x1c>
	char * p0 = b->buffer;
     1c0:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1c4:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1c6:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1c8:	00a74863          	blt	a4,a0,1d8 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1cc:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1d0:	4248                	lw	a0,4(a2)
     1d2:	40550533          	sub	a0,a0,t0
}
     1d6:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1d8:	4614                	lw	a3,8(a2)
     1da:	fff68593          	addi	a1,a3,-1
     1de:	4214                	lw	a3,0(a2)
     1e0:	96ae                	add	a3,a3,a1
     1e2:	fed785e3          	beq	a5,a3,1cc <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1e6:	00178693          	addi	a3,a5,1
     1ea:	c254                	sw	a3,4(a2)
     1ec:	00e306b3          	add	a3,t1,a4
     1f0:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     1f4:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     1f6:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     1fa:	b7f1                	j	1c6 <_puts+0xc>

000001fc <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     1fc:	e0000737          	lui	a4,0xe0000
     200:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     204:	0f470693          	addi	a3,a4,244
     208:	0807f793          	andi	a5,a5,128
     20c:	fbf5                	bnez	a5,200 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     20e:	783027b7          	lui	a5,0x78302
     212:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     216:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     218:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     21a:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     21e:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     220:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     222:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     226:	0807f793          	andi	a5,a5,128
     22a:	ffe5                	bnez	a5,222 <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     22c:	00e557b3          	srl	a5,a0,a4
     230:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     234:	03000793          	li	a5,48
     238:	00d35463          	bge	t1,a3,240 <PrintHex+0x44>
     23c:	05700793          	li	a5,87
     240:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     242:	07a2                	slli	a5,a5,0x8
     244:	0857e793          	ori	a5,a5,133
     248:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     24c:	1771                	addi	a4,a4,-4
     24e:	fcb71ae3          	bne	a4,a1,222 <PrintHex+0x26>
}
     252:	8082                	ret

00000254 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     254:	1101                	addi	sp,sp,-32
     256:	ce06                	sw	ra,28(sp)
     258:	cc22                	sw	s0,24(sp)
     25a:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     25c:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     25e:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     260:	00055763          	bgez	a0,26e <mini_itoa.part.0+0x1a>
     264:	e689                	bnez	a3,26e <mini_itoa.part.0+0x1a>
		negative = 1;
     266:	4785                	li	a5,1
		value = -value;
     268:	40a00333          	neg	t1,a0
		negative = 1;
     26c:	c03e                	sw	a5,0(sp)
     26e:	06100413          	li	s0,97
     272:	c219                	beqz	a2,278 <mini_itoa.part.0+0x24>
     274:	04100413          	li	s0,65
	int	negative = 0;
     278:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     27a:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     27c:	851a                	mv	a0,t1
     27e:	c83a                	sw	a4,16(sp)
     280:	c21a                	sw	t1,4(sp)
     282:	c62e                	sw	a1,12(sp)
     284:	c41a                	sw	t1,8(sp)
     286:	35b9                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     288:	47a5                	li	a5,9
     28a:	4322                	lw	t1,8(sp)
     28c:	45b2                	lw	a1,12(sp)
     28e:	4742                	lw	a4,16(sp)
     290:	0ff57693          	andi	a3,a0,255
     294:	06a7e163          	bltu	a5,a0,2f6 <mini_itoa.part.0+0xa2>
     298:	03068693          	addi	a3,a3,48
     29c:	0ff6f693          	andi	a3,a3,255
     2a0:	00148793          	addi	a5,s1,1
     2a4:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2a8:	851a                	mv	a0,t1
     2aa:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2ac:	c63e                	sw	a5,12(sp)
		value /= radix;
     2ae:	c42e                	sw	a1,8(sp)
     2b0:	3be5                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
     2b2:	4692                	lw	a3,4(sp)
     2b4:	45a2                	lw	a1,8(sp)
     2b6:	47b2                	lw	a5,12(sp)
     2b8:	4742                	lw	a4,16(sp)
		value /= radix;
     2ba:	832a                	mv	t1,a0
	} while (value > 0);
     2bc:	02b6fb63          	bgeu	a3,a1,2f2 <mini_itoa.part.0+0x9e>
	if (negative)
     2c0:	4682                	lw	a3,0(sp)
     2c2:	c699                	beqz	a3,2d0 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2c4:	02d00693          	li	a3,45
     2c8:	00d78023          	sb	a3,0(a5)
     2cc:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2d0:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2d4:	01f55693          	srli	a3,a0,0x1f
     2d8:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2da:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2de:	8685                	srai	a3,a3,0x1
     2e0:	4601                	li	a2,0
     2e2:	17fd                	addi	a5,a5,-1
     2e4:	00d64b63          	blt	a2,a3,2fa <mini_itoa.part.0+0xa6>
}
     2e8:	40f2                	lw	ra,28(sp)
     2ea:	4462                	lw	s0,24(sp)
     2ec:	44d2                	lw	s1,20(sp)
     2ee:	6105                	addi	sp,sp,32
     2f0:	8082                	ret
	} while (value > 0);
     2f2:	84be                	mv	s1,a5
     2f4:	b761                	j	27c <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2f6:	96a2                	add	a3,a3,s0
     2f8:	b755                	j	29c <mini_itoa.part.0+0x48>
		char j = buffer[i];
     2fa:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     2fe:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     302:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     306:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     308:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     30c:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     310:	bfc9                	j	2e2 <mini_itoa.part.0+0x8e>

00000312 <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     312:	400057b7          	lui	a5,0x40005
     316:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     31a:	40078793          	addi	a5,a5,1024
     31e:	10077713          	andi	a4,a4,256
     322:	cf09                	beqz	a4,33c <i2c_error+0x2a>
     324:	0147d703          	lhu	a4,20(a5)
     328:	4505                	li	a0,1
     32a:	0742                	slli	a4,a4,0x10
     32c:	8341                	srli	a4,a4,0x10
     32e:	eff77713          	andi	a4,a4,-257
     332:	0742                	slli	a4,a4,0x10
     334:	8341                	srli	a4,a4,0x10
     336:	00e79a23          	sh	a4,20(a5)
     33a:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     33c:	0147d703          	lhu	a4,20(a5)
     340:	40077713          	andi	a4,a4,1024
     344:	cf09                	beqz	a4,35e <i2c_error+0x4c>
     346:	0147d703          	lhu	a4,20(a5)
     34a:	4509                	li	a0,2
     34c:	0742                	slli	a4,a4,0x10
     34e:	8341                	srli	a4,a4,0x10
     350:	bff77713          	andi	a4,a4,-1025
     354:	0742                	slli	a4,a4,0x10
     356:	8341                	srli	a4,a4,0x10
     358:	00e79a23          	sh	a4,20(a5)
     35c:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     35e:	0147d703          	lhu	a4,20(a5)
     362:	20077713          	andi	a4,a4,512
     366:	cf09                	beqz	a4,380 <i2c_error+0x6e>
     368:	0147d703          	lhu	a4,20(a5)
     36c:	450d                	li	a0,3
     36e:	0742                	slli	a4,a4,0x10
     370:	8341                	srli	a4,a4,0x10
     372:	dff77713          	andi	a4,a4,-513
     376:	0742                	slli	a4,a4,0x10
     378:	8341                	srli	a4,a4,0x10
     37a:	00e79a23          	sh	a4,20(a5)
     37e:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     380:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     384:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     386:	832d                	srli	a4,a4,0xb
     388:	8b05                	andi	a4,a4,1
     38a:	cf01                	beqz	a4,3a2 <i2c_error+0x90>
     38c:	0147d703          	lhu	a4,20(a5)
     390:	76fd                	lui	a3,0xfffff
     392:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     396:	0742                	slli	a4,a4,0x10
     398:	8341                	srli	a4,a4,0x10
     39a:	8f75                	and	a4,a4,a3
     39c:	00e79a23          	sh	a4,20(a5)
     3a0:	4511                	li	a0,4
}
     3a2:	8082                	ret

000003a4 <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     3a4:	415c                	lw	a5,4(a0)
     3a6:	e7b1                	bnez	a5,3f2 <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     3a8:	00855783          	lhu	a5,8(a0)
     3ac:	40005737          	lui	a4,0x40005
     3b0:	0786                	slli	a5,a5,0x1
     3b2:	0fe7f793          	andi	a5,a5,254
     3b6:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3ba:	6789                	lui	a5,0x2
     3bc:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.963ac852+0x433>
	return (status & status_mask) == status_mask; 
     3c0:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3c4:	c8f1aa23          	sw	a5,-876(gp) # 20000090 <_i2c_timeout>
     3c8:	4501                	li	a0,0
     3ca:	c9418693          	addi	a3,gp,-876 # 20000090 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     3ce:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     3d2:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.d894f163+0x6721c>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     3d6:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     3da:	01071593          	slli	a1,a4,0x10
     3de:	41835703          	lhu	a4,1048(t1)
     3e2:	81c1                	srli	a1,a1,0x10
     3e4:	0742                	slli	a4,a4,0x10
     3e6:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     3e8:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3ea:	00c71663          	bne	a4,a2,3f6 <i2c_send_addr_write+0x52>
     3ee:	c111                	beqz	a0,3f2 <i2c_send_addr_write+0x4e>
     3f0:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     3f2:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     3f4:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3f6:	17fd                	addi	a5,a5,-1
     3f8:	4505                	li	a0,1
     3fa:	fff1                	bnez	a5,3d6 <i2c_send_addr_write+0x32>
{
     3fc:	1151                	addi	sp,sp,-12
     3fe:	c406                	sw	ra,8(sp)
     400:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     404:	3739                	jal	312 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     406:	e111                	bnez	a0,40a <i2c_send_addr_write+0x66>
     408:	4515                	li	a0,5
}
     40a:	40a2                	lw	ra,8(sp)
     40c:	0131                	addi	sp,sp,12
     40e:	8082                	ret

00000410 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     410:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     412:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     414:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     416:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.963ac852+0x433>
     41a:	c8f1aa23          	sw	a5,-876(gp) # 20000090 <_i2c_timeout>
{
     41e:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     420:	c002                	sw	zero,0(sp)
     422:	c202                	sw	zero,4(sp)
     424:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     428:	4601                	li	a2,0
     42a:	c9418713          	addi	a4,gp,-876 # 20000090 <_i2c_timeout>
     42e:	400055b7          	lui	a1,0x40005
     432:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     436:	8a89                	andi	a3,a3,2
     438:	e689                	bnez	a3,442 <i2c_ping+0x32>
     43a:	c211                	beqz	a2,43e <i2c_ping+0x2e>
     43c:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
     43e:	4501                	li	a0,0
     440:	a809                	j	452 <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     442:	17fd                	addi	a5,a5,-1
     444:	4605                	li	a2,1
     446:	f7f5                	bnez	a5,432 <i2c_ping+0x22>
     448:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
     44c:	35d9                	jal	312 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     44e:	e111                	bnez	a0,452 <i2c_ping+0x42>
     450:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     452:	40005737          	lui	a4,0x40005
     456:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     45a:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     45e:	07c2                	slli	a5,a5,0x10
     460:	83c1                	srli	a5,a5,0x10
     462:	1007e793          	ori	a5,a5,256
     466:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     46a:	00030737          	lui	a4,0x30
     46e:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     470:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     474:	01079693          	slli	a3,a5,0x10
     478:	4185d783          	lhu	a5,1048(a1)
     47c:	82c1                	srli	a3,a3,0x10
     47e:	07c2                	slli	a5,a5,0x10
     480:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     482:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     484:	fee796e3          	bne	a5,a4,470 <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     488:	e119                	bnez	a0,48e <i2c_ping+0x7e>
     48a:	850a                	mv	a0,sp
     48c:	3f21                	jal	3a4 <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     48e:	40005737          	lui	a4,0x40005
     492:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     496:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     498:	07c2                	slli	a5,a5,0x10
     49a:	83c1                	srli	a5,a5,0x10
     49c:	2007e793          	ori	a5,a5,512
     4a0:	40f71023          	sh	a5,1024(a4)
}
     4a4:	0161                	addi	sp,sp,24
     4a6:	8082                	ret

000004a8 <i2c_write_raw.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4a8:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     4aa:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4ac:	71078793          	addi	a5,a5,1808 # 2710 <ch32fun.c.963ac852+0x433>
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     4b0:	c626                	sw	s1,12(sp)
     4b2:	c22e                	sw	a1,4(sp)
     4b4:	ca06                	sw	ra,20(sp)
     4b6:	c822                	sw	s0,16(sp)
     4b8:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4ba:	c8f1aa23          	sw	a5,-876(gp) # 20000090 <_i2c_timeout>
     4be:	4601                	li	a2,0
     4c0:	c9418493          	addi	s1,gp,-876 # 20000090 <_i2c_timeout>
     4c4:	400055b7          	lui	a1,0x40005
     4c8:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     4cc:	8a89                	andi	a3,a3,2
     4ce:	e6bd                	bnez	a3,53c <i2c_write_raw.constprop.0+0x94>
     4d0:	c211                	beqz	a2,4d4 <i2c_write_raw.constprop.0+0x2c>
     4d2:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4d4:	400056b7          	lui	a3,0x40005
     4d8:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     4dc:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4e0:	07c2                	slli	a5,a5,0x10
     4e2:	83c1                	srli	a5,a5,0x10
     4e4:	1007e793          	ori	a5,a5,256
     4e8:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     4ec:	000306b7          	lui	a3,0x30
     4f0:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     4f2:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     4f6:	01079613          	slli	a2,a5,0x10
     4fa:	4185d783          	lhu	a5,1048(a1)
     4fe:	8241                	srli	a2,a2,0x10
     500:	07c2                	slli	a5,a5,0x10
     502:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     504:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     506:	fed796e3          	bne	a5,a3,4f2 <i2c_write_raw.constprop.0+0x4a>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     50a:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
     50e:	3d59                	jal	3a4 <i2c_send_addr_write>
     510:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     512:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
     514:	e91d                	bnez	a0,54a <i2c_write_raw.constprop.0+0xa2>
		while(cbyte < len)
     516:	4792                	lw	a5,4(sp)
     518:	02f67963          	bgeu	a2,a5,54a <i2c_write_raw.constprop.0+0xa2>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     51c:	6689                	lui	a3,0x2
     51e:	71068693          	addi	a3,a3,1808 # 2710 <ch32fun.c.963ac852+0x433>
     522:	c094                	sw	a3,0(s1)
     524:	4501                	li	a0,0
     526:	40005337          	lui	t1,0x40005
     52a:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     52e:	0805f593          	andi	a1,a1,128
     532:	c5b9                	beqz	a1,580 <i2c_write_raw.constprop.0+0xd8>
     534:	c111                	beqz	a0,538 <i2c_write_raw.constprop.0+0x90>
     536:	c094                	sw	a3,0(s1)
     538:	4501                	li	a0,0
     53a:	a8a9                	j	594 <i2c_write_raw.constprop.0+0xec>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     53c:	17fd                	addi	a5,a5,-1
     53e:	4605                	li	a2,1
     540:	f7c1                	bnez	a5,4c8 <i2c_write_raw.constprop.0+0x20>
	i2c_err_t i2c_err = i2c_error();
     542:	3bc1                	jal	312 <i2c_error>
     544:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     546:	e111                	bnez	a0,54a <i2c_write_raw.constprop.0+0xa2>
     548:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     54a:	6689                	lui	a3,0x2
     54c:	71068693          	addi	a3,a3,1808 # 2710 <ch32fun.c.963ac852+0x433>
	return (status & status_mask) == status_mask; 
     550:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     554:	c094                	sw	a3,0(s1)
     556:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     558:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     55c:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.d894f163+0x6721e>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     560:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     564:	01061513          	slli	a0,a2,0x10
     568:	4182d603          	lhu	a2,1048(t0)
     56c:	8141                	srli	a0,a0,0x10
     56e:	0642                	slli	a2,a2,0x10
     570:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     572:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     574:	04b61363          	bne	a2,a1,5ba <i2c_write_raw.constprop.0+0x112>
     578:	04030a63          	beqz	t1,5cc <i2c_write_raw.constprop.0+0x124>
     57c:	c094                	sw	a3,0(s1)
     57e:	a0b9                	j	5cc <i2c_write_raw.constprop.0+0x124>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     580:	16fd                	addi	a3,a3,-1
     582:	4505                	li	a0,1
     584:	f2dd                	bnez	a3,52a <i2c_write_raw.constprop.0+0x82>
     586:	c432                	sw	a2,8(sp)
     588:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     58c:	3359                	jal	312 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     58e:	4622                	lw	a2,8(sp)
     590:	e111                	bnez	a0,594 <i2c_write_raw.constprop.0+0xec>
     592:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     594:	4782                	lw	a5,0(sp)
     596:	00c786b3          	add	a3,a5,a2
     59a:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     59e:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     5a0:	400056b7          	lui	a3,0x40005
     5a4:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     5a8:	0ff67613          	andi	a2,a2,255
     5ac:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     5ae:	e501                	bnez	a0,5b6 <i2c_write_raw.constprop.0+0x10e>
     5b0:	338d                	jal	312 <i2c_error>
     5b2:	4622                	lw	a2,8(sp)
     5b4:	d12d                	beqz	a0,516 <i2c_write_raw.constprop.0+0x6e>
     5b6:	842a                	mv	s0,a0
     5b8:	bf49                	j	54a <i2c_write_raw.constprop.0+0xa2>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     5ba:	16fd                	addi	a3,a3,-1
     5bc:	4305                	li	t1,1
     5be:	f2cd                	bnez	a3,560 <i2c_write_raw.constprop.0+0xb8>
     5c0:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     5c4:	33b9                	jal	312 <i2c_error>
     5c6:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     5c8:	e111                	bnez	a0,5cc <i2c_write_raw.constprop.0+0x124>
     5ca:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5cc:	400056b7          	lui	a3,0x40005
     5d0:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     5d4:	40d2                	lw	ra,20(sp)
     5d6:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5d8:	0742                	slli	a4,a4,0x10
}
     5da:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5dc:	8341                	srli	a4,a4,0x10
     5de:	20076713          	ori	a4,a4,512
     5e2:	40e69023          	sh	a4,1024(a3)
}
     5e6:	44b2                	lw	s1,12(sp)
     5e8:	0161                	addi	sp,sp,24
     5ea:	8082                	ret

000005ec <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     5ec:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     5ee:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     5f2:	4589                	li	a1,2
     5f4:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     5f6:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     5f8:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     5fc:	3575                	jal	4a8 <i2c_write_raw.constprop.0>
}
     5fe:	40b2                	lw	ra,12(sp)
     600:	0ff57513          	andi	a0,a0,255
     604:	0141                	addi	sp,sp,16
     606:	8082                	ret

00000608 <internal_handle_input.constprop.0>:
void handle_debug_input( int numbytes, uint8_t * data ) __attribute__((weak));
void handle_debug_input( int numbytes, uint8_t * data ) { (void)numbytes; (void)data; }

static void internal_handle_input( volatile uint32_t * dmdata0 )
{
	uint32_t dmd0 = *dmdata0;
     608:	e00007b7          	lui	a5,0xe0000
     60c:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 && bytes < 16 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
     610:	8082                	ret

00000612 <_write.constprop.0>:
//     status word = 0xcx = timed out.
// declare as weak to allow overriding.
WEAK int _write(int fd, const char *buf, int size)
{
	(void)fd;
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     612:	e0000737          	lui	a4,0xe0000
     616:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     61a:	1111                	addi	sp,sp,-28
     61c:	cc06                	sw	ra,24(sp)
     61e:	ca22                	sw	s0,20(sp)
     620:	c826                	sw	s1,16(sp)
     622:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     624:	0c07f793          	andi	a5,a5,192
     628:	0c000693          	li	a3,192
     62c:	0cd78863          	beq	a5,a3,6fc <_write.constprop.0+0xea>

	char buffer[4] = { 0 };
     630:	c602                	sw	zero,12(sp)
     632:	842e                	mv	s0,a1
	int place = 0;
	uint32_t lastdmd;
	uint32_t timeout = FUNCONF_DEBUGPRINTF_TIMEOUT; // Give up after ~120ms

	if( size == 0 )
     634:	e5f1                	bnez	a1,700 <_write.constprop.0+0xee>
	{
		lastdmd = (*DMDATA0);
     636:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     63a:	c789                	beqz	a5,644 <_write.constprop.0+0x32>
     63c:	0807f793          	andi	a5,a5,128
     640:	e391                	bnez	a5,644 <_write.constprop.0+0x32>
     642:	37d9                	jal	608 <internal_handle_input.constprop.0>

		//buf += tosend;
		place += tosend;
	}
	return size;
}
     644:	40e2                	lw	ra,24(sp)
     646:	8522                	mv	a0,s0
     648:	4452                	lw	s0,20(sp)
     64a:	44c2                	lw	s1,16(sp)
     64c:	0171                	addi	sp,sp,28
     64e:	8082                	ret
		int tosend = size - place;
     650:	409405b3          	sub	a1,s0,s1
     654:	469d                	li	a3,7
     656:	872e                	mv	a4,a1
     658:	00b6d363          	bge	a3,a1,65e <_write.constprop.0+0x4c>
     65c:	471d                	li	a4,7
     65e:	001006b7          	lui	a3,0x100
     662:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     664:	e0000537          	lui	a0,0xe0000
     668:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     66c:	0f450313          	addi	t1,a0,244
     670:	08067293          	andi	t0,a2,128
     674:	06029c63          	bnez	t0,6ec <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     678:	c611                	beqz	a2,684 <_write.constprop.0+0x72>
     67a:	c43a                	sw	a4,8(sp)
     67c:	c22e                	sw	a1,4(sp)
     67e:	3769                	jal	608 <internal_handle_input.constprop.0>
     680:	4722                	lw	a4,8(sp)
     682:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     684:	4689                	li	a3,2
     686:	4601                	li	a2,0
     688:	00b6d463          	bge	a3,a1,690 <_write.constprop.0+0x7e>
     68c:	ffd70613          	addi	a2,a4,-3
     690:	4782                	lw	a5,0(sp)
     692:	00348593          	addi	a1,s1,3
     696:	0068                	addi	a0,sp,12
     698:	95be                	add	a1,a1,a5
     69a:	c23a                	sw	a4,4(sp)
     69c:	26c1                	jal	a5c <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     69e:	4632                	lw	a2,12(sp)
     6a0:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     6a2:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     6a4:	e00006b7          	lui	a3,0xe0000
     6a8:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     6ac:	458d                	li	a1,3
     6ae:	00978633          	add	a2,a5,s1
		t = 0;
     6b2:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     6b4:	00064303          	lbu	t1,0(a2)
     6b8:	0685                	addi	a3,a3,1
     6ba:	007c                	addi	a5,sp,12
     6bc:	00d78533          	add	a0,a5,a3
     6c0:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     6c4:	00d70563          	beq	a4,a3,6ce <_write.constprop.0+0xbc>
     6c8:	0605                	addi	a2,a2,1
     6ca:	feb695e3          	bne	a3,a1,6b4 <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     6ce:	00470693          	addi	a3,a4,4
     6d2:	f806e693          	ori	a3,a3,-128
     6d6:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     6da:	4632                	lw	a2,12(sp)
     6dc:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     6e0:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     6e2:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     6e6:	f684c5e3          	blt	s1,s0,650 <_write.constprop.0+0x3e>
     6ea:	bfa9                	j	644 <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     6ec:	16fd                	addi	a3,a3,-1
     6ee:	fead                	bnez	a3,668 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     6f0:	00032783          	lw	a5,0(t1)
     6f4:	0c07e793          	ori	a5,a5,192
     6f8:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     6fc:	4401                	li	s0,0
     6fe:	b799                	j	644 <_write.constprop.0+0x32>
	if( size == 0 )
     700:	4481                	li	s1,0
     702:	b7d5                	j	6e6 <_write.constprop.0+0xd4>

00000704 <__puts_uart>:
{
     704:	1151                	addi	sp,sp,-12
     706:	c222                	sw	s0,4(sp)
     708:	c406                	sw	ra,8(sp)
     70a:	842e                	mv	s0,a1
	_write( 0, s, len );
     70c:	3719                	jal	612 <_write.constprop.0>
}
     70e:	40a2                	lw	ra,8(sp)
     710:	8522                	mv	a0,s0
     712:	4412                	lw	s0,4(sp)
     714:	0131                	addi	sp,sp,12
     716:	8082                	ret

00000718 <handle_reset>:
	asm volatile( "\n\
     718:	20000197          	auipc	gp,0x20000
     71c:	ce418193          	addi	gp,gp,-796 # 200003fc <__global_pointer$>
     720:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     724:	6509                	lui	a0,0x2
     726:	88050513          	addi	a0,a0,-1920 # 1880 <_data_lma+0x98>
     72a:	30051073          	csrw	mstatus,a0
     72e:	468d                	li	a3,3
     730:	00000517          	auipc	a0,0x0
     734:	8d050513          	addi	a0,a0,-1840 # 0 <InterruptVector>
     738:	8d55                	or	a0,a0,a3
     73a:	30551073          	csrw	mtvec,a0
asm volatile(
     73e:	c8818513          	addi	a0,gp,-888 # 20000084 <WS2812BLEDInUse>
     742:	14018593          	addi	a1,gp,320 # 2000053c <_ebss>
     746:	4601                	li	a2,0
     748:	00b55663          	bge	a0,a1,754 <handle_reset+0x3c>
     74c:	c110                	sw	a2,0(a0)
     74e:	0511                	addi	a0,a0,4
     750:	feb54ee3          	blt	a0,a1,74c <handle_reset+0x34>
     754:	00001517          	auipc	a0,0x1
     758:	09450513          	addi	a0,a0,148 # 17e8 <_data_lma>
     75c:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_aht21>
     760:	20000617          	auipc	a2,0x20000
     764:	92460613          	addi	a2,a2,-1756 # 20000084 <WS2812BLEDInUse>
     768:	00c58863          	beq	a1,a2,778 <handle_reset+0x60>
     76c:	4114                	lw	a3,0(a0)
     76e:	c194                	sw	a3,0(a1)
     770:	0511                	addi	a0,a0,4
     772:	0591                	addi	a1,a1,4
     774:	fec59ae3          	bne	a1,a2,768 <handle_reset+0x50>
	SysTick->CTLR = 5;
     778:	e000f7b7          	lui	a5,0xe000f
     77c:	4715                	li	a4,5
     77e:	c398                	sw	a4,0(a5)
asm volatile(
     780:	6785                	lui	a5,0x1
     782:	bde78793          	addi	a5,a5,-1058 # bde <main>
     786:	34179073          	csrw	mepc,a5
     78a:	30200073          	mret

0000078e <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     78e:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     792:	34ad                	jal	1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     794:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     798:	3495                	jal	1fc <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     79a:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     79e:	3cb9                	jal	1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     7a0:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     7a4:	3ca1                	jal	1fc <PrintHex>
	while( (*DMDATA0) & 0x80 );
     7a6:	e0000737          	lui	a4,0xe0000
     7aa:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     7ae:	0f470693          	addi	a3,a4,244
     7b2:	0807f793          	andi	a5,a5,128
     7b6:	fbf5                	bnez	a5,7aa <ADC1_2_IRQHandler+0x1c>
	*DMDATA0 = 0x0a85;
     7b8:	6785                	lui	a5,0x1
     7ba:	a8578793          	addi	a5,a5,-1403 # a85 <ssd1306_data.isra.0+0xd>
     7be:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     7c0:	e0000737          	lui	a4,0xe0000
     7c4:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     7c8:	0f470693          	addi	a3,a4,244
     7cc:	0807f793          	andi	a5,a5,128
     7d0:	fbf5                	bnez	a5,7c4 <ADC1_2_IRQHandler+0x36>
	*DMDATA0 = 0xaaaaaa83;
     7d2:	aaaab7b7          	lui	a5,0xaaaab
     7d6:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     7da:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     7dc:	a001                	j	7dc <ADC1_2_IRQHandler+0x4e>

000007de <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     7de:	40021737          	lui	a4,0x40021
     7e2:	471c                	lw	a5,8(a4)
     7e4:	008006b7          	lui	a3,0x800
     7e8:	8fd5                	or	a5,a5,a3
     7ea:	c71c                	sw	a5,8(a4)

000007ec <strlen>:
{
     7ec:	87aa                	mv	a5,a0
	for (; *s; s++);
     7ee:	0007c703          	lbu	a4,0(a5)
     7f2:	e701                	bnez	a4,7fa <strlen+0xe>
}
     7f4:	40a78533          	sub	a0,a5,a0
     7f8:	8082                	ret
	for (; *s; s++);
     7fa:	0785                	addi	a5,a5,1
     7fc:	bfcd                	j	7ee <strlen+0x2>

000007fe <mini_vpprintf>:
{
     7fe:	fa410113          	addi	sp,sp,-92
     802:	c8a6                	sw	s1,80(sp)
     804:	cc86                	sw	ra,88(sp)
     806:	caa2                	sw	s0,84(sp)
     808:	c02a                	sw	a0,0(sp)
     80a:	c22e                	sw	a1,4(sp)
     80c:	84b2                	mv	s1,a2
     80e:	87b6                	mv	a5,a3
	int n = 0;
     810:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     812:	0004c703          	lbu	a4,0(s1)
     816:	00148413          	addi	s0,s1,1
     81a:	00e10fa3          	sb	a4,31(sp)
     81e:	eb01                	bnez	a4,82e <mini_vpprintf+0x30>
}
     820:	40e6                	lw	ra,88(sp)
     822:	4456                	lw	s0,84(sp)
     824:	4542                	lw	a0,16(sp)
     826:	44c6                	lw	s1,80(sp)
     828:	05c10113          	addi	sp,sp,92
     82c:	8082                	ret
		if (ch!='%') {
     82e:	02500693          	li	a3,37
     832:	00d70f63          	beq	a4,a3,850 <mini_vpprintf+0x52>
     836:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     838:	4612                	lw	a2,4(sp)
     83a:	4782                	lw	a5,0(sp)
     83c:	4585                	li	a1,1
     83e:	01f10513          	addi	a0,sp,31
     842:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     844:	84a2                	mv	s1,s0
		n = n + len;
     846:	47c2                	lw	a5,16(sp)
     848:	97aa                	add	a5,a5,a0
     84a:	c83e                	sw	a5,16(sp)
     84c:	47a2                	lw	a5,8(sp)
     84e:	b7d1                	j	812 <mini_vpprintf+0x14>
			ch=*(fmt++);
     850:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     854:	03000613          	li	a2,48
			ch=*(fmt++);
     858:	00248713          	addi	a4,s1,2
     85c:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     860:	03000413          	li	s0,48
     864:	08c69063          	bne	a3,a2,8e4 <mini_vpprintf+0xe6>
				ch=*(fmt++);
     868:	84ba                	mv	s1,a4
     86a:	4601                	li	a2,0
     86c:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     86e:	4525                	li	a0,9
     870:	a811                	j	884 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     872:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     876:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     878:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     87a:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     87e:	0706                	slli	a4,a4,0x1
     880:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     882:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     884:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f716a>
     888:	0ff5f313          	andi	t1,a1,255
     88c:	fe6573e3          	bgeu	a0,t1,872 <mini_vpprintf+0x74>
     890:	c219                	beqz	a2,896 <mini_vpprintf+0x98>
     892:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     896:	c63a                	sw	a4,12(sp)
     898:	4661                	li	a2,24
     89a:	00e65363          	bge	a2,a4,8a0 <mini_vpprintf+0xa2>
     89e:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     8a0:	06c00593          	li	a1,108
			char l = 0;
     8a4:	4601                	li	a2,0
			if (ch == 'l') {
     8a6:	00b69863          	bne	a3,a1,8b6 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     8aa:	0004c683          	lbu	a3,0(s1)
				l = 1;
     8ae:	4605                	li	a2,1
				ch=*(fmt++);
     8b0:	0485                	addi	s1,s1,1
     8b2:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     8b6:	01f14683          	lbu	a3,31(sp)
     8ba:	06400593          	li	a1,100
     8be:	06b68363          	beq	a3,a1,924 <mini_vpprintf+0x126>
     8c2:	02d5e463          	bltu	a1,a3,8ea <mini_vpprintf+0xec>
     8c6:	05800713          	li	a4,88
     8ca:	0ae68163          	beq	a3,a4,96c <mini_vpprintf+0x16e>
     8ce:	06300713          	li	a4,99
     8d2:	0ae68e63          	beq	a3,a4,98e <mini_vpprintf+0x190>
     8d6:	d6a9                	beqz	a3,820 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     8d8:	4612                	lw	a2,4(sp)
     8da:	c43e                	sw	a5,8(sp)
     8dc:	4585                	li	a1,1
     8de:	01f10513          	addi	a0,sp,31
     8e2:	a885                	j	952 <mini_vpprintf+0x154>
			char pad_char = ' ';
     8e4:	02000413          	li	s0,32
     8e8:	b741                	j	868 <mini_vpprintf+0x6a>
			switch (ch) {
     8ea:	07500593          	li	a1,117
     8ee:	02b68b63          	beq	a3,a1,924 <mini_vpprintf+0x126>
     8f2:	07800613          	li	a2,120
     8f6:	06c68b63          	beq	a3,a2,96c <mini_vpprintf+0x16e>
     8fa:	07300613          	li	a2,115
     8fe:	fcc69de3          	bne	a3,a2,8d8 <mini_vpprintf+0xda>
     902:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     904:	00478713          	addi	a4,a5,4
     908:	439c                	lw	a5,0(a5)
     90a:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     90c:	853e                	mv	a0,a5
     90e:	ca3e                	sw	a5,20(sp)
     910:	3df1                	jal	7ec <strlen>
					if (pad_to > 0) {
     912:	4762                	lw	a4,24(sp)
     914:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     916:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     918:	cb41                	beqz	a4,9a8 <mini_vpprintf+0x1aa>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     91a:	46b2                	lw	a3,12(sp)
     91c:	1838                	addi	a4,sp,56
     91e:	8622                	mv	a2,s0
     920:	853e                	mv	a0,a5
     922:	a01d                	j	948 <mini_vpprintf+0x14a>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     924:	00478713          	addi	a4,a5,4
     928:	c43a                	sw	a4,8(sp)
					if(l) {
     92a:	c61d                	beqz	a2,958 <mini_vpprintf+0x15a>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     92c:	f8b68693          	addi	a3,a3,-117
     930:	1018                	addi	a4,sp,32
     932:	0016b693          	seqz	a3,a3
     936:	4388                	lw	a0,0(a5)
     938:	4601                	li	a2,0
     93a:	45a9                	li	a1,10
     93c:	3a21                	jal	254 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     93e:	46b2                	lw	a3,12(sp)
     940:	1838                	addi	a4,sp,56
     942:	8622                	mv	a2,s0
     944:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     946:	1008                	addi	a0,sp,32
     948:	fd6ff0ef          	jal	ra,11e <mini_pad>
					len = puts(bf, len, buf);
     94c:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     94e:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     950:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     952:	4782                	lw	a5,0(sp)
     954:	9782                	jalr	a5
					break;
     956:	bdc5                	j	846 <mini_vpprintf+0x48>
						if(ch == 'u') {
     958:	07500713          	li	a4,117
     95c:	00e69563          	bne	a3,a4,966 <mini_vpprintf+0x168>
	if (radix > 16)
     960:	1018                	addi	a4,sp,32
     962:	4685                	li	a3,1
     964:	bfc9                	j	936 <mini_vpprintf+0x138>
     966:	1018                	addi	a4,sp,32
     968:	4681                	li	a3,0
     96a:	b7f1                	j	936 <mini_vpprintf+0x138>
					if(l) {
     96c:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     96e:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     972:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     976:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     978:	4685                	li	a3,1
     97a:	1018                	addi	a4,sp,32
     97c:	00163613          	seqz	a2,a2
     980:	45c1                	li	a1,16
     982:	38c9                	jal	254 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     984:	46b2                	lw	a3,12(sp)
     986:	85aa                	mv	a1,a0
     988:	1838                	addi	a4,sp,56
     98a:	8622                	mv	a2,s0
     98c:	bf6d                	j	946 <mini_vpprintf+0x148>
					ch = (char)(va_arg(va, int));
     98e:	00478713          	addi	a4,a5,4
     992:	439c                	lw	a5,0(a5)
     994:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     996:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     998:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     99c:	1838                	addi	a4,sp,56
     99e:	8622                	mv	a2,s0
     9a0:	4585                	li	a1,1
     9a2:	01f10513          	addi	a0,sp,31
     9a6:	b74d                	j	948 <mini_vpprintf+0x14a>
						len = puts(ptr, len, buf);
     9a8:	4612                	lw	a2,4(sp)
     9aa:	853e                	mv	a0,a5
     9ac:	b75d                	j	952 <mini_vpprintf+0x154>

000009ae <printf>:
{
     9ae:	fdc10113          	addi	sp,sp,-36
     9b2:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     9b4:	862a                	mv	a2,a0
{
     9b6:	c82e                	sw	a1,16(sp)
     9b8:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     9ba:	4581                	li	a1,0
	va_start( args, format );
     9bc:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     9be:	70400513          	li	a0,1796
{
     9c2:	c606                	sw	ra,12(sp)
     9c4:	ce3a                	sw	a4,28(sp)
     9c6:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     9c8:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     9ca:	3d15                	jal	7fe <mini_vpprintf>
}
     9cc:	40b2                	lw	ra,12(sp)
     9ce:	02410113          	addi	sp,sp,36
     9d2:	8082                	ret

000009d4 <onI2C_SlaveWrite>:
#include "../Mess-libs/modules/systick_irq.h"
#include "../Mess-libs/modules/fun_button.h"
#include "../Mess-libs/i2c/i2c_slave.h"

void onI2C_SlaveWrite(uint8_t reg, uint8_t length) {
	printf("IM WRITEEN TO\n\r");
     9d4:	6505                	lui	a0,0x1
     9d6:	50850513          	addi	a0,a0,1288 # 1508 <I2C1_ER_IRQHandler+0x7c>
     9da:	bfd1                	j	9ae <printf>

000009dc <onI2C_SlaveRead>:
}

void onI2C_SlaveRead(uint8_t reg) {
	printf("IM READEN FROM.\n\r");
     9dc:	6505                	lui	a0,0x1
     9de:	51850513          	addi	a0,a0,1304 # 1518 <I2C1_ER_IRQHandler+0x8c>
     9e2:	b7f1                	j	9ae <printf>

000009e4 <mini_vsnprintf>:
{
     9e4:	1121                	addi	sp,sp,-24
     9e6:	ca06                	sw	ra,20(sp)
     9e8:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
     9ea:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
     9ec:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
     9ee:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
     9f0:	c185                	beqz	a1,a10 <mini_vsnprintf+0x2c>
     9f2:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
     9f4:	858a                	mv	a1,sp
     9f6:	e111                	bnez	a0,9fa <mini_vsnprintf+0x16>
     9f8:	4581                	li	a1,0
     9fa:	1ba00513          	li	a0,442
     9fe:	3501                	jal	7fe <mini_vpprintf>
	if(buffer == (void*) 0) {
     a00:	c401                	beqz	s0,a08 <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
     a02:	4512                	lw	a0,4(sp)
     a04:	4782                	lw	a5,0(sp)
     a06:	8d1d                	sub	a0,a0,a5
}
     a08:	40d2                	lw	ra,20(sp)
     a0a:	4442                	lw	s0,16(sp)
     a0c:	0161                	addi	sp,sp,24
     a0e:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
     a10:	4401                	li	s0,0
     a12:	b7dd                	j	9f8 <mini_vsnprintf+0x14>

00000a14 <sprintf>:
{
     a14:	1101                	addi	sp,sp,-32
     a16:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     a18:	862e                	mv	a2,a1
     a1a:	800005b7          	lui	a1,0x80000
{
     a1e:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     a20:	fff5c593          	not	a1,a1
	va_start( args, format );
     a24:	0814                	addi	a3,sp,16
{
     a26:	c606                	sw	ra,12(sp)
     a28:	cc3a                	sw	a4,24(sp)
     a2a:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
     a2c:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     a2e:	3f5d                	jal	9e4 <mini_vsnprintf>
}
     a30:	40b2                	lw	ra,12(sp)
     a32:	6105                	addi	sp,sp,32
     a34:	8082                	ret

00000a36 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     a36:	962a                	add	a2,a2,a0
     a38:	87aa                	mv	a5,a0
     a3a:	00c79363          	bne	a5,a2,a40 <memset+0xa>
     a3e:	8082                	ret
     a40:	00b78023          	sb	a1,0(a5)
     a44:	0785                	addi	a5,a5,1
     a46:	bfd5                	j	a3a <memset+0x4>

00000a48 <strcpy>:
{
     a48:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
     a4a:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
     a4e:	00e78023          	sb	a4,0(a5)
     a52:	e311                	bnez	a4,a56 <strcpy+0xe>
}
     a54:	8082                	ret
	for (; (*d=*s); s++, d++);
     a56:	0585                	addi	a1,a1,1
     a58:	0785                	addi	a5,a5,1
     a5a:	bfc5                	j	a4a <strcpy+0x2>

00000a5c <memcpy>:
{
     a5c:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     a5e:	00f61363          	bne	a2,a5,a64 <memcpy+0x8>
}
     a62:	8082                	ret
	for (; n; n--) *d++ = *s++;
     a64:	00f58733          	add	a4,a1,a5
     a68:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
     a6c:	00f50733          	add	a4,a0,a5
     a70:	0785                	addi	a5,a5,1
     a72:	00d70023          	sb	a3,0(a4)
     a76:	b7e5                	j	a5e <memcpy+0x2>

00000a78 <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
     a78:	7179                	addi	sp,sp,-48
     a7a:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
     a7c:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
     a80:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
     a82:	862e                	mv	a2,a1
     a84:	85aa                	mv	a1,a0
     a86:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
     a8a:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
     a8c:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
     a90:	37f1                	jal	a5c <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
     a92:	00140593          	addi	a1,s0,1
     a96:	850a                	mv	a0,sp
     a98:	3c01                	jal	4a8 <i2c_write_raw.constprop.0>
}
     a9a:	50b2                	lw	ra,44(sp)
     a9c:	5422                	lw	s0,40(sp)
     a9e:	6145                	addi	sp,sp,48
     aa0:	8082                	ret

00000aa2 <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
     aa2:	1151                	addi	sp,sp,-12
     aa4:	c222                	sw	s0,4(sp)
     aa6:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
     aa8:	02100513          	li	a0,33
void ssd1306_print_str_at(
     aac:	c406                	sw	ra,8(sp)
     aae:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
     ab0:	3e35                	jal	5ec <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
     ab2:	4501                	li	a0,0
     ab4:	3e25                	jal	5ec <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
     ab6:	07f00513          	li	a0,127
     aba:	3e0d                	jal	5ec <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
     abc:	02200513          	li	a0,34
     ac0:	3635                	jal	5ec <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
     ac2:	8522                	mv	a0,s0
     ac4:	3625                	jal	5ec <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
     ac6:	8522                	mv	a0,s0
     ac8:	3615                	jal	5ec <ssd1306_cmd>
     aca:	4465                	li	s0,25
     acc:	12c18493          	addi	s1,gp,300 # 20000528 <str_output>
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i<25; i++) {
		if (*str) {
     ad0:	0004c783          	lbu	a5,0(s1)
     ad4:	c78d                	beqz	a5,afe <ssd1306_print_str_at.constprop.0+0x5c>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
     ad6:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
     ad8:	0ff7f793          	andi	a5,a5,255
     adc:	6705                	lui	a4,0x1
     ade:	00279693          	slli	a3,a5,0x2
     ae2:	5d070513          	addi	a0,a4,1488 # 15d0 <FONT_7x5>
     ae6:	97b6                	add	a5,a5,a3
     ae8:	4595                	li	a1,5
     aea:	953e                	add	a0,a0,a5
     aec:	3771                	jal	a78 <ssd1306_data.isra.0>
			str++;
     aee:	0485                	addi	s1,s1,1
	for (int i=0; i<25; i++) {
     af0:	147d                	addi	s0,s0,-1
     af2:	fc79                	bnez	s0,ad0 <ssd1306_print_str_at.constprop.0+0x2e>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
     af4:	40a2                	lw	ra,8(sp)
     af6:	4412                	lw	s0,4(sp)
     af8:	4482                	lw	s1,0(sp)
     afa:	0131                	addi	sp,sp,12
     afc:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
     afe:	6785                	lui	a5,0x1
     b00:	4595                	li	a1,5
     b02:	5d078513          	addi	a0,a5,1488 # 15d0 <FONT_7x5>
     b06:	3f8d                	jal	a78 <ssd1306_data.isra.0>
     b08:	b7e5                	j	af0 <ssd1306_print_str_at.constprop.0+0x4e>

00000b0a <puts>:
{
     b0a:	1151                	addi	sp,sp,-12
     b0c:	c406                	sw	ra,8(sp)
     b0e:	c222                	sw	s0,4(sp)
     b10:	c026                	sw	s1,0(sp)
     b12:	84aa                	mv	s1,a0
	int sl = strlen( s );
     b14:	39e1                	jal	7ec <strlen>
     b16:	842a                	mv	s0,a0
	_write(0, s, sl );
     b18:	85aa                	mv	a1,a0
     b1a:	8526                	mv	a0,s1
     b1c:	3cdd                	jal	612 <_write.constprop.0>
	_write(0, "\n", 1 );
     b1e:	6505                	lui	a0,0x1
     b20:	4585                	li	a1,1
     b22:	52c50513          	addi	a0,a0,1324 # 152c <I2C1_ER_IRQHandler+0xa0>
     b26:	34f5                	jal	612 <_write.constprop.0>
}
     b28:	40a2                	lw	ra,8(sp)
     b2a:	00140513          	addi	a0,s0,1
     b2e:	4412                	lw	s0,4(sp)
     b30:	4482                	lw	s1,0(sp)
     b32:	0131                	addi	sp,sp,12
     b34:	8082                	ret

00000b36 <i2c_scan_callback>:
	if (i2c_ping(0x3C) != I2C_OK) return;
	ssd1306_print_str_at(str, line, 0);
}

void i2c_scan_callback(const uint8_t addr) {
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
     b36:	c539                	beqz	a0,b84 <i2c_scan_callback+0x4e>
     b38:	07f00793          	li	a5,127
     b3c:	862a                	mv	a2,a0
     b3e:	04f50363          	beq	a0,a5,b84 <i2c_scan_callback+0x4e>
void i2c_scan_callback(const uint8_t addr) {
     b42:	1151                	addi	sp,sp,-12
     b44:	c222                	sw	s0,4(sp)
	
	static int line = 1;
	sprintf(str_output, "I2C: 0x%02X", addr);
     b46:	6585                	lui	a1,0x1
     b48:	53058593          	addi	a1,a1,1328 # 1530 <I2C1_ER_IRQHandler+0xa4>
     b4c:	12c18513          	addi	a0,gp,300 # 20000528 <str_output>
void i2c_scan_callback(const uint8_t addr) {
     b50:	c406                	sw	ra,8(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
     b52:	35c9                	jal	a14 <sprintf>
	printf("%s\n", str_output);
     b54:	12c18513          	addi	a0,gp,300 # 20000528 <str_output>
     b58:	3f4d                	jal	b0a <puts>
	modI2C_display(str_output, line++);
     b5a:	c3c18793          	addi	a5,gp,-964 # 20000038 <line.5>
     b5e:	4380                	lw	s0,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
     b60:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
     b64:	00140713          	addi	a4,s0,1
     b68:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
     b6a:	8a7ff0ef          	jal	ra,410 <i2c_ping>
     b6e:	e519                	bnez	a0,b7c <i2c_scan_callback+0x46>
	ssd1306_print_str_at(str, line, 0);
     b70:	0ff47513          	andi	a0,s0,255
}
     b74:	4412                	lw	s0,4(sp)
     b76:	40a2                	lw	ra,8(sp)
     b78:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
     b7a:	b725                	j	aa2 <ssd1306_print_str_at.constprop.0>
}
     b7c:	40a2                	lw	ra,8(sp)
     b7e:	4412                	lw	s0,4(sp)
     b80:	0131                	addi	sp,sp,12
     b82:	8082                	ret
     b84:	8082                	ret

00000b86 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
     b86:	400227b7          	lui	a5,0x40022
     b8a:	4705                	li	a4,1
     b8c:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
     b8e:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     b92:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
     b96:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     b9a:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x107721b>
     b9e:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
     ba0:	009f0737          	lui	a4,0x9f0
     ba4:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
     ba6:	020006b7          	lui	a3,0x2000
     baa:	40021737          	lui	a4,0x40021
     bae:	431c                	lw	a5,0(a4)
     bb0:	8ff5                	and	a5,a5,a3
     bb2:	dff5                	beqz	a5,bae <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     bb4:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     bb6:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     bba:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
     bbc:	0027e793          	ori	a5,a5,2
     bc0:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     bc2:	4721                	li	a4,8
     bc4:	42dc                	lw	a5,4(a3)
     bc6:	8bb1                	andi	a5,a5,12
     bc8:	fee79ee3          	bne	a5,a4,bc4 <SystemInit+0x3e>
	*DMDATA1 = 0x00;
     bcc:	e00007b7          	lui	a5,0xe0000
     bd0:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
     bd4:	08000713          	li	a4,128
     bd8:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     bdc:	8082                	ret

00000bde <main>:
			printf("Long Press\n"); break;
	}
}

int main()
{
     bde:	1111                	addi	sp,sp,-28
     be0:	ca22                	sw	s0,20(sp)
     be2:	cc06                	sw	ra,24(sp)
     be4:	c826                	sw	s1,16(sp)
	uint32_t sec_time = 0;
	uint32_t time_ref = 0;

	M_Encoder encoder_a = {0, 0, 0};

	SystemInit();
     be6:	3745                	jal	b86 <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
     be8:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     bec:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
     bee:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     bf2:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x2d19>
     bf6:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
     bf8:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
     bfc:	c9c18713          	addi	a4,gp,-868 # 20000098 <systick_millis>
     c00:	00072023          	sw	zero,0(a4)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
     c04:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     c06:	6685                	lui	a3,0x1
     c08:	c9c18413          	addi	s0,gp,-868 # 20000098 <systick_millis>
     c0c:	00776713          	ori	a4,a4,7
     c10:	c398                	sw	a4,0(a5)
     c12:	e000e737          	lui	a4,0xe000e
     c16:	10d72023          	sw	a3,256(a4) # e000e100 <_eusrstack+0xc000d900>
	systick_init();			//! required for millis()

	funGpioInitAll();
     c1a:	400216b7          	lui	a3,0x40021
     c1e:	4e98                	lw	a4,24(a3)
     c20:	03576713          	ori	a4,a4,53
     c24:	ce98                	sw	a4,24(a3)
	uint32_t targend = SysTick->CNT + n;
     c26:	4798                	lw	a4,8(a5)
     c28:	004947b7          	lui	a5,0x494
     c2c:	e0078793          	addi	a5,a5,-512 # 493e00 <lib_i2c.c.d894f163+0x48af9a>
     c30:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     c32:	e000f6b7          	lui	a3,0xe000f
     c36:	469c                	lw	a5,8(a3)
     c38:	8f99                	sub	a5,a5,a4
     c3a:	fe07cee3          	bltz	a5,c36 <main+0x58>
    }

    void button_setup(Button_t *model) {
    if (model->pin == 0xFF) return; 

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
     c3e:	40011737          	lui	a4,0x40011
     c42:	40072783          	lw	a5,1024(a4) # 40011400 <_eusrstack+0x20010c00>
     c46:	40070693          	addi	a3,a4,1024
     c4a:	9bc1                	andi	a5,a5,-16
     c4c:	0087e793          	ori	a5,a5,8
     c50:	40f72023          	sw	a5,1024(a4)
    funDigitalWrite(model->pin, 1);
     c54:	4785                	li	a5,1
     c56:	ca9c                	sw	a5,16(a3)
    model->debounce_time = millis();
     c58:	4018                	lw	a4,0(s0)
    model->release_time = millis();
     c5a:	4004                	lw	s1,0(s0)
    model->debounce_time = millis();
     c5c:	c03a                	sw	a4,0(sp)
	if(dev->regb == 0) dev->regb = 1;
     c5e:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_aht21>
     c62:	00a74703          	lbu	a4,10(a4)
     c66:	c0418693          	addi	a3,gp,-1020 # 20000000 <dev_aht21>
     c6a:	e701                	bnez	a4,c72 <main+0x94>
	if(dev->regb  > 4) dev->regb = 4;
     c6c:	00f68523          	sb	a5,10(a3) # e000f00a <_eusrstack+0xc000e80a>
     c70:	a021                	j	c78 <main+0x9a>
     c72:	4791                	li	a5,4
     c74:	fee7ece3          	bltu	a5,a4,c6c <main+0x8e>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
     c78:	400217b7          	lui	a5,0x40021
     c7c:	4b90                	lw	a2,16(a5)
     c7e:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     c82:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
     c86:	8e49                	or	a2,a2,a0
     c88:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     c8a:	4b90                	lw	a2,16(a5)
     c8c:	15fd                	addi	a1,a1,-1
     c8e:	8e6d                	and	a2,a2,a1
     c90:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     c92:	4fd8                	lw	a4,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
     c94:	fbc00637          	lui	a2,0xfbc00
     c98:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     c9a:	8f49                	or	a4,a4,a0
     c9c:	cfd8                	sw	a4,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
     c9e:	4f98                	lw	a4,24(a5)
     ca0:	01176713          	ori	a4,a4,17
     ca4:	cf98                	sw	a4,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
     ca6:	400107b7          	lui	a5,0x40010
     caa:	43d8                	lw	a4,4(a5)
     cac:	8f71                	and	a4,a4,a2
     cae:	c3d8                	sw	a4,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
     cb0:	43d8                	lw	a4,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
     cb2:	767d                	lui	a2,0xfffff
     cb4:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
     cb8:	c3d8                	sw	a4,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
     cba:	400117b7          	lui	a5,0x40011
     cbe:	4398                	lw	a4,0(a5)
     cc0:	f0f77713          	andi	a4,a4,-241
     cc4:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
     cc6:	4398                	lw	a4,0(a5)
     cc8:	0d076713          	ori	a4,a4,208
     ccc:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
     cce:	4398                	lw	a4,0(a5)
     cd0:	8f71                	and	a4,a4,a2
     cd2:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
     cd4:	4390                	lw	a2,0(a5)
     cd6:	6705                	lui	a4,0x1
     cd8:	d0070593          	addi	a1,a4,-768 # d00 <main+0x122>
     cdc:	8e4d                	or	a2,a2,a1
     cde:	c390                	sw	a2,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
     ce0:	40005637          	lui	a2,0x40005
     ce4:	40465783          	lhu	a5,1028(a2) # 40005404 <_eusrstack+0x20004c04>
     ce8:	07c2                	slli	a5,a5,0x10
     cea:	83c1                	srli	a5,a5,0x10
     cec:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
     cf0:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
     cf4:	40f61223          	sh	a5,1028(a2)
	if(dev->clkr <= 100000)
     cf8:	429c                	lw	a5,0(a3)
     cfa:	66e1                	lui	a3,0x18
     cfc:	6a068693          	addi	a3,a3,1696 # 186a0 <lib_i2c.c.d894f163+0xf83a>
     d00:	00179593          	slli	a1,a5,0x1
     d04:	16f6e963          	bltu	a3,a5,e76 <main+0x298>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
     d08:	02dc7537          	lui	a0,0x2dc7
     d0c:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbdd9a>
     d10:	b98ff0ef          	jal	ra,a8 <__hidden___udivsi3>
     d14:	6705                	lui	a4,0x1
     d16:	177d                	addi	a4,a4,-1
     d18:	8d79                	and	a0,a0,a4
     d1a:	0542                	slli	a0,a0,0x10
     d1c:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
     d1e:	40005737          	lui	a4,0x40005
     d22:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
     d26:	40075783          	lhu	a5,1024(a4)
     d2a:	07c2                	slli	a5,a5,0x10
     d2c:	83c1                	srli	a5,a5,0x10
     d2e:	0017e793          	ori	a5,a5,1
     d32:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
     d36:	ddcff0ef          	jal	ra,312 <i2c_error>

void modI2C_setup() {
	if(i2c_init(&dev_aht21) != I2C_OK) {
     d3a:	14050d63          	beqz	a0,e94 <main+0x2b6>
		printf("Failed to init I2C\n");
     d3e:	6505                	lui	a0,0x1
     d40:	53c50513          	addi	a0,a0,1340 # 153c <I2C1_ER_IRQHandler+0xb0>
     d44:	33d9                	jal	b0a <puts>
} i2c_slave_state;

void SetupI2CSlave(uint8_t address, volatile uint8_t* registers, uint8_t size,
    i2c_write_callback_t write_callback, i2c_read_callback_t read_callback, bool read_only
) {
    i2c_slave_state.first_write = 1;
     d46:	10018793          	addi	a5,gp,256 # 200004fc <i2c_slave_state>
     d4a:	4705                	li	a4,1
     d4c:	00e79023          	sh	a4,0(a5) # 40011000 <_eusrstack+0x20010800>
    i2c_slave_state.offset = 0;
    i2c_slave_state.position = 0;
    i2c_slave_state.registers1 = registers;
     d50:	c1c18713          	addi	a4,gp,-996 # 20000018 <i2c_registers>
     d54:	c3d8                	sw	a4,4(a5)
    i2c_slave_state.size1 = size;
    i2c_slave_state.registers2 = NULL;
    i2c_slave_state.size2 = 0;
    i2c_slave_state.write_callback1 = write_callback;
     d56:	6705                	lui	a4,0x1
     d58:	9d470713          	addi	a4,a4,-1580 # 9d4 <onI2C_SlaveWrite>
     d5c:	cbd8                	sw	a4,20(a5)
    i2c_slave_state.read_callback1 = read_callback;
     d5e:	6705                	lui	a4,0x1
    i2c_slave_state.size1 = size;
     d60:	02000613          	li	a2,32
    i2c_slave_state.read_callback1 = read_callback;
     d64:	9dc70713          	addi	a4,a4,-1572 # 9dc <onI2C_SlaveRead>
    i2c_slave_state.registers2 = NULL;
     d68:	0007a623          	sw	zero,12(a5)
    i2c_slave_state.size2 = 0;
     d6c:	00078823          	sb	zero,16(a5)
    i2c_slave_state.read_only1 = read_only;
     d70:	00078e23          	sb	zero,28(a5)
    i2c_slave_state.read_callback1 = read_callback;
     d74:	cf98                	sw	a4,24(a5)
    i2c_slave_state.position = 0;
     d76:	00078123          	sb	zero,2(a5)
    i2c_slave_state.size1 = size;
     d7a:	00c78423          	sb	a2,8(a5)
    i2c_slave_state.write_callback2 = NULL;
     d7e:	0207a023          	sw	zero,32(a5)
    i2c_slave_state.read_callback2 = NULL;
     d82:	0207a223          	sw	zero,36(a5)
    i2c_slave_state.read_only2 = false;
     d86:	02078423          	sb	zero,40(a5)

    // Enable I2C1
    RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     d8a:	400217b7          	lui	a5,0x40021
     d8e:	4fd4                	lw	a3,28(a5)
     d90:	002005b7          	lui	a1,0x200
     d94:	8ecd                	or	a3,a3,a1
     d96:	cfd4                	sw	a3,28(a5)

    // Reset I2C1 to init all regs
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
     d98:	4b98                	lw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     d9a:	ffe006b7          	lui	a3,0xffe00
     d9e:	16fd                	addi	a3,a3,-1
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
     da0:	8f4d                	or	a4,a4,a1
     da2:	cb98                	sw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     da4:	4b98                	lw	a4,16(a5)

    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
     da6:	65a1                	lui	a1,0x8
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     da8:	8f75                	and	a4,a4,a3
     daa:	cb98                	sw	a4,16(a5)
    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
     dac:	400057b7          	lui	a5,0x40005
     db0:	4007d683          	lhu	a3,1024(a5) # 40005400 <_eusrstack+0x20004c00>
     db4:	06c2                	slli	a3,a3,0x10
     db6:	82c1                	srli	a3,a3,0x10
     db8:	8ecd                	or	a3,a3,a1
     dba:	40d79023          	sh	a3,1024(a5)
    I2C1->CTLR1 &= ~I2C_CTLR1_SWRST;
     dbe:	4007d683          	lhu	a3,1024(a5)
     dc2:	400005b7          	lui	a1,0x40000
     dc6:	06c6                	slli	a3,a3,0x11
     dc8:	82c5                	srli	a3,a3,0x11
     dca:	40d79023          	sh	a3,1024(a5)

    // Set module clock frequency
    uint32_t prerate = 2000000; // I2C Logic clock rate, must be higher than the bus clock rate
    I2C1->CTLR2 |= (FUNCONF_SYSTEM_CORE_CLOCK/prerate) & I2C_CTLR2_FREQ;
     dce:	4047d683          	lhu	a3,1028(a5)
     dd2:	06c2                	slli	a3,a3,0x10
     dd4:	82c1                	srli	a3,a3,0x10
     dd6:	0186e693          	ori	a3,a3,24
     dda:	40d79223          	sh	a3,1028(a5)

    // Enable interrupts
    I2C1->CTLR2 |= I2C_CTLR2_ITBUFEN | I2C_CTLR2_ITEVTEN | I2C_CTLR2_ITERREN;
     dde:	4047d683          	lhu	a3,1028(a5)
     de2:	06c2                	slli	a3,a3,0x10
     de4:	82c1                	srli	a3,a3,0x10
     de6:	7006e693          	ori	a3,a3,1792
     dea:	40d79223          	sh	a3,1028(a5)
     dee:	e000e6b7          	lui	a3,0xe000e
     df2:	10b6a023          	sw	a1,256(a3) # e000e100 <_eusrstack+0xc000d900>
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
     df6:	40c68f23          	sb	a2,1054(a3)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     dfa:	800005b7          	lui	a1,0x80000
     dfe:	10b6a023          	sw	a1,256(a3)
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
     e02:	40c68fa3          	sb	a2,1055(a3)
    NVIC_EnableIRQ(I2C1_ER_IRQn); // Error interrupt
    NVIC_SetPriority(I2C1_ER_IRQn, 2 << 4);

    // Set clock configuration
    uint32_t clockrate = 1000000; // I2C Bus clock rate, must be lower than the logic clock rate
    I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(3*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_FS; // Fast mode 33% duty cycle
     e06:	76e1                	lui	a3,0xffff8
     e08:	06c1                	addi	a3,a3,16
     e0a:	40d79e23          	sh	a3,1052(a5)
    //I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(25*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_DUTY | I2C_CKCFGR_FS; // Fast mode 36% duty cycle
    //I2C1->CKCFGR = (FUNCONF_SYSTEM_CORE_CLOCK/(2*clockrate))&I2C_CKCFGR_CCR; // Standard mode good to 100kHz

    // Set I2C address
    I2C1->OADDR1 = address << 1;
     e0e:	0ee00693          	li	a3,238
     e12:	40d79423          	sh	a3,1032(a5)
    I2C1->OADDR2 = 0;
     e16:	40079623          	sh	zero,1036(a5)

    // Enable I2C
    I2C1->CTLR1 |= I2C_CTLR1_PE;
     e1a:	4007d703          	lhu	a4,1024(a5)
     e1e:	0742                	slli	a4,a4,0x10
     e20:	8341                	srli	a4,a4,0x10
     e22:	00176713          	ori	a4,a4,1
     e26:	40e79023          	sh	a4,1024(a5)

    // Acknowledge bytes when they are received
    I2C1->CTLR1 |= I2C_CTLR1_ACK;
     e2a:	4007d703          	lhu	a4,1024(a5)
     e2e:	0742                	slli	a4,a4,0x10
     e30:	8341                	srli	a4,a4,0x10
     e32:	40076713          	ori	a4,a4,1024
     e36:	40e79023          	sh	a4,1024(a5)
	Delay_Ms(100);

	Button_t button_a = { PD0, BUTTON_IDLE, 0, 0, 0, 0, 0, 0 };
     e3a:	c202                	sw	zero,4(sp)
    model->btn_state = newState;
     e3c:	470d                	li	a4,3

	while(1) {
		// uint8_t read = funDigitalRead(PD0);
		// printf("reading: %d\n", read);

		uint32_t now = millis();
     e3e:	401c                	lw	a5,0(s0)
}

void button_run(Button_t *model, void (*handler)(int, uint32_t)) {
    if (model->pin == 0xFF) return;
    
    uint32_t now = millis();
     e40:	401c                	lw	a5,0(s0)
    uint8_t read = funDigitalRead(model->pin);

    // Debounce check
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
     e42:	4602                	lw	a2,0(sp)
    uint8_t read = funDigitalRead(model->pin);
     e44:	400116b7          	lui	a3,0x40011
     e48:	40068693          	addi	a3,a3,1024 # 40011400 <_eusrstack+0x20010c00>
     e4c:	4694                	lw	a3,8(a3)
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
     e4e:	40c785b3          	sub	a1,a5,a2
     e52:	464d                	li	a2,19
     e54:	1eb67563          	bgeu	a2,a1,103e <main+0x460>
    model->debounce_time = now;

    switch (model->btn_state) {
     e58:	4609                	li	a2,2
    uint8_t read = funDigitalRead(model->pin);
     e5a:	8a85                	andi	a3,a3,1
    switch (model->btn_state) {
     e5c:	1cc70c63          	beq	a4,a2,1034 <main+0x456>
     e60:	460d                	li	a2,3
     e62:	16c70863          	beq	a4,a2,fd2 <main+0x3f4>
     e66:	18071f63          	bnez	a4,1004 <main+0x426>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
     e6a:	16068c63          	beqz	a3,fe2 <main+0x404>
    model->debounce_time = millis();
     e6e:	401c                	lw	a5,0(s0)
    model->btn_state = newState;
     e70:	8736                	mv	a4,a3
    model->release_time = millis();
     e72:	4004                	lw	s1,0(s0)
     e74:	a2ad                	j	fde <main+0x400>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
     e76:	02dc7537          	lui	a0,0x2dc7
     e7a:	95be                	add	a1,a1,a5
     e7c:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbdd9a>
     e80:	a28ff0ef          	jal	ra,a8 <__hidden___udivsi3>
     e84:	6705                	lui	a4,0x1
     e86:	177d                	addi	a4,a4,-1
     e88:	8d79                	and	a0,a0,a4
     e8a:	0542                	slli	a0,a0,0x10
     e8c:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
     e8e:	67a1                	lui	a5,0x8
     e90:	8d5d                	or	a0,a0,a5
     e92:	b571                	j	d1e <main+0x140>
	} else {
		if (i2c_ping(0x3C) == I2C_OK) {
     e94:	03c00513          	li	a0,60
     e98:	d78ff0ef          	jal	ra,410 <i2c_ping>
     e9c:	0e051263          	bnez	a0,f80 <main+0x3a2>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
     ea0:	6785                	lui	a5,0x1
     ea2:	c8018c23          	sb	zero,-872(gp) # 20000094 <ssd1306_buffer>
     ea6:	7cc78793          	addi	a5,a5,1996 # 17cc <ssd1306_init_array>
     eaa:	c23a                	sw	a4,4(sp)

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
     eac:	0007c503          	lbu	a0,0(a5)
     eb0:	0ff00713          	li	a4,255
     eb4:	02e51e63          	bne	a0,a4,ef0 <main+0x312>
		ssd1306_cmd(SSD1306_COLUMNADDR);
     eb8:	02100513          	li	a0,33
     ebc:	f30ff0ef          	jal	ra,5ec <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
     ec0:	4501                	li	a0,0
     ec2:	f2aff0ef          	jal	ra,5ec <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
     ec6:	07f00513          	li	a0,127
     eca:	f22ff0ef          	jal	ra,5ec <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
     ece:	02200513          	li	a0,34
     ed2:	f1aff0ef          	jal	ra,5ec <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
     ed6:	4501                	li	a0,0
     ed8:	f14ff0ef          	jal	ra,5ec <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
     edc:	451d                	li	a0,7
     ede:	f0eff0ef          	jal	ra,5ec <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
     ee2:	4792                	lw	a5,4(sp)
     ee4:	02000593          	li	a1,32
     ee8:	c9818513          	addi	a0,gp,-872 # 20000094 <ssd1306_buffer>
     eec:	3671                	jal	a78 <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
     eee:	a039                	j	efc <main+0x31e>
			if(ssd1306_cmd(*cmd_list++)) return 1;
     ef0:	0785                	addi	a5,a5,1
     ef2:	c43e                	sw	a5,8(sp)
     ef4:	ef8ff0ef          	jal	ra,5ec <ssd1306_cmd>
     ef8:	47a2                	lw	a5,8(sp)
     efa:	d94d                	beqz	a0,eac <main+0x2ce>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
     efc:	40000613          	li	a2,1024
     f00:	d0018513          	addi	a0,gp,-768 # 200000fc <frame_buffer>
     f04:	4581                	li	a1,0
     f06:	3e05                	jal	a36 <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
     f08:	02100513          	li	a0,33
     f0c:	ee0ff0ef          	jal	ra,5ec <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
     f10:	4501                	li	a0,0
     f12:	edaff0ef          	jal	ra,5ec <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
     f16:	07f00513          	li	a0,127
     f1a:	ed2ff0ef          	jal	ra,5ec <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
     f1e:	02200513          	li	a0,34
     f22:	ecaff0ef          	jal	ra,5ec <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
     f26:	4501                	li	a0,0
     f28:	ec4ff0ef          	jal	ra,5ec <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
     f2c:	451d                	li	a0,7
     f2e:	ebeff0ef          	jal	ra,5ec <ssd1306_cmd>
     f32:	4781                	li	a5,0
     f34:	863a                	mv	a2,a4
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
     f36:	d0018713          	addi	a4,gp,-768 # 200000fc <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
     f3a:	4501                	li	a0,0
     f3c:	973e                	add	a4,a4,a5
     f3e:	02050693          	addi	a3,a0,32
     f42:	01069593          	slli	a1,a3,0x10
     f46:	81c1                	srli	a1,a1,0x10
     f48:	8d89                	sub	a1,a1,a0
     f4a:	953a                	add	a0,a0,a4
     f4c:	c63e                	sw	a5,12(sp)
     f4e:	c436                	sw	a3,8(sp)
     f50:	c23a                	sw	a4,4(sp)
     f52:	361d                	jal	a78 <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
     f54:	46a2                	lw	a3,8(sp)
     f56:	4712                	lw	a4,4(sp)
     f58:	47b2                	lw	a5,12(sp)
     f5a:	8536                	mv	a0,a3
     f5c:	08000693          	li	a3,128
     f60:	fcd51fe3          	bne	a0,a3,f3e <main+0x360>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
     f64:	08078793          	addi	a5,a5,128
     f68:	40000713          	li	a4,1024
     f6c:	fce795e3          	bne	a5,a4,f36 <main+0x358>
			ssd1306_setup();

			sprintf(str_output, "Hello Bee!");
     f70:	6585                	lui	a1,0x1
     f72:	55058593          	addi	a1,a1,1360 # 1550 <I2C1_ER_IRQHandler+0xc4>
     f76:	12c18513          	addi	a0,gp,300 # 20000528 <str_output>
     f7a:	34f9                	jal	a48 <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
     f7c:	4501                	li	a0,0
     f7e:	3615                	jal	aa2 <ssd1306_print_str_at.constprop.0>
		}

		// Scan the I2C Bus, prints any devices that respond
		printf("----Scanning I2C Bus for Devices---\n");
     f80:	6505                	lui	a0,0x1
     f82:	55c50513          	addi	a0,a0,1372 # 155c <I2C1_ER_IRQHandler+0xd0>
     f86:	3651                	jal	b0a <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
     f88:	4781                	li	a5,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
     f8a:	853e                	mv	a0,a5
     f8c:	c23e                	sw	a5,4(sp)
     f8e:	c82ff0ef          	jal	ra,410 <i2c_ping>
     f92:	4792                	lw	a5,4(sp)
     f94:	e501                	bnez	a0,f9c <main+0x3be>
     f96:	853e                	mv	a0,a5
     f98:	3e79                	jal	b36 <i2c_scan_callback>
     f9a:	4792                	lw	a5,4(sp)
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
     f9c:	0785                	addi	a5,a5,1
     f9e:	0ff7f793          	andi	a5,a5,255
     fa2:	07f00713          	li	a4,127
     fa6:	fee792e3          	bne	a5,a4,f8a <main+0x3ac>
		i2c_scan(i2c_scan_callback);
		printf("----Done Scanning----\n\n");
     faa:	6505                	lui	a0,0x1
     fac:	58050513          	addi	a0,a0,1408 # 1580 <I2C1_ER_IRQHandler+0xf4>
     fb0:	3ea9                	jal	b0a <puts>
	// i2c_device_tests();
	// test_v003Slave();
}

void modI2C_task(uint32_t counter) {
	sprintf(str_output, "counter %lu", counter);
     fb2:	6585                	lui	a1,0x1
     fb4:	4601                	li	a2,0
     fb6:	59858593          	addi	a1,a1,1432 # 1598 <I2C1_ER_IRQHandler+0x10c>
     fba:	12c18513          	addi	a0,gp,300 # 20000528 <str_output>
     fbe:	3c99                	jal	a14 <sprintf>
	if (i2c_ping(0x3C) != I2C_OK) return;
     fc0:	03c00513          	li	a0,60
     fc4:	c4cff0ef          	jal	ra,410 <i2c_ping>
     fc8:	d6051fe3          	bnez	a0,d46 <main+0x168>
	ssd1306_print_str_at(str, line, 0);
     fcc:	451d                	li	a0,7
     fce:	3cd1                	jal	aa2 <ssd1306_print_str_at.constprop.0>
     fd0:	bb9d                	j	d46 <main+0x168>
        if (read == 0) {
     fd2:	e691                	bnez	a3,fde <main+0x400>
    model->debounce_time = millis();
     fd4:	4018                	lw	a4,0(s0)
    model->release_time = millis();
     fd6:	4004                	lw	s1,0(s0)
            model->press_time = now;
     fd8:	c23e                	sw	a5,4(sp)
    model->debounce_time = millis();
     fda:	87ba                	mv	a5,a4
    model->btn_state = newState;
     fdc:	4701                	li	a4,0
     fde:	c03e                	sw	a5,0(sp)
     fe0:	bdb9                	j	e3e <main+0x260>
            _reset_timers(BTN_UP, model);        // First Release

        } else {
            // Long press detection
            uint32_t press_duration = now - model->press_time;
     fe2:	4692                	lw	a3,4(sp)
     fe4:	40d78633          	sub	a2,a5,a3
            if (press_duration > TICK_LONG_PRESS_DUR) {
     fe8:	6685                	lui	a3,0x1
     fea:	fa068693          	addi	a3,a3,-96 # fa0 <main+0x3c2>
     fee:	fec6f8e3          	bgeu	a3,a2,fde <main+0x400>
			printf("Long Press\n"); break;
     ff2:	6505                	lui	a0,0x1
     ff4:	5a450513          	addi	a0,a0,1444 # 15a4 <I2C1_ER_IRQHandler+0x118>
     ff8:	c43e                	sw	a5,8(sp)
     ffa:	c03a                	sw	a4,0(sp)
     ffc:	3639                	jal	b0a <puts>
     ffe:	4702                	lw	a4,0(sp)
    1000:	47a2                	lw	a5,8(sp)
    1002:	bff1                	j	fde <main+0x400>
            }
        }
        break;

    case BTN_UP: {
        uint32_t release_duration = now - model->release_time;
    1004:	40978633          	sub	a2,a5,s1

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    1008:	ea89                	bnez	a3,101a <main+0x43c>
    100a:	09f00713          	li	a4,159
    100e:	00c76663          	bltu	a4,a2,101a <main+0x43c>
    model->debounce_time = millis();
    1012:	401c                	lw	a5,0(s0)
    model->btn_state = newState;
    1014:	4709                	li	a4,2
    model->release_time = millis();
    1016:	4004                	lw	s1,0(s0)
    1018:	b7d9                	j	fde <main+0x400>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    101a:	0a000693          	li	a3,160
    101e:	4705                	li	a4,1
    1020:	fac6ffe3          	bgeu	a3,a2,fde <main+0x400>
			printf("Single Click\n");
    1024:	6505                	lui	a0,0x1
    1026:	5b050513          	addi	a0,a0,1456 # 15b0 <I2C1_ER_IRQHandler+0x124>
			printf("Double Click\n");
    102a:	34c5                	jal	b0a <puts>
    model->debounce_time = millis();
    102c:	401c                	lw	a5,0(s0)
    model->btn_state = newState;
    102e:	470d                	li	a4,3
    model->release_time = millis();
    1030:	4004                	lw	s1,0(s0)
    1032:	b775                	j	fde <main+0x400>
        break;
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
    1034:	d6cd                	beqz	a3,fde <main+0x400>
    1036:	6785                	lui	a5,0x1
    1038:	5c078513          	addi	a0,a5,1472 # 15c0 <I2C1_ER_IRQHandler+0x134>
    103c:	b7fd                	j	102a <main+0x44c>
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    103e:	4782                	lw	a5,0(sp)
    1040:	bf79                	j	fde <main+0x400>

00001042 <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    1042:	fdc10113          	addi	sp,sp,-36
    1046:	ce22                	sw	s0,28(sp)
    1048:	d006                	sw	ra,32(sp)
    104a:	cc26                	sw	s1,24(sp)
    104c:	842a                	mv	s0,a0
	if( tween <= 0 ) return hexa;
    104e:	0ac05f63          	blez	a2,110c <TweenHexColors+0xca>
	if( tween >= 255 ) return hexb;
    1052:	0fe00793          	li	a5,254
    1056:	84ae                	mv	s1,a1
    1058:	0cc7c163          	blt	a5,a2,111a <TweenHexColors+0xd8>
	int32_t aamt = 255-tween;
    105c:	0ff00293          	li	t0,255
    1060:	40c282b3          	sub	t0,t0,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1064:	8596                	mv	a1,t0
    1066:	0ff57513          	andi	a0,a0,255
    106a:	c216                	sw	t0,4(sp)
	int32_t aamt = 255-tween;
    106c:	c032                	sw	a2,0(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    106e:	1ffff097          	auipc	ra,0x1ffff
    1072:	fd2080e7          	jalr	-46(ra) # 20000040 <FastMultiply>
    1076:	4602                	lw	a2,0(sp)
    1078:	ca2a                	sw	a0,20(sp)
    107a:	0ff4f513          	andi	a0,s1,255
    107e:	85b2                	mv	a1,a2
    1080:	1ffff097          	auipc	ra,0x1ffff
    1084:	fc0080e7          	jalr	-64(ra) # 20000040 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1088:	4292                	lw	t0,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    108a:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    108c:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1090:	8596                	mv	a1,t0
    1092:	0ff57513          	andi	a0,a0,255
    1096:	c616                	sw	t0,12(sp)
    1098:	1ffff097          	auipc	ra,0x1ffff
    109c:	fa8080e7          	jalr	-88(ra) # 20000040 <FastMultiply>
    10a0:	4602                	lw	a2,0(sp)
    10a2:	c42a                	sw	a0,8(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    10a4:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    10a8:	85b2                	mv	a1,a2
    10aa:	0ff57513          	andi	a0,a0,255
    10ae:	c232                	sw	a2,4(sp)
    10b0:	1ffff097          	auipc	ra,0x1ffff
    10b4:	f90080e7          	jalr	-112(ra) # 20000040 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    10b8:	42b2                	lw	t0,12(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    10ba:	c02a                	sw	a0,0(sp)
	int32_t hag = (hexa>>16) & 0xff;
    10bc:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    10c0:	8596                	mv	a1,t0
    10c2:	0ff57513          	andi	a0,a0,255
    10c6:	1ffff097          	auipc	ra,0x1ffff
    10ca:	f7a080e7          	jalr	-134(ra) # 20000040 <FastMultiply>
    10ce:	4612                	lw	a2,4(sp)
    10d0:	842a                	mv	s0,a0
	int32_t hbg = (hexb>>16) & 0xff;
    10d2:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    10d6:	85b2                	mv	a1,a2
    10d8:	0ff57513          	andi	a0,a0,255
    10dc:	1ffff097          	auipc	ra,0x1ffff
    10e0:	f64080e7          	jalr	-156(ra) # 20000040 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    10e4:	4342                	lw	t1,16(sp)
    10e6:	47d2                	lw	a5,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    10e8:	4682                	lw	a3,0(sp)
    10ea:	4722                	lw	a4,8(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    10ec:	979a                	add	a5,a5,t1
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    10ee:	942a                	add	s0,s0,a0
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    10f0:	9736                	add	a4,a4,a3
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    10f2:	08078793          	addi	a5,a5,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    10f6:	08070713          	addi	a4,a4,128 # 1080 <TweenHexColors+0x3e>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    10fa:	08040413          	addi	s0,s0,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    10fe:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    1100:	f0077713          	andi	a4,a4,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1104:	8021                	srli	s0,s0,0x8
	return b | (r<<8) | (g<<16);
    1106:	8fd9                	or	a5,a5,a4
    1108:	0442                	slli	s0,s0,0x10
    110a:	8c5d                	or	s0,s0,a5
}
    110c:	5082                	lw	ra,32(sp)
    110e:	8522                	mv	a0,s0
    1110:	4472                	lw	s0,28(sp)
    1112:	44e2                	lw	s1,24(sp)
    1114:	02410113          	addi	sp,sp,36
    1118:	8082                	ret
	if( tween >= 255 ) return hexb;
    111a:	842e                	mv	s0,a1
    111c:	bfc5                	j	110c <TweenHexColors+0xca>

0000111e <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    111e:	1111                	addi	sp,sp,-28
    1120:	c826                	sw	s1,16(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    1122:	c901a483          	lw	s1,-880(gp) # 2000008c <WS2812LEDs>
	int place = WS2812LEDPlace;
    1126:	c8c18713          	addi	a4,gp,-884 # 20000088 <WS2812LEDPlace>
    112a:	4318                	lw	a4,0(a4)
    112c:	c8c18613          	addi	a2,gp,-884 # 20000088 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1130:	ca22                	sw	s0,20(sp)
    1132:	cc06                	sw	ra,24(sp)
    1134:	87aa                	mv	a5,a0
    1136:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
    1138:	03050693          	addi	a3,a0,48
    113c:	c032                	sw	a2,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    113e:	04074a63          	bltz	a4,1192 <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    1142:	04f68a63          	beq	a3,a5,1196 <WS2812FillBuffSec.constprop.0+0x78>
	{
		if( place >= ledcount )
    1146:	04974f63          	blt	a4,s1,11a4 <WS2812FillBuffSec.constprop.0+0x86>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    114a:	40f68633          	sub	a2,a3,a5
    114e:	4581                	li	a1,0
    1150:	853e                	mv	a0,a5
    1152:	c23a                	sw	a4,4(sp)
    1154:	8e3ff0ef          	jal	ra,a36 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    1158:	4712                	lw	a4,4(sp)
    115a:	cc15                	beqz	s0,1196 <WS2812FillBuffSec.constprop.0+0x78>
			{
				if( place == ledcount )
    115c:	00e49a63          	bne	s1,a4,1170 <WS2812FillBuffSec.constprop.0+0x52>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    1160:	400206b7          	lui	a3,0x40020
    1164:	5a9c                	lw	a5,48(a3)
    1166:	fdf7f793          	andi	a5,a5,-33
    116a:	da9c                	sw	a5,48(a3)
					WS2812BLEDInUse = 0;
    116c:	c801a423          	sw	zero,-888(gp) # 20000084 <WS2812BLEDInUse>
				}
				place++;
    1170:	0705                	addi	a4,a4,1
    1172:	a015                	j	1196 <WS2812FillBuffSec.constprop.0+0x78>
		(*ptr++) = 0;
    1174:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
    1178:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    117c:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    1180:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    1184:	00079423          	sh	zero,8(a5)
		place++;
    1188:	0705                	addi	a4,a4,1
    118a:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
    118c:	fe079f23          	sh	zero,-2(a5)
    1190:	b77d                	j	113e <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
    1192:	fef691e3          	bne	a3,a5,1174 <WS2812FillBuffSec.constprop.0+0x56>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
    1196:	4782                	lw	a5,0(sp)
}
    1198:	40e2                	lw	ra,24(sp)
    119a:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
    119c:	c398                	sw	a4,0(a5)
}
    119e:	44c2                	lw	s1,16(sp)
    11a0:	0171                	addi	sp,sp,28
    11a2:	8082                	ret
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    11a4:	c4018613          	addi	a2,gp,-960 # 2000003c <tween>
    11a8:	4210                	lw	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    11aa:	00170293          	addi	t0,a4,1
    11ae:	9732                	add	a4,a4,a2
    11b0:	0ff00613          	li	a2,255
    11b4:	00e04363          	bgtz	a4,11ba <WS2812FillBuffSec.constprop.0+0x9c>
    11b8:	4601                	li	a2,0
    11ba:	007f45b7          	lui	a1,0x7f4
    11be:	650d                	lui	a0,0x3
    11c0:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.d894f163+0x7eb1da>
    11c4:	0ff50513          	addi	a0,a0,255 # 30ff <ch32fun.c.963ac852+0xe22>
    11c8:	c616                	sw	t0,12(sp)
    11ca:	c43e                	sw	a5,8(sp)
    11cc:	c236                	sw	a3,4(sp)
    11ce:	3d95                	jal	1042 <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    11d0:	00b55613          	srli	a2,a0,0xb
    11d4:	6705                	lui	a4,0x1
    11d6:	7ac70713          	addi	a4,a4,1964 # 17ac <bitquartets.8>
    11da:	8a79                	andi	a2,a2,30
    11dc:	963a                	add	a2,a2,a4
    11de:	47a2                	lw	a5,8(sp)
    11e0:	00065603          	lhu	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    11e4:	42b2                	lw	t0,12(sp)
    11e6:	4692                	lw	a3,4(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    11e8:	00c79023          	sh	a2,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    11ec:	00755613          	srli	a2,a0,0x7
    11f0:	8a79                	andi	a2,a2,30
    11f2:	963a                	add	a2,a2,a4
    11f4:	00065603          	lhu	a2,0(a2)
		ptr += 6;
    11f8:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    11fa:	fec79b23          	sh	a2,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    11fe:	00355613          	srli	a2,a0,0x3
    1202:	8a79                	andi	a2,a2,30
    1204:	963a                	add	a2,a2,a4
    1206:	00065603          	lhu	a2,0(a2)
    120a:	fec79c23          	sh	a2,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    120e:	00f57613          	andi	a2,a0,15
    1212:	0606                	slli	a2,a2,0x1
    1214:	963a                	add	a2,a2,a4
    1216:	00065603          	lhu	a2,0(a2)
    121a:	fec79d23          	sh	a2,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    121e:	01355613          	srli	a2,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1222:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1224:	8a79                	andi	a2,a2,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1226:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1228:	963a                	add	a2,a2,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    122a:	953a                	add	a0,a0,a4
    122c:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1230:	00065603          	lhu	a2,0(a2)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1234:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1238:	fec79e23          	sh	a2,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    123c:	8716                	mv	a4,t0
    123e:	b711                	j	1142 <WS2812FillBuffSec.constprop.0+0x24>

00001240 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    1240:	fcc10113          	addi	sp,sp,-52
    1244:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    1246:	400207b7          	lui	a5,0x40020
    124a:	439c                	lw	a5,0(a5)
{
    124c:	d022                	sw	s0,32(sp)
    124e:	ce26                	sw	s1,28(sp)
    1250:	d806                	sw	ra,48(sp)
    1252:	d616                	sw	t0,44(sp)
    1254:	d41a                	sw	t1,40(sp)
    1256:	d21e                	sw	t2,36(sp)
    1258:	cc2a                	sw	a0,24(sp)
    125a:	ca2e                	sw	a1,20(sp)
    125c:	c832                	sw	a2,16(sp)
    125e:	c636                	sw	a3,12(sp)
    1260:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    1262:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    1264:	40020437          	lui	s0,0x40020
    1268:	10000493          	li	s1,256
    126c:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    126e:	4782                	lw	a5,0(sp)
    1270:	4007f793          	andi	a5,a5,1024
    1274:	c789                	beqz	a5,127e <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    1276:	4585                	li	a1,1
    1278:	ca018513          	addi	a0,gp,-864 # 2000009c <WS2812dmabuff>
    127c:	354d                	jal	111e <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    127e:	4782                	lw	a5,0(sp)
    1280:	2007f793          	andi	a5,a5,512
    1284:	c789                	beqz	a5,128e <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    1286:	4581                	li	a1,0
    1288:	cd018513          	addi	a0,gp,-816 # 200000cc <WS2812dmabuff+0x30>
    128c:	3d49                	jal	111e <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    128e:	401c                	lw	a5,0(s0)
    1290:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    1292:	4782                	lw	a5,0(sp)
    1294:	1007f793          	andi	a5,a5,256
    1298:	fbf1                	bnez	a5,126c <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    129a:	5402                	lw	s0,32(sp)
    129c:	50c2                	lw	ra,48(sp)
    129e:	52b2                	lw	t0,44(sp)
    12a0:	5322                	lw	t1,40(sp)
    12a2:	5392                	lw	t2,36(sp)
    12a4:	44f2                	lw	s1,28(sp)
    12a6:	4562                	lw	a0,24(sp)
    12a8:	45d2                	lw	a1,20(sp)
    12aa:	4642                	lw	a2,16(sp)
    12ac:	46b2                	lw	a3,12(sp)
    12ae:	4722                	lw	a4,8(sp)
    12b0:	4792                	lw	a5,4(sp)
    12b2:	03410113          	addi	sp,sp,52
    12b6:	30200073          	mret

000012ba <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
    12ba:	1151                	addi	sp,sp,-12
    12bc:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    12be:	e000f7b7          	lui	a5,0xe000f
{
    12c2:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    12c4:	4b98                	lw	a4,16(a5)
{
    12c6:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    12c8:	66b1                	lui	a3,0xc
    12ca:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x2d1a>
    12ce:	9736                	add	a4,a4,a3
    12d0:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
    12d2:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
    12d6:	c9c18793          	addi	a5,gp,-868 # 20000098 <systick_millis>
    12da:	4398                	lw	a4,0(a5)
}
    12dc:	46a2                	lw	a3,8(sp)
	systick_millis++;
    12de:	0705                	addi	a4,a4,1
    12e0:	c398                	sw	a4,0(a5)
}
    12e2:	4712                	lw	a4,4(sp)
    12e4:	4782                	lw	a5,0(sp)
    12e6:	0131                	addi	sp,sp,12
    12e8:	30200073          	mret

000012ec <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    12ec:	7179                	addi	sp,sp,-48
    12ee:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    12f0:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    12f4:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    12f6:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    12fa:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    12fe:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    1302:	cc26                	sw	s1,24(sp)
    1304:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    1306:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    130a:	d416                	sw	t0,40(sp)
    130c:	d21a                	sw	t1,36(sp)
    130e:	d01e                	sw	t2,32(sp)
    1310:	ce22                	sw	s0,28(sp)
    1312:	ca2a                	sw	a0,20(sp)
    1314:	c82e                	sw	a1,16(sp)
    1316:	c632                	sw	a2,12(sp)
    1318:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    131a:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    131c:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    131e:	c305                	beqz	a4,133e <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    1320:	10018713          	addi	a4,gp,256 # 200004fc <i2c_slave_state>
    1324:	4685                	li	a3,1
    1326:	07c2                	slli	a5,a5,0x10
    1328:	83c1                	srli	a5,a5,0x10
    132a:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    132e:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1332:	839d                	srli	a5,a5,0x7
    1334:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1336:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    133a:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    133e:	0404f793          	andi	a5,s1,64
    1342:	c795                	beqz	a5,136e <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    1344:	10018793          	addi	a5,gp,256 # 200004fc <i2c_slave_state>
    1348:	0007c703          	lbu	a4,0(a5)
    134c:	c379                	beqz	a4,1412 <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
    134e:	40005737          	lui	a4,0x40005
    1352:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    1356:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    135a:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    135e:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    1362:	0ff77713          	andi	a4,a4,255
    1366:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    136a:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    136e:	0804f793          	andi	a5,s1,128
    1372:	c7a1                	beqz	a5,13ba <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    1374:	10018793          	addi	a5,gp,256 # 200004fc <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    1378:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    137c:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    1380:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    1384:	400057b7          	lui	a5,0x40005
    1388:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    138c:	10018413          	addi	s0,gp,256 # 200004fc <i2c_slave_state>
    1390:	cb79                	beqz	a4,1466 <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1392:	01044703          	lbu	a4,16(s0) # 40020010 <_eusrstack+0x2001f810>
    1396:	0ee57663          	bgeu	a0,a4,1482 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    139a:	4458                	lw	a4,12(s0)
    139c:	972a                	add	a4,a4,a0
    139e:	00074703          	lbu	a4,0(a4)
    13a2:	0ff77713          	andi	a4,a4,255
    13a6:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    13aa:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    13ac:	c391                	beqz	a5,13b0 <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    13ae:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    13b0:	00244783          	lbu	a5,2(s0)
    13b4:	0785                	addi	a5,a5,1
    13b6:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    13ba:	88c1                	andi	s1,s1,16
    13bc:	cc85                	beqz	s1,13f4 <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    13be:	40005737          	lui	a4,0x40005
    13c2:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    13c6:	07c2                	slli	a5,a5,0x10
    13c8:	83c1                	srli	a5,a5,0x10
    13ca:	dff7f793          	andi	a5,a5,-513
    13ce:	07c2                	slli	a5,a5,0x10
    13d0:	83c1                	srli	a5,a5,0x10
    13d2:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
    13d6:	10018793          	addi	a5,gp,256 # 200004fc <i2c_slave_state>
    13da:	02a7c703          	lbu	a4,42(a5)
    13de:	c74d                	beqz	a4,1488 <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
    13e0:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    13e2:	cb09                	beqz	a4,13f4 <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    13e4:	0017c503          	lbu	a0,1(a5)
    13e8:	0027c583          	lbu	a1,2(a5)
    13ec:	8d89                	sub	a1,a1,a0
    13ee:	0ff5f593          	andi	a1,a1,255
    13f2:	9702                	jalr	a4
            }
        }
    }
}
    13f4:	4472                	lw	s0,28(sp)
    13f6:	50b2                	lw	ra,44(sp)
    13f8:	52a2                	lw	t0,40(sp)
    13fa:	5312                	lw	t1,36(sp)
    13fc:	5382                	lw	t2,32(sp)
    13fe:	44e2                	lw	s1,24(sp)
    1400:	4552                	lw	a0,20(sp)
    1402:	45c2                	lw	a1,16(sp)
    1404:	4632                	lw	a2,12(sp)
    1406:	46a2                	lw	a3,8(sp)
    1408:	4712                	lw	a4,4(sp)
    140a:	4782                	lw	a5,0(sp)
    140c:	6145                	addi	sp,sp,48
    140e:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    1412:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    1416:	4705                	li	a4,1
    1418:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    141c:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    1420:	c695                	beqz	a3,144c <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    1422:	0107c683          	lbu	a3,16(a5)
    1426:	f4d774e3          	bgeu	a4,a3,136e <I2C1_EV_IRQHandler+0x82>
    142a:	0287c683          	lbu	a3,40(a5)
    142e:	f2a1                	bnez	a3,136e <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    1430:	400056b7          	lui	a3,0x40005
    1434:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1438:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    143a:	96ba                	add	a3,a3,a4
    143c:	0ff67613          	andi	a2,a2,255
    1440:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    1444:	0705                	addi	a4,a4,1
    1446:	00e78123          	sb	a4,2(a5)
    144a:	b715                	j	136e <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    144c:	0087c683          	lbu	a3,8(a5)
    1450:	f0d77fe3          	bgeu	a4,a3,136e <I2C1_EV_IRQHandler+0x82>
    1454:	01c7c683          	lbu	a3,28(a5)
    1458:	fa99                	bnez	a3,136e <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    145a:	400056b7          	lui	a3,0x40005
    145e:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1462:	43d4                	lw	a3,4(a5)
    1464:	bfd9                	j	143a <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    1466:	00844703          	lbu	a4,8(s0)
    146a:	00e57c63          	bgeu	a0,a4,1482 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    146e:	4058                	lw	a4,4(s0)
    1470:	972a                	add	a4,a4,a0
    1472:	00074703          	lbu	a4,0(a4)
    1476:	0ff77713          	andi	a4,a4,255
    147a:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    147e:	4c1c                	lw	a5,24(s0)
    1480:	b735                	j	13ac <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    1482:	00079823          	sh	zero,16(a5)
    1486:	bf15                	j	13ba <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    1488:	4bd8                	lw	a4,20(a5)
    148a:	bfa1                	j	13e2 <I2C1_EV_IRQHandler+0xf6>

0000148c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    148c:	1151                	addi	sp,sp,-12
    148e:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1490:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
    1494:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1496:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    149a:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    149c:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    14a0:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
    14a4:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    14a6:	cf89                	beqz	a5,14c0 <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    14a8:	41475783          	lhu	a5,1044(a4)
    14ac:	40070713          	addi	a4,a4,1024
    14b0:	07c2                	slli	a5,a5,0x10
    14b2:	83c1                	srli	a5,a5,0x10
    14b4:	eff7f793          	andi	a5,a5,-257
    14b8:	07c2                	slli	a5,a5,0x10
    14ba:	83c1                	srli	a5,a5,0x10
    14bc:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    14c0:	2006f793          	andi	a5,a3,512
    14c4:	cf89                	beqz	a5,14de <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    14c6:	40005737          	lui	a4,0x40005
    14ca:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    14ce:	07c2                	slli	a5,a5,0x10
    14d0:	83c1                	srli	a5,a5,0x10
    14d2:	dff7f793          	andi	a5,a5,-513
    14d6:	07c2                	slli	a5,a5,0x10
    14d8:	83c1                	srli	a5,a5,0x10
    14da:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    14de:	4006f693          	andi	a3,a3,1024
    14e2:	ce89                	beqz	a3,14fc <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    14e4:	40005737          	lui	a4,0x40005
    14e8:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    14ec:	07c2                	slli	a5,a5,0x10
    14ee:	83c1                	srli	a5,a5,0x10
    14f0:	bff7f793          	andi	a5,a5,-1025
    14f4:	07c2                	slli	a5,a5,0x10
    14f6:	83c1                	srli	a5,a5,0x10
    14f8:	40f71a23          	sh	a5,1044(a4)
    }
}
    14fc:	46a2                	lw	a3,8(sp)
    14fe:	4712                	lw	a4,4(sp)
    1500:	4782                	lw	a5,0(sp)
    1502:	0131                	addi	sp,sp,12
    1504:	30200073          	mret
    1508:	4d49                	li	s10,18
    150a:	5720                	lw	s0,104(a4)
    150c:	4952                	lw	s2,20(sp)
    150e:	4554                	lw	a3,12(a0)
    1510:	4e45                	li	t3,17
    1512:	5420                	lw	s0,104(s0)
    1514:	000d0a4f          	fnmadd.s	fs4,fs10,ft0,ft0,rne
    1518:	4d49                	li	s10,18
    151a:	5220                	lw	s0,96(a2)
    151c:	4145                	li	sp,17
    151e:	4544                	lw	s1,12(a0)
    1520:	204e                	fld	ft0,208(sp)
    1522:	5246                	lw	tp,112(sp)
    1524:	0a2e4d4f          	fnmadd.d	fs10,ft8,ft2,ft1,rmm
    1528:	000d                	c.nop	3
    152a:	0000                	unimp
    152c:	000a                	c.slli	zero,0x2
    152e:	0000                	unimp
    1530:	3249                	jal	eb2 <main+0x2d4>
    1532:	30203a43          	fmadd.s	fs4,ft0,ft2,ft6,rup
    1536:	2578                	fld	fa4,200(a0)
    1538:	3230                	fld	fa2,96(a2)
    153a:	0058                	addi	a4,sp,4
    153c:	6146                	flw	ft2,80(sp)
    153e:	6c69                	lui	s8,0x1a
    1540:	6465                	lui	s0,0x19
    1542:	7420                	flw	fs0,104(s0)
    1544:	6e69206f          	j	93c2a <lib_i2c.c.d894f163+0x8adc4>
    1548:	7469                	lui	s0,0xffffa
    154a:	4920                	lw	s0,80(a0)
    154c:	4332                	lw	t1,12(sp)
    154e:	0000                	unimp
    1550:	6548                	flw	fa0,12(a0)
    1552:	6c6c                	flw	fa1,92(s0)
    1554:	6542206f          	j	23ba8 <lib_i2c.c.d894f163+0x1ad42>
    1558:	2165                	jal	1a00 <_data_lma+0x218>
    155a:	0000                	unimp
    155c:	2d2d                	jal	1b96 <_data_lma+0x3ae>
    155e:	2d2d                	jal	1b98 <_data_lma+0x3b0>
    1560:	6e616353          	0x6e616353
    1564:	696e                	flw	fs2,216(sp)
    1566:	676e                	flw	fa4,216(sp)
    1568:	4920                	lw	s0,80(a0)
    156a:	4332                	lw	t1,12(sp)
    156c:	4220                	lw	s0,64(a2)
    156e:	7375                	lui	t1,0xffffd
    1570:	6620                	flw	fs0,72(a2)
    1572:	4420726f          	jal	tp,89b4 <ch32_mess.c.9e09e123+0x554f>
    1576:	7665                	lui	a2,0xffff9
    1578:	6369                	lui	t1,0x1a
    157a:	7365                	lui	t1,0xffff9
    157c:	2d2d                	jal	1bb6 <_data_lma+0x3ce>
    157e:	002d                	c.nop	11
    1580:	2d2d                	jal	1bba <_data_lma+0x3d2>
    1582:	2d2d                	jal	1bbc <_data_lma+0x3d4>
    1584:	6f44                	flw	fs1,28(a4)
    1586:	656e                	flw	fa0,216(sp)
    1588:	5320                	lw	s0,96(a4)
    158a:	6e6e6163          	bltu	t3,t1,1c6c <_data_lma+0x484>
    158e:	6e69                	lui	t3,0x1a
    1590:	2d2d2d67          	0x2d2d2d67
    1594:	0a2d                	addi	s4,s4,11
    1596:	0000                	unimp
    1598:	6e756f63          	bltu	a0,t2,1c96 <_data_lma+0x4ae>
    159c:	6574                	flw	fa3,76(a0)
    159e:	2072                	fld	ft0,280(sp)
    15a0:	6c25                	lui	s8,0x9
    15a2:	0075                	c.nop	29
    15a4:	6f4c                	flw	fa1,28(a4)
    15a6:	676e                	flw	fa4,216(sp)
    15a8:	5020                	lw	s0,96(s0)
    15aa:	6572                	flw	fa0,28(sp)
    15ac:	00007373          	csrrci	t1,ustatus,0
    15b0:	676e6953          	0x676e6953
    15b4:	656c                	flw	fa1,76(a0)
    15b6:	4320                	lw	s0,64(a4)
    15b8:	696c                	flw	fa1,84(a0)
    15ba:	00006b63          	bltu	zero,zero,15d0 <FONT_7x5>
    15be:	0000                	unimp
    15c0:	6f44                	flw	fs1,28(a4)
    15c2:	6275                	lui	tp,0x1d
    15c4:	656c                	flw	fa1,76(a0)
    15c6:	4320                	lw	s0,64(a4)
    15c8:	696c                	flw	fa1,84(a0)
    15ca:	00006b63          	bltu	zero,zero,15e0 <FONT_7x5+0x10>
	...

000015d0 <FONT_7x5>:
    15d0:	00000000 5f000000 07000000 14000700     ......._........
    15e0:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
    15f0:	00502255 00000305 41221c00 22410000     U"P......."A..A"
    1600:	2a08001c 08082a1c 08083e08 00305000     ...*.*...>...P0.
    1610:	08080800 60000808 20000060 02040810     .......``.. ....
    1620:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
    1630:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
    1640:	01304949 03050971 49494936 49490636     II0.q...6III6.II
    1650:	36001e29 00000036 00003656 22140800     )..66...V6....."
    1660:	14141441 22411414 02000814 06095101     A.....A".....Q..
    1670:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
    1680:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
    1690:	3e010109 32514141 0808087f 7f41007f     ...>AAQ2......A.
    16a0:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
    16b0:	04027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
    16c0:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
    16d0:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
    16e0:	7f1f2040 7f201820 14081463 78040363     @ .. . .c...c..x
    16f0:	51610304 00434549 41417f00 10080402     ..aQIEC...AA....
    1700:	7f414120 02040000 40040201 40404040      AA........@@@@@
    1710:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
    1720:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
    1730:	08020109 3c545414 0404087f 7d440078     .....TT<....x.D}
    1740:	40200040 00003d44 4428107f 407f4100     @. @D=....(D.A.@
    1750:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
    1760:	1414147c 14140808 087c7c18 48080404     |........||....H
    1770:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
    1780:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
    1790:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
    17a0:	36410000 08080008 00081c2a              ..A6....*...

000017ac <bitquartets.8>:
    17ac:	888e8888 88ee88e8 8e8e8e88 8eee8ee8     ................
    17bc:	e88ee888 e8eee8e8 ee8eee88 eeeeeee8     ................

000017cc <ssd1306_init_array>:
    17cc:	a880d5ae 4000d33f 0020148d 12dac8a1     ....?..@.. .....
    17dc:	f1d98f81 a6a440db 0000ffaf              .....@......

Disassembly of section .data:

20000000 <dev_aht21>:
20000000:	00061a80 00000000 00010038              ........8...

2000000c <dev_ssd1306>:
2000000c:	000186a0 00000000 0001003c              ........<...

20000018 <i2c_registers>:
20000018:	000000aa 00000000 00000000 00000000     ................
	...

20000038 <line.5>:
20000038:	00000001                                ....

2000003c <tween>:
2000003c:	ffffff42                                B...

20000040 <FastMultiply>:
{
20000040:	87aa                	mv	a5,a0
	uint32_t ret = 0;
20000042:	4501                	li	a0,0
		if( multiplicand & 1 )
20000044:	0015f713          	andi	a4,a1,1
20000048:	c311                	beqz	a4,2000004c <FastMultiply+0xc>
			ret += mutliplicant;
2000004a:	953e                	add	a0,a0,a5
		multiplicand>>=1;
2000004c:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
2000004e:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000050:	f9f5                	bnez	a1,20000044 <FastMultiply+0x4>
}
20000052:	8082                	ret

20000054 <DMA1_Channel4_IRQHandler>:

// DMA transfer completion interrupt. It will fire when the DMA transfer is
// complete. We use it just to blink the LED
__attribute__((interrupt)) __attribute__((section(".srodata")))
void DMA1_Channel4_IRQHandler(void)
{
20000054:	1151                	addi	sp,sp,-12
20000056:	c23a                	sw	a4,4(sp)
	// Clear flag
	DMA1->INTFCR |= DMA_CTCIF4;
20000058:	40020737          	lui	a4,0x40020
{
2000005c:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000005e:	435c                	lw	a5,4(a4)
{
20000060:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000062:	6689                	lui	a3,0x2
20000064:	8fd5                	or	a5,a5,a3
20000066:	c35c                	sw	a5,4(a4)

	// Blink LED
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000068:	400117b7          	lui	a5,0x40011
2000006c:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000070:	47d8                	lw	a4,12(a5)
}
20000072:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000074:	04074713          	xori	a4,a4,64
20000078:	c7d8                	sw	a4,12(a5)
}
2000007a:	4712                	lw	a4,4(sp)
2000007c:	4782                	lw	a5,0(sp)
2000007e:	0131                	addi	sp,sp,12
20000080:	30200073          	mret
