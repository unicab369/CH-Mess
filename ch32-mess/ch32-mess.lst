
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	48d0006f          	j	c8c <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0d5a                	slli	s10,s10,0x16
   a:	0000                	unimp
   c:	0d02                	c.slli64	s10
	...
  2e:	0000                	unimp
  30:	20e6                	fld	ft1,88(sp)
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d02                	c.slli64	s10
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0d02                	c.slli64	s10
  42:	0000                	unimp
  44:	0d02                	c.slli64	s10
  46:	0000                	unimp
  48:	0d02                	c.slli64	s10
  4a:	0000                	unimp
  4c:	0d02                	c.slli64	s10
  4e:	0000                	unimp
  50:	0d02                	c.slli64	s10
  52:	0000                	unimp
  54:	0d02                	c.slli64	s10
  56:	0000                	unimp
  58:	0d02                	c.slli64	s10
  5a:	0000                	unimp
  5c:	0d02                	c.slli64	s10
  5e:	0000                	unimp
  60:	206c                	fld	fa1,192(s0)
  62:	0000                	unimp
  64:	005c                	addi	a5,sp,4
  66:	2000                	fld	fs0,0(s0)
  68:	0d02                	c.slli64	s10
  6a:	0000                	unimp
  6c:	0d02                	c.slli64	s10
  6e:	0000                	unimp
  70:	0d02                	c.slli64	s10
  72:	0000                	unimp
  74:	0d02                	c.slli64	s10
  76:	0000                	unimp
  78:	2118                	fld	fa4,0(a0)
  7a:	0000                	unimp
  7c:	22b8                	fld	fa4,64(a3)
  7e:	0000                	unimp
  80:	0d02                	c.slli64	s10
  82:	0000                	unimp
  84:	0d02                	c.slli64	s10
  86:	0000                	unimp
  88:	0d02                	c.slli64	s10
  8a:	0000                	unimp
  8c:	0d02                	c.slli64	s10
  8e:	0000                	unimp
  90:	0d02                	c.slli64	s10
  92:	0000                	unimp
  94:	0d02                	c.slli64	s10
  96:	0000                	unimp
  98:	0d02                	c.slli64	s10
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
      a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
      a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
      a8:	862e                	mv	a2,a1
      aa:	85aa                	mv	a1,a0
      ac:	557d                	li	a0,-1
      ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
      b0:	4685                	li	a3,1
      b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
      b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
      ba:	0606                	slli	a2,a2,0x1
      bc:	0686                	slli	a3,a3,0x1
      be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
      c2:	4501                	li	a0,0
      c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
      c8:	8d91                	sub	a1,a1,a2
      ca:	8d55                	or	a0,a0,a3
      cc:	8285                	srli	a3,a3,0x1
      ce:	8205                	srli	a2,a2,0x1
      d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
      d2:	8082                	ret

000000d4 <__umodsi3>:
      d4:	8286                	mv	t0,ra
      d6:	3fc9                	jal	a8 <__hidden___udivsi3>
      d8:	852e                	mv	a0,a1
      da:	8282                	jr	t0
      dc:	40a00533          	neg	a0,a0
      e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
      e4:	40b005b3          	neg	a1,a1
      e8:	b7c1                	j	a8 <__hidden___udivsi3>
      ea:	40b005b3          	neg	a1,a1
      ee:	8286                	mv	t0,ra
      f0:	3f65                	jal	a8 <__hidden___udivsi3>
      f2:	40a00533          	neg	a0,a0
      f6:	8282                	jr	t0

000000f8 <__modsi3>:
      f8:	8286                	mv	t0,ra
      fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
      fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
     102:	375d                	jal	a8 <__hidden___udivsi3>
     104:	852e                	mv	a0,a1
     106:	8282                	jr	t0
     108:	40b005b3          	neg	a1,a1
     10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
     110:	40a00533          	neg	a0,a0
     114:	3f51                	jal	a8 <__hidden___udivsi3>
     116:	40b00533          	neg	a0,a1
     11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
{
     11e:	1131                	addi	sp,sp,-20
     120:	c426                	sw	s1,8(sp)
     122:	c806                	sw	ra,16(sp)
     124:	c622                	sw	s0,12(sp)
     126:	84ae                	mv	s1,a1
     128:	87aa                	mv	a5,a0
     12a:	85b2                	mv	a1,a2
	int overflow = 0;
     12c:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     12e:	cab5                	beqz	a3,1a2 <mini_pad+0x84>
	if(len > pad_to) {
     130:	0096d463          	bge	a3,s1,138 <mini_pad+0x1a>
     134:	84b6                	mv	s1,a3
		overflow = 1;
     136:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     138:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     13c:	00045363          	bgez	s0,142 <mini_pad+0x24>
     140:	4401                	li	s0,0
     142:	8622                	mv	a2,s0
     144:	853a                	mv	a0,a4
     146:	c23e                	sw	a5,4(sp)
     148:	c01a                	sw	t1,0(sp)
     14a:	66f000ef          	jal	ra,fb8 <memset>
     14e:	4302                	lw	t1,0(sp)
     150:	4792                	lw	a5,4(sp)
     152:	872a                	mv	a4,a0
     154:	008506b3          	add	a3,a0,s0
     158:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     15a:	40c485b3          	sub	a1,s1,a2
     15e:	04b04463          	bgtz	a1,1a6 <mini_pad+0x88>
     162:	0004d363          	bgez	s1,168 <mini_pad+0x4a>
     166:	4481                	li	s1,0
     168:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     16c:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     170:	02030463          	beqz	t1,198 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     174:	02c77263          	bgeu	a4,a2,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     178:	02a00793          	li	a5,42
     17c:	fef60fa3          	sb	a5,-1(a2)
     180:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     184:	00d77a63          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     188:	fef60f23          	sb	a5,-2(a2)
     18c:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     190:	00d77463          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     194:	fef60ea3          	sb	a5,-3(a2)
}
     198:	40c2                	lw	ra,16(sp)
     19a:	4432                	lw	s0,12(sp)
     19c:	44a2                	lw	s1,8(sp)
     19e:	0151                	addi	sp,sp,20
     1a0:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1a2:	86a6                	mv	a3,s1
     1a4:	bf51                	j	138 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1a6:	00c785b3          	add	a1,a5,a2
     1aa:	0005c503          	lbu	a0,0(a1)
     1ae:	00c685b3          	add	a1,a3,a2
     1b2:	0605                	addi	a2,a2,1
     1b4:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1b8:	b74d                	j	15a <mini_pad+0x3c>

000001ba <_puts>:
{
     1ba:	832a                	mv	t1,a0
     1bc:	852e                	mv	a0,a1
	if(!buf) return len;
     1be:	ce01                	beqz	a2,1d6 <_puts+0x1c>
	char * p0 = b->buffer;
     1c0:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1c4:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1c6:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1c8:	00a74863          	blt	a4,a0,1d8 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1cc:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1d0:	4248                	lw	a0,4(a2)
     1d2:	40550533          	sub	a0,a0,t0
}
     1d6:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1d8:	4614                	lw	a3,8(a2)
     1da:	fff68593          	addi	a1,a3,-1
     1de:	4214                	lw	a3,0(a2)
     1e0:	96ae                	add	a3,a3,a1
     1e2:	fed785e3          	beq	a5,a3,1cc <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1e6:	00178693          	addi	a3,a5,1
     1ea:	c254                	sw	a3,4(a2)
     1ec:	00e306b3          	add	a3,t1,a4
     1f0:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     1f4:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     1f6:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     1fa:	b7f1                	j	1c6 <_puts+0xc>

000001fc <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     1fc:	e0000737          	lui	a4,0xe0000
     200:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     204:	0f470693          	addi	a3,a4,244
     208:	0807f793          	andi	a5,a5,128
     20c:	fbf5                	bnez	a5,200 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     20e:	783027b7          	lui	a5,0x78302
     212:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     216:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     218:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     21a:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     21e:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     220:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     222:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     226:	0807f793          	andi	a5,a5,128
     22a:	ffe5                	bnez	a5,222 <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     22c:	00e557b3          	srl	a5,a0,a4
     230:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     234:	03000793          	li	a5,48
     238:	00d35463          	bge	t1,a3,240 <PrintHex+0x44>
     23c:	05700793          	li	a5,87
     240:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     242:	07a2                	slli	a5,a5,0x8
     244:	0857e793          	ori	a5,a5,133
     248:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     24c:	1771                	addi	a4,a4,-4
     24e:	fcb71ae3          	bne	a4,a1,222 <PrintHex+0x26>
}
     252:	8082                	ret

00000254 <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     254:	e000f7b7          	lui	a5,0xe000f
     258:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     25a:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     25e:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     260:	471c                	lw	a5,8(a4)
     262:	8f89                	sub	a5,a5,a0
     264:	fe07cee3          	bltz	a5,260 <DelaySysTick+0xc>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     268:	8082                	ret

0000026a <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     26a:	1101                	addi	sp,sp,-32
     26c:	ce06                	sw	ra,28(sp)
     26e:	cc22                	sw	s0,24(sp)
     270:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     272:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     274:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     276:	00055763          	bgez	a0,284 <mini_itoa.part.0+0x1a>
     27a:	e689                	bnez	a3,284 <mini_itoa.part.0+0x1a>
		negative = 1;
     27c:	4785                	li	a5,1
		value = -value;
     27e:	40a00333          	neg	t1,a0
		negative = 1;
     282:	c03e                	sw	a5,0(sp)
     284:	06100413          	li	s0,97
     288:	c219                	beqz	a2,28e <mini_itoa.part.0+0x24>
     28a:	04100413          	li	s0,65
	int	negative = 0;
     28e:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     290:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     292:	851a                	mv	a0,t1
     294:	c83a                	sw	a4,16(sp)
     296:	c21a                	sw	t1,4(sp)
     298:	c62e                	sw	a1,12(sp)
     29a:	c41a                	sw	t1,8(sp)
     29c:	3d25                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     29e:	47a5                	li	a5,9
     2a0:	4322                	lw	t1,8(sp)
     2a2:	45b2                	lw	a1,12(sp)
     2a4:	4742                	lw	a4,16(sp)
     2a6:	0ff57693          	andi	a3,a0,255
     2aa:	06a7e163          	bltu	a5,a0,30c <mini_itoa.part.0+0xa2>
     2ae:	03068693          	addi	a3,a3,48
     2b2:	0ff6f693          	andi	a3,a3,255
     2b6:	00148793          	addi	a5,s1,1
     2ba:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2be:	851a                	mv	a0,t1
     2c0:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2c2:	c63e                	sw	a5,12(sp)
		value /= radix;
     2c4:	c42e                	sw	a1,8(sp)
     2c6:	33cd                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
     2c8:	4692                	lw	a3,4(sp)
     2ca:	45a2                	lw	a1,8(sp)
     2cc:	47b2                	lw	a5,12(sp)
     2ce:	4742                	lw	a4,16(sp)
		value /= radix;
     2d0:	832a                	mv	t1,a0
	} while (value > 0);
     2d2:	02b6fb63          	bgeu	a3,a1,308 <mini_itoa.part.0+0x9e>
	if (negative)
     2d6:	4682                	lw	a3,0(sp)
     2d8:	c699                	beqz	a3,2e6 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2da:	02d00693          	li	a3,45
     2de:	00d78023          	sb	a3,0(a5) # e000f000 <_eusrstack+0xc000e800>
     2e2:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2e6:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2ea:	01f55693          	srli	a3,a0,0x1f
     2ee:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2f0:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2f4:	8685                	srai	a3,a3,0x1
     2f6:	4601                	li	a2,0
     2f8:	17fd                	addi	a5,a5,-1
     2fa:	00d64b63          	blt	a2,a3,310 <mini_itoa.part.0+0xa6>
}
     2fe:	40f2                	lw	ra,28(sp)
     300:	4462                	lw	s0,24(sp)
     302:	44d2                	lw	s1,20(sp)
     304:	6105                	addi	sp,sp,32
     306:	8082                	ret
	} while (value > 0);
     308:	84be                	mv	s1,a5
     30a:	b761                	j	292 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     30c:	96a2                	add	a3,a3,s0
     30e:	b755                	j	2b2 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     310:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     314:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     318:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     31c:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     31e:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     322:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     326:	bfc9                	j	2f8 <mini_itoa.part.0+0x8e>

00000328 <SPI_send>:
    DMA1_Channel3->CFGR &= ~DMA_CFGR1_EN;  // Turn off channel
}

static void SPI_send(uint8_t data) {
    // Send byte
    SPI1->DATAR = data;
     328:	400137b7          	lui	a5,0x40013
     32c:	00a79623          	sh	a0,12(a5) # 4001300c <_eusrstack+0x2001280c>

    // Waiting for transmission complete
    while (!(SPI1->STATR & SPI_STATR_TXE)) ;
     330:	40013737          	lui	a4,0x40013
     334:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     338:	8b89                	andi	a5,a5,2
     33a:	dfed                	beqz	a5,334 <SPI_send+0xc>
}
     33c:	8082                	ret

0000033e <write_cmd_8>:
#define ST7735_MADCTL_MY  0x80  // Bit 7 - Y-Mirror


static uint8_t DC_PIN;

void INTF_SPI_DC_LOW()  { funDigitalWrite(DC_PIN, 0); }
     33e:	c901c783          	lbu	a5,-880(gp) # 2000008c <DC_PIN>
     342:	400116b7          	lui	a3,0x40011
     346:	80068693          	addi	a3,a3,-2048 # 40010800 <_eusrstack+0x20010000>
     34a:	0047d713          	srli	a4,a5,0x4
     34e:	072a                	slli	a4,a4,0xa
     350:	8bbd                	andi	a5,a5,15
     352:	9736                	add	a4,a4,a3
     354:	07c1                	addi	a5,a5,16
     356:	4685                	li	a3,1
     358:	00f697b3          	sll	a5,a3,a5
     35c:	cb1c                	sw	a5,16(a4)
void INTF_SPI_DC_LOW();
void INTF_SPI_DC_HIGH();

static void write_cmd_8(uint8_t cmd) {
    INTF_SPI_DC_LOW();      // Command Mode
    SPI_send(cmd);
     35e:	b7e9                	j	328 <SPI_send>

00000360 <INTF_SPI_DC_HIGH>:
void INTF_SPI_DC_HIGH() { funDigitalWrite(DC_PIN, 1); }
     360:	c901c703          	lbu	a4,-880(gp) # 2000008c <DC_PIN>
     364:	400116b7          	lui	a3,0x40011
     368:	80068693          	addi	a3,a3,-2048 # 40010800 <_eusrstack+0x20010000>
     36c:	00475793          	srli	a5,a4,0x4
     370:	07aa                	slli	a5,a5,0xa
     372:	97b6                	add	a5,a5,a3
     374:	8b3d                	andi	a4,a4,15
     376:	4685                	li	a3,1
     378:	00e69733          	sll	a4,a3,a4
     37c:	cb98                	sw	a4,16(a5)
     37e:	8082                	ret

00000380 <write_data_16>:
static void write_data_8(uint8_t data) {
    INTF_SPI_DC_HIGH();     // Data Mode
    SPI_send(data);
}

static void write_data_16(uint16_t data) {
     380:	1151                	addi	sp,sp,-12
     382:	c406                	sw	ra,8(sp)
     384:	c222                	sw	s0,4(sp)
     386:	842a                	mv	s0,a0
    INTF_SPI_DC_HIGH();     // Data Mode
     388:	3fe1                	jal	360 <INTF_SPI_DC_HIGH>
    SPI_send(data >> 8);
     38a:	00845513          	srli	a0,s0,0x8
     38e:	3f69                	jal	328 <SPI_send>
    SPI_send(data);
     390:	0ff47513          	andi	a0,s0,255
}
     394:	4412                	lw	s0,4(sp)
     396:	40a2                	lw	ra,8(sp)
     398:	0131                	addi	sp,sp,12
    SPI_send(data);
     39a:	b779                	j	328 <SPI_send>

0000039c <INTF_TFT_SET_WINDOW>:

void INTF_TFT_SET_WINDOW(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     39c:	1131                	addi	sp,sp,-20
     39e:	c22a                	sw	a0,4(sp)
    INTF_TFT_START_WRITE();

    write_cmd_8(ST7735_CASET);
     3a0:	02a00513          	li	a0,42
void INTF_TFT_SET_WINDOW(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     3a4:	c806                	sw	ra,16(sp)
     3a6:	c622                	sw	s0,12(sp)
     3a8:	c426                	sw	s1,8(sp)
     3aa:	8436                	mv	s0,a3
     3ac:	84ae                	mv	s1,a1
     3ae:	c032                	sw	a2,0(sp)
    write_cmd_8(ST7735_CASET);
     3b0:	3779                	jal	33e <write_cmd_8>
    write_data_16(x0);
     3b2:	4792                	lw	a5,4(sp)
     3b4:	853e                	mv	a0,a5
     3b6:	37e9                	jal	380 <write_data_16>
    write_data_16(x1);
     3b8:	4602                	lw	a2,0(sp)
     3ba:	8532                	mv	a0,a2
     3bc:	37d1                	jal	380 <write_data_16>
    write_cmd_8(ST7735_RASET);
     3be:	02b00513          	li	a0,43
     3c2:	3fb5                	jal	33e <write_cmd_8>
    write_data_16(y0);
     3c4:	8526                	mv	a0,s1
     3c6:	3f6d                	jal	380 <write_data_16>
    write_data_16(y1);
     3c8:	8522                	mv	a0,s0
     3ca:	3f5d                	jal	380 <write_data_16>
    write_cmd_8(ST7735_RAMWR);
}
     3cc:	4432                	lw	s0,12(sp)
     3ce:	40c2                	lw	ra,16(sp)
     3d0:	44a2                	lw	s1,8(sp)
    write_cmd_8(ST7735_RAMWR);
     3d2:	02c00513          	li	a0,44
}
     3d6:	0151                	addi	sp,sp,20
    write_cmd_8(ST7735_RAMWR);
     3d8:	b79d                	j	33e <write_cmd_8>

000003da <tft_draw_pixel>:
                            }

//! draw pixel
void tft_draw_pixel(
    uint16_t x, uint16_t y, uint16_t color
) {
     3da:	1151                	addi	sp,sp,-12
    x += TFT_X_OFFSET;
     3dc:	0505                	addi	a0,a0,1
    y += TFT_Y_OFFSET;
     3de:	05e9                	addi	a1,a1,26
) {
     3e0:	c222                	sw	s0,4(sp)
    y += TFT_Y_OFFSET;
     3e2:	01059693          	slli	a3,a1,0x10
) {
     3e6:	8432                	mv	s0,a2
    x += TFT_X_OFFSET;
     3e8:	01051613          	slli	a2,a0,0x10
     3ec:	8241                	srli	a2,a2,0x10
    y += TFT_Y_OFFSET;
     3ee:	82c1                	srli	a3,a3,0x10

    INTF_TFT_SET_WINDOW(x, y, x, y);
     3f0:	8532                	mv	a0,a2
     3f2:	85b6                	mv	a1,a3
) {
     3f4:	c406                	sw	ra,8(sp)
    INTF_TFT_SET_WINDOW(x, y, x, y);
     3f6:	375d                	jal	39c <INTF_TFT_SET_WINDOW>

    INTF_TFT_END_WRITE();
}

void INTF_TFT_SEND_COLOR(uint16_t color) {
    write_data_16(color);
     3f8:	8522                	mv	a0,s0
    INTF_TFT_SEND_COLOR(color);
}
     3fa:	4412                	lw	s0,4(sp)
     3fc:	40a2                	lw	ra,8(sp)
     3fe:	0131                	addi	sp,sp,12
     400:	b741                	j	380 <write_data_16>

00000402 <INTF_TFT_SEND_BUFF>:
void INTF_TFT_SEND_BUFF(const uint8_t* buffer, uint16_t size, uint16_t repeat) {
     402:	1141                	addi	sp,sp,-16
     404:	c422                	sw	s0,8(sp)
     406:	c226                	sw	s1,4(sp)
     408:	c02a                	sw	a0,0(sp)
     40a:	84ae                	mv	s1,a1
     40c:	8432                	mv	s0,a2
     40e:	c606                	sw	ra,12(sp)
    INTF_SPI_DC_HIGH();
     410:	3f81                	jal	360 <INTF_SPI_DC_HIGH>
    DMA1_Channel3->MADDR = (uint32_t)buffer;
     412:	4502                	lw	a0,0(sp)
     414:	400207b7          	lui	a5,0x40020
        DMA1->INTFCR = DMA1_FLAG_TC3;
     418:	400206b7          	lui	a3,0x40020
    DMA1_Channel3->MADDR = (uint32_t)buffer;
     41c:	dfc8                	sw	a0,60(a5)
    DMA1_Channel3->CNTR  = size;
     41e:	dbc4                	sw	s1,52(a5)
    DMA1_Channel3->CFGR |= DMA_CFGR1_EN;  // Turn on channel
     420:	5b98                	lw	a4,48(a5)
        DMA1->INTFCR = DMA1_FLAG_TC3;
     422:	20000613          	li	a2,512
    DMA1_Channel3->CFGR |= DMA_CFGR1_EN;  // Turn on channel
     426:	00176713          	ori	a4,a4,1
     42a:	db98                	sw	a4,48(a5)
    while (repeat--) {
     42c:	67c1                	lui	a5,0x10
     42e:	17fd                	addi	a5,a5,-1
     430:	147d                	addi	s0,s0,-1
     432:	0442                	slli	s0,s0,0x10
     434:	8041                	srli	s0,s0,0x10
     436:	00f41c63          	bne	s0,a5,44e <INTF_TFT_SEND_BUFF+0x4c>
    DMA1_Channel3->CFGR &= ~DMA_CFGR1_EN;  // Turn off channel
     43a:	40020737          	lui	a4,0x40020
     43e:	5b1c                	lw	a5,48(a4)
}
     440:	40b2                	lw	ra,12(sp)
     442:	4422                	lw	s0,8(sp)
     444:	9bf9                	andi	a5,a5,-2
     446:	db1c                	sw	a5,48(a4)
     448:	4492                	lw	s1,4(sp)
     44a:	0141                	addi	sp,sp,16
     44c:	8082                	ret
        DMA1->INTFCR = DMA1_FLAG_TC3;
     44e:	c2d0                	sw	a2,4(a3)
        while (!(DMA1->INTFR & DMA1_FLAG_TC3))
     450:	4298                	lw	a4,0(a3)
     452:	20077713          	andi	a4,a4,512
     456:	df6d                	beqz	a4,450 <INTF_TFT_SEND_BUFF+0x4e>
     458:	bfe1                	j	430 <INTF_TFT_SEND_BUFF+0x2e>

0000045a <tft_print>:
void tft_print(const char* str) {
     45a:	1131                	addi	sp,sp,-20
     45c:	c622                	sw	s0,12(sp)
     45e:	c806                	sw	ra,16(sp)
     460:	c426                	sw	s1,8(sp)
     462:	842a                	mv	s0,a0
    while (*str) {
     464:	00044783          	lbu	a5,0(s0)
     468:	e791                	bnez	a5,474 <tft_print+0x1a>
}
     46a:	40c2                	lw	ra,16(sp)
     46c:	4432                	lw	s0,12(sp)
     46e:	44a2                	lw	s1,8(sp)
     470:	0151                	addi	sp,sp,20
     472:	8082                	ret
    const unsigned char* start = &font[c + (c << 2)];
     474:	00279713          	slli	a4,a5,0x2
     478:	97ba                	add	a5,a5,a4
        tft_print_char(*str++, 7, font_width, 0xFFFF, 0x0000); // 7x5 font size
     47a:	0405                	addi	s0,s0,1
    const unsigned char* start = &font[c + (c << 2)];
     47c:	c03e                	sw	a5,0(sp)
     47e:	4301                	li	t1,0
    uint16_t sz = 0;
     480:	4681                	li	a3,0
     482:	e5818513          	addi	a0,gp,-424 # 20000254 <_frame_buffer>
                _frame_buffer[sz++] = color >> 8;
     486:	53fd                	li	t2,-1
     488:	4785                	li	a5,1
     48a:	006797b3          	sll	a5,a5,t1
     48e:	c23e                	sw	a5,4(sp)
            if ((*(start + j)) & (0x01 << i)) {
     490:	8636                	mv	a2,a3
     492:	4581                	li	a1,0
     494:	4282                	lw	t0,0(sp)
     496:	6089                	lui	ra,0x2
     498:	68008093          	addi	ra,ra,1664 # 2680 <font>
     49c:	92ae                	add	t0,t0,a1
     49e:	9286                	add	t0,t0,ra
     4a0:	0002c283          	lbu	t0,0(t0)
     4a4:	4092                	lw	ra,4(sp)
     4a6:	00160793          	addi	a5,a2,1
                _frame_buffer[sz++] = color >> 8;
     4aa:	8732                	mv	a4,a2
                _frame_buffer[sz++] = color;
     4ac:	0609                	addi	a2,a2,2
     4ae:	07c2                	slli	a5,a5,0x10
     4b0:	0642                	slli	a2,a2,0x10
            if ((*(start + j)) & (0x01 << i)) {
     4b2:	0012f2b3          	and	t0,t0,ra
     4b6:	83c1                	srli	a5,a5,0x10
                _frame_buffer[sz++] = color;
     4b8:	8241                	srli	a2,a2,0x10
                _frame_buffer[sz++] = color >> 8;
     4ba:	972a                	add	a4,a4,a0
            if ((*(start + j)) & (0x01 << i)) {
     4bc:	06028163          	beqz	t0,51e <tft_print+0xc4>
                _frame_buffer[sz++] = color >> 8;
     4c0:	00770023          	sb	t2,0(a4) # 40020000 <_eusrstack+0x2001f800>
                _frame_buffer[sz++] = color;
     4c4:	97aa                	add	a5,a5,a0
     4c6:	00778023          	sb	t2,0(a5) # 10000 <lib_i2c.c.d894f163+0x6c6d>
        for (uint8_t j = 0; j < width; j++) {
     4ca:	0585                	addi	a1,a1,1
     4cc:	4795                	li	a5,5
     4ce:	fcf593e3          	bne	a1,a5,494 <tft_print+0x3a>
                _frame_buffer[sz++] = color;
     4d2:	06a9                	addi	a3,a3,10
     4d4:	06c2                	slli	a3,a3,0x10
     4d6:	82c1                	srli	a3,a3,0x10
    for (uint8_t i = 0; i < height; i++) {
     4d8:	04600793          	li	a5,70
     4dc:	0305                	addi	t1,t1,1
     4de:	faf695e3          	bne	a3,a5,488 <tft_print+0x2e>
    INTF_TFT_SET_WINDOW(_cursor_x, _cursor_y, _cursor_x + width - 1, _cursor_y + height - 1);
     4e2:	ca018713          	addi	a4,gp,-864 # 2000009c <_cursor_x>
     4e6:	00075783          	lhu	a5,0(a4)
     4ea:	ca21d583          	lhu	a1,-862(gp) # 2000009e <_cursor_y>
     4ee:	00478613          	addi	a2,a5,4
     4f2:	00658693          	addi	a3,a1,6
     4f6:	06c2                	slli	a3,a3,0x10
     4f8:	0642                	slli	a2,a2,0x10
     4fa:	853e                	mv	a0,a5
     4fc:	82c1                	srli	a3,a3,0x10
     4fe:	8241                	srli	a2,a2,0x10
     500:	c03e                	sw	a5,0(sp)
     502:	3d69                	jal	39c <INTF_TFT_SET_WINDOW>
    INTF_TFT_SEND_BUFF(_frame_buffer, sz, 1);
     504:	4605                	li	a2,1
     506:	04600593          	li	a1,70
     50a:	e5818513          	addi	a0,gp,-424 # 20000254 <_frame_buffer>
     50e:	3dd5                	jal	402 <INTF_TFT_SEND_BUFF>
        _cursor_x += font_width + 1;
     510:	4782                	lw	a5,0(sp)
     512:	ca018713          	addi	a4,gp,-864 # 2000009c <_cursor_x>
     516:	0799                	addi	a5,a5,6
     518:	00f71023          	sh	a5,0(a4)
     51c:	b7a1                	j	464 <tft_print+0xa>
                _frame_buffer[sz++] = bg_color >> 8;
     51e:	00070023          	sb	zero,0(a4)
                _frame_buffer[sz++] = bg_color;
     522:	97aa                	add	a5,a5,a0
     524:	00078023          	sb	zero,0(a5)
     528:	b74d                	j	4ca <tft_print+0x70>

0000052a <tft_fill_rect>:
    x += TFT_X_OFFSET;
     52a:	0505                	addi	a0,a0,1
    y += TFT_Y_OFFSET;
     52c:	05e9                	addi	a1,a1,26
) {
     52e:	1151                	addi	sp,sp,-12
    x += TFT_X_OFFSET;
     530:	0542                	slli	a0,a0,0x10
    y += TFT_Y_OFFSET;
     532:	05c2                	slli	a1,a1,0x10
) {
     534:	c222                	sw	s0,4(sp)
     536:	c026                	sw	s1,0(sp)
     538:	c406                	sw	ra,8(sp)
     53a:	84b6                	mv	s1,a3
     53c:	8432                	mv	s0,a2
    x += TFT_X_OFFSET;
     53e:	8141                	srli	a0,a0,0x10
    y += TFT_Y_OFFSET;
     540:	81c1                	srli	a1,a1,0x10
        _buffer[sz++] = color >> 8;
     542:	00875293          	srli	t0,a4,0x8
     546:	d1818313          	addi	t1,gp,-744 # 20000114 <_buffer>
    for (uint16_t x = 0; x < width; x++) {
     54a:	4681                	li	a3,0
        _buffer[sz++] = color >> 8;
     54c:	8636                	mv	a2,a3
    for (uint16_t x = 0; x < width; x++) {
     54e:	0685                	addi	a3,a3,1
     550:	06c2                	slli	a3,a3,0x10
        _buffer[sz++] = color >> 8;
     552:	00530023          	sb	t0,0(t1)
        _buffer[sz++] = color;
     556:	00e300a3          	sb	a4,1(t1)
    for (uint16_t x = 0; x < width; x++) {
     55a:	82c1                	srli	a3,a3,0x10
     55c:	0309                	addi	t1,t1,2
     55e:	fed417e3          	bne	s0,a3,54c <tft_fill_rect+0x22>
    INTF_TFT_SET_WINDOW(x, y, x + width - 1, y + height - 1);
     562:	fff48693          	addi	a3,s1,-1
     566:	96ae                	add	a3,a3,a1
     568:	962a                	add	a2,a2,a0
     56a:	06c2                	slli	a3,a3,0x10
     56c:	0642                	slli	a2,a2,0x10
     56e:	8241                	srli	a2,a2,0x10
     570:	82c1                	srli	a3,a3,0x10
     572:	352d                	jal	39c <INTF_TFT_SET_WINDOW>
        _buffer[sz++] = color;
     574:	00141593          	slli	a1,s0,0x1
}
     578:	4412                	lw	s0,4(sp)
     57a:	40a2                	lw	ra,8(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, height);
     57c:	8626                	mv	a2,s1
}
     57e:	4482                	lw	s1,0(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, height);
     580:	05c2                	slli	a1,a1,0x10
     582:	81c1                	srli	a1,a1,0x10
     584:	d1818513          	addi	a0,gp,-744 # 20000114 <_buffer>
}
     588:	0131                	addi	sp,sp,12
    INTF_TFT_SEND_BUFF(_buffer, sz, height);
     58a:	bda5                	j	402 <INTF_TFT_SEND_BUFF>

0000058c <_draw_fast_vLine>:

//! private
static void _draw_fast_vLine(
    int16_t x, int16_t y, int16_t h, uint16_t color
) {
     58c:	1151                	addi	sp,sp,-12
     58e:	c222                	sw	s0,4(sp)
    x += TFT_X_OFFSET;
    y += TFT_Y_OFFSET;
     590:	05e9                	addi	a1,a1,26
) {
     592:	8432                	mv	s0,a2
    x += TFT_X_OFFSET;
     594:	00150613          	addi	a2,a0,1
) {
     598:	c026                	sw	s1,0(sp)
    x += TFT_X_OFFSET;
     59a:	0642                	slli	a2,a2,0x10
    y += TFT_Y_OFFSET;
     59c:	05c2                	slli	a1,a1,0x10
) {
     59e:	c406                	sw	ra,8(sp)
    x += TFT_X_OFFSET;
     5a0:	8241                	srli	a2,a2,0x10
    y += TFT_Y_OFFSET;
     5a2:	81c1                	srli	a1,a1,0x10

    uint16_t sz = 0;
    for (int16_t j = 0; j < h; j++) {
        _buffer[sz++] = color >> 8;
     5a4:	0086d513          	srli	a0,a3,0x8
     5a8:	d1818713          	addi	a4,gp,-744 # 20000114 <_buffer>
    for (int16_t j = 0; j < h; j++) {
     5ac:	4781                	li	a5,0
     5ae:	0287c863          	blt	a5,s0,5de <_draw_fast_vLine+0x52>
        _buffer[sz++] = color;
    }

    INTF_TFT_SET_WINDOW(x, y, x, y + h - 1);
     5b2:	fff40693          	addi	a3,s0,-1
     5b6:	96ae                	add	a3,a3,a1
     5b8:	06c2                	slli	a3,a3,0x10
     5ba:	82c1                	srli	a3,a3,0x10
     5bc:	8532                	mv	a0,a2
     5be:	3bf9                	jal	39c <INTF_TFT_SET_WINDOW>
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5c0:	85a2                	mv	a1,s0
     5c2:	00045363          	bgez	s0,5c8 <_draw_fast_vLine+0x3c>
     5c6:	4581                	li	a1,0
}
     5c8:	4412                	lw	s0,4(sp)
     5ca:	40a2                	lw	ra,8(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5cc:	0586                	slli	a1,a1,0x1
     5ce:	d1818513          	addi	a0,gp,-744 # 20000114 <_buffer>
}
     5d2:	4482                	lw	s1,0(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5d4:	05c2                	slli	a1,a1,0x10
     5d6:	81c1                	srli	a1,a1,0x10
     5d8:	4605                	li	a2,1
}
     5da:	0131                	addi	sp,sp,12
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5dc:	b51d                	j	402 <INTF_TFT_SEND_BUFF>
        _buffer[sz++] = color >> 8;
     5de:	0785                	addi	a5,a5,1
     5e0:	07c2                	slli	a5,a5,0x10
     5e2:	00a70023          	sb	a0,0(a4)
        _buffer[sz++] = color;
     5e6:	00d700a3          	sb	a3,1(a4)
    for (int16_t j = 0; j < h; j++) {
     5ea:	87c1                	srai	a5,a5,0x10
     5ec:	0709                	addi	a4,a4,2
     5ee:	b7c1                	j	5ae <_draw_fast_vLine+0x22>

000005f0 <_draw_fast_hLine>:


//! private
static void _draw_fast_hLine(
    int16_t x, int16_t y, int16_t w, uint16_t color
) {
     5f0:	1151                	addi	sp,sp,-12
    x += TFT_X_OFFSET;
    y += TFT_Y_OFFSET;
     5f2:	05e9                	addi	a1,a1,26
    x += TFT_X_OFFSET;
     5f4:	0505                	addi	a0,a0,1
) {
     5f6:	c222                	sw	s0,4(sp)
     5f8:	c026                	sw	s1,0(sp)
     5fa:	8432                	mv	s0,a2
    x += TFT_X_OFFSET;
     5fc:	0542                	slli	a0,a0,0x10
) {
     5fe:	8636                	mv	a2,a3
    y += TFT_Y_OFFSET;
     600:	01059693          	slli	a3,a1,0x10
) {
     604:	c406                	sw	ra,8(sp)
    x += TFT_X_OFFSET;
     606:	8141                	srli	a0,a0,0x10
    y += TFT_Y_OFFSET;
     608:	82c1                	srli	a3,a3,0x10

    uint16_t sz = 0;
    for (int16_t j = 0; j < w; j++) {
        _buffer[sz++] = color >> 8;
     60a:	00865593          	srli	a1,a2,0x8
     60e:	d1818713          	addi	a4,gp,-744 # 20000114 <_buffer>
    for (int16_t j = 0; j < w; j++) {
     612:	4781                	li	a5,0
     614:	0287c863          	blt	a5,s0,644 <_draw_fast_hLine+0x54>
        _buffer[sz++] = color;
    }

    INTF_TFT_SET_WINDOW(x, y, x + w - 1, y);
     618:	fff40613          	addi	a2,s0,-1
     61c:	962a                	add	a2,a2,a0
     61e:	0642                	slli	a2,a2,0x10
     620:	85b6                	mv	a1,a3
     622:	8241                	srli	a2,a2,0x10
     624:	3ba5                	jal	39c <INTF_TFT_SET_WINDOW>
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     626:	85a2                	mv	a1,s0
     628:	00045363          	bgez	s0,62e <_draw_fast_hLine+0x3e>
     62c:	4581                	li	a1,0
}
     62e:	4412                	lw	s0,4(sp)
     630:	40a2                	lw	ra,8(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     632:	0586                	slli	a1,a1,0x1
     634:	d1818513          	addi	a0,gp,-744 # 20000114 <_buffer>
}
     638:	4482                	lw	s1,0(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     63a:	05c2                	slli	a1,a1,0x10
     63c:	81c1                	srli	a1,a1,0x10
     63e:	4605                	li	a2,1
}
     640:	0131                	addi	sp,sp,12
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     642:	b3c1                	j	402 <INTF_TFT_SEND_BUFF>
        _buffer[sz++] = color >> 8;
     644:	0785                	addi	a5,a5,1
     646:	07c2                	slli	a5,a5,0x10
     648:	00b70023          	sb	a1,0(a4)
        _buffer[sz++] = color;
     64c:	00c700a3          	sb	a2,1(a4)
    for (int16_t j = 0; j < w; j++) {
     650:	87c1                	srai	a5,a5,0x10
     652:	0709                	addi	a4,a4,2
     654:	b7c1                	j	614 <_draw_fast_hLine+0x24>

00000656 <tft_draw_line>:

//! draw line
void tft_draw_line(
    int16_t x0, int16_t y0,
    int16_t x1, int16_t y1, uint16_t color, uint8_t width
) {
     656:	82b2                	mv	t0,a2
     658:	832a                	mv	t1,a0
     65a:	8636                	mv	a2,a3
     65c:	86ba                	mv	a3,a4
    if (x0 == x1) {
     65e:	00551d63          	bne	a0,t0,678 <tft_draw_line+0x22>
        if (y0 > y1) _swap_int16(y0, y1);
     662:	00b65563          	bge	a2,a1,66c <tft_draw_line+0x16>
     666:	87ae                	mv	a5,a1
     668:	85b2                	mv	a1,a2
     66a:	863e                	mv	a2,a5
        _draw_fast_vLine(x0, y0, y1 - y0 + 1, color);
     66c:	0605                	addi	a2,a2,1
     66e:	8e0d                	sub	a2,a2,a1
     670:	0642                	slli	a2,a2,0x10
     672:	8641                	srai	a2,a2,0x10
     674:	851a                	mv	a0,t1
     676:	bf19                	j	58c <_draw_fast_vLine>
    }
    else if (y0 == y1) {
     678:	00c59e63          	bne	a1,a2,694 <tft_draw_line+0x3e>
        if (x0 > x1) _swap_int16(x0, x1);
     67c:	00a2d463          	bge	t0,a0,684 <tft_draw_line+0x2e>
     680:	8316                	mv	t1,t0
     682:	82aa                	mv	t0,a0
        _draw_fast_hLine(x0, y0, x1 - x0 + 1, color);
     684:	00128613          	addi	a2,t0,1
     688:	40660633          	sub	a2,a2,t1
     68c:	0642                	slli	a2,a2,0x10
     68e:	8641                	srai	a2,a2,0x10
     690:	851a                	mv	a0,t1
     692:	bfb9                	j	5f0 <_draw_fast_hLine>
) {
     694:	fc410113          	addi	sp,sp,-60
     698:	dc06                	sw	ra,56(sp)
     69a:	da22                	sw	s0,52(sp)
     69c:	d826                	sw	s1,48(sp)
     69e:	853e                	mv	a0,a5
    uint8_t steep = _diff(y1, y0) > _diff(x1, x0);
     6a0:	40c587b3          	sub	a5,a1,a2
     6a4:	00c5d463          	bge	a1,a2,6ac <tft_draw_line+0x56>
     6a8:	40b607b3          	sub	a5,a2,a1
     6ac:	06535763          	bge	t1,t0,71a <tft_draw_line+0xc4>
     6b0:	40628733          	sub	a4,t0,t1
    if (steep) {
     6b4:	06f74d63          	blt	a4,a5,72e <tft_draw_line+0xd8>
     6b8:	83ae                	mv	t2,a1
     6ba:	859a                	mv	a1,t1
     6bc:	831e                	mv	t1,t2
    int16_t dx   = x1 - x0;
     6be:	40b283b3          	sub	t2,t0,a1
     6c2:	01039413          	slli	s0,t2,0x10
     6c6:	8041                	srli	s0,s0,0x10
     6c8:	c622                	sw	s0,12(sp)
     6ca:	03c2                	slli	t2,t2,0x10
    int16_t dy   = _diff(y1, y0);
     6cc:	01031413          	slli	s0,t1,0x10
     6d0:	01061493          	slli	s1,a2,0x10
    int16_t dx   = x1 - x0;
     6d4:	4103d393          	srai	t2,t2,0x10
    int16_t dy   = _diff(y1, y0);
     6d8:	8041                	srli	s0,s0,0x10
     6da:	80c1                	srli	s1,s1,0x10
     6dc:	06c35563          	bge	t1,a2,746 <tft_draw_line+0xf0>
     6e0:	40848433          	sub	s0,s1,s0
     6e4:	0442                	slli	s0,s0,0x10
     6e6:	8441                	srai	s0,s0,0x10
     6e8:	c222                	sw	s0,4(sp)
    int16_t step = (y0 < y1) ? 1 : -1;
     6ea:	4405                	li	s0,1
     6ec:	c422                	sw	s0,8(sp)
    int16_t err  = dx >> 1;
     6ee:	4013d393          	srai	t2,t2,0x1
    int16_t step = (y0 < y1) ? 1 : -1;
     6f2:	00c34463          	blt	t1,a2,6fa <tft_draw_line+0xa4>
     6f6:	567d                	li	a2,-1
     6f8:	c432                	sw	a2,8(sp)
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     6fa:	00155613          	srli	a2,a0,0x1
     6fe:	c032                	sw	a2,0(sp)
     700:	40c00633          	neg	a2,a2
     704:	0642                	slli	a2,a2,0x10
     706:	8641                	srai	a2,a2,0x10
     708:	c832                	sw	a2,16(sp)
    for (; x0 <= x1; x0++) {
     70a:	04b2d063          	bge	t0,a1,74a <tft_draw_line+0xf4>
    }
    else {
        _draw_line_bresenham(x0, y0, x1, y1, color, width);
    }
}
     70e:	50e2                	lw	ra,56(sp)
     710:	5452                	lw	s0,52(sp)
     712:	54c2                	lw	s1,48(sp)
     714:	03c10113          	addi	sp,sp,60
     718:	8082                	ret
    uint8_t steep = _diff(y1, y0) > _diff(x1, x0);
     71a:	40530733          	sub	a4,t1,t0
    if (steep) {
     71e:	00f74863          	blt	a4,a5,72e <tft_draw_line+0xd8>
     722:	83b2                	mv	t2,a2
     724:	8616                	mv	a2,t0
     726:	829e                	mv	t0,t2
     728:	83ae                	mv	t2,a1
     72a:	859a                	mv	a1,t1
     72c:	831e                	mv	t1,t2
    if (x0 > x1) {
     72e:	00b65863          	bge	a2,a1,73e <tft_draw_line+0xe8>
     732:	83ae                	mv	t2,a1
     734:	85b2                	mv	a1,a2
     736:	861a                	mv	a2,t1
     738:	8316                	mv	t1,t0
     73a:	829e                	mv	t0,t2
     73c:	b749                	j	6be <tft_draw_line+0x68>
     73e:	8396                	mv	t2,t0
     740:	82b2                	mv	t0,a2
     742:	861e                	mv	a2,t2
     744:	bfad                	j	6be <tft_draw_line+0x68>
    int16_t dy   = _diff(y1, y0);
     746:	8c05                	sub	s0,s0,s1
     748:	bf71                	j	6e4 <tft_draw_line+0x8e>
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     74a:	44c2                	lw	s1,16(sp)
     74c:	01059413          	slli	s0,a1,0x10
     750:	8041                	srli	s0,s0,0x10
                tft_draw_pixel(y0 + w, x0, color); // Draw perpendicular pixels for width
     752:	01031613          	slli	a2,t1,0x10
     756:	04c2                	slli	s1,s1,0x10
     758:	8241                	srli	a2,a2,0x10
     75a:	80c1                	srli	s1,s1,0x10
     75c:	00960533          	add	a0,a2,s1
     760:	ca32                	sw	a2,20(sp)
     762:	0542                	slli	a0,a0,0x10
     764:	d616                	sw	t0,44(sp)
     766:	d41a                	sw	t1,40(sp)
     768:	d21e                	sw	t2,36(sp)
     76a:	d03e                	sw	a5,32(sp)
     76c:	ce3a                	sw	a4,28(sp)
     76e:	cc36                	sw	a3,24(sp)
     770:	8141                	srli	a0,a0,0x10
     772:	8636                	mv	a2,a3
            if (steep) {
     774:	04f75d63          	bge	a4,a5,7ce <tft_draw_line+0x178>
                tft_draw_pixel(y0 + w, x0, color); // Draw perpendicular pixels for width
     778:	85a2                	mv	a1,s0
     77a:	3185                	jal	3da <tft_draw_pixel>
     77c:	46e2                	lw	a3,24(sp)
     77e:	4772                	lw	a4,28(sp)
     780:	5782                	lw	a5,32(sp)
     782:	5392                	lw	t2,36(sp)
     784:	5322                	lw	t1,40(sp)
     786:	52b2                	lw	t0,44(sp)
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     788:	0485                	addi	s1,s1,1
     78a:	4602                	lw	a2,0(sp)
     78c:	04c2                	slli	s1,s1,0x10
     78e:	84c1                	srai	s1,s1,0x10
     790:	fc9651e3          	bge	a2,s1,752 <tft_draw_line+0xfc>
        err -= dy;
     794:	4612                	lw	a2,4(sp)
     796:	40c383b3          	sub	t2,t2,a2
     79a:	01039613          	slli	a2,t2,0x10
     79e:	03c2                	slli	t2,t2,0x10
     7a0:	4103d393          	srai	t2,t2,0x10
     7a4:	8241                	srli	a2,a2,0x10
        if (err < 0) {
     7a6:	0003df63          	bgez	t2,7c4 <tft_draw_line+0x16e>
            err += dx;
     7aa:	45b2                	lw	a1,12(sp)
     7ac:	00c583b3          	add	t2,a1,a2
            y0 += step;
     7b0:	4652                	lw	a2,20(sp)
     7b2:	45a2                	lw	a1,8(sp)
            err += dx;
     7b4:	03c2                	slli	t2,t2,0x10
     7b6:	4103d393          	srai	t2,t2,0x10
            y0 += step;
     7ba:	00b60333          	add	t1,a2,a1
     7be:	0342                	slli	t1,t1,0x10
     7c0:	41035313          	srai	t1,t1,0x10
    for (; x0 <= x1; x0++) {
     7c4:	0405                	addi	s0,s0,1
     7c6:	01041593          	slli	a1,s0,0x10
     7ca:	85c1                	srai	a1,a1,0x10
     7cc:	bf3d                	j	70a <tft_draw_line+0xb4>
                tft_draw_pixel(x0, y0 + w, color); // Draw perpendicular pixels for width
     7ce:	85aa                	mv	a1,a0
     7d0:	8522                	mv	a0,s0
     7d2:	3121                	jal	3da <tft_draw_pixel>
     7d4:	52b2                	lw	t0,44(sp)
     7d6:	5322                	lw	t1,40(sp)
     7d8:	5392                	lw	t2,36(sp)
     7da:	5782                	lw	a5,32(sp)
     7dc:	4772                	lw	a4,28(sp)
     7de:	46e2                	lw	a3,24(sp)
     7e0:	b765                	j	788 <tft_draw_line+0x132>

000007e2 <tft_draw_rect>:

//! draw rectangle
void tft_draw_rect(
    uint16_t x, uint16_t y,
    uint16_t width, uint16_t height, uint16_t color
) {
     7e2:	fdc10113          	addi	sp,sp,-36
     7e6:	ce22                	sw	s0,28(sp)
    _draw_fast_hLine(x, y, width, color);
     7e8:	01059413          	slli	s0,a1,0x10
) {
     7ec:	cc26                	sw	s1,24(sp)
     7ee:	87b2                	mv	a5,a2
    _draw_fast_hLine(x, y, width, color);
     7f0:	8441                	srai	s0,s0,0x10
) {
     7f2:	84aa                	mv	s1,a0
    _draw_fast_hLine(x, y, width, color);
     7f4:	0642                	slli	a2,a2,0x10
     7f6:	0542                	slli	a0,a0,0x10
) {
     7f8:	c036                	sw	a3,0(sp)
    _draw_fast_hLine(x, y, width, color);
     7fa:	8541                	srai	a0,a0,0x10
) {
     7fc:	86ba                	mv	a3,a4
    _draw_fast_hLine(x, y, width, color);
     7fe:	ca2e                	sw	a1,20(sp)
     800:	8641                	srai	a2,a2,0x10
     802:	85a2                	mv	a1,s0
) {
     804:	d006                	sw	ra,32(sp)
    _draw_fast_hLine(x, y, width, color);
     806:	c23a                	sw	a4,4(sp)
     808:	c83e                	sw	a5,16(sp)
     80a:	c632                	sw	a2,12(sp)
     80c:	c42a                	sw	a0,8(sp)
     80e:	33cd                	jal	5f0 <_draw_fast_hLine>
    _draw_fast_hLine(x, y + height - 1, width, color);
     810:	4782                	lw	a5,0(sp)
     812:	4352                	lw	t1,20(sp)
     814:	4692                	lw	a3,4(sp)
     816:	fff78593          	addi	a1,a5,-1
     81a:	4632                	lw	a2,12(sp)
     81c:	4522                	lw	a0,8(sp)
     81e:	959a                	add	a1,a1,t1
     820:	05c2                	slli	a1,a1,0x10
     822:	85c1                	srai	a1,a1,0x10
     824:	33f1                	jal	5f0 <_draw_fast_hLine>
    _draw_fast_vLine(x, y, height, color);
     826:	00011603          	lh	a2,0(sp)
     82a:	4692                	lw	a3,4(sp)
     82c:	4522                	lw	a0,8(sp)
     82e:	85a2                	mv	a1,s0
     830:	c032                	sw	a2,0(sp)
     832:	3ba9                	jal	58c <_draw_fast_vLine>
    _draw_fast_vLine(x + width - 1, y, height, color);
     834:	47c2                	lw	a5,16(sp)
     836:	85a2                	mv	a1,s0
}
     838:	4472                	lw	s0,28(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     83a:	fff78513          	addi	a0,a5,-1
     83e:	4692                	lw	a3,4(sp)
     840:	4602                	lw	a2,0(sp)
}
     842:	5082                	lw	ra,32(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     844:	9526                	add	a0,a0,s1
}
     846:	44e2                	lw	s1,24(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     848:	0542                	slli	a0,a0,0x10
     84a:	8541                	srai	a0,a0,0x10
}
     84c:	02410113          	addi	sp,sp,36
    _draw_fast_vLine(x + width - 1, y, height, color);
     850:	bb35                	j	58c <_draw_fast_vLine>

00000852 <rand8>:
 */
uint8_t rand8(void) {
    uint8_t bit;
    uint32_t new_data;

    for(bit=0;bit<NOISE_BITS;bit++) {
     852:	c3c1a503          	lw	a0,-964(gp) # 20000038 <lfsr>
uint8_t rand8(void) {
     856:	46a1                	li	a3,8
     858:	c3c18713          	addi	a4,gp,-964 # 20000038 <lfsr>
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
                                (lfsr>>NOISE_POLY_TAP1) ^
     85c:	01555613          	srli	a2,a0,0x15
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
     860:	01f55793          	srli	a5,a0,0x1f
     864:	8fb1                	xor	a5,a5,a2
     866:	8fa9                	xor	a5,a5,a0
                                (lfsr>>NOISE_POLY_TAP2) ^
     868:	00155613          	srli	a2,a0,0x1
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
     86c:	8fb1                	xor	a5,a5,a2
                                (lfsr>>NOISE_POLY_TAP3));
        lfsr = (lfsr<<1) | (new_data&1);
     86e:	8b85                	andi	a5,a5,1
     870:	0506                	slli	a0,a0,0x1
     872:	8d5d                	or	a0,a0,a5
    for(bit=0;bit<NOISE_BITS;bit++) {
     874:	fff68793          	addi	a5,a3,-1 # 4001ffff <_eusrstack+0x2001f7ff>
     878:	0ff7f693          	andi	a3,a5,255
     87c:	f2e5                	bnez	a3,85c <rand8+0xa>
     87e:	c308                	sw	a0,0(a4)
    }

    return lfsr&NOISE_MASK;
}
     880:	0ff57513          	andi	a0,a0,255
     884:	8082                	ret

00000886 <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     886:	400057b7          	lui	a5,0x40005
     88a:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     88e:	40078793          	addi	a5,a5,1024
     892:	10077713          	andi	a4,a4,256
     896:	cf09                	beqz	a4,8b0 <i2c_error+0x2a>
     898:	0147d703          	lhu	a4,20(a5)
     89c:	4505                	li	a0,1
     89e:	0742                	slli	a4,a4,0x10
     8a0:	8341                	srli	a4,a4,0x10
     8a2:	eff77713          	andi	a4,a4,-257
     8a6:	0742                	slli	a4,a4,0x10
     8a8:	8341                	srli	a4,a4,0x10
     8aa:	00e79a23          	sh	a4,20(a5)
     8ae:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     8b0:	0147d703          	lhu	a4,20(a5)
     8b4:	40077713          	andi	a4,a4,1024
     8b8:	cf09                	beqz	a4,8d2 <i2c_error+0x4c>
     8ba:	0147d703          	lhu	a4,20(a5)
     8be:	4509                	li	a0,2
     8c0:	0742                	slli	a4,a4,0x10
     8c2:	8341                	srli	a4,a4,0x10
     8c4:	bff77713          	andi	a4,a4,-1025
     8c8:	0742                	slli	a4,a4,0x10
     8ca:	8341                	srli	a4,a4,0x10
     8cc:	00e79a23          	sh	a4,20(a5)
     8d0:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     8d2:	0147d703          	lhu	a4,20(a5)
     8d6:	20077713          	andi	a4,a4,512
     8da:	cf09                	beqz	a4,8f4 <i2c_error+0x6e>
     8dc:	0147d703          	lhu	a4,20(a5)
     8e0:	450d                	li	a0,3
     8e2:	0742                	slli	a4,a4,0x10
     8e4:	8341                	srli	a4,a4,0x10
     8e6:	dff77713          	andi	a4,a4,-513
     8ea:	0742                	slli	a4,a4,0x10
     8ec:	8341                	srli	a4,a4,0x10
     8ee:	00e79a23          	sh	a4,20(a5)
     8f2:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     8f4:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     8f8:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     8fa:	832d                	srli	a4,a4,0xb
     8fc:	8b05                	andi	a4,a4,1
     8fe:	cf01                	beqz	a4,916 <i2c_error+0x90>
     900:	0147d703          	lhu	a4,20(a5)
     904:	76fd                	lui	a3,0xfffff
     906:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     90a:	0742                	slli	a4,a4,0x10
     90c:	8341                	srli	a4,a4,0x10
     90e:	8f75                	and	a4,a4,a3
     910:	00e79a23          	sh	a4,20(a5)
     914:	4511                	li	a0,4
}
     916:	8082                	ret

00000918 <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     918:	415c                	lw	a5,4(a0)
     91a:	e7b1                	bnez	a5,966 <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     91c:	00855783          	lhu	a5,8(a0)
     920:	40005737          	lui	a4,0x40005
     924:	0786                	slli	a5,a5,0x1
     926:	0fe7f793          	andi	a5,a5,254
     92a:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     92e:	6789                	lui	a5,0x2
     930:	71078793          	addi	a5,a5,1808 # 2710 <font+0x90>
	return (status & status_mask) == status_mask; 
     934:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     938:	caf1a223          	sw	a5,-860(gp) # 200000a0 <_i2c_timeout>
     93c:	4501                	li	a0,0
     93e:	ca418693          	addi	a3,gp,-860 # 200000a0 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     942:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     946:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.d894f163+0x66cef>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     94a:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     94e:	01071593          	slli	a1,a4,0x10
     952:	41835703          	lhu	a4,1048(t1)
     956:	81c1                	srli	a1,a1,0x10
     958:	0742                	slli	a4,a4,0x10
     95a:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     95c:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     95e:	00c71663          	bne	a4,a2,96a <i2c_send_addr_write+0x52>
     962:	c111                	beqz	a0,966 <i2c_send_addr_write+0x4e>
     964:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     966:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     968:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     96a:	17fd                	addi	a5,a5,-1
     96c:	4505                	li	a0,1
     96e:	fff1                	bnez	a5,94a <i2c_send_addr_write+0x32>
{
     970:	1151                	addi	sp,sp,-12
     972:	c406                	sw	ra,8(sp)
     974:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     978:	3739                	jal	886 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     97a:	e111                	bnez	a0,97e <i2c_send_addr_write+0x66>
     97c:	4515                	li	a0,5
}
     97e:	40a2                	lw	ra,8(sp)
     980:	0131                	addi	sp,sp,12
     982:	8082                	ret

00000984 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     984:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     986:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     988:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     98a:	71078793          	addi	a5,a5,1808 # 2710 <font+0x90>
     98e:	caf1a223          	sw	a5,-860(gp) # 200000a0 <_i2c_timeout>
{
     992:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     994:	c002                	sw	zero,0(sp)
     996:	c202                	sw	zero,4(sp)
     998:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     99c:	4601                	li	a2,0
     99e:	ca418713          	addi	a4,gp,-860 # 200000a0 <_i2c_timeout>
     9a2:	400055b7          	lui	a1,0x40005
     9a6:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     9aa:	8a89                	andi	a3,a3,2
     9ac:	e689                	bnez	a3,9b6 <i2c_ping+0x32>
     9ae:	c211                	beqz	a2,9b2 <i2c_ping+0x2e>
     9b0:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
     9b2:	4501                	li	a0,0
     9b4:	a809                	j	9c6 <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     9b6:	17fd                	addi	a5,a5,-1
     9b8:	4605                	li	a2,1
     9ba:	f7f5                	bnez	a5,9a6 <i2c_ping+0x22>
     9bc:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
     9c0:	35d9                	jal	886 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     9c2:	e111                	bnez	a0,9c6 <i2c_ping+0x42>
     9c4:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     9c6:	40005737          	lui	a4,0x40005
     9ca:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     9ce:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     9d2:	07c2                	slli	a5,a5,0x10
     9d4:	83c1                	srli	a5,a5,0x10
     9d6:	1007e793          	ori	a5,a5,256
     9da:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     9de:	00030737          	lui	a4,0x30
     9e2:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     9e4:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     9e8:	01079693          	slli	a3,a5,0x10
     9ec:	4185d783          	lhu	a5,1048(a1)
     9f0:	82c1                	srli	a3,a3,0x10
     9f2:	07c2                	slli	a5,a5,0x10
     9f4:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     9f6:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     9f8:	fee796e3          	bne	a5,a4,9e4 <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     9fc:	e119                	bnez	a0,a02 <i2c_ping+0x7e>
     9fe:	850a                	mv	a0,sp
     a00:	3f21                	jal	918 <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     a02:	40005737          	lui	a4,0x40005
     a06:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     a0a:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     a0c:	07c2                	slli	a5,a5,0x10
     a0e:	83c1                	srli	a5,a5,0x10
     a10:	2007e793          	ori	a5,a5,512
     a14:	40f71023          	sh	a5,1024(a4)
}
     a18:	0161                	addi	sp,sp,24
     a1a:	8082                	ret

00000a1c <i2c_write_raw.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     a1c:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     a1e:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     a20:	71078793          	addi	a5,a5,1808 # 2710 <font+0x90>
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     a24:	c626                	sw	s1,12(sp)
     a26:	c22e                	sw	a1,4(sp)
     a28:	ca06                	sw	ra,20(sp)
     a2a:	c822                	sw	s0,16(sp)
     a2c:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     a2e:	caf1a223          	sw	a5,-860(gp) # 200000a0 <_i2c_timeout>
     a32:	4601                	li	a2,0
     a34:	ca418493          	addi	s1,gp,-860 # 200000a0 <_i2c_timeout>
     a38:	400055b7          	lui	a1,0x40005
     a3c:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     a40:	8a89                	andi	a3,a3,2
     a42:	e6bd                	bnez	a3,ab0 <i2c_write_raw.constprop.0+0x94>
     a44:	c211                	beqz	a2,a48 <i2c_write_raw.constprop.0+0x2c>
     a46:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     a48:	400056b7          	lui	a3,0x40005
     a4c:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     a50:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     a54:	07c2                	slli	a5,a5,0x10
     a56:	83c1                	srli	a5,a5,0x10
     a58:	1007e793          	ori	a5,a5,256
     a5c:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     a60:	000306b7          	lui	a3,0x30
     a64:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     a66:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     a6a:	01079613          	slli	a2,a5,0x10
     a6e:	4185d783          	lhu	a5,1048(a1)
     a72:	8241                	srli	a2,a2,0x10
     a74:	07c2                	slli	a5,a5,0x10
     a76:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     a78:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     a7a:	fed796e3          	bne	a5,a3,a66 <i2c_write_raw.constprop.0+0x4a>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     a7e:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
     a82:	3d59                	jal	918 <i2c_send_addr_write>
     a84:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     a86:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
     a88:	e91d                	bnez	a0,abe <i2c_write_raw.constprop.0+0xa2>
		while(cbyte < len)
     a8a:	4792                	lw	a5,4(sp)
     a8c:	02f67963          	bgeu	a2,a5,abe <i2c_write_raw.constprop.0+0xa2>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     a90:	6689                	lui	a3,0x2
     a92:	71068693          	addi	a3,a3,1808 # 2710 <font+0x90>
     a96:	c094                	sw	a3,0(s1)
     a98:	4501                	li	a0,0
     a9a:	40005337          	lui	t1,0x40005
     a9e:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     aa2:	0805f593          	andi	a1,a1,128
     aa6:	c5b9                	beqz	a1,af4 <i2c_write_raw.constprop.0+0xd8>
     aa8:	c111                	beqz	a0,aac <i2c_write_raw.constprop.0+0x90>
     aaa:	c094                	sw	a3,0(s1)
     aac:	4501                	li	a0,0
     aae:	a8a9                	j	b08 <i2c_write_raw.constprop.0+0xec>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     ab0:	17fd                	addi	a5,a5,-1
     ab2:	4605                	li	a2,1
     ab4:	f7c1                	bnez	a5,a3c <i2c_write_raw.constprop.0+0x20>
	i2c_err_t i2c_err = i2c_error();
     ab6:	3bc1                	jal	886 <i2c_error>
     ab8:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     aba:	e111                	bnez	a0,abe <i2c_write_raw.constprop.0+0xa2>
     abc:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     abe:	6689                	lui	a3,0x2
     ac0:	71068693          	addi	a3,a3,1808 # 2710 <font+0x90>
	return (status & status_mask) == status_mask; 
     ac4:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     ac8:	c094                	sw	a3,0(s1)
     aca:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     acc:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     ad0:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.d894f163+0x66cf1>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     ad4:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     ad8:	01061513          	slli	a0,a2,0x10
     adc:	4182d603          	lhu	a2,1048(t0)
     ae0:	8141                	srli	a0,a0,0x10
     ae2:	0642                	slli	a2,a2,0x10
     ae4:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     ae6:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     ae8:	04b61363          	bne	a2,a1,b2e <i2c_write_raw.constprop.0+0x112>
     aec:	04030a63          	beqz	t1,b40 <i2c_write_raw.constprop.0+0x124>
     af0:	c094                	sw	a3,0(s1)
     af2:	a0b9                	j	b40 <i2c_write_raw.constprop.0+0x124>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     af4:	16fd                	addi	a3,a3,-1
     af6:	4505                	li	a0,1
     af8:	f2dd                	bnez	a3,a9e <i2c_write_raw.constprop.0+0x82>
     afa:	c432                	sw	a2,8(sp)
     afc:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     b00:	3359                	jal	886 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     b02:	4622                	lw	a2,8(sp)
     b04:	e111                	bnez	a0,b08 <i2c_write_raw.constprop.0+0xec>
     b06:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     b08:	4782                	lw	a5,0(sp)
     b0a:	00c786b3          	add	a3,a5,a2
     b0e:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     b12:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     b14:	400056b7          	lui	a3,0x40005
     b18:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     b1c:	0ff67613          	andi	a2,a2,255
     b20:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     b22:	e501                	bnez	a0,b2a <i2c_write_raw.constprop.0+0x10e>
     b24:	338d                	jal	886 <i2c_error>
     b26:	4622                	lw	a2,8(sp)
     b28:	d12d                	beqz	a0,a8a <i2c_write_raw.constprop.0+0x6e>
     b2a:	842a                	mv	s0,a0
     b2c:	bf49                	j	abe <i2c_write_raw.constprop.0+0xa2>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     b2e:	16fd                	addi	a3,a3,-1
     b30:	4305                	li	t1,1
     b32:	f2cd                	bnez	a3,ad4 <i2c_write_raw.constprop.0+0xb8>
     b34:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     b38:	33b9                	jal	886 <i2c_error>
     b3a:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     b3c:	e111                	bnez	a0,b40 <i2c_write_raw.constprop.0+0x124>
     b3e:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     b40:	400056b7          	lui	a3,0x40005
     b44:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     b48:	40d2                	lw	ra,20(sp)
     b4a:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     b4c:	0742                	slli	a4,a4,0x10
}
     b4e:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     b50:	8341                	srli	a4,a4,0x10
     b52:	20076713          	ori	a4,a4,512
     b56:	40e69023          	sh	a4,1024(a3)
}
     b5a:	44b2                	lw	s1,12(sp)
     b5c:	0161                	addi	sp,sp,24
     b5e:	8082                	ret

00000b60 <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     b60:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     b62:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     b66:	4589                	li	a1,2
     b68:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     b6a:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     b6c:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     b70:	3575                	jal	a1c <i2c_write_raw.constprop.0>
}
     b72:	40b2                	lw	ra,12(sp)
     b74:	0ff57513          	andi	a0,a0,255
     b78:	0141                	addi	sp,sp,16
     b7a:	8082                	ret

00000b7c <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     b7c:	e00007b7          	lui	a5,0xe0000
     b80:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
}
     b84:	8082                	ret

00000b86 <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     b86:	e0000737          	lui	a4,0xe0000
     b8a:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     b8e:	1111                	addi	sp,sp,-28
     b90:	cc06                	sw	ra,24(sp)
     b92:	ca22                	sw	s0,20(sp)
     b94:	c826                	sw	s1,16(sp)
     b96:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     b98:	0c07f793          	andi	a5,a5,192
     b9c:	0c000693          	li	a3,192
     ba0:	0cd78863          	beq	a5,a3,c70 <_write.constprop.0+0xea>
	char buffer[4] = { 0 };
     ba4:	c602                	sw	zero,12(sp)
     ba6:	842e                	mv	s0,a1
	if( size == 0 )
     ba8:	e5f1                	bnez	a1,c74 <_write.constprop.0+0xee>
		lastdmd = (*DMDATA0);
     baa:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     bae:	c789                	beqz	a5,bb8 <_write.constprop.0+0x32>
     bb0:	0807f793          	andi	a5,a5,128
     bb4:	e391                	bnez	a5,bb8 <_write.constprop.0+0x32>
     bb6:	37d9                	jal	b7c <internal_handle_input.constprop.0>
}
     bb8:	40e2                	lw	ra,24(sp)
     bba:	8522                	mv	a0,s0
     bbc:	4452                	lw	s0,20(sp)
     bbe:	44c2                	lw	s1,16(sp)
     bc0:	0171                	addi	sp,sp,28
     bc2:	8082                	ret
		int tosend = size - place;
     bc4:	409405b3          	sub	a1,s0,s1
     bc8:	469d                	li	a3,7
     bca:	872e                	mv	a4,a1
     bcc:	00b6d363          	bge	a3,a1,bd2 <_write.constprop.0+0x4c>
     bd0:	471d                	li	a4,7
     bd2:	001006b7          	lui	a3,0x100
     bd6:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     bd8:	e0000537          	lui	a0,0xe0000
     bdc:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     be0:	0f450313          	addi	t1,a0,244
     be4:	08067293          	andi	t0,a2,128
     be8:	06029c63          	bnez	t0,c60 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     bec:	c611                	beqz	a2,bf8 <_write.constprop.0+0x72>
     bee:	c43a                	sw	a4,8(sp)
     bf0:	c22e                	sw	a1,4(sp)
     bf2:	3769                	jal	b7c <internal_handle_input.constprop.0>
     bf4:	4722                	lw	a4,8(sp)
     bf6:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     bf8:	4689                	li	a3,2
     bfa:	4601                	li	a2,0
     bfc:	00b6d463          	bge	a3,a1,c04 <_write.constprop.0+0x7e>
     c00:	ffd70613          	addi	a2,a4,-3
     c04:	4782                	lw	a5,0(sp)
     c06:	00348593          	addi	a1,s1,3
     c0a:	0068                	addi	a0,sp,12
     c0c:	95be                	add	a1,a1,a5
     c0e:	c23a                	sw	a4,4(sp)
     c10:	26f9                	jal	fde <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     c12:	4632                	lw	a2,12(sp)
     c14:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     c16:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     c18:	e00006b7          	lui	a3,0xe0000
     c1c:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     c20:	458d                	li	a1,3
     c22:	00978633          	add	a2,a5,s1
		t = 0;
     c26:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     c28:	00064303          	lbu	t1,0(a2)
     c2c:	0685                	addi	a3,a3,1
     c2e:	007c                	addi	a5,sp,12
     c30:	00d78533          	add	a0,a5,a3
     c34:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     c38:	00d70563          	beq	a4,a3,c42 <_write.constprop.0+0xbc>
     c3c:	0605                	addi	a2,a2,1
     c3e:	feb695e3          	bne	a3,a1,c28 <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     c42:	00470693          	addi	a3,a4,4
     c46:	f806e693          	ori	a3,a3,-128
     c4a:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     c4e:	4632                	lw	a2,12(sp)
     c50:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     c54:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     c56:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     c5a:	f684c5e3          	blt	s1,s0,bc4 <_write.constprop.0+0x3e>
     c5e:	bfa9                	j	bb8 <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     c60:	16fd                	addi	a3,a3,-1
     c62:	fead                	bnez	a3,bdc <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     c64:	00032783          	lw	a5,0(t1)
     c68:	0c07e793          	ori	a5,a5,192
     c6c:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c70:	4401                	li	s0,0
     c72:	b799                	j	bb8 <_write.constprop.0+0x32>
	if( size == 0 )
     c74:	4481                	li	s1,0
     c76:	b7d5                	j	c5a <_write.constprop.0+0xd4>

00000c78 <__puts_uart>:
{
     c78:	1151                	addi	sp,sp,-12
     c7a:	c222                	sw	s0,4(sp)
     c7c:	c406                	sw	ra,8(sp)
     c7e:	842e                	mv	s0,a1
	_write( 0, s, len );
     c80:	3719                	jal	b86 <_write.constprop.0>
}
     c82:	40a2                	lw	ra,8(sp)
     c84:	8522                	mv	a0,s0
     c86:	4412                	lw	s0,4(sp)
     c88:	0131                	addi	sp,sp,12
     c8a:	8082                	ret

00000c8c <handle_reset>:
	asm volatile( "\n\
     c8c:	1ffff197          	auipc	gp,0x1ffff
     c90:	77018193          	addi	gp,gp,1904 # 200003fc <__global_pointer$>
     c94:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     c98:	6509                	lui	a0,0x2
     c9a:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x6f6>
     c9e:	30051073          	csrw	mstatus,a0
     ca2:	468d                	li	a3,3
     ca4:	fffff517          	auipc	a0,0xfffff
     ca8:	35c50513          	addi	a0,a0,860 # 0 <InterruptVector>
     cac:	8d55                	or	a0,a0,a3
     cae:	30551073          	csrw	mtvec,a0
asm volatile(
     cb2:	c9018513          	addi	a0,gp,-880 # 2000008c <DC_PIN>
     cb6:	3e418593          	addi	a1,gp,996 # 200007e0 <_ebss>
     cba:	4601                	li	a2,0
     cbc:	00b55663          	bge	a0,a1,cc8 <handle_reset+0x3c>
     cc0:	c110                	sw	a2,0(a0)
     cc2:	0511                	addi	a0,a0,4
     cc4:	feb54ee3          	blt	a0,a1,cc0 <handle_reset+0x34>
     cc8:	00002517          	auipc	a0,0x2
     ccc:	ed450513          	addi	a0,a0,-300 # 2b9c <_data_lma>
     cd0:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_aht21>
     cd4:	1ffff617          	auipc	a2,0x1ffff
     cd8:	3b860613          	addi	a2,a2,952 # 2000008c <DC_PIN>
     cdc:	00c58863          	beq	a1,a2,cec <handle_reset+0x60>
     ce0:	4114                	lw	a3,0(a0)
     ce2:	c194                	sw	a3,0(a1)
     ce4:	0511                	addi	a0,a0,4
     ce6:	0591                	addi	a1,a1,4
     ce8:	fec59ae3          	bne	a1,a2,cdc <handle_reset+0x50>
	SysTick->CTLR = 5;
     cec:	e000f7b7          	lui	a5,0xe000f
     cf0:	4715                	li	a4,5
     cf2:	c398                	sw	a4,0(a5)
asm volatile(
     cf4:	6785                	lui	a5,0x1
     cf6:	18a78793          	addi	a5,a5,394 # 118a <main>
     cfa:	34179073          	csrw	mepc,a5
     cfe:	30200073          	mret

00000d02 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     d02:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     d06:	cf6ff0ef          	jal	ra,1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     d0a:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     d0e:	ceeff0ef          	jal	ra,1fc <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     d12:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     d16:	ce6ff0ef          	jal	ra,1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     d1a:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     d1e:	cdeff0ef          	jal	ra,1fc <PrintHex>
	while( (*DMDATA0) & 0x80 );
     d22:	e0000737          	lui	a4,0xe0000
     d26:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     d2a:	0f470693          	addi	a3,a4,244
     d2e:	0807f793          	andi	a5,a5,128
     d32:	fbf5                	bnez	a5,d26 <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     d34:	6785                	lui	a5,0x1
     d36:	a8578793          	addi	a5,a5,-1403 # a85 <i2c_write_raw.constprop.0+0x69>
     d3a:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     d3c:	e0000737          	lui	a4,0xe0000
     d40:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     d44:	0f470693          	addi	a3,a4,244
     d48:	0807f793          	andi	a5,a5,128
     d4c:	fbf5                	bnez	a5,d40 <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     d4e:	aaaab7b7          	lui	a5,0xaaaab
     d52:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     d56:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     d58:	a001                	j	d58 <ADC1_2_IRQHandler+0x56>

00000d5a <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     d5a:	40021737          	lui	a4,0x40021
     d5e:	471c                	lw	a5,8(a4)
     d60:	008006b7          	lui	a3,0x800
     d64:	8fd5                	or	a5,a5,a3
     d66:	c71c                	sw	a5,8(a4)

00000d68 <strlen>:
{
     d68:	87aa                	mv	a5,a0
	for (; *s; s++);
     d6a:	0007c703          	lbu	a4,0(a5)
     d6e:	e701                	bnez	a4,d76 <strlen+0xe>
}
     d70:	40a78533          	sub	a0,a5,a0
     d74:	8082                	ret
	for (; *s; s++);
     d76:	0785                	addi	a5,a5,1
     d78:	bfcd                	j	d6a <strlen+0x2>

00000d7a <mini_vpprintf>:
{
     d7a:	fa410113          	addi	sp,sp,-92
     d7e:	c8a6                	sw	s1,80(sp)
     d80:	cc86                	sw	ra,88(sp)
     d82:	caa2                	sw	s0,84(sp)
     d84:	c02a                	sw	a0,0(sp)
     d86:	c22e                	sw	a1,4(sp)
     d88:	84b2                	mv	s1,a2
     d8a:	87b6                	mv	a5,a3
	int n = 0;
     d8c:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     d8e:	0004c703          	lbu	a4,0(s1)
     d92:	00148413          	addi	s0,s1,1
     d96:	00e10fa3          	sb	a4,31(sp)
     d9a:	eb01                	bnez	a4,daa <mini_vpprintf+0x30>
}
     d9c:	40e6                	lw	ra,88(sp)
     d9e:	4456                	lw	s0,84(sp)
     da0:	4542                	lw	a0,16(sp)
     da2:	44c6                	lw	s1,80(sp)
     da4:	05c10113          	addi	sp,sp,92
     da8:	8082                	ret
		if (ch!='%') {
     daa:	02500693          	li	a3,37
     dae:	00d70f63          	beq	a4,a3,dcc <mini_vpprintf+0x52>
     db2:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     db4:	4612                	lw	a2,4(sp)
     db6:	4782                	lw	a5,0(sp)
     db8:	4585                	li	a1,1
     dba:	01f10513          	addi	a0,sp,31
     dbe:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     dc0:	84a2                	mv	s1,s0
		n = n + len;
     dc2:	47c2                	lw	a5,16(sp)
     dc4:	97aa                	add	a5,a5,a0
     dc6:	c83e                	sw	a5,16(sp)
     dc8:	47a2                	lw	a5,8(sp)
     dca:	b7d1                	j	d8e <mini_vpprintf+0x14>
			ch=*(fmt++);
     dcc:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     dd0:	03000613          	li	a2,48
			ch=*(fmt++);
     dd4:	00248713          	addi	a4,s1,2
     dd8:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     ddc:	03000413          	li	s0,48
     de0:	08c69063          	bne	a3,a2,e60 <mini_vpprintf+0xe6>
				ch=*(fmt++);
     de4:	84ba                	mv	s1,a4
     de6:	4601                	li	a2,0
     de8:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     dea:	4525                	li	a0,9
     dec:	a811                	j	e00 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     dee:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     df2:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     df4:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     df6:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     dfa:	0706                	slli	a4,a4,0x1
     dfc:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     dfe:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     e00:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f6c3d>
     e04:	0ff5f313          	andi	t1,a1,255
     e08:	fe6573e3          	bgeu	a0,t1,dee <mini_vpprintf+0x74>
     e0c:	c219                	beqz	a2,e12 <mini_vpprintf+0x98>
     e0e:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     e12:	c63a                	sw	a4,12(sp)
     e14:	4661                	li	a2,24
     e16:	00e65363          	bge	a2,a4,e1c <mini_vpprintf+0xa2>
     e1a:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     e1c:	06c00593          	li	a1,108
			char l = 0;
     e20:	4601                	li	a2,0
			if (ch == 'l') {
     e22:	00b69863          	bne	a3,a1,e32 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     e26:	0004c683          	lbu	a3,0(s1)
				l = 1;
     e2a:	4605                	li	a2,1
				ch=*(fmt++);
     e2c:	0485                	addi	s1,s1,1
     e2e:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     e32:	01f14683          	lbu	a3,31(sp)
     e36:	06400593          	li	a1,100
     e3a:	06b68363          	beq	a3,a1,ea0 <mini_vpprintf+0x126>
     e3e:	02d5e463          	bltu	a1,a3,e66 <mini_vpprintf+0xec>
     e42:	05800713          	li	a4,88
     e46:	0ae68263          	beq	a3,a4,eea <mini_vpprintf+0x170>
     e4a:	06300713          	li	a4,99
     e4e:	0ce68063          	beq	a3,a4,f0e <mini_vpprintf+0x194>
     e52:	d6a9                	beqz	a3,d9c <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     e54:	4612                	lw	a2,4(sp)
     e56:	c43e                	sw	a5,8(sp)
     e58:	4585                	li	a1,1
     e5a:	01f10513          	addi	a0,sp,31
     e5e:	a88d                	j	ed0 <mini_vpprintf+0x156>
			char pad_char = ' ';
     e60:	02000413          	li	s0,32
     e64:	b741                	j	de4 <mini_vpprintf+0x6a>
			switch (ch) {
     e66:	07500593          	li	a1,117
     e6a:	02b68b63          	beq	a3,a1,ea0 <mini_vpprintf+0x126>
     e6e:	07800613          	li	a2,120
     e72:	06c68c63          	beq	a3,a2,eea <mini_vpprintf+0x170>
     e76:	07300613          	li	a2,115
     e7a:	fcc69de3          	bne	a3,a2,e54 <mini_vpprintf+0xda>
     e7e:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     e80:	00478713          	addi	a4,a5,4
     e84:	439c                	lw	a5,0(a5)
     e86:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     e88:	853e                	mv	a0,a5
     e8a:	ca3e                	sw	a5,20(sp)
     e8c:	3df1                	jal	d68 <strlen>
					if (pad_to > 0) {
     e8e:	4762                	lw	a4,24(sp)
     e90:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     e92:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     e94:	cb51                	beqz	a4,f28 <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     e96:	46b2                	lw	a3,12(sp)
     e98:	1838                	addi	a4,sp,56
     e9a:	8622                	mv	a2,s0
     e9c:	853e                	mv	a0,a5
     e9e:	a025                	j	ec6 <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     ea0:	00478713          	addi	a4,a5,4
     ea4:	c43a                	sw	a4,8(sp)
					if(l) {
     ea6:	ca05                	beqz	a2,ed6 <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     ea8:	f8b68693          	addi	a3,a3,-117
     eac:	1018                	addi	a4,sp,32
     eae:	0016b693          	seqz	a3,a3
     eb2:	4388                	lw	a0,0(a5)
     eb4:	4601                	li	a2,0
     eb6:	45a9                	li	a1,10
     eb8:	bb2ff0ef          	jal	ra,26a <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ebc:	46b2                	lw	a3,12(sp)
     ebe:	1838                	addi	a4,sp,56
     ec0:	8622                	mv	a2,s0
     ec2:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ec4:	1008                	addi	a0,sp,32
     ec6:	a58ff0ef          	jal	ra,11e <mini_pad>
					len = puts(bf, len, buf);
     eca:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ecc:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     ece:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     ed0:	4782                	lw	a5,0(sp)
     ed2:	9782                	jalr	a5
					break;
     ed4:	b5fd                	j	dc2 <mini_vpprintf+0x48>
						if(ch == 'u') {
     ed6:	07500713          	li	a4,117
     eda:	00e69563          	bne	a3,a4,ee4 <mini_vpprintf+0x16a>
	if (radix > 16)
     ede:	1018                	addi	a4,sp,32
     ee0:	4685                	li	a3,1
     ee2:	bfc1                	j	eb2 <mini_vpprintf+0x138>
     ee4:	1018                	addi	a4,sp,32
     ee6:	4681                	li	a3,0
     ee8:	b7e9                	j	eb2 <mini_vpprintf+0x138>
					if(l) {
     eea:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     eec:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     ef0:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     ef4:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     ef6:	4685                	li	a3,1
     ef8:	1018                	addi	a4,sp,32
     efa:	00163613          	seqz	a2,a2
     efe:	45c1                	li	a1,16
     f00:	b6aff0ef          	jal	ra,26a <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     f04:	46b2                	lw	a3,12(sp)
     f06:	85aa                	mv	a1,a0
     f08:	1838                	addi	a4,sp,56
     f0a:	8622                	mv	a2,s0
     f0c:	bf65                	j	ec4 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     f0e:	00478713          	addi	a4,a5,4
     f12:	439c                	lw	a5,0(a5)
     f14:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     f16:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     f18:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     f1c:	1838                	addi	a4,sp,56
     f1e:	8622                	mv	a2,s0
     f20:	4585                	li	a1,1
     f22:	01f10513          	addi	a0,sp,31
     f26:	b745                	j	ec6 <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     f28:	4612                	lw	a2,4(sp)
     f2a:	853e                	mv	a0,a5
     f2c:	b755                	j	ed0 <mini_vpprintf+0x156>

00000f2e <printf>:
{
     f2e:	fdc10113          	addi	sp,sp,-36
     f32:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f34:	862a                	mv	a2,a0
     f36:	6505                	lui	a0,0x1
{
     f38:	c82e                	sw	a1,16(sp)
     f3a:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f3c:	4581                	li	a1,0
	va_start( args, format );
     f3e:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f40:	c7850513          	addi	a0,a0,-904 # c78 <__puts_uart>
{
     f44:	c606                	sw	ra,12(sp)
     f46:	ce3a                	sw	a4,28(sp)
     f48:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     f4a:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     f4c:	353d                	jal	d7a <mini_vpprintf>
}
     f4e:	40b2                	lw	ra,12(sp)
     f50:	02410113          	addi	sp,sp,36
     f54:	8082                	ret

00000f56 <onI2C_SlaveWrite>:
#include "../Mess-libs/modules/systick_irq.h"
#include "../Mess-libs/modules/fun_button.h"
#include "../Mess-libs/i2c/i2c_slave.h"

void onI2C_SlaveWrite(uint8_t reg, uint8_t length) {
	printf("IM WRITEEN TO\n\r");
     f56:	6509                	lui	a0,0x2
     f58:	33450513          	addi	a0,a0,820 # 2334 <I2C1_ER_IRQHandler+0x7c>
     f5c:	bfc9                	j	f2e <printf>

00000f5e <onI2C_SlaveRead>:
}

void onI2C_SlaveRead(uint8_t reg) {
	printf("IM READEN FROM.\n\r");
     f5e:	6509                	lui	a0,0x2
     f60:	34450513          	addi	a0,a0,836 # 2344 <I2C1_ER_IRQHandler+0x8c>
     f64:	b7e9                	j	f2e <printf>

00000f66 <mini_vsnprintf>:
{
     f66:	1121                	addi	sp,sp,-24
     f68:	ca06                	sw	ra,20(sp)
     f6a:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
     f6c:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
     f6e:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
     f70:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
     f72:	c185                	beqz	a1,f92 <mini_vsnprintf+0x2c>
     f74:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
     f76:	858a                	mv	a1,sp
     f78:	e111                	bnez	a0,f7c <mini_vsnprintf+0x16>
     f7a:	4581                	li	a1,0
     f7c:	1ba00513          	li	a0,442
     f80:	3bed                	jal	d7a <mini_vpprintf>
	if(buffer == (void*) 0) {
     f82:	c401                	beqz	s0,f8a <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
     f84:	4512                	lw	a0,4(sp)
     f86:	4782                	lw	a5,0(sp)
     f88:	8d1d                	sub	a0,a0,a5
}
     f8a:	40d2                	lw	ra,20(sp)
     f8c:	4442                	lw	s0,16(sp)
     f8e:	0161                	addi	sp,sp,24
     f90:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
     f92:	4401                	li	s0,0
     f94:	b7dd                	j	f7a <mini_vsnprintf+0x14>

00000f96 <sprintf>:
{
     f96:	1101                	addi	sp,sp,-32
     f98:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     f9a:	862e                	mv	a2,a1
     f9c:	800005b7          	lui	a1,0x80000
{
     fa0:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fa2:	fff5c593          	not	a1,a1
	va_start( args, format );
     fa6:	0814                	addi	a3,sp,16
{
     fa8:	c606                	sw	ra,12(sp)
     faa:	cc3a                	sw	a4,24(sp)
     fac:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
     fae:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fb0:	3f5d                	jal	f66 <mini_vsnprintf>
}
     fb2:	40b2                	lw	ra,12(sp)
     fb4:	6105                	addi	sp,sp,32
     fb6:	8082                	ret

00000fb8 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     fb8:	962a                	add	a2,a2,a0
     fba:	87aa                	mv	a5,a0
     fbc:	00c79363          	bne	a5,a2,fc2 <memset+0xa>
     fc0:	8082                	ret
     fc2:	00b78023          	sb	a1,0(a5)
     fc6:	0785                	addi	a5,a5,1
     fc8:	bfd5                	j	fbc <memset+0x4>

00000fca <strcpy>:
{
     fca:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
     fcc:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
     fd0:	00e78023          	sb	a4,0(a5)
     fd4:	e311                	bnez	a4,fd8 <strcpy+0xe>
}
     fd6:	8082                	ret
	for (; (*d=*s); s++, d++);
     fd8:	0585                	addi	a1,a1,1
     fda:	0785                	addi	a5,a5,1
     fdc:	bfc5                	j	fcc <strcpy+0x2>

00000fde <memcpy>:
{
     fde:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     fe0:	00f61363          	bne	a2,a5,fe6 <memcpy+0x8>
}
     fe4:	8082                	ret
	for (; n; n--) *d++ = *s++;
     fe6:	00f58733          	add	a4,a1,a5
     fea:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
     fee:	00f50733          	add	a4,a0,a5
     ff2:	0785                	addi	a5,a5,1
     ff4:	00d70023          	sb	a3,0(a4)
     ff8:	b7e5                	j	fe0 <memcpy+0x2>

00000ffa <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
     ffa:	7179                	addi	sp,sp,-48
     ffc:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
     ffe:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1002:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
    1004:	862e                	mv	a2,a1
    1006:	85aa                	mv	a1,a0
    1008:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
    100c:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    100e:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    1012:	37f1                	jal	fde <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    1014:	00140593          	addi	a1,s0,1
    1018:	850a                	mv	a0,sp
    101a:	3409                	jal	a1c <i2c_write_raw.constprop.0>
}
    101c:	50b2                	lw	ra,44(sp)
    101e:	5422                	lw	s0,40(sp)
    1020:	6145                	addi	sp,sp,48
    1022:	8082                	ret

00001024 <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
    1024:	1151                	addi	sp,sp,-12
    1026:	c222                	sw	s0,4(sp)
    1028:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    102a:	02100513          	li	a0,33
void ssd1306_print_str_at(
    102e:	c406                	sw	ra,8(sp)
    1030:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1032:	363d                	jal	b60 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1034:	4501                	li	a0,0
    1036:	362d                	jal	b60 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1038:	07f00513          	li	a0,127
    103c:	3615                	jal	b60 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    103e:	02200513          	li	a0,34
    1042:	3e39                	jal	b60 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1044:	8522                	mv	a0,s0
    1046:	3e29                	jal	b60 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1048:	8522                	mv	a0,s0
    104a:	3e19                	jal	b60 <ssd1306_cmd>
    104c:	4465                	li	s0,25
    104e:	3d018493          	addi	s1,gp,976 # 200007cc <str_output>
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i<25; i++) {
		if (*str) {
    1052:	0004c783          	lbu	a5,0(s1)
    1056:	c78d                	beqz	a5,1080 <ssd1306_print_str_at.constprop.0+0x5c>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    1058:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    105a:	0ff7f793          	andi	a5,a5,255
    105e:	6709                	lui	a4,0x2
    1060:	00279693          	slli	a3,a5,0x2
    1064:	45c70513          	addi	a0,a4,1116 # 245c <FONT_7x5>
    1068:	97b6                	add	a5,a5,a3
    106a:	4595                	li	a1,5
    106c:	953e                	add	a0,a0,a5
    106e:	3771                	jal	ffa <ssd1306_data.isra.0>
			str++;
    1070:	0485                	addi	s1,s1,1
	for (int i=0; i<25; i++) {
    1072:	147d                	addi	s0,s0,-1
    1074:	fc79                	bnez	s0,1052 <ssd1306_print_str_at.constprop.0+0x2e>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
    1076:	40a2                	lw	ra,8(sp)
    1078:	4412                	lw	s0,4(sp)
    107a:	4482                	lw	s1,0(sp)
    107c:	0131                	addi	sp,sp,12
    107e:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    1080:	6789                	lui	a5,0x2
    1082:	4595                	li	a1,5
    1084:	45c78513          	addi	a0,a5,1116 # 245c <FONT_7x5>
    1088:	3f8d                	jal	ffa <ssd1306_data.isra.0>
    108a:	b7e5                	j	1072 <ssd1306_print_str_at.constprop.0+0x4e>

0000108c <modI2C_task>:

	// i2c_device_tests();
	// test_v003Slave();
}

void modI2C_task(uint32_t counter) {
    108c:	862a                	mv	a2,a0
	sprintf(str_output, "counter %lu", counter);
    108e:	6589                	lui	a1,0x2
void modI2C_task(uint32_t counter) {
    1090:	1151                	addi	sp,sp,-12
	sprintf(str_output, "counter %lu", counter);
    1092:	35858593          	addi	a1,a1,856 # 2358 <I2C1_ER_IRQHandler+0xa0>
    1096:	3d018513          	addi	a0,gp,976 # 200007cc <str_output>
void modI2C_task(uint32_t counter) {
    109a:	c406                	sw	ra,8(sp)
	sprintf(str_output, "counter %lu", counter);
    109c:	3ded                	jal	f96 <sprintf>
	if (i2c_ping(0x3C) != I2C_OK) return;
    109e:	03c00513          	li	a0,60
    10a2:	8e3ff0ef          	jal	ra,984 <i2c_ping>
    10a6:	e509                	bnez	a0,10b0 <modI2C_task+0x24>
	modI2C_display(str_output, 7);
    10a8:	40a2                	lw	ra,8(sp)
	ssd1306_print_str_at(str, line, 0);
    10aa:	451d                	li	a0,7
    10ac:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    10ae:	bf9d                	j	1024 <ssd1306_print_str_at.constprop.0>
    10b0:	40a2                	lw	ra,8(sp)
    10b2:	0131                	addi	sp,sp,12
    10b4:	8082                	ret

000010b6 <puts>:
{
    10b6:	1151                	addi	sp,sp,-12
    10b8:	c406                	sw	ra,8(sp)
    10ba:	c222                	sw	s0,4(sp)
    10bc:	c026                	sw	s1,0(sp)
    10be:	84aa                	mv	s1,a0
	int sl = strlen( s );
    10c0:	3165                	jal	d68 <strlen>
    10c2:	842a                	mv	s0,a0
	_write(0, s, sl );
    10c4:	85aa                	mv	a1,a0
    10c6:	8526                	mv	a0,s1
    10c8:	3c7d                	jal	b86 <_write.constprop.0>
	_write(0, "\n", 1 );
    10ca:	6509                	lui	a0,0x2
    10cc:	4585                	li	a1,1
    10ce:	36450513          	addi	a0,a0,868 # 2364 <I2C1_ER_IRQHandler+0xac>
    10d2:	3c55                	jal	b86 <_write.constprop.0>
}
    10d4:	40a2                	lw	ra,8(sp)
    10d6:	00140513          	addi	a0,s0,1
    10da:	4412                	lw	s0,4(sp)
    10dc:	4482                	lw	s1,0(sp)
    10de:	0131                	addi	sp,sp,12
    10e0:	8082                	ret

000010e2 <i2c_scan_callback>:
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    10e2:	c539                	beqz	a0,1130 <i2c_scan_callback+0x4e>
    10e4:	07f00793          	li	a5,127
    10e8:	862a                	mv	a2,a0
    10ea:	04f50363          	beq	a0,a5,1130 <i2c_scan_callback+0x4e>
void i2c_scan_callback(const uint8_t addr) {
    10ee:	1151                	addi	sp,sp,-12
    10f0:	c222                	sw	s0,4(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    10f2:	6589                	lui	a1,0x2
    10f4:	36858593          	addi	a1,a1,872 # 2368 <I2C1_ER_IRQHandler+0xb0>
    10f8:	3d018513          	addi	a0,gp,976 # 200007cc <str_output>
void i2c_scan_callback(const uint8_t addr) {
    10fc:	c406                	sw	ra,8(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    10fe:	3d61                	jal	f96 <sprintf>
	printf("%s\n", str_output);
    1100:	3d018513          	addi	a0,gp,976 # 200007cc <str_output>
    1104:	3f4d                	jal	10b6 <puts>
	modI2C_display(str_output, line++);
    1106:	c4018793          	addi	a5,gp,-960 # 2000003c <line.5>
    110a:	4380                	lw	s0,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    110c:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
    1110:	00140713          	addi	a4,s0,1
    1114:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1116:	86fff0ef          	jal	ra,984 <i2c_ping>
    111a:	e519                	bnez	a0,1128 <i2c_scan_callback+0x46>
	ssd1306_print_str_at(str, line, 0);
    111c:	0ff47513          	andi	a0,s0,255
}
    1120:	4412                	lw	s0,4(sp)
    1122:	40a2                	lw	ra,8(sp)
    1124:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    1126:	bdfd                	j	1024 <ssd1306_print_str_at.constprop.0>
}
    1128:	40a2                	lw	ra,8(sp)
    112a:	4412                	lw	s0,4(sp)
    112c:	0131                	addi	sp,sp,12
    112e:	8082                	ret
    1130:	8082                	ret

00001132 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    1132:	400227b7          	lui	a5,0x40022
    1136:	4705                	li	a4,1
    1138:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    113a:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    113e:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    1142:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1146:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x1076cee>
    114a:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    114c:	009f0737          	lui	a4,0x9f0
    1150:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    1152:	020006b7          	lui	a3,0x2000
    1156:	40021737          	lui	a4,0x40021
    115a:	431c                	lw	a5,0(a4)
    115c:	8ff5                	and	a5,a5,a3
    115e:	dff5                	beqz	a5,115a <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1160:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1162:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1166:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    1168:	0027e793          	ori	a5,a5,2
    116c:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    116e:	4721                	li	a4,8
    1170:	42dc                	lw	a5,4(a3)
    1172:	8bb1                	andi	a5,a5,12
    1174:	fee79ee3          	bne	a5,a4,1170 <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    1178:	e00007b7          	lui	a5,0xe0000
    117c:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    1180:	08000713          	li	a4,128
    1184:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    1188:	8082                	ret

0000118a <main>:
			printf("Long Press\n"); break;
	}
}

int main()
{
    118a:	f7410113          	addi	sp,sp,-140
    118e:	c506                	sw	ra,136(sp)
    1190:	c322                	sw	s0,132(sp)
    1192:	c126                	sw	s1,128(sp)
    1194:	0160                	addi	s0,sp,140
	uint32_t sec_time = 0;
	uint32_t time_ref = 0;

	M_Encoder encoder_a = {0, 0, 0};

	SystemInit();
    1196:	3f71                	jal	1132 <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    1198:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    119c:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    119e:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    11a2:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x27ec>
    11a6:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    11a8:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    11ac:	cb018493          	addi	s1,gp,-848 # 200000ac <systick_millis>
    11b0:	0004a023          	sw	zero,0(s1)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    11b4:	4398                	lw	a4,0(a5)
	systick_init();			//! required for millis()

	funGpioInitAll();
	Delay_Ms(100);
    11b6:	00494537          	lui	a0,0x494
    11ba:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.d894f163+0x48aa6d>
    11be:	00776713          	ori	a4,a4,7
    11c2:	c398                	sw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    11c4:	e000e7b7          	lui	a5,0xe000e
    11c8:	6705                	lui	a4,0x1
    11ca:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>
	funGpioInitAll();
    11ce:	40021737          	lui	a4,0x40021
    11d2:	4f1c                	lw	a5,24(a4)
    11d4:	0357e793          	ori	a5,a5,53
    11d8:	cf1c                	sw	a5,24(a4)
	Delay_Ms(100);
    11da:	87aff0ef          	jal	ra,254 <DelaySysTick>
    }

    void button_setup(Button_t *model) {
    if (model->pin == 0xFF) return; 

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
    11de:	40011737          	lui	a4,0x40011
    11e2:	40072783          	lw	a5,1024(a4) # 40011400 <_eusrstack+0x20010c00>
    11e6:	40070613          	addi	a2,a4,1024
    11ea:	9bc1                	andi	a5,a5,-16
    11ec:	0087e793          	ori	a5,a5,8
    11f0:	40f72023          	sw	a5,1024(a4)
    funDigitalWrite(model->pin, 1);
    11f4:	4785                	li	a5,1
    11f6:	ca1c                	sw	a5,16(a2)
    model->debounce_time = millis();
    11f8:	4098                	lw	a4,0(s1)
    11fa:	cb018693          	addi	a3,gp,-848 # 200000ac <systick_millis>
    11fe:	fad42a23          	sw	a3,-76(s0)
    1202:	fae42c23          	sw	a4,-72(s0)
    model->release_time = millis();
    1206:	4098                	lw	a4,0(s1)
    1208:	fae42623          	sw	a4,-84(s0)
	if(dev->regb == 0) dev->regb = 1;
    120c:	c0418613          	addi	a2,gp,-1020 # 20000000 <dev_aht21>
    1210:	00a64603          	lbu	a2,10(a2)
    1214:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_aht21>
    1218:	e601                	bnez	a2,1220 <main+0x96>
	if(dev->regb  > 4) dev->regb = 4;
    121a:	00f70523          	sb	a5,10(a4)
    121e:	a021                	j	1226 <main+0x9c>
    1220:	4791                	li	a5,4
    1222:	fec7ece3          	bltu	a5,a2,121a <main+0x90>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1226:	400217b7          	lui	a5,0x40021
    122a:	4b90                	lw	a2,16(a5)
    122c:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1230:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1234:	8e49                	or	a2,a2,a0
    1236:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1238:	4b90                	lw	a2,16(a5)
    123a:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    123c:	6485                	lui	s1,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    123e:	8e6d                	and	a2,a2,a1
    1240:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1242:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    1244:	fbc00637          	lui	a2,0xfbc00
    1248:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    124a:	8ec9                	or	a3,a3,a0
    124c:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    124e:	4f94                	lw	a3,24(a5)
    1250:	0116e693          	ori	a3,a3,17
    1254:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    1256:	400107b7          	lui	a5,0x40010
    125a:	43d4                	lw	a3,4(a5)
    125c:	8ef1                	and	a3,a3,a2
    125e:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1260:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1262:	767d                	lui	a2,0xfffff
    1264:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1268:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    126a:	400117b7          	lui	a5,0x40011
    126e:	4394                	lw	a3,0(a5)
    1270:	f0f6f693          	andi	a3,a3,-241
    1274:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    1276:	4394                	lw	a3,0(a5)
    1278:	0d06e693          	ori	a3,a3,208
    127c:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    127e:	4394                	lw	a3,0(a5)
    1280:	8ef1                	and	a3,a3,a2
    1282:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1284:	4394                	lw	a3,0(a5)
    1286:	d0048613          	addi	a2,s1,-768 # d00 <handle_reset+0x74>
    128a:	8ed1                	or	a3,a3,a2
    128c:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    128e:	400056b7          	lui	a3,0x40005
    1292:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
    1296:	07c2                	slli	a5,a5,0x10
    1298:	83c1                	srli	a5,a5,0x10
    129a:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    129e:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    12a2:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
    12a6:	431c                	lw	a5,0(a4)
    12a8:	6761                	lui	a4,0x18
    12aa:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.d894f163+0xf30d>
    12ae:	00179593          	slli	a1,a5,0x1
    12b2:	36f76263          	bltu	a4,a5,1616 <main+0x48c>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    12b6:	02dc7537          	lui	a0,0x2dc7
    12ba:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbd86d>
    12be:	debfe0ef          	jal	ra,a8 <__hidden___udivsi3>
    12c2:	14fd                	addi	s1,s1,-1
    12c4:	8d65                	and	a0,a0,s1
    12c6:	0542                	slli	a0,a0,0x10
    12c8:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    12ca:	40005737          	lui	a4,0x40005
    12ce:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    12d2:	40075783          	lhu	a5,1024(a4)
    12d6:	07c2                	slli	a5,a5,0x10
    12d8:	83c1                	srli	a5,a5,0x10
    12da:	0017e793          	ori	a5,a5,1
    12de:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    12e2:	da4ff0ef          	jal	ra,886 <i2c_error>
	if(i2c_init(&dev_aht21) != I2C_OK) {
    12e6:	34050663          	beqz	a0,1632 <main+0x4a8>
		printf("Failed to init I2C\n");
    12ea:	6509                	lui	a0,0x2
    12ec:	37450513          	addi	a0,a0,884 # 2374 <I2C1_ER_IRQHandler+0xbc>
    12f0:	33d9                	jal	10b6 <puts>
	button_setup(&button1);

	// I2C1: uses PC1 & PC2
	modI2C_setup();

	uint8_t slave_mode = funDigitalRead(BUTTON_PIN);
    12f2:	400117b7          	lui	a5,0x40011
    12f6:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    12fa:	479c                	lw	a5,8(a5)
    12fc:	8b85                	andi	a5,a5,1
    12fe:	f8f42a23          	sw	a5,-108(s0)
	if (slave_mode == 0) {
    1302:	10079063          	bnez	a5,1402 <main+0x278>
		printf("I2C Slave mode\n");
    1306:	6509                	lui	a0,0x2
    1308:	3d050513          	addi	a0,a0,976 # 23d0 <I2C1_ER_IRQHandler+0x118>
    130c:	336d                	jal	10b6 <puts>
} i2c_slave_state;

void SetupI2CSlave(uint8_t address, volatile uint8_t* registers, uint8_t size,
    i2c_write_callback_t write_callback, i2c_read_callback_t read_callback, bool read_only
) {
    i2c_slave_state.first_write = 1;
    130e:	39818793          	addi	a5,gp,920 # 20000794 <i2c_slave_state>
    1312:	4705                	li	a4,1
    1314:	00e79023          	sh	a4,0(a5)
    i2c_slave_state.offset = 0;
    i2c_slave_state.position = 0;
    i2c_slave_state.registers1 = registers;
    1318:	c1c18713          	addi	a4,gp,-996 # 20000018 <i2c_registers>
    131c:	c3d8                	sw	a4,4(a5)
    i2c_slave_state.size1 = size;
    i2c_slave_state.registers2 = NULL;
    i2c_slave_state.size2 = 0;
    i2c_slave_state.write_callback1 = write_callback;
    131e:	6705                	lui	a4,0x1
    1320:	f5670713          	addi	a4,a4,-170 # f56 <onI2C_SlaveWrite>
    1324:	cbd8                	sw	a4,20(a5)
    i2c_slave_state.read_callback1 = read_callback;
    1326:	6705                	lui	a4,0x1
    i2c_slave_state.size1 = size;
    1328:	02000613          	li	a2,32
    i2c_slave_state.read_callback1 = read_callback;
    132c:	f5e70713          	addi	a4,a4,-162 # f5e <onI2C_SlaveRead>
    i2c_slave_state.registers2 = NULL;
    1330:	0007a623          	sw	zero,12(a5)
    i2c_slave_state.size2 = 0;
    1334:	00078823          	sb	zero,16(a5)
    i2c_slave_state.read_only1 = read_only;
    1338:	00078e23          	sb	zero,28(a5)
    i2c_slave_state.read_callback1 = read_callback;
    133c:	cf98                	sw	a4,24(a5)
    i2c_slave_state.position = 0;
    133e:	00078123          	sb	zero,2(a5)
    i2c_slave_state.size1 = size;
    1342:	00c78423          	sb	a2,8(a5)
    i2c_slave_state.write_callback2 = NULL;
    1346:	0207a023          	sw	zero,32(a5)
    i2c_slave_state.read_callback2 = NULL;
    134a:	0207a223          	sw	zero,36(a5)
    i2c_slave_state.read_only2 = false;
    134e:	02078423          	sb	zero,40(a5)

    // Enable I2C1
    RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1352:	400217b7          	lui	a5,0x40021
    1356:	4fd4                	lw	a3,28(a5)
    1358:	002005b7          	lui	a1,0x200
    135c:	8ecd                	or	a3,a3,a1
    135e:	cfd4                	sw	a3,28(a5)

    // Reset I2C1 to init all regs
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
    1360:	4b98                	lw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1362:	ffe006b7          	lui	a3,0xffe00
    1366:	16fd                	addi	a3,a3,-1
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
    1368:	8f4d                	or	a4,a4,a1
    136a:	cb98                	sw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    136c:	4b98                	lw	a4,16(a5)

    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
    136e:	65a1                	lui	a1,0x8
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1370:	8f75                	and	a4,a4,a3
    1372:	cb98                	sw	a4,16(a5)
    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
    1374:	400057b7          	lui	a5,0x40005
    1378:	4007d683          	lhu	a3,1024(a5) # 40005400 <_eusrstack+0x20004c00>
    137c:	06c2                	slli	a3,a3,0x10
    137e:	82c1                	srli	a3,a3,0x10
    1380:	8ecd                	or	a3,a3,a1
    1382:	40d79023          	sh	a3,1024(a5)
    I2C1->CTLR1 &= ~I2C_CTLR1_SWRST;
    1386:	4007d683          	lhu	a3,1024(a5)
    138a:	400005b7          	lui	a1,0x40000
    138e:	06c6                	slli	a3,a3,0x11
    1390:	82c5                	srli	a3,a3,0x11
    1392:	40d79023          	sh	a3,1024(a5)

    // Set module clock frequency
    uint32_t prerate = 2000000; // I2C Logic clock rate, must be higher than the bus clock rate
    I2C1->CTLR2 |= (FUNCONF_SYSTEM_CORE_CLOCK/prerate) & I2C_CTLR2_FREQ;
    1396:	4047d683          	lhu	a3,1028(a5)
    139a:	06c2                	slli	a3,a3,0x10
    139c:	82c1                	srli	a3,a3,0x10
    139e:	0186e693          	ori	a3,a3,24
    13a2:	40d79223          	sh	a3,1028(a5)

    // Enable interrupts
    I2C1->CTLR2 |= I2C_CTLR2_ITBUFEN | I2C_CTLR2_ITEVTEN | I2C_CTLR2_ITERREN;
    13a6:	4047d683          	lhu	a3,1028(a5)
    13aa:	06c2                	slli	a3,a3,0x10
    13ac:	82c1                	srli	a3,a3,0x10
    13ae:	7006e693          	ori	a3,a3,1792
    13b2:	40d79223          	sh	a3,1028(a5)
    13b6:	e000e6b7          	lui	a3,0xe000e
    13ba:	10b6a023          	sw	a1,256(a3) # e000e100 <_eusrstack+0xc000d900>
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    13be:	40c68f23          	sb	a2,1054(a3)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    13c2:	800005b7          	lui	a1,0x80000
    13c6:	10b6a023          	sw	a1,256(a3)
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    13ca:	40c68fa3          	sb	a2,1055(a3)
    NVIC_EnableIRQ(I2C1_ER_IRQn); // Error interrupt
    NVIC_SetPriority(I2C1_ER_IRQn, 2 << 4);

    // Set clock configuration
    uint32_t clockrate = 1000000; // I2C Bus clock rate, must be lower than the logic clock rate
    I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(3*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_FS; // Fast mode 33% duty cycle
    13ce:	76e1                	lui	a3,0xffff8
    13d0:	06c1                	addi	a3,a3,16
    13d2:	40d79e23          	sh	a3,1052(a5)
    //I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(25*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_DUTY | I2C_CKCFGR_FS; // Fast mode 36% duty cycle
    //I2C1->CKCFGR = (FUNCONF_SYSTEM_CORE_CLOCK/(2*clockrate))&I2C_CKCFGR_CCR; // Standard mode good to 100kHz

    // Set I2C address
    I2C1->OADDR1 = address << 1;
    13d6:	0ee00693          	li	a3,238
    13da:	40d79423          	sh	a3,1032(a5)
    I2C1->OADDR2 = 0;
    13de:	40079623          	sh	zero,1036(a5)

    // Enable I2C
    I2C1->CTLR1 |= I2C_CTLR1_PE;
    13e2:	4007d703          	lhu	a4,1024(a5)
    13e6:	0742                	slli	a4,a4,0x10
    13e8:	8341                	srli	a4,a4,0x10
    13ea:	00176713          	ori	a4,a4,1
    13ee:	40e79023          	sh	a4,1024(a5)

    // Acknowledge bytes when they are received
    I2C1->CTLR1 |= I2C_CTLR1_ACK;
    13f2:	4007d703          	lhu	a4,1024(a5)
    13f6:	0742                	slli	a4,a4,0x10
    13f8:	8341                	srli	a4,a4,0x10
    13fa:	40076713          	ori	a4,a4,1024
    13fe:	40e79023          	sh	a4,1024(a5)
    RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    1402:	40021637          	lui	a2,0x40021
    1406:	4e1c                	lw	a5,24(a2)
    1408:	6685                	lui	a3,0x1
    140a:	01068713          	addi	a4,a3,16 # 1010 <ssd1306_data.isra.0+0x16>
    140e:	8fd9                	or	a5,a5,a4
    1410:	ce1c                	sw	a5,24(a2)
    GPIOC->CFGLR &= ~(0xf << (SPI_SCLK << 2));
    1412:	400114b7          	lui	s1,0x40011
    1416:	409c                	lw	a5,0(s1)
    1418:	ff100737          	lui	a4,0xff100
    141c:	177d                	addi	a4,a4,-1
    141e:	8ff9                	and	a5,a5,a4
    1420:	c09c                	sw	a5,0(s1)
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_SCLK << 2);
    1422:	409c                	lw	a5,0(s1)
    1424:	00b00737          	lui	a4,0xb00
    1428:	8fd9                	or	a5,a5,a4
    142a:	c09c                	sw	a5,0(s1)
    GPIOC->CFGLR &= ~(0xf << (SPI_MOSI << 2));
    142c:	409c                	lw	a5,0(s1)
    142e:	f1000737          	lui	a4,0xf1000
    1432:	177d                	addi	a4,a4,-1
    1434:	8ff9                	and	a5,a5,a4
    1436:	c09c                	sw	a5,0(s1)
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_MOSI << 2);
    1438:	409c                	lw	a5,0(s1)
    143a:	0b000737          	lui	a4,0xb000
    143e:	8fd9                	or	a5,a5,a4
    SPI1->CTLR1 = SPI_CPHA_1Edge             // Bit 0     - Clock PHAse
    1440:	7771                	lui	a4,0xffffc
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_MOSI << 2);
    1442:	c09c                	sw	a5,0(s1)
    SPI1->CTLR1 = SPI_CPHA_1Edge             // Bit 0     - Clock PHAse
    1444:	30470713          	addi	a4,a4,772 # ffffc304 <_eusrstack+0xdfffbb04>
    1448:	400137b7          	lui	a5,0x40013
    144c:	00e79023          	sh	a4,0(a5) # 40013000 <_eusrstack+0x20012800>
    SPI1->CRCR = 7;                          // CRC
    1450:	471d                	li	a4,7
    1452:	00e79823          	sh	a4,16(a5)
    SPI1->CTLR2 |= SPI_I2S_DMAReq_Tx;        // Configure SPI DMA Transfer
    1456:	0047d703          	lhu	a4,4(a5)
    DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    145a:	07b1                	addi	a5,a5,12
    SPI1->CTLR2 |= SPI_I2S_DMAReq_Tx;        // Configure SPI DMA Transfer
    145c:	0742                	slli	a4,a4,0x10
    145e:	8341                	srli	a4,a4,0x10
    1460:	00276713          	ori	a4,a4,2
    1464:	fee79c23          	sh	a4,-8(a5)
    SPI1->CTLR1 |= CTLR1_SPE_Set;            // Bit 6     - Enable SPI
    1468:	ff47d703          	lhu	a4,-12(a5)
    146c:	0742                	slli	a4,a4,0x10
    146e:	8341                	srli	a4,a4,0x10
    1470:	04076713          	ori	a4,a4,64
    1474:	fee79a23          	sh	a4,-12(a5)
    RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    1478:	4a58                	lw	a4,20(a2)
    147a:	00176713          	ori	a4,a4,1
    147e:	ca58                	sw	a4,20(a2)
    DMA1_Channel3->CFGR = DMA_DIR_PeripheralDST          // Bit 4     - Read from memory
    1480:	670d                	lui	a4,0x3
    1482:	40020637          	lui	a2,0x40020
    1486:	0b070713          	addi	a4,a4,176 # 30b0 <_data_lma+0x514>
    148a:	da18                	sw	a4,48(a2)
    DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    148c:	de1c                	sw	a5,56(a2)
    DC_PIN = dc_pin;
    148e:	02300713          	li	a4,35
    1492:	c8e18823          	sb	a4,-880(gp) # 2000008c <DC_PIN>
    funPinMode(rst_pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP);
    1496:	4098                	lw	a4,0(s1)
    1498:	9b41                	andi	a4,a4,-16
    149a:	00176713          	ori	a4,a4,1
    149e:	c098                	sw	a4,0(s1)
    funPinMode(dc_pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP);
    14a0:	409c                	lw	a5,0(s1)
    14a2:	7745                	lui	a4,0xffff1
    14a4:	177d                	addi	a4,a4,-1
    14a6:	8ff9                	and	a5,a5,a4
    14a8:	8fd5                	or	a5,a5,a3
    14aa:	c09c                	sw	a5,0(s1)
    funDigitalWrite(rst_pin, 0);
    14ac:	67c1                	lui	a5,0x10
    14ae:	c89c                	sw	a5,16(s1)
    Delay_Ms(100);
    14b0:	004947b7          	lui	a5,0x494
    14b4:	e0078513          	addi	a0,a5,-512 # 493e00 <lib_i2c.c.d894f163+0x48aa6d>
    14b8:	d9dfe0ef          	jal	ra,254 <DelaySysTick>
    funDigitalWrite(rst_pin, 1);
    14bc:	4705                	li	a4,1
    Delay_Ms(100);
    14be:	004947b7          	lui	a5,0x494
    funDigitalWrite(rst_pin, 1);
    14c2:	c898                	sw	a4,16(s1)
    Delay_Ms(100);
    14c4:	e0078513          	addi	a0,a5,-512 # 493e00 <lib_i2c.c.d894f163+0x48aa6d>
    14c8:	d8dfe0ef          	jal	ra,254 <DelaySysTick>
    write_cmd_8(0x01);              //# Software reset
    14cc:	4505                	li	a0,1
    14ce:	e71fe0ef          	jal	ra,33e <write_cmd_8>
    Delay_Ms(200);
    14d2:	00928537          	lui	a0,0x928
    14d6:	c0050513          	addi	a0,a0,-1024 # 927c00 <lib_i2c.c.d894f163+0x91e86d>
    14da:	d7bfe0ef          	jal	ra,254 <DelaySysTick>
    write_cmd_8(0x11);              //# SLPOUT - Sleep Out; SLPIN 0x10
    14de:	4545                	li	a0,17
    14e0:	e5ffe0ef          	jal	ra,33e <write_cmd_8>
    Delay_Ms(100);
    14e4:	004947b7          	lui	a5,0x494
    14e8:	e0078513          	addi	a0,a5,-512 # 493e00 <lib_i2c.c.d894f163+0x48aa6d>
    14ec:	d69fe0ef          	jal	ra,254 <DelaySysTick>
    write_cmd_8(0x36);              //# MADCTL - Memory Access Control
    14f0:	03600513          	li	a0,54
    14f4:	e4bfe0ef          	jal	ra,33e <write_cmd_8>
    INTF_SPI_DC_HIGH();     // Data Mode
    14f8:	e69fe0ef          	jal	ra,360 <INTF_SPI_DC_HIGH>
    SPI_send(data);
    14fc:	0a800513          	li	a0,168
    1500:	e29fe0ef          	jal	ra,328 <SPI_send>
    write_cmd_8(0x3A);              //# COLMOD - Color Mode
    1504:	03a00513          	li	a0,58
    1508:	e37fe0ef          	jal	ra,33e <write_cmd_8>
    INTF_SPI_DC_HIGH();     // Data Mode
    150c:	e55fe0ef          	jal	ra,360 <INTF_SPI_DC_HIGH>
    SPI_send(data);
    1510:	4515                	li	a0,5
    1512:	e17fe0ef          	jal	ra,328 <SPI_send>
    uint8_t gamma_p[] = {0x09, 0x16, 0x09, 0x20, 0x21, 0x1B, 0x13, 0x19,
    1516:	6589                	lui	a1,0x2
    1518:	4641                	li	a2,16
    151a:	43458593          	addi	a1,a1,1076 # 2434 <I2C1_ER_IRQHandler+0x17c>
    151e:	fbc40513          	addi	a0,s0,-68
    1522:	3c75                	jal	fde <memcpy>
    write_cmd_8(0xE0);              //# GMCTRP1 - Gamama Control + Positive Polarity
    1524:	0e000513          	li	a0,224
    1528:	e17fe0ef          	jal	ra,33e <write_cmd_8>
    INTF_TFT_SEND_BUFF(gamma_p, 16, 1);
    152c:	4605                	li	a2,1
    152e:	45c1                	li	a1,16
    1530:	fbc40513          	addi	a0,s0,-68
    1534:	ecffe0ef          	jal	ra,402 <INTF_TFT_SEND_BUFF>
    uint8_t gamma_n[] = {0x0B, 0x14, 0x08, 0x1E, 0x22, 0x1D, 0x18, 0x1E,
    1538:	6589                	lui	a1,0x2
    153a:	4641                	li	a2,16
    153c:	44858593          	addi	a1,a1,1096 # 2448 <I2C1_ER_IRQHandler+0x190>
    1540:	fcc40513          	addi	a0,s0,-52
    1544:	3c69                	jal	fde <memcpy>
    write_cmd_8(0xE1);              //# GMCTRN1 - Gamma Control - Negative Polarity
    1546:	0e100513          	li	a0,225
    154a:	df5fe0ef          	jal	ra,33e <write_cmd_8>
    INTF_TFT_SEND_BUFF(gamma_n, 16, 1);
    154e:	4605                	li	a2,1
    1550:	45c1                	li	a1,16
    1552:	fcc40513          	addi	a0,s0,-52
    1556:	eadfe0ef          	jal	ra,402 <INTF_TFT_SEND_BUFF>
    Delay_Ms(10);
    155a:	000754b7          	lui	s1,0x75
    155e:	30048513          	addi	a0,s1,768 # 75300 <lib_i2c.c.d894f163+0x6bf6d>
    1562:	cf3fe0ef          	jal	ra,254 <DelaySysTick>
    write_cmd_8(0x21);              //# INVON - Inversion On
    1566:	02100513          	li	a0,33
    156a:	dd5fe0ef          	jal	ra,33e <write_cmd_8>
    write_cmd_8(0x13);              //# NORON - Normal Display On
    156e:	454d                	li	a0,19
    1570:	dcffe0ef          	jal	ra,33e <write_cmd_8>
    Delay_Ms(10);
    1574:	30048513          	addi	a0,s1,768
    1578:	cddfe0ef          	jal	ra,254 <DelaySysTick>
    write_cmd_8(0x29);              //# DISPON - Display On; DISPOFF 0x28
    157c:	02900513          	li	a0,41
    1580:	dbffe0ef          	jal	ra,33e <write_cmd_8>
    Delay_Ms(10);
    1584:	30048513          	addi	a0,s1,768
    1588:	ccdfe0ef          	jal	ra,254 <DelaySysTick>
    tft_fill_rect(0, 0, 160, 128, PURPLE);
    158c:	6721                	lui	a4,0x8
    158e:	80f70713          	addi	a4,a4,-2033 # 780f <ch32_mess.c.38d68e6d+0x326c>
    1592:	08000693          	li	a3,128
    1596:	0a000613          	li	a2,160
    159a:	4581                	li	a1,0
    159c:	4501                	li	a0,0
    159e:	f8dfe0ef          	jal	ra,52a <tft_fill_rect>
    model->btn_state = newState;
    15a2:	478d                	li	a5,3
	Button_t button1 = { BUTTON_PIN, BUTTON_IDLE, 0, 0, 0, 0, 0, 0 };
    15a4:	f8042623          	sw	zero,-116(s0)
    15a8:	faf42823          	sw	a5,-80(s0)
	uint32_t sec_time = 0;
    15ac:	4481                	li	s1,0
	uint32_t counter = 0;
    15ae:	f8042c23          	sw	zero,-104(s0)

	// TIM2 Ch1, Ch2 : uses PD3, PD4.
	// modEncoder_setup(&encoder_a);

	while(1) {
		uint32_t now = millis();
    15b2:	fb442783          	lw	a5,-76(s0)

		button_run(&button1, button_onChanged);
		// modEncoder_task(now, &encoder_a, encoder_onChanged);

		if (now - sec_time > 1000) {
    15b6:	fb842703          	lw	a4,-72(s0)
		uint32_t now = millis();
    15ba:	439c                	lw	a5,0(a5)
    15bc:	f8f42823          	sw	a5,-112(s0)
}

void button_run(Button_t *model, void (*handler)(int, uint32_t)) {
    if (model->pin == 0xFF) return;
    
    uint32_t now = millis();
    15c0:	fb442783          	lw	a5,-76(s0)
    15c4:	439c                	lw	a5,0(a5)
    15c6:	faf42c23          	sw	a5,-72(s0)
    uint8_t read = funDigitalRead(model->pin);

    // Debounce check
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    15ca:	fb842683          	lw	a3,-72(s0)
    uint8_t read = funDigitalRead(model->pin);
    15ce:	400117b7          	lui	a5,0x40011
    15d2:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    15d6:	479c                	lw	a5,8(a5)
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    15d8:	40e68633          	sub	a2,a3,a4
    15dc:	46cd                	li	a3,19
    15de:	5ac6f063          	bgeu	a3,a2,1b7e <main+0x9f4>
    model->debounce_time = now;

    switch (model->btn_state) {
    15e2:	fb042683          	lw	a3,-80(s0)
    15e6:	4709                	li	a4,2
    uint8_t read = funDigitalRead(model->pin);
    15e8:	8b85                	andi	a5,a5,1
    switch (model->btn_state) {
    15ea:	58e68463          	beq	a3,a4,1b72 <main+0x9e8>
    15ee:	470d                	li	a4,3
    15f0:	16e68963          	beq	a3,a4,1762 <main+0x5d8>
    15f4:	52069163          	bnez	a3,1b16 <main+0x98c>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
    15f8:	4e078e63          	beqz	a5,1af4 <main+0x96a>
    model->debounce_time = millis();
    15fc:	fb442703          	lw	a4,-76(s0)
    1600:	4318                	lw	a4,0(a4)
    1602:	fae42c23          	sw	a4,-72(s0)
    model->release_time = millis();
    1606:	fb442703          	lw	a4,-76(s0)
    160a:	4318                	lw	a4,0(a4)
    160c:	fae42623          	sw	a4,-84(s0)
    model->btn_state = newState;
    1610:	faf42823          	sw	a5,-80(s0)
    1614:	aa85                	j	1784 <main+0x5fa>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    1616:	02dc7537          	lui	a0,0x2dc7
    161a:	95be                	add	a1,a1,a5
    161c:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbd86d>
    1620:	a89fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    1624:	14fd                	addi	s1,s1,-1
    1626:	8d65                	and	a0,a0,s1
    1628:	0542                	slli	a0,a0,0x10
    162a:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    162c:	67a1                	lui	a5,0x8
    162e:	8d5d                	or	a0,a0,a5
    1630:	b969                	j	12ca <main+0x140>
		if (i2c_ping(0x3C) == I2C_OK) {
    1632:	03c00513          	li	a0,60
    1636:	b4eff0ef          	jal	ra,984 <i2c_ping>
    163a:	0e051863          	bnez	a0,172a <main+0x5a0>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    163e:	678d                	lui	a5,0x3
    1640:	ca018623          	sb	zero,-852(gp) # 200000a8 <ssd1306_buffer>
    1644:	b8078793          	addi	a5,a5,-1152 # 2b80 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    1648:	0007c503          	lbu	a0,0(a5)
    164c:	0ff00713          	li	a4,255
    1650:	02e51e63          	bne	a0,a4,168c <main+0x502>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    1654:	02100513          	li	a0,33
    1658:	d08ff0ef          	jal	ra,b60 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    165c:	4501                	li	a0,0
    165e:	d02ff0ef          	jal	ra,b60 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    1662:	07f00513          	li	a0,127
    1666:	cfaff0ef          	jal	ra,b60 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    166a:	02200513          	li	a0,34
    166e:	cf2ff0ef          	jal	ra,b60 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    1672:	4501                	li	a0,0
    1674:	cecff0ef          	jal	ra,b60 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    1678:	451d                	li	a0,7
    167a:	ce6ff0ef          	jal	ra,b60 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    167e:	02000593          	li	a1,32
    1682:	cac18513          	addi	a0,gp,-852 # 200000a8 <ssd1306_buffer>
    1686:	975ff0ef          	jal	ra,ffa <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    168a:	a809                	j	169c <main+0x512>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    168c:	0785                	addi	a5,a5,1
    168e:	faf42823          	sw	a5,-80(s0)
    1692:	cceff0ef          	jal	ra,b60 <ssd1306_cmd>
    1696:	fb042783          	lw	a5,-80(s0)
    169a:	d55d                	beqz	a0,1648 <main+0x4be>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    169c:	f9818513          	addi	a0,gp,-104 # 20000394 <frame_buffer>
    16a0:	40000613          	li	a2,1024
    16a4:	4581                	li	a1,0
    16a6:	913ff0ef          	jal	ra,fb8 <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    16aa:	02100513          	li	a0,33
    16ae:	cb2ff0ef          	jal	ra,b60 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    16b2:	4501                	li	a0,0
    16b4:	cacff0ef          	jal	ra,b60 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    16b8:	07f00513          	li	a0,127
    16bc:	ca4ff0ef          	jal	ra,b60 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    16c0:	02200513          	li	a0,34
    16c4:	c9cff0ef          	jal	ra,b60 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    16c8:	4501                	li	a0,0
    16ca:	c96ff0ef          	jal	ra,b60 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    16ce:	451d                	li	a0,7
    16d0:	c90ff0ef          	jal	ra,b60 <ssd1306_cmd>
    16d4:	4481                	li	s1,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    16d6:	f9818793          	addi	a5,gp,-104 # 20000394 <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    16da:	4501                	li	a0,0
    16dc:	97a6                	add	a5,a5,s1
    16de:	02050713          	addi	a4,a0,32
    16e2:	01071593          	slli	a1,a4,0x10
    16e6:	81c1                	srli	a1,a1,0x10
    16e8:	8d89                	sub	a1,a1,a0
    16ea:	953e                	add	a0,a0,a5
    16ec:	fae42423          	sw	a4,-88(s0)
    16f0:	faf42823          	sw	a5,-80(s0)
    16f4:	907ff0ef          	jal	ra,ffa <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    16f8:	fa842703          	lw	a4,-88(s0)
    16fc:	fb042783          	lw	a5,-80(s0)
    1700:	853a                	mv	a0,a4
    1702:	08000713          	li	a4,128
    1706:	fce51ce3          	bne	a0,a4,16de <main+0x554>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    170a:	08048493          	addi	s1,s1,128
    170e:	40000793          	li	a5,1024
    1712:	fcf492e3          	bne	s1,a5,16d6 <main+0x54c>
			sprintf(str_output, "Hello Bee!");
    1716:	6589                	lui	a1,0x2
    1718:	38858593          	addi	a1,a1,904 # 2388 <I2C1_ER_IRQHandler+0xd0>
    171c:	3d018513          	addi	a0,gp,976 # 200007cc <str_output>
    1720:	8abff0ef          	jal	ra,fca <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    1724:	4501                	li	a0,0
    1726:	8ffff0ef          	jal	ra,1024 <ssd1306_print_str_at.constprop.0>
		printf("----Scanning I2C Bus for Devices---\n");
    172a:	6509                	lui	a0,0x2
    172c:	39450513          	addi	a0,a0,916 # 2394 <I2C1_ER_IRQHandler+0xdc>
    1730:	987ff0ef          	jal	ra,10b6 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1734:	4481                	li	s1,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    1736:	8526                	mv	a0,s1
    1738:	a4cff0ef          	jal	ra,984 <i2c_ping>
    173c:	e501                	bnez	a0,1744 <main+0x5ba>
    173e:	8526                	mv	a0,s1
    1740:	9a3ff0ef          	jal	ra,10e2 <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1744:	0485                	addi	s1,s1,1
    1746:	0ff4f493          	andi	s1,s1,255
    174a:	07f00793          	li	a5,127
    174e:	fef494e3          	bne	s1,a5,1736 <main+0x5ac>
		printf("----Done Scanning----\n\n");
    1752:	6509                	lui	a0,0x2
    1754:	3b850513          	addi	a0,a0,952 # 23b8 <I2C1_ER_IRQHandler+0x100>
    1758:	95fff0ef          	jal	ra,10b6 <puts>
		modI2C_task();
    175c:	931ff0ef          	jal	ra,108c <modI2C_task>
    1760:	be49                	j	12f2 <main+0x168>
        if (read == 0) {
    1762:	e38d                	bnez	a5,1784 <main+0x5fa>
    model->debounce_time = millis();
    1764:	fb442783          	lw	a5,-76(s0)
    model->release_time = millis();
    1768:	fb442703          	lw	a4,-76(s0)
    model->btn_state = newState;
    176c:	fa042823          	sw	zero,-80(s0)
    model->debounce_time = millis();
    1770:	439c                	lw	a5,0(a5)
    model->release_time = millis();
    1772:	4318                	lw	a4,0(a4)
    1774:	fae42623          	sw	a4,-84(s0)
            model->press_time = now;
    1778:	fb842703          	lw	a4,-72(s0)
    model->debounce_time = millis();
    177c:	faf42c23          	sw	a5,-72(s0)
            model->press_time = now;
    1780:	f8e42623          	sw	a4,-116(s0)
		if (now - sec_time > 1000) {
    1784:	f9042783          	lw	a5,-112(s0)
    1788:	3e800713          	li	a4,1000
    178c:	8f85                	sub	a5,a5,s1
    178e:	e2f772e3          	bgeu	a4,a5,15b2 <main+0x428>
			sec_time = now;

			if (slave_mode != 0) {
    1792:	f9442783          	lw	a5,-108(s0)
    1796:	cb91                	beqz	a5,17aa <main+0x620>
				modI2C_task(counter++);
    1798:	f9842783          	lw	a5,-104(s0)
    179c:	00178493          	addi	s1,a5,1
    17a0:	853e                	mv	a0,a5
    17a2:	8ebff0ef          	jal	ra,108c <modI2C_task>
    17a6:	f8942c23          	sw	s1,-104(s0)
	// Increment the milliseconds count
	systick_millis++;
}

uint32_t SysTick_getRunTime(void *handler(void)) {
	uint32_t now = micros();
    17aa:	e000f7b7          	lui	a5,0xe000f
    17ae:	4788                	lw	a0,8(a5)
    17b0:	03000593          	li	a1,48
    str[position] = '\0';  // End of the string.
    17b4:	075bd4b7          	lui	s1,0x75bd
    17b8:	8f1fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    17bc:	f8a42423          	sw	a0,-120(s0)
    _cursor_x = x + TFT_X_OFFSET;
    17c0:	4705                	li	a4,1
}


void mod_st7735_test2() {
    tft_set_cursor(0, 0);
    tft_print("Hello World!");
    17c2:	6509                	lui	a0,0x2
    17c4:	cae19023          	sh	a4,-864(gp) # 2000009c <_cursor_x>
    17c8:	40c50513          	addi	a0,a0,1036 # 240c <I2C1_ER_IRQHandler+0x154>
    _cursor_y = y + TFT_Y_OFFSET;
    17cc:	4769                	li	a4,26
    17ce:	cae19123          	sh	a4,-862(gp) # 2000009e <_cursor_y>
    17d2:	c89fe0ef          	jal	ra,45a <tft_print>
    str[position] = '\0';  // End of the string.
    17d6:	3c418713          	addi	a4,gp,964 # 200007c0 <str.4>
    17da:	000705a3          	sb	zero,11(a4)
    17de:	3c418693          	addi	a3,gp,964 # 200007c0 <str.4>
    uint8_t     position  = 11;
    17e2:	472d                	li	a4,11
    str[position] = '\0';  // End of the string.
    17e4:	d1548493          	addi	s1,s1,-747 # 75bcd15 <lib_i2c.c.d894f163+0x75b3982>
        str[--position] = num % 10 + '0';
    17e8:	177d                	addi	a4,a4,-1
    17ea:	0ff77713          	andi	a4,a4,255
    17ee:	45a9                	li	a1,10
    17f0:	8526                	mv	a0,s1
    17f2:	fae42223          	sw	a4,-92(s0)
    17f6:	fad42423          	sw	a3,-88(s0)
    17fa:	8fffe0ef          	jal	ra,f8 <__modsi3>
    17fe:	fa842683          	lw	a3,-88(s0)
    1802:	03050513          	addi	a0,a0,48
        num /= 10;
    1806:	45a9                	li	a1,10
        str[--position] = num % 10 + '0';
    1808:	00a68523          	sb	a0,10(a3)
        num /= 10;
    180c:	8526                	mv	a0,s1
    180e:	893fe0ef          	jal	ra,a0 <__divsi3>
    while (num) {
    1812:	fa842683          	lw	a3,-88(s0)
    1816:	fa442703          	lw	a4,-92(s0)
    181a:	4609                	li	a2,2
        num /= 10;
    181c:	84aa                	mv	s1,a0
    while (num) {
    181e:	16fd                	addi	a3,a3,-1
    1820:	3c418793          	addi	a5,gp,964 # 200007c0 <str.4>
    1824:	fcc712e3          	bne	a4,a2,17e8 <main+0x65e>
    tft_print(&str[position]);
    1828:	00278513          	addi	a0,a5,2 # e000f002 <_eusrstack+0xc000e802>
    182c:	c2ffe0ef          	jal	ra,45a <tft_print>
    tft_print_number(123456789, 0);
    
    //! dots test
    tft_draw_pixel(rand8() % 160, rand8() % 80, colors[rand8() % 19]);
    1830:	822ff0ef          	jal	ra,852 <rand8>
    1834:	faa42023          	sw	a0,-96(s0)
    1838:	81aff0ef          	jal	ra,852 <rand8>
    183c:	faa42423          	sw	a0,-88(s0)
    1840:	812ff0ef          	jal	ra,852 <rand8>
    1844:	6389                	lui	t2,0x2
    1846:	45cd                	li	a1,19
    1848:	65838493          	addi	s1,t2,1624 # 2658 <colors>
    184c:	889fe0ef          	jal	ra,d4 <__umodsi3>
    1850:	0ff57793          	andi	a5,a0,255
    1854:	0786                	slli	a5,a5,0x1
    1856:	fa842683          	lw	a3,-88(s0)
    185a:	97a6                	add	a5,a5,s1
    185c:	0007d603          	lhu	a2,0(a5)
    1860:	8536                	mv	a0,a3
    1862:	05000593          	li	a1,80
    1866:	fac42223          	sw	a2,-92(s0)
    186a:	86bfe0ef          	jal	ra,d4 <__umodsi3>
    186e:	fa042703          	lw	a4,-96(s0)
    1872:	0ff57793          	andi	a5,a0,255
    1876:	0a000593          	li	a1,160
    187a:	853a                	mv	a0,a4
    187c:	faf42423          	sw	a5,-88(s0)
    1880:	855fe0ef          	jal	ra,d4 <__umodsi3>
    1884:	fa842783          	lw	a5,-88(s0)
    1888:	fa442603          	lw	a2,-92(s0)
    188c:	0ff57513          	andi	a0,a0,255
    1890:	85be                	mv	a1,a5
    1892:	b49fe0ef          	jal	ra,3da <tft_draw_pixel>

    // //! draw vertical lines
    static uint8_t x_idx = 0;
    tft_draw_line(x_idx, 0, x_idx, 80, colors[rand8() % 19], 1);
    1896:	cb418293          	addi	t0,gp,-844 # 200000b0 <x_idx.3>
    189a:	0002c303          	lbu	t1,0(t0)
    189e:	01031613          	slli	a2,t1,0x10
    18a2:	8641                	srai	a2,a2,0x10
    18a4:	fa642223          	sw	t1,-92(s0)
    18a8:	fac42423          	sw	a2,-88(s0)
    18ac:	fa7fe0ef          	jal	ra,852 <rand8>
    18b0:	45cd                	li	a1,19
    18b2:	823fe0ef          	jal	ra,d4 <__umodsi3>
    18b6:	0ff57513          	andi	a0,a0,255
    18ba:	0506                	slli	a0,a0,0x1
    18bc:	fa842603          	lw	a2,-88(s0)
    18c0:	9526                	add	a0,a0,s1
    18c2:	00055703          	lhu	a4,0(a0)
    18c6:	4785                	li	a5,1
    18c8:	05000693          	li	a3,80
    18cc:	4581                	li	a1,0
    18ce:	8532                	mv	a0,a2
    18d0:	d87fe0ef          	jal	ra,656 <tft_draw_line>
    x_idx += 1;
    18d4:	fa442303          	lw	t1,-92(s0)
    18d8:	6389                	lui	t2,0x2
    18da:	65838713          	addi	a4,t2,1624 # 2658 <colors>
    18de:	0305                	addi	t1,t1,1
    18e0:	fae42223          	sw	a4,-92(s0)
    18e4:	0ff37313          	andi	t1,t1,255
    if (x_idx >= 160) x_idx = 0;
    18e8:	09f00793          	li	a5,159
    18ec:	cb418293          	addi	t0,gp,-844 # 200000b0 <x_idx.3>
    18f0:	2867ea63          	bltu	a5,t1,1b84 <main+0x9fa>
    x_idx += 1;
    18f4:	00628023          	sb	t1,0(t0)

    // //! draw horizontal lines
    static uint8_t y_idx = 0;
    tft_draw_line(0, y_idx, 180, y_idx, colors[rand8() % 19], 1);
    18f8:	cb518313          	addi	t1,gp,-843 # 200000b1 <y_idx.2>
    18fc:	00034483          	lbu	s1,0(t1)
    1900:	01049693          	slli	a3,s1,0x10
    1904:	86c1                	srai	a3,a3,0x10
    1906:	fad42423          	sw	a3,-88(s0)
    190a:	f49fe0ef          	jal	ra,852 <rand8>
    190e:	45cd                	li	a1,19
    1910:	fc4fe0ef          	jal	ra,d4 <__umodsi3>
    1914:	fa442783          	lw	a5,-92(s0)
    1918:	0ff57513          	andi	a0,a0,255
    191c:	0506                	slli	a0,a0,0x1
    191e:	953e                	add	a0,a0,a5
    1920:	fa842683          	lw	a3,-88(s0)
    1924:	00055703          	lhu	a4,0(a0)
    1928:	4785                	li	a5,1
    192a:	0b400613          	li	a2,180
    192e:	85b6                	mv	a1,a3
    1930:	4501                	li	a0,0
    1932:	d25fe0ef          	jal	ra,656 <tft_draw_line>
    y_idx += 1;
    1936:	0485                	addi	s1,s1,1
    1938:	0ff4f493          	andi	s1,s1,255
    if (y_idx >= 80) y_idx = 0;
    193c:	04f00793          	li	a5,79
    1940:	cb518313          	addi	t1,gp,-843 # 200000b1 <y_idx.2>
    1944:	2497e363          	bltu	a5,s1,1b8a <main+0xa00>
    y_idx += 1;
    1948:	00930023          	sb	s1,0(t1)

    //! draw random lines
    tft_draw_line(0, 0, 70, 70, RED, 5);
    194c:	6741                	lui	a4,0x10
    194e:	04600613          	li	a2,70
    1952:	4795                	li	a5,5
    1954:	80070713          	addi	a4,a4,-2048 # f800 <lib_i2c.c.d894f163+0x646d>
    1958:	04600693          	li	a3,70
    195c:	4581                	li	a1,0
    195e:	4501                	li	a0,0
    1960:	cf7fe0ef          	jal	ra,656 <tft_draw_line>

    tft_draw_line(rand8() % 160, rand8() % 80, rand8() % 160, rand8() % 80, colors[rand8() % 19], 1);
    1964:	eeffe0ef          	jal	ra,852 <rand8>
    1968:	f8a42023          	sw	a0,-128(s0)
    196c:	ee7fe0ef          	jal	ra,852 <rand8>
    1970:	84aa                	mv	s1,a0
    1972:	ee1fe0ef          	jal	ra,852 <rand8>
    1976:	f8a42223          	sw	a0,-124(s0)
    197a:	ed9fe0ef          	jal	ra,852 <rand8>
    197e:	faa42423          	sw	a0,-88(s0)
    1982:	ed1fe0ef          	jal	ra,852 <rand8>
    1986:	45cd                	li	a1,19
    1988:	f4cfe0ef          	jal	ra,d4 <__umodsi3>
    198c:	fa442703          	lw	a4,-92(s0)
    1990:	0ff57793          	andi	a5,a0,255
    1994:	0786                	slli	a5,a5,0x1
    1996:	97ba                	add	a5,a5,a4
    1998:	fa842683          	lw	a3,-88(s0)
    199c:	0007d703          	lhu	a4,0(a5)
    19a0:	05000593          	li	a1,80
    19a4:	8536                	mv	a0,a3
    19a6:	f8e42e23          	sw	a4,-100(s0)
    19aa:	f2afe0ef          	jal	ra,d4 <__umodsi3>
    19ae:	f8442603          	lw	a2,-124(s0)
    19b2:	0ff57693          	andi	a3,a0,255
    19b6:	0a000593          	li	a1,160
    19ba:	8532                	mv	a0,a2
    19bc:	fad42023          	sw	a3,-96(s0)
    19c0:	f14fe0ef          	jal	ra,d4 <__umodsi3>
    19c4:	0ff57613          	andi	a2,a0,255
    19c8:	05000593          	li	a1,80
    19cc:	8526                	mv	a0,s1
    19ce:	fac42423          	sw	a2,-88(s0)
    19d2:	f02fe0ef          	jal	ra,d4 <__umodsi3>
    19d6:	f8042303          	lw	t1,-128(s0)
    19da:	0ff57493          	andi	s1,a0,255
    19de:	0a000593          	li	a1,160
    19e2:	851a                	mv	a0,t1
    19e4:	ef0fe0ef          	jal	ra,d4 <__umodsi3>
    19e8:	f9c42703          	lw	a4,-100(s0)
    19ec:	fa042683          	lw	a3,-96(s0)
    19f0:	fa842603          	lw	a2,-88(s0)
    19f4:	4785                	li	a5,1
    19f6:	85a6                	mv	a1,s1
    19f8:	0ff57513          	andi	a0,a0,255
    19fc:	c5bfe0ef          	jal	ra,656 <tft_draw_line>

    // int16_t square_x[] = {10, 60, 60, 10};
    // int16_t square_y[] = {10, 10, 60, 60};
    // _draw_poly(square_x, square_y, 4, RED, 3);

    Point16_t triangle[] = {{10, 20}, {40, 60}, {80, 70}};
    1a00:	001407b7          	lui	a5,0x140
    1a04:	07a9                	addi	a5,a5,10
    1a06:	faf42e23          	sw	a5,-68(s0)
    1a0a:	003c07b7          	lui	a5,0x3c0
    1a0e:	02878793          	addi	a5,a5,40 # 3c0028 <lib_i2c.c.d894f163+0x3b6c95>
    1a12:	fcf42023          	sw	a5,-64(s0)
    1a16:	004607b7          	lui	a5,0x460
    1a1a:	05078793          	addi	a5,a5,80 # 460050 <lib_i2c.c.d894f163+0x456cbd>
    1a1e:	fcf42223          	sw	a5,-60(s0)
    // tft_draw_poly2(triangle, 3, RED, 3);

    tft_draw_solid_poly2(triangle, 3, RED, WHITE, 2);
    1a22:	fbc40793          	addi	a5,s0,-68
        int16_t y_min, y_max;
        int32_t x_step;  // Fixed-point slope (dx/dy)
        int32_t x_curr;  // Fixed-point current x
    } EdgeInfo;
    
    EdgeInfo edges[num_vertices];
    1a26:	f8242223          	sw	sp,-124(s0)
    1a2a:	faf42423          	sw	a5,-88(s0)
    1a2e:	fdc10113          	addi	sp,sp,-36
    1a32:	84be                	mv	s1,a5
    1a34:	4785                	li	a5,1
    1a36:	f8242e23          	sw	sp,-100(s0)
    1a3a:	faf42023          	sw	a5,-96(s0)
    uint8_t valid_edges = 0;
    1a3e:	4301                	li	t1,0
    
    for (uint16_t i = 0; i < num_vertices; i++) {
        const Point16_t* p0 = &vertices[i];
        const Point16_t* p1 = &vertices[(i + 1) % num_vertices];
    1a40:	fa042503          	lw	a0,-96(s0)
    1a44:	458d                	li	a1,3
    1a46:	f8642023          	sw	t1,-128(s0)
    1a4a:	eaefe0ef          	jal	ra,f8 <__modsi3>
    1a4e:	00251593          	slli	a1,a0,0x2
    1a52:	fbc40793          	addi	a5,s0,-68
    1a56:	95be                	add	a1,a1,a5
        
        if (p0->y == p1->y) continue; // Skip horizontal edges
    1a58:	00249683          	lh	a3,2(s1)
    1a5c:	00259703          	lh	a4,2(a1)
    1a60:	f8042303          	lw	t1,-128(s0)
    1a64:	06e68863          	beq	a3,a4,1ad4 <main+0x94a>
    1a68:	00049503          	lh	a0,0(s1)
    1a6c:	00059583          	lh	a1,0(a1)
    1a70:	00131793          	slli	a5,t1,0x1
        
        // Order vertices top to bottom
        int16_t y_min, y_max, x_start;
        if (p0->y < p1->y) {
    1a74:	10e6de63          	bge	a3,a4,1b90 <main+0xa06>
    1a78:	f9c42603          	lw	a2,-100(s0)
    1a7c:	979a                	add	a5,a5,t1
    1a7e:	078a                	slli	a5,a5,0x2
    1a80:	97b2                	add	a5,a5,a2
            y_min = p0->y;
            y_max = p1->y;
            x_start = p0->x;
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    1a82:	01051613          	slli	a2,a0,0x10
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    1a86:	40a58533          	sub	a0,a1,a0
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    1a8a:	c790                	sw	a2,8(a5)
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    1a8c:	40d705b3          	sub	a1,a4,a3
    1a90:	0542                	slli	a0,a0,0x10
    1a92:	f6642a23          	sw	t1,-140(s0)
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    1a96:	f6f42c23          	sw	a5,-136(s0)
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    1a9a:	f6d42e23          	sw	a3,-132(s0)
    1a9e:	f8e42023          	sw	a4,-128(s0)
    1aa2:	dfefe0ef          	jal	ra,a0 <__divsi3>
    1aa6:	f7842783          	lw	a5,-136(s0)
    1aaa:	f8042703          	lw	a4,-128(s0)
    1aae:	f7c42683          	lw	a3,-132(s0)
    1ab2:	f7442303          	lw	t1,-140(s0)
    1ab6:	c3c8                	sw	a0,4(a5)
    1ab8:	00131793          	slli	a5,t1,0x1
    1abc:	f9c42603          	lw	a2,-100(s0)
    1ac0:	979a                	add	a5,a5,t1
    1ac2:	078a                	slli	a5,a5,0x2
    1ac4:	97b2                	add	a5,a5,a2
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
        }
        
        edges[valid_edges].y_min = y_min;
        edges[valid_edges].y_max = y_max;
        valid_edges++;
    1ac6:	0305                	addi	t1,t1,1
        edges[valid_edges].y_min = y_min;
    1ac8:	00d79023          	sh	a3,0(a5)
        edges[valid_edges].y_max = y_max;
    1acc:	00e79123          	sh	a4,2(a5)
        valid_edges++;
    1ad0:	0ff37313          	andi	t1,t1,255
    for (uint16_t i = 0; i < num_vertices; i++) {
    1ad4:	fa042783          	lw	a5,-96(s0)
    1ad8:	4711                	li	a4,4
    1ada:	0491                	addi	s1,s1,4
    1adc:	0785                	addi	a5,a5,1
    1ade:	faf42023          	sw	a5,-96(s0)
    1ae2:	f4e79fe3          	bne	a5,a4,1a40 <main+0x8b6>
    1ae6:	46d1                	li	a3,20
    1ae8:	f9c42783          	lw	a5,-100(s0)
    for (int16_t y = min_y; y <= max_y; y++) {
        int16_t intersections[20];
        uint8_t num_intersections = 0;

        // Find active edges
        for (uint8_t i = 0; i < valid_edges; i++) {
    1aec:	4701                	li	a4,0
        uint8_t num_intersections = 0;
    1aee:	4481                	li	s1,0
            if (y >= edges[i].y_min && y < edges[i].y_max) {
                // Calculate x intersection (with rounding)
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    1af0:	65a1                	lui	a1,0x8
    1af2:	a205                	j	1c12 <main+0xa88>
            _reset_timers(BTN_UP, model);        // First Release

        } else {
            // Long press detection
            uint32_t press_duration = now - model->press_time;
    1af4:	fb842783          	lw	a5,-72(s0)
    1af8:	f8c42703          	lw	a4,-116(s0)
    1afc:	40e78733          	sub	a4,a5,a4
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1b00:	6785                	lui	a5,0x1
    1b02:	fa078793          	addi	a5,a5,-96 # fa0 <sprintf+0xa>
    1b06:	c6e7ffe3          	bgeu	a5,a4,1784 <main+0x5fa>
			printf("Long Press\n"); break;
    1b0a:	6509                	lui	a0,0x2
    1b0c:	3e050513          	addi	a0,a0,992 # 23e0 <I2C1_ER_IRQHandler+0x128>
    1b10:	da6ff0ef          	jal	ra,10b6 <puts>
    1b14:	b985                	j	1784 <main+0x5fa>
            }
        }
        break;

    case BTN_UP: {
        uint32_t release_duration = now - model->release_time;
    1b16:	fb842703          	lw	a4,-72(s0)
    1b1a:	fac42683          	lw	a3,-84(s0)
    1b1e:	8f15                	sub	a4,a4,a3

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    1b20:	e38d                	bnez	a5,1b42 <main+0x9b8>
    1b22:	09f00793          	li	a5,159
    1b26:	00e7ee63          	bltu	a5,a4,1b42 <main+0x9b8>
    model->debounce_time = millis();
    1b2a:	fb442783          	lw	a5,-76(s0)
    1b2e:	439c                	lw	a5,0(a5)
    1b30:	faf42c23          	sw	a5,-72(s0)
    model->release_time = millis();
    1b34:	fb442783          	lw	a5,-76(s0)
    1b38:	439c                	lw	a5,0(a5)
    1b3a:	faf42623          	sw	a5,-84(s0)
    model->btn_state = newState;
    1b3e:	4789                	li	a5,2
    1b40:	bcc1                	j	1610 <main+0x486>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    1b42:	4685                	li	a3,1
    1b44:	0a000793          	li	a5,160
    1b48:	fad42823          	sw	a3,-80(s0)
    1b4c:	c2e7fce3          	bgeu	a5,a4,1784 <main+0x5fa>
			printf("Single Click\n");
    1b50:	6509                	lui	a0,0x2
    1b52:	3ec50513          	addi	a0,a0,1004 # 23ec <I2C1_ER_IRQHandler+0x134>
			printf("Double Click\n");
    1b56:	d60ff0ef          	jal	ra,10b6 <puts>
    model->debounce_time = millis();
    1b5a:	fb442783          	lw	a5,-76(s0)
    1b5e:	439c                	lw	a5,0(a5)
    1b60:	faf42c23          	sw	a5,-72(s0)
    model->release_time = millis();
    1b64:	fb442783          	lw	a5,-76(s0)
    1b68:	439c                	lw	a5,0(a5)
    1b6a:	faf42623          	sw	a5,-84(s0)
    model->btn_state = newState;
    1b6e:	478d                	li	a5,3
    1b70:	b445                	j	1610 <main+0x486>
        break;
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
    1b72:	c00789e3          	beqz	a5,1784 <main+0x5fa>
    1b76:	6789                	lui	a5,0x2
    1b78:	3fc78513          	addi	a0,a5,1020 # 23fc <I2C1_ER_IRQHandler+0x144>
    1b7c:	bfe9                	j	1b56 <main+0x9cc>
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1b7e:	fae42c23          	sw	a4,-72(s0)
    1b82:	b109                	j	1784 <main+0x5fa>
    if (x_idx >= 160) x_idx = 0;
    1b84:	00028023          	sb	zero,0(t0)
    1b88:	bb85                	j	18f8 <main+0x76e>
    if (y_idx >= 80) y_idx = 0;
    1b8a:	00030023          	sb	zero,0(t1)
    1b8e:	bb7d                	j	194c <main+0x7c2>
    1b90:	f9c42603          	lw	a2,-100(s0)
    1b94:	979a                	add	a5,a5,t1
    1b96:	078a                	slli	a5,a5,0x2
    1b98:	97b2                	add	a5,a5,a2
            edges[valid_edges].x_curr = x_start << 16;
    1b9a:	01059293          	slli	t0,a1,0x10
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    1b9e:	8d0d                	sub	a0,a0,a1
            edges[valid_edges].x_curr = x_start << 16;
    1ba0:	0057a423          	sw	t0,8(a5)
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    1ba4:	40e685b3          	sub	a1,a3,a4
    1ba8:	0542                	slli	a0,a0,0x10
    1baa:	f6d42a23          	sw	a3,-140(s0)
    1bae:	f6642c23          	sw	t1,-136(s0)
            edges[valid_edges].x_curr = x_start << 16;
    1bb2:	f6f42e23          	sw	a5,-132(s0)
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    1bb6:	f8e42023          	sw	a4,-128(s0)
    1bba:	ce6fe0ef          	jal	ra,a0 <__divsi3>
    1bbe:	f8042703          	lw	a4,-128(s0)
    1bc2:	f7c42783          	lw	a5,-132(s0)
    1bc6:	f7442603          	lw	a2,-140(s0)
    1bca:	86ba                	mv	a3,a4
    1bcc:	f7842303          	lw	t1,-136(s0)
    1bd0:	c3c8                	sw	a0,4(a5)
    1bd2:	8732                	mv	a4,a2
    1bd4:	b5d5                	j	1ab8 <main+0x92e>
            if (y >= edges[i].y_min && y < edges[i].y_max) {
    1bd6:	00079603          	lh	a2,0(a5)
    1bda:	02c6c863          	blt	a3,a2,1c0a <main+0xa80>
    1bde:	00279603          	lh	a2,2(a5)
    1be2:	02c6d463          	bge	a3,a2,1c0a <main+0xa80>
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    1be6:	0087a283          	lw	t0,8(a5)
    1bea:	00148513          	addi	a0,s1,1
    1bee:	ff440613          	addi	a2,s0,-12
    1bf2:	0486                	slli	s1,s1,0x1
    1bf4:	94b2                	add	s1,s1,a2
    1bf6:	00b28633          	add	a2,t0,a1
    1bfa:	8641                	srai	a2,a2,0x10
    1bfc:	fcc49c23          	sh	a2,-40(s1)
                // Update x for next scanline
                edges[i].x_curr += edges[i].x_step;
    1c00:	43d0                	lw	a2,4(a5)
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    1c02:	0ff57493          	andi	s1,a0,255
                edges[i].x_curr += edges[i].x_step;
    1c06:	9616                	add	a2,a2,t0
    1c08:	c790                	sw	a2,8(a5)
        for (uint8_t i = 0; i < valid_edges; i++) {
    1c0a:	0705                	addi	a4,a4,1
    1c0c:	0ff77713          	andi	a4,a4,255
    1c10:	07b1                	addi	a5,a5,12
    1c12:	fc6712e3          	bne	a4,t1,1bd6 <main+0xa4c>
    1c16:	fcc40293          	addi	t0,s0,-52
    1c1a:	8616                	mv	a2,t0
            }
        }

        // Insertion sort (from previous optimization)
        for (uint8_t i = 1; i < num_intersections; i++) {
    1c1c:	4705                	li	a4,1
            int16_t key = intersections[i];
            int8_t j = i - 1;
            while (j >= 0 && intersections[j] > key) {
    1c1e:	50fd                	li	ra,-1
        for (uint8_t i = 1; i < num_intersections; i++) {
    1c20:	1c976263          	bltu	a4,s1,1de4 <main+0xc5a>
    1c24:	00148393          	addi	t2,s1,1
    1c28:	0386                	slli	t2,t2,0x1
    1c2a:	8085                	srli	s1,s1,0x1
    1c2c:	1fc3f393          	andi	t2,t2,508
    1c30:	048a                	slli	s1,s1,0x2
    1c32:	9396                	add	t2,t2,t0
    1c34:	9496                	add	s1,s1,t0
            }
            intersections[j + 1] = key;
        }

        // Fill between pairs
        for (uint8_t i = 0; i < num_intersections; i += 2) {
    1c36:	1e539863          	bne	t2,t0,1e26 <main+0xc9c>
    1c3a:	0685                	addi	a3,a3,1
    1c3c:	01069713          	slli	a4,a3,0x10
    1c40:	8341                	srli	a4,a4,0x10
    1c42:	06c2                	slli	a3,a3,0x10
    for (int16_t y = min_y; y <= max_y; y++) {
    1c44:	04700793          	li	a5,71
    1c48:	86c1                	srai	a3,a3,0x10
    1c4a:	e8f71fe3          	bne	a4,a5,1ae8 <main+0x95e>
    1c4e:	4485                	li	s1,1
        Point16_t p1 = vertices[(i + 1) % num_vertices]; // Wrap around to connect last vertex to first
    1c50:	458d                	li	a1,3
    1c52:	8526                	mv	a0,s1
    1c54:	ca4fe0ef          	jal	ra,f8 <__modsi3>
    1c58:	fbc40793          	addi	a5,s0,-68
    1c5c:	050a                	slli	a0,a0,0x2
    1c5e:	953e                	add	a0,a0,a5
        tft_draw_line(p0.x, p0.y, p1.x, p1.y, color, width); // Draw edge with specified width
    1c60:	00251683          	lh	a3,2(a0)
    1c64:	00051603          	lh	a2,0(a0)
    1c68:	fa842583          	lw	a1,-88(s0)
    1c6c:	fa842503          	lw	a0,-88(s0)
    1c70:	6741                	lui	a4,0x10
    1c72:	00259583          	lh	a1,2(a1) # 8002 <ch32_mess.c.38d68e6d+0x3a5f>
    1c76:	00051503          	lh	a0,0(a0)
    1c7a:	4789                	li	a5,2
    1c7c:	177d                	addi	a4,a4,-1
    1c7e:	9d9fe0ef          	jal	ra,656 <tft_draw_line>
    for (uint16_t i = 0; i < num_vertices; i++) {
    1c82:	fa842783          	lw	a5,-88(s0)
    1c86:	0485                	addi	s1,s1,1
    1c88:	0791                	addi	a5,a5,4
    1c8a:	faf42423          	sw	a5,-88(s0)
    1c8e:	4791                	li	a5,4
    1c90:	fcf490e3          	bne	s1,a5,1c50 <main+0xac6>
    // tft_draw_ring((Point16_t){ 50, 50 }, 20, 0x07E0, 5); // Green ring with radius = 30 and width = 5


    // draw rectangles
    static uint8_t rect_idx = 0;
    tft_draw_rect(rect_idx, rect_idx, 160 - (rect_idx << 1), 80 - (rect_idx << 1), colors[rand8() % 19]);
    1c94:	ca818793          	addi	a5,gp,-856 # 200000a4 <rect_idx.1>
    1c98:	0007c483          	lbu	s1,0(a5)
    1c9c:	f8442103          	lw	sp,-124(s0)
    1ca0:	01049313          	slli	t1,s1,0x10
    1ca4:	00149713          	slli	a4,s1,0x1
    1ca8:	01035313          	srli	t1,t1,0x10
    1cac:	fa642023          	sw	t1,-96(s0)
    1cb0:	fae42423          	sw	a4,-88(s0)
    1cb4:	b9ffe0ef          	jal	ra,852 <rand8>
    1cb8:	45cd                	li	a1,19
    1cba:	c1afe0ef          	jal	ra,d4 <__umodsi3>
    1cbe:	fa442783          	lw	a5,-92(s0)
    1cc2:	fa842703          	lw	a4,-88(s0)
    1cc6:	0ff57513          	andi	a0,a0,255
    1cca:	0506                	slli	a0,a0,0x1
    1ccc:	953e                	add	a0,a0,a5
    1cce:	fa042303          	lw	t1,-96(s0)
    1cd2:	05000693          	li	a3,80
    1cd6:	0a000613          	li	a2,160
    1cda:	8e99                	sub	a3,a3,a4
    1cdc:	8e19                	sub	a2,a2,a4
    1cde:	00055703          	lhu	a4,0(a0)
    1ce2:	06c2                	slli	a3,a3,0x10
    1ce4:	0642                	slli	a2,a2,0x10
    1ce6:	82c1                	srli	a3,a3,0x10
    1ce8:	8241                	srli	a2,a2,0x10
    1cea:	859a                	mv	a1,t1
    1cec:	851a                	mv	a0,t1
    1cee:	af5fe0ef          	jal	ra,7e2 <tft_draw_rect>
    rect_idx += 1;
    1cf2:	0485                	addi	s1,s1,1
    1cf4:	0ff4f493          	andi	s1,s1,255
    if (rect_idx >= 40) rect_idx = 0;
    1cf8:	02700713          	li	a4,39
    1cfc:	ca818793          	addi	a5,gp,-856 # 200000a4 <rect_idx.1>
    1d00:	16976463          	bltu	a4,s1,1e68 <main+0xcde>
    rect_idx += 1;
    1d04:	00978023          	sb	s1,0(a5)

    // draw random rectangles
    tft_draw_rect(rand8() % 140, rand8() % 60, 20, 20, colors[rand8() % 19]);
    1d08:	b4bfe0ef          	jal	ra,852 <rand8>
    1d0c:	faa42023          	sw	a0,-96(s0)
    1d10:	b43fe0ef          	jal	ra,852 <rand8>
    1d14:	84aa                	mv	s1,a0
    1d16:	b3dfe0ef          	jal	ra,852 <rand8>
    1d1a:	45cd                	li	a1,19
    1d1c:	bb8fe0ef          	jal	ra,d4 <__umodsi3>
    1d20:	fa442703          	lw	a4,-92(s0)
    1d24:	0ff57793          	andi	a5,a0,255
    1d28:	0786                	slli	a5,a5,0x1
    1d2a:	97ba                	add	a5,a5,a4
    1d2c:	0007d703          	lhu	a4,0(a5)
    1d30:	03c00593          	li	a1,60
    1d34:	8526                	mv	a0,s1
    1d36:	fae42423          	sw	a4,-88(s0)
    1d3a:	b9afe0ef          	jal	ra,d4 <__umodsi3>
    1d3e:	fa042683          	lw	a3,-96(s0)
    1d42:	0ff57493          	andi	s1,a0,255
    1d46:	08c00593          	li	a1,140
    1d4a:	8536                	mv	a0,a3
    1d4c:	b88fe0ef          	jal	ra,d4 <__umodsi3>
    1d50:	fa842703          	lw	a4,-88(s0)
    1d54:	4651                	li	a2,20
    1d56:	46d1                	li	a3,20
    1d58:	85a6                	mv	a1,s1
    1d5a:	0ff57513          	andi	a0,a0,255
    1d5e:	a85fe0ef          	jal	ra,7e2 <tft_draw_rect>

    // draw filled rectangles
    tft_fill_rect(rand8() % 140, rand8() % 60, 20, 20, colors[rand8() % 19]);
    1d62:	af1fe0ef          	jal	ra,852 <rand8>
    1d66:	faa42023          	sw	a0,-96(s0)
    1d6a:	ae9fe0ef          	jal	ra,852 <rand8>
    1d6e:	84aa                	mv	s1,a0
    1d70:	ae3fe0ef          	jal	ra,852 <rand8>
    1d74:	45cd                	li	a1,19
    1d76:	b5efe0ef          	jal	ra,d4 <__umodsi3>
    1d7a:	fa442703          	lw	a4,-92(s0)
    1d7e:	0ff57793          	andi	a5,a0,255
    1d82:	0786                	slli	a5,a5,0x1
    1d84:	97ba                	add	a5,a5,a4
    1d86:	0007d703          	lhu	a4,0(a5)
    1d8a:	03c00593          	li	a1,60
    1d8e:	8526                	mv	a0,s1
    1d90:	fae42423          	sw	a4,-88(s0)
    1d94:	b40fe0ef          	jal	ra,d4 <__umodsi3>
    1d98:	fa042683          	lw	a3,-96(s0)
    1d9c:	0ff57493          	andi	s1,a0,255
    1da0:	08c00593          	li	a1,140
    1da4:	8536                	mv	a0,a3
    1da6:	b2efe0ef          	jal	ra,d4 <__umodsi3>
    1daa:	fa842703          	lw	a4,-88(s0)
    1dae:	46d1                	li	a3,20
    1db0:	4651                	li	a2,20
    1db2:	85a6                	mv	a1,s1
    1db4:	0ff57513          	andi	a0,a0,255
    1db8:	f72fe0ef          	jal	ra,52a <tft_fill_rect>
	handler();
	return micros() - now;
    1dbc:	e000f7b7          	lui	a5,0xe000f
    1dc0:	4788                	lw	a0,8(a5)
    1dc2:	03000593          	li	a1,48
    1dc6:	ae2fe0ef          	jal	ra,a8 <__hidden___udivsi3>
			// uint32_t runtime_i2c = SysTick_getRunTime(ssd1306_draw_test);
			// sprintf(str_output, "I2C runtime: %lu us", runtime_i2c);
			// ssd1306_print_str_at(str_output, 0, 0);

			uint32_t runtime_tft = SysTick_getRunTime(mod_st7735_test2);
			printf("ST7735 runtime: %lu us\n", runtime_tft);
    1dca:	f8842783          	lw	a5,-120(s0)
    1dce:	40f505b3          	sub	a1,a0,a5
    1dd2:	6509                	lui	a0,0x2
    1dd4:	41c50513          	addi	a0,a0,1052 # 241c <I2C1_ER_IRQHandler+0x164>
    1dd8:	956ff0ef          	jal	ra,f2e <printf>
		uint32_t now = millis();
    1ddc:	f9042483          	lw	s1,-112(s0)
    1de0:	fd2ff06f          	j	15b2 <main+0x428>
    1de4:	fff70793          	addi	a5,a4,-1 # ffff <lib_i2c.c.d894f163+0x6c6c>
            int16_t key = intersections[i];
    1de8:	00261503          	lh	a0,2(a2) # 40020002 <_eusrstack+0x2001f802>
    1dec:	07e2                	slli	a5,a5,0x18
    1dee:	87e1                	srai	a5,a5,0x18
    1df0:	85b2                	mv	a1,a2
            while (j >= 0 && intersections[j] > key) {
    1df2:	00059383          	lh	t2,0(a1)
    1df6:	00755a63          	bge	a0,t2,1e0a <main+0xc80>
    1dfa:	17fd                	addi	a5,a5,-1
    1dfc:	07e2                	slli	a5,a5,0x18
                intersections[j + 1] = intersections[j];
    1dfe:	00759123          	sh	t2,2(a1)
    1e02:	87e1                	srai	a5,a5,0x18
            while (j >= 0 && intersections[j] > key) {
    1e04:	15f9                	addi	a1,a1,-2
    1e06:	fe1796e3          	bne	a5,ra,1df2 <main+0xc68>
            intersections[j + 1] = key;
    1e0a:	0785                	addi	a5,a5,1
    1e0c:	07e2                	slli	a5,a5,0x18
    1e0e:	87e1                	srai	a5,a5,0x18
    1e10:	0786                	slli	a5,a5,0x1
    1e12:	ff440593          	addi	a1,s0,-12
    1e16:	97ae                	add	a5,a5,a1
        for (uint8_t i = 1; i < num_intersections; i++) {
    1e18:	0705                	addi	a4,a4,1
            intersections[j + 1] = key;
    1e1a:	fca79c23          	sh	a0,-40(a5) # e000efd8 <_eusrstack+0xc000e7d8>
        for (uint8_t i = 1; i < num_intersections; i++) {
    1e1e:	0ff77713          	andi	a4,a4,255
    1e22:	0609                	addi	a2,a2,2
    1e24:	bbf5                	j	1c20 <main+0xa96>
            if (i + 1 >= num_intersections) break;
    1e26:	e0548ae3          	beq	s1,t0,1c3a <main+0xab0>
            int16_t x0 = intersections[i];
    1e2a:	00029503          	lh	a0,0(t0)
            int16_t x1 = intersections[i + 1];
    1e2e:	00229603          	lh	a2,2(t0)
            if (x1 > x0) {
    1e32:	02c55963          	bge	a0,a2,1e64 <main+0xcda>
                tft_draw_line(x0, y, x1, y, fill_color, 1);
    1e36:	6741                	lui	a4,0x10
    1e38:	85b6                	mv	a1,a3
    1e3a:	4785                	li	a5,1
    1e3c:	80070713          	addi	a4,a4,-2048 # f800 <lib_i2c.c.d894f163+0x646d>
    1e40:	f6742c23          	sw	t2,-136(s0)
    1e44:	f6642e23          	sw	t1,-132(s0)
    1e48:	f8542023          	sw	t0,-128(s0)
    1e4c:	fad42023          	sw	a3,-96(s0)
    1e50:	807fe0ef          	jal	ra,656 <tft_draw_line>
    1e54:	f7842383          	lw	t2,-136(s0)
    1e58:	f7c42303          	lw	t1,-132(s0)
    1e5c:	f8042283          	lw	t0,-128(s0)
    1e60:	fa042683          	lw	a3,-96(s0)
    1e64:	0291                	addi	t0,t0,4
    1e66:	bbc1                	j	1c36 <main+0xaac>
    if (rect_idx >= 40) rect_idx = 0;
    1e68:	00078023          	sb	zero,0(a5)
    1e6c:	bd71                	j	1d08 <main+0xb7e>

00001e6e <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    1e6e:	fdc10113          	addi	sp,sp,-36
    1e72:	ce22                	sw	s0,28(sp)
    1e74:	d006                	sw	ra,32(sp)
    1e76:	cc26                	sw	s1,24(sp)
    1e78:	842a                	mv	s0,a0
	if( tween <= 0 ) return hexa;
    1e7a:	0ac05f63          	blez	a2,1f38 <TweenHexColors+0xca>
	if( tween >= 255 ) return hexb;
    1e7e:	0fe00793          	li	a5,254
    1e82:	84ae                	mv	s1,a1
    1e84:	0cc7c163          	blt	a5,a2,1f46 <TweenHexColors+0xd8>
	int32_t aamt = 255-tween;
    1e88:	0ff00293          	li	t0,255
    1e8c:	40c282b3          	sub	t0,t0,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e90:	8596                	mv	a1,t0
    1e92:	0ff57513          	andi	a0,a0,255
    1e96:	c216                	sw	t0,4(sp)
	int32_t aamt = 255-tween;
    1e98:	c032                	sw	a2,0(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e9a:	1fffe097          	auipc	ra,0x1fffe
    1e9e:	1ae080e7          	jalr	430(ra) # 20000048 <FastMultiply>
    1ea2:	4602                	lw	a2,0(sp)
    1ea4:	ca2a                	sw	a0,20(sp)
    1ea6:	0ff4f513          	andi	a0,s1,255
    1eaa:	85b2                	mv	a1,a2
    1eac:	1fffe097          	auipc	ra,0x1fffe
    1eb0:	19c080e7          	jalr	412(ra) # 20000048 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1eb4:	4292                	lw	t0,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1eb6:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    1eb8:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1ebc:	8596                	mv	a1,t0
    1ebe:	0ff57513          	andi	a0,a0,255
    1ec2:	c616                	sw	t0,12(sp)
    1ec4:	1fffe097          	auipc	ra,0x1fffe
    1ec8:	184080e7          	jalr	388(ra) # 20000048 <FastMultiply>
    1ecc:	4602                	lw	a2,0(sp)
    1ece:	c42a                	sw	a0,8(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    1ed0:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1ed4:	85b2                	mv	a1,a2
    1ed6:	0ff57513          	andi	a0,a0,255
    1eda:	c232                	sw	a2,4(sp)
    1edc:	1fffe097          	auipc	ra,0x1fffe
    1ee0:	16c080e7          	jalr	364(ra) # 20000048 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1ee4:	42b2                	lw	t0,12(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1ee6:	c02a                	sw	a0,0(sp)
	int32_t hag = (hexa>>16) & 0xff;
    1ee8:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1eec:	8596                	mv	a1,t0
    1eee:	0ff57513          	andi	a0,a0,255
    1ef2:	1fffe097          	auipc	ra,0x1fffe
    1ef6:	156080e7          	jalr	342(ra) # 20000048 <FastMultiply>
    1efa:	4612                	lw	a2,4(sp)
    1efc:	842a                	mv	s0,a0
	int32_t hbg = (hexb>>16) & 0xff;
    1efe:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1f02:	85b2                	mv	a1,a2
    1f04:	0ff57513          	andi	a0,a0,255
    1f08:	1fffe097          	auipc	ra,0x1fffe
    1f0c:	140080e7          	jalr	320(ra) # 20000048 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1f10:	4342                	lw	t1,16(sp)
    1f12:	47d2                	lw	a5,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1f14:	4682                	lw	a3,0(sp)
    1f16:	4722                	lw	a4,8(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1f18:	979a                	add	a5,a5,t1
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1f1a:	942a                	add	s0,s0,a0
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1f1c:	9736                	add	a4,a4,a3
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1f1e:	08078793          	addi	a5,a5,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1f22:	08070713          	addi	a4,a4,128
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1f26:	08040413          	addi	s0,s0,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1f2a:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    1f2c:	f0077713          	andi	a4,a4,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1f30:	8021                	srli	s0,s0,0x8
	return b | (r<<8) | (g<<16);
    1f32:	8fd9                	or	a5,a5,a4
    1f34:	0442                	slli	s0,s0,0x10
    1f36:	8c5d                	or	s0,s0,a5
}
    1f38:	5082                	lw	ra,32(sp)
    1f3a:	8522                	mv	a0,s0
    1f3c:	4472                	lw	s0,28(sp)
    1f3e:	44e2                	lw	s1,24(sp)
    1f40:	02410113          	addi	sp,sp,36
    1f44:	8082                	ret
	if( tween >= 255 ) return hexb;
    1f46:	842e                	mv	s0,a1
    1f48:	bfc5                	j	1f38 <TweenHexColors+0xca>

00001f4a <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1f4a:	1111                	addi	sp,sp,-28
    1f4c:	c826                	sw	s1,16(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    1f4e:	c9c1a483          	lw	s1,-868(gp) # 20000098 <WS2812LEDs>
	int place = WS2812LEDPlace;
    1f52:	c9818713          	addi	a4,gp,-872 # 20000094 <WS2812LEDPlace>
    1f56:	4318                	lw	a4,0(a4)
    1f58:	c9818613          	addi	a2,gp,-872 # 20000094 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1f5c:	ca22                	sw	s0,20(sp)
    1f5e:	cc06                	sw	ra,24(sp)
    1f60:	87aa                	mv	a5,a0
    1f62:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
    1f64:	03050693          	addi	a3,a0,48
    1f68:	c032                	sw	a2,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    1f6a:	04074a63          	bltz	a4,1fbe <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    1f6e:	04f68a63          	beq	a3,a5,1fc2 <WS2812FillBuffSec.constprop.0+0x78>
	{
		if( place >= ledcount )
    1f72:	04974f63          	blt	a4,s1,1fd0 <WS2812FillBuffSec.constprop.0+0x86>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    1f76:	40f68633          	sub	a2,a3,a5
    1f7a:	4581                	li	a1,0
    1f7c:	853e                	mv	a0,a5
    1f7e:	c23a                	sw	a4,4(sp)
    1f80:	838ff0ef          	jal	ra,fb8 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    1f84:	4712                	lw	a4,4(sp)
    1f86:	cc15                	beqz	s0,1fc2 <WS2812FillBuffSec.constprop.0+0x78>
			{
				if( place == ledcount )
    1f88:	00e49a63          	bne	s1,a4,1f9c <WS2812FillBuffSec.constprop.0+0x52>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    1f8c:	400206b7          	lui	a3,0x40020
    1f90:	5a9c                	lw	a5,48(a3)
    1f92:	fdf7f793          	andi	a5,a5,-33
    1f96:	da9c                	sw	a5,48(a3)
					WS2812BLEDInUse = 0;
    1f98:	c801aa23          	sw	zero,-876(gp) # 20000090 <WS2812BLEDInUse>
				}
				place++;
    1f9c:	0705                	addi	a4,a4,1
    1f9e:	a015                	j	1fc2 <WS2812FillBuffSec.constprop.0+0x78>
		(*ptr++) = 0;
    1fa0:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
    1fa4:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    1fa8:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    1fac:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    1fb0:	00079423          	sh	zero,8(a5)
		place++;
    1fb4:	0705                	addi	a4,a4,1
    1fb6:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
    1fb8:	fe079f23          	sh	zero,-2(a5)
    1fbc:	b77d                	j	1f6a <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
    1fbe:	fef691e3          	bne	a3,a5,1fa0 <WS2812FillBuffSec.constprop.0+0x56>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
    1fc2:	4782                	lw	a5,0(sp)
}
    1fc4:	40e2                	lw	ra,24(sp)
    1fc6:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
    1fc8:	c398                	sw	a4,0(a5)
}
    1fca:	44c2                	lw	s1,16(sp)
    1fcc:	0171                	addi	sp,sp,28
    1fce:	8082                	ret
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    1fd0:	c4418613          	addi	a2,gp,-956 # 20000040 <tween>
    1fd4:	4210                	lw	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1fd6:	00170293          	addi	t0,a4,1
    1fda:	9732                	add	a4,a4,a2
    1fdc:	0ff00613          	li	a2,255
    1fe0:	00e04363          	bgtz	a4,1fe6 <WS2812FillBuffSec.constprop.0+0x9c>
    1fe4:	4601                	li	a2,0
    1fe6:	007f45b7          	lui	a1,0x7f4
    1fea:	650d                	lui	a0,0x3
    1fec:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.d894f163+0x7eacad>
    1ff0:	0ff50513          	addi	a0,a0,255 # 30ff <_data_lma+0x563>
    1ff4:	c616                	sw	t0,12(sp)
    1ff6:	c43e                	sw	a5,8(sp)
    1ff8:	c236                	sw	a3,4(sp)
    1ffa:	3d95                	jal	1e6e <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1ffc:	00b55613          	srli	a2,a0,0xb
    2000:	6709                	lui	a4,0x2
    2002:	63870713          	addi	a4,a4,1592 # 2638 <bitquartets.8>
    2006:	8a79                	andi	a2,a2,30
    2008:	963a                	add	a2,a2,a4
    200a:	47a2                	lw	a5,8(sp)
    200c:	00065603          	lhu	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    2010:	42b2                	lw	t0,12(sp)
    2012:	4692                	lw	a3,4(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    2014:	00c79023          	sh	a2,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    2018:	00755613          	srli	a2,a0,0x7
    201c:	8a79                	andi	a2,a2,30
    201e:	963a                	add	a2,a2,a4
    2020:	00065603          	lhu	a2,0(a2)
		ptr += 6;
    2024:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    2026:	fec79b23          	sh	a2,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    202a:	00355613          	srli	a2,a0,0x3
    202e:	8a79                	andi	a2,a2,30
    2030:	963a                	add	a2,a2,a4
    2032:	00065603          	lhu	a2,0(a2)
    2036:	fec79c23          	sh	a2,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    203a:	00f57613          	andi	a2,a0,15
    203e:	0606                	slli	a2,a2,0x1
    2040:	963a                	add	a2,a2,a4
    2042:	00065603          	lhu	a2,0(a2)
    2046:	fec79d23          	sh	a2,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    204a:	01355613          	srli	a2,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    204e:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    2050:	8a79                	andi	a2,a2,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    2052:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    2054:	963a                	add	a2,a2,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    2056:	953a                	add	a0,a0,a4
    2058:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    205c:	00065603          	lhu	a2,0(a2)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    2060:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    2064:	fec79e23          	sh	a2,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    2068:	8716                	mv	a4,t0
    206a:	b711                	j	1f6e <WS2812FillBuffSec.constprop.0+0x24>

0000206c <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    206c:	fcc10113          	addi	sp,sp,-52
    2070:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    2072:	400207b7          	lui	a5,0x40020
    2076:	439c                	lw	a5,0(a5)
{
    2078:	d022                	sw	s0,32(sp)
    207a:	ce26                	sw	s1,28(sp)
    207c:	d806                	sw	ra,48(sp)
    207e:	d616                	sw	t0,44(sp)
    2080:	d41a                	sw	t1,40(sp)
    2082:	d21e                	sw	t2,36(sp)
    2084:	cc2a                	sw	a0,24(sp)
    2086:	ca2e                	sw	a1,20(sp)
    2088:	c832                	sw	a2,16(sp)
    208a:	c636                	sw	a3,12(sp)
    208c:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    208e:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    2090:	40020437          	lui	s0,0x40020
    2094:	10000493          	li	s1,256
    2098:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    209a:	4782                	lw	a5,0(sp)
    209c:	4007f793          	andi	a5,a5,1024
    20a0:	c789                	beqz	a5,20aa <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    20a2:	4585                	li	a1,1
    20a4:	cb818513          	addi	a0,gp,-840 # 200000b4 <WS2812dmabuff>
    20a8:	354d                	jal	1f4a <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    20aa:	4782                	lw	a5,0(sp)
    20ac:	2007f793          	andi	a5,a5,512
    20b0:	c789                	beqz	a5,20ba <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    20b2:	4581                	li	a1,0
    20b4:	ce818513          	addi	a0,gp,-792 # 200000e4 <WS2812dmabuff+0x30>
    20b8:	3d49                	jal	1f4a <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    20ba:	401c                	lw	a5,0(s0)
    20bc:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    20be:	4782                	lw	a5,0(sp)
    20c0:	1007f793          	andi	a5,a5,256
    20c4:	fbf1                	bnez	a5,2098 <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    20c6:	5402                	lw	s0,32(sp)
    20c8:	50c2                	lw	ra,48(sp)
    20ca:	52b2                	lw	t0,44(sp)
    20cc:	5322                	lw	t1,40(sp)
    20ce:	5392                	lw	t2,36(sp)
    20d0:	44f2                	lw	s1,28(sp)
    20d2:	4562                	lw	a0,24(sp)
    20d4:	45d2                	lw	a1,20(sp)
    20d6:	4642                	lw	a2,16(sp)
    20d8:	46b2                	lw	a3,12(sp)
    20da:	4722                	lw	a4,8(sp)
    20dc:	4792                	lw	a5,4(sp)
    20de:	03410113          	addi	sp,sp,52
    20e2:	30200073          	mret

000020e6 <SysTick_Handler>:
{
    20e6:	1151                	addi	sp,sp,-12
    20e8:	c03e                	sw	a5,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    20ea:	e000f7b7          	lui	a5,0xe000f
{
    20ee:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    20f0:	4b98                	lw	a4,16(a5)
{
    20f2:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    20f4:	66b1                	lui	a3,0xc
    20f6:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x27ed>
    20fa:	9736                	add	a4,a4,a3
    20fc:	cb98                	sw	a4,16(a5)
	SysTick->SR = 0x00000000;
    20fe:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>
	systick_millis++;
    2102:	cb018793          	addi	a5,gp,-848 # 200000ac <systick_millis>
    2106:	4398                	lw	a4,0(a5)
}
    2108:	46a2                	lw	a3,8(sp)
	systick_millis++;
    210a:	0705                	addi	a4,a4,1
    210c:	c398                	sw	a4,0(a5)
}
    210e:	4712                	lw	a4,4(sp)
    2110:	4782                	lw	a5,0(sp)
    2112:	0131                	addi	sp,sp,12
    2114:	30200073          	mret

00002118 <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    2118:	7179                	addi	sp,sp,-48
    211a:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    211c:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    2120:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    2122:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    2126:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    212a:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    212e:	cc26                	sw	s1,24(sp)
    2130:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    2132:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    2136:	d416                	sw	t0,40(sp)
    2138:	d21a                	sw	t1,36(sp)
    213a:	d01e                	sw	t2,32(sp)
    213c:	ce22                	sw	s0,28(sp)
    213e:	ca2a                	sw	a0,20(sp)
    2140:	c82e                	sw	a1,16(sp)
    2142:	c632                	sw	a2,12(sp)
    2144:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    2146:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    2148:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    214a:	c305                	beqz	a4,216a <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    214c:	39818713          	addi	a4,gp,920 # 20000794 <i2c_slave_state>
    2150:	4685                	li	a3,1
    2152:	07c2                	slli	a5,a5,0x10
    2154:	83c1                	srli	a5,a5,0x10
    2156:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    215a:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    215e:	839d                	srli	a5,a5,0x7
    2160:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    2162:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    2166:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    216a:	0404f793          	andi	a5,s1,64
    216e:	c795                	beqz	a5,219a <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    2170:	39818793          	addi	a5,gp,920 # 20000794 <i2c_slave_state>
    2174:	0007c703          	lbu	a4,0(a5)
    2178:	c379                	beqz	a4,223e <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
    217a:	40005737          	lui	a4,0x40005
    217e:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    2182:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    2186:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    218a:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    218e:	0ff77713          	andi	a4,a4,255
    2192:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    2196:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    219a:	0804f793          	andi	a5,s1,128
    219e:	c7a1                	beqz	a5,21e6 <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    21a0:	39818793          	addi	a5,gp,920 # 20000794 <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    21a4:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    21a8:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    21ac:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    21b0:	400057b7          	lui	a5,0x40005
    21b4:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    21b8:	39818413          	addi	s0,gp,920 # 20000794 <i2c_slave_state>
    21bc:	cb79                	beqz	a4,2292 <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    21be:	01044703          	lbu	a4,16(s0) # 40020010 <_eusrstack+0x2001f810>
    21c2:	0ee57663          	bgeu	a0,a4,22ae <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    21c6:	4458                	lw	a4,12(s0)
    21c8:	972a                	add	a4,a4,a0
    21ca:	00074703          	lbu	a4,0(a4)
    21ce:	0ff77713          	andi	a4,a4,255
    21d2:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    21d6:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    21d8:	c391                	beqz	a5,21dc <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    21da:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    21dc:	00244783          	lbu	a5,2(s0)
    21e0:	0785                	addi	a5,a5,1
    21e2:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    21e6:	88c1                	andi	s1,s1,16
    21e8:	cc85                	beqz	s1,2220 <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    21ea:	40005737          	lui	a4,0x40005
    21ee:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    21f2:	07c2                	slli	a5,a5,0x10
    21f4:	83c1                	srli	a5,a5,0x10
    21f6:	dff7f793          	andi	a5,a5,-513
    21fa:	07c2                	slli	a5,a5,0x10
    21fc:	83c1                	srli	a5,a5,0x10
    21fe:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
    2202:	39818793          	addi	a5,gp,920 # 20000794 <i2c_slave_state>
    2206:	02a7c703          	lbu	a4,42(a5)
    220a:	c74d                	beqz	a4,22b4 <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
    220c:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    220e:	cb09                	beqz	a4,2220 <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    2210:	0017c503          	lbu	a0,1(a5)
    2214:	0027c583          	lbu	a1,2(a5)
    2218:	8d89                	sub	a1,a1,a0
    221a:	0ff5f593          	andi	a1,a1,255
    221e:	9702                	jalr	a4
            }
        }
    }
}
    2220:	4472                	lw	s0,28(sp)
    2222:	50b2                	lw	ra,44(sp)
    2224:	52a2                	lw	t0,40(sp)
    2226:	5312                	lw	t1,36(sp)
    2228:	5382                	lw	t2,32(sp)
    222a:	44e2                	lw	s1,24(sp)
    222c:	4552                	lw	a0,20(sp)
    222e:	45c2                	lw	a1,16(sp)
    2230:	4632                	lw	a2,12(sp)
    2232:	46a2                	lw	a3,8(sp)
    2234:	4712                	lw	a4,4(sp)
    2236:	4782                	lw	a5,0(sp)
    2238:	6145                	addi	sp,sp,48
    223a:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    223e:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    2242:	4705                	li	a4,1
    2244:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    2248:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    224c:	c695                	beqz	a3,2278 <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    224e:	0107c683          	lbu	a3,16(a5)
    2252:	f4d774e3          	bgeu	a4,a3,219a <I2C1_EV_IRQHandler+0x82>
    2256:	0287c683          	lbu	a3,40(a5)
    225a:	f2a1                	bnez	a3,219a <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    225c:	400056b7          	lui	a3,0x40005
    2260:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    2264:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    2266:	96ba                	add	a3,a3,a4
    2268:	0ff67613          	andi	a2,a2,255
    226c:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    2270:	0705                	addi	a4,a4,1
    2272:	00e78123          	sb	a4,2(a5)
    2276:	b715                	j	219a <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    2278:	0087c683          	lbu	a3,8(a5)
    227c:	f0d77fe3          	bgeu	a4,a3,219a <I2C1_EV_IRQHandler+0x82>
    2280:	01c7c683          	lbu	a3,28(a5)
    2284:	fa99                	bnez	a3,219a <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    2286:	400056b7          	lui	a3,0x40005
    228a:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    228e:	43d4                	lw	a3,4(a5)
    2290:	bfd9                	j	2266 <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    2292:	00844703          	lbu	a4,8(s0)
    2296:	00e57c63          	bgeu	a0,a4,22ae <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    229a:	4058                	lw	a4,4(s0)
    229c:	972a                	add	a4,a4,a0
    229e:	00074703          	lbu	a4,0(a4)
    22a2:	0ff77713          	andi	a4,a4,255
    22a6:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    22aa:	4c1c                	lw	a5,24(s0)
    22ac:	b735                	j	21d8 <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    22ae:	00079823          	sh	zero,16(a5)
    22b2:	bf15                	j	21e6 <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    22b4:	4bd8                	lw	a4,20(a5)
    22b6:	bfa1                	j	220e <I2C1_EV_IRQHandler+0xf6>

000022b8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    22b8:	1151                	addi	sp,sp,-12
    22ba:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
    22bc:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
    22c0:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    22c2:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    22c6:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    22c8:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    22cc:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
    22d0:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    22d2:	cf89                	beqz	a5,22ec <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    22d4:	41475783          	lhu	a5,1044(a4)
    22d8:	40070713          	addi	a4,a4,1024
    22dc:	07c2                	slli	a5,a5,0x10
    22de:	83c1                	srli	a5,a5,0x10
    22e0:	eff7f793          	andi	a5,a5,-257
    22e4:	07c2                	slli	a5,a5,0x10
    22e6:	83c1                	srli	a5,a5,0x10
    22e8:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    22ec:	2006f793          	andi	a5,a3,512
    22f0:	cf89                	beqz	a5,230a <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    22f2:	40005737          	lui	a4,0x40005
    22f6:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    22fa:	07c2                	slli	a5,a5,0x10
    22fc:	83c1                	srli	a5,a5,0x10
    22fe:	dff7f793          	andi	a5,a5,-513
    2302:	07c2                	slli	a5,a5,0x10
    2304:	83c1                	srli	a5,a5,0x10
    2306:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    230a:	4006f693          	andi	a3,a3,1024
    230e:	ce89                	beqz	a3,2328 <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    2310:	40005737          	lui	a4,0x40005
    2314:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    2318:	07c2                	slli	a5,a5,0x10
    231a:	83c1                	srli	a5,a5,0x10
    231c:	bff7f793          	andi	a5,a5,-1025
    2320:	07c2                	slli	a5,a5,0x10
    2322:	83c1                	srli	a5,a5,0x10
    2324:	40f71a23          	sh	a5,1044(a4)
    }
}
    2328:	46a2                	lw	a3,8(sp)
    232a:	4712                	lw	a4,4(sp)
    232c:	4782                	lw	a5,0(sp)
    232e:	0131                	addi	sp,sp,12
    2330:	30200073          	mret
    2334:	4d49                	li	s10,18
    2336:	5720                	lw	s0,104(a4)
    2338:	4952                	lw	s2,20(sp)
    233a:	4554                	lw	a3,12(a0)
    233c:	4e45                	li	t3,17
    233e:	5420                	lw	s0,104(s0)
    2340:	000d0a4f          	fnmadd.s	fs4,fs10,ft0,ft0,rne
    2344:	4d49                	li	s10,18
    2346:	5220                	lw	s0,96(a2)
    2348:	4145                	li	sp,17
    234a:	4544                	lw	s1,12(a0)
    234c:	204e                	fld	ft0,208(sp)
    234e:	5246                	lw	tp,112(sp)
    2350:	0a2e4d4f          	fnmadd.d	fs10,ft8,ft2,ft1,rmm
    2354:	000d                	c.nop	3
    2356:	0000                	unimp
    2358:	6e756f63          	bltu	a0,t2,2a56 <font+0x3d6>
    235c:	6574                	flw	fa3,76(a0)
    235e:	2072                	fld	ft0,280(sp)
    2360:	6c25                	lui	s8,0x9
    2362:	0075                	c.nop	29
    2364:	000a                	c.slli	zero,0x2
    2366:	0000                	unimp
    2368:	3249                	jal	1cea <main+0xb60>
    236a:	30203a43          	fmadd.s	fs4,ft0,ft2,ft6,rup
    236e:	2578                	fld	fa4,200(a0)
    2370:	3230                	fld	fa2,96(a2)
    2372:	0058                	addi	a4,sp,4
    2374:	6146                	flw	ft2,80(sp)
    2376:	6c69                	lui	s8,0x1a
    2378:	6465                	lui	s0,0x19
    237a:	7420                	flw	fs0,104(s0)
    237c:	6e69206f          	j	94a62 <lib_i2c.c.d894f163+0x8b6cf>
    2380:	7469                	lui	s0,0xffffa
    2382:	4920                	lw	s0,80(a0)
    2384:	4332                	lw	t1,12(sp)
    2386:	0000                	unimp
    2388:	6548                	flw	fa0,12(a0)
    238a:	6c6c                	flw	fa1,92(s0)
    238c:	6542206f          	j	249e0 <lib_i2c.c.d894f163+0x1b64d>
    2390:	2165                	jal	2838 <font+0x1b8>
    2392:	0000                	unimp
    2394:	2d2d                	jal	29ce <font+0x34e>
    2396:	2d2d                	jal	29d0 <font+0x350>
    2398:	6e616353          	0x6e616353
    239c:	696e                	flw	fs2,216(sp)
    239e:	676e                	flw	fa4,216(sp)
    23a0:	4920                	lw	s0,80(a0)
    23a2:	4332                	lw	t1,12(sp)
    23a4:	4220                	lw	s0,64(a2)
    23a6:	7375                	lui	t1,0xffffd
    23a8:	6620                	flw	fs0,72(a2)
    23aa:	4420726f          	jal	tp,97ec <lib_i2c.c.d894f163+0x459>
    23ae:	7665                	lui	a2,0xffff9
    23b0:	6369                	lui	t1,0x1a
    23b2:	7365                	lui	t1,0xffff9
    23b4:	2d2d                	jal	29ee <font+0x36e>
    23b6:	002d                	c.nop	11
    23b8:	2d2d                	jal	29f2 <font+0x372>
    23ba:	2d2d                	jal	29f4 <font+0x374>
    23bc:	6f44                	flw	fs1,28(a4)
    23be:	656e                	flw	fa0,216(sp)
    23c0:	5320                	lw	s0,96(a4)
    23c2:	6e6e6163          	bltu	t3,t1,2aa4 <font+0x424>
    23c6:	6e69                	lui	t3,0x1a
    23c8:	2d2d2d67          	0x2d2d2d67
    23cc:	0a2d                	addi	s4,s4,11
    23ce:	0000                	unimp
    23d0:	3249                	jal	1d52 <main+0xbc8>
    23d2:	6c532043          	0x6c532043
    23d6:	7661                	lui	a2,0xffff8
    23d8:	2065                	jal	2480 <FONT_7x5+0x24>
    23da:	6f6d                	lui	t5,0x1b
    23dc:	6564                	flw	fs1,76(a0)
    23de:	0000                	unimp
    23e0:	6f4c                	flw	fa1,28(a4)
    23e2:	676e                	flw	fa4,216(sp)
    23e4:	5020                	lw	s0,96(s0)
    23e6:	6572                	flw	fa0,28(sp)
    23e8:	00007373          	csrrci	t1,ustatus,0
    23ec:	676e6953          	0x676e6953
    23f0:	656c                	flw	fa1,76(a0)
    23f2:	4320                	lw	s0,64(a4)
    23f4:	696c                	flw	fa1,84(a0)
    23f6:	00006b63          	bltu	zero,zero,240c <I2C1_ER_IRQHandler+0x154>
    23fa:	0000                	unimp
    23fc:	6f44                	flw	fs1,28(a4)
    23fe:	6275                	lui	tp,0x1d
    2400:	656c                	flw	fa1,76(a0)
    2402:	4320                	lw	s0,64(a4)
    2404:	696c                	flw	fa1,84(a0)
    2406:	00006b63          	bltu	zero,zero,241c <I2C1_ER_IRQHandler+0x164>
    240a:	0000                	unimp
    240c:	6548                	flw	fa0,12(a0)
    240e:	6c6c                	flw	fa1,92(s0)
    2410:	6f57206f          	j	75304 <lib_i2c.c.d894f163+0x6bf71>
    2414:	6c72                	flw	fs8,28(sp)
    2416:	2164                	fld	fs1,192(a0)
    2418:	0000                	unimp
    241a:	0000                	unimp
    241c:	37375453          	0x37375453
    2420:	72203533          	0x72203533
    2424:	6e75                	lui	t3,0x1d
    2426:	6974                	flw	fa3,84(a0)
    2428:	656d                	lui	a0,0x1b
    242a:	203a                	fld	ft0,392(sp)
    242c:	6c25                	lui	s8,0x9
    242e:	2075                	jal	24da <FONT_7x5+0x7e>
    2430:	7375                	lui	t1,0xffffd
    2432:	000a                	c.slli	zero,0x2
    2434:	1609                	addi	a2,a2,-30
    2436:	2009                	jal	2438 <I2C1_ER_IRQHandler+0x180>
    2438:	1b21                	addi	s6,s6,-24
    243a:	15171913          	0x15171913
    243e:	2b1e                	fld	fs6,448(sp)
    2440:	0504                	addi	s1,sp,640
    2442:	0e02                	c.slli64	t3
    2444:	0000                	unimp
    2446:	0000                	unimp
    2448:	1e08140b          	0x1e08140b
    244c:	1d22                	slli	s10,s10,0x28
    244e:	1e18                	addi	a4,sp,816
    2450:	2b241a1b          	0x2b241a1b
    2454:	0606                	slli	a2,a2,0x1
    2456:	0f02                	c.slli64	t5
    2458:	0000                	unimp
	...

0000245c <FONT_7x5>:
    245c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    246c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    247c:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    248c:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    249c:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    24ac:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    24bc:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    24cc:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    24dc:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    24ec:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    24fc:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    250c:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    251c:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    252c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    253c:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    254c:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    255c:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    256c:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    257c:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    258c:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    259c:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    25ac:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    25bc:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    25cc:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    25dc:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    25ec:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    25fc:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    260c:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    261c:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    262c:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

00002638 <bitquartets.8>:
    2638:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    2648:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

00002658 <colors>:
    2658:	0000 000f 03e0 03ef 7800 780f 7be0 c618     .........x.x.{..
    2668:	7bef 001f 07e0 07ff f800 f81f ffe0 ffff     .{..............
    2678:	fd20 afe5 fc18 0000                          .......

00002680 <font>:
    2680:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
    2690:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
    26a0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
    26b0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
    26c0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
    26d0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
    26e0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
    26f0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
    2700:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
    2710:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
    2720:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    2730:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    2740:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
    2750:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
    2760:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
    2770:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
    2780:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
    2790:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
    27a0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
    27b0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
    27c0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
    27d0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
    27e0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
    27f0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    2800:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    2810:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
    2820:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
    2830:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
    2840:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
    2850:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
    2860:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
    2870:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
    2880:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
    2890:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
    28a0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
    28b0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
    28c0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
    28d0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
    28e0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
    28f0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
    2900:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
    2910:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
    2920:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
    2930:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
    2940:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
    2950:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
    2960:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
    2970:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
    2980:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
    2990:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
    29a0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
    29b0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
    29c0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
    29d0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
    29e0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
    29f0:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
    2a00:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
    2a10:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
    2a20:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
    2a30:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
    2a40:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
    2a50:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
    2a60:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
    2a70:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
    2a80:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
    2a90:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
    2aa0:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
    2ab0:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
    2ac0:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
    2ad0:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
    2ae0:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
    2af0:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
    2b00:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
    2b10:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
    2b20:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
    2b30:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
    2b40:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
    2b50:	6b6b 3608 3612 3624 0600 0909 0006 1800     kk.6.6$6........
    2b60:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
    2b70:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

00002b80 <ssd1306_init_array>:
    2b80:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    2b90:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......

Disassembly of section .data:

20000000 <dev_aht21>:
20000000:	1a80 0006 0000 0000 0038 0001               ........8...

2000000c <dev_ssd1306>:
2000000c:	86a0 0001 0000 0000 003c 0001               ........<...

20000018 <i2c_registers>:
20000018:	00aa 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000038 <lfsr>:
20000038:	0001 0000                                   ....

2000003c <line.5>:
2000003c:	0001 0000                                   ....

20000040 <tween>:
20000040:	ff42 ffff 0000 0000                         B.......

20000048 <FastMultiply>:
{
20000048:	87aa                	mv	a5,a0
	uint32_t ret = 0;
2000004a:	4501                	li	a0,0
		if( multiplicand & 1 )
2000004c:	0015f713          	andi	a4,a1,1
20000050:	c311                	beqz	a4,20000054 <FastMultiply+0xc>
			ret += mutliplicant;
20000052:	953e                	add	a0,a0,a5
		multiplicand>>=1;
20000054:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
20000056:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000058:	f9f5                	bnez	a1,2000004c <FastMultiply+0x4>
}
2000005a:	8082                	ret

2000005c <DMA1_Channel4_IRQHandler>:

// DMA transfer completion interrupt. It will fire when the DMA transfer is
// complete. We use it just to blink the LED
__attribute__((interrupt)) __attribute__((section(".srodata")))
void DMA1_Channel4_IRQHandler(void)
{
2000005c:	1151                	addi	sp,sp,-12
2000005e:	c23a                	sw	a4,4(sp)
	// Clear flag
	DMA1->INTFCR |= DMA_CTCIF4;
20000060:	40020737          	lui	a4,0x40020
{
20000064:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000066:	435c                	lw	a5,4(a4)
{
20000068:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000006a:	6689                	lui	a3,0x2
2000006c:	8fd5                	or	a5,a5,a3
2000006e:	c35c                	sw	a5,4(a4)

	// Blink LED
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000070:	400117b7          	lui	a5,0x40011
20000074:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000078:	47d8                	lw	a4,12(a5)
}
2000007a:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
2000007c:	04074713          	xori	a4,a4,64
20000080:	c7d8                	sw	a4,12(a5)
}
20000082:	4712                	lw	a4,4(sp)
20000084:	4782                	lw	a5,0(sp)
20000086:	0131                	addi	sp,sp,12
20000088:	30200073          	mret
