
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	57b0006f          	j	d7a <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0e48                	addi	a0,sp,788
   a:	0000                	unimp
   c:	0df0                	addi	a2,sp,732
	...
  2e:	0000                	unimp
  30:	2030                	fld	fa2,64(s0)
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0df0                	addi	a2,sp,732
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0df0                	addi	a2,sp,732
  42:	0000                	unimp
  44:	0df0                	addi	a2,sp,732
  46:	0000                	unimp
  48:	0df0                	addi	a2,sp,732
  4a:	0000                	unimp
  4c:	0df0                	addi	a2,sp,732
  4e:	0000                	unimp
  50:	0df0                	addi	a2,sp,732
  52:	0000                	unimp
  54:	0df0                	addi	a2,sp,732
  56:	0000                	unimp
  58:	0df0                	addi	a2,sp,732
  5a:	0000                	unimp
  5c:	0df0                	addi	a2,sp,732
  5e:	0000                	unimp
  60:	1fb6                	slli	t6,t6,0x2d
  62:	0000                	unimp
  64:	0054                	addi	a3,sp,4
  66:	2000                	fld	fs0,0(s0)
  68:	0df0                	addi	a2,sp,732
  6a:	0000                	unimp
  6c:	0df0                	addi	a2,sp,732
  6e:	0000                	unimp
  70:	0df0                	addi	a2,sp,732
  72:	0000                	unimp
  74:	0df0                	addi	a2,sp,732
  76:	0000                	unimp
  78:	2062                	fld	ft0,24(sp)
  7a:	0000                	unimp
  7c:	2202                	fld	ft4,0(sp)
  7e:	0000                	unimp
  80:	0df0                	addi	a2,sp,732
  82:	0000                	unimp
  84:	0df0                	addi	a2,sp,732
  86:	0000                	unimp
  88:	0df0                	addi	a2,sp,732
  8a:	0000                	unimp
  8c:	0df0                	addi	a2,sp,732
  8e:	0000                	unimp
  90:	0df0                	addi	a2,sp,732
  92:	0000                	unimp
  94:	0df0                	addi	a2,sp,732
  96:	0000                	unimp
  98:	0df0                	addi	a2,sp,732
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	andi	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srli	a1,a1,0x1
      ae:	0606                	slli	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	slli	a2,a2,0x1
      d4:	0686                	slli	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srli	a3,a3,0x1
      e6:	8205                	srli	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
{
     136:	1131                	addi	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
	int overflow = 0;
     144:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     146:	cab5                	beqz	a3,1ba <mini_pad+0x84>
	if(len > pad_to) {
     148:	0096d463          	bge	a3,s1,150 <mini_pad+0x1a>
     14c:	84b6                	mv	s1,a3
		overflow = 1;
     14e:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     150:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     154:	00045363          	bgez	s0,15a <mini_pad+0x24>
     158:	4401                	li	s0,0
     15a:	8622                	mv	a2,s0
     15c:	853a                	mv	a0,a4
     15e:	c23e                	sw	a5,4(sp)
     160:	c01a                	sw	t1,0(sp)
     162:	28c010ef          	jal	ra,13ee <memset>
     166:	4302                	lw	t1,0(sp)
     168:	4792                	lw	a5,4(sp)
     16a:	872a                	mv	a4,a0
     16c:	008506b3          	add	a3,a0,s0
     170:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     172:	40c485b3          	sub	a1,s1,a2
     176:	04b04463          	bgtz	a1,1be <mini_pad+0x88>
     17a:	0004d363          	bgez	s1,180 <mini_pad+0x4a>
     17e:	4481                	li	s1,0
     180:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     184:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     188:	02030463          	beqz	t1,1b0 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     18c:	02c77263          	bgeu	a4,a2,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     190:	02a00793          	li	a5,42
     194:	fef60fa3          	sb	a5,-1(a2)
     198:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     19c:	00d77a63          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1a0:	fef60f23          	sb	a5,-2(a2)
     1a4:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     1a8:	00d77463          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1ac:	fef60ea3          	sb	a5,-3(a2)
}
     1b0:	40c2                	lw	ra,16(sp)
     1b2:	4432                	lw	s0,12(sp)
     1b4:	44a2                	lw	s1,8(sp)
     1b6:	0151                	addi	sp,sp,20
     1b8:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1ba:	86a6                	mv	a3,s1
     1bc:	bf51                	j	150 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1be:	00c785b3          	add	a1,a5,a2
     1c2:	0005c503          	lbu	a0,0(a1)
     1c6:	00c685b3          	add	a1,a3,a2
     1ca:	0605                	addi	a2,a2,1
     1cc:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1d0:	b74d                	j	172 <mini_pad+0x3c>

000001d2 <_puts>:
{
     1d2:	832a                	mv	t1,a0
     1d4:	852e                	mv	a0,a1
	if(!buf) return len;
     1d6:	ce01                	beqz	a2,1ee <_puts+0x1c>
	char * p0 = b->buffer;
     1d8:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1dc:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1de:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1e0:	00a74863          	blt	a4,a0,1f0 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1e4:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1e8:	4248                	lw	a0,4(a2)
     1ea:	40550533          	sub	a0,a0,t0
}
     1ee:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1f0:	4614                	lw	a3,8(a2)
     1f2:	fff68593          	addi	a1,a3,-1
     1f6:	4214                	lw	a3,0(a2)
     1f8:	96ae                	add	a3,a3,a1
     1fa:	fed785e3          	beq	a5,a3,1e4 <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1fe:	00178693          	addi	a3,a5,1
     202:	c254                	sw	a3,4(a2)
     204:	00e306b3          	add	a3,t1,a4
     208:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     20c:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     20e:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     212:	b7f1                	j	1de <_puts+0xc>

00000214 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     214:	e0000737          	lui	a4,0xe0000
     218:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     21c:	0f470693          	addi	a3,a4,244
     220:	0807f793          	andi	a5,a5,128
     224:	fbf5                	bnez	a5,218 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     226:	783027b7          	lui	a5,0x78302
     22a:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     22e:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     230:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     232:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     236:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     238:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     23a:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     23e:	0807f793          	andi	a5,a5,128
     242:	ffe5                	bnez	a5,23a <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     244:	00e557b3          	srl	a5,a0,a4
     248:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     24c:	03000793          	li	a5,48
     250:	00d35463          	bge	t1,a3,258 <PrintHex+0x44>
     254:	05700793          	li	a5,87
     258:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     25a:	07a2                	slli	a5,a5,0x8
     25c:	0857e793          	ori	a5,a5,133
     260:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     264:	1771                	addi	a4,a4,-4
     266:	fcb71ae3          	bne	a4,a1,23a <PrintHex+0x26>
}
     26a:	8082                	ret

0000026c <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     26c:	e000f7b7          	lui	a5,0xe000f
     270:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     272:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     276:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     278:	471c                	lw	a5,8(a4)
     27a:	8f89                	sub	a5,a5,a0
     27c:	fe07cee3          	bltz	a5,278 <DelaySysTick+0xc>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     280:	8082                	ret

00000282 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     282:	1101                	addi	sp,sp,-32
     284:	ce06                	sw	ra,28(sp)
     286:	cc22                	sw	s0,24(sp)
     288:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     28a:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     28c:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     28e:	00055763          	bgez	a0,29c <mini_itoa.part.0+0x1a>
     292:	e689                	bnez	a3,29c <mini_itoa.part.0+0x1a>
		negative = 1;
     294:	4785                	li	a5,1
		value = -value;
     296:	40a00333          	neg	t1,a0
		negative = 1;
     29a:	c03e                	sw	a5,0(sp)
     29c:	06100413          	li	s0,97
     2a0:	c219                	beqz	a2,2a6 <mini_itoa.part.0+0x24>
     2a2:	04100413          	li	s0,65
	int	negative = 0;
     2a6:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2a8:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     2aa:	851a                	mv	a0,t1
     2ac:	c83a                	sw	a4,16(sp)
     2ae:	c21a                	sw	t1,4(sp)
     2b0:	c62e                	sw	a1,12(sp)
     2b2:	c41a                	sw	t1,8(sp)
     2b4:	3d25                	jal	ec <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2b6:	47a5                	li	a5,9
     2b8:	4322                	lw	t1,8(sp)
     2ba:	45b2                	lw	a1,12(sp)
     2bc:	4742                	lw	a4,16(sp)
     2be:	0ff57693          	andi	a3,a0,255
     2c2:	06a7e163          	bltu	a5,a0,324 <mini_itoa.part.0+0xa2>
     2c6:	03068693          	addi	a3,a3,48
     2ca:	0ff6f693          	andi	a3,a3,255
     2ce:	00148793          	addi	a5,s1,1
     2d2:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2d6:	851a                	mv	a0,t1
     2d8:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2da:	c63e                	sw	a5,12(sp)
		value /= radix;
     2dc:	c42e                	sw	a1,8(sp)
     2de:	33cd                	jal	c0 <__hidden___udivsi3>
	} while (value > 0);
     2e0:	4692                	lw	a3,4(sp)
     2e2:	45a2                	lw	a1,8(sp)
     2e4:	47b2                	lw	a5,12(sp)
     2e6:	4742                	lw	a4,16(sp)
		value /= radix;
     2e8:	832a                	mv	t1,a0
	} while (value > 0);
     2ea:	02b6fb63          	bgeu	a3,a1,320 <mini_itoa.part.0+0x9e>
	if (negative)
     2ee:	4682                	lw	a3,0(sp)
     2f0:	c699                	beqz	a3,2fe <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2f2:	02d00693          	li	a3,45
     2f6:	00d78023          	sb	a3,0(a5) # e000f000 <_eusrstack+0xc000e800>
     2fa:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2fe:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     302:	01f55693          	srli	a3,a0,0x1f
     306:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     308:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     30c:	8685                	srai	a3,a3,0x1
     30e:	4601                	li	a2,0
     310:	17fd                	addi	a5,a5,-1
     312:	00d64b63          	blt	a2,a3,328 <mini_itoa.part.0+0xa6>
}
     316:	40f2                	lw	ra,28(sp)
     318:	4462                	lw	s0,24(sp)
     31a:	44d2                	lw	s1,20(sp)
     31c:	6105                	addi	sp,sp,32
     31e:	8082                	ret
	} while (value > 0);
     320:	84be                	mv	s1,a5
     322:	b761                	j	2aa <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     324:	96a2                	add	a3,a3,s0
     326:	b755                	j	2ca <mini_itoa.part.0+0x48>
		char j = buffer[i];
     328:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     32c:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     330:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     334:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     336:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     33a:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     33e:	bfc9                	j	310 <mini_itoa.part.0+0x8e>

00000340 <ld_dword>:
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
     340:	00154783          	lbu	a5,1(a0)
     344:	00054703          	lbu	a4,0(a0)
     348:	07a2                	slli	a5,a5,0x8
     34a:	8f5d                	or	a4,a4,a5
     34c:	00254783          	lbu	a5,2(a0)
     350:	00354503          	lbu	a0,3(a0)
     354:	07c2                	slli	a5,a5,0x10
     356:	8fd9                	or	a5,a5,a4
     358:	0562                	slli	a0,a0,0x18
	return rv;
}
     35a:	8d5d                	or	a0,a0,a5
     35c:	8082                	ret

0000035e <clust2sect>:
/*-----------------------------------------------------------------------*/

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     35e:	1151                	addi	sp,sp,-12
     360:	c222                	sw	s0,4(sp)
	FATFS *fs = FatFs;
     362:	c8c1a403          	lw	s0,-884(gp) # 20000088 <FatFs>


	clst -= 2;
     366:	ffe50593          	addi	a1,a0,-2
{
     36a:	c406                	sw	ra,8(sp)
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     36c:	441c                	lw	a5,8(s0)
     36e:	4501                	li	a0,0
     370:	17f9                	addi	a5,a5,-2
     372:	00f5f763          	bgeu	a1,a5,380 <clust2sect+0x22>
	return (DWORD)clst * fs->csize + fs->database;
     376:	00244503          	lbu	a0,2(s0)
     37a:	331d                	jal	a0 <__mulsi3>
     37c:	485c                	lw	a5,20(s0)
     37e:	953e                	add	a0,a0,a5
}
     380:	40a2                	lw	ra,8(sp)
     382:	4412                	lw	s0,4(sp)
     384:	0131                	addi	sp,sp,12
     386:	8082                	ret

00000388 <get_clust>:
{
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (PF_FS_FAT32 && fs->fs_type == FS_FAT32)) {
     388:	c8c1a783          	lw	a5,-884(gp) # 20000088 <FatFs>
     38c:	0007c703          	lbu	a4,0(a5)
     390:	478d                	li	a5,3
     392:	02f71163          	bne	a4,a5,3b4 <get_clust+0x2c>
		clst = ld_word(dir+DIR_FstClusHI);
     396:	01554783          	lbu	a5,21(a0)
     39a:	01454703          	lbu	a4,20(a0)
     39e:	07a2                	slli	a5,a5,0x8
     3a0:	8fd9                	or	a5,a5,a4
		clst <<= 16;
     3a2:	07c2                	slli	a5,a5,0x10
	}
	clst |= ld_word(dir+DIR_FstClusLO);
     3a4:	01a54703          	lbu	a4,26(a0)
     3a8:	01b54503          	lbu	a0,27(a0)
     3ac:	0522                	slli	a0,a0,0x8
     3ae:	8d59                	or	a0,a0,a4

	return clst;
}
     3b0:	8d5d                	or	a0,a0,a5
     3b2:	8082                	ret
	CLUST clst = 0;
     3b4:	4781                	li	a5,0
     3b6:	b7fd                	j	3a4 <get_clust+0x1c>

000003b8 <dir_rewind>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     3b8:	1151                	addi	sp,sp,-12
     3ba:	c222                	sw	s0,4(sp)
     3bc:	c406                	sw	ra,8(sp)
     3be:	842a                	mv	s0,a0
	CLUST clst;
	FATFS *fs = FatFs;


	dj->index = 0;
     3c0:	00051023          	sh	zero,0(a0)
	clst = dj->sclust;
     3c4:	4508                	lw	a0,8(a0)
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
     3c6:	4705                	li	a4,1
	FATFS *fs = FatFs;
     3c8:	c8c1a783          	lw	a5,-884(gp) # 20000088 <FatFs>
	if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
     3cc:	02e50563          	beq	a0,a4,3f6 <dir_rewind+0x3e>
     3d0:	4798                	lw	a4,8(a5)
     3d2:	02e57663          	bgeu	a0,a4,3fe <dir_rewind+0x46>
		return FR_DISK_ERR;
	}
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
     3d6:	e919                	bnez	a0,3ec <dir_rewind+0x34>
     3d8:	0007c683          	lbu	a3,0(a5)
     3dc:	470d                	li	a4,3
		clst = (CLUST)fs->dirbase;
     3de:	4b88                	lw	a0,16(a5)
	if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
     3e0:	00e68663          	beq	a3,a4,3ec <dir_rewind+0x34>
	}
	dj->clust = clst;						/* Current cluster */
     3e4:	00042623          	sw	zero,12(s0)
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     3e8:	4b88                	lw	a0,16(a5)
     3ea:	a021                	j	3f2 <dir_rewind+0x3a>
	dj->clust = clst;						/* Current cluster */
     3ec:	c448                	sw	a0,12(s0)
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     3ee:	dd6d                	beqz	a0,3e8 <dir_rewind+0x30>
     3f0:	37bd                	jal	35e <clust2sect>
     3f2:	c808                	sw	a0,16(s0)

	return FR_OK;	/* Seek succeeded */
     3f4:	4501                	li	a0,0
}
     3f6:	40a2                	lw	ra,8(sp)
     3f8:	4412                	lw	s0,4(sp)
     3fa:	0131                	addi	sp,sp,12
     3fc:	8082                	ret
		return FR_DISK_ERR;
     3fe:	4505                	li	a0,1
     400:	bfdd                	j	3f6 <dir_rewind+0x3e>

00000402 <SPI_set_prescaler>:
static inline uint8_t SPI_is_RX_empty();
static inline void SPI_wait_RX_available();

void SPI_set_prescaler(uint8_t presc)
{
    SPI1->CTLR1 &= ~SPI_CTLR1_BR;
     402:	40013737          	lui	a4,0x40013
     406:	00075783          	lhu	a5,0(a4) # 40013000 <_eusrstack+0x20012800>
    SPI1->CTLR1 |= SPI_CTLR1_BR & (presc << 3);
     40a:	050e                	slli	a0,a0,0x3
    SPI1->CTLR1 &= ~SPI_CTLR1_BR;
     40c:	07c2                	slli	a5,a5,0x10
     40e:	83c1                	srli	a5,a5,0x10
     410:	fc77f793          	andi	a5,a5,-57
     414:	07c2                	slli	a5,a5,0x10
     416:	83c1                	srli	a5,a5,0x10
     418:	00f71023          	sh	a5,0(a4)
    SPI1->CTLR1 |= SPI_CTLR1_BR & (presc << 3);
     41c:	00075783          	lhu	a5,0(a4)
     420:	07c2                	slli	a5,a5,0x10
     422:	83c1                	srli	a5,a5,0x10
     424:	8d5d                	or	a0,a0,a5
     426:	00a71023          	sh	a0,0(a4)
}
     42a:	8082                	ret

0000042c <SPI_transfer_8>:
    return SPI1->DATAR;
}

static inline void SPI_write_8(uint8_t data)
{
    SPI1->DATAR = data;
     42c:	400137b7          	lui	a5,0x40013
     430:	00a79623          	sh	a0,12(a5) # 4001300c <_eusrstack+0x2001280c>
}

// ########  small internal function definitions, static inline
static inline void SPI_wait_TX_complete()
{
    while (!(SPI1->STATR & SPI_STATR_TXE))
     434:	40013737          	lui	a4,0x40013
     438:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     43c:	8b89                	andi	a5,a5,2
     43e:	dfed                	beqz	a5,438 <SPI_transfer_8+0xc>
    asm volatile("nop");
     440:	0001                	nop
{
    return SPI1->STATR & SPI_STATR_RXNE;
}
static inline void SPI_wait_RX_available()
{
    while (!(SPI1->STATR & SPI_STATR_RXNE))
     442:	40013737          	lui	a4,0x40013
     446:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     44a:	8b85                	andi	a5,a5,1
     44c:	dfed                	beqz	a5,446 <SPI_transfer_8+0x1a>
    return SPI1->DATAR;
     44e:	00c75503          	lhu	a0,12(a4)
}
     452:	0ff57513          	andi	a0,a0,255
     456:	8082                	ret

00000458 <rcvr_mmc>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_mmc (void)
{
	BYTE r = SPI_transfer_8(0xFF);
     458:	0ff00513          	li	a0,255
     45c:	bfc1                	j	42c <SPI_transfer_8>

0000045e <skip_mmc>:

static
void skip_mmc (
	UINT n		/* Number of bytes to skip */
)
{
     45e:	1151                	addi	sp,sp,-12
     460:	c222                	sw	s0,4(sp)
     462:	c406                	sw	ra,8(sp)
     464:	842a                	mv	s0,a0
	do {
		SPI_transfer_8(0xFF);
     466:	0ff00513          	li	a0,255
	} while (--n);	
     46a:	147d                	addi	s0,s0,-1
		SPI_transfer_8(0xFF);
     46c:	37c1                	jal	42c <SPI_transfer_8>
	} while (--n);	
     46e:	fc65                	bnez	s0,466 <skip_mmc+0x8>
}
     470:	40a2                	lw	ra,8(sp)
     472:	4412                	lw	s0,4(sp)
     474:	0131                	addi	sp,sp,12
     476:	8082                	ret

00000478 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     478:	1151                	addi	sp,sp,-12
	BYTE n, res;

	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     47a:	01851793          	slli	a5,a0,0x18
{
     47e:	c222                	sw	s0,4(sp)
     480:	c026                	sw	s1,0(sp)
     482:	c406                	sw	ra,8(sp)
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     484:	87e1                	srai	a5,a5,0x18
{
     486:	84aa                	mv	s1,a0
     488:	842e                	mv	s0,a1
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     48a:	0007db63          	bgez	a5,4a0 <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     48e:	4581                	li	a1,0
     490:	07700513          	li	a0,119
     494:	37d5                	jal	478 <send_cmd>
		if (res > 1) return res;
     496:	4785                	li	a5,1
     498:	06a7e163          	bltu	a5,a0,4fa <send_cmd+0x82>
		cmd &= 0x7F;
     49c:	07f4f493          	andi	s1,s1,127
	}

	/* Select the card */
	INTF_MMC_CS_HIGH(); rcvr_mmc();
     4a0:	3f65                	jal	458 <rcvr_mmc>
	INTF_MMC_CS_LOW(); rcvr_mmc();
     4a2:	3f5d                	jal	458 <rcvr_mmc>
	SPI_transfer_8(d);
     4a4:	8526                	mv	a0,s1
     4a6:	3759                	jal	42c <SPI_transfer_8>
     4a8:	01845513          	srli	a0,s0,0x18
     4ac:	3741                	jal	42c <SPI_transfer_8>

	/* Send a command packet */
	xmit_mmc(cmd);					/* Start + Command index */
	xmit_mmc((BYTE)(arg >> 24));	/* Argument[31..24] */
	xmit_mmc((BYTE)(arg >> 16));	/* Argument[23..16] */
     4ae:	01045513          	srli	a0,s0,0x10
	SPI_transfer_8(d);
     4b2:	0ff57513          	andi	a0,a0,255
     4b6:	3f9d                	jal	42c <SPI_transfer_8>
	xmit_mmc((BYTE)(arg >> 8));		/* Argument[15..8] */
     4b8:	00845513          	srli	a0,s0,0x8
	SPI_transfer_8(d);
     4bc:	0ff57513          	andi	a0,a0,255
     4c0:	37b5                	jal	42c <SPI_transfer_8>
     4c2:	0ff47513          	andi	a0,s0,255
     4c6:	379d                	jal	42c <SPI_transfer_8>
	xmit_mmc((BYTE)arg);			/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* Valid CRC for CMD0(0) */
     4c8:	04000793          	li	a5,64
     4cc:	09500513          	li	a0,149
     4d0:	00f48963          	beq	s1,a5,4e2 <send_cmd+0x6a>
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) */
     4d4:	04800793          	li	a5,72
	n = 0x01;						/* Dummy CRC + Stop */
     4d8:	4505                	li	a0,1
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) */
     4da:	00f49463          	bne	s1,a5,4e2 <send_cmd+0x6a>
     4de:	08700513          	li	a0,135
	SPI_transfer_8(d);
     4e2:	37a9                	jal	42c <SPI_transfer_8>
     4e4:	4429                	li	s0,10
	xmit_mmc(n);

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcvr_mmc();
     4e6:	3f8d                	jal	458 <rcvr_mmc>
	} while ((res & 0x80) && --n);
     4e8:	01851793          	slli	a5,a0,0x18
     4ec:	87e1                	srai	a5,a5,0x18
     4ee:	0007d663          	bgez	a5,4fa <send_cmd+0x82>
     4f2:	147d                	addi	s0,s0,-1
     4f4:	0ff47413          	andi	s0,s0,255
     4f8:	f47d                	bnez	s0,4e6 <send_cmd+0x6e>

	return res;			/* Return with the response value */
}
     4fa:	40a2                	lw	ra,8(sp)
     4fc:	4412                	lw	s0,4(sp)
     4fe:	4482                	lw	s1,0(sp)
     500:	0131                	addi	sp,sp,12
     502:	8082                	ret

00000504 <disk_readp>:
{
	DRESULT res;
	BYTE d;
	UINT bc, tmr;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     504:	c881c783          	lbu	a5,-888(gp) # 20000084 <CardType>
{
     508:	1131                	addi	sp,sp,-20
     50a:	c622                	sw	s0,12(sp)
     50c:	c426                	sw	s1,8(sp)
     50e:	c806                	sw	ra,16(sp)
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     510:	8ba1                	andi	a5,a5,8
{
     512:	84aa                	mv	s1,a0
     514:	8436                	mv	s0,a3
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     516:	e391                	bnez	a5,51a <disk_readp+0x16>
     518:	05a6                	slli	a1,a1,0x9

	res = RES_ERROR;
	if (send_cmd(CMD17, sector) == 0) {		/* READ_SINGLE_BLOCK */
     51a:	05100513          	li	a0,81
     51e:	c032                	sw	a2,0(sp)
     520:	3fa1                	jal	478 <send_cmd>
     522:	4602                	lw	a2,0(sp)
     524:	c909                	beqz	a0,536 <disk_readp+0x32>
	res = RES_ERROR;
     526:	4405                	li	s0,1
	rcvr_mmc();
     528:	3f05                	jal	458 <rcvr_mmc>
	}

	release_spi();

	return res;
}
     52a:	40c2                	lw	ra,16(sp)
     52c:	8522                	mv	a0,s0
     52e:	4432                	lw	s0,12(sp)
     530:	44a2                	lw	s1,8(sp)
     532:	0151                	addi	sp,sp,20
     534:	8082                	ret
			DLY_US(100);
     536:	6705                	lui	a4,0x1
	if (send_cmd(CMD17, sector) == 0) {		/* READ_SINGLE_BLOCK */
     538:	3e800793          	li	a5,1000
			DLY_US(100);
     53c:	2c070713          	addi	a4,a4,704 # 12c0 <pf_mount.constprop.0+0x1a0>
     540:	853a                	mv	a0,a4
     542:	c232                	sw	a2,4(sp)
     544:	c03e                	sw	a5,0(sp)
     546:	331d                	jal	26c <DelaySysTick>
			d = rcvr_mmc();
     548:	3f01                	jal	458 <rcvr_mmc>
		} while (d == 0xFF && --tmr);
     54a:	0ff00693          	li	a3,255
     54e:	4612                	lw	a2,4(sp)
     550:	00d51963          	bne	a0,a3,562 <disk_readp+0x5e>
     554:	4782                	lw	a5,0(sp)
     556:	6705                	lui	a4,0x1
     558:	2c070713          	addi	a4,a4,704 # 12c0 <pf_mount.constprop.0+0x1a0>
     55c:	17fd                	addi	a5,a5,-1
     55e:	f3ed                	bnez	a5,540 <disk_readp+0x3c>
     560:	b7d9                	j	526 <disk_readp+0x22>
		if (d == 0xFE) {				/* A data packet arrived */
     562:	0fe00793          	li	a5,254
     566:	fcf510e3          	bne	a0,a5,526 <disk_readp+0x22>
			bc = 514 - offset - count;
     56a:	20200793          	li	a5,514
     56e:	8f81                	sub	a5,a5,s0
     570:	8f91                	sub	a5,a5,a2
     572:	c03e                	sw	a5,0(sp)
			if (offset) skip_mmc(offset);
     574:	c219                	beqz	a2,57a <disk_readp+0x76>
     576:	8532                	mv	a0,a2
     578:	35dd                	jal	45e <skip_mmc>
			if (buff) {	/* Store data to the memory */
     57a:	cc81                	beqz	s1,592 <disk_readp+0x8e>
     57c:	9426                	add	s0,s0,s1
					*buff++ = rcvr_mmc();
     57e:	0485                	addi	s1,s1,1
     580:	3de1                	jal	458 <rcvr_mmc>
     582:	fea48fa3          	sb	a0,-1(s1)
				while (--count);
     586:	fe849ce3          	bne	s1,s0,57e <disk_readp+0x7a>
			skip_mmc(bc);
     58a:	4502                	lw	a0,0(sp)
			res = RES_OK;
     58c:	4401                	li	s0,0
			skip_mmc(bc);
     58e:	3dc1                	jal	45e <skip_mmc>
			res = RES_OK;
     590:	bf61                	j	528 <disk_readp+0x24>
				} while (--count);
     592:	147d                	addi	s0,s0,-1
					d = rcvr_mmc();
     594:	35d1                	jal	458 <rcvr_mmc>
				} while (--count);
     596:	fc75                	bnez	s0,592 <disk_readp+0x8e>
     598:	bfcd                	j	58a <disk_readp+0x86>

0000059a <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     59a:	4785                	li	a5,1
     59c:	00a7e463          	bltu	a5,a0,5a4 <get_fat+0xa>
     5a0:	4505                	li	a0,1
}
     5a2:	8082                	ret
	FATFS *fs = FatFs;
     5a4:	c8c1a783          	lw	a5,-884(gp) # 20000088 <FatFs>
	if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
     5a8:	4798                	lw	a4,8(a5)
     5aa:	fee57be3          	bgeu	a0,a4,5a0 <get_fat+0x6>
{
     5ae:	1141                	addi	sp,sp,-16
     5b0:	c606                	sw	ra,12(sp)
	switch (fs->fs_type) {
     5b2:	0007c703          	lbu	a4,0(a5)
     5b6:	4689                	li	a3,2
     5b8:	00d70963          	beq	a4,a3,5ca <get_fat+0x30>
     5bc:	468d                	li	a3,3
     5be:	02d70363          	beq	a4,a3,5e4 <get_fat+0x4a>
     5c2:	4505                	li	a0,1
}
     5c4:	40b2                	lw	ra,12(sp)
     5c6:	0141                	addi	sp,sp,16
     5c8:	8082                	ret
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
     5ca:	47cc                	lw	a1,12(a5)
     5cc:	0ff57613          	andi	a2,a0,255
     5d0:	8121                	srli	a0,a0,0x8
     5d2:	95aa                	add	a1,a1,a0
     5d4:	4689                	li	a3,2
     5d6:	0606                	slli	a2,a2,0x1
     5d8:	850a                	mv	a0,sp
     5da:	372d                	jal	504 <disk_readp>
     5dc:	f17d                	bnez	a0,5c2 <get_fat+0x28>
		return ld_word(buf);
     5de:	00015503          	lhu	a0,0(sp)
     5e2:	b7cd                	j	5c4 <get_fat+0x2a>
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
     5e4:	47cc                	lw	a1,12(a5)
     5e6:	07f57613          	andi	a2,a0,127
     5ea:	811d                	srli	a0,a0,0x7
     5ec:	95aa                	add	a1,a1,a0
     5ee:	4691                	li	a3,4
     5f0:	060a                	slli	a2,a2,0x2
     5f2:	850a                	mv	a0,sp
     5f4:	3f01                	jal	504 <disk_readp>
     5f6:	f571                	bnez	a0,5c2 <get_fat+0x28>
		return ld_dword(buf) & 0x0FFFFFFF;
     5f8:	850a                	mv	a0,sp
     5fa:	3399                	jal	340 <ld_dword>
     5fc:	0512                	slli	a0,a0,0x4
     5fe:	8111                	srli	a0,a0,0x4
     600:	b7d1                	j	5c4 <get_fat+0x2a>

00000602 <disk_writep.part.0>:
/*-----------------------------------------------------------------------*/
/* Write partial sector                                                  */
/*-----------------------------------------------------------------------*/
#if PF_USE_WRITE

DRESULT disk_writep (
     602:	1151                	addi	sp,sp,-12
     604:	c406                	sw	ra,8(sp)
     606:	c222                	sw	s0,4(sp)
			xmit_mmc(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sc) {	/* Initiate sector write transaction */
     608:	cd0d                	beqz	a0,642 <disk_writep.part.0+0x40>
			if (!(CardType & CT_BLOCK)) sc *= 512;	/* Convert to byte address if needed */
     60a:	c881c783          	lbu	a5,-888(gp) # 20000084 <CardType>
     60e:	85aa                	mv	a1,a0
     610:	8ba1                	andi	a5,a5,8
     612:	e399                	bnez	a5,618 <disk_writep.part.0+0x16>
     614:	00951593          	slli	a1,a0,0x9
			if (send_cmd(CMD24, sc) == 0) {			/* WRITE_SINGLE_BLOCK */
     618:	05800513          	li	a0,88
     61c:	3db1                	jal	478 <send_cmd>
	res = RES_ERROR;
     61e:	4405                	li	s0,1
			if (send_cmd(CMD24, sc) == 0) {			/* WRITE_SINGLE_BLOCK */
     620:	ed01                	bnez	a0,638 <disk_writep.part.0+0x36>
	SPI_transfer_8(d);
     622:	0ff00513          	li	a0,255
     626:	3519                	jal	42c <SPI_transfer_8>
     628:	0fe00513          	li	a0,254
     62c:	3501                	jal	42c <SPI_transfer_8>
				xmit_mmc(0xFF); xmit_mmc(0xFE);		/* Data block header */
				wc = 512;							/* Set byte counter */
     62e:	20000713          	li	a4,512
     632:	cae1a823          	sw	a4,-848(gp) # 200000ac <wc.0>
				res = RES_OK;
     636:	4401                	li	s0,0
			release_spi();
		}
	}

	return res;
}
     638:	40a2                	lw	ra,8(sp)
     63a:	8522                	mv	a0,s0
     63c:	4412                	lw	s0,4(sp)
     63e:	0131                	addi	sp,sp,12
     640:	8082                	ret
			bc = wc + 2;
     642:	cb01a403          	lw	s0,-848(gp) # 200000ac <wc.0>
     646:	0409                	addi	s0,s0,2
			while (bc--) xmit_mmc(0);	/* Fill left bytes and CRC with zeros */
     648:	e809                	bnez	s0,65a <disk_writep.part.0+0x58>
			if ((rcvr_mmc() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
     64a:	3539                	jal	458 <rcvr_mmc>
     64c:	897d                	andi	a0,a0,31
     64e:	4795                	li	a5,5
     650:	02f50563          	beq	a0,a5,67a <disk_writep.part.0+0x78>
	res = RES_ERROR;
     654:	4405                	li	s0,1
	rcvr_mmc();
     656:	3509                	jal	458 <rcvr_mmc>
     658:	b7c5                	j	638 <disk_writep.part.0+0x36>
	SPI_transfer_8(d);
     65a:	4501                	li	a0,0
     65c:	3bc1                	jal	42c <SPI_transfer_8>
     65e:	147d                	addi	s0,s0,-1
     660:	b7e5                	j	648 <disk_writep.part.0+0x46>
					DLY_US(100);
     662:	6505                	lui	a0,0x1
     664:	2c050513          	addi	a0,a0,704 # 12c0 <pf_mount.constprop.0+0x1a0>
     668:	3111                	jal	26c <DelaySysTick>
				for (tmr = 10000; rcvr_mmc() != 0xFF && tmr; tmr--)	/* Wait for ready (max 1000ms) */
     66a:	147d                	addi	s0,s0,-1
     66c:	33f5                	jal	458 <rcvr_mmc>
     66e:	0ff00793          	li	a5,255
     672:	00f50863          	beq	a0,a5,682 <disk_writep.part.0+0x80>
     676:	f475                	bnez	s0,662 <disk_writep.part.0+0x60>
     678:	bff1                	j	654 <disk_writep.part.0+0x52>
     67a:	6409                	lui	s0,0x2
     67c:	71040413          	addi	s0,s0,1808 # 2710 <cvt.1+0x30>
     680:	b7f5                	j	66c <disk_writep.part.0+0x6a>
				if (tmr) res = RES_OK;
     682:	00143413          	seqz	s0,s0
     686:	bfc1                	j	656 <disk_writep.part.0+0x54>

00000688 <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     688:	400057b7          	lui	a5,0x40005
     68c:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     690:	40078793          	addi	a5,a5,1024
     694:	10077713          	andi	a4,a4,256
     698:	cf09                	beqz	a4,6b2 <i2c_error+0x2a>
     69a:	0147d703          	lhu	a4,20(a5)
     69e:	4505                	li	a0,1
     6a0:	0742                	slli	a4,a4,0x10
     6a2:	8341                	srli	a4,a4,0x10
     6a4:	eff77713          	andi	a4,a4,-257
     6a8:	0742                	slli	a4,a4,0x10
     6aa:	8341                	srli	a4,a4,0x10
     6ac:	00e79a23          	sh	a4,20(a5)
     6b0:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     6b2:	0147d703          	lhu	a4,20(a5)
     6b6:	40077713          	andi	a4,a4,1024
     6ba:	cf09                	beqz	a4,6d4 <i2c_error+0x4c>
     6bc:	0147d703          	lhu	a4,20(a5)
     6c0:	4509                	li	a0,2
     6c2:	0742                	slli	a4,a4,0x10
     6c4:	8341                	srli	a4,a4,0x10
     6c6:	bff77713          	andi	a4,a4,-1025
     6ca:	0742                	slli	a4,a4,0x10
     6cc:	8341                	srli	a4,a4,0x10
     6ce:	00e79a23          	sh	a4,20(a5)
     6d2:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     6d4:	0147d703          	lhu	a4,20(a5)
     6d8:	20077713          	andi	a4,a4,512
     6dc:	cf09                	beqz	a4,6f6 <i2c_error+0x6e>
     6de:	0147d703          	lhu	a4,20(a5)
     6e2:	450d                	li	a0,3
     6e4:	0742                	slli	a4,a4,0x10
     6e6:	8341                	srli	a4,a4,0x10
     6e8:	dff77713          	andi	a4,a4,-513
     6ec:	0742                	slli	a4,a4,0x10
     6ee:	8341                	srli	a4,a4,0x10
     6f0:	00e79a23          	sh	a4,20(a5)
     6f4:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     6f6:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     6fa:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     6fc:	832d                	srli	a4,a4,0xb
     6fe:	8b05                	andi	a4,a4,1
     700:	cf01                	beqz	a4,718 <i2c_error+0x90>
     702:	0147d703          	lhu	a4,20(a5)
     706:	76fd                	lui	a3,0xfffff
     708:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     70c:	0742                	slli	a4,a4,0x10
     70e:	8341                	srli	a4,a4,0x10
     710:	8f75                	and	a4,a4,a3
     712:	00e79a23          	sh	a4,20(a5)
     716:	4511                	li	a0,4
}
     718:	8082                	ret

0000071a <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     71a:	415c                	lw	a5,4(a0)
     71c:	e7b1                	bnez	a5,768 <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     71e:	00855783          	lhu	a5,8(a0)
     722:	40005737          	lui	a4,0x40005
     726:	0786                	slli	a5,a5,0x1
     728:	0fe7f793          	andi	a5,a5,254
     72c:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     730:	6789                	lui	a5,0x2
     732:	71078793          	addi	a5,a5,1808 # 2710 <cvt.1+0x30>
	return (status & status_mask) == status_mask; 
     736:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     73a:	c8f1ae23          	sw	a5,-868(gp) # 20000098 <_i2c_timeout>
     73e:	4501                	li	a0,0
     740:	c9c18693          	addi	a3,gp,-868 # 20000098 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     744:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     748:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.d894f163+0x667c5>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     74c:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     750:	01071593          	slli	a1,a4,0x10
     754:	41835703          	lhu	a4,1048(t1)
     758:	81c1                	srli	a1,a1,0x10
     75a:	0742                	slli	a4,a4,0x10
     75c:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     75e:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     760:	00c71663          	bne	a4,a2,76c <i2c_send_addr_write+0x52>
     764:	c111                	beqz	a0,768 <i2c_send_addr_write+0x4e>
     766:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     768:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     76a:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     76c:	17fd                	addi	a5,a5,-1
     76e:	4505                	li	a0,1
     770:	fff1                	bnez	a5,74c <i2c_send_addr_write+0x32>
{
     772:	1151                	addi	sp,sp,-12
     774:	c406                	sw	ra,8(sp)
     776:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     77a:	3739                	jal	688 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     77c:	e111                	bnez	a0,780 <i2c_send_addr_write+0x66>
     77e:	4515                	li	a0,5
}
     780:	40a2                	lw	ra,8(sp)
     782:	0131                	addi	sp,sp,12
     784:	8082                	ret

00000786 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     786:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     788:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     78a:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     78c:	71078793          	addi	a5,a5,1808 # 2710 <cvt.1+0x30>
     790:	c8f1ae23          	sw	a5,-868(gp) # 20000098 <_i2c_timeout>
{
     794:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     796:	c002                	sw	zero,0(sp)
     798:	c202                	sw	zero,4(sp)
     79a:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     79e:	4601                	li	a2,0
     7a0:	c9c18713          	addi	a4,gp,-868 # 20000098 <_i2c_timeout>
     7a4:	400055b7          	lui	a1,0x40005
     7a8:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     7ac:	8a89                	andi	a3,a3,2
     7ae:	e689                	bnez	a3,7b8 <i2c_ping+0x32>
     7b0:	c211                	beqz	a2,7b4 <i2c_ping+0x2e>
     7b2:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
     7b4:	4501                	li	a0,0
     7b6:	a809                	j	7c8 <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     7b8:	17fd                	addi	a5,a5,-1
     7ba:	4605                	li	a2,1
     7bc:	f7f5                	bnez	a5,7a8 <i2c_ping+0x22>
     7be:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
     7c2:	35d9                	jal	688 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     7c4:	e111                	bnez	a0,7c8 <i2c_ping+0x42>
     7c6:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     7c8:	40005737          	lui	a4,0x40005
     7cc:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     7d0:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     7d4:	07c2                	slli	a5,a5,0x10
     7d6:	83c1                	srli	a5,a5,0x10
     7d8:	1007e793          	ori	a5,a5,256
     7dc:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     7e0:	00030737          	lui	a4,0x30
     7e4:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     7e6:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     7ea:	01079693          	slli	a3,a5,0x10
     7ee:	4185d783          	lhu	a5,1048(a1)
     7f2:	82c1                	srli	a3,a3,0x10
     7f4:	07c2                	slli	a5,a5,0x10
     7f6:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     7f8:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     7fa:	fee796e3          	bne	a5,a4,7e6 <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     7fe:	e119                	bnez	a0,804 <i2c_ping+0x7e>
     800:	850a                	mv	a0,sp
     802:	3f21                	jal	71a <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     804:	40005737          	lui	a4,0x40005
     808:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     80c:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     80e:	07c2                	slli	a5,a5,0x10
     810:	83c1                	srli	a5,a5,0x10
     812:	2007e793          	ori	a5,a5,512
     816:	40f71023          	sh	a5,1024(a4)
}
     81a:	0161                	addi	sp,sp,24
     81c:	8082                	ret

0000081e <pf_write.constprop.0>:
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/
#if PF_USE_WRITE

FRESULT pf_write (
     81e:	fdc10113          	addi	sp,sp,-36
     822:	cc26                	sw	s1,24(sp)
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	BYTE cs;
	UINT wcnt;
	FATFS *fs = FatFs;
     824:	c8c1a483          	lw	s1,-884(gp) # 20000088 <FatFs>


	*bw = 0;
     828:	ca01a023          	sw	zero,-864(gp) # 2000009c <br>
     82c:	ca018793          	addi	a5,gp,-864 # 2000009c <br>
FRESULT pf_write (
     830:	ce22                	sw	s0,28(sp)
     832:	d006                	sw	ra,32(sp)
     834:	c02a                	sw	a0,0(sp)
     836:	c43e                	sw	a5,8(sp)
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     838:	4415                	li	s0,5
     83a:	c88d                	beqz	s1,86c <pf_write.constprop.0+0x4e>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
     83c:	0014c703          	lbu	a4,1(s1)
     840:	4411                	li	s0,4
     842:	00177693          	andi	a3,a4,1
     846:	c29d                	beqz	a3,86c <pf_write.constprop.0+0x4e>
     848:	842e                	mv	s0,a1
     84a:	04077713          	andi	a4,a4,64

	if (!btw) {		/* Finalize request */
     84e:	e595                	bnez	a1,87a <pf_write.constprop.0+0x5c>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) ABORT(FR_DISK_ERR);
     850:	cb01                	beqz	a4,860 <pf_write.constprop.0+0x42>
     852:	4501                	li	a0,0
     854:	337d                	jal	602 <disk_writep.part.0>
     856:	c509                	beqz	a0,860 <pf_write.constprop.0+0x42>
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) ABORT(FR_DISK_ERR);	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
		btw -= wcnt; *bw += wcnt;
		if ((UINT)fs->fptr % 512 == 0) {
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
     858:	000480a3          	sb	zero,1(s1)
     85c:	4405                	li	s0,1
     85e:	a039                	j	86c <pf_write.constprop.0+0x4e>
		fs->flag &= ~FA__WIP;
     860:	0014c703          	lbu	a4,1(s1)
     864:	fbf77713          	andi	a4,a4,-65
     868:	00e480a3          	sb	a4,1(s1)
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
}
     86c:	5082                	lw	ra,32(sp)
     86e:	8522                	mv	a0,s0
     870:	4472                	lw	s0,28(sp)
     872:	44e2                	lw	s1,24(sp)
     874:	02410113          	addi	sp,sp,36
     878:	8082                	ret
		if (!(fs->flag & FA__WIP)) {	/* Round-down fptr to the sector boundary */
     87a:	e709                	bnez	a4,884 <pf_write.constprop.0+0x66>
			fs->fptr &= 0xFFFFFE00;
     87c:	4c98                	lw	a4,24(s1)
     87e:	e0077713          	andi	a4,a4,-512
     882:	cc98                	sw	a4,24(s1)
	remain = fs->fsize - fs->fptr;
     884:	4cd8                	lw	a4,28(s1)
     886:	4c94                	lw	a3,24(s1)
     888:	8f15                	sub	a4,a4,a3
     88a:	00877363          	bgeu	a4,s0,890 <pf_write.constprop.0+0x72>
     88e:	843a                	mv	s0,a4
	while (btw)	{									/* Repeat until all data transferred */
     890:	dc71                	beqz	s0,86c <pf_write.constprop.0+0x4e>
		if ((UINT)fs->fptr % 512 == 0) {			/* On the sector boundary? */
     892:	4c98                	lw	a4,24(s1)
     894:	1ff77693          	andi	a3,a4,511
     898:	ee9d                	bnez	a3,8d6 <pf_write.constprop.0+0xb8>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
     89a:	0024c503          	lbu	a0,2(s1)
     89e:	00975693          	srli	a3,a4,0x9
     8a2:	157d                	addi	a0,a0,-1
     8a4:	8d75                	and	a0,a0,a3
     8a6:	0ff57793          	andi	a5,a0,255
     8aa:	c23e                	sw	a5,4(sp)
			if (!cs) {								/* On the cluster boundary? */
     8ac:	e799                	bnez	a5,8ba <pf_write.constprop.0+0x9c>
				if (fs->fptr == 0) {				/* On the top of the file? */
     8ae:	e745                	bnez	a4,956 <pf_write.constprop.0+0x138>
					clst = fs->org_clust;
     8b0:	5088                	lw	a0,32(s1)
				if (clst <= 1) ABORT(FR_DISK_ERR);
     8b2:	4705                	li	a4,1
     8b4:	faa772e3          	bgeu	a4,a0,858 <pf_write.constprop.0+0x3a>
				fs->curr_clust = clst;				/* Update current cluster */
     8b8:	d0c8                	sw	a0,36(s1)
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
     8ba:	50c8                	lw	a0,36(s1)
     8bc:	344d                	jal	35e <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
     8be:	dd49                	beqz	a0,858 <pf_write.constprop.0+0x3a>
			fs->dsect = sect + cs;
     8c0:	4792                	lw	a5,4(sp)
     8c2:	953e                	add	a0,a0,a5
     8c4:	d488                	sw	a0,40(s1)
     8c6:	3b35                	jal	602 <disk_writep.part.0>
			if (disk_writep(0, fs->dsect)) ABORT(FR_DISK_ERR);	/* Initiate a sector write operation */
     8c8:	f941                	bnez	a0,858 <pf_write.constprop.0+0x3a>
			fs->flag |= FA__WIP;
     8ca:	0014c703          	lbu	a4,1(s1)
     8ce:	04076713          	ori	a4,a4,64
     8d2:	00e480a3          	sb	a4,1(s1)
		wcnt = 512 - (UINT)fs->fptr % 512;			/* Number of bytes to write to the sector */
     8d6:	4c98                	lw	a4,24(s1)
     8d8:	20000693          	li	a3,512
     8dc:	1ff77713          	andi	a4,a4,511
     8e0:	40e68733          	sub	a4,a3,a4
     8e4:	00e47363          	bgeu	s0,a4,8ea <pf_write.constprop.0+0xcc>
     8e8:	8722                	mv	a4,s0
	if (buff) {		/* Send data bytes */
     8ea:	4782                	lw	a5,0(sp)
     8ec:	cba5                	beqz	a5,95c <pf_write.constprop.0+0x13e>
     8ee:	00e782b3          	add	t0,a5,a4
     8f2:	863e                	mv	a2,a5
		while (bc && wc) {		/* Send data bytes to the card */
     8f4:	cb018313          	addi	t1,gp,-848 # 200000ac <wc.0>
     8f8:	00032683          	lw	a3,0(t1)
     8fc:	c685                	beqz	a3,924 <pf_write.constprop.0+0x106>
	SPI_transfer_8(d);
     8fe:	00064503          	lbu	a0,0(a2)
			xmit_mmc(*buff++);
     902:	0605                	addi	a2,a2,1
     904:	ca16                	sw	t0,20(sp)
     906:	c836                	sw	a3,16(sp)
     908:	c63a                	sw	a4,12(sp)
	SPI_transfer_8(d);
     90a:	c232                	sw	a2,4(sp)
     90c:	3605                	jal	42c <SPI_transfer_8>
			wc--; bc--;
     90e:	46c2                	lw	a3,16(sp)
		while (bc && wc) {		/* Send data bytes to the card */
     910:	4612                	lw	a2,4(sp)
     912:	42d2                	lw	t0,20(sp)
			wc--; bc--;
     914:	16fd                	addi	a3,a3,-1
     916:	cb018313          	addi	t1,gp,-848 # 200000ac <wc.0>
     91a:	00d32023          	sw	a3,0(t1)
		while (bc && wc) {		/* Send data bytes to the card */
     91e:	4732                	lw	a4,12(sp)
     920:	fc561ae3          	bne	a2,t0,8f4 <pf_write.constprop.0+0xd6>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
     924:	4782                	lw	a5,0(sp)
     926:	4c94                	lw	a3,24(s1)
		btw -= wcnt; *bw += wcnt;
     928:	8c19                	sub	s0,s0,a4
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
     92a:	97ba                	add	a5,a5,a4
     92c:	c03e                	sw	a5,0(sp)
		btw -= wcnt; *bw += wcnt;
     92e:	47a2                	lw	a5,8(sp)
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
     930:	96ba                	add	a3,a3,a4
     932:	cc94                	sw	a3,24(s1)
		btw -= wcnt; *bw += wcnt;
     934:	4390                	lw	a2,0(a5)
		if ((UINT)fs->fptr % 512 == 0) {
     936:	1ff6f693          	andi	a3,a3,511
		btw -= wcnt; *bw += wcnt;
     93a:	9732                	add	a4,a4,a2
     93c:	c398                	sw	a4,0(a5)
		if ((UINT)fs->fptr % 512 == 0) {
     93e:	faa9                	bnez	a3,890 <pf_write.constprop.0+0x72>
     940:	4501                	li	a0,0
     942:	31c1                	jal	602 <disk_writep.part.0>
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
     944:	f0051ae3          	bnez	a0,858 <pf_write.constprop.0+0x3a>
			fs->flag &= ~FA__WIP;
     948:	0014c703          	lbu	a4,1(s1)
     94c:	fbf77713          	andi	a4,a4,-65
     950:	00e480a3          	sb	a4,1(s1)
     954:	bf35                	j	890 <pf_write.constprop.0+0x72>
					clst = get_fat(fs->curr_clust);
     956:	50c8                	lw	a0,36(s1)
     958:	3189                	jal	59a <get_fat>
     95a:	bfa1                	j	8b2 <pf_write.constprop.0+0x94>
     95c:	853a                	mv	a0,a4
     95e:	c23a                	sw	a4,4(sp)
     960:	314d                	jal	602 <disk_writep.part.0>
		if (disk_writep(p, wcnt)) ABORT(FR_DISK_ERR);	/* Send data to the sector */
     962:	4712                	lw	a4,4(sp)
     964:	d161                	beqz	a0,924 <pf_write.constprop.0+0x106>
     966:	bdcd                	j	858 <pf_write.constprop.0+0x3a>

00000968 <pf_open.constprop.0>:
FRESULT pf_open (
     968:	715d                	addi	sp,sp,-80
     96a:	c4a2                	sw	s0,72(sp)
	FATFS *fs = FatFs;
     96c:	c8c1a403          	lw	s0,-884(gp) # 20000088 <FatFs>
FRESULT pf_open (
     970:	c686                	sw	ra,76(sp)
     972:	c2a6                	sw	s1,68(sp)
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     974:	4795                	li	a5,5
     976:	c061                	beqz	s0,a36 <pf_open.constprop.0+0xce>
	fs->flag = 0;
     978:	000400a3          	sb	zero,1(s0)
	dj.fn = sp;
     97c:	005c                	addi	a5,sp,4
	dj->sclust = 0;						/* Set start directory (always root dir) */
     97e:	6489                	lui	s1,0x2
	dj.fn = sp;
     980:	ca3e                	sw	a5,20(sp)
	dj->sclust = 0;						/* Set start directory (always root dir) */
     982:	cc02                	sw	zero,24(sp)
     984:	28048493          	addi	s1,s1,640 # 2280 <I2C1_ER_IRQHandler+0x7e>
     988:	4352                	lw	t1,20(sp)
	while (cnt--) *d++ = (char)val;
     98a:	02000593          	li	a1,32
     98e:	462d                	li	a2,11
     990:	851a                	mv	a0,t1
     992:	25d000ef          	jal	ra,13ee <memset>
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
     996:	6789                	lui	a5,0x2
	while (cnt--) *d++ = (char)val;
     998:	832a                	mv	t1,a0
	si = i = 0; ni = 8;
     99a:	4681                	li	a3,0
     99c:	4581                	li	a1,0
     99e:	4721                	li	a4,8
		if (c == '.' || i >= ni) {
     9a0:	02e00513          	li	a0,46
			if (ni != 8 || c != '.') break;
     9a4:	42a1                	li	t0,8
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
     9a6:	6e078393          	addi	t2,a5,1760 # 26e0 <cvt.1>
		c = p[si++];
     9aa:	00158613          	addi	a2,a1,1
     9ae:	95a6                	add	a1,a1,s1
     9b0:	0005c783          	lbu	a5,0(a1)
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     9b4:	02000593          	li	a1,32
		c = p[si++];
     9b8:	0ff67613          	andi	a2,a2,255
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     9bc:	04f5f863          	bgeu	a1,a5,a0c <pf_open.constprop.0+0xa4>
     9c0:	02f00593          	li	a1,47
     9c4:	04b78463          	beq	a5,a1,a0c <pf_open.constprop.0+0xa4>
		if (c == '.' || i >= ni) {
     9c8:	12a78c63          	beq	a5,a0,b00 <pf_open.constprop.0+0x198>
     9cc:	04e6f063          	bgeu	a3,a4,a0c <pf_open.constprop.0+0xa4>
		if (c >= 0x80) c = cvt[c - 0x80];	/* To upper extended char (SBCS) */
     9d0:	01879593          	slli	a1,a5,0x18
     9d4:	85e1                	srai	a1,a1,0x18
     9d6:	0005d563          	bgez	a1,9e0 <pf_open.constprop.0+0x78>
     9da:	979e                	add	a5,a5,t2
     9dc:	f807c783          	lbu	a5,-128(a5)
			if (PF_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
     9e0:	f9f78593          	addi	a1,a5,-97
     9e4:	0ff5f593          	andi	a1,a1,255
     9e8:	40e5                	li	ra,25
     9ea:	00b0e563          	bltu	ra,a1,9f4 <pf_open.constprop.0+0x8c>
     9ee:	1781                	addi	a5,a5,-32
     9f0:	0ff7f793          	andi	a5,a5,255
			sfn[i++] = c;
     9f4:	00168593          	addi	a1,a3,1
     9f8:	969a                	add	a3,a3,t1
     9fa:	00f68023          	sb	a5,0(a3)
     9fe:	87ba                	mv	a5,a4
     a00:	0ff5f713          	andi	a4,a1,255
			i = 8; ni = 11;
     a04:	86ba                	mv	a3,a4
		c = p[si++];
     a06:	85b2                	mv	a1,a2
     a08:	873e                	mv	a4,a5
     a0a:	b745                	j	9aa <pf_open.constprop.0+0x42>
	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     a0c:	0217b793          	sltiu	a5,a5,33
     a10:	00f305a3          	sb	a5,11(t1)
	res = dir_rewind(dj);			/* Rewind directory object */
     a14:	0808                	addi	a0,sp,16
	*path = &p[si];						/* Rerurn pointer to the next segment */
     a16:	94b2                	add	s1,s1,a2
	res = dir_rewind(dj);			/* Rewind directory object */
     a18:	3245                	jal	3b8 <dir_rewind>
     a1a:	87aa                	mv	a5,a0
	if (res != FR_OK) return res;
     a1c:	ed09                	bnez	a0,a36 <pf_open.constprop.0+0xce>
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
     a1e:	01015603          	lhu	a2,16(sp)
     a22:	5582                	lw	a1,32(sp)
     a24:	02000693          	li	a3,32
     a28:	8a3d                	andi	a2,a2,15
     a2a:	0616                	slli	a2,a2,0x5
     a2c:	1048                	addi	a0,sp,36
     a2e:	3cd9                	jal	504 <disk_readp>
     a30:	87aa                	mv	a5,a0
		if (res != FR_OK) break;
     a32:	c901                	beqz	a0,a42 <pf_open.constprop.0+0xda>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     a34:	4785                	li	a5,1
}
     a36:	40b6                	lw	ra,76(sp)
     a38:	4426                	lw	s0,72(sp)
     a3a:	4496                	lw	s1,68(sp)
     a3c:	853e                	mv	a0,a5
     a3e:	6161                	addi	sp,sp,80
     a40:	8082                	ret
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     a42:	02414703          	lbu	a4,36(sp)
     a46:	e319                	bnez	a4,a4c <pf_open.constprop.0+0xe4>
     a48:	478d                	li	a5,3
     a4a:	b7f5                	j	a36 <pf_open.constprop.0+0xce>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) break;	/* Is it a valid entry? */
     a4c:	02f14703          	lbu	a4,47(sp)
     a50:	00877693          	andi	a3,a4,8
     a54:	ee91                	bnez	a3,a70 <pf_open.constprop.0+0x108>
     a56:	4652                	lw	a2,20(sp)
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     a58:	432d                	li	t1,11
     a5a:	104c                	addi	a1,sp,36
     a5c:	95b6                	add	a1,a1,a3
     a5e:	0685                	addi	a3,a3,1
     a60:	00d60533          	add	a0,a2,a3
     a64:	0005c583          	lbu	a1,0(a1)
     a68:	fff54503          	lbu	a0,-1(a0)
     a6c:	02b50863          	beq	a0,a1,a9c <pf_open.constprop.0+0x134>
	i = dj->index + 1;
     a70:	01015783          	lhu	a5,16(sp)
     a74:	0785                	addi	a5,a5,1
     a76:	07c2                	slli	a5,a5,0x10
     a78:	83c1                	srli	a5,a5,0x10
	if (!i || !dj->sect) return FR_NO_FILE;	/* Report EOT when index has reached 65535 */
     a7a:	d7f9                	beqz	a5,a48 <pf_open.constprop.0+0xe0>
     a7c:	5702                	lw	a4,32(sp)
     a7e:	d769                	beqz	a4,a48 <pf_open.constprop.0+0xe0>
	if (!(i % 16)) {		/* Sector changed? */
     a80:	00f7f693          	andi	a3,a5,15
     a84:	ea89                	bnez	a3,a96 <pf_open.constprop.0+0x12e>
		if (dj->clust == 0) {	/* Static table */
     a86:	4572                	lw	a0,28(sp)
		dj->sect++;			/* Next sector */
     a88:	0705                	addi	a4,a4,1
     a8a:	d03a                	sw	a4,32(sp)
		if (dj->clust == 0) {	/* Static table */
     a8c:	e505                	bnez	a0,ab4 <pf_open.constprop.0+0x14c>
			if (i >= fs->n_rootdir) return FR_NO_FILE;	/* Report EOT when end of table */
     a8e:	00445703          	lhu	a4,4(s0)
     a92:	fae7fbe3          	bgeu	a5,a4,a48 <pf_open.constprop.0+0xe0>
	dj->index = i;
     a96:	00f11823          	sh	a5,16(sp)
     a9a:	b751                	j	a1e <pf_open.constprop.0+0xb6>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     a9c:	fa669fe3          	bne	a3,t1,a5a <pf_open.constprop.0+0xf2>
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
     aa0:	00b64683          	lbu	a3,11(a2)
     aa4:	8b41                	andi	a4,a4,16
     aa6:	ee85                	bnez	a3,ade <pf_open.constprop.0+0x176>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
     aa8:	d345                	beqz	a4,a48 <pf_open.constprop.0+0xe0>
			dj->sclust = get_clust(dir);	/* Follow next */
     aaa:	1048                	addi	a0,sp,36
     aac:	8ddff0ef          	jal	ra,388 <get_clust>
     ab0:	cc2a                	sw	a0,24(sp)
     ab2:	bdd9                	j	988 <pf_open.constprop.0+0x20>
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
     ab4:	00244703          	lbu	a4,2(s0)
     ab8:	0047d693          	srli	a3,a5,0x4
     abc:	177d                	addi	a4,a4,-1
     abe:	8f75                	and	a4,a4,a3
     ac0:	fb79                	bnez	a4,a96 <pf_open.constprop.0+0x12e>
     ac2:	c03e                	sw	a5,0(sp)
				clst = get_fat(dj->clust);		/* Get next cluster */
     ac4:	3cd9                	jal	59a <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
     ac6:	4685                	li	a3,1
     ac8:	f6a6f6e3          	bgeu	a3,a0,a34 <pf_open.constprop.0+0xcc>
				if (clst >= fs->n_fatent) return FR_NO_FILE;	/* Report EOT when it reached end of dynamic table */
     acc:	4414                	lw	a3,8(s0)
     ace:	f6d57de3          	bgeu	a0,a3,a48 <pf_open.constprop.0+0xe0>
				dj->clust = clst;				/* Initialize data for new cluster */
     ad2:	ce2a                	sw	a0,28(sp)
				dj->sect = clust2sect(clst);
     ad4:	88bff0ef          	jal	ra,35e <clust2sect>
     ad8:	4782                	lw	a5,0(sp)
     ada:	d02a                	sw	a0,32(sp)
     adc:	bf6d                	j	a96 <pf_open.constprop.0+0x12e>
     ade:	c03e                	sw	a5,0(sp)
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) return FR_NO_FILE;	/* It is a directory */
     ae0:	f725                	bnez	a4,a48 <pf_open.constprop.0+0xe0>
	fs->org_clust = get_clust(dir);		/* File start cluster */
     ae2:	1048                	addi	a0,sp,36
     ae4:	8a5ff0ef          	jal	ra,388 <get_clust>
     ae8:	d008                	sw	a0,32(s0)
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
     aea:	0088                	addi	a0,sp,64
     aec:	855ff0ef          	jal	ra,340 <ld_dword>
	fs->flag = FA_OPENED;
     af0:	4705                	li	a4,1
     af2:	4782                	lw	a5,0(sp)
	fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
     af4:	cc48                	sw	a0,28(s0)
	fs->fptr = 0;						/* File pointer */
     af6:	00042c23          	sw	zero,24(s0)
	fs->flag = FA_OPENED;
     afa:	00e400a3          	sb	a4,1(s0)
     afe:	bf25                	j	a36 <pf_open.constprop.0+0xce>
			if (ni != 8 || c != '.') break;
     b00:	f05716e3          	bne	a4,t0,a0c <pf_open.constprop.0+0xa4>
			i = 8; ni = 11;
     b04:	47ad                	li	a5,11
     b06:	bdfd                	j	a04 <pf_open.constprop.0+0x9c>

00000b08 <i2c_write_raw.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     b08:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     b0a:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     b0c:	71078793          	addi	a5,a5,1808 # 2710 <cvt.1+0x30>
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     b10:	c626                	sw	s1,12(sp)
     b12:	c22e                	sw	a1,4(sp)
     b14:	ca06                	sw	ra,20(sp)
     b16:	c822                	sw	s0,16(sp)
     b18:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     b1a:	c8f1ae23          	sw	a5,-868(gp) # 20000098 <_i2c_timeout>
     b1e:	4601                	li	a2,0
     b20:	c9c18493          	addi	s1,gp,-868 # 20000098 <_i2c_timeout>
     b24:	400055b7          	lui	a1,0x40005
     b28:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     b2c:	8a89                	andi	a3,a3,2
     b2e:	e6bd                	bnez	a3,b9c <i2c_write_raw.constprop.0+0x94>
     b30:	c211                	beqz	a2,b34 <i2c_write_raw.constprop.0+0x2c>
     b32:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     b34:	400056b7          	lui	a3,0x40005
     b38:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     b3c:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     b40:	07c2                	slli	a5,a5,0x10
     b42:	83c1                	srli	a5,a5,0x10
     b44:	1007e793          	ori	a5,a5,256
     b48:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     b4c:	000306b7          	lui	a3,0x30
     b50:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     b52:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     b56:	01079613          	slli	a2,a5,0x10
     b5a:	4185d783          	lhu	a5,1048(a1)
     b5e:	8241                	srli	a2,a2,0x10
     b60:	07c2                	slli	a5,a5,0x10
     b62:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     b64:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     b66:	fed796e3          	bne	a5,a3,b52 <i2c_write_raw.constprop.0+0x4a>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     b6a:	c1018513          	addi	a0,gp,-1008 # 2000000c <dev_ssd1306>
     b6e:	3675                	jal	71a <i2c_send_addr_write>
     b70:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     b72:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
     b74:	e91d                	bnez	a0,baa <i2c_write_raw.constprop.0+0xa2>
		while(cbyte < len)
     b76:	4792                	lw	a5,4(sp)
     b78:	02f67963          	bgeu	a2,a5,baa <i2c_write_raw.constprop.0+0xa2>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     b7c:	6689                	lui	a3,0x2
     b7e:	71068693          	addi	a3,a3,1808 # 2710 <cvt.1+0x30>
     b82:	c094                	sw	a3,0(s1)
     b84:	4501                	li	a0,0
     b86:	40005337          	lui	t1,0x40005
     b8a:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     b8e:	0805f593          	andi	a1,a1,128
     b92:	c5b9                	beqz	a1,be0 <i2c_write_raw.constprop.0+0xd8>
     b94:	c111                	beqz	a0,b98 <i2c_write_raw.constprop.0+0x90>
     b96:	c094                	sw	a3,0(s1)
     b98:	4501                	li	a0,0
     b9a:	a8a9                	j	bf4 <i2c_write_raw.constprop.0+0xec>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     b9c:	17fd                	addi	a5,a5,-1
     b9e:	4605                	li	a2,1
     ba0:	f7c1                	bnez	a5,b28 <i2c_write_raw.constprop.0+0x20>
	i2c_err_t i2c_err = i2c_error();
     ba2:	34dd                	jal	688 <i2c_error>
     ba4:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     ba6:	e111                	bnez	a0,baa <i2c_write_raw.constprop.0+0xa2>
     ba8:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     baa:	6689                	lui	a3,0x2
     bac:	71068693          	addi	a3,a3,1808 # 2710 <cvt.1+0x30>
	return (status & status_mask) == status_mask; 
     bb0:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     bb4:	c094                	sw	a3,0(s1)
     bb6:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     bb8:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     bbc:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.d894f163+0x667c7>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     bc0:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     bc4:	01061513          	slli	a0,a2,0x10
     bc8:	4182d603          	lhu	a2,1048(t0)
     bcc:	8141                	srli	a0,a0,0x10
     bce:	0642                	slli	a2,a2,0x10
     bd0:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     bd2:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     bd4:	04b61363          	bne	a2,a1,c1a <i2c_write_raw.constprop.0+0x112>
     bd8:	04030a63          	beqz	t1,c2c <i2c_write_raw.constprop.0+0x124>
     bdc:	c094                	sw	a3,0(s1)
     bde:	a0b9                	j	c2c <i2c_write_raw.constprop.0+0x124>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     be0:	16fd                	addi	a3,a3,-1
     be2:	4505                	li	a0,1
     be4:	f2dd                	bnez	a3,b8a <i2c_write_raw.constprop.0+0x82>
     be6:	c432                	sw	a2,8(sp)
     be8:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     bec:	3c71                	jal	688 <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     bee:	4622                	lw	a2,8(sp)
     bf0:	e111                	bnez	a0,bf4 <i2c_write_raw.constprop.0+0xec>
     bf2:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     bf4:	4782                	lw	a5,0(sp)
     bf6:	00c786b3          	add	a3,a5,a2
     bfa:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     bfe:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     c00:	400056b7          	lui	a3,0x40005
     c04:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     c08:	0ff67613          	andi	a2,a2,255
     c0c:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     c0e:	e501                	bnez	a0,c16 <i2c_write_raw.constprop.0+0x10e>
     c10:	3ca5                	jal	688 <i2c_error>
     c12:	4622                	lw	a2,8(sp)
     c14:	d12d                	beqz	a0,b76 <i2c_write_raw.constprop.0+0x6e>
     c16:	842a                	mv	s0,a0
     c18:	bf49                	j	baa <i2c_write_raw.constprop.0+0xa2>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     c1a:	16fd                	addi	a3,a3,-1
     c1c:	4305                	li	t1,1
     c1e:	f2cd                	bnez	a3,bc0 <i2c_write_raw.constprop.0+0xb8>
     c20:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     c24:	3495                	jal	688 <i2c_error>
     c26:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     c28:	e111                	bnez	a0,c2c <i2c_write_raw.constprop.0+0x124>
     c2a:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     c2c:	400056b7          	lui	a3,0x40005
     c30:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     c34:	40d2                	lw	ra,20(sp)
     c36:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     c38:	0742                	slli	a4,a4,0x10
}
     c3a:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     c3c:	8341                	srli	a4,a4,0x10
     c3e:	20076713          	ori	a4,a4,512
     c42:	40e69023          	sh	a4,1024(a3)
}
     c46:	44b2                	lw	s1,12(sp)
     c48:	0161                	addi	sp,sp,24
     c4a:	8082                	ret

00000c4c <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     c4c:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     c4e:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     c52:	4589                	li	a1,2
     c54:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     c56:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     c58:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     c5c:	3575                	jal	b08 <i2c_write_raw.constprop.0>
}
     c5e:	40b2                	lw	ra,12(sp)
     c60:	0ff57513          	andi	a0,a0,255
     c64:	0141                	addi	sp,sp,16
     c66:	8082                	ret

00000c68 <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     c68:	e00007b7          	lui	a5,0xe0000
     c6c:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
}
     c70:	8082                	ret

00000c72 <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c72:	e0000737          	lui	a4,0xe0000
     c76:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     c7a:	1111                	addi	sp,sp,-28
     c7c:	cc06                	sw	ra,24(sp)
     c7e:	ca22                	sw	s0,20(sp)
     c80:	c826                	sw	s1,16(sp)
     c82:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c84:	0c07f793          	andi	a5,a5,192
     c88:	0c000693          	li	a3,192
     c8c:	0cd78963          	beq	a5,a3,d5e <_write.constprop.0+0xec>
	char buffer[4] = { 0 };
     c90:	c602                	sw	zero,12(sp)
     c92:	842e                	mv	s0,a1
	if( size == 0 )
     c94:	e5f9                	bnez	a1,d62 <_write.constprop.0+0xf0>
		lastdmd = (*DMDATA0);
     c96:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     c9a:	c789                	beqz	a5,ca4 <_write.constprop.0+0x32>
     c9c:	0807f793          	andi	a5,a5,128
     ca0:	e391                	bnez	a5,ca4 <_write.constprop.0+0x32>
     ca2:	37d9                	jal	c68 <internal_handle_input.constprop.0>
}
     ca4:	40e2                	lw	ra,24(sp)
     ca6:	8522                	mv	a0,s0
     ca8:	4452                	lw	s0,20(sp)
     caa:	44c2                	lw	s1,16(sp)
     cac:	0171                	addi	sp,sp,28
     cae:	8082                	ret
		int tosend = size - place;
     cb0:	409405b3          	sub	a1,s0,s1
     cb4:	469d                	li	a3,7
     cb6:	872e                	mv	a4,a1
     cb8:	00b6d363          	bge	a3,a1,cbe <_write.constprop.0+0x4c>
     cbc:	471d                	li	a4,7
     cbe:	001006b7          	lui	a3,0x100
     cc2:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     cc4:	e0000537          	lui	a0,0xe0000
     cc8:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     ccc:	0f450313          	addi	t1,a0,244
     cd0:	08067293          	andi	t0,a2,128
     cd4:	06029d63          	bnez	t0,d4e <_write.constprop.0+0xdc>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     cd8:	c611                	beqz	a2,ce4 <_write.constprop.0+0x72>
     cda:	c43a                	sw	a4,8(sp)
     cdc:	c22e                	sw	a1,4(sp)
     cde:	3769                	jal	c68 <internal_handle_input.constprop.0>
     ce0:	4722                	lw	a4,8(sp)
     ce2:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     ce4:	4689                	li	a3,2
     ce6:	4601                	li	a2,0
     ce8:	00b6d463          	bge	a3,a1,cf0 <_write.constprop.0+0x7e>
     cec:	ffd70613          	addi	a2,a4,-3
     cf0:	4782                	lw	a5,0(sp)
     cf2:	00348593          	addi	a1,s1,3
     cf6:	0068                	addi	a0,sp,12
     cf8:	95be                	add	a1,a1,a5
     cfa:	c23a                	sw	a4,4(sp)
     cfc:	718000ef          	jal	ra,1414 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     d00:	4632                	lw	a2,12(sp)
     d02:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     d04:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     d06:	e00006b7          	lui	a3,0xe0000
     d0a:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     d0e:	458d                	li	a1,3
     d10:	00978633          	add	a2,a5,s1
		t = 0;
     d14:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     d16:	00064303          	lbu	t1,0(a2)
     d1a:	0685                	addi	a3,a3,1
     d1c:	007c                	addi	a5,sp,12
     d1e:	00d78533          	add	a0,a5,a3
     d22:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     d26:	00d70563          	beq	a4,a3,d30 <_write.constprop.0+0xbe>
     d2a:	0605                	addi	a2,a2,1
     d2c:	feb695e3          	bne	a3,a1,d16 <_write.constprop.0+0xa4>
		buffer[0] = 0x80 | (tosend + 4);
     d30:	00470693          	addi	a3,a4,4
     d34:	f806e693          	ori	a3,a3,-128
     d38:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     d3c:	4632                	lw	a2,12(sp)
     d3e:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     d42:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     d44:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     d48:	f684c4e3          	blt	s1,s0,cb0 <_write.constprop.0+0x3e>
     d4c:	bfa1                	j	ca4 <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     d4e:	16fd                	addi	a3,a3,-1
     d50:	fea5                	bnez	a3,cc8 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     d52:	00032783          	lw	a5,0(t1)
     d56:	0c07e793          	ori	a5,a5,192
     d5a:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     d5e:	4401                	li	s0,0
     d60:	b791                	j	ca4 <_write.constprop.0+0x32>
	if( size == 0 )
     d62:	4481                	li	s1,0
     d64:	b7d5                	j	d48 <_write.constprop.0+0xd6>

00000d66 <__puts_uart>:
{
     d66:	1151                	addi	sp,sp,-12
     d68:	c222                	sw	s0,4(sp)
     d6a:	c406                	sw	ra,8(sp)
     d6c:	842e                	mv	s0,a1
	_write( 0, s, len );
     d6e:	3711                	jal	c72 <_write.constprop.0>
}
     d70:	40a2                	lw	ra,8(sp)
     d72:	8522                	mv	a0,s0
     d74:	4412                	lw	s0,4(sp)
     d76:	0131                	addi	sp,sp,12
     d78:	8082                	ret

00000d7a <handle_reset>:
	asm volatile( "\n\
     d7a:	1ffff197          	auipc	gp,0x1ffff
     d7e:	68218193          	addi	gp,gp,1666 # 200003fc <__global_pointer$>
     d82:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     d86:	6509                	lui	a0,0x2
     d88:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x268>
     d8c:	30051073          	csrw	mstatus,a0
     d90:	468d                	li	a3,3
     d92:	fffff517          	auipc	a0,0xfffff
     d96:	26e50513          	addi	a0,a0,622 # 0 <InterruptVector>
     d9a:	8d55                	or	a0,a0,a3
     d9c:	30551073          	csrw	mtvec,a0
asm volatile(
     da0:	c8818513          	addi	a0,gp,-888 # 20000084 <CardType>
     da4:	18018593          	addi	a1,gp,384 # 2000057c <_ebss>
     da8:	4601                	li	a2,0
     daa:	00b55663          	bge	a0,a1,db6 <handle_reset+0x3c>
     dae:	c110                	sw	a2,0(a0)
     db0:	0511                	addi	a0,a0,4
     db2:	feb54ee3          	blt	a0,a1,dae <handle_reset+0x34>
     db6:	00002517          	auipc	a0,0x2
     dba:	9c650513          	addi	a0,a0,-1594 # 277c <_data_lma>
     dbe:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_aht21>
     dc2:	1ffff617          	auipc	a2,0x1ffff
     dc6:	2c260613          	addi	a2,a2,706 # 20000084 <CardType>
     dca:	00c58863          	beq	a1,a2,dda <handle_reset+0x60>
     dce:	4114                	lw	a3,0(a0)
     dd0:	c194                	sw	a3,0(a1)
     dd2:	0511                	addi	a0,a0,4
     dd4:	0591                	addi	a1,a1,4
     dd6:	fec59ae3          	bne	a1,a2,dca <handle_reset+0x50>
	SysTick->CTLR = 5;
     dda:	e000f7b7          	lui	a5,0xe000f
     dde:	4715                	li	a4,5
     de0:	c398                	sw	a4,0(a5)
asm volatile(
     de2:	6785                	lui	a5,0x1
     de4:	61878793          	addi	a5,a5,1560 # 1618 <main>
     de8:	34179073          	csrw	mepc,a5
     dec:	30200073          	mret

00000df0 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     df0:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     df4:	c20ff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     df8:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     dfc:	c18ff0ef          	jal	ra,214 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     e00:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     e04:	c10ff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     e08:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     e0c:	c08ff0ef          	jal	ra,214 <PrintHex>
	while( (*DMDATA0) & 0x80 );
     e10:	e0000737          	lui	a4,0xe0000
     e14:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     e18:	0f470693          	addi	a3,a4,244
     e1c:	0807f793          	andi	a5,a5,128
     e20:	fbf5                	bnez	a5,e14 <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     e22:	6785                	lui	a5,0x1
     e24:	a8578793          	addi	a5,a5,-1403 # a85 <pf_open.constprop.0+0x11d>
     e28:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     e2a:	e0000737          	lui	a4,0xe0000
     e2e:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     e32:	0f470693          	addi	a3,a4,244
     e36:	0807f793          	andi	a5,a5,128
     e3a:	fbf5                	bnez	a5,e2e <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     e3c:	aaaab7b7          	lui	a5,0xaaaab
     e40:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     e44:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     e46:	a001                	j	e46 <ADC1_2_IRQHandler+0x56>

00000e48 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     e48:	40021737          	lui	a4,0x40021
     e4c:	471c                	lw	a5,8(a4)
     e4e:	008006b7          	lui	a3,0x800
     e52:	8fd5                	or	a5,a5,a3
     e54:	c71c                	sw	a5,8(a4)

00000e56 <strlen>:
{
     e56:	87aa                	mv	a5,a0
	for (; *s; s++);
     e58:	0007c703          	lbu	a4,0(a5)
     e5c:	e701                	bnez	a4,e64 <strlen+0xe>
}
     e5e:	40a78533          	sub	a0,a5,a0
     e62:	8082                	ret
	for (; *s; s++);
     e64:	0785                	addi	a5,a5,1
     e66:	bfcd                	j	e58 <strlen+0x2>

00000e68 <mini_vpprintf>:
{
     e68:	fa410113          	addi	sp,sp,-92
     e6c:	c8a6                	sw	s1,80(sp)
     e6e:	cc86                	sw	ra,88(sp)
     e70:	caa2                	sw	s0,84(sp)
     e72:	c02a                	sw	a0,0(sp)
     e74:	c22e                	sw	a1,4(sp)
     e76:	84b2                	mv	s1,a2
     e78:	87b6                	mv	a5,a3
	int n = 0;
     e7a:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     e7c:	0004c703          	lbu	a4,0(s1)
     e80:	00148413          	addi	s0,s1,1
     e84:	00e10fa3          	sb	a4,31(sp)
     e88:	eb01                	bnez	a4,e98 <mini_vpprintf+0x30>
}
     e8a:	40e6                	lw	ra,88(sp)
     e8c:	4456                	lw	s0,84(sp)
     e8e:	4542                	lw	a0,16(sp)
     e90:	44c6                	lw	s1,80(sp)
     e92:	05c10113          	addi	sp,sp,92
     e96:	8082                	ret
		if (ch!='%') {
     e98:	02500693          	li	a3,37
     e9c:	00d70f63          	beq	a4,a3,eba <mini_vpprintf+0x52>
     ea0:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     ea2:	4612                	lw	a2,4(sp)
     ea4:	4782                	lw	a5,0(sp)
     ea6:	4585                	li	a1,1
     ea8:	01f10513          	addi	a0,sp,31
     eac:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     eae:	84a2                	mv	s1,s0
		n = n + len;
     eb0:	47c2                	lw	a5,16(sp)
     eb2:	97aa                	add	a5,a5,a0
     eb4:	c83e                	sw	a5,16(sp)
     eb6:	47a2                	lw	a5,8(sp)
     eb8:	b7d1                	j	e7c <mini_vpprintf+0x14>
			ch=*(fmt++);
     eba:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     ebe:	03000613          	li	a2,48
			ch=*(fmt++);
     ec2:	00248713          	addi	a4,s1,2
     ec6:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     eca:	03000413          	li	s0,48
     ece:	08c69063          	bne	a3,a2,f4e <mini_vpprintf+0xe6>
				ch=*(fmt++);
     ed2:	84ba                	mv	s1,a4
     ed4:	4601                	li	a2,0
     ed6:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     ed8:	4525                	li	a0,9
     eda:	a811                	j	eee <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     edc:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     ee0:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     ee2:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     ee4:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     ee8:	0706                	slli	a4,a4,0x1
     eea:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     eec:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     eee:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f6713>
     ef2:	0ff5f313          	andi	t1,a1,255
     ef6:	fe6573e3          	bgeu	a0,t1,edc <mini_vpprintf+0x74>
     efa:	c219                	beqz	a2,f00 <mini_vpprintf+0x98>
     efc:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     f00:	c63a                	sw	a4,12(sp)
     f02:	4661                	li	a2,24
     f04:	00e65363          	bge	a2,a4,f0a <mini_vpprintf+0xa2>
     f08:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     f0a:	06c00593          	li	a1,108
			char l = 0;
     f0e:	4601                	li	a2,0
			if (ch == 'l') {
     f10:	00b69863          	bne	a3,a1,f20 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     f14:	0004c683          	lbu	a3,0(s1)
				l = 1;
     f18:	4605                	li	a2,1
				ch=*(fmt++);
     f1a:	0485                	addi	s1,s1,1
     f1c:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     f20:	01f14683          	lbu	a3,31(sp)
     f24:	06400593          	li	a1,100
     f28:	06b68363          	beq	a3,a1,f8e <mini_vpprintf+0x126>
     f2c:	02d5e463          	bltu	a1,a3,f54 <mini_vpprintf+0xec>
     f30:	05800713          	li	a4,88
     f34:	0ae68263          	beq	a3,a4,fd8 <mini_vpprintf+0x170>
     f38:	06300713          	li	a4,99
     f3c:	0ce68063          	beq	a3,a4,ffc <mini_vpprintf+0x194>
     f40:	d6a9                	beqz	a3,e8a <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     f42:	4612                	lw	a2,4(sp)
     f44:	c43e                	sw	a5,8(sp)
     f46:	4585                	li	a1,1
     f48:	01f10513          	addi	a0,sp,31
     f4c:	a88d                	j	fbe <mini_vpprintf+0x156>
			char pad_char = ' ';
     f4e:	02000413          	li	s0,32
     f52:	b741                	j	ed2 <mini_vpprintf+0x6a>
			switch (ch) {
     f54:	07500593          	li	a1,117
     f58:	02b68b63          	beq	a3,a1,f8e <mini_vpprintf+0x126>
     f5c:	07800613          	li	a2,120
     f60:	06c68c63          	beq	a3,a2,fd8 <mini_vpprintf+0x170>
     f64:	07300613          	li	a2,115
     f68:	fcc69de3          	bne	a3,a2,f42 <mini_vpprintf+0xda>
     f6c:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     f6e:	00478713          	addi	a4,a5,4
     f72:	439c                	lw	a5,0(a5)
     f74:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     f76:	853e                	mv	a0,a5
     f78:	ca3e                	sw	a5,20(sp)
     f7a:	3df1                	jal	e56 <strlen>
					if (pad_to > 0) {
     f7c:	4762                	lw	a4,24(sp)
     f7e:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     f80:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     f82:	cb51                	beqz	a4,1016 <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     f84:	46b2                	lw	a3,12(sp)
     f86:	1838                	addi	a4,sp,56
     f88:	8622                	mv	a2,s0
     f8a:	853e                	mv	a0,a5
     f8c:	a025                	j	fb4 <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f8e:	00478713          	addi	a4,a5,4
     f92:	c43a                	sw	a4,8(sp)
					if(l) {
     f94:	ca05                	beqz	a2,fc4 <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f96:	f8b68693          	addi	a3,a3,-117
     f9a:	1018                	addi	a4,sp,32
     f9c:	0016b693          	seqz	a3,a3
     fa0:	4388                	lw	a0,0(a5)
     fa2:	4601                	li	a2,0
     fa4:	45a9                	li	a1,10
     fa6:	adcff0ef          	jal	ra,282 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     faa:	46b2                	lw	a3,12(sp)
     fac:	1838                	addi	a4,sp,56
     fae:	8622                	mv	a2,s0
     fb0:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     fb2:	1008                	addi	a0,sp,32
     fb4:	982ff0ef          	jal	ra,136 <mini_pad>
					len = puts(bf, len, buf);
     fb8:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     fba:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     fbc:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     fbe:	4782                	lw	a5,0(sp)
     fc0:	9782                	jalr	a5
					break;
     fc2:	b5fd                	j	eb0 <mini_vpprintf+0x48>
						if(ch == 'u') {
     fc4:	07500713          	li	a4,117
     fc8:	00e69563          	bne	a3,a4,fd2 <mini_vpprintf+0x16a>
	if (radix > 16)
     fcc:	1018                	addi	a4,sp,32
     fce:	4685                	li	a3,1
     fd0:	bfc1                	j	fa0 <mini_vpprintf+0x138>
     fd2:	1018                	addi	a4,sp,32
     fd4:	4681                	li	a3,0
     fd6:	b7e9                	j	fa0 <mini_vpprintf+0x138>
					if(l) {
     fd8:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     fda:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     fde:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     fe2:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     fe4:	4685                	li	a3,1
     fe6:	1018                	addi	a4,sp,32
     fe8:	00163613          	seqz	a2,a2
     fec:	45c1                	li	a1,16
     fee:	a94ff0ef          	jal	ra,282 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     ff2:	46b2                	lw	a3,12(sp)
     ff4:	85aa                	mv	a1,a0
     ff6:	1838                	addi	a4,sp,56
     ff8:	8622                	mv	a2,s0
     ffa:	bf65                	j	fb2 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     ffc:	00478713          	addi	a4,a5,4
    1000:	439c                	lw	a5,0(a5)
    1002:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
    1004:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
    1006:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
    100a:	1838                	addi	a4,sp,56
    100c:	8622                	mv	a2,s0
    100e:	4585                	li	a1,1
    1010:	01f10513          	addi	a0,sp,31
    1014:	b745                	j	fb4 <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
    1016:	4612                	lw	a2,4(sp)
    1018:	853e                	mv	a0,a5
    101a:	b755                	j	fbe <mini_vpprintf+0x156>

0000101c <printf>:
{
    101c:	fdc10113          	addi	sp,sp,-36
    1020:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    1022:	862a                	mv	a2,a0
    1024:	6505                	lui	a0,0x1
{
    1026:	c82e                	sw	a1,16(sp)
    1028:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    102a:	4581                	li	a1,0
	va_start( args, format );
    102c:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    102e:	d6650513          	addi	a0,a0,-666 # d66 <__puts_uart>
{
    1032:	c606                	sw	ra,12(sp)
    1034:	ce3a                	sw	a4,28(sp)
    1036:	d03e                	sw	a5,32(sp)
	va_start( args, format );
    1038:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
    103a:	353d                	jal	e68 <mini_vpprintf>
}
    103c:	40b2                	lw	ra,12(sp)
    103e:	02410113          	addi	sp,sp,36
    1042:	8082                	ret

00001044 <check_fs>:
) {
    1044:	1131                	addi	sp,sp,-20
    1046:	c622                	sw	s0,12(sp)
    1048:	c426                	sw	s1,8(sp)
    104a:	c806                	sw	ra,16(sp)
    104c:	842a                	mv	s0,a0
    104e:	84ae                	mv	s1,a1
    1050:	4789                	li	a5,2
		if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
    1052:	4689                	li	a3,2
    1054:	1fe00613          	li	a2,510
    1058:	85a6                	mv	a1,s1
    105a:	8522                	mv	a0,s0
	for (BYTE i=1; i<=2; i++) {
    105c:	c03e                	sw	a5,0(sp)
		if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
    105e:	ca6ff0ef          	jal	ra,504 <disk_readp>
    1062:	c509                	beqz	a0,106c <check_fs+0x28>
			printf("check_fs_err: disk err\n\r");
    1064:	6789                	lui	a5,0x2
    1066:	29078513          	addi	a0,a5,656 # 2290 <I2C1_ER_IRQHandler+0x8e>
    106a:	3f4d                	jal	101c <printf>
		DWORD sig = ld_dword(buf);
    106c:	8522                	mv	a0,s0
    106e:	ad2ff0ef          	jal	ra,340 <ld_dword>
    1072:	85aa                	mv	a1,a0
		printf("check_fs signature: %04lX\n\r", sig);
    1074:	c22a                	sw	a0,4(sp)
    1076:	6509                	lui	a0,0x2
    1078:	2ac50513          	addi	a0,a0,684 # 22ac <I2C1_ER_IRQHandler+0xaa>
    107c:	3745                	jal	101c <printf>
		if (sig == 0xAA55 || sig == 0xBA55) {
    107e:	4592                	lw	a1,4(sp)
    1080:	757d                	lui	a0,0xfffff
    1082:	157d                	addi	a0,a0,-1
    1084:	67ad                	lui	a5,0xb
    1086:	8de9                	and	a1,a1,a0
    1088:	a5578793          	addi	a5,a5,-1451 # aa55 <lib_i2c.c.d894f163+0x1198>
    108c:	00f58a63          	beq	a1,a5,10a0 <check_fs+0x5c>
			printf("check_fs_err: bad signature\n\r");
    1090:	6509                	lui	a0,0x2
    1092:	2c850513          	addi	a0,a0,712 # 22c8 <I2C1_ER_IRQHandler+0xc6>
    1096:	3759                	jal	101c <printf>
	for (BYTE i=1; i<=2; i++) {
    1098:	4702                	lw	a4,0(sp)
    109a:	4785                	li	a5,1
    109c:	02f71b63          	bne	a4,a5,10d2 <check_fs+0x8e>
	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && ld_word(buf) == 0x4146) {	/* Check FAT12/16 */
    10a0:	4689                	li	a3,2
    10a2:	03600613          	li	a2,54
    10a6:	85a6                	mv	a1,s1
    10a8:	8522                	mv	a0,s0
    10aa:	c5aff0ef          	jal	ra,504 <disk_readp>
    10ae:	e505                	bnez	a0,10d6 <check_fs+0x92>
    10b0:	00144783          	lbu	a5,1(s0)
    10b4:	00044703          	lbu	a4,0(s0)
    10b8:	07a2                	slli	a5,a5,0x8
    10ba:	8fd9                	or	a5,a5,a4
    10bc:	6711                	lui	a4,0x4
    10be:	14670713          	addi	a4,a4,326 # 4146 <ch32fun.c.963ac852+0xb51>
    10c2:	00e79a63          	bne	a5,a4,10d6 <check_fs+0x92>
		return 0;
    10c6:	4501                	li	a0,0
}
    10c8:	40c2                	lw	ra,16(sp)
    10ca:	4432                	lw	s0,12(sp)
    10cc:	44a2                	lw	s1,8(sp)
    10ce:	0151                	addi	sp,sp,20
    10d0:	8082                	ret
	for (BYTE i=1; i<=2; i++) {
    10d2:	4785                	li	a5,1
    10d4:	bfbd                	j	1052 <check_fs+0xe>
	printf("check_fs: check FAT32\n\r");
    10d6:	6509                	lui	a0,0x2
    10d8:	2e850513          	addi	a0,a0,744 # 22e8 <I2C1_ER_IRQHandler+0xe6>
    10dc:	3781                	jal	101c <printf>
	if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
    10de:	4689                	li	a3,2
    10e0:	05200613          	li	a2,82
    10e4:	85a6                	mv	a1,s1
    10e6:	8522                	mv	a0,s0
    10e8:	c1cff0ef          	jal	ra,504 <disk_readp>
    10ec:	ed01                	bnez	a0,1104 <check_fs+0xc0>
    10ee:	00144783          	lbu	a5,1(s0)
    10f2:	00044703          	lbu	a4,0(s0)
    10f6:	07a2                	slli	a5,a5,0x8
    10f8:	8fd9                	or	a5,a5,a4
    10fa:	6711                	lui	a4,0x4
    10fc:	14670713          	addi	a4,a4,326 # 4146 <ch32fun.c.963ac852+0xb51>
    1100:	fce783e3          	beq	a5,a4,10c6 <check_fs+0x82>
	printf("check_fs: OK\n\r");
    1104:	6509                	lui	a0,0x2
    1106:	30050513          	addi	a0,a0,768 # 2300 <I2C1_ER_IRQHandler+0xfe>
    110a:	3f09                	jal	101c <printf>
	return 1;
    110c:	4505                	li	a0,1
    110e:	bf6d                	j	10c8 <check_fs+0x84>

00001110 <onI2C_SlaveWrite>:
#include "../Mess-libs/modules/systick_irq.h"
#include "../Mess-libs/modules/fun_button.h"
#include "../Mess-libs/i2c/i2c_slave.h"

void onI2C_SlaveWrite(uint8_t reg, uint8_t length) {
	printf("IM WRITEEN TO\n\r");
    1110:	6509                	lui	a0,0x2
    1112:	31050513          	addi	a0,a0,784 # 2310 <I2C1_ER_IRQHandler+0x10e>
    1116:	b719                	j	101c <printf>

00001118 <onI2C_SlaveRead>:
}

void onI2C_SlaveRead(uint8_t reg) {
	printf("IM READEN FROM.\n\r");
    1118:	6509                	lui	a0,0x2
    111a:	32050513          	addi	a0,a0,800 # 2320 <I2C1_ER_IRQHandler+0x11e>
    111e:	bdfd                	j	101c <printf>

00001120 <pf_mount.constprop.0>:
FRESULT pf_mount (
    1120:	fbc10113          	addi	sp,sp,-68
    1124:	dc26                	sw	s1,56(sp)
	SPI_set_prescaler(7);
    1126:	451d                	li	a0,7
    1128:	c086                	sw	ra,64(sp)
    112a:	de22                	sw	s0,60(sp)
	FatFs = 0;
    112c:	c801a623          	sw	zero,-884(gp) # 20000088 <FatFs>
    1130:	ad2ff0ef          	jal	ra,402 <SPI_set_prescaler>
	skip_mmc(10);			/* Dummy clocks */
    1134:	4529                	li	a0,10
    1136:	b28ff0ef          	jal	ra,45e <skip_mmc>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    113a:	4581                	li	a1,0
    113c:	04000513          	li	a0,64
    1140:	b38ff0ef          	jal	ra,478 <send_cmd>
    1144:	c8c18713          	addi	a4,gp,-884 # 20000088 <FatFs>
    1148:	4785                	li	a5,1
    114a:	c43a                	sw	a4,8(sp)
    114c:	04f50f63          	beq	a0,a5,11aa <pf_mount.constprop.0+0x8a>
	ty = 0;
    1150:	4401                	li	s0,0
	CardType = ty;
    1152:	c8818423          	sb	s0,-888(gp) # 20000084 <CardType>
	rcvr_mmc();
    1156:	b02ff0ef          	jal	ra,458 <rcvr_mmc>
	SPI_set_prescaler(0);
    115a:	4501                	li	a0,0
    115c:	aa6ff0ef          	jal	ra,402 <SPI_set_prescaler>
		return FR_NOT_READY;
    1160:	4489                	li	s1,2
	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
    1162:	cc0d                	beqz	s0,119c <pf_mount.constprop.0+0x7c>
	Delay_Ms(100);
    1164:	00494537          	lui	a0,0x494
    1168:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.d894f163+0x48a543>
    116c:	900ff0ef          	jal	ra,26c <DelaySysTick>
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1170:	4581                	li	a1,0
    1172:	0848                	addi	a0,sp,20
    1174:	3dc1                	jal	1044 <check_fs>
	printf("check fmt %d\n\r", fmt);
    1176:	85aa                	mv	a1,a0
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1178:	84aa                	mv	s1,a0
	printf("check fmt %d\n\r", fmt);
    117a:	6509                	lui	a0,0x2
    117c:	33450513          	addi	a0,a0,820 # 2334 <I2C1_ER_IRQHandler+0x132>
    1180:	3d71                	jal	101c <printf>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    1182:	4785                	li	a5,1
	bsect = 0;
    1184:	4401                	li	s0,0
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    1186:	0cf49d63          	bne	s1,a5,1260 <pf_mount.constprop.0+0x140>
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    118a:	46c1                	li	a3,16
    118c:	1be00613          	li	a2,446
    1190:	4581                	li	a1,0
    1192:	0848                	addi	a0,sp,20
    1194:	b70ff0ef          	jal	ra,504 <disk_readp>
    1198:	c55d                	beqz	a0,1246 <pf_mount.constprop.0+0x126>
	if (fmt == 3) return FR_DISK_ERR;
    119a:	4485                	li	s1,1
}
    119c:	4086                	lw	ra,64(sp)
    119e:	5472                	lw	s0,60(sp)
    11a0:	8526                	mv	a0,s1
    11a2:	54e2                	lw	s1,56(sp)
    11a4:	04410113          	addi	sp,sp,68
    11a8:	8082                	ret
    11aa:	842a                	mv	s0,a0
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    11ac:	1aa00593          	li	a1,426
    11b0:	04800513          	li	a0,72
    11b4:	ac4ff0ef          	jal	ra,478 <send_cmd>
    11b8:	04851a63          	bne	a0,s0,120c <pf_mount.constprop.0+0xec>
    11bc:	4401                	li	s0,0
			for (n = 0; n < 4; n++) buf[n] = rcvr_mmc();	/* Get trailing return value of R7 resp */
    11be:	a9aff0ef          	jal	ra,458 <rcvr_mmc>
    11c2:	085c                	addi	a5,sp,20
    11c4:	97a2                	add	a5,a5,s0
    11c6:	00a78023          	sb	a0,0(a5)
    11ca:	0405                	addi	s0,s0,1
    11cc:	4791                	li	a5,4
    11ce:	fef418e3          	bne	s0,a5,11be <pf_mount.constprop.0+0x9e>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    11d2:	01614703          	lbu	a4,22(sp)
    11d6:	4785                	li	a5,1
    11d8:	f6f71ce3          	bne	a4,a5,1150 <pf_mount.constprop.0+0x30>
    11dc:	01714703          	lbu	a4,23(sp)
    11e0:	0aa00793          	li	a5,170
    11e4:	f6f716e3          	bne	a4,a5,1150 <pf_mount.constprop.0+0x30>
    11e8:	3e800413          	li	s0,1000
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    11ec:	400005b7          	lui	a1,0x40000
    11f0:	0e900513          	li	a0,233
    11f4:	a84ff0ef          	jal	ra,478 <send_cmd>
    11f8:	14050d63          	beqz	a0,1352 <pf_mount.constprop.0+0x232>
					DLY_US(1000);
    11fc:	6531                	lui	a0,0xc
    11fe:	b8050513          	addi	a0,a0,-1152 # bb80 <lib_i2c.c.d894f163+0x22c3>
				for (tmr = 1000; tmr; tmr--) {				/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1202:	147d                	addi	s0,s0,-1
					DLY_US(1000);
    1204:	868ff0ef          	jal	ra,26c <DelaySysTick>
				for (tmr = 1000; tmr; tmr--) {				/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1208:	f075                	bnez	s0,11ec <pf_mount.constprop.0+0xcc>
    120a:	b799                	j	1150 <pf_mount.constprop.0+0x30>
			if (send_cmd(ACMD41, 0) <= 1) 	{
    120c:	4581                	li	a1,0
    120e:	0e900513          	li	a0,233
    1212:	a66ff0ef          	jal	ra,478 <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    1216:	04100793          	li	a5,65
			if (send_cmd(ACMD41, 0) <= 1) 	{
    121a:	00a46563          	bltu	s0,a0,1224 <pf_mount.constprop.0+0x104>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    121e:	4409                	li	s0,2
    1220:	0e900793          	li	a5,233
    1224:	c03e                	sw	a5,0(sp)
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    1226:	3e800493          	li	s1,1000
				if (send_cmd(cmd, 0) == 0) break;
    122a:	4502                	lw	a0,0(sp)
    122c:	4581                	li	a1,0
    122e:	a4aff0ef          	jal	ra,478 <send_cmd>
    1232:	14050b63          	beqz	a0,1388 <pf_mount.constprop.0+0x268>
				DLY_US(1000);
    1236:	6531                	lui	a0,0xc
    1238:	b8050513          	addi	a0,a0,-1152 # bb80 <lib_i2c.c.d894f163+0x22c3>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    123c:	14fd                	addi	s1,s1,-1
				DLY_US(1000);
    123e:	82eff0ef          	jal	ra,26c <DelaySysTick>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    1242:	f4e5                	bnez	s1,122a <pf_mount.constprop.0+0x10a>
    1244:	b731                	j	1150 <pf_mount.constprop.0+0x30>
			if (buf[4]) {					/* Is the partition existing? */
    1246:	01814783          	lbu	a5,24(sp)
    124a:	e399                	bnez	a5,1250 <pf_mount.constprop.0+0x130>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    124c:	4499                	li	s1,6
    124e:	b7b9                	j	119c <pf_mount.constprop.0+0x7c>
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
    1250:	0868                	addi	a0,sp,28
    1252:	8eeff0ef          	jal	ra,340 <ld_dword>
				fmt = check_fs(buf, bsect);	/* Check the partition */
    1256:	85aa                	mv	a1,a0
				bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
    1258:	842a                	mv	s0,a0
				fmt = check_fs(buf, bsect);	/* Check the partition */
    125a:	0848                	addi	a0,sp,20
    125c:	33e5                	jal	1044 <check_fs>
    125e:	84aa                	mv	s1,a0
	if (fmt == 3) return FR_DISK_ERR;
    1260:	478d                	li	a5,3
    1262:	f2f48ce3          	beq	s1,a5,119a <pf_mount.constprop.0+0x7a>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1266:	f0fd                	bnez	s1,124c <pf_mount.constprop.0+0x12c>
	printf("IM HERE 111\n\r");
    1268:	6509                	lui	a0,0x2
    126a:	34450513          	addi	a0,a0,836 # 2344 <I2C1_ER_IRQHandler+0x142>
    126e:	337d                	jal	101c <printf>
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
    1270:	02400693          	li	a3,36
    1274:	4635                	li	a2,13
    1276:	85a2                	mv	a1,s0
    1278:	0848                	addi	a0,sp,20
    127a:	a8aff0ef          	jal	ra,504 <disk_readp>
    127e:	84aa                	mv	s1,a0
    1280:	f0051de3          	bnez	a0,119a <pf_mount.constprop.0+0x7a>
	fsize = ld_word(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    1284:	01e14583          	lbu	a1,30(sp)
    1288:	01d14503          	lbu	a0,29(sp)
    128c:	05a2                	slli	a1,a1,0x8
    128e:	8dc9                	or	a1,a1,a0
	if (!fsize) fsize = ld_dword(buf+BPB_FATSz32-13);
    1290:	e591                	bnez	a1,129c <pf_mount.constprop.0+0x17c>
    1292:	02b10513          	addi	a0,sp,43
    1296:	8aaff0ef          	jal	ra,340 <ld_dword>
    129a:	85aa                	mv	a1,a0
	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    129c:	01714503          	lbu	a0,23(sp)
    12a0:	e01fe0ef          	jal	ra,a0 <__mulsi3>
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    12a4:	01614703          	lbu	a4,22(sp)
	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    12a8:	c02a                	sw	a0,0(sp)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    12aa:	01514503          	lbu	a0,21(sp)
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    12ae:	01414583          	lbu	a1,20(sp)
    12b2:	01815603          	lhu	a2,24(sp)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    12b6:	0722                	slli	a4,a4,0x8
    12b8:	8f49                	or	a4,a4,a0
	tsect = ld_word(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    12ba:	01a15503          	lhu	a0,26(sp)
	fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    12be:	d1418693          	addi	a3,gp,-748 # 20000110 <fatfs>
    12c2:	943a                	add	s0,s0,a4
    12c4:	c6c0                	sw	s0,12(a3)
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    12c6:	00b68123          	sb	a1,2(a3)
	fs->n_rootdir = ld_word(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    12ca:	00c69223          	sh	a2,4(a3)
	if (!tsect) tsect = ld_dword(buf+BPB_TotSec32-13);
    12ce:	e919                	bnez	a0,12e4 <pf_mount.constprop.0+0x1c4>
    12d0:	02710513          	addi	a0,sp,39
    12d4:	c832                	sw	a2,16(sp)
    12d6:	c62e                	sw	a1,12(sp)
    12d8:	c23a                	sw	a4,4(sp)
    12da:	866ff0ef          	jal	ra,340 <ld_dword>
    12de:	4642                	lw	a2,16(sp)
    12e0:	45b2                	lw	a1,12(sp)
    12e2:	4712                	lw	a4,4(sp)
		- ld_word(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    12e4:	00465793          	srli	a5,a2,0x4
    12e8:	c23e                	sw	a5,4(sp)
    12ea:	973e                	add	a4,a4,a5
    12ec:	4782                	lw	a5,0(sp)
    12ee:	973e                	add	a4,a4,a5
		) / fs->csize + 2;
    12f0:	8d19                	sub	a0,a0,a4
    12f2:	dcffe0ef          	jal	ra,c0 <__hidden___udivsi3>
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    12f6:	777d                	lui	a4,0xfffff
	mclst = (tsect						/* Last cluster# + 1 */
    12f8:	00250693          	addi	a3,a0,2
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    12fc:	0729                	addi	a4,a4,10
	fs->n_fatent = (CLUST)mclst;
    12fe:	d1418793          	addi	a5,gp,-748 # 20000110 <fatfs>
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    1302:	663d                	lui	a2,0xf
    1304:	953a                	add	a0,a0,a4
	fs->n_fatent = (CLUST)mclst;
    1306:	c794                	sw	a3,8(a5)
    1308:	6741                	lui	a4,0x10
	if (PF_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7) fmt = FS_FAT16;
    130a:	1679                	addi	a2,a2,-2
    130c:	1759                	addi	a4,a4,-10
    130e:	00a67c63          	bgeu	a2,a0,1326 <pf_mount.constprop.0+0x206>
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
    1312:	00d76c63          	bltu	a4,a3,132a <pf_mount.constprop.0+0x20a>
    1316:	bf1d                	j	124c <pf_mount.constprop.0+0x12c>
	fs->fs_type = fmt;
    1318:	4709                	li	a4,2
    131a:	00e78023          	sb	a4,0(a5)
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    131e:	4702                	lw	a4,0(sp)
    1320:	9722                	add	a4,a4,s0
    1322:	cb98                	sw	a4,16(a5)
    1324:	a829                	j	133e <pf_mount.constprop.0+0x21e>
	if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
    1326:	fed779e3          	bgeu	a4,a3,1318 <pf_mount.constprop.0+0x1f8>
	fs->fs_type = fmt;
    132a:	470d                	li	a4,3
		fs->dirbase = ld_dword(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    132c:	03310513          	addi	a0,sp,51
	fs->fs_type = fmt;
    1330:	00e78023          	sb	a4,0(a5)
		fs->dirbase = ld_dword(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    1334:	80cff0ef          	jal	ra,340 <ld_dword>
    1338:	d1418793          	addi	a5,gp,-748 # 20000110 <fatfs>
    133c:	cb88                	sw	a0,16(a5)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    133e:	4712                	lw	a4,4(sp)
	fs->flag = 0;
    1340:	000780a3          	sb	zero,1(a5)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    1344:	943a                	add	s0,s0,a4
    1346:	4702                	lw	a4,0(sp)
    1348:	943a                	add	s0,s0,a4
	FatFs = fs;
    134a:	4722                	lw	a4,8(sp)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    134c:	cbc0                	sw	s0,20(a5)
	FatFs = fs;
    134e:	c31c                	sw	a5,0(a4)
    1350:	b5b1                	j	119c <pf_mount.constprop.0+0x7c>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1352:	4581                	li	a1,0
    1354:	07a00513          	li	a0,122
    1358:	920ff0ef          	jal	ra,478 <send_cmd>
    135c:	de051ae3          	bnez	a0,1150 <pf_mount.constprop.0+0x30>
    1360:	4401                	li	s0,0
					for (n = 0; n < 4; n++) buf[n] = rcvr_mmc();
    1362:	8f6ff0ef          	jal	ra,458 <rcvr_mmc>
    1366:	085c                	addi	a5,sp,20
    1368:	97a2                	add	a5,a5,s0
    136a:	00a78023          	sb	a0,0(a5)
    136e:	0405                	addi	s0,s0,1
    1370:	4791                	li	a5,4
    1372:	fef418e3          	bne	s0,a5,1362 <pf_mount.constprop.0+0x242>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    1376:	01414783          	lbu	a5,20(sp)
    137a:	4431                	li	s0,12
    137c:	0407f793          	andi	a5,a5,64
    1380:	dc0799e3          	bnez	a5,1152 <pf_mount.constprop.0+0x32>
    1384:	4411                	li	s0,4
    1386:	b3f1                	j	1152 <pf_mount.constprop.0+0x32>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1388:	20000593          	li	a1,512
    138c:	05000513          	li	a0,80
    1390:	8e8ff0ef          	jal	ra,478 <send_cmd>
    1394:	da051ee3          	bnez	a0,1150 <pf_mount.constprop.0+0x30>
    1398:	bb6d                	j	1152 <pf_mount.constprop.0+0x32>

0000139a <mini_vsnprintf>:
{
    139a:	1121                	addi	sp,sp,-24
    139c:	ca06                	sw	ra,20(sp)
    139e:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
    13a0:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
    13a2:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
    13a4:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
    13a6:	c18d                	beqz	a1,13c8 <mini_vsnprintf+0x2e>
    13a8:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
    13aa:	858a                	mv	a1,sp
    13ac:	e111                	bnez	a0,13b0 <mini_vsnprintf+0x16>
    13ae:	4581                	li	a1,0
    13b0:	1d200513          	li	a0,466
    13b4:	ab5ff0ef          	jal	ra,e68 <mini_vpprintf>
	if(buffer == (void*) 0) {
    13b8:	c401                	beqz	s0,13c0 <mini_vsnprintf+0x26>
	return b.pbuffer - b.buffer;
    13ba:	4512                	lw	a0,4(sp)
    13bc:	4782                	lw	a5,0(sp)
    13be:	8d1d                	sub	a0,a0,a5
}
    13c0:	40d2                	lw	ra,20(sp)
    13c2:	4442                	lw	s0,16(sp)
    13c4:	0161                	addi	sp,sp,24
    13c6:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
    13c8:	4401                	li	s0,0
    13ca:	b7d5                	j	13ae <mini_vsnprintf+0x14>

000013cc <sprintf>:
{
    13cc:	1101                	addi	sp,sp,-32
    13ce:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    13d0:	862e                	mv	a2,a1
    13d2:	800005b7          	lui	a1,0x80000
{
    13d6:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    13d8:	fff5c593          	not	a1,a1
	va_start( args, format );
    13dc:	0814                	addi	a3,sp,16
{
    13de:	c606                	sw	ra,12(sp)
    13e0:	cc3a                	sw	a4,24(sp)
    13e2:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
    13e4:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    13e6:	3f55                	jal	139a <mini_vsnprintf>
}
    13e8:	40b2                	lw	ra,12(sp)
    13ea:	6105                	addi	sp,sp,32
    13ec:	8082                	ret

000013ee <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
    13ee:	962a                	add	a2,a2,a0
    13f0:	87aa                	mv	a5,a0
    13f2:	00c79363          	bne	a5,a2,13f8 <memset+0xa>
    13f6:	8082                	ret
    13f8:	00b78023          	sb	a1,0(a5)
    13fc:	0785                	addi	a5,a5,1
    13fe:	bfd5                	j	13f2 <memset+0x4>

00001400 <strcpy>:
{
    1400:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
    1402:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
    1406:	00e78023          	sb	a4,0(a5)
    140a:	e311                	bnez	a4,140e <strcpy+0xe>
}
    140c:	8082                	ret
	for (; (*d=*s); s++, d++);
    140e:	0585                	addi	a1,a1,1
    1410:	0785                	addi	a5,a5,1
    1412:	bfc5                	j	1402 <strcpy+0x2>

00001414 <memcpy>:
{
    1414:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
    1416:	00f61363          	bne	a2,a5,141c <memcpy+0x8>
}
    141a:	8082                	ret
	for (; n; n--) *d++ = *s++;
    141c:	00f58733          	add	a4,a1,a5
    1420:	00074683          	lbu	a3,0(a4) # 10000 <lib_i2c.c.d894f163+0x6743>
    1424:	00f50733          	add	a4,a0,a5
    1428:	0785                	addi	a5,a5,1
    142a:	00d70023          	sb	a3,0(a4)
    142e:	b7e5                	j	1416 <memcpy+0x2>

00001430 <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1430:	7179                	addi	sp,sp,-48
    1432:	d422                	sw	s0,40(sp)
	uint8_t pkt[33];
	pkt[0] = 0x40;
    1434:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1438:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
    143a:	862e                	mv	a2,a1
    143c:	85aa                	mv	a1,a0
    143e:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1442:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    1444:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    1448:	37f1                	jal	1414 <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    144a:	00140593          	addi	a1,s0,1
    144e:	850a                	mv	a0,sp
    1450:	eb8ff0ef          	jal	ra,b08 <i2c_write_raw.constprop.0>
}
    1454:	50b2                	lw	ra,44(sp)
    1456:	5422                	lw	s0,40(sp)
    1458:	6145                	addi	sp,sp,48
    145a:	8082                	ret

0000145c <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
    145c:	1151                	addi	sp,sp,-12
    145e:	c222                	sw	s0,4(sp)
    1460:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1462:	02100513          	li	a0,33
void ssd1306_print_str_at(
    1466:	c406                	sw	ra,8(sp)
    1468:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    146a:	fe2ff0ef          	jal	ra,c4c <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    146e:	4501                	li	a0,0
    1470:	fdcff0ef          	jal	ra,c4c <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1474:	07f00513          	li	a0,127
    1478:	fd4ff0ef          	jal	ra,c4c <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    147c:	02200513          	li	a0,34
    1480:	fccff0ef          	jal	ra,c4c <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1484:	8522                	mv	a0,s0
    1486:	fc6ff0ef          	jal	ra,c4c <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    148a:	8522                	mv	a0,s0
    148c:	fc0ff0ef          	jal	ra,c4c <ssd1306_cmd>
    1490:	4465                	li	s0,25
    1492:	16c18493          	addi	s1,gp,364 # 20000568 <str_output>
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i<25; i++) {
		if (*str) {
    1496:	0004c783          	lbu	a5,0(s1)
    149a:	c78d                	beqz	a5,14c4 <ssd1306_print_str_at.constprop.0+0x68>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    149c:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    149e:	0ff7f793          	andi	a5,a5,255
    14a2:	6709                	lui	a4,0x2
    14a4:	00279693          	slli	a3,a5,0x2
    14a8:	4e470513          	addi	a0,a4,1252 # 24e4 <FONT_7x5>
    14ac:	97b6                	add	a5,a5,a3
    14ae:	4595                	li	a1,5
    14b0:	953e                	add	a0,a0,a5
    14b2:	3fbd                	jal	1430 <ssd1306_data.isra.0>
			str++;
    14b4:	0485                	addi	s1,s1,1
	for (int i=0; i<25; i++) {
    14b6:	147d                	addi	s0,s0,-1
    14b8:	fc79                	bnez	s0,1496 <ssd1306_print_str_at.constprop.0+0x3a>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
    14ba:	40a2                	lw	ra,8(sp)
    14bc:	4412                	lw	s0,4(sp)
    14be:	4482                	lw	s1,0(sp)
    14c0:	0131                	addi	sp,sp,12
    14c2:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    14c4:	6789                	lui	a5,0x2
    14c6:	4595                	li	a1,5
    14c8:	4e478513          	addi	a0,a5,1252 # 24e4 <FONT_7x5>
    14cc:	3795                	jal	1430 <ssd1306_data.isra.0>
    14ce:	b7e5                	j	14b6 <ssd1306_print_str_at.constprop.0+0x5a>

000014d0 <puts>:
{
    14d0:	1151                	addi	sp,sp,-12
    14d2:	c406                	sw	ra,8(sp)
    14d4:	c222                	sw	s0,4(sp)
    14d6:	c026                	sw	s1,0(sp)
    14d8:	84aa                	mv	s1,a0
	int sl = strlen( s );
    14da:	97dff0ef          	jal	ra,e56 <strlen>
    14de:	842a                	mv	s0,a0
	_write(0, s, sl );
    14e0:	85aa                	mv	a1,a0
    14e2:	8526                	mv	a0,s1
    14e4:	f8eff0ef          	jal	ra,c72 <_write.constprop.0>
	_write(0, "\n", 1 );
    14e8:	6509                	lui	a0,0x2
    14ea:	4585                	li	a1,1
    14ec:	35450513          	addi	a0,a0,852 # 2354 <I2C1_ER_IRQHandler+0x152>
    14f0:	f82ff0ef          	jal	ra,c72 <_write.constprop.0>
}
    14f4:	40a2                	lw	ra,8(sp)
    14f6:	00140513          	addi	a0,s0,1
    14fa:	4412                	lw	s0,4(sp)
    14fc:	4482                	lw	s1,0(sp)
    14fe:	0131                	addi	sp,sp,12
    1500:	8082                	ret

00001502 <i2c_scan_callback>:
	if (i2c_ping(0x3C) != I2C_OK) return;
	ssd1306_print_str_at(str, line, 0);
}

void i2c_scan_callback(const uint8_t addr) {
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    1502:	c539                	beqz	a0,1550 <i2c_scan_callback+0x4e>
    1504:	07f00793          	li	a5,127
    1508:	862a                	mv	a2,a0
    150a:	04f50363          	beq	a0,a5,1550 <i2c_scan_callback+0x4e>
void i2c_scan_callback(const uint8_t addr) {
    150e:	1151                	addi	sp,sp,-12
    1510:	c222                	sw	s0,4(sp)
	
	static int line = 1;
	sprintf(str_output, "I2C: 0x%02X", addr);
    1512:	6589                	lui	a1,0x2
    1514:	35858593          	addi	a1,a1,856 # 2358 <I2C1_ER_IRQHandler+0x156>
    1518:	16c18513          	addi	a0,gp,364 # 20000568 <str_output>
void i2c_scan_callback(const uint8_t addr) {
    151c:	c406                	sw	ra,8(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    151e:	357d                	jal	13cc <sprintf>
	printf("%s\n", str_output);
    1520:	16c18513          	addi	a0,gp,364 # 20000568 <str_output>
    1524:	3775                	jal	14d0 <puts>
	modI2C_display(str_output, line++);
    1526:	c3c18793          	addi	a5,gp,-964 # 20000038 <line.6>
    152a:	4380                	lw	s0,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    152c:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
    1530:	00140713          	addi	a4,s0,1
    1534:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    1536:	a50ff0ef          	jal	ra,786 <i2c_ping>
    153a:	e519                	bnez	a0,1548 <i2c_scan_callback+0x46>
	ssd1306_print_str_at(str, line, 0);
    153c:	0ff47513          	andi	a0,s0,255
}
    1540:	4412                	lw	s0,4(sp)
    1542:	40a2                	lw	ra,8(sp)
    1544:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    1546:	bf19                	j	145c <ssd1306_print_str_at.constprop.0>
}
    1548:	40a2                	lw	ra,8(sp)
    154a:	4412                	lw	s0,4(sp)
    154c:	0131                	addi	sp,sp,12
    154e:	8082                	ret
    1550:	8082                	ret

00001552 <putchar>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1552:	e00007b7          	lui	a5,0xe0000
    1556:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
    155a:	0c000713          	li	a4,192
    155e:	0c07f793          	andi	a5,a5,192
    1562:	04e78d63          	beq	a5,a4,15bc <putchar+0x6a>
{
    1566:	1151                	addi	sp,sp,-12
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1568:	001007b7          	lui	a5,0x100
{
    156c:	c222                	sw	s0,4(sp)
    156e:	c406                	sw	ra,8(sp)
    1570:	842a                	mv	s0,a0
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1572:	0785                	addi	a5,a5,1
	while( ( lastdmd = (*DMDATA0) ) & 0x80 )
    1574:	e00006b7          	lui	a3,0xe0000
    1578:	0f46a703          	lw	a4,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
    157c:	0f468613          	addi	a2,a3,244
    1580:	08077593          	andi	a1,a4,128
    1584:	e18d                	bnez	a1,15a6 <putchar+0x54>
	if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
    1586:	c319                	beqz	a4,158c <putchar+0x3a>
    1588:	ee0ff0ef          	jal	ra,c68 <internal_handle_input.constprop.0>
	*DMDATA0 = 0x85 | ((const char)c<<8);
    158c:	6541                	lui	a0,0x10
    158e:	157d                	addi	a0,a0,-1
    1590:	00841793          	slli	a5,s0,0x8
    1594:	8fe9                	and	a5,a5,a0
    1596:	0857e793          	ori	a5,a5,133
    159a:	e0000737          	lui	a4,0xe0000
    159e:	0ef72a23          	sw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
	return 1;
    15a2:	4505                	li	a0,1
    15a4:	a801                	j	15b4 <putchar+0x62>
		if( timeout-- == 0 )
    15a6:	17fd                	addi	a5,a5,-1
    15a8:	fbe1                	bnez	a5,1578 <putchar+0x26>
			*DMDATA0 |= 0xc0;
    15aa:	421c                	lw	a5,0(a2)
    15ac:	4501                	li	a0,0
    15ae:	0c07e793          	ori	a5,a5,192
    15b2:	c21c                	sw	a5,0(a2)
}
    15b4:	40a2                	lw	ra,8(sp)
    15b6:	4412                	lw	s0,4(sp)
    15b8:	0131                	addi	sp,sp,12
    15ba:	8082                	ret
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    15bc:	4501                	li	a0,0
}
    15be:	8082                	ret

000015c0 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    15c0:	400227b7          	lui	a5,0x40022
    15c4:	4705                	li	a4,1
    15c6:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    15c8:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    15cc:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    15d0:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    15d4:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x10767c4>
    15d8:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    15da:	009f0737          	lui	a4,0x9f0
    15de:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    15e0:	020006b7          	lui	a3,0x2000
    15e4:	40021737          	lui	a4,0x40021
    15e8:	431c                	lw	a5,0(a4)
    15ea:	8ff5                	and	a5,a5,a3
    15ec:	dff5                	beqz	a5,15e8 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    15ee:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    15f0:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    15f4:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    15f6:	0027e793          	ori	a5,a5,2
    15fa:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    15fc:	4721                	li	a4,8
    15fe:	42dc                	lw	a5,4(a3)
    1600:	8bb1                	andi	a5,a5,12
    1602:	fee79ee3          	bne	a5,a4,15fe <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    1606:	e00007b7          	lui	a5,0xe0000
    160a:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    160e:	08000713          	li	a4,128
    1612:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    1616:	8082                	ret

00001618 <main>:
			printf("Long Press\n"); break;
	}
}

int main()
{
    1618:	f8810113          	addi	sp,sp,-120
    161c:	da86                	sw	ra,116(sp)
    161e:	d8a2                	sw	s0,112(sp)
    1620:	d6a6                	sw	s1,108(sp)
	uint32_t sec_time = 0;
	uint32_t time_ref = 0;

	M_Encoder encoder_a = {0, 0, 0};

	SystemInit();
    1622:	3f79                	jal	15c0 <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    1624:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1628:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    162a:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    162e:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x22c2>
    1632:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    1634:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    1638:	cac18413          	addi	s0,gp,-852 # 200000a8 <systick_millis>
    163c:	00042023          	sw	zero,0(s0)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    1640:	4398                	lw	a4,0(a5)
	systick_init();			//! required for millis()

	funGpioInitAll();
	Delay_Ms(100);
    1642:	00494537          	lui	a0,0x494
    1646:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.d894f163+0x48a543>
    164a:	00776713          	ori	a4,a4,7
    164e:	c398                	sw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1650:	e000e7b7          	lui	a5,0xe000e
    1654:	6705                	lui	a4,0x1
    1656:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>
	funGpioInitAll();
    165a:	40021737          	lui	a4,0x40021
    165e:	4f1c                	lw	a5,24(a4)
    1660:	0357e793          	ori	a5,a5,53
    1664:	cf1c                	sw	a5,24(a4)
	Delay_Ms(100);
    1666:	c07fe0ef          	jal	ra,26c <DelaySysTick>
    }

    void button_setup(Button_t *model) {
    if (model->pin == 0xFF) return; 

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
    166a:	40011737          	lui	a4,0x40011
    166e:	40072783          	lw	a5,1024(a4) # 40011400 <_eusrstack+0x20010c00>
    1672:	40070613          	addi	a2,a4,1024
    1676:	cac18693          	addi	a3,gp,-852 # 200000a8 <systick_millis>
    167a:	9bc1                	andi	a5,a5,-16
    167c:	0087e793          	ori	a5,a5,8
    1680:	40f72023          	sw	a5,1024(a4)
    funDigitalWrite(model->pin, 1);
    1684:	4785                	li	a5,1
    1686:	ca1c                	sw	a5,16(a2)
    model->debounce_time = millis();
    1688:	4018                	lw	a4,0(s0)
    168a:	c036                	sw	a3,0(sp)
    168c:	c83a                	sw	a4,16(sp)
    model->release_time = millis();
    168e:	4018                	lw	a4,0(s0)
    1690:	c23a                	sw	a4,4(sp)
	if(dev->regb == 0) dev->regb = 1;
    1692:	c0418613          	addi	a2,gp,-1020 # 20000000 <dev_aht21>
    1696:	00a64603          	lbu	a2,10(a2) # f00a <lib_i2c.c.d894f163+0x574d>
    169a:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_aht21>
    169e:	e601                	bnez	a2,16a6 <main+0x8e>
	if(dev->regb  > 4) dev->regb = 4;
    16a0:	00f70523          	sb	a5,10(a4)
    16a4:	a021                	j	16ac <main+0x94>
    16a6:	4791                	li	a5,4
    16a8:	fec7ece3          	bltu	a5,a2,16a0 <main+0x88>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    16ac:	400217b7          	lui	a5,0x40021
    16b0:	4b90                	lw	a2,16(a5)
    16b2:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    16b6:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    16ba:	8e49                	or	a2,a2,a0
    16bc:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    16be:	4b90                	lw	a2,16(a5)
    16c0:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    16c2:	6405                	lui	s0,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    16c4:	8e6d                	and	a2,a2,a1
    16c6:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    16c8:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    16ca:	fbc00637          	lui	a2,0xfbc00
    16ce:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    16d0:	8ec9                	or	a3,a3,a0
    16d2:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    16d4:	4f94                	lw	a3,24(a5)
    16d6:	0116e693          	ori	a3,a3,17
    16da:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    16dc:	400107b7          	lui	a5,0x40010
    16e0:	43d4                	lw	a3,4(a5)
    16e2:	8ef1                	and	a3,a3,a2
    16e4:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    16e6:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    16e8:	767d                	lui	a2,0xfffff
    16ea:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    16ee:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    16f0:	400117b7          	lui	a5,0x40011
    16f4:	4394                	lw	a3,0(a5)
    16f6:	f0f6f693          	andi	a3,a3,-241
    16fa:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    16fc:	4394                	lw	a3,0(a5)
    16fe:	0d06e693          	ori	a3,a3,208
    1702:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1704:	4394                	lw	a3,0(a5)
    1706:	8ef1                	and	a3,a3,a2
    1708:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    170a:	4394                	lw	a3,0(a5)
    170c:	d0040613          	addi	a2,s0,-768 # d00 <_write.constprop.0+0x8e>
    1710:	8ed1                	or	a3,a3,a2
    1712:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    1714:	400056b7          	lui	a3,0x40005
    1718:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
    171c:	07c2                	slli	a5,a5,0x10
    171e:	83c1                	srli	a5,a5,0x10
    1720:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    1724:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    1728:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
    172c:	431c                	lw	a5,0(a4)
    172e:	6761                	lui	a4,0x18
    1730:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.d894f163+0xede3>
    1734:	00179593          	slli	a1,a5,0x1
    1738:	30f76563          	bltu	a4,a5,1a42 <main+0x42a>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    173c:	02dc7537          	lui	a0,0x2dc7
    1740:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbd343>
    1744:	97dfe0ef          	jal	ra,c0 <__hidden___udivsi3>
    1748:	147d                	addi	s0,s0,-1
    174a:	8d61                	and	a0,a0,s0
    174c:	0542                	slli	a0,a0,0x10
    174e:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    1750:	40005737          	lui	a4,0x40005
    1754:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    1758:	40075783          	lhu	a5,1024(a4)
    175c:	07c2                	slli	a5,a5,0x10
    175e:	83c1                	srli	a5,a5,0x10
    1760:	0017e793          	ori	a5,a5,1
    1764:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    1768:	f21fe0ef          	jal	ra,688 <i2c_error>

void modI2C_setup() {
	if(i2c_init(&dev_aht21) != I2C_OK) {
    176c:	2e050963          	beqz	a0,1a5e <main+0x446>
		printf("Failed to init I2C\n");
    1770:	6509                	lui	a0,0x2
    1772:	36450513          	addi	a0,a0,868 # 2364 <I2C1_ER_IRQHandler+0x162>
    1776:	3ba9                	jal	14d0 <puts>
	button_setup(&button1);

	// I2C1: uses PC1 & PC2
	modI2C_setup();

	uint8_t slave_mode = funDigitalRead(BUTTON_PIN);
    1778:	400117b7          	lui	a5,0x40011
    177c:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    1780:	479c                	lw	a5,8(a5)
	if (slave_mode == 0) {
    1782:	8b85                	andi	a5,a5,1
    1784:	10079063          	bnez	a5,1884 <main+0x26c>
		printf("I2C Slave mode\n");
    1788:	6509                	lui	a0,0x2
    178a:	3cc50513          	addi	a0,a0,972 # 23cc <I2C1_ER_IRQHandler+0x1ca>
    178e:	3389                	jal	14d0 <puts>
} i2c_slave_state;

void SetupI2CSlave(uint8_t address, volatile uint8_t* registers, uint8_t size,
    i2c_write_callback_t write_callback, i2c_read_callback_t read_callback, bool read_only
) {
    i2c_slave_state.first_write = 1;
    1790:	14018793          	addi	a5,gp,320 # 2000053c <i2c_slave_state>
    1794:	4705                	li	a4,1
    1796:	00e79023          	sh	a4,0(a5)
    i2c_slave_state.offset = 0;
    i2c_slave_state.position = 0;
    i2c_slave_state.registers1 = registers;
    179a:	c1c18713          	addi	a4,gp,-996 # 20000018 <i2c_registers>
    179e:	c3d8                	sw	a4,4(a5)
    i2c_slave_state.size1 = size;
    i2c_slave_state.registers2 = NULL;
    i2c_slave_state.size2 = 0;
    i2c_slave_state.write_callback1 = write_callback;
    17a0:	6705                	lui	a4,0x1
    17a2:	11070713          	addi	a4,a4,272 # 1110 <onI2C_SlaveWrite>
    17a6:	cbd8                	sw	a4,20(a5)
    i2c_slave_state.read_callback1 = read_callback;
    17a8:	6705                	lui	a4,0x1
    i2c_slave_state.size1 = size;
    17aa:	02000613          	li	a2,32
    i2c_slave_state.read_callback1 = read_callback;
    17ae:	11870713          	addi	a4,a4,280 # 1118 <onI2C_SlaveRead>
    i2c_slave_state.registers2 = NULL;
    17b2:	0007a623          	sw	zero,12(a5)
    i2c_slave_state.size2 = 0;
    17b6:	00078823          	sb	zero,16(a5)
    i2c_slave_state.read_only1 = read_only;
    17ba:	00078e23          	sb	zero,28(a5)
    i2c_slave_state.read_callback1 = read_callback;
    17be:	cf98                	sw	a4,24(a5)
    i2c_slave_state.position = 0;
    17c0:	00078123          	sb	zero,2(a5)
    i2c_slave_state.size1 = size;
    17c4:	00c78423          	sb	a2,8(a5)
    i2c_slave_state.write_callback2 = NULL;
    17c8:	0207a023          	sw	zero,32(a5)
    i2c_slave_state.read_callback2 = NULL;
    17cc:	0207a223          	sw	zero,36(a5)
    i2c_slave_state.read_only2 = false;
    17d0:	02078423          	sb	zero,40(a5)

    // Enable I2C1
    RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    17d4:	400217b7          	lui	a5,0x40021
    17d8:	4fd4                	lw	a3,28(a5)
    17da:	002005b7          	lui	a1,0x200
    17de:	8ecd                	or	a3,a3,a1
    17e0:	cfd4                	sw	a3,28(a5)

    // Reset I2C1 to init all regs
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
    17e2:	4b98                	lw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    17e4:	ffe006b7          	lui	a3,0xffe00
    17e8:	16fd                	addi	a3,a3,-1
    RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
    17ea:	8f4d                	or	a4,a4,a1
    17ec:	cb98                	sw	a4,16(a5)
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    17ee:	4b98                	lw	a4,16(a5)

    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
    17f0:	65a1                	lui	a1,0x8
    RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    17f2:	8f75                	and	a4,a4,a3
    17f4:	cb98                	sw	a4,16(a5)
    I2C1->CTLR1 |= I2C_CTLR1_SWRST;
    17f6:	400057b7          	lui	a5,0x40005
    17fa:	4007d683          	lhu	a3,1024(a5) # 40005400 <_eusrstack+0x20004c00>
    17fe:	06c2                	slli	a3,a3,0x10
    1800:	82c1                	srli	a3,a3,0x10
    1802:	8ecd                	or	a3,a3,a1
    1804:	40d79023          	sh	a3,1024(a5)
    I2C1->CTLR1 &= ~I2C_CTLR1_SWRST;
    1808:	4007d683          	lhu	a3,1024(a5)
    180c:	400005b7          	lui	a1,0x40000
    1810:	06c6                	slli	a3,a3,0x11
    1812:	82c5                	srli	a3,a3,0x11
    1814:	40d79023          	sh	a3,1024(a5)

    // Set module clock frequency
    uint32_t prerate = 2000000; // I2C Logic clock rate, must be higher than the bus clock rate
    I2C1->CTLR2 |= (FUNCONF_SYSTEM_CORE_CLOCK/prerate) & I2C_CTLR2_FREQ;
    1818:	4047d683          	lhu	a3,1028(a5)
    181c:	06c2                	slli	a3,a3,0x10
    181e:	82c1                	srli	a3,a3,0x10
    1820:	0186e693          	ori	a3,a3,24
    1824:	40d79223          	sh	a3,1028(a5)

    // Enable interrupts
    I2C1->CTLR2 |= I2C_CTLR2_ITBUFEN | I2C_CTLR2_ITEVTEN | I2C_CTLR2_ITERREN;
    1828:	4047d683          	lhu	a3,1028(a5)
    182c:	06c2                	slli	a3,a3,0x10
    182e:	82c1                	srli	a3,a3,0x10
    1830:	7006e693          	ori	a3,a3,1792
    1834:	40d79223          	sh	a3,1028(a5)
    1838:	e000e6b7          	lui	a3,0xe000e
    183c:	10b6a023          	sw	a1,256(a3) # e000e100 <_eusrstack+0xc000d900>
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    1840:	40c68f23          	sb	a2,1054(a3)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1844:	800005b7          	lui	a1,0x80000
    1848:	10b6a023          	sw	a1,256(a3)
	NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    184c:	40c68fa3          	sb	a2,1055(a3)
    NVIC_EnableIRQ(I2C1_ER_IRQn); // Error interrupt
    NVIC_SetPriority(I2C1_ER_IRQn, 2 << 4);

    // Set clock configuration
    uint32_t clockrate = 1000000; // I2C Bus clock rate, must be lower than the logic clock rate
    I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(3*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_FS; // Fast mode 33% duty cycle
    1850:	76e1                	lui	a3,0xffff8
    1852:	06c1                	addi	a3,a3,16
    1854:	40d79e23          	sh	a3,1052(a5)
    //I2C1->CKCFGR = ((FUNCONF_SYSTEM_CORE_CLOCK/(25*clockrate))&I2C_CKCFGR_CCR) | I2C_CKCFGR_DUTY | I2C_CKCFGR_FS; // Fast mode 36% duty cycle
    //I2C1->CKCFGR = (FUNCONF_SYSTEM_CORE_CLOCK/(2*clockrate))&I2C_CKCFGR_CCR; // Standard mode good to 100kHz

    // Set I2C address
    I2C1->OADDR1 = address << 1;
    1858:	0ee00693          	li	a3,238
    185c:	40d79423          	sh	a3,1032(a5)
    I2C1->OADDR2 = 0;
    1860:	40079623          	sh	zero,1036(a5)

    // Enable I2C
    I2C1->CTLR1 |= I2C_CTLR1_PE;
    1864:	4007d703          	lhu	a4,1024(a5)
    1868:	0742                	slli	a4,a4,0x10
    186a:	8341                	srli	a4,a4,0x10
    186c:	00176713          	ori	a4,a4,1
    1870:	40e79023          	sh	a4,1024(a5)

    // Acknowledge bytes when they are received
    I2C1->CTLR1 |= I2C_CTLR1_ACK;
    1874:	4007d703          	lhu	a4,1024(a5)
    1878:	0742                	slli	a4,a4,0x10
    187a:	8341                	srli	a4,a4,0x10
    187c:	40076713          	ori	a4,a4,1024
    1880:	40e79023          	sh	a4,1024(a5)
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    1884:	400216b7          	lui	a3,0x40021
    1888:	4e9c                	lw	a5,24(a3)
    188a:	6705                	lui	a4,0x1
    188c:	0741                	addi	a4,a4,16
    188e:	8fd9                	or	a5,a5,a4
    SPI1->CTLR1 = 0;
    1890:	40013437          	lui	s0,0x40013
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    1894:	ce9c                	sw	a5,24(a3)
    SPI1->CTLR1 = 0;
    1896:	00041023          	sh	zero,0(s0) # 40013000 <_eusrstack+0x20012800>
    SPI_set_prescaler(0);
    189a:	4501                	li	a0,0
    189c:	b67fe0ef          	jal	ra,402 <SPI_set_prescaler>
    SPI1->CTLR1 |= (SPI_CPOL_Low | SPI_CPHA_1Edge);
    18a0:	00045783          	lhu	a5,0(s0)
    GPIOC->CFGLR &= ~(0xf << (4 * 5));
    18a4:	ff1006b7          	lui	a3,0xff100
    18a8:	16fd                	addi	a3,a3,-1
    SPI1->CTLR1 |= (SPI_CPOL_Low | SPI_CPHA_1Edge);
    18aa:	07c2                	slli	a5,a5,0x10
    18ac:	83c1                	srli	a5,a5,0x10
    18ae:	00f41023          	sh	a5,0(s0)
    SPI1->CTLR1 |= SPI_NSS_Soft; // SSM NSS software control mode
    18b2:	00045783          	lhu	a5,0(s0)
	// uses SCK-PC5, MOSI-PC6, RST-PD2, DC-PC4
	// SPI_init();
	// mod_st7735_setup(PC0, PC3);

	SPI_init2();
	Delay_Ms(200);
    18b6:	00928537          	lui	a0,0x928
    18ba:	c0050513          	addi	a0,a0,-1024 # 927c00 <lib_i2c.c.d894f163+0x91e343>
    18be:	07c2                	slli	a5,a5,0x10
    18c0:	83c1                	srli	a5,a5,0x10
    18c2:	2007e793          	ori	a5,a5,512
    18c6:	00f41023          	sh	a5,0(s0)
    GPIOC->CFGLR &= ~(0xf << (4 * 5));
    18ca:	400117b7          	lui	a5,0x40011
    18ce:	4398                	lw	a4,0(a5)
    18d0:	8f75                	and	a4,a4,a3
    18d2:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR |= (GPIO_Speed_50MHz | GPIO_CNF_OUT_PP_AF) << (4 * 5);
    18d4:	4398                	lw	a4,0(a5)
    18d6:	00b006b7          	lui	a3,0xb00
    18da:	8f55                	or	a4,a4,a3
    18dc:	c398                	sw	a4,0(a5)
    SPI1->CTLR1 |= SPI_Mode_Master;
    18de:	00045703          	lhu	a4,0(s0)
    GPIOC->CFGLR &= ~(0xf << (4 * 6));
    18e2:	f10006b7          	lui	a3,0xf1000
    18e6:	16fd                	addi	a3,a3,-1
    SPI1->CTLR1 |= SPI_Mode_Master;
    18e8:	0742                	slli	a4,a4,0x10
    18ea:	8341                	srli	a4,a4,0x10
    18ec:	10476713          	ori	a4,a4,260
    18f0:	00e41023          	sh	a4,0(s0)
    SPI1->CTLR1 |= SPI_Direction_2Lines_FullDuplex;
    18f4:	00045703          	lhu	a4,0(s0)
    18f8:	0742                	slli	a4,a4,0x10
    18fa:	8341                	srli	a4,a4,0x10
    18fc:	00e41023          	sh	a4,0(s0)
    GPIOC->CFGLR &= ~(0xf << (4 * 6));
    1900:	4398                	lw	a4,0(a5)
    1902:	8f75                	and	a4,a4,a3
    1904:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR |= (GPIO_Speed_50MHz | GPIO_CNF_OUT_PP_AF) << (4 * 6);
    1906:	4398                	lw	a4,0(a5)
    1908:	0b0006b7          	lui	a3,0xb000
    190c:	8f55                	or	a4,a4,a3
    190e:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR &= ~(0xf << (4 * 7));
    1910:	4398                	lw	a4,0(a5)
    GPIOC->CFGLR |= GPIO_CNF_IN_FLOATING << (4 * 7);
    1912:	400006b7          	lui	a3,0x40000
    GPIOC->CFGLR &= ~(0xf << (4 * 7));
    1916:	0712                	slli	a4,a4,0x4
    1918:	8311                	srli	a4,a4,0x4
    191a:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR |= GPIO_CNF_IN_FLOATING << (4 * 7);
    191c:	4398                	lw	a4,0(a5)
    191e:	8f55                	or	a4,a4,a3
    1920:	c398                	sw	a4,0(a5)
	SPI1->CTLR1 &= ~(SPI_CTLR1_DFF); // DFF 16bit data-length enable, writable only when SPE is 0
    1922:	00045783          	lhu	a5,0(s0)
    1926:	777d                	lui	a4,0xfffff
    1928:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_eusrstack+0xdfffefff>
    192c:	07c2                	slli	a5,a5,0x10
    192e:	83c1                	srli	a5,a5,0x10
    1930:	8ff9                	and	a5,a5,a4
    1932:	00f41023          	sh	a5,0(s0)
    SPI1->CTLR1 |= SPI_CTLR1_SPE;
    1936:	00045783          	lhu	a5,0(s0)
    193a:	07c2                	slli	a5,a5,0x10
    193c:	83c1                	srli	a5,a5,0x10
    193e:	0407e793          	ori	a5,a5,64
    1942:	00f41023          	sh	a5,0(s0)
    1946:	927fe0ef          	jal	ra,26c <DelaySysTick>
FATFS fatfs; /* File system object */
UINT br;
FRESULT rc;

FRESULT mod_sdCard_write(const char filename[], const char data[]) {
	printf("\nMounting volume.\n\r");
    194a:	6709                	lui	a4,0x2
    194c:	3dc70513          	addi	a0,a4,988 # 23dc <I2C1_ER_IRQHandler+0x1da>
    1950:	eccff0ef          	jal	ra,101c <printf>
	rc = pf_mount(&fatfs);
    1954:	fccff0ef          	jal	ra,1120 <pf_mount.constprop.0>
    1958:	ca418693          	addi	a3,gp,-860 # 200000a0 <rc>
	printf("rc=%u\n\r", rc);
    195c:	6409                	lui	s0,0x2
	rc = pf_mount(&fatfs);
    195e:	c288                	sw	a0,0(a3)
    1960:	85aa                	mv	a1,a0
	printf("rc=%u\n\r", rc);
    1962:	3f040513          	addi	a0,s0,1008 # 23f0 <I2C1_ER_IRQHandler+0x1ee>
    1966:	eb6ff0ef          	jal	ra,101c <printf>
	if (rc) return;
    196a:	ca418693          	addi	a3,gp,-860 # 200000a0 <rc>
    196e:	4294                	lw	a3,0(a3)
    1970:	6709                	lui	a4,0x2
    1972:	ca3a                	sw	a4,20(sp)
    1974:	ca418493          	addi	s1,gp,-860 # 200000a0 <rc>
    1978:	e6a1                	bnez	a3,19c0 <main+0x3a8>

	printf("Opening file \"%s\"\n\r", filename);
    197a:	6589                	lui	a1,0x2
    197c:	6509                	lui	a0,0x2
    197e:	28058593          	addi	a1,a1,640 # 2280 <I2C1_ER_IRQHandler+0x7e>
    1982:	3f850513          	addi	a0,a0,1016 # 23f8 <I2C1_ER_IRQHandler+0x1f6>
    1986:	e96ff0ef          	jal	ra,101c <printf>
	rc = pf_open(filename);
    198a:	fdffe0ef          	jal	ra,968 <pf_open.constprop.0>
    198e:	85aa                	mv	a1,a0
    1990:	c088                	sw	a0,0(s1)
	printf("rc=%u\n\r", rc);
    1992:	3f040513          	addi	a0,s0,1008
    1996:	e86ff0ef          	jal	ra,101c <printf>
	if (rc) return;
    199a:	409c                	lw	a5,0(s1)
    199c:	e395                	bnez	a5,19c0 <main+0x3a8>

	rc = pf_write(data, strlen(data), &br);
    199e:	6509                	lui	a0,0x2
    19a0:	45d1                	li	a1,20
    19a2:	40c50513          	addi	a0,a0,1036 # 240c <I2C1_ER_IRQHandler+0x20a>
    19a6:	e79fe0ef          	jal	ra,81e <pf_write.constprop.0>
    19aa:	c088                	sw	a0,0(s1)
    19ac:	85aa                	mv	a1,a0

	if (rc!=FR_OK) {
    19ae:	1e050763          	beqz	a0,1b9c <main+0x584>
		printf("write error: %u\n\r", rc);
    19b2:	6509                	lui	a0,0x2
    19b4:	42450513          	addi	a0,a0,1060 # 2424 <I2C1_ER_IRQHandler+0x222>
		return rc;
	}

	rc = pf_write(0, 0, &br);
	if (rc!=FR_OK) {
		printf("write finish error: %u\n\r", rc);
    19b8:	e64ff0ef          	jal	ra,101c <printf>
	}

	return rc;
    19bc:	409c                	lw	a5,0(s1)
    19be:	c43e                	sw	a5,8(sp)

	FRESULT rc;
	rc = mod_sdCard_write("testfile.txt", "hello world 66666!\n\r");

	if (rc == 0) {
    19c0:	47a2                	lw	a5,8(sp)
    19c2:	2c079163          	bnez	a5,1c84 <main+0x66c>
		Delay_Ms(200);
    19c6:	00928537          	lui	a0,0x928
    19ca:	c0050513          	addi	a0,a0,-1024 # 927c00 <lib_i2c.c.d894f163+0x91e343>
    19ce:	89ffe0ef          	jal	ra,26c <DelaySysTick>
}

FRESULT mod_sdCard_loadFile(const char filename[], uint32_t addr) {
	BYTE buff[64];

	printf("\nMounting volume.\n\r");
    19d2:	47d2                	lw	a5,20(sp)
    19d4:	3dc78513          	addi	a0,a5,988 # 400113dc <_eusrstack+0x20010bdc>
    19d8:	e44ff0ef          	jal	ra,101c <printf>
	rc = pf_mount(&fatfs);
    19dc:	f44ff0ef          	jal	ra,1120 <pf_mount.constprop.0>
    19e0:	85aa                	mv	a1,a0
    19e2:	c088                	sw	a0,0(s1)
	printf("rc=%u\n\r", rc);
    19e4:	3f040513          	addi	a0,s0,1008
    19e8:	e34ff0ef          	jal	ra,101c <printf>
	if (rc) return;
    19ec:	409c                	lw	a5,0(s1)
    19ee:	28079563          	bnez	a5,1c78 <main+0x660>

	printf("Opening file \"%s\"\n\r", filename);
    19f2:	6589                	lui	a1,0x2
    19f4:	6509                	lui	a0,0x2
    19f6:	28058593          	addi	a1,a1,640 # 2280 <I2C1_ER_IRQHandler+0x7e>
    19fa:	3f850513          	addi	a0,a0,1016 # 23f8 <I2C1_ER_IRQHandler+0x1f6>
    19fe:	e1eff0ef          	jal	ra,101c <printf>
	rc = pf_open(filename);
    1a02:	f67fe0ef          	jal	ra,968 <pf_open.constprop.0>
    1a06:	85aa                	mv	a1,a0
    1a08:	c088                	sw	a0,0(s1)
	printf("rc=%u\n\r", rc);
    1a0a:	3f040513          	addi	a0,s0,1008
    1a0e:	e0eff0ef          	jal	ra,101c <printf>
	if (rc) return;
    1a12:	409c                	lw	a5,0(s1)
    1a14:	c43e                	sw	a5,8(sp)
    1a16:	26079163          	bnez	a5,1c78 <main+0x660>

	uint32_t total_bytes = 0;
	uint8_t cnt = 0;
	const char spinner[] = "/-\\|";
    1a1a:	7c5c37b7          	lui	a5,0x7c5c3
    1a1e:	d2f78793          	addi	a5,a5,-721 # 7c5c2d2f <_eusrstack+0x5c5c252f>
    1a22:	d23e                	sw	a5,36(sp)
    1a24:	02010423          	sb	zero,40(sp)
	uint8_t cnt = 0;
    1a28:	ca02                	sw	zero,20(sp)
	FATFS *fs = FatFs;
    1a2a:	c8c1a783          	lw	a5,-884(gp) # 20000088 <FatFs>
	*br = 0;
    1a2e:	ca01a023          	sw	zero,-864(gp) # 2000009c <br>
    1a32:	ca018713          	addi	a4,gp,-864 # 2000009c <br>
    1a36:	c63a                	sw	a4,12(sp)
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1a38:	16079d63          	bnez	a5,1bb2 <main+0x59a>

	for (;;) {
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    1a3c:	4795                	li	a5,5
    1a3e:	c09c                	sw	a5,0(s1)
    1a40:	a415                	j	1c64 <main+0x64c>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    1a42:	02dc7537          	lui	a0,0x2dc7
    1a46:	95be                	add	a1,a1,a5
    1a48:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbd343>
    1a4c:	e74fe0ef          	jal	ra,c0 <__hidden___udivsi3>
    1a50:	147d                	addi	s0,s0,-1
    1a52:	8d61                	and	a0,a0,s0
    1a54:	0542                	slli	a0,a0,0x10
    1a56:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    1a58:	67a1                	lui	a5,0x8
    1a5a:	8d5d                	or	a0,a0,a5
    1a5c:	b9d5                	j	1750 <main+0x138>
	} else {
		if (i2c_ping(0x3C) == I2C_OK) {
    1a5e:	03c00513          	li	a0,60
    1a62:	d25fe0ef          	jal	ra,786 <i2c_ping>
    1a66:	0e051063          	bnez	a0,1b46 <main+0x52e>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1a6a:	6789                	lui	a5,0x2
    1a6c:	ca018423          	sb	zero,-856(gp) # 200000a4 <ssd1306_buffer>
    1a70:	76078493          	addi	s1,a5,1888 # 2760 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    1a74:	0004c503          	lbu	a0,0(s1)
    1a78:	0ff00713          	li	a4,255
    1a7c:	02e51e63          	bne	a0,a4,1ab8 <main+0x4a0>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    1a80:	02100513          	li	a0,33
    1a84:	9c8ff0ef          	jal	ra,c4c <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    1a88:	4501                	li	a0,0
    1a8a:	9c2ff0ef          	jal	ra,c4c <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    1a8e:	07f00513          	li	a0,127
    1a92:	9baff0ef          	jal	ra,c4c <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    1a96:	02200513          	li	a0,34
    1a9a:	9b2ff0ef          	jal	ra,c4c <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    1a9e:	4501                	li	a0,0
    1aa0:	9acff0ef          	jal	ra,c4c <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    1aa4:	451d                	li	a0,7
    1aa6:	9a6ff0ef          	jal	ra,c4c <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    1aaa:	02000593          	li	a1,32
    1aae:	ca818513          	addi	a0,gp,-856 # 200000a4 <ssd1306_buffer>
    1ab2:	97fff0ef          	jal	ra,1430 <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    1ab6:	a029                	j	1ac0 <main+0x4a8>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    1ab8:	0485                	addi	s1,s1,1
    1aba:	992ff0ef          	jal	ra,c4c <ssd1306_cmd>
    1abe:	d95d                	beqz	a0,1a74 <main+0x45c>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    1ac0:	40000613          	li	a2,1024
    1ac4:	4581                	li	a1,0
    1ac6:	d4018513          	addi	a0,gp,-704 # 2000013c <frame_buffer>
    1aca:	925ff0ef          	jal	ra,13ee <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1ace:	02100513          	li	a0,33
    1ad2:	97aff0ef          	jal	ra,c4c <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1ad6:	4501                	li	a0,0
    1ad8:	974ff0ef          	jal	ra,c4c <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1adc:	07f00513          	li	a0,127
    1ae0:	96cff0ef          	jal	ra,c4c <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1ae4:	02200513          	li	a0,34
    1ae8:	964ff0ef          	jal	ra,c4c <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1aec:	4501                	li	a0,0
    1aee:	95eff0ef          	jal	ra,c4c <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1af2:	451d                	li	a0,7
    1af4:	958ff0ef          	jal	ra,c4c <ssd1306_cmd>
    1af8:	4401                	li	s0,0
    1afa:	86a6                	mv	a3,s1
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    1afc:	d4018793          	addi	a5,gp,-704 # 2000013c <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1b00:	4501                	li	a0,0
    1b02:	008784b3          	add	s1,a5,s0
    1b06:	02050713          	addi	a4,a0,32
    1b0a:	01071593          	slli	a1,a4,0x10
    1b0e:	81c1                	srli	a1,a1,0x10
    1b10:	8d89                	sub	a1,a1,a0
    1b12:	9526                	add	a0,a0,s1
    1b14:	ca3a                	sw	a4,20(sp)
    1b16:	91bff0ef          	jal	ra,1430 <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    1b1a:	4752                	lw	a4,20(sp)
    1b1c:	853a                	mv	a0,a4
    1b1e:	08000713          	li	a4,128
    1b22:	fee512e3          	bne	a0,a4,1b06 <main+0x4ee>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    1b26:	08040413          	addi	s0,s0,128
    1b2a:	40000793          	li	a5,1024
    1b2e:	fcf417e3          	bne	s0,a5,1afc <main+0x4e4>
			ssd1306_setup();

			sprintf(str_output, "Hello Bee!");
    1b32:	6589                	lui	a1,0x2
    1b34:	37858593          	addi	a1,a1,888 # 2378 <I2C1_ER_IRQHandler+0x176>
    1b38:	16c18513          	addi	a0,gp,364 # 20000568 <str_output>
    1b3c:	8c5ff0ef          	jal	ra,1400 <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    1b40:	4501                	li	a0,0
    1b42:	91bff0ef          	jal	ra,145c <ssd1306_print_str_at.constprop.0>
		}

		// Scan the I2C Bus, prints any devices that respond
		printf("----Scanning I2C Bus for Devices---\n");
    1b46:	6509                	lui	a0,0x2
    1b48:	38450513          	addi	a0,a0,900 # 2384 <I2C1_ER_IRQHandler+0x182>
    1b4c:	985ff0ef          	jal	ra,14d0 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1b50:	4401                	li	s0,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    1b52:	8522                	mv	a0,s0
    1b54:	c33fe0ef          	jal	ra,786 <i2c_ping>
    1b58:	e501                	bnez	a0,1b60 <main+0x548>
    1b5a:	8522                	mv	a0,s0
    1b5c:	9a7ff0ef          	jal	ra,1502 <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    1b60:	0405                	addi	s0,s0,1
    1b62:	0ff47413          	andi	s0,s0,255
    1b66:	07f00793          	li	a5,127
    1b6a:	fef414e3          	bne	s0,a5,1b52 <main+0x53a>
		i2c_scan(i2c_scan_callback);
		printf("----Done Scanning----\n\n");
    1b6e:	6509                	lui	a0,0x2
    1b70:	3a850513          	addi	a0,a0,936 # 23a8 <I2C1_ER_IRQHandler+0x1a6>
    1b74:	95dff0ef          	jal	ra,14d0 <puts>
	// i2c_device_tests();
	// test_v003Slave();
}

void modI2C_task(uint32_t counter) {
	sprintf(str_output, "counter %lu", counter);
    1b78:	6589                	lui	a1,0x2
    1b7a:	4601                	li	a2,0
    1b7c:	3c058593          	addi	a1,a1,960 # 23c0 <I2C1_ER_IRQHandler+0x1be>
    1b80:	16c18513          	addi	a0,gp,364 # 20000568 <str_output>
    1b84:	849ff0ef          	jal	ra,13cc <sprintf>
	if (i2c_ping(0x3C) != I2C_OK) return;
    1b88:	03c00513          	li	a0,60
    1b8c:	bfbfe0ef          	jal	ra,786 <i2c_ping>
    1b90:	be0514e3          	bnez	a0,1778 <main+0x160>
	ssd1306_print_str_at(str, line, 0);
    1b94:	451d                	li	a0,7
    1b96:	8c7ff0ef          	jal	ra,145c <ssd1306_print_str_at.constprop.0>
    1b9a:	bef9                	j	1778 <main+0x160>
	rc = pf_write(0, 0, &br);
    1b9c:	4581                	li	a1,0
    1b9e:	c81fe0ef          	jal	ra,81e <pf_write.constprop.0>
    1ba2:	c088                	sw	a0,0(s1)
    1ba4:	85aa                	mv	a1,a0
	if (rc!=FR_OK) {
    1ba6:	e0050be3          	beqz	a0,19bc <main+0x3a4>
		printf("write finish error: %u\n\r", rc);
    1baa:	6509                	lui	a0,0x2
    1bac:	43850513          	addi	a0,a0,1080 # 2438 <I2C1_ER_IRQHandler+0x236>
    1bb0:	b521                	j	19b8 <main+0x3a0>
	if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
    1bb2:	0017c703          	lbu	a4,1(a5)
    1bb6:	8b05                	andi	a4,a4,1
    1bb8:	e319                	bnez	a4,1bbe <main+0x5a6>
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    1bba:	4791                	li	a5,4
    1bbc:	b549                	j	1a3e <main+0x426>
	remain = fs->fsize - fs->fptr;
    1bbe:	4fd4                	lw	a3,28(a5)
    1bc0:	4f98                	lw	a4,24(a5)
    1bc2:	40e68733          	sub	a4,a3,a4
    1bc6:	04000693          	li	a3,64
    1bca:	00e6f463          	bgeu	a3,a4,1bd2 <main+0x5ba>
    1bce:	04000713          	li	a4,64
    1bd2:	1074                	addi	a3,sp,44
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
    1bd4:	cc36                	sw	a3,24(sp)
	while (btr)	{									/* Repeat until all data transferred */
    1bd6:	e335                	bnez	a4,1c3a <main+0x622>
		if (rc || !br) break; /* Error or end of file */
    1bd8:	47b2                	lw	a5,12(sp)
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    1bda:	0004a023          	sw	zero,0(s1)
		if (rc || !br) break; /* Error or end of file */
    1bde:	438c                	lw	a1,0(a5)
    1be0:	c1d1                	beqz	a1,1c64 <main+0x64c>

		printf("Read %u bytes\n\r", br);
    1be2:	6509                	lui	a0,0x2
    1be4:	45450513          	addi	a0,a0,1108 # 2454 <I2C1_ER_IRQHandler+0x252>
    1be8:	c34ff0ef          	jal	ra,101c <printf>
		printf("string: %s\n\r", buff);
    1bec:	6509                	lui	a0,0x2
    1bee:	106c                	addi	a1,sp,44
    1bf0:	46450513          	addi	a0,a0,1124 # 2464 <I2C1_ER_IRQHandler+0x262>
    1bf4:	c28ff0ef          	jal	ra,101c <printf>

		total_bytes += br;
    1bf8:	47b2                	lw	a5,12(sp)
    1bfa:	4722                	lw	a4,8(sp)
    1bfc:	439c                	lw	a5,0(a5)
    1bfe:	97ba                	add	a5,a5,a4
    1c00:	c43e                	sw	a5,8(sp)
		addr += br;

		if(total_bytes % (16*1024) == 0){
    1c02:	07ca                	slli	a5,a5,0x12
    1c04:	e20793e3          	bnez	a5,1a2a <main+0x412>
			cnt++;
    1c08:	47d2                	lw	a5,20(sp)
			printf("%d kb so far...  ", total_bytes/1024);
    1c0a:	6509                	lui	a0,0x2
    1c0c:	47450513          	addi	a0,a0,1140 # 2474 <I2C1_ER_IRQHandler+0x272>
			cnt++;
    1c10:	0785                	addi	a5,a5,1
    1c12:	0ff7f793          	andi	a5,a5,255
    1c16:	ca3e                	sw	a5,20(sp)
			printf("%d kb so far...  ", total_bytes/1024);
    1c18:	47a2                	lw	a5,8(sp)
    1c1a:	00a7d593          	srli	a1,a5,0xa
    1c1e:	bfeff0ef          	jal	ra,101c <printf>
			putchar(spinner[cnt%4]);
    1c22:	47d2                	lw	a5,20(sp)
    1c24:	10f8                	addi	a4,sp,108
    1c26:	8b8d                	andi	a5,a5,3
    1c28:	97ba                	add	a5,a5,a4
    1c2a:	fb87c503          	lbu	a0,-72(a5)
    1c2e:	925ff0ef          	jal	ra,1552 <putchar>
			putchar('\r');
    1c32:	4535                	li	a0,13
    1c34:	91fff0ef          	jal	ra,1552 <putchar>
    1c38:	bbcd                	j	1a2a <main+0x412>
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    1c3a:	4f94                	lw	a3,24(a5)
    1c3c:	1ff6f613          	andi	a2,a3,511
    1c40:	ea5d                	bnez	a2,1cf6 <main+0x6de>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1c42:	0027c403          	lbu	s0,2(a5)
    1c46:	0096d613          	srli	a2,a3,0x9
    1c4a:	147d                	addi	s0,s0,-1
    1c4c:	8c71                	and	s0,s0,a2
    1c4e:	0ff47413          	andi	s0,s0,255
			if (!cs) {								/* On the cluster boundary? */
    1c52:	e441                	bnez	s0,1cda <main+0x6c2>
				if (fs->fptr == 0) {				/* On the top of the file? */
    1c54:	eab5                	bnez	a3,1cc8 <main+0x6b0>
					clst = fs->org_clust;
    1c56:	5388                	lw	a0,32(a5)
				if (clst <= 1) ABORT(FR_DISK_ERR);
    1c58:	4685                	li	a3,1
    1c5a:	06a6ef63          	bltu	a3,a0,1cd8 <main+0x6c0>
    1c5e:	000780a3          	sb	zero,1(a5)
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    1c62:	c094                	sw	a3,0(s1)
		}
	}

	printf("\n\rLoaded %d kilobytes.\n\r", total_bytes/1024);
    1c64:	47a2                	lw	a5,8(sp)
    1c66:	6509                	lui	a0,0x2
    1c68:	48850513          	addi	a0,a0,1160 # 2488 <I2C1_ER_IRQHandler+0x286>
    1c6c:	00a7d593          	srli	a1,a5,0xa
    1c70:	bacff0ef          	jal	ra,101c <printf>
	
	return rc;
    1c74:	409c                	lw	a5,0(s1)
    1c76:	c63e                	sw	a5,12(sp)
		rc = mod_sdCard_loadFile("testfile.txt",0);
		printf("read result: %u\n\r", rc);
    1c78:	45b2                	lw	a1,12(sp)
    1c7a:	6509                	lui	a0,0x2
    1c7c:	4a450513          	addi	a0,a0,1188 # 24a4 <I2C1_ER_IRQHandler+0x2a2>
    1c80:	b9cff0ef          	jal	ra,101c <printf>
	Button_t button1 = { BUTTON_PIN, BUTTON_IDLE, 0, 0, 0, 0, 0, 0 };
    1c84:	4401                	li	s0,0
    model->btn_state = newState;
    1c86:	470d                	li	a4,3
			printf("Double Click\n");
    1c88:	6489                	lui	s1,0x2
	
	// TIM2 Ch1, Ch2 : uses PD3, PD4.
	// modEncoder_setup(&encoder_a);

	while(1) {
		uint32_t now = millis();
    1c8a:	4782                	lw	a5,0(sp)
    
    uint32_t now = millis();
    uint8_t read = funDigitalRead(model->pin);

    // Debounce check
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1c8c:	4642                	lw	a2,16(sp)
    uint8_t read = funDigitalRead(model->pin);
    1c8e:	400116b7          	lui	a3,0x40011
    1c92:	439c                	lw	a5,0(a5)
    uint32_t now = millis();
    1c94:	4782                	lw	a5,0(sp)
    uint8_t read = funDigitalRead(model->pin);
    1c96:	40068693          	addi	a3,a3,1024 # 40011400 <_eusrstack+0x20010c00>
    uint32_t now = millis();
    1c9a:	439c                	lw	a5,0(a5)
    uint8_t read = funDigitalRead(model->pin);
    1c9c:	4694                	lw	a3,8(a3)
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1c9e:	40c785b3          	sub	a1,a5,a2
    1ca2:	464d                	li	a2,19
    1ca4:	10b67863          	bgeu	a2,a1,1db4 <main+0x79c>
    model->debounce_time = now;

    switch (model->btn_state) {
    1ca8:	4609                	li	a2,2
    uint8_t read = funDigitalRead(model->pin);
    1caa:	8a85                	andi	a3,a3,1
    switch (model->btn_state) {
    1cac:	10c70063          	beq	a4,a2,1dac <main+0x794>
    1cb0:	460d                	li	a2,3
    1cb2:	08c70163          	beq	a4,a2,1d34 <main+0x71c>
    1cb6:	eb5d                	bnez	a4,1d6c <main+0x754>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
    1cb8:	cac9                	beqz	a3,1d4a <main+0x732>
    model->debounce_time = millis();
    1cba:	4782                	lw	a5,0(sp)
    model->release_time = millis();
    1cbc:	4702                	lw	a4,0(sp)
    model->debounce_time = millis();
    1cbe:	439c                	lw	a5,0(a5)
    model->release_time = millis();
    1cc0:	4318                	lw	a4,0(a4)
    1cc2:	c23a                	sw	a4,4(sp)
    model->btn_state = newState;
    1cc4:	8736                	mv	a4,a3
    1cc6:	a041                	j	1d46 <main+0x72e>
					clst = get_fat(fs->curr_clust);
    1cc8:	53c8                	lw	a0,36(a5)
    1cca:	d03a                	sw	a4,32(sp)
    1ccc:	ce3e                	sw	a5,28(sp)
    1cce:	8cdfe0ef          	jal	ra,59a <get_fat>
    1cd2:	5702                	lw	a4,32(sp)
    1cd4:	47f2                	lw	a5,28(sp)
    1cd6:	b749                	j	1c58 <main+0x640>
				fs->curr_clust = clst;				/* Update current cluster */
    1cd8:	d3c8                	sw	a0,36(a5)
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    1cda:	53c8                	lw	a0,36(a5)
    1cdc:	d03a                	sw	a4,32(sp)
    1cde:	ce3e                	sw	a5,28(sp)
    1ce0:	e7efe0ef          	jal	ra,35e <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
    1ce4:	47f2                	lw	a5,28(sp)
    1ce6:	5702                	lw	a4,32(sp)
    1ce8:	e509                	bnez	a0,1cf2 <main+0x6da>
    1cea:	000780a3          	sb	zero,1(a5)
		rc = pf_read(buff, sizeof(buff), &br); /* Read a chunk of file */
    1cee:	4785                	li	a5,1
    1cf0:	b3b9                	j	1a3e <main+0x426>
			fs->dsect = sect + cs;
    1cf2:	942a                	add	s0,s0,a0
    1cf4:	d780                	sw	s0,40(a5)
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    1cf6:	4f90                	lw	a2,24(a5)
    1cf8:	20000413          	li	s0,512
    1cfc:	1ff67613          	andi	a2,a2,511
    1d00:	8c11                	sub	s0,s0,a2
    1d02:	00877363          	bgeu	a4,s0,1d08 <main+0x6f0>
    1d06:	843a                	mv	s0,a4
		dr = disk_readp(rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    1d08:	578c                	lw	a1,40(a5)
    1d0a:	4562                	lw	a0,24(sp)
    1d0c:	86a2                	mv	a3,s0
    1d0e:	d03a                	sw	a4,32(sp)
    1d10:	ce3e                	sw	a5,28(sp)
    1d12:	ff2fe0ef          	jal	ra,504 <disk_readp>
		if (dr) ABORT(FR_DISK_ERR);
    1d16:	47f2                	lw	a5,28(sp)
    1d18:	5702                	lw	a4,32(sp)
    1d1a:	f961                	bnez	a0,1cea <main+0x6d2>
		fs->fptr += rcnt;							/* Advances file read pointer */
    1d1c:	4f94                	lw	a3,24(a5)
		btr -= rcnt; *br += rcnt;					/* Update read counter */
    1d1e:	4632                	lw	a2,12(sp)
    1d20:	8f01                	sub	a4,a4,s0
		fs->fptr += rcnt;							/* Advances file read pointer */
    1d22:	96a2                	add	a3,a3,s0
    1d24:	cf94                	sw	a3,24(a5)
		btr -= rcnt; *br += rcnt;					/* Update read counter */
    1d26:	46b2                	lw	a3,12(sp)
    1d28:	4294                	lw	a3,0(a3)
    1d2a:	96a2                	add	a3,a3,s0
    1d2c:	c214                	sw	a3,0(a2)
		if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
    1d2e:	46e2                	lw	a3,24(sp)
    1d30:	96a2                	add	a3,a3,s0
    1d32:	b54d                	j	1bd4 <main+0x5bc>
        if (read == 0) {
    1d34:	ea89                	bnez	a3,1d46 <main+0x72e>
    model->debounce_time = millis();
    1d36:	4702                	lw	a4,0(sp)
    model->release_time = millis();
    1d38:	4682                	lw	a3,0(sp)
            model->press_time = now;
    1d3a:	843e                	mv	s0,a5
    model->debounce_time = millis();
    1d3c:	4318                	lw	a4,0(a4)
    model->release_time = millis();
    1d3e:	4294                	lw	a3,0(a3)
    model->debounce_time = millis();
    1d40:	87ba                	mv	a5,a4
    model->release_time = millis();
    1d42:	c236                	sw	a3,4(sp)
    model->btn_state = newState;
    1d44:	4701                	li	a4,0
    1d46:	c83e                	sw	a5,16(sp)
    1d48:	b789                	j	1c8a <main+0x672>
            _reset_timers(BTN_UP, model);        // First Release

        } else {
            // Long press detection
            uint32_t press_duration = now - model->press_time;
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1d4a:	6685                	lui	a3,0x1
            uint32_t press_duration = now - model->press_time;
    1d4c:	40878633          	sub	a2,a5,s0
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1d50:	fa068693          	addi	a3,a3,-96 # fa0 <mini_vpprintf+0x138>
    1d54:	fec6f9e3          	bgeu	a3,a2,1d46 <main+0x72e>
			printf("Long Press\n"); break;
    1d58:	6509                	lui	a0,0x2
    1d5a:	4b850513          	addi	a0,a0,1208 # 24b8 <I2C1_ER_IRQHandler+0x2b6>
    1d5e:	c63a                	sw	a4,12(sp)
    1d60:	c43e                	sw	a5,8(sp)
    1d62:	f6eff0ef          	jal	ra,14d0 <puts>
    1d66:	47a2                	lw	a5,8(sp)
    1d68:	4732                	lw	a4,12(sp)
    1d6a:	bff1                	j	1d46 <main+0x72e>
            }
        }
        break;

    case BTN_UP: {
        uint32_t release_duration = now - model->release_time;
    1d6c:	4712                	lw	a4,4(sp)
    1d6e:	40e78633          	sub	a2,a5,a4

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    1d72:	ee81                	bnez	a3,1d8a <main+0x772>
    1d74:	09f00713          	li	a4,159
    1d78:	00c76963          	bltu	a4,a2,1d8a <main+0x772>
    model->debounce_time = millis();
    1d7c:	4782                	lw	a5,0(sp)
    model->release_time = millis();
    1d7e:	4702                	lw	a4,0(sp)
    model->debounce_time = millis();
    1d80:	439c                	lw	a5,0(a5)
    model->release_time = millis();
    1d82:	4318                	lw	a4,0(a4)
    1d84:	c23a                	sw	a4,4(sp)
    model->btn_state = newState;
    1d86:	4709                	li	a4,2
    1d88:	bf7d                	j	1d46 <main+0x72e>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    1d8a:	0a000693          	li	a3,160
    1d8e:	4705                	li	a4,1
    1d90:	fac6fbe3          	bgeu	a3,a2,1d46 <main+0x72e>
			printf("Single Click\n");
    1d94:	6509                	lui	a0,0x2
    1d96:	4c450513          	addi	a0,a0,1220 # 24c4 <I2C1_ER_IRQHandler+0x2c2>
			printf("Double Click\n");
    1d9a:	f36ff0ef          	jal	ra,14d0 <puts>
    model->debounce_time = millis();
    1d9e:	4782                	lw	a5,0(sp)
    model->release_time = millis();
    1da0:	4702                	lw	a4,0(sp)
    model->debounce_time = millis();
    1da2:	439c                	lw	a5,0(a5)
    model->release_time = millis();
    1da4:	4318                	lw	a4,0(a4)
    1da6:	c23a                	sw	a4,4(sp)
    model->btn_state = newState;
    1da8:	470d                	li	a4,3
    1daa:	bf71                	j	1d46 <main+0x72e>
        break;
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
    1dac:	dec9                	beqz	a3,1d46 <main+0x72e>
    1dae:	4d448513          	addi	a0,s1,1236 # 24d4 <I2C1_ER_IRQHandler+0x2d2>
    1db2:	b7e5                	j	1d9a <main+0x782>
    if (now - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1db4:	47c2                	lw	a5,16(sp)
    1db6:	bf41                	j	1d46 <main+0x72e>

00001db8 <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    1db8:	fdc10113          	addi	sp,sp,-36
    1dbc:	ce22                	sw	s0,28(sp)
    1dbe:	d006                	sw	ra,32(sp)
    1dc0:	cc26                	sw	s1,24(sp)
    1dc2:	842a                	mv	s0,a0
	if( tween <= 0 ) return hexa;
    1dc4:	0ac05f63          	blez	a2,1e82 <TweenHexColors+0xca>
	if( tween >= 255 ) return hexb;
    1dc8:	0fe00793          	li	a5,254
    1dcc:	84ae                	mv	s1,a1
    1dce:	0cc7c163          	blt	a5,a2,1e90 <TweenHexColors+0xd8>
	int32_t aamt = 255-tween;
    1dd2:	0ff00293          	li	t0,255
    1dd6:	40c282b3          	sub	t0,t0,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1dda:	8596                	mv	a1,t0
    1ddc:	0ff57513          	andi	a0,a0,255
    1de0:	c216                	sw	t0,4(sp)
	int32_t aamt = 255-tween;
    1de2:	c032                	sw	a2,0(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1de4:	1fffe097          	auipc	ra,0x1fffe
    1de8:	25c080e7          	jalr	604(ra) # 20000040 <FastMultiply>
    1dec:	4602                	lw	a2,0(sp)
    1dee:	ca2a                	sw	a0,20(sp)
    1df0:	0ff4f513          	andi	a0,s1,255
    1df4:	85b2                	mv	a1,a2
    1df6:	1fffe097          	auipc	ra,0x1fffe
    1dfa:	24a080e7          	jalr	586(ra) # 20000040 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1dfe:	4292                	lw	t0,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e00:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    1e02:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e06:	8596                	mv	a1,t0
    1e08:	0ff57513          	andi	a0,a0,255
    1e0c:	c616                	sw	t0,12(sp)
    1e0e:	1fffe097          	auipc	ra,0x1fffe
    1e12:	232080e7          	jalr	562(ra) # 20000040 <FastMultiply>
    1e16:	4602                	lw	a2,0(sp)
    1e18:	c42a                	sw	a0,8(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    1e1a:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e1e:	85b2                	mv	a1,a2
    1e20:	0ff57513          	andi	a0,a0,255
    1e24:	c232                	sw	a2,4(sp)
    1e26:	1fffe097          	auipc	ra,0x1fffe
    1e2a:	21a080e7          	jalr	538(ra) # 20000040 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e2e:	42b2                	lw	t0,12(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e30:	c02a                	sw	a0,0(sp)
	int32_t hag = (hexa>>16) & 0xff;
    1e32:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e36:	8596                	mv	a1,t0
    1e38:	0ff57513          	andi	a0,a0,255
    1e3c:	1fffe097          	auipc	ra,0x1fffe
    1e40:	204080e7          	jalr	516(ra) # 20000040 <FastMultiply>
    1e44:	4612                	lw	a2,4(sp)
    1e46:	842a                	mv	s0,a0
	int32_t hbg = (hexb>>16) & 0xff;
    1e48:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e4c:	85b2                	mv	a1,a2
    1e4e:	0ff57513          	andi	a0,a0,255
    1e52:	1fffe097          	auipc	ra,0x1fffe
    1e56:	1ee080e7          	jalr	494(ra) # 20000040 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e5a:	4342                	lw	t1,16(sp)
    1e5c:	47d2                	lw	a5,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e5e:	4682                	lw	a3,0(sp)
    1e60:	4722                	lw	a4,8(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e62:	979a                	add	a5,a5,t1
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e64:	942a                	add	s0,s0,a0
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e66:	9736                	add	a4,a4,a3
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e68:	08078793          	addi	a5,a5,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    1e6c:	08070713          	addi	a4,a4,128 # 2080 <I2C1_EV_IRQHandler+0x1e>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e70:	08040413          	addi	s0,s0,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    1e74:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    1e76:	f0077713          	andi	a4,a4,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    1e7a:	8021                	srli	s0,s0,0x8
	return b | (r<<8) | (g<<16);
    1e7c:	8fd9                	or	a5,a5,a4
    1e7e:	0442                	slli	s0,s0,0x10
    1e80:	8c5d                	or	s0,s0,a5
}
    1e82:	5082                	lw	ra,32(sp)
    1e84:	8522                	mv	a0,s0
    1e86:	4472                	lw	s0,28(sp)
    1e88:	44e2                	lw	s1,24(sp)
    1e8a:	02410113          	addi	sp,sp,36
    1e8e:	8082                	ret
	if( tween >= 255 ) return hexb;
    1e90:	842e                	mv	s0,a1
    1e92:	bfc5                	j	1e82 <TweenHexColors+0xca>

00001e94 <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1e94:	1111                	addi	sp,sp,-28
    1e96:	c826                	sw	s1,16(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    1e98:	c981a483          	lw	s1,-872(gp) # 20000094 <WS2812LEDs>
	int place = WS2812LEDPlace;
    1e9c:	c9418713          	addi	a4,gp,-876 # 20000090 <WS2812LEDPlace>
    1ea0:	4318                	lw	a4,0(a4)
    1ea2:	c9418613          	addi	a2,gp,-876 # 20000090 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    1ea6:	ca22                	sw	s0,20(sp)
    1ea8:	cc06                	sw	ra,24(sp)
    1eaa:	87aa                	mv	a5,a0
    1eac:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
    1eae:	03050693          	addi	a3,a0,48
    1eb2:	c032                	sw	a2,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    1eb4:	04074a63          	bltz	a4,1f08 <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    1eb8:	04f68a63          	beq	a3,a5,1f0c <WS2812FillBuffSec.constprop.0+0x78>
	{
		if( place >= ledcount )
    1ebc:	04974f63          	blt	a4,s1,1f1a <WS2812FillBuffSec.constprop.0+0x86>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    1ec0:	40f68633          	sub	a2,a3,a5
    1ec4:	4581                	li	a1,0
    1ec6:	853e                	mv	a0,a5
    1ec8:	c23a                	sw	a4,4(sp)
    1eca:	d24ff0ef          	jal	ra,13ee <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    1ece:	4712                	lw	a4,4(sp)
    1ed0:	cc15                	beqz	s0,1f0c <WS2812FillBuffSec.constprop.0+0x78>
			{
				if( place == ledcount )
    1ed2:	00e49a63          	bne	s1,a4,1ee6 <WS2812FillBuffSec.constprop.0+0x52>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    1ed6:	400206b7          	lui	a3,0x40020
    1eda:	5a9c                	lw	a5,48(a3)
    1edc:	fdf7f793          	andi	a5,a5,-33
    1ee0:	da9c                	sw	a5,48(a3)
					WS2812BLEDInUse = 0;
    1ee2:	c801a823          	sw	zero,-880(gp) # 2000008c <WS2812BLEDInUse>
				}
				place++;
    1ee6:	0705                	addi	a4,a4,1
    1ee8:	a015                	j	1f0c <WS2812FillBuffSec.constprop.0+0x78>
		(*ptr++) = 0;
    1eea:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
    1eee:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    1ef2:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    1ef6:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    1efa:	00079423          	sh	zero,8(a5)
		place++;
    1efe:	0705                	addi	a4,a4,1
    1f00:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
    1f02:	fe079f23          	sh	zero,-2(a5)
    1f06:	b77d                	j	1eb4 <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
    1f08:	fef691e3          	bne	a3,a5,1eea <WS2812FillBuffSec.constprop.0+0x56>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
    1f0c:	4782                	lw	a5,0(sp)
}
    1f0e:	40e2                	lw	ra,24(sp)
    1f10:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
    1f12:	c398                	sw	a4,0(a5)
}
    1f14:	44c2                	lw	s1,16(sp)
    1f16:	0171                	addi	sp,sp,28
    1f18:	8082                	ret
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    1f1a:	c4018613          	addi	a2,gp,-960 # 2000003c <tween>
    1f1e:	4210                	lw	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1f20:	00170293          	addi	t0,a4,1
    1f24:	9732                	add	a4,a4,a2
    1f26:	0ff00613          	li	a2,255
    1f2a:	00e04363          	bgtz	a4,1f30 <WS2812FillBuffSec.constprop.0+0x9c>
    1f2e:	4601                	li	a2,0
    1f30:	007f45b7          	lui	a1,0x7f4
    1f34:	650d                	lui	a0,0x3
    1f36:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.d894f163+0x7ea783>
    1f3a:	0ff50513          	addi	a0,a0,255 # 30ff <_data_lma+0x983>
    1f3e:	c616                	sw	t0,12(sp)
    1f40:	c43e                	sw	a5,8(sp)
    1f42:	c236                	sw	a3,4(sp)
    1f44:	3d95                	jal	1db8 <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1f46:	00b55613          	srli	a2,a0,0xb
    1f4a:	6709                	lui	a4,0x2
    1f4c:	6c070713          	addi	a4,a4,1728 # 26c0 <bitquartets.9>
    1f50:	8a79                	andi	a2,a2,30
    1f52:	963a                	add	a2,a2,a4
    1f54:	47a2                	lw	a5,8(sp)
    1f56:	00065603          	lhu	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1f5a:	42b2                	lw	t0,12(sp)
    1f5c:	4692                	lw	a3,4(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    1f5e:	00c79023          	sh	a2,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1f62:	00755613          	srli	a2,a0,0x7
    1f66:	8a79                	andi	a2,a2,30
    1f68:	963a                	add	a2,a2,a4
    1f6a:	00065603          	lhu	a2,0(a2)
		ptr += 6;
    1f6e:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    1f70:	fec79b23          	sh	a2,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    1f74:	00355613          	srli	a2,a0,0x3
    1f78:	8a79                	andi	a2,a2,30
    1f7a:	963a                	add	a2,a2,a4
    1f7c:	00065603          	lhu	a2,0(a2)
    1f80:	fec79c23          	sh	a2,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    1f84:	00f57613          	andi	a2,a0,15
    1f88:	0606                	slli	a2,a2,0x1
    1f8a:	963a                	add	a2,a2,a4
    1f8c:	00065603          	lhu	a2,0(a2)
    1f90:	fec79d23          	sh	a2,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f94:	01355613          	srli	a2,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1f98:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f9a:	8a79                	andi	a2,a2,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1f9c:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1f9e:	963a                	add	a2,a2,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1fa0:	953a                	add	a0,a0,a4
    1fa2:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1fa6:	00065603          	lhu	a2,0(a2)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    1faa:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    1fae:	fec79e23          	sh	a2,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    1fb2:	8716                	mv	a4,t0
    1fb4:	b711                	j	1eb8 <WS2812FillBuffSec.constprop.0+0x24>

00001fb6 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    1fb6:	fcc10113          	addi	sp,sp,-52
    1fba:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    1fbc:	400207b7          	lui	a5,0x40020
    1fc0:	439c                	lw	a5,0(a5)
{
    1fc2:	d022                	sw	s0,32(sp)
    1fc4:	ce26                	sw	s1,28(sp)
    1fc6:	d806                	sw	ra,48(sp)
    1fc8:	d616                	sw	t0,44(sp)
    1fca:	d41a                	sw	t1,40(sp)
    1fcc:	d21e                	sw	t2,36(sp)
    1fce:	cc2a                	sw	a0,24(sp)
    1fd0:	ca2e                	sw	a1,20(sp)
    1fd2:	c832                	sw	a2,16(sp)
    1fd4:	c636                	sw	a3,12(sp)
    1fd6:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    1fd8:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    1fda:	40020437          	lui	s0,0x40020
    1fde:	10000493          	li	s1,256
    1fe2:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    1fe4:	4782                	lw	a5,0(sp)
    1fe6:	4007f793          	andi	a5,a5,1024
    1fea:	c789                	beqz	a5,1ff4 <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    1fec:	4585                	li	a1,1
    1fee:	cb418513          	addi	a0,gp,-844 # 200000b0 <WS2812dmabuff>
    1ff2:	354d                	jal	1e94 <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    1ff4:	4782                	lw	a5,0(sp)
    1ff6:	2007f793          	andi	a5,a5,512
    1ffa:	c789                	beqz	a5,2004 <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    1ffc:	4581                	li	a1,0
    1ffe:	ce418513          	addi	a0,gp,-796 # 200000e0 <WS2812dmabuff+0x30>
    2002:	3d49                	jal	1e94 <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    2004:	401c                	lw	a5,0(s0)
    2006:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    2008:	4782                	lw	a5,0(sp)
    200a:	1007f793          	andi	a5,a5,256
    200e:	fbf1                	bnez	a5,1fe2 <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    2010:	5402                	lw	s0,32(sp)
    2012:	50c2                	lw	ra,48(sp)
    2014:	52b2                	lw	t0,44(sp)
    2016:	5322                	lw	t1,40(sp)
    2018:	5392                	lw	t2,36(sp)
    201a:	44f2                	lw	s1,28(sp)
    201c:	4562                	lw	a0,24(sp)
    201e:	45d2                	lw	a1,20(sp)
    2020:	4642                	lw	a2,16(sp)
    2022:	46b2                	lw	a3,12(sp)
    2024:	4722                	lw	a4,8(sp)
    2026:	4792                	lw	a5,4(sp)
    2028:	03410113          	addi	sp,sp,52
    202c:	30200073          	mret

00002030 <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
    2030:	1151                	addi	sp,sp,-12
    2032:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    2034:	e000f7b7          	lui	a5,0xe000f
{
    2038:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    203a:	4b98                	lw	a4,16(a5)
{
    203c:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    203e:	66b1                	lui	a3,0xc
    2040:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x22c3>
    2044:	9736                	add	a4,a4,a3
    2046:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
    2048:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
    204c:	cac18793          	addi	a5,gp,-852 # 200000a8 <systick_millis>
    2050:	4398                	lw	a4,0(a5)
}
    2052:	46a2                	lw	a3,8(sp)
	systick_millis++;
    2054:	0705                	addi	a4,a4,1
    2056:	c398                	sw	a4,0(a5)
}
    2058:	4712                	lw	a4,4(sp)
    205a:	4782                	lw	a5,0(sp)
    205c:	0131                	addi	sp,sp,12
    205e:	30200073          	mret

00002062 <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    2062:	7179                	addi	sp,sp,-48
    2064:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    2066:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    206a:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    206c:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    2070:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    2074:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    2078:	cc26                	sw	s1,24(sp)
    207a:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    207c:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    2080:	d416                	sw	t0,40(sp)
    2082:	d21a                	sw	t1,36(sp)
    2084:	d01e                	sw	t2,32(sp)
    2086:	ce22                	sw	s0,28(sp)
    2088:	ca2a                	sw	a0,20(sp)
    208a:	c82e                	sw	a1,16(sp)
    208c:	c632                	sw	a2,12(sp)
    208e:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    2090:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    2092:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    2094:	c305                	beqz	a4,20b4 <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    2096:	14018713          	addi	a4,gp,320 # 2000053c <i2c_slave_state>
    209a:	4685                	li	a3,1
    209c:	07c2                	slli	a5,a5,0x10
    209e:	83c1                	srli	a5,a5,0x10
    20a0:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    20a4:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    20a8:	839d                	srli	a5,a5,0x7
    20aa:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    20ac:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    20b0:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    20b4:	0404f793          	andi	a5,s1,64
    20b8:	c795                	beqz	a5,20e4 <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    20ba:	14018793          	addi	a5,gp,320 # 2000053c <i2c_slave_state>
    20be:	0007c703          	lbu	a4,0(a5)
    20c2:	c379                	beqz	a4,2188 <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
    20c4:	40005737          	lui	a4,0x40005
    20c8:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    20cc:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    20d0:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    20d4:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    20d8:	0ff77713          	andi	a4,a4,255
    20dc:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    20e0:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    20e4:	0804f793          	andi	a5,s1,128
    20e8:	c7a1                	beqz	a5,2130 <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    20ea:	14018793          	addi	a5,gp,320 # 2000053c <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    20ee:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    20f2:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    20f6:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    20fa:	400057b7          	lui	a5,0x40005
    20fe:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    2102:	14018413          	addi	s0,gp,320 # 2000053c <i2c_slave_state>
    2106:	cb79                	beqz	a4,21dc <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    2108:	01044703          	lbu	a4,16(s0) # 40020010 <_eusrstack+0x2001f810>
    210c:	0ee57663          	bgeu	a0,a4,21f8 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    2110:	4458                	lw	a4,12(s0)
    2112:	972a                	add	a4,a4,a0
    2114:	00074703          	lbu	a4,0(a4)
    2118:	0ff77713          	andi	a4,a4,255
    211c:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    2120:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    2122:	c391                	beqz	a5,2126 <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    2124:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    2126:	00244783          	lbu	a5,2(s0)
    212a:	0785                	addi	a5,a5,1
    212c:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    2130:	88c1                	andi	s1,s1,16
    2132:	cc85                	beqz	s1,216a <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    2134:	40005737          	lui	a4,0x40005
    2138:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    213c:	07c2                	slli	a5,a5,0x10
    213e:	83c1                	srli	a5,a5,0x10
    2140:	dff7f793          	andi	a5,a5,-513
    2144:	07c2                	slli	a5,a5,0x10
    2146:	83c1                	srli	a5,a5,0x10
    2148:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
    214c:	14018793          	addi	a5,gp,320 # 2000053c <i2c_slave_state>
    2150:	02a7c703          	lbu	a4,42(a5)
    2154:	c74d                	beqz	a4,21fe <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
    2156:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    2158:	cb09                	beqz	a4,216a <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    215a:	0017c503          	lbu	a0,1(a5)
    215e:	0027c583          	lbu	a1,2(a5)
    2162:	8d89                	sub	a1,a1,a0
    2164:	0ff5f593          	andi	a1,a1,255
    2168:	9702                	jalr	a4
            }
        }
    }
}
    216a:	4472                	lw	s0,28(sp)
    216c:	50b2                	lw	ra,44(sp)
    216e:	52a2                	lw	t0,40(sp)
    2170:	5312                	lw	t1,36(sp)
    2172:	5382                	lw	t2,32(sp)
    2174:	44e2                	lw	s1,24(sp)
    2176:	4552                	lw	a0,20(sp)
    2178:	45c2                	lw	a1,16(sp)
    217a:	4632                	lw	a2,12(sp)
    217c:	46a2                	lw	a3,8(sp)
    217e:	4712                	lw	a4,4(sp)
    2180:	4782                	lw	a5,0(sp)
    2182:	6145                	addi	sp,sp,48
    2184:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    2188:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    218c:	4705                	li	a4,1
    218e:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    2192:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    2196:	c695                	beqz	a3,21c2 <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    2198:	0107c683          	lbu	a3,16(a5)
    219c:	f4d774e3          	bgeu	a4,a3,20e4 <I2C1_EV_IRQHandler+0x82>
    21a0:	0287c683          	lbu	a3,40(a5)
    21a4:	f2a1                	bnez	a3,20e4 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    21a6:	400056b7          	lui	a3,0x40005
    21aa:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    21ae:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    21b0:	96ba                	add	a3,a3,a4
    21b2:	0ff67613          	andi	a2,a2,255
    21b6:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    21ba:	0705                	addi	a4,a4,1
    21bc:	00e78123          	sb	a4,2(a5)
    21c0:	b715                	j	20e4 <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    21c2:	0087c683          	lbu	a3,8(a5)
    21c6:	f0d77fe3          	bgeu	a4,a3,20e4 <I2C1_EV_IRQHandler+0x82>
    21ca:	01c7c683          	lbu	a3,28(a5)
    21ce:	fa99                	bnez	a3,20e4 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    21d0:	400056b7          	lui	a3,0x40005
    21d4:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    21d8:	43d4                	lw	a3,4(a5)
    21da:	bfd9                	j	21b0 <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    21dc:	00844703          	lbu	a4,8(s0)
    21e0:	00e57c63          	bgeu	a0,a4,21f8 <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    21e4:	4058                	lw	a4,4(s0)
    21e6:	972a                	add	a4,a4,a0
    21e8:	00074703          	lbu	a4,0(a4)
    21ec:	0ff77713          	andi	a4,a4,255
    21f0:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    21f4:	4c1c                	lw	a5,24(s0)
    21f6:	b735                	j	2122 <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    21f8:	00079823          	sh	zero,16(a5)
    21fc:	bf15                	j	2130 <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    21fe:	4bd8                	lw	a4,20(a5)
    2200:	bfa1                	j	2158 <I2C1_EV_IRQHandler+0xf6>

00002202 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    2202:	1151                	addi	sp,sp,-12
    2204:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
    2206:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
    220a:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    220c:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    2210:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    2212:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    2216:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
    221a:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    221c:	cf89                	beqz	a5,2236 <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    221e:	41475783          	lhu	a5,1044(a4)
    2222:	40070713          	addi	a4,a4,1024
    2226:	07c2                	slli	a5,a5,0x10
    2228:	83c1                	srli	a5,a5,0x10
    222a:	eff7f793          	andi	a5,a5,-257
    222e:	07c2                	slli	a5,a5,0x10
    2230:	83c1                	srli	a5,a5,0x10
    2232:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    2236:	2006f793          	andi	a5,a3,512
    223a:	cf89                	beqz	a5,2254 <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    223c:	40005737          	lui	a4,0x40005
    2240:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    2244:	07c2                	slli	a5,a5,0x10
    2246:	83c1                	srli	a5,a5,0x10
    2248:	dff7f793          	andi	a5,a5,-513
    224c:	07c2                	slli	a5,a5,0x10
    224e:	83c1                	srli	a5,a5,0x10
    2250:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    2254:	4006f693          	andi	a3,a3,1024
    2258:	ce89                	beqz	a3,2272 <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    225a:	40005737          	lui	a4,0x40005
    225e:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    2262:	07c2                	slli	a5,a5,0x10
    2264:	83c1                	srli	a5,a5,0x10
    2266:	bff7f793          	andi	a5,a5,-1025
    226a:	07c2                	slli	a5,a5,0x10
    226c:	83c1                	srli	a5,a5,0x10
    226e:	40f71a23          	sh	a5,1044(a4)
    }
}
    2272:	46a2                	lw	a3,8(sp)
    2274:	4712                	lw	a4,4(sp)
    2276:	4782                	lw	a5,0(sp)
    2278:	0131                	addi	sp,sp,12
    227a:	30200073          	mret
    227e:	0000                	unimp
    2280:	6574                	flw	fa3,76(a0)
    2282:	69667473          	csrrci	s0,0x696,12
    2286:	656c                	flw	fa1,76(a0)
    2288:	742e                	flw	fs0,232(sp)
    228a:	7478                	flw	fa4,108(s0)
    228c:	0000                	unimp
    228e:	0000                	unimp
    2290:	63656863          	bltu	a0,s6,28c0 <_data_lma+0x144>
    2294:	73665f6b          	0x73665f6b
    2298:	655f 7272 203a      	0x203a7272655f
    229e:	6964                	flw	fs1,84(a0)
    22a0:	65206b73          	csrrsi	s6,0x652,0
    22a4:	7272                	flw	ft4,60(sp)
    22a6:	0d0a                	slli	s10,s10,0x2
    22a8:	0000                	unimp
    22aa:	0000                	unimp
    22ac:	63656863          	bltu	a0,s6,28dc <_data_lma+0x160>
    22b0:	73665f6b          	0x73665f6b
    22b4:	7320                	flw	fs0,96(a4)
    22b6:	6769                	lui	a4,0x1a
    22b8:	616e                	flw	ft2,216(sp)
    22ba:	7574                	flw	fa3,108(a0)
    22bc:	6572                	flw	fa0,28(sp)
    22be:	203a                	fld	ft0,392(sp)
    22c0:	3025                	jal	1ae8 <main+0x4d0>
    22c2:	6c34                	flw	fa3,88(s0)
    22c4:	0a58                	addi	a4,sp,276
    22c6:	000d                	c.nop	3
    22c8:	63656863          	bltu	a0,s6,28f8 <_data_lma+0x17c>
    22cc:	73665f6b          	0x73665f6b
    22d0:	655f 7272 203a      	0x203a7272655f
    22d6:	6162                	flw	ft2,24(sp)
    22d8:	2064                	fld	fs1,192(s0)
    22da:	6e676973          	csrrsi	s2,0x6e6,14
    22de:	7461                	lui	s0,0xffff8
    22e0:	7275                	lui	tp,0xffffd
    22e2:	0a65                	addi	s4,s4,25
    22e4:	000d                	c.nop	3
    22e6:	0000                	unimp
    22e8:	63656863          	bltu	a0,s6,2918 <_data_lma+0x19c>
    22ec:	73665f6b          	0x73665f6b
    22f0:	203a                	fld	ft0,392(sp)
    22f2:	63656863          	bltu	a0,s6,2922 <_data_lma+0x1a6>
    22f6:	4146206b          	0x4146206b
    22fa:	3354                	fld	fa3,160(a4)
    22fc:	0a32                	slli	s4,s4,0xc
    22fe:	000d                	c.nop	3
    2300:	63656863          	bltu	a0,s6,2930 <_data_lma+0x1b4>
    2304:	73665f6b          	0x73665f6b
    2308:	203a                	fld	ft0,392(sp)
    230a:	0d0a4b4f          	0xd0a4b4f
    230e:	0000                	unimp
    2310:	4d49                	li	s10,18
    2312:	5720                	lw	s0,104(a4)
    2314:	4952                	lw	s2,20(sp)
    2316:	4554                	lw	a3,12(a0)
    2318:	4e45                	li	t3,17
    231a:	5420                	lw	s0,104(s0)
    231c:	000d0a4f          	fnmadd.s	fs4,fs10,ft0,ft0,rne
    2320:	4d49                	li	s10,18
    2322:	5220                	lw	s0,96(a2)
    2324:	4145                	li	sp,17
    2326:	4544                	lw	s1,12(a0)
    2328:	204e                	fld	ft0,208(sp)
    232a:	5246                	lw	tp,112(sp)
    232c:	0a2e4d4f          	fnmadd.d	fs10,ft8,ft2,ft1,rmm
    2330:	000d                	c.nop	3
    2332:	0000                	unimp
    2334:	63656863          	bltu	a0,s6,2964 <_data_lma+0x1e8>
    2338:	6d66206b          	0x6d66206b
    233c:	2074                	fld	fa3,192(s0)
    233e:	6425                	lui	s0,0x9
    2340:	0d0a                	slli	s10,s10,0x2
    2342:	0000                	unimp
    2344:	4d49                	li	s10,18
    2346:	4820                	lw	s0,80(s0)
    2348:	5245                	li	tp,-15
    234a:	2045                	jal	23ea <I2C1_ER_IRQHandler+0x1e8>
    234c:	3131                	jal	1f58 <WS2812FillBuffSec.constprop.0+0xc4>
    234e:	0a31                	addi	s4,s4,12
    2350:	000d                	c.nop	3
    2352:	0000                	unimp
    2354:	000a                	c.slli	zero,0x2
    2356:	0000                	unimp
    2358:	3249                	jal	1cda <main+0x6c2>
    235a:	30203a43          	fmadd.s	fs4,ft0,ft2,ft6,rup
    235e:	2578                	fld	fa4,200(a0)
    2360:	3230                	fld	fa2,96(a2)
    2362:	0058                	addi	a4,sp,4
    2364:	6146                	flw	ft2,80(sp)
    2366:	6c69                	lui	s8,0x1a
    2368:	6465                	lui	s0,0x19
    236a:	7420                	flw	fs0,104(s0)
    236c:	6e69206f          	j	94a52 <lib_i2c.c.d894f163+0x8b195>
    2370:	7469                	lui	s0,0xffffa
    2372:	4920                	lw	s0,80(a0)
    2374:	4332                	lw	t1,12(sp)
    2376:	0000                	unimp
    2378:	6548                	flw	fa0,12(a0)
    237a:	6c6c                	flw	fa1,92(s0)
    237c:	6542206f          	j	249d0 <lib_i2c.c.d894f163+0x1b113>
    2380:	2165                	jal	2828 <_data_lma+0xac>
    2382:	0000                	unimp
    2384:	2d2d                	jal	29be <_data_lma+0x242>
    2386:	2d2d                	jal	29c0 <_data_lma+0x244>
    2388:	6e616353          	0x6e616353
    238c:	696e                	flw	fs2,216(sp)
    238e:	676e                	flw	fa4,216(sp)
    2390:	4920                	lw	s0,80(a0)
    2392:	4332                	lw	t1,12(sp)
    2394:	4220                	lw	s0,64(a2)
    2396:	7375                	lui	t1,0xffffd
    2398:	6620                	flw	fs0,72(a2)
    239a:	4420726f          	jal	tp,97dc <nrf24l01_low_level.c.429e1874+0x39b>
    239e:	7665                	lui	a2,0xffff9
    23a0:	6369                	lui	t1,0x1a
    23a2:	7365                	lui	t1,0xffff9
    23a4:	2d2d                	jal	29de <_data_lma+0x262>
    23a6:	002d                	c.nop	11
    23a8:	2d2d                	jal	29e2 <_data_lma+0x266>
    23aa:	2d2d                	jal	29e4 <_data_lma+0x268>
    23ac:	6f44                	flw	fs1,28(a4)
    23ae:	656e                	flw	fa0,216(sp)
    23b0:	5320                	lw	s0,96(a4)
    23b2:	6e6e6163          	bltu	t3,t1,2a94 <_data_lma+0x318>
    23b6:	6e69                	lui	t3,0x1a
    23b8:	2d2d2d67          	0x2d2d2d67
    23bc:	0a2d                	addi	s4,s4,11
    23be:	0000                	unimp
    23c0:	6e756f63          	bltu	a0,t2,2abe <_data_lma+0x342>
    23c4:	6574                	flw	fa3,76(a0)
    23c6:	2072                	fld	ft0,280(sp)
    23c8:	6c25                	lui	s8,0x9
    23ca:	0075                	c.nop	29
    23cc:	3249                	jal	1d4e <main+0x736>
    23ce:	6c532043          	0x6c532043
    23d2:	7661                	lui	a2,0xffff8
    23d4:	2065                	jal	247c <I2C1_ER_IRQHandler+0x27a>
    23d6:	6f6d                	lui	t5,0x1b
    23d8:	6564                	flw	fs1,76(a0)
    23da:	0000                	unimp
    23dc:	4d0a                	lw	s10,128(sp)
    23de:	746e756f          	jal	a0,e9b24 <lib_i2c.c.d894f163+0xe0267>
    23e2:	6e69                	lui	t3,0x1a
    23e4:	6f762067          	0x6f762067
    23e8:	756c                	flw	fa1,108(a0)
    23ea:	656d                	lui	a0,0x1b
    23ec:	0a2e                	slli	s4,s4,0xb
    23ee:	000d                	c.nop	3
    23f0:	6372                	flw	ft6,28(sp)
    23f2:	253d                	jal	2a20 <_data_lma+0x2a4>
    23f4:	0a75                	addi	s4,s4,29
    23f6:	000d                	c.nop	3
    23f8:	6e65704f          	fnmadd.q	ft0,fa0,ft6,fa3
    23fc:	6e69                	lui	t3,0x1a
    23fe:	69662067          	0x69662067
    2402:	656c                	flw	fa1,76(a0)
    2404:	2220                	fld	fs0,64(a2)
    2406:	7325                	lui	t1,0xfffe9
    2408:	0a22                	slli	s4,s4,0x8
    240a:	000d                	c.nop	3
    240c:	6568                	flw	fa0,76(a0)
    240e:	6c6c                	flw	fa1,92(s0)
    2410:	6f77206f          	j	75306 <lib_i2c.c.d894f163+0x6ba49>
    2414:	6c72                	flw	fs8,28(sp)
    2416:	2064                	fld	fs1,192(s0)
    2418:	3636                	fld	fa2,360(sp)
    241a:	3636                	fld	fa2,360(sp)
    241c:	2136                	fld	ft2,328(sp)
    241e:	0d0a                	slli	s10,s10,0x2
    2420:	0000                	unimp
    2422:	0000                	unimp
    2424:	74697277          	0x74697277
    2428:	2065                	jal	24d0 <I2C1_ER_IRQHandler+0x2ce>
    242a:	7265                	lui	tp,0xffff9
    242c:	6f72                	flw	ft10,28(sp)
    242e:	3a72                	fld	fs4,312(sp)
    2430:	2520                	fld	fs0,72(a0)
    2432:	0a75                	addi	s4,s4,29
    2434:	000d                	c.nop	3
    2436:	0000                	unimp
    2438:	74697277          	0x74697277
    243c:	2065                	jal	24e4 <FONT_7x5>
    243e:	6966                	flw	fs2,88(sp)
    2440:	696e                	flw	fs2,216(sp)
    2442:	65206873          	csrrsi	a6,0x652,0
    2446:	7272                	flw	ft4,60(sp)
    2448:	203a726f          	jal	tp,a9e4a <lib_i2c.c.d894f163+0xa058d>
    244c:	7525                	lui	a0,0xfffe9
    244e:	0d0a                	slli	s10,s10,0x2
    2450:	0000                	unimp
    2452:	0000                	unimp
    2454:	6552                	flw	fa0,20(sp)
    2456:	6461                	lui	s0,0x18
    2458:	2520                	fld	fs0,72(a0)
    245a:	2075                	jal	2506 <FONT_7x5+0x22>
    245c:	7962                	flw	fs2,56(sp)
    245e:	6574                	flw	fa3,76(a0)
    2460:	000d0a73          	0xd0a73
    2464:	69727473          	csrrci	s0,0x697,4
    2468:	676e                	flw	fa4,216(sp)
    246a:	203a                	fld	ft0,392(sp)
    246c:	7325                	lui	t1,0xfffe9
    246e:	0d0a                	slli	s10,s10,0x2
    2470:	0000                	unimp
    2472:	0000                	unimp
    2474:	6425                	lui	s0,0x9
    2476:	6b20                	flw	fs0,80(a4)
    2478:	2062                	fld	ft0,24(sp)
    247a:	66206f73          	csrrsi	t5,0x662,0
    247e:	7261                	lui	tp,0xffff8
    2480:	2e2e                	fld	ft8,200(sp)
    2482:	202e                	fld	ft0,200(sp)
    2484:	0020                	addi	s0,sp,8
    2486:	0000                	unimp
    2488:	0d0a                	slli	s10,s10,0x2
    248a:	6f4c                	flw	fa1,28(a4)
    248c:	6461                	lui	s0,0x18
    248e:	6465                	lui	s0,0x19
    2490:	2520                	fld	fs0,72(a0)
    2492:	2064                	fld	fs1,192(s0)
    2494:	6f6c696b          	0x6f6c696b
    2498:	7962                	flw	fs2,56(sp)
    249a:	6574                	flw	fa3,76(a0)
    249c:	0d0a2e73          	csrrs	t3,0xd0,s4
    24a0:	0000                	unimp
    24a2:	0000                	unimp
    24a4:	6572                	flw	fa0,28(sp)
    24a6:	6461                	lui	s0,0x18
    24a8:	7220                	flw	fs0,96(a2)
    24aa:	7365                	lui	t1,0xffff9
    24ac:	6c75                	lui	s8,0x1d
    24ae:	3a74                	fld	fa3,240(a2)
    24b0:	2520                	fld	fs0,72(a0)
    24b2:	0a75                	addi	s4,s4,29
    24b4:	000d                	c.nop	3
    24b6:	0000                	unimp
    24b8:	6f4c                	flw	fa1,28(a4)
    24ba:	676e                	flw	fa4,216(sp)
    24bc:	5020                	lw	s0,96(s0)
    24be:	6572                	flw	fa0,28(sp)
    24c0:	00007373          	csrrci	t1,ustatus,0
    24c4:	676e6953          	0x676e6953
    24c8:	656c                	flw	fa1,76(a0)
    24ca:	4320                	lw	s0,64(a4)
    24cc:	696c                	flw	fa1,84(a0)
    24ce:	00006b63          	bltu	zero,zero,24e4 <FONT_7x5>
    24d2:	0000                	unimp
    24d4:	6f44                	flw	fs1,28(a4)
    24d6:	6275                	lui	tp,0x1d
    24d8:	656c                	flw	fa1,76(a0)
    24da:	4320                	lw	s0,64(a4)
    24dc:	696c                	flw	fa1,84(a0)
    24de:	00006b63          	bltu	zero,zero,24f4 <FONT_7x5+0x10>
	...

000024e4 <FONT_7x5>:
    24e4:	00000000 5f000000 07000000 14000700     ......._........
    24f4:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
    2504:	00502255 00000305 41221c00 22410000     U"P......."A..A"
    2514:	2a08001c 08082a1c 08083e08 00305000     ...*.*...>...P0.
    2524:	08080800 60000808 20000060 02040810     .......``.. ....
    2534:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
    2544:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
    2554:	01304949 03050971 49494936 49490636     II0.q...6III6.II
    2564:	36001e29 00000036 00003656 22140800     )..66...V6....."
    2574:	14141441 22411414 02000814 06095101     A.....A".....Q..
    2584:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
    2594:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
    25a4:	3e010109 32514141 0808087f 7f41007f     ...>AAQ2......A.
    25b4:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
    25c4:	04027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
    25d4:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
    25e4:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
    25f4:	7f1f2040 7f201820 14081463 78040363     @ .. . .c...c..x
    2604:	51610304 00434549 41417f00 10080402     ..aQIEC...AA....
    2614:	7f414120 02040000 40040201 40404040      AA........@@@@@
    2624:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
    2634:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
    2644:	08020109 3c545414 0404087f 7d440078     .....TT<....x.D}
    2654:	40200040 00003d44 4428107f 407f4100     @. @D=....(D.A.@
    2664:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
    2674:	1414147c 14140808 087c7c18 48080404     |........||....H
    2684:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
    2694:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
    26a4:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
    26b4:	36410000 08080008 00081c2a              ..A6....*...

000026c0 <bitquartets.9>:
    26c0:	888e8888 88ee88e8 8e8e8e88 8eee8ee8     ................
    26d0:	e88ee888 e8eee8e8 ee8eee88 eeeeeee8     ................

000026e0 <cvt.1>:
    26e0:	41459a80 808f418e 49454545 8f8e4949     ..EA.A..EEEIII..
    26f0:	4f929290 55554f99 9b9a9959 9f9e9d9c     ...O.OUUY.......
    2700:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
    2710:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    2720:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
    2730:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    2740:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
    2750:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00002760 <ssd1306_init_array>:
    2760:	a880d5ae 4000d33f 0020148d 12dac8a1     ....?..@.. .....
    2770:	f1d98f81 a6a440db 0000ffaf              .....@......

Disassembly of section .data:

20000000 <dev_aht21>:
20000000:	00061a80 00000000 00010038              ........8...

2000000c <dev_ssd1306>:
2000000c:	000186a0 00000000 0001003c              ........<...

20000018 <i2c_registers>:
20000018:	000000aa 00000000 00000000 00000000     ................
	...

20000038 <line.6>:
20000038:	00000001                                ....

2000003c <tween>:
2000003c:	ffffff42                                B...

20000040 <FastMultiply>:
{
20000040:	87aa                	mv	a5,a0
	uint32_t ret = 0;
20000042:	4501                	li	a0,0
		if( multiplicand & 1 )
20000044:	0015f713          	andi	a4,a1,1
20000048:	c311                	beqz	a4,2000004c <FastMultiply+0xc>
			ret += mutliplicant;
2000004a:	953e                	add	a0,a0,a5
		multiplicand>>=1;
2000004c:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
2000004e:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000050:	f9f5                	bnez	a1,20000044 <FastMultiply+0x4>
}
20000052:	8082                	ret

20000054 <DMA1_Channel4_IRQHandler>:

// DMA transfer completion interrupt. It will fire when the DMA transfer is
// complete. We use it just to blink the LED
__attribute__((interrupt)) __attribute__((section(".srodata")))
void DMA1_Channel4_IRQHandler(void)
{
20000054:	1151                	addi	sp,sp,-12
20000056:	c23a                	sw	a4,4(sp)
	// Clear flag
	DMA1->INTFCR |= DMA_CTCIF4;
20000058:	40020737          	lui	a4,0x40020
{
2000005c:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000005e:	435c                	lw	a5,4(a4)
{
20000060:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000062:	6689                	lui	a3,0x2
20000064:	8fd5                	or	a5,a5,a3
20000066:	c35c                	sw	a5,4(a4)

	// Blink LED
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000068:	400117b7          	lui	a5,0x40011
2000006c:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000070:	47d8                	lw	a4,12(a5)
}
20000072:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000074:	04074713          	xori	a4,a4,64
20000078:	c7d8                	sw	a4,12(a5)
}
2000007a:	4712                	lw	a4,4(sp)
2000007c:	4782                	lw	a5,0(sp)
2000007e:	0131                	addi	sp,sp,12
20000080:	30200073          	mret
