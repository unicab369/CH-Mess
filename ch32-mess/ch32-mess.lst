
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	31b0006f          	j	b1a <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0be8                	addi	a0,sp,476
   a:	0000                	unimp
   c:	0b90                	addi	a2,sp,464
	...
  2e:	0000                	unimp
  30:	1da4                	addi	s1,sp,760
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0b90                	addi	a2,sp,464
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0b90                	addi	a2,sp,464
  42:	0000                	unimp
  44:	0b90                	addi	a2,sp,464
  46:	0000                	unimp
  48:	0b90                	addi	a2,sp,464
  4a:	0000                	unimp
  4c:	0b90                	addi	a2,sp,464
  4e:	0000                	unimp
  50:	0b90                	addi	a2,sp,464
  52:	0000                	unimp
  54:	0b90                	addi	a2,sp,464
  56:	0000                	unimp
  58:	0b90                	addi	a2,sp,464
  5a:	0000                	unimp
  5c:	0b90                	addi	a2,sp,464
  5e:	0000                	unimp
  60:	21f0                	fld	fa2,192(a1)
  62:	0000                	unimp
  64:	0034                	addi	a3,sp,8
  66:	2000                	fld	fs0,0(s0)
  68:	0b90                	addi	a2,sp,464
  6a:	0000                	unimp
  6c:	0b90                	addi	a2,sp,464
  6e:	0000                	unimp
  70:	0b90                	addi	a2,sp,464
  72:	0000                	unimp
  74:	0b90                	addi	a2,sp,464
  76:	0000                	unimp
  78:	1dd6                	slli	s11,s11,0x35
  7a:	0000                	unimp
  7c:	1f76                	slli	t5,t5,0x3d
  7e:	0000                	unimp
  80:	0b90                	addi	a2,sp,464
  82:	0000                	unimp
  84:	0b90                	addi	a2,sp,464
  86:	0000                	unimp
  88:	0b90                	addi	a2,sp,464
  8a:	0000                	unimp
  8c:	0b90                	addi	a2,sp,464
  8e:	0000                	unimp
  90:	0b90                	addi	a2,sp,464
  92:	0000                	unimp
  94:	0b90                	addi	a2,sp,464
  96:	0000                	unimp
  98:	0b90                	addi	a2,sp,464
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
      a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
      a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
      a8:	862e                	mv	a2,a1
      aa:	85aa                	mv	a1,a0
      ac:	557d                	li	a0,-1
      ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
      b0:	4685                	li	a3,1
      b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
      b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
      ba:	0606                	slli	a2,a2,0x1
      bc:	0686                	slli	a3,a3,0x1
      be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
      c2:	4501                	li	a0,0
      c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
      c8:	8d91                	sub	a1,a1,a2
      ca:	8d55                	or	a0,a0,a3
      cc:	8285                	srli	a3,a3,0x1
      ce:	8205                	srli	a2,a2,0x1
      d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
      d2:	8082                	ret

000000d4 <__umodsi3>:
      d4:	8286                	mv	t0,ra
      d6:	3fc9                	jal	a8 <__hidden___udivsi3>
      d8:	852e                	mv	a0,a1
      da:	8282                	jr	t0
      dc:	40a00533          	neg	a0,a0
      e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
      e4:	40b005b3          	neg	a1,a1
      e8:	b7c1                	j	a8 <__hidden___udivsi3>
      ea:	40b005b3          	neg	a1,a1
      ee:	8286                	mv	t0,ra
      f0:	3f65                	jal	a8 <__hidden___udivsi3>
      f2:	40a00533          	neg	a0,a0
      f6:	8282                	jr	t0

000000f8 <__modsi3>:
      f8:	8286                	mv	t0,ra
      fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
      fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
     102:	375d                	jal	a8 <__hidden___udivsi3>
     104:	852e                	mv	a0,a1
     106:	8282                	jr	t0
     108:	40b005b3          	neg	a1,a1
     10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
     110:	40a00533          	neg	a0,a0
     114:	3f51                	jal	a8 <__hidden___udivsi3>
     116:	40b00533          	neg	a0,a1
     11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
{
     11e:	1131                	addi	sp,sp,-20
     120:	c426                	sw	s1,8(sp)
     122:	c806                	sw	ra,16(sp)
     124:	c622                	sw	s0,12(sp)
     126:	84ae                	mv	s1,a1
     128:	87aa                	mv	a5,a0
     12a:	85b2                	mv	a1,a2
	int overflow = 0;
     12c:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     12e:	cab5                	beqz	a3,1a2 <mini_pad+0x84>
	if(len > pad_to) {
     130:	0096d463          	bge	a3,s1,138 <mini_pad+0x1a>
     134:	84b6                	mv	s1,a3
		overflow = 1;
     136:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     138:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     13c:	00045363          	bgez	s0,142 <mini_pad+0x24>
     140:	4401                	li	s0,0
     142:	8622                	mv	a2,s0
     144:	853a                	mv	a0,a4
     146:	c23e                	sw	a5,4(sp)
     148:	c01a                	sw	t1,0(sp)
     14a:	699000ef          	jal	ra,fe2 <memset>
     14e:	4302                	lw	t1,0(sp)
     150:	4792                	lw	a5,4(sp)
     152:	872a                	mv	a4,a0
     154:	008506b3          	add	a3,a0,s0
     158:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     15a:	40c485b3          	sub	a1,s1,a2
     15e:	04b04463          	bgtz	a1,1a6 <mini_pad+0x88>
     162:	0004d363          	bgez	s1,168 <mini_pad+0x4a>
     166:	4481                	li	s1,0
     168:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     16c:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     170:	02030463          	beqz	t1,198 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     174:	02c77263          	bgeu	a4,a2,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     178:	02a00793          	li	a5,42
     17c:	fef60fa3          	sb	a5,-1(a2)
     180:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     184:	00d77a63          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     188:	fef60f23          	sb	a5,-2(a2)
     18c:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     190:	00d77463          	bgeu	a4,a3,198 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     194:	fef60ea3          	sb	a5,-3(a2)
}
     198:	40c2                	lw	ra,16(sp)
     19a:	4432                	lw	s0,12(sp)
     19c:	44a2                	lw	s1,8(sp)
     19e:	0151                	addi	sp,sp,20
     1a0:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1a2:	86a6                	mv	a3,s1
     1a4:	bf51                	j	138 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1a6:	00c785b3          	add	a1,a5,a2
     1aa:	0005c503          	lbu	a0,0(a1)
     1ae:	00c685b3          	add	a1,a3,a2
     1b2:	0605                	addi	a2,a2,1
     1b4:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1b8:	b74d                	j	15a <mini_pad+0x3c>

000001ba <_puts>:
{
     1ba:	832a                	mv	t1,a0
     1bc:	852e                	mv	a0,a1
	if(!buf) return len;
     1be:	ce01                	beqz	a2,1d6 <_puts+0x1c>
	char * p0 = b->buffer;
     1c0:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1c4:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1c6:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1c8:	00a74863          	blt	a4,a0,1d8 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1cc:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1d0:	4248                	lw	a0,4(a2)
     1d2:	40550533          	sub	a0,a0,t0
}
     1d6:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1d8:	4614                	lw	a3,8(a2)
     1da:	fff68593          	addi	a1,a3,-1
     1de:	4214                	lw	a3,0(a2)
     1e0:	96ae                	add	a3,a3,a1
     1e2:	fed785e3          	beq	a5,a3,1cc <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1e6:	00178693          	addi	a3,a5,1
     1ea:	c254                	sw	a3,4(a2)
     1ec:	00e306b3          	add	a3,t1,a4
     1f0:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     1f4:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     1f6:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     1fa:	b7f1                	j	1c6 <_puts+0xc>

000001fc <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     1fc:	e0000737          	lui	a4,0xe0000
     200:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     204:	0f470693          	addi	a3,a4,244
     208:	0807f793          	andi	a5,a5,128
     20c:	fbf5                	bnez	a5,200 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     20e:	783027b7          	lui	a5,0x78302
     212:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     216:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     218:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     21a:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     21e:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     220:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     222:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     226:	0807f793          	andi	a5,a5,128
     22a:	ffe5                	bnez	a5,222 <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     22c:	00e557b3          	srl	a5,a0,a4
     230:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     234:	03000793          	li	a5,48
     238:	00d35463          	bge	t1,a3,240 <PrintHex+0x44>
     23c:	05700793          	li	a5,87
     240:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     242:	07a2                	slli	a5,a5,0x8
     244:	0857e793          	ori	a5,a5,133
     248:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     24c:	1771                	addi	a4,a4,-4
     24e:	fcb71ae3          	bne	a4,a1,222 <PrintHex+0x26>
}
     252:	8082                	ret

00000254 <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     254:	e000f7b7          	lui	a5,0xe000f
     258:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     25a:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     25e:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     260:	471c                	lw	a5,8(a4)
     262:	8f89                	sub	a5,a5,a0
     264:	fe07cee3          	bltz	a5,260 <DelaySysTick+0xc>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     268:	8082                	ret

0000026a <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     26a:	1101                	addi	sp,sp,-32
     26c:	ce06                	sw	ra,28(sp)
     26e:	cc22                	sw	s0,24(sp)
     270:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     272:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     274:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     276:	00055763          	bgez	a0,284 <mini_itoa.part.0+0x1a>
     27a:	e689                	bnez	a3,284 <mini_itoa.part.0+0x1a>
		negative = 1;
     27c:	4785                	li	a5,1
		value = -value;
     27e:	40a00333          	neg	t1,a0
		negative = 1;
     282:	c03e                	sw	a5,0(sp)
     284:	06100413          	li	s0,97
     288:	c219                	beqz	a2,28e <mini_itoa.part.0+0x24>
     28a:	04100413          	li	s0,65
	int	negative = 0;
     28e:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     290:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     292:	851a                	mv	a0,t1
     294:	c83a                	sw	a4,16(sp)
     296:	c21a                	sw	t1,4(sp)
     298:	c62e                	sw	a1,12(sp)
     29a:	c41a                	sw	t1,8(sp)
     29c:	3d25                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     29e:	47a5                	li	a5,9
     2a0:	4322                	lw	t1,8(sp)
     2a2:	45b2                	lw	a1,12(sp)
     2a4:	4742                	lw	a4,16(sp)
     2a6:	0ff57693          	andi	a3,a0,255
     2aa:	06a7e163          	bltu	a5,a0,30c <mini_itoa.part.0+0xa2>
     2ae:	03068693          	addi	a3,a3,48
     2b2:	0ff6f693          	andi	a3,a3,255
     2b6:	00148793          	addi	a5,s1,1
     2ba:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2be:	851a                	mv	a0,t1
     2c0:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2c2:	c63e                	sw	a5,12(sp)
		value /= radix;
     2c4:	c42e                	sw	a1,8(sp)
     2c6:	33cd                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
     2c8:	4692                	lw	a3,4(sp)
     2ca:	45a2                	lw	a1,8(sp)
     2cc:	47b2                	lw	a5,12(sp)
     2ce:	4742                	lw	a4,16(sp)
		value /= radix;
     2d0:	832a                	mv	t1,a0
	} while (value > 0);
     2d2:	02b6fb63          	bgeu	a3,a1,308 <mini_itoa.part.0+0x9e>
	if (negative)
     2d6:	4682                	lw	a3,0(sp)
     2d8:	c699                	beqz	a3,2e6 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2da:	02d00693          	li	a3,45
     2de:	00d78023          	sb	a3,0(a5) # e000f000 <_eusrstack+0xc000e800>
     2e2:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2e6:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2ea:	01f55693          	srli	a3,a0,0x1f
     2ee:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2f0:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2f4:	8685                	srai	a3,a3,0x1
     2f6:	4601                	li	a2,0
     2f8:	17fd                	addi	a5,a5,-1
     2fa:	00d64b63          	blt	a2,a3,310 <mini_itoa.part.0+0xa6>
}
     2fe:	40f2                	lw	ra,28(sp)
     300:	4462                	lw	s0,24(sp)
     302:	44d2                	lw	s1,20(sp)
     304:	6105                	addi	sp,sp,32
     306:	8082                	ret
	} while (value > 0);
     308:	84be                	mv	s1,a5
     30a:	b761                	j	292 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     30c:	96a2                	add	a3,a3,s0
     30e:	b755                	j	2b2 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     310:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     314:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     318:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     31c:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     31e:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     322:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     326:	bfc9                	j	2f8 <mini_itoa.part.0+0x8e>

00000328 <rand8>:
 */
uint8_t rand8(void) {
    uint8_t bit;
    uint32_t new_data;

    for(bit=0;bit<NOISE_BITS;bit++) {
     328:	c141a503          	lw	a0,-1004(gp) # 20000010 <lfsr>
uint8_t rand8(void) {
     32c:	46a1                	li	a3,8
     32e:	c1418713          	addi	a4,gp,-1004 # 20000010 <lfsr>
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
                                (lfsr>>NOISE_POLY_TAP1) ^
     332:	01555613          	srli	a2,a0,0x15
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
     336:	01f55793          	srli	a5,a0,0x1f
     33a:	8fb1                	xor	a5,a5,a2
     33c:	8fa9                	xor	a5,a5,a0
                                (lfsr>>NOISE_POLY_TAP2) ^
     33e:	00155613          	srli	a2,a0,0x1
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
     342:	8fb1                	xor	a5,a5,a2
                                (lfsr>>NOISE_POLY_TAP3));
        lfsr = (lfsr<<1) | (new_data&1);
     344:	8b85                	andi	a5,a5,1
     346:	0506                	slli	a0,a0,0x1
     348:	8d5d                	or	a0,a0,a5
    for(bit=0;bit<NOISE_BITS;bit++) {
     34a:	fff68793          	addi	a5,a3,-1
     34e:	0ff7f693          	andi	a3,a5,255
     352:	f2e5                	bnez	a3,332 <rand8+0xa>
     354:	c308                	sw	a0,0(a4)
    }

    return lfsr&NOISE_MASK;
}
     356:	0ff57513          	andi	a0,a0,255
     35a:	8082                	ret

0000035c <SPI_send>:
    DMA1_Channel3->CFGR &= ~DMA_CFGR1_EN;  // Turn off channel
}

static void SPI_send(uint8_t data) {
    // Send byte
    SPI1->DATAR = data;
     35c:	400137b7          	lui	a5,0x40013
     360:	00a79623          	sh	a0,12(a5) # 4001300c <_eusrstack+0x2001280c>

    // Waiting for transmission complete
    while (!(SPI1->STATR & SPI_STATR_TXE)) ;
     364:	40013737          	lui	a4,0x40013
     368:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     36c:	8b89                	andi	a5,a5,2
     36e:	dfed                	beqz	a5,368 <SPI_send+0xc>
}
     370:	8082                	ret

00000372 <write_command_8>:

static void write_command_8(uint8_t dc_pin, uint8_t cmd) {
    funDigitalWrite(dc_pin, 0);     // Command Mode
     372:	00455713          	srli	a4,a0,0x4
     376:	400116b7          	lui	a3,0x40011
     37a:	80068693          	addi	a3,a3,-2048 # 40010800 <_eusrstack+0x20010000>
     37e:	00f57793          	andi	a5,a0,15
     382:	072a                	slli	a4,a4,0xa
     384:	9736                	add	a4,a4,a3
     386:	07c1                	addi	a5,a5,16
     388:	4685                	li	a3,1
     38a:	00f697b3          	sll	a5,a3,a5
     38e:	cb1c                	sw	a5,16(a4)
    SPI_send(cmd);
     390:	852e                	mv	a0,a1
     392:	b7e9                	j	35c <SPI_send>

00000394 <write_data_16>:
    funDigitalWrite(dc_pin, 1);     // Data Mode
    SPI_send(data);
}

static void write_data_16(uint8_t dc_pin, uint16_t data) {
    funDigitalWrite(dc_pin, 1);     // Data Mode
     394:	00455793          	srli	a5,a0,0x4
     398:	40011737          	lui	a4,0x40011
     39c:	80070713          	addi	a4,a4,-2048 # 40010800 <_eusrstack+0x20010000>
     3a0:	07aa                	slli	a5,a5,0xa
static void write_data_16(uint8_t dc_pin, uint16_t data) {
     3a2:	1151                	addi	sp,sp,-12
    funDigitalWrite(dc_pin, 1);     // Data Mode
     3a4:	97ba                	add	a5,a5,a4
     3a6:	893d                	andi	a0,a0,15
     3a8:	4705                	li	a4,1
static void write_data_16(uint8_t dc_pin, uint16_t data) {
     3aa:	c222                	sw	s0,4(sp)
     3ac:	c406                	sw	ra,8(sp)
    funDigitalWrite(dc_pin, 1);     // Data Mode
     3ae:	00a71533          	sll	a0,a4,a0
     3b2:	cb88                	sw	a0,16(a5)
    SPI_send(data >> 8);
     3b4:	0085d513          	srli	a0,a1,0x8
static void write_data_16(uint8_t dc_pin, uint16_t data) {
     3b8:	842e                	mv	s0,a1
    SPI_send(data >> 8);
     3ba:	374d                	jal	35c <SPI_send>
    SPI_send(data);
     3bc:	0ff47513          	andi	a0,s0,255
}
     3c0:	4412                	lw	s0,4(sp)
     3c2:	40a2                	lw	ra,8(sp)
     3c4:	0131                	addi	sp,sp,12
    SPI_send(data);
     3c6:	bf59                	j	35c <SPI_send>

000003c8 <tft_send_DMA>:
static uint16_t _bg_color                  = BLACK;  // Background color
static uint8_t  _buffer[ST7735_WIDTH << 1] = {0};    // DMA buffer, long enough to fill a row.
static uint8_t DC_PIN2;

void tft_send_DMA(const uint8_t* buffer, uint16_t size, uint16_t repeat) {
    SPI_send_DMA(DC_PIN2, buffer, size, repeat);
     3c8:	c681c703          	lbu	a4,-920(gp) # 20000064 <DC_PIN2>
    funDigitalWrite(dc_pin, 1);     // Data Mode
     3cc:	400116b7          	lui	a3,0x40011
     3d0:	80068693          	addi	a3,a3,-2048 # 40010800 <_eusrstack+0x20010000>
     3d4:	00475793          	srli	a5,a4,0x4
     3d8:	07aa                	slli	a5,a5,0xa
     3da:	97b6                	add	a5,a5,a3
     3dc:	8b3d                	andi	a4,a4,15
     3de:	4685                	li	a3,1
     3e0:	00e69733          	sll	a4,a3,a4
     3e4:	cb98                	sw	a4,16(a5)
    DMA1_Channel3->MADDR = (uint32_t)buffer;
     3e6:	400207b7          	lui	a5,0x40020
     3ea:	dfc8                	sw	a0,60(a5)
    DMA1_Channel3->CNTR  = size;
     3ec:	dbcc                	sw	a1,52(a5)
    DMA1_Channel3->CFGR |= DMA_CFGR1_EN;  // Turn on channel
     3ee:	5b98                	lw	a4,48(a5)
        DMA1->INTFCR = DMA1_FLAG_TC3;
     3f0:	400206b7          	lui	a3,0x40020
     3f4:	20000593          	li	a1,512
    DMA1_Channel3->CFGR |= DMA_CFGR1_EN;  // Turn on channel
     3f8:	00176713          	ori	a4,a4,1
     3fc:	db98                	sw	a4,48(a5)
    while (repeat--) {
     3fe:	67c1                	lui	a5,0x10
     400:	17fd                	addi	a5,a5,-1
     402:	167d                	addi	a2,a2,-1
     404:	0642                	slli	a2,a2,0x10
     406:	8241                	srli	a2,a2,0x10
     408:	00f61863          	bne	a2,a5,418 <tft_send_DMA+0x50>
    DMA1_Channel3->CFGR &= ~DMA_CFGR1_EN;  // Turn off channel
     40c:	40020737          	lui	a4,0x40020
     410:	5b1c                	lw	a5,48(a4)
     412:	9bf9                	andi	a5,a5,-2
     414:	db1c                	sw	a5,48(a4)
}
     416:	8082                	ret
        DMA1->INTFCR = DMA1_FLAG_TC3;
     418:	c2cc                	sw	a1,4(a3)
        while (!(DMA1->INTFR & DMA1_FLAG_TC3))
     41a:	4298                	lw	a4,0(a3)
     41c:	20077713          	andi	a4,a4,512
     420:	df6d                	beqz	a4,41a <tft_send_DMA+0x52>
     422:	b7c5                	j	402 <tft_send_DMA+0x3a>

00000424 <tft_set_window>:

void tft_set_background_color(uint16_t color) {
    _bg_color = color;
}

static void tft_set_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     424:	1121                	addi	sp,sp,-24
     426:	c626                	sw	s1,12(sp)
     428:	84b6                	mv	s1,a3
     42a:	c822                	sw	s0,16(sp)
    write_command_8(DC_PIN2, ST7735_CASET);
     42c:	c681c403          	lbu	s0,-920(gp) # 20000064 <DC_PIN2>
static void tft_set_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     430:	c42a                	sw	a0,8(sp)
     432:	c22e                	sw	a1,4(sp)
    write_command_8(DC_PIN2, ST7735_CASET);
     434:	8522                	mv	a0,s0
     436:	02a00593          	li	a1,42
static void tft_set_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     43a:	ca06                	sw	ra,20(sp)
     43c:	c032                	sw	a2,0(sp)
    write_command_8(DC_PIN2, ST7735_CASET);
     43e:	3f15                	jal	372 <write_command_8>
    write_data_16(DC_PIN2, x0);
     440:	4722                	lw	a4,8(sp)
     442:	8522                	mv	a0,s0
     444:	85ba                	mv	a1,a4
     446:	37b9                	jal	394 <write_data_16>
    write_data_16(DC_PIN2, x1);
     448:	4602                	lw	a2,0(sp)
     44a:	8522                	mv	a0,s0
     44c:	85b2                	mv	a1,a2
     44e:	3799                	jal	394 <write_data_16>
    write_command_8(DC_PIN2, ST7735_RASET);
     450:	8522                	mv	a0,s0
     452:	02b00593          	li	a1,43
     456:	3f31                	jal	372 <write_command_8>
    write_data_16(DC_PIN2, y0);
     458:	4792                	lw	a5,4(sp)
     45a:	8522                	mv	a0,s0
     45c:	85be                	mv	a1,a5
     45e:	3f1d                	jal	394 <write_data_16>
    write_data_16(DC_PIN2, y1);
     460:	85a6                	mv	a1,s1
     462:	8522                	mv	a0,s0
     464:	3f05                	jal	394 <write_data_16>
    write_command_8(DC_PIN2, ST7735_RAMWR);
     466:	8522                	mv	a0,s0
}
     468:	4442                	lw	s0,16(sp)
     46a:	40d2                	lw	ra,20(sp)
     46c:	44b2                	lw	s1,12(sp)
    write_command_8(DC_PIN2, ST7735_RAMWR);
     46e:	02c00593          	li	a1,44
}
     472:	0161                	addi	sp,sp,24
    write_command_8(DC_PIN2, ST7735_RAMWR);
     474:	bdfd                	j	372 <write_command_8>

00000476 <tft_draw_pixel>:
                            }

//! draw pixel
void tft_draw_pixel(
    uint16_t x, uint16_t y, uint16_t color
) {
     476:	1151                	addi	sp,sp,-12
    x += ST7735_X_OFFSET;
     478:	0505                	addi	a0,a0,1
    y += ST7735_Y_OFFSET;
     47a:	01a58693          	addi	a3,a1,26
) {
     47e:	c222                	sw	s0,4(sp)
    y += ST7735_Y_OFFSET;
     480:	06c2                	slli	a3,a3,0x10
) {
     482:	8432                	mv	s0,a2
    x += ST7735_X_OFFSET;
     484:	01051613          	slli	a2,a0,0x10
     488:	8241                	srli	a2,a2,0x10
    y += ST7735_Y_OFFSET;
     48a:	82c1                	srli	a3,a3,0x10
    START_WRITE();
    tft_set_window(x, y, x, y);
     48c:	85b6                	mv	a1,a3
     48e:	8532                	mv	a0,a2
) {
     490:	c406                	sw	ra,8(sp)
    tft_set_window(x, y, x, y);
     492:	3f49                	jal	424 <tft_set_window>

void tft_send_color(uint16_t color) {
    write_data_16(DC_PIN2, color);
     494:	85a2                	mv	a1,s0
    tft_send_color(color);
    END_WRITE();
}
     496:	4412                	lw	s0,4(sp)
     498:	40a2                	lw	ra,8(sp)
     49a:	c681c503          	lbu	a0,-920(gp) # 20000064 <DC_PIN2>
     49e:	0131                	addi	sp,sp,12
     4a0:	bdd5                	j	394 <write_data_16>

000004a2 <_draw_fast_vLine>:

//! private
static void _draw_fast_vLine(
    int16_t x, int16_t y, int16_t h, uint16_t color
) {
     4a2:	1151                	addi	sp,sp,-12
     4a4:	c222                	sw	s0,4(sp)
    x += ST7735_X_OFFSET;
    y += ST7735_Y_OFFSET;
     4a6:	05e9                	addi	a1,a1,26
) {
     4a8:	8432                	mv	s0,a2
    x += ST7735_X_OFFSET;
     4aa:	00150613          	addi	a2,a0,1
) {
     4ae:	c026                	sw	s1,0(sp)
    x += ST7735_X_OFFSET;
     4b0:	0642                	slli	a2,a2,0x10
    y += ST7735_Y_OFFSET;
     4b2:	05c2                	slli	a1,a1,0x10
) {
     4b4:	c406                	sw	ra,8(sp)
    x += ST7735_X_OFFSET;
     4b6:	8241                	srli	a2,a2,0x10
    y += ST7735_Y_OFFSET;
     4b8:	81c1                	srli	a1,a1,0x10

    uint16_t sz = 0;
    for (int16_t j = 0; j < h; j++) {
        _buffer[sz++] = color >> 8;
     4ba:	0086d513          	srli	a0,a3,0x8
     4be:	cf018713          	addi	a4,gp,-784 # 200000ec <_buffer>
    for (int16_t j = 0; j < h; j++) {
     4c2:	4781                	li	a5,0
     4c4:	0287c863          	blt	a5,s0,4f4 <_draw_fast_vLine+0x52>
        _buffer[sz++] = color;
    }

    START_WRITE();
    tft_set_window(x, y, x, y + h - 1);
     4c8:	fff40693          	addi	a3,s0,-1
     4cc:	96ae                	add	a3,a3,a1
     4ce:	06c2                	slli	a3,a3,0x10
     4d0:	82c1                	srli	a3,a3,0x10
     4d2:	8532                	mv	a0,a2
     4d4:	3f81                	jal	424 <tft_set_window>
    tft_send_DMA(_buffer, sz, 1);
     4d6:	85a2                	mv	a1,s0
     4d8:	00045363          	bgez	s0,4de <_draw_fast_vLine+0x3c>
     4dc:	4581                	li	a1,0
    END_WRITE();
}
     4de:	4412                	lw	s0,4(sp)
     4e0:	40a2                	lw	ra,8(sp)
    tft_send_DMA(_buffer, sz, 1);
     4e2:	0586                	slli	a1,a1,0x1
     4e4:	cf018513          	addi	a0,gp,-784 # 200000ec <_buffer>
}
     4e8:	4482                	lw	s1,0(sp)
    tft_send_DMA(_buffer, sz, 1);
     4ea:	05c2                	slli	a1,a1,0x10
     4ec:	81c1                	srli	a1,a1,0x10
     4ee:	4605                	li	a2,1
}
     4f0:	0131                	addi	sp,sp,12
    tft_send_DMA(_buffer, sz, 1);
     4f2:	bdd9                	j	3c8 <tft_send_DMA>
        _buffer[sz++] = color >> 8;
     4f4:	0785                	addi	a5,a5,1
     4f6:	07c2                	slli	a5,a5,0x10
     4f8:	00a70023          	sb	a0,0(a4) # 40020000 <_eusrstack+0x2001f800>
        _buffer[sz++] = color;
     4fc:	00d700a3          	sb	a3,1(a4)
    for (int16_t j = 0; j < h; j++) {
     500:	87c1                	srai	a5,a5,0x10
     502:	0709                	addi	a4,a4,2
     504:	b7c1                	j	4c4 <_draw_fast_vLine+0x22>

00000506 <_draw_fast_hLine>:


//! private
static void _draw_fast_hLine(
    int16_t x, int16_t y, int16_t w, uint16_t color
) {
     506:	1151                	addi	sp,sp,-12
    x += ST7735_X_OFFSET;
    y += ST7735_Y_OFFSET;
     508:	05e9                	addi	a1,a1,26
    x += ST7735_X_OFFSET;
     50a:	0505                	addi	a0,a0,1
) {
     50c:	c222                	sw	s0,4(sp)
     50e:	c026                	sw	s1,0(sp)
     510:	8432                	mv	s0,a2
    x += ST7735_X_OFFSET;
     512:	0542                	slli	a0,a0,0x10
) {
     514:	8636                	mv	a2,a3
    y += ST7735_Y_OFFSET;
     516:	01059693          	slli	a3,a1,0x10
) {
     51a:	c406                	sw	ra,8(sp)
    x += ST7735_X_OFFSET;
     51c:	8141                	srli	a0,a0,0x10
    y += ST7735_Y_OFFSET;
     51e:	82c1                	srli	a3,a3,0x10

    uint16_t sz = 0;
    for (int16_t j = 0; j < w; j++) {
        _buffer[sz++] = color >> 8;
     520:	00865593          	srli	a1,a2,0x8
     524:	cf018713          	addi	a4,gp,-784 # 200000ec <_buffer>
    for (int16_t j = 0; j < w; j++) {
     528:	4781                	li	a5,0
     52a:	0287c863          	blt	a5,s0,55a <_draw_fast_hLine+0x54>
        _buffer[sz++] = color;
    }

    START_WRITE();
    tft_set_window(x, y, x + w - 1, y);
     52e:	fff40613          	addi	a2,s0,-1
     532:	962a                	add	a2,a2,a0
     534:	0642                	slli	a2,a2,0x10
     536:	85b6                	mv	a1,a3
     538:	8241                	srli	a2,a2,0x10
     53a:	35ed                	jal	424 <tft_set_window>
    tft_send_DMA(_buffer, sz, 1);
     53c:	85a2                	mv	a1,s0
     53e:	00045363          	bgez	s0,544 <_draw_fast_hLine+0x3e>
     542:	4581                	li	a1,0
    END_WRITE();
}
     544:	4412                	lw	s0,4(sp)
     546:	40a2                	lw	ra,8(sp)
    tft_send_DMA(_buffer, sz, 1);
     548:	0586                	slli	a1,a1,0x1
     54a:	cf018513          	addi	a0,gp,-784 # 200000ec <_buffer>
}
     54e:	4482                	lw	s1,0(sp)
    tft_send_DMA(_buffer, sz, 1);
     550:	05c2                	slli	a1,a1,0x10
     552:	81c1                	srli	a1,a1,0x10
     554:	4605                	li	a2,1
}
     556:	0131                	addi	sp,sp,12
    tft_send_DMA(_buffer, sz, 1);
     558:	bd85                	j	3c8 <tft_send_DMA>
        _buffer[sz++] = color >> 8;
     55a:	0785                	addi	a5,a5,1
     55c:	07c2                	slli	a5,a5,0x10
     55e:	00b70023          	sb	a1,0(a4)
        _buffer[sz++] = color;
     562:	00c700a3          	sb	a2,1(a4)
    for (int16_t j = 0; j < w; j++) {
     566:	87c1                	srai	a5,a5,0x10
     568:	0709                	addi	a4,a4,2
     56a:	b7c1                	j	52a <_draw_fast_hLine+0x24>

0000056c <tft_draw_line>:

//! draw line
void tft_draw_line(
    int16_t x0, int16_t y0,
    int16_t x1, int16_t y1, uint16_t color, uint8_t width
) {
     56c:	82b2                	mv	t0,a2
     56e:	832a                	mv	t1,a0
     570:	8636                	mv	a2,a3
     572:	86ba                	mv	a3,a4
    if (x0 == x1) {
     574:	00551d63          	bne	a0,t0,58e <tft_draw_line+0x22>
        if (y0 > y1) _swap_int16(y0, y1);
     578:	00b65563          	bge	a2,a1,582 <tft_draw_line+0x16>
     57c:	87ae                	mv	a5,a1
     57e:	85b2                	mv	a1,a2
     580:	863e                	mv	a2,a5
        _draw_fast_vLine(x0, y0, y1 - y0 + 1, color);
     582:	0605                	addi	a2,a2,1
     584:	8e0d                	sub	a2,a2,a1
     586:	0642                	slli	a2,a2,0x10
     588:	8641                	srai	a2,a2,0x10
     58a:	851a                	mv	a0,t1
     58c:	bf19                	j	4a2 <_draw_fast_vLine>
    }
    else if (y0 == y1) {
     58e:	00c59e63          	bne	a1,a2,5aa <tft_draw_line+0x3e>
        if (x0 > x1) _swap_int16(x0, x1);
     592:	00a2d463          	bge	t0,a0,59a <tft_draw_line+0x2e>
     596:	8316                	mv	t1,t0
     598:	82aa                	mv	t0,a0
        _draw_fast_hLine(x0, y0, x1 - x0 + 1, color);
     59a:	00128613          	addi	a2,t0,1
     59e:	40660633          	sub	a2,a2,t1
     5a2:	0642                	slli	a2,a2,0x10
     5a4:	8641                	srai	a2,a2,0x10
     5a6:	851a                	mv	a0,t1
     5a8:	bfb9                	j	506 <_draw_fast_hLine>
) {
     5aa:	fc410113          	addi	sp,sp,-60
     5ae:	dc06                	sw	ra,56(sp)
     5b0:	da22                	sw	s0,52(sp)
     5b2:	d826                	sw	s1,48(sp)
     5b4:	853e                	mv	a0,a5
    uint8_t steep = _diff(y1, y0) > _diff(x1, x0);
     5b6:	40c587b3          	sub	a5,a1,a2
     5ba:	00c5d463          	bge	a1,a2,5c2 <tft_draw_line+0x56>
     5be:	40b607b3          	sub	a5,a2,a1
     5c2:	06535763          	bge	t1,t0,630 <tft_draw_line+0xc4>
     5c6:	40628733          	sub	a4,t0,t1
    if (steep) {
     5ca:	06f74d63          	blt	a4,a5,644 <tft_draw_line+0xd8>
     5ce:	83ae                	mv	t2,a1
     5d0:	859a                	mv	a1,t1
     5d2:	831e                	mv	t1,t2
    int16_t dx   = x1 - x0;
     5d4:	40b283b3          	sub	t2,t0,a1
     5d8:	01039413          	slli	s0,t2,0x10
     5dc:	8041                	srli	s0,s0,0x10
     5de:	c622                	sw	s0,12(sp)
     5e0:	03c2                	slli	t2,t2,0x10
    int16_t dy   = _diff(y1, y0);
     5e2:	01031413          	slli	s0,t1,0x10
     5e6:	01061493          	slli	s1,a2,0x10
    int16_t dx   = x1 - x0;
     5ea:	4103d393          	srai	t2,t2,0x10
    int16_t dy   = _diff(y1, y0);
     5ee:	8041                	srli	s0,s0,0x10
     5f0:	80c1                	srli	s1,s1,0x10
     5f2:	06c35563          	bge	t1,a2,65c <tft_draw_line+0xf0>
     5f6:	40848433          	sub	s0,s1,s0
     5fa:	0442                	slli	s0,s0,0x10
     5fc:	8441                	srai	s0,s0,0x10
     5fe:	c222                	sw	s0,4(sp)
    int16_t step = (y0 < y1) ? 1 : -1;
     600:	4405                	li	s0,1
     602:	c422                	sw	s0,8(sp)
    int16_t err  = dx >> 1;
     604:	4013d393          	srai	t2,t2,0x1
    int16_t step = (y0 < y1) ? 1 : -1;
     608:	00c34463          	blt	t1,a2,610 <tft_draw_line+0xa4>
     60c:	567d                	li	a2,-1
     60e:	c432                	sw	a2,8(sp)
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     610:	00155613          	srli	a2,a0,0x1
     614:	c032                	sw	a2,0(sp)
     616:	40c00633          	neg	a2,a2
     61a:	0642                	slli	a2,a2,0x10
     61c:	8641                	srai	a2,a2,0x10
     61e:	c832                	sw	a2,16(sp)
    for (; x0 <= x1; x0++) {
     620:	04b2d063          	bge	t0,a1,660 <tft_draw_line+0xf4>
    }
    else {
        _draw_line_bresenham(x0, y0, x1, y1, color, width);
    }
}
     624:	50e2                	lw	ra,56(sp)
     626:	5452                	lw	s0,52(sp)
     628:	54c2                	lw	s1,48(sp)
     62a:	03c10113          	addi	sp,sp,60
     62e:	8082                	ret
    uint8_t steep = _diff(y1, y0) > _diff(x1, x0);
     630:	40530733          	sub	a4,t1,t0
    if (steep) {
     634:	00f74863          	blt	a4,a5,644 <tft_draw_line+0xd8>
     638:	83b2                	mv	t2,a2
     63a:	8616                	mv	a2,t0
     63c:	829e                	mv	t0,t2
     63e:	83ae                	mv	t2,a1
     640:	859a                	mv	a1,t1
     642:	831e                	mv	t1,t2
    if (x0 > x1) {
     644:	00b65863          	bge	a2,a1,654 <tft_draw_line+0xe8>
     648:	83ae                	mv	t2,a1
     64a:	85b2                	mv	a1,a2
     64c:	861a                	mv	a2,t1
     64e:	8316                	mv	t1,t0
     650:	829e                	mv	t0,t2
     652:	b749                	j	5d4 <tft_draw_line+0x68>
     654:	8396                	mv	t2,t0
     656:	82b2                	mv	t0,a2
     658:	861e                	mv	a2,t2
     65a:	bfad                	j	5d4 <tft_draw_line+0x68>
    int16_t dy   = _diff(y1, y0);
     65c:	8c05                	sub	s0,s0,s1
     65e:	bf71                	j	5fa <tft_draw_line+0x8e>
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     660:	44c2                	lw	s1,16(sp)
     662:	01059413          	slli	s0,a1,0x10
     666:	8041                	srli	s0,s0,0x10
                tft_draw_pixel(y0 + w, x0, color); // Draw perpendicular pixels for width
     668:	01031613          	slli	a2,t1,0x10
     66c:	04c2                	slli	s1,s1,0x10
     66e:	8241                	srli	a2,a2,0x10
     670:	80c1                	srli	s1,s1,0x10
     672:	00960533          	add	a0,a2,s1
     676:	ca32                	sw	a2,20(sp)
     678:	0542                	slli	a0,a0,0x10
     67a:	d616                	sw	t0,44(sp)
     67c:	d41a                	sw	t1,40(sp)
     67e:	d21e                	sw	t2,36(sp)
     680:	d03e                	sw	a5,32(sp)
     682:	ce3a                	sw	a4,28(sp)
     684:	cc36                	sw	a3,24(sp)
     686:	8141                	srli	a0,a0,0x10
     688:	8636                	mv	a2,a3
            if (steep) {
     68a:	04f75d63          	bge	a4,a5,6e4 <tft_draw_line+0x178>
                tft_draw_pixel(y0 + w, x0, color); // Draw perpendicular pixels for width
     68e:	85a2                	mv	a1,s0
     690:	33dd                	jal	476 <tft_draw_pixel>
     692:	46e2                	lw	a3,24(sp)
     694:	4772                	lw	a4,28(sp)
     696:	5782                	lw	a5,32(sp)
     698:	5392                	lw	t2,36(sp)
     69a:	5322                	lw	t1,40(sp)
     69c:	52b2                	lw	t0,44(sp)
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     69e:	0485                	addi	s1,s1,1
     6a0:	4602                	lw	a2,0(sp)
     6a2:	04c2                	slli	s1,s1,0x10
     6a4:	84c1                	srai	s1,s1,0x10
     6a6:	fc9651e3          	bge	a2,s1,668 <tft_draw_line+0xfc>
        err -= dy;
     6aa:	4612                	lw	a2,4(sp)
     6ac:	40c383b3          	sub	t2,t2,a2
     6b0:	01039613          	slli	a2,t2,0x10
     6b4:	03c2                	slli	t2,t2,0x10
     6b6:	4103d393          	srai	t2,t2,0x10
     6ba:	8241                	srli	a2,a2,0x10
        if (err < 0) {
     6bc:	0003df63          	bgez	t2,6da <tft_draw_line+0x16e>
            err += dx;
     6c0:	45b2                	lw	a1,12(sp)
     6c2:	00c583b3          	add	t2,a1,a2
            y0 += step;
     6c6:	4652                	lw	a2,20(sp)
     6c8:	45a2                	lw	a1,8(sp)
            err += dx;
     6ca:	03c2                	slli	t2,t2,0x10
     6cc:	4103d393          	srai	t2,t2,0x10
            y0 += step;
     6d0:	00b60333          	add	t1,a2,a1
     6d4:	0342                	slli	t1,t1,0x10
     6d6:	41035313          	srai	t1,t1,0x10
    for (; x0 <= x1; x0++) {
     6da:	0405                	addi	s0,s0,1
     6dc:	01041593          	slli	a1,s0,0x10
     6e0:	85c1                	srai	a1,a1,0x10
     6e2:	bf3d                	j	620 <tft_draw_line+0xb4>
                tft_draw_pixel(x0, y0 + w, color); // Draw perpendicular pixels for width
     6e4:	85aa                	mv	a1,a0
     6e6:	8522                	mv	a0,s0
     6e8:	3379                	jal	476 <tft_draw_pixel>
     6ea:	52b2                	lw	t0,44(sp)
     6ec:	5322                	lw	t1,40(sp)
     6ee:	5392                	lw	t2,36(sp)
     6f0:	5782                	lw	a5,32(sp)
     6f2:	4772                	lw	a4,28(sp)
     6f4:	46e2                	lw	a3,24(sp)
     6f6:	b765                	j	69e <tft_draw_line+0x132>

000006f8 <tft_draw_rect>:

//! draw rectangle
void tft_draw_rect(
    uint16_t x, uint16_t y,
    uint16_t width, uint16_t height, uint16_t color
) {
     6f8:	fdc10113          	addi	sp,sp,-36
     6fc:	ce22                	sw	s0,28(sp)
    _draw_fast_hLine(x, y, width, color);
     6fe:	01059413          	slli	s0,a1,0x10
) {
     702:	cc26                	sw	s1,24(sp)
     704:	87b2                	mv	a5,a2
    _draw_fast_hLine(x, y, width, color);
     706:	8441                	srai	s0,s0,0x10
) {
     708:	84aa                	mv	s1,a0
    _draw_fast_hLine(x, y, width, color);
     70a:	0642                	slli	a2,a2,0x10
     70c:	0542                	slli	a0,a0,0x10
) {
     70e:	c036                	sw	a3,0(sp)
    _draw_fast_hLine(x, y, width, color);
     710:	8541                	srai	a0,a0,0x10
) {
     712:	86ba                	mv	a3,a4
    _draw_fast_hLine(x, y, width, color);
     714:	ca2e                	sw	a1,20(sp)
     716:	8641                	srai	a2,a2,0x10
     718:	85a2                	mv	a1,s0
) {
     71a:	d006                	sw	ra,32(sp)
    _draw_fast_hLine(x, y, width, color);
     71c:	c23a                	sw	a4,4(sp)
     71e:	c83e                	sw	a5,16(sp)
     720:	c632                	sw	a2,12(sp)
     722:	c42a                	sw	a0,8(sp)
     724:	33cd                	jal	506 <_draw_fast_hLine>
    _draw_fast_hLine(x, y + height - 1, width, color);
     726:	4782                	lw	a5,0(sp)
     728:	4352                	lw	t1,20(sp)
     72a:	4692                	lw	a3,4(sp)
     72c:	fff78593          	addi	a1,a5,-1 # ffff <lib_i2c.c.bfb73fe7+0x5fdb>
     730:	4632                	lw	a2,12(sp)
     732:	4522                	lw	a0,8(sp)
     734:	959a                	add	a1,a1,t1
     736:	05c2                	slli	a1,a1,0x10
     738:	85c1                	srai	a1,a1,0x10
     73a:	33f1                	jal	506 <_draw_fast_hLine>
    _draw_fast_vLine(x, y, height, color);
     73c:	00011603          	lh	a2,0(sp)
     740:	4692                	lw	a3,4(sp)
     742:	4522                	lw	a0,8(sp)
     744:	85a2                	mv	a1,s0
     746:	c032                	sw	a2,0(sp)
     748:	3ba9                	jal	4a2 <_draw_fast_vLine>
    _draw_fast_vLine(x + width - 1, y, height, color);
     74a:	47c2                	lw	a5,16(sp)
     74c:	85a2                	mv	a1,s0
}
     74e:	4472                	lw	s0,28(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     750:	fff78513          	addi	a0,a5,-1
     754:	4692                	lw	a3,4(sp)
     756:	4602                	lw	a2,0(sp)
}
     758:	5082                	lw	ra,32(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     75a:	9526                	add	a0,a0,s1
}
     75c:	44e2                	lw	s1,24(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     75e:	0542                	slli	a0,a0,0x10
     760:	8541                	srai	a0,a0,0x10
}
     762:	02410113          	addi	sp,sp,36
    _draw_fast_vLine(x + width - 1, y, height, color);
     766:	bb35                	j	4a2 <_draw_fast_vLine>

00000768 <tft_print>:
    tft_set_window(_cursor_x, _cursor_y, _cursor_x + width - 1, _cursor_y + height - 1);
    tft_send_DMA(_frame_buffer, sz, 1);
    // END_WRITE();
}

void tft_print(const char* str) {
     768:	1131                	addi	sp,sp,-20
     76a:	c622                	sw	s0,12(sp)
     76c:	c806                	sw	ra,16(sp)
     76e:	c426                	sw	s1,8(sp)
     770:	842a                	mv	s0,a0
    uint8_t font_width = 5; // Assuming a fixed width for the font

    while (*str) {
     772:	00044783          	lbu	a5,0(s0)
     776:	e791                	bnez	a5,782 <tft_print+0x1a>
        tft_print_char(*str++, 7, font_width, 0xFFFF, 0x0000); // 7x5 font size
        _cursor_x += font_width + 1;
    }
}
     778:	40c2                	lw	ra,16(sp)
     77a:	4432                	lw	s0,12(sp)
     77c:	44a2                	lw	s1,8(sp)
     77e:	0151                	addi	sp,sp,20
     780:	8082                	ret
    const unsigned char* start = &font[c + (c << 2)];
     782:	00279713          	slli	a4,a5,0x2
     786:	97ba                	add	a5,a5,a4
        tft_print_char(*str++, 7, font_width, 0xFFFF, 0x0000); // 7x5 font size
     788:	0405                	addi	s0,s0,1
    const unsigned char* start = &font[c + (c << 2)];
     78a:	c03e                	sw	a5,0(sp)
     78c:	4301                	li	t1,0
    uint16_t sz = 0;
     78e:	4681                	li	a3,0
     790:	e3018513          	addi	a0,gp,-464 # 2000022c <_frame_buffer>
                _frame_buffer[sz++] = color >> 8;
     794:	53fd                	li	t2,-1
     796:	4785                	li	a5,1
     798:	006797b3          	sll	a5,a5,t1
     79c:	c23e                	sw	a5,4(sp)
            if ((*(start + j)) & (0x01 << i)) {
     79e:	8636                	mv	a2,a3
     7a0:	4581                	li	a1,0
     7a2:	4282                	lw	t0,0(sp)
     7a4:	6089                	lui	ra,0x2
     7a6:	5d808093          	addi	ra,ra,1496 # 25d8 <font>
     7aa:	92ae                	add	t0,t0,a1
     7ac:	9286                	add	t0,t0,ra
     7ae:	0002c283          	lbu	t0,0(t0)
     7b2:	4092                	lw	ra,4(sp)
     7b4:	00160793          	addi	a5,a2,1
                _frame_buffer[sz++] = color >> 8;
     7b8:	8732                	mv	a4,a2
                _frame_buffer[sz++] = color;
     7ba:	0609                	addi	a2,a2,2
     7bc:	07c2                	slli	a5,a5,0x10
     7be:	0642                	slli	a2,a2,0x10
            if ((*(start + j)) & (0x01 << i)) {
     7c0:	0012f2b3          	and	t0,t0,ra
     7c4:	83c1                	srli	a5,a5,0x10
                _frame_buffer[sz++] = color;
     7c6:	8241                	srli	a2,a2,0x10
                _frame_buffer[sz++] = color >> 8;
     7c8:	972a                	add	a4,a4,a0
            if ((*(start + j)) & (0x01 << i)) {
     7ca:	06028163          	beqz	t0,82c <tft_print+0xc4>
                _frame_buffer[sz++] = color >> 8;
     7ce:	00770023          	sb	t2,0(a4)
                _frame_buffer[sz++] = color;
     7d2:	97aa                	add	a5,a5,a0
     7d4:	00778023          	sb	t2,0(a5)
        for (uint8_t j = 0; j < width; j++) {
     7d8:	0585                	addi	a1,a1,1
     7da:	4795                	li	a5,5
     7dc:	fcf593e3          	bne	a1,a5,7a2 <tft_print+0x3a>
                _frame_buffer[sz++] = color;
     7e0:	06a9                	addi	a3,a3,10
     7e2:	06c2                	slli	a3,a3,0x10
     7e4:	82c1                	srli	a3,a3,0x10
    for (uint8_t i = 0; i < height; i++) {
     7e6:	04600793          	li	a5,70
     7ea:	0305                	addi	t1,t1,1
     7ec:	faf695e3          	bne	a3,a5,796 <tft_print+0x2e>
    tft_set_window(_cursor_x, _cursor_y, _cursor_x + width - 1, _cursor_y + height - 1);
     7f0:	c7818713          	addi	a4,gp,-904 # 20000074 <_cursor_x>
     7f4:	00075783          	lhu	a5,0(a4)
     7f8:	c7a1d583          	lhu	a1,-902(gp) # 20000076 <_cursor_y>
     7fc:	00478613          	addi	a2,a5,4
     800:	00658693          	addi	a3,a1,6
     804:	06c2                	slli	a3,a3,0x10
     806:	0642                	slli	a2,a2,0x10
     808:	853e                	mv	a0,a5
     80a:	82c1                	srli	a3,a3,0x10
     80c:	8241                	srli	a2,a2,0x10
     80e:	c03e                	sw	a5,0(sp)
     810:	3911                	jal	424 <tft_set_window>
    tft_send_DMA(_frame_buffer, sz, 1);
     812:	4605                	li	a2,1
     814:	04600593          	li	a1,70
     818:	e3018513          	addi	a0,gp,-464 # 2000022c <_frame_buffer>
     81c:	3675                	jal	3c8 <tft_send_DMA>
        _cursor_x += font_width + 1;
     81e:	4782                	lw	a5,0(sp)
     820:	c7818713          	addi	a4,gp,-904 # 20000074 <_cursor_x>
     824:	0799                	addi	a5,a5,6
     826:	00f71023          	sh	a5,0(a4)
     82a:	b7a1                	j	772 <tft_print+0xa>
                _frame_buffer[sz++] = bg_color >> 8;
     82c:	00070023          	sb	zero,0(a4)
                _frame_buffer[sz++] = bg_color;
     830:	97aa                	add	a5,a5,a0
     832:	00078023          	sb	zero,0(a5)
     836:	b74d                	j	7d8 <tft_print+0x70>

00000838 <tft_fill_rect>:

void tft_fill_rect(
    uint16_t x, uint16_t y,
    uint16_t width, uint16_t height, uint16_t color
) {
    x += ST7735_X_OFFSET;
     838:	0505                	addi	a0,a0,1
    y += ST7735_Y_OFFSET;
     83a:	05e9                	addi	a1,a1,26
) {
     83c:	1151                	addi	sp,sp,-12
    x += ST7735_X_OFFSET;
     83e:	0542                	slli	a0,a0,0x10
    y += ST7735_Y_OFFSET;
     840:	05c2                	slli	a1,a1,0x10
) {
     842:	c222                	sw	s0,4(sp)
     844:	c026                	sw	s1,0(sp)
     846:	c406                	sw	ra,8(sp)
     848:	84b6                	mv	s1,a3
     84a:	8432                	mv	s0,a2
    x += ST7735_X_OFFSET;
     84c:	8141                	srli	a0,a0,0x10
    y += ST7735_Y_OFFSET;
     84e:	81c1                	srli	a1,a1,0x10

    uint16_t sz = 0;
    for (uint16_t x = 0; x < width; x++) {
        _buffer[sz++] = color >> 8;
     850:	00875293          	srli	t0,a4,0x8
     854:	cf018313          	addi	t1,gp,-784 # 200000ec <_buffer>
    for (uint16_t x = 0; x < width; x++) {
     858:	4681                	li	a3,0
        _buffer[sz++] = color >> 8;
     85a:	8636                	mv	a2,a3
    for (uint16_t x = 0; x < width; x++) {
     85c:	0685                	addi	a3,a3,1
     85e:	06c2                	slli	a3,a3,0x10
        _buffer[sz++] = color >> 8;
     860:	00530023          	sb	t0,0(t1)
        _buffer[sz++] = color;
     864:	00e300a3          	sb	a4,1(t1)
    for (uint16_t x = 0; x < width; x++) {
     868:	82c1                	srli	a3,a3,0x10
     86a:	0309                	addi	t1,t1,2
     86c:	fed417e3          	bne	s0,a3,85a <tft_fill_rect+0x22>
    }

    START_WRITE();
    tft_set_window(x, y, x + width - 1, y + height - 1);
     870:	fff48693          	addi	a3,s1,-1
     874:	96ae                	add	a3,a3,a1
     876:	962a                	add	a2,a2,a0
     878:	06c2                	slli	a3,a3,0x10
     87a:	0642                	slli	a2,a2,0x10
     87c:	8241                	srli	a2,a2,0x10
     87e:	82c1                	srli	a3,a3,0x10
     880:	3655                	jal	424 <tft_set_window>
        _buffer[sz++] = color;
     882:	00141593          	slli	a1,s0,0x1
    tft_send_DMA(_buffer, sz, height);
    END_WRITE();
}
     886:	4412                	lw	s0,4(sp)
     888:	40a2                	lw	ra,8(sp)
    tft_send_DMA(_buffer, sz, height);
     88a:	8626                	mv	a2,s1
}
     88c:	4482                	lw	s1,0(sp)
    tft_send_DMA(_buffer, sz, height);
     88e:	05c2                	slli	a1,a1,0x10
     890:	81c1                	srli	a1,a1,0x10
     892:	cf018513          	addi	a0,gp,-784 # 200000ec <_buffer>
}
     896:	0131                	addi	sp,sp,12
    tft_send_DMA(_buffer, sz, height);
     898:	be05                	j	3c8 <tft_send_DMA>

0000089a <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     89a:	400057b7          	lui	a5,0x40005
     89e:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     8a2:	40078793          	addi	a5,a5,1024
     8a6:	10077713          	andi	a4,a4,256
     8aa:	cf09                	beqz	a4,8c4 <i2c_error+0x2a>
     8ac:	0147d703          	lhu	a4,20(a5)
     8b0:	4505                	li	a0,1
     8b2:	0742                	slli	a4,a4,0x10
     8b4:	8341                	srli	a4,a4,0x10
     8b6:	eff77713          	andi	a4,a4,-257
     8ba:	0742                	slli	a4,a4,0x10
     8bc:	8341                	srli	a4,a4,0x10
     8be:	00e79a23          	sh	a4,20(a5)
     8c2:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     8c4:	0147d703          	lhu	a4,20(a5)
     8c8:	40077713          	andi	a4,a4,1024
     8cc:	cf09                	beqz	a4,8e6 <i2c_error+0x4c>
     8ce:	0147d703          	lhu	a4,20(a5)
     8d2:	4509                	li	a0,2
     8d4:	0742                	slli	a4,a4,0x10
     8d6:	8341                	srli	a4,a4,0x10
     8d8:	bff77713          	andi	a4,a4,-1025
     8dc:	0742                	slli	a4,a4,0x10
     8de:	8341                	srli	a4,a4,0x10
     8e0:	00e79a23          	sh	a4,20(a5)
     8e4:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     8e6:	0147d703          	lhu	a4,20(a5)
     8ea:	20077713          	andi	a4,a4,512
     8ee:	cf09                	beqz	a4,908 <i2c_error+0x6e>
     8f0:	0147d703          	lhu	a4,20(a5)
     8f4:	450d                	li	a0,3
     8f6:	0742                	slli	a4,a4,0x10
     8f8:	8341                	srli	a4,a4,0x10
     8fa:	dff77713          	andi	a4,a4,-513
     8fe:	0742                	slli	a4,a4,0x10
     900:	8341                	srli	a4,a4,0x10
     902:	00e79a23          	sh	a4,20(a5)
     906:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     908:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     90c:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     90e:	832d                	srli	a4,a4,0xb
     910:	8b05                	andi	a4,a4,1
     912:	cf01                	beqz	a4,92a <i2c_error+0x90>
     914:	0147d703          	lhu	a4,20(a5)
     918:	76fd                	lui	a3,0xfffff
     91a:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     91e:	0742                	slli	a4,a4,0x10
     920:	8341                	srli	a4,a4,0x10
     922:	8f75                	and	a4,a4,a3
     924:	00e79a23          	sh	a4,20(a5)
     928:	4511                	li	a0,4
}
     92a:	8082                	ret

0000092c <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     92c:	1151                	addi	sp,sp,-12
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     92e:	6789                	lui	a5,0x2
{
     930:	c222                	sw	s0,4(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     932:	71078793          	addi	a5,a5,1808 # 2710 <font+0x138>
{
     936:	c026                	sw	s1,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     938:	c6f1ae23          	sw	a5,-900(gp) # 20000078 <_i2c_timeout>
{
     93c:	c406                	sw	ra,8(sp)
     93e:	84aa                	mv	s1,a0
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     940:	4681                	li	a3,0
     942:	c7c18413          	addi	s0,gp,-900 # 20000078 <_i2c_timeout>
     946:	40005637          	lui	a2,0x40005
     94a:	41865703          	lhu	a4,1048(a2) # 40005418 <_eusrstack+0x20004c18>
     94e:	8b09                	andi	a4,a4,2
     950:	e709                	bnez	a4,95a <i2c_ping+0x2e>
     952:	c291                	beqz	a3,956 <i2c_ping+0x2a>
     954:	c01c                	sw	a5,0(s0)
	i2c_err_t i2c_ret = I2C_OK;
     956:	4501                	li	a0,0
     958:	a809                	j	96a <i2c_ping+0x3e>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     95a:	17fd                	addi	a5,a5,-1
     95c:	4685                	li	a3,1
     95e:	f7f5                	bnez	a5,94a <i2c_ping+0x1e>
     960:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
     964:	3f1d                	jal	89a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     966:	e111                	bnez	a0,96a <i2c_ping+0x3e>
     968:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     96a:	40005737          	lui	a4,0x40005
     96e:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     972:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     976:	07c2                	slli	a5,a5,0x10
     978:	83c1                	srli	a5,a5,0x10
     97a:	1007e793          	ori	a5,a5,256
     97e:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     982:	00030737          	lui	a4,0x30
     986:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     988:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     98c:	01079613          	slli	a2,a5,0x10
     990:	4185d783          	lhu	a5,1048(a1)
     994:	8241                	srli	a2,a2,0x10
     996:	07c2                	slli	a5,a5,0x10
     998:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     99a:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     99c:	fee796e3          	bne	a5,a4,988 <i2c_ping+0x5c>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     9a0:	e531                	bnez	a0,9ec <i2c_ping+0xc0>
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     9a2:	0486                	slli	s1,s1,0x1
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     9a4:	6789                	lui	a5,0x2
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     9a6:	40959823          	sh	s1,1040(a1)
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     9aa:	71078793          	addi	a5,a5,1808 # 2710 <font+0x138>
	return (status & status_mask) == status_mask; 
     9ae:	000706b7          	lui	a3,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     9b2:	c01c                	sw	a5,0(s0)
     9b4:	4581                	li	a1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     9b6:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     9ba:	08268693          	addi	a3,a3,130 # 70082 <lib_i2c.c.bfb73fe7+0x6605e>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     9be:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     9c2:	01071613          	slli	a2,a4,0x10
     9c6:	41835703          	lhu	a4,1048(t1)
     9ca:	8241                	srli	a2,a2,0x10
     9cc:	0742                	slli	a4,a4,0x10
     9ce:	8f51                	or	a4,a4,a2
	return (status & status_mask) == status_mask; 
     9d0:	8f75                	and	a4,a4,a3
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     9d2:	00d71563          	bne	a4,a3,9dc <i2c_ping+0xb0>
     9d6:	c999                	beqz	a1,9ec <i2c_ping+0xc0>
     9d8:	c01c                	sw	a5,0(s0)
     9da:	a809                	j	9ec <i2c_ping+0xc0>
     9dc:	17fd                	addi	a5,a5,-1
     9de:	4585                	li	a1,1
     9e0:	fff9                	bnez	a5,9be <i2c_ping+0x92>
     9e2:	00042023          	sw	zero,0(s0)
	i2c_err_t i2c_err = i2c_error();
     9e6:	3d55                	jal	89a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     9e8:	e111                	bnez	a0,9ec <i2c_ping+0xc0>
     9ea:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     9ec:	40005737          	lui	a4,0x40005
     9f0:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     9f4:	40a2                	lw	ra,8(sp)
     9f6:	4412                	lw	s0,4(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     9f8:	07c2                	slli	a5,a5,0x10
     9fa:	83c1                	srli	a5,a5,0x10
     9fc:	2007e793          	ori	a5,a5,512
     a00:	40f71023          	sh	a5,1024(a4)
}
     a04:	4482                	lw	s1,0(sp)
     a06:	0131                	addi	sp,sp,12
     a08:	8082                	ret

00000a0a <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     a0a:	e00007b7          	lui	a5,0xe0000
     a0e:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
}
     a12:	8082                	ret

00000a14 <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     a14:	e0000737          	lui	a4,0xe0000
     a18:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     a1c:	1111                	addi	sp,sp,-28
     a1e:	cc06                	sw	ra,24(sp)
     a20:	ca22                	sw	s0,20(sp)
     a22:	c826                	sw	s1,16(sp)
     a24:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     a26:	0c07f793          	andi	a5,a5,192
     a2a:	0c000693          	li	a3,192
     a2e:	0cd78863          	beq	a5,a3,afe <_write.constprop.0+0xea>
	char buffer[4] = { 0 };
     a32:	c602                	sw	zero,12(sp)
     a34:	842e                	mv	s0,a1
	if( size == 0 )
     a36:	e5f1                	bnez	a1,b02 <_write.constprop.0+0xee>
		lastdmd = (*DMDATA0);
     a38:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     a3c:	c789                	beqz	a5,a46 <_write.constprop.0+0x32>
     a3e:	0807f793          	andi	a5,a5,128
     a42:	e391                	bnez	a5,a46 <_write.constprop.0+0x32>
     a44:	37d9                	jal	a0a <internal_handle_input.constprop.0>
}
     a46:	40e2                	lw	ra,24(sp)
     a48:	8522                	mv	a0,s0
     a4a:	4452                	lw	s0,20(sp)
     a4c:	44c2                	lw	s1,16(sp)
     a4e:	0171                	addi	sp,sp,28
     a50:	8082                	ret
		int tosend = size - place;
     a52:	409405b3          	sub	a1,s0,s1
     a56:	469d                	li	a3,7
     a58:	872e                	mv	a4,a1
     a5a:	00b6d363          	bge	a3,a1,a60 <_write.constprop.0+0x4c>
     a5e:	471d                	li	a4,7
     a60:	001006b7          	lui	a3,0x100
     a64:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     a66:	e0000537          	lui	a0,0xe0000
     a6a:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     a6e:	0f450313          	addi	t1,a0,244
     a72:	08067293          	andi	t0,a2,128
     a76:	06029c63          	bnez	t0,aee <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     a7a:	c611                	beqz	a2,a86 <_write.constprop.0+0x72>
     a7c:	c43a                	sw	a4,8(sp)
     a7e:	c22e                	sw	a1,4(sp)
     a80:	3769                	jal	a0a <internal_handle_input.constprop.0>
     a82:	4722                	lw	a4,8(sp)
     a84:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     a86:	4689                	li	a3,2
     a88:	4601                	li	a2,0
     a8a:	00b6d463          	bge	a3,a1,a92 <_write.constprop.0+0x7e>
     a8e:	ffd70613          	addi	a2,a4,-3
     a92:	4782                	lw	a5,0(sp)
     a94:	00348593          	addi	a1,s1,3
     a98:	0068                	addi	a0,sp,12
     a9a:	95be                	add	a1,a1,a5
     a9c:	c23a                	sw	a4,4(sp)
     a9e:	23ad                	jal	1008 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     aa0:	4632                	lw	a2,12(sp)
     aa2:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     aa4:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     aa6:	e00006b7          	lui	a3,0xe0000
     aaa:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     aae:	458d                	li	a1,3
     ab0:	00978633          	add	a2,a5,s1
		t = 0;
     ab4:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     ab6:	00064303          	lbu	t1,0(a2)
     aba:	0685                	addi	a3,a3,1
     abc:	007c                	addi	a5,sp,12
     abe:	00d78533          	add	a0,a5,a3
     ac2:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     ac6:	00d70563          	beq	a4,a3,ad0 <_write.constprop.0+0xbc>
     aca:	0605                	addi	a2,a2,1
     acc:	feb695e3          	bne	a3,a1,ab6 <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     ad0:	00470693          	addi	a3,a4,4
     ad4:	f806e693          	ori	a3,a3,-128
     ad8:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     adc:	4632                	lw	a2,12(sp)
     ade:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     ae2:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     ae4:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     ae8:	f684c5e3          	blt	s1,s0,a52 <_write.constprop.0+0x3e>
     aec:	bfa9                	j	a46 <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     aee:	16fd                	addi	a3,a3,-1
     af0:	fead                	bnez	a3,a6a <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     af2:	00032783          	lw	a5,0(t1)
     af6:	0c07e793          	ori	a5,a5,192
     afa:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     afe:	4401                	li	s0,0
     b00:	b799                	j	a46 <_write.constprop.0+0x32>
	if( size == 0 )
     b02:	4481                	li	s1,0
     b04:	b7d5                	j	ae8 <_write.constprop.0+0xd4>

00000b06 <__puts_uart>:
{
     b06:	1151                	addi	sp,sp,-12
     b08:	c222                	sw	s0,4(sp)
     b0a:	c406                	sw	ra,8(sp)
     b0c:	842e                	mv	s0,a1
	_write( 0, s, len );
     b0e:	3719                	jal	a14 <_write.constprop.0>
}
     b10:	40a2                	lw	ra,8(sp)
     b12:	8522                	mv	a0,s0
     b14:	4412                	lw	s0,4(sp)
     b16:	0131                	addi	sp,sp,12
     b18:	8082                	ret

00000b1a <handle_reset>:
	asm volatile( "\n\
     b1a:	20000197          	auipc	gp,0x20000
     b1e:	8e218193          	addi	gp,gp,-1822 # 200003fc <__global_pointer$>
     b22:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     b26:	6509                	lui	a0,0x2
     b28:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x66a>
     b2c:	30051073          	csrw	mstatus,a0
     b30:	468d                	li	a3,3
     b32:	fffff517          	auipc	a0,0xfffff
     b36:	4ce50513          	addi	a0,a0,1230 # 0 <InterruptVector>
     b3a:	8d55                	or	a0,a0,a3
     b3c:	30551073          	csrw	mtvec,a0
asm volatile(
     b40:	c6818513          	addi	a0,gp,-920 # 20000064 <DC_PIN2>
     b44:	3bc18593          	addi	a1,gp,956 # 200007b8 <_ebss>
     b48:	4601                	li	a2,0
     b4a:	00b55663          	bge	a0,a1,b56 <handle_reset+0x3c>
     b4e:	c110                	sw	a2,0(a0)
     b50:	0511                	addi	a0,a0,4
     b52:	feb54ee3          	blt	a0,a1,b4e <handle_reset+0x34>
     b56:	00002517          	auipc	a0,0x2
     b5a:	f9e50513          	addi	a0,a0,-98 # 2af4 <_data_lma>
     b5e:	c0418593          	addi	a1,gp,-1020 # 20000000 <dev_aht21>
     b62:	1ffff617          	auipc	a2,0x1ffff
     b66:	50260613          	addi	a2,a2,1282 # 20000064 <DC_PIN2>
     b6a:	00c58863          	beq	a1,a2,b7a <handle_reset+0x60>
     b6e:	4114                	lw	a3,0(a0)
     b70:	c194                	sw	a3,0(a1)
     b72:	0511                	addi	a0,a0,4
     b74:	0591                	addi	a1,a1,4
     b76:	fec59ae3          	bne	a1,a2,b6a <handle_reset+0x50>
	SysTick->CTLR = 5;
     b7a:	e000f7b7          	lui	a5,0xe000f
     b7e:	4715                	li	a4,5
     b80:	c398                	sw	a4,0(a5)
asm volatile(
     b82:	6785                	lui	a5,0x1
     b84:	21678793          	addi	a5,a5,534 # 1216 <main>
     b88:	34179073          	csrw	mepc,a5
     b8c:	30200073          	mret

00000b90 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     b90:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     b94:	e68ff0ef          	jal	ra,1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     b98:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     b9c:	e60ff0ef          	jal	ra,1fc <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     ba0:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     ba4:	e58ff0ef          	jal	ra,1fc <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     ba8:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     bac:	e50ff0ef          	jal	ra,1fc <PrintHex>
	while( (*DMDATA0) & 0x80 );
     bb0:	e0000737          	lui	a4,0xe0000
     bb4:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     bb8:	0f470693          	addi	a3,a4,244
     bbc:	0807f793          	andi	a5,a5,128
     bc0:	fbf5                	bnez	a5,bb4 <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     bc2:	6785                	lui	a5,0x1
     bc4:	a8578793          	addi	a5,a5,-1403 # a85 <_write.constprop.0+0x71>
     bc8:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     bca:	e0000737          	lui	a4,0xe0000
     bce:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     bd2:	0f470693          	addi	a3,a4,244
     bd6:	0807f793          	andi	a5,a5,128
     bda:	fbf5                	bnez	a5,bce <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     bdc:	aaaab7b7          	lui	a5,0xaaaab
     be0:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     be4:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     be6:	a001                	j	be6 <ADC1_2_IRQHandler+0x56>

00000be8 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     be8:	40021737          	lui	a4,0x40021
     bec:	471c                	lw	a5,8(a4)
     bee:	008006b7          	lui	a3,0x800
     bf2:	8fd5                	or	a5,a5,a3
     bf4:	c71c                	sw	a5,8(a4)

00000bf6 <strlen>:
{
     bf6:	87aa                	mv	a5,a0
	for (; *s; s++);
     bf8:	0007c703          	lbu	a4,0(a5)
     bfc:	e701                	bnez	a4,c04 <strlen+0xe>
}
     bfe:	40a78533          	sub	a0,a5,a0
     c02:	8082                	ret
	for (; *s; s++);
     c04:	0785                	addi	a5,a5,1
     c06:	bfcd                	j	bf8 <strlen+0x2>

00000c08 <mini_vpprintf>:
{
     c08:	fa410113          	addi	sp,sp,-92
     c0c:	c8a6                	sw	s1,80(sp)
     c0e:	cc86                	sw	ra,88(sp)
     c10:	caa2                	sw	s0,84(sp)
     c12:	c02a                	sw	a0,0(sp)
     c14:	c22e                	sw	a1,4(sp)
     c16:	84b2                	mv	s1,a2
     c18:	87b6                	mv	a5,a3
	int n = 0;
     c1a:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     c1c:	0004c703          	lbu	a4,0(s1)
     c20:	00148413          	addi	s0,s1,1
     c24:	00e10fa3          	sb	a4,31(sp)
     c28:	eb01                	bnez	a4,c38 <mini_vpprintf+0x30>
}
     c2a:	40e6                	lw	ra,88(sp)
     c2c:	4456                	lw	s0,84(sp)
     c2e:	4542                	lw	a0,16(sp)
     c30:	44c6                	lw	s1,80(sp)
     c32:	05c10113          	addi	sp,sp,92
     c36:	8082                	ret
		if (ch!='%') {
     c38:	02500693          	li	a3,37
     c3c:	00d70f63          	beq	a4,a3,c5a <mini_vpprintf+0x52>
     c40:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     c42:	4612                	lw	a2,4(sp)
     c44:	4782                	lw	a5,0(sp)
     c46:	4585                	li	a1,1
     c48:	01f10513          	addi	a0,sp,31
     c4c:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     c4e:	84a2                	mv	s1,s0
		n = n + len;
     c50:	47c2                	lw	a5,16(sp)
     c52:	97aa                	add	a5,a5,a0
     c54:	c83e                	sw	a5,16(sp)
     c56:	47a2                	lw	a5,8(sp)
     c58:	b7d1                	j	c1c <mini_vpprintf+0x14>
			ch=*(fmt++);
     c5a:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     c5e:	03000613          	li	a2,48
			ch=*(fmt++);
     c62:	00248713          	addi	a4,s1,2
     c66:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     c6a:	03000413          	li	s0,48
     c6e:	08c69063          	bne	a3,a2,cee <mini_vpprintf+0xe6>
				ch=*(fmt++);
     c72:	84ba                	mv	s1,a4
     c74:	4601                	li	a2,0
     c76:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     c78:	4525                	li	a0,9
     c7a:	a811                	j	c8e <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     c7c:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     c80:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     c82:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     c84:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     c88:	0706                	slli	a4,a4,0x1
     c8a:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     c8c:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     c8e:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.bfb73fe7+0x7f5fac>
     c92:	0ff5f313          	andi	t1,a1,255
     c96:	fe6573e3          	bgeu	a0,t1,c7c <mini_vpprintf+0x74>
     c9a:	c219                	beqz	a2,ca0 <mini_vpprintf+0x98>
     c9c:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     ca0:	c63a                	sw	a4,12(sp)
     ca2:	4661                	li	a2,24
     ca4:	00e65363          	bge	a2,a4,caa <mini_vpprintf+0xa2>
     ca8:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     caa:	06c00593          	li	a1,108
			char l = 0;
     cae:	4601                	li	a2,0
			if (ch == 'l') {
     cb0:	00b69863          	bne	a3,a1,cc0 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     cb4:	0004c683          	lbu	a3,0(s1)
				l = 1;
     cb8:	4605                	li	a2,1
				ch=*(fmt++);
     cba:	0485                	addi	s1,s1,1
     cbc:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     cc0:	01f14683          	lbu	a3,31(sp)
     cc4:	06400593          	li	a1,100
     cc8:	06b68363          	beq	a3,a1,d2e <mini_vpprintf+0x126>
     ccc:	02d5e463          	bltu	a1,a3,cf4 <mini_vpprintf+0xec>
     cd0:	05800713          	li	a4,88
     cd4:	0ae68263          	beq	a3,a4,d78 <mini_vpprintf+0x170>
     cd8:	06300713          	li	a4,99
     cdc:	0ce68063          	beq	a3,a4,d9c <mini_vpprintf+0x194>
     ce0:	d6a9                	beqz	a3,c2a <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     ce2:	4612                	lw	a2,4(sp)
     ce4:	c43e                	sw	a5,8(sp)
     ce6:	4585                	li	a1,1
     ce8:	01f10513          	addi	a0,sp,31
     cec:	a88d                	j	d5e <mini_vpprintf+0x156>
			char pad_char = ' ';
     cee:	02000413          	li	s0,32
     cf2:	b741                	j	c72 <mini_vpprintf+0x6a>
			switch (ch) {
     cf4:	07500593          	li	a1,117
     cf8:	02b68b63          	beq	a3,a1,d2e <mini_vpprintf+0x126>
     cfc:	07800613          	li	a2,120
     d00:	06c68c63          	beq	a3,a2,d78 <mini_vpprintf+0x170>
     d04:	07300613          	li	a2,115
     d08:	fcc69de3          	bne	a3,a2,ce2 <mini_vpprintf+0xda>
     d0c:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     d0e:	00478713          	addi	a4,a5,4
     d12:	439c                	lw	a5,0(a5)
     d14:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     d16:	853e                	mv	a0,a5
     d18:	ca3e                	sw	a5,20(sp)
     d1a:	3df1                	jal	bf6 <strlen>
					if (pad_to > 0) {
     d1c:	4762                	lw	a4,24(sp)
     d1e:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     d20:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     d22:	cb51                	beqz	a4,db6 <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     d24:	46b2                	lw	a3,12(sp)
     d26:	1838                	addi	a4,sp,56
     d28:	8622                	mv	a2,s0
     d2a:	853e                	mv	a0,a5
     d2c:	a025                	j	d54 <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     d2e:	00478713          	addi	a4,a5,4
     d32:	c43a                	sw	a4,8(sp)
					if(l) {
     d34:	ca05                	beqz	a2,d64 <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     d36:	f8b68693          	addi	a3,a3,-117
     d3a:	1018                	addi	a4,sp,32
     d3c:	0016b693          	seqz	a3,a3
     d40:	4388                	lw	a0,0(a5)
     d42:	4601                	li	a2,0
     d44:	45a9                	li	a1,10
     d46:	d24ff0ef          	jal	ra,26a <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     d4a:	46b2                	lw	a3,12(sp)
     d4c:	1838                	addi	a4,sp,56
     d4e:	8622                	mv	a2,s0
     d50:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     d52:	1008                	addi	a0,sp,32
     d54:	bcaff0ef          	jal	ra,11e <mini_pad>
					len = puts(bf, len, buf);
     d58:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     d5a:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     d5c:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     d5e:	4782                	lw	a5,0(sp)
     d60:	9782                	jalr	a5
					break;
     d62:	b5fd                	j	c50 <mini_vpprintf+0x48>
						if(ch == 'u') {
     d64:	07500713          	li	a4,117
     d68:	00e69563          	bne	a3,a4,d72 <mini_vpprintf+0x16a>
	if (radix > 16)
     d6c:	1018                	addi	a4,sp,32
     d6e:	4685                	li	a3,1
     d70:	bfc1                	j	d40 <mini_vpprintf+0x138>
     d72:	1018                	addi	a4,sp,32
     d74:	4681                	li	a3,0
     d76:	b7e9                	j	d40 <mini_vpprintf+0x138>
					if(l) {
     d78:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     d7a:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     d7e:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     d82:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     d84:	4685                	li	a3,1
     d86:	1018                	addi	a4,sp,32
     d88:	00163613          	seqz	a2,a2
     d8c:	45c1                	li	a1,16
     d8e:	cdcff0ef          	jal	ra,26a <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     d92:	46b2                	lw	a3,12(sp)
     d94:	85aa                	mv	a1,a0
     d96:	1838                	addi	a4,sp,56
     d98:	8622                	mv	a2,s0
     d9a:	bf65                	j	d52 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     d9c:	00478713          	addi	a4,a5,4
     da0:	439c                	lw	a5,0(a5)
     da2:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     da4:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     da6:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     daa:	1838                	addi	a4,sp,56
     dac:	8622                	mv	a2,s0
     dae:	4585                	li	a1,1
     db0:	01f10513          	addi	a0,sp,31
     db4:	b745                	j	d54 <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     db6:	4612                	lw	a2,4(sp)
     db8:	853e                	mv	a0,a5
     dba:	b755                	j	d5e <mini_vpprintf+0x156>

00000dbc <printf>:
{
     dbc:	fdc10113          	addi	sp,sp,-36
     dc0:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     dc2:	862a                	mv	a2,a0
     dc4:	6505                	lui	a0,0x1
{
     dc6:	c82e                	sw	a1,16(sp)
     dc8:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     dca:	4581                	li	a1,0
	va_start( args, format );
     dcc:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     dce:	b0650513          	addi	a0,a0,-1274 # b06 <__puts_uart>
{
     dd2:	c606                	sw	ra,12(sp)
     dd4:	ce3a                	sw	a4,28(sp)
     dd6:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     dd8:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     dda:	353d                	jal	c08 <mini_vpprintf>
}
     ddc:	40b2                	lw	ra,12(sp)
     dde:	02410113          	addi	sp,sp,36
     de2:	8082                	ret

00000de4 <ssd1306_i2c_error>:
/*
* error handler
*/
uint8_t ssd1306_i2c_error(uint8_t err) {
	// report error
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     de4:	00251793          	slli	a5,a0,0x2
     de8:	6509                	lui	a0,0x2
     dea:	5c450513          	addi	a0,a0,1476 # 25c4 <errstr>
     dee:	953e                	add	a0,a0,a5
     df0:	410c                	lw	a1,0(a0)
     df2:	6509                	lui	a0,0x2
uint8_t ssd1306_i2c_error(uint8_t err) {
     df4:	1151                	addi	sp,sp,-12
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     df6:	26c50513          	addi	a0,a0,620 # 226c <DMA1_Channel3_IRQHandler+0x7c>
uint8_t ssd1306_i2c_error(uint8_t err) {
     dfa:	c406                	sw	ra,8(sp)
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     dfc:	37c1                	jal	dbc <printf>
	RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
     dfe:	400217b7          	lui	a5,0x40021
     e02:	4b98                	lw	a4,16(a5)
     e04:	002006b7          	lui	a3,0x200
	ssd1306_i2c_setup();	// reset & initialize I2C
	return 1;
}
     e08:	40a2                	lw	ra,8(sp)
	RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
     e0a:	8f55                	or	a4,a4,a3
     e0c:	cb98                	sw	a4,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     e0e:	4b98                	lw	a4,16(a5)
     e10:	ffe006b7          	lui	a3,0xffe00
     e14:	16fd                	addi	a3,a3,-1
     e16:	8f75                	and	a4,a4,a3
     e18:	cb98                	sw	a4,16(a5)
	tempreg = I2C1->CTLR2;
     e1a:	40005737          	lui	a4,0x40005
     e1e:	40475783          	lhu	a5,1028(a4) # 40005404 <_eusrstack+0x20004c04>
}
     e22:	4505                	li	a0,1
	tempreg = I2C1->CTLR2;
     e24:	07c2                	slli	a5,a5,0x10
     e26:	83c1                	srli	a5,a5,0x10
	tempreg &= ~I2C_CTLR2_FREQ;
     e28:	fc07f793          	andi	a5,a5,-64
	tempreg |= (FUNCONF_SYSTEM_CORE_CLOCK/SSD1306_I2C_PRERATE)&I2C_CTLR2_FREQ;
     e2c:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = tempreg;
     e30:	40f71223          	sh	a5,1028(a4)
	I2C1->CKCFGR = tempreg;
     e34:	77f1                	lui	a5,0xffffc
     e36:	0785                	addi	a5,a5,1
     e38:	40f71e23          	sh	a5,1052(a4)
	I2C1->CTLR1 |= I2C_CTLR1_PE;
     e3c:	40075783          	lhu	a5,1024(a4)
     e40:	07c2                	slli	a5,a5,0x10
     e42:	83c1                	srli	a5,a5,0x10
     e44:	0017e793          	ori	a5,a5,1
     e48:	40f71023          	sh	a5,1024(a4)
	I2C1->CTLR1 |= I2C_CTLR1_ACK;
     e4c:	40075783          	lhu	a5,1024(a4)
     e50:	07c2                	slli	a5,a5,0x10
     e52:	83c1                	srli	a5,a5,0x10
     e54:	4007e793          	ori	a5,a5,1024
     e58:	40f71023          	sh	a5,1024(a4)
}
     e5c:	0131                	addi	sp,sp,12
     e5e:	8082                	ret

00000e60 <ssd1306_i2c_send.constprop.0>:
}
#else
/*
* low-level packet send for blocking polled operation via i2c
*/
uint8_t ssd1306_i2c_send(uint8_t addr, const uint8_t *data, int sz) {
     e60:	67e1                	lui	a5,0x18
     e62:	6a178793          	addi	a5,a5,1697 # 186a1 <lib_i2c.c.bfb73fe7+0xe67d>
	int32_t timeout;
	
	// wait for not busy
	timeout = TIMEOUT_MAX;
	while((I2C1->STAR2 & I2C_STAR2_BUSY) && (timeout--));
     e66:	40005637          	lui	a2,0x40005
     e6a:	41865683          	lhu	a3,1048(a2) # 40005418 <_eusrstack+0x20004c18>
     e6e:	40060713          	addi	a4,a2,1024
     e72:	8a89                	andi	a3,a3,2
     e74:	c6c5                	beqz	a3,f1c <ssd1306_i2c_send.constprop.0+0xbc>
     e76:	17fd                	addi	a5,a5,-1
     e78:	fbed                	bnez	a5,e6a <ssd1306_i2c_send.constprop.0+0xa>
	if(timeout==-1) return ssd1306_i2c_error(0);
     e7a:	4501                	li	a0,0
     e7c:	a005                	j	e9c <ssd1306_i2c_send.constprop.0+0x3c>
	// send 7-bit address + write flag
	I2C1->DATAR = addr<<1;

	// wait for transmit condition
	timeout = TIMEOUT_MAX;
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     e7e:	177d                	addi	a4,a4,-1
     e80:	e331                	bnez	a4,ec4 <ssd1306_i2c_send.constprop.0+0x64>
	if(timeout==-1) return ssd1306_i2c_error(2);
     e82:	4509                	li	a0,2
     e84:	a821                	j	e9c <ssd1306_i2c_send.constprop.0+0x3c>

	// send data one byte at a time
	while(sz--) {
     e86:	873e                	mv	a4,a5
		// wait for TX Empty
		timeout = TIMEOUT_MAX;
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     e88:	41435683          	lhu	a3,1044(t1)
     e8c:	40030613          	addi	a2,t1,1024
     e90:	0806f693          	andi	a3,a3,128
     e94:	e689                	bnez	a3,e9e <ssd1306_i2c_send.constprop.0+0x3e>
     e96:	177d                	addi	a4,a4,-1
     e98:	fb65                	bnez	a4,e88 <ssd1306_i2c_send.constprop.0+0x28>
		if(timeout==-1)
			return ssd1306_i2c_error(3);
     e9a:	450d                	li	a0,3
	if(timeout==-1) return ssd1306_i2c_error(0);
     e9c:	b7a1                	j	de4 <ssd1306_i2c_error>
		
		// send command
		I2C1->DATAR = *data++;
     e9e:	00054703          	lbu	a4,0(a0)
     ea2:	0505                	addi	a0,a0,1
     ea4:	00e61823          	sh	a4,16(a2)
     ea8:	a081                	j	ee8 <ssd1306_i2c_send.constprop.0+0x88>
	I2C1->DATAR = addr<<1;
     eaa:	07800793          	li	a5,120
     eae:	6761                	lui	a4,0x18
	return (status & event_mask) == event_mask;
     eb0:	000706b7          	lui	a3,0x70
	I2C1->DATAR = addr<<1;
     eb4:	00f61823          	sh	a5,16(a2)
     eb8:	6a170713          	addi	a4,a4,1697 # 186a1 <lib_i2c.c.bfb73fe7+0xe67d>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     ebc:	40005337          	lui	t1,0x40005
	return (status & event_mask) == event_mask;
     ec0:	08268693          	addi	a3,a3,130 # 70082 <lib_i2c.c.bfb73fe7+0x6605e>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     ec4:	41435783          	lhu	a5,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     ec8:	01079613          	slli	a2,a5,0x10
     ecc:	41835783          	lhu	a5,1048(t1)
     ed0:	8241                	srli	a2,a2,0x10
     ed2:	07c2                	slli	a5,a5,0x10
     ed4:	8fd1                	or	a5,a5,a2
	return (status & event_mask) == event_mask;
     ed6:	8ff5                	and	a5,a5,a3
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     ed8:	fad793e3          	bne	a5,a3,e7e <ssd1306_i2c_send.constprop.0+0x1e>
     edc:	67e1                	lui	a5,0x18
     ede:	95aa                	add	a1,a1,a0
     ee0:	6a178793          	addi	a5,a5,1697 # 186a1 <lib_i2c.c.bfb73fe7+0xe67d>
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     ee4:	40005337          	lui	t1,0x40005
	while(sz--) {
     ee8:	f8b51fe3          	bne	a0,a1,e86 <ssd1306_i2c_send.constprop.0+0x26>
	return (status & event_mask) == event_mask;
     eec:	00070637          	lui	a2,0x70
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     ef0:	40005537          	lui	a0,0x40005
	return (status & event_mask) == event_mask;
     ef4:	08460613          	addi	a2,a2,132 # 70084 <lib_i2c.c.bfb73fe7+0x66060>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     ef8:	41455703          	lhu	a4,1044(a0) # 40005414 <_eusrstack+0x20004c14>
     efc:	40050693          	addi	a3,a0,1024
     f00:	01071593          	slli	a1,a4,0x10
     f04:	0186d703          	lhu	a4,24(a3)
     f08:	81c1                	srli	a1,a1,0x10
     f0a:	0742                	slli	a4,a4,0x10
     f0c:	8f4d                	or	a4,a4,a1
	return (status & event_mask) == event_mask;
     f0e:	8f71                	and	a4,a4,a2
	}

	// wait for tx complete
	timeout = TIMEOUT_MAX;
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (timeout--));
     f10:	04c70a63          	beq	a4,a2,f64 <ssd1306_i2c_send.constprop.0+0x104>
     f14:	17fd                	addi	a5,a5,-1
     f16:	f3ed                	bnez	a5,ef8 <ssd1306_i2c_send.constprop.0+0x98>
	if(timeout==-1) return ssd1306_i2c_error(4);
     f18:	4511                	li	a0,4
     f1a:	b749                	j	e9c <ssd1306_i2c_send.constprop.0+0x3c>
	I2C1->CTLR1 |= I2C_CTLR1_START;
     f1c:	00075783          	lhu	a5,0(a4)
	return (status & event_mask) == event_mask;
     f20:	000306b7          	lui	a3,0x30
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     f24:	400052b7          	lui	t0,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     f28:	07c2                	slli	a5,a5,0x10
     f2a:	83c1                	srli	a5,a5,0x10
     f2c:	1007e793          	ori	a5,a5,256
     f30:	00f71023          	sh	a5,0(a4)
     f34:	6761                	lui	a4,0x18
     f36:	6a170713          	addi	a4,a4,1697 # 186a1 <lib_i2c.c.bfb73fe7+0xe67d>
	return (status & event_mask) == event_mask;
     f3a:	0685                	addi	a3,a3,1
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     f3c:	4142d783          	lhu	a5,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     f40:	40028613          	addi	a2,t0,1024
     f44:	01079313          	slli	t1,a5,0x10
     f48:	01865783          	lhu	a5,24(a2)
     f4c:	01035313          	srli	t1,t1,0x10
     f50:	07c2                	slli	a5,a5,0x10
     f52:	0067e7b3          	or	a5,a5,t1
	return (status & event_mask) == event_mask;
     f56:	8ff5                	and	a5,a5,a3
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_MODE_SELECT)) && (timeout--));
     f58:	f4d789e3          	beq	a5,a3,eaa <ssd1306_i2c_send.constprop.0+0x4a>
     f5c:	177d                	addi	a4,a4,-1
     f5e:	ff79                	bnez	a4,f3c <ssd1306_i2c_send.constprop.0+0xdc>
	if(timeout==-1) return ssd1306_i2c_error(1);
     f60:	4505                	li	a0,1
     f62:	bf2d                	j	e9c <ssd1306_i2c_send.constprop.0+0x3c>

	// set STOP condition
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     f64:	0006d783          	lhu	a5,0(a3) # 30000 <lib_i2c.c.bfb73fe7+0x25fdc>
	return 0;
}
     f68:	4501                	li	a0,0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     f6a:	07c2                	slli	a5,a5,0x10
     f6c:	83c1                	srli	a5,a5,0x10
     f6e:	2007e793          	ori	a5,a5,512
     f72:	00f69023          	sh	a5,0(a3)
}
     f76:	8082                	ret

00000f78 <ssd1306_cmd>:
#endif

#endif

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     f78:	7179                	addi	sp,sp,-48
	uint8_t pkt[33];
	
	/* build command or data packets */
	if(cmd) {
		pkt[0] = 0;
		pkt[1] = *data;
     f7a:	00a100a3          	sb	a0,1(sp)
	}
	else{
		pkt[0] = 0x40;
		memcpy(&pkt[1], data, sz);
	}
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     f7e:	4589                	li	a1,2
     f80:	850a                	mv	a0,sp
     f82:	d606                	sw	ra,44(sp)
		pkt[0] = 0;
     f84:	00010023          	sb	zero,0(sp)
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     f88:	3de1                	jal	e60 <ssd1306_i2c_send.constprop.0>
	return ssd1306_pkt_send(&cmd, 1, 1);
}
     f8a:	50b2                	lw	ra,44(sp)
     f8c:	6145                	addi	sp,sp,48
     f8e:	8082                	ret

00000f90 <mini_vsnprintf>:
{
     f90:	1121                	addi	sp,sp,-24
     f92:	ca06                	sw	ra,20(sp)
     f94:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
     f96:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
     f98:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
     f9a:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
     f9c:	c185                	beqz	a1,fbc <mini_vsnprintf+0x2c>
     f9e:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
     fa0:	858a                	mv	a1,sp
     fa2:	e111                	bnez	a0,fa6 <mini_vsnprintf+0x16>
     fa4:	4581                	li	a1,0
     fa6:	1ba00513          	li	a0,442
     faa:	39b9                	jal	c08 <mini_vpprintf>
	if(buffer == (void*) 0) {
     fac:	c401                	beqz	s0,fb4 <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
     fae:	4512                	lw	a0,4(sp)
     fb0:	4782                	lw	a5,0(sp)
     fb2:	8d1d                	sub	a0,a0,a5
}
     fb4:	40d2                	lw	ra,20(sp)
     fb6:	4442                	lw	s0,16(sp)
     fb8:	0161                	addi	sp,sp,24
     fba:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
     fbc:	4401                	li	s0,0
     fbe:	b7dd                	j	fa4 <mini_vsnprintf+0x14>

00000fc0 <sprintf>:
{
     fc0:	1101                	addi	sp,sp,-32
     fc2:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fc4:	862e                	mv	a2,a1
     fc6:	800005b7          	lui	a1,0x80000
{
     fca:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fcc:	fff5c593          	not	a1,a1
	va_start( args, format );
     fd0:	0814                	addi	a3,sp,16
{
     fd2:	c606                	sw	ra,12(sp)
     fd4:	cc3a                	sw	a4,24(sp)
     fd6:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
     fd8:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
     fda:	3f5d                	jal	f90 <mini_vsnprintf>
}
     fdc:	40b2                	lw	ra,12(sp)
     fde:	6105                	addi	sp,sp,32
     fe0:	8082                	ret

00000fe2 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     fe2:	962a                	add	a2,a2,a0
     fe4:	87aa                	mv	a5,a0
     fe6:	00c79363          	bne	a5,a2,fec <memset+0xa>
     fea:	8082                	ret
     fec:	00b78023          	sb	a1,0(a5)
     ff0:	0785                	addi	a5,a5,1
     ff2:	bfd5                	j	fe6 <memset+0x4>

00000ff4 <strcpy>:
{
     ff4:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
     ff6:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
     ffa:	00e78023          	sb	a4,0(a5)
     ffe:	e311                	bnez	a4,1002 <strcpy+0xe>
}
    1000:	8082                	ret
	for (; (*d=*s); s++, d++);
    1002:	0585                	addi	a1,a1,1
    1004:	0785                	addi	a5,a5,1
    1006:	bfc5                	j	ff6 <strcpy+0x2>

00001008 <memcpy>:
{
    1008:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
    100a:	00f61363          	bne	a2,a5,1010 <memcpy+0x8>
}
    100e:	8082                	ret
	for (; n; n--) *d++ = *s++;
    1010:	00f58733          	add	a4,a1,a5
    1014:	00074683          	lbu	a3,0(a4)
    1018:	00f50733          	add	a4,a0,a5
    101c:	0785                	addi	a5,a5,1
    101e:	00d70023          	sb	a3,0(a4)
    1022:	b7e5                	j	100a <memcpy+0x2>

00001024 <ssd1306_data.isra.0>:

/* send OLED data packet (up to 32 bytes) */
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1024:	7179                	addi	sp,sp,-48
    1026:	d422                	sw	s0,40(sp)
		pkt[0] = 0x40;
    1028:	04000793          	li	a5,64
    102c:	842e                	mv	s0,a1
		memcpy(&pkt[1], data, sz);
    102e:	862e                	mv	a2,a1
    1030:	85aa                	mv	a1,a0
    1032:	00110513          	addi	a0,sp,1
    1036:	d606                	sw	ra,44(sp)
		pkt[0] = 0x40;
    1038:	00f10023          	sb	a5,0(sp)
		memcpy(&pkt[1], data, sz);
    103c:	37f1                	jal	1008 <memcpy>
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
    103e:	00140593          	addi	a1,s0,1
    1042:	850a                	mv	a0,sp
    1044:	3d31                	jal	e60 <ssd1306_i2c_send.constprop.0>
	return ssd1306_pkt_send(data, sz, 0);
}
    1046:	50b2                	lw	ra,44(sp)
    1048:	5422                	lw	s0,40(sp)
    104a:	6145                	addi	sp,sp,48
    104c:	8082                	ret

0000104e <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
    104e:	1151                	addi	sp,sp,-12
    1050:	c222                	sw	s0,4(sp)
    1052:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1054:	02100513          	li	a0,33
void ssd1306_print_str_at(
    1058:	c406                	sw	ra,8(sp)
    105a:	c026                	sw	s1,0(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
    105c:	3f31                	jal	f78 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    105e:	4501                	li	a0,0
    1060:	3f21                	jal	f78 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1062:	07f00513          	li	a0,127
    1066:	3f09                	jal	f78 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1068:	02200513          	li	a0,34
    106c:	3731                	jal	f78 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    106e:	8522                	mv	a0,s0
    1070:	3721                	jal	f78 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1072:	8522                	mv	a0,s0
    1074:	3711                	jal	f78 <ssd1306_cmd>
    1076:	4465                	li	s0,25
    1078:	3a818493          	addi	s1,gp,936 # 200007a4 <str_output>
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i<25; i++) {
		if (*str) {
    107c:	0004c783          	lbu	a5,0(s1)
    1080:	c78d                	beqz	a5,10aa <ssd1306_print_str_at.constprop.0+0x5c>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    1082:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    1084:	0ff7f793          	andi	a5,a5,255
    1088:	6709                	lui	a4,0x2
    108a:	00279693          	slli	a3,a5,0x2
    108e:	3a070513          	addi	a0,a4,928 # 23a0 <FONT_7x5>
    1092:	97b6                	add	a5,a5,a3
    1094:	4595                	li	a1,5
    1096:	953e                	add	a0,a0,a5
    1098:	3771                	jal	1024 <ssd1306_data.isra.0>
			str++;
    109a:	0485                	addi	s1,s1,1
	for (int i=0; i<25; i++) {
    109c:	147d                	addi	s0,s0,-1
    109e:	fc79                	bnez	s0,107c <ssd1306_print_str_at.constprop.0+0x2e>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
    10a0:	40a2                	lw	ra,8(sp)
    10a2:	4412                	lw	s0,4(sp)
    10a4:	4482                	lw	s1,0(sp)
    10a6:	0131                	addi	sp,sp,12
    10a8:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    10aa:	6789                	lui	a5,0x2
    10ac:	4595                	li	a1,5
    10ae:	3a078513          	addi	a0,a5,928 # 23a0 <FONT_7x5>
    10b2:	3f8d                	jal	1024 <ssd1306_data.isra.0>
    10b4:	b7e5                	j	109c <ssd1306_print_str_at.constprop.0+0x4e>

000010b6 <puts>:
{
    10b6:	1151                	addi	sp,sp,-12
    10b8:	c406                	sw	ra,8(sp)
    10ba:	c222                	sw	s0,4(sp)
    10bc:	c026                	sw	s1,0(sp)
    10be:	84aa                	mv	s1,a0
	int sl = strlen( s );
    10c0:	3e1d                	jal	bf6 <strlen>
    10c2:	842a                	mv	s0,a0
	_write(0, s, sl );
    10c4:	85aa                	mv	a1,a0
    10c6:	8526                	mv	a0,s1
    10c8:	94dff0ef          	jal	ra,a14 <_write.constprop.0>
	_write(0, "\n", 1 );
    10cc:	6509                	lui	a0,0x2
    10ce:	4585                	li	a1,1
    10d0:	29c50513          	addi	a0,a0,668 # 229c <DMA1_Channel3_IRQHandler+0xac>
    10d4:	941ff0ef          	jal	ra,a14 <_write.constprop.0>
}
    10d8:	40a2                	lw	ra,8(sp)
    10da:	00140513          	addi	a0,s0,1
    10de:	4412                	lw	s0,4(sp)
    10e0:	4482                	lw	s1,0(sp)
    10e2:	0131                	addi	sp,sp,12
    10e4:	8082                	ret

000010e6 <putchar>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    10e6:	e00007b7          	lui	a5,0xe0000
    10ea:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
    10ee:	0c000713          	li	a4,192
    10f2:	0c07f793          	andi	a5,a5,192
    10f6:	04e78d63          	beq	a5,a4,1150 <putchar+0x6a>
{
    10fa:	1151                	addi	sp,sp,-12
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    10fc:	001007b7          	lui	a5,0x100
{
    1100:	c222                	sw	s0,4(sp)
    1102:	c406                	sw	ra,8(sp)
    1104:	842a                	mv	s0,a0
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1106:	0785                	addi	a5,a5,1
	while( ( lastdmd = (*DMDATA0) ) & 0x80 )
    1108:	e00006b7          	lui	a3,0xe0000
    110c:	0f46a703          	lw	a4,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
    1110:	0f468613          	addi	a2,a3,244
    1114:	08077593          	andi	a1,a4,128
    1118:	e18d                	bnez	a1,113a <putchar+0x54>
	if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
    111a:	c319                	beqz	a4,1120 <putchar+0x3a>
    111c:	8efff0ef          	jal	ra,a0a <internal_handle_input.constprop.0>
	*DMDATA0 = 0x85 | ((const char)c<<8);
    1120:	6541                	lui	a0,0x10
    1122:	157d                	addi	a0,a0,-1
    1124:	00841793          	slli	a5,s0,0x8
    1128:	8fe9                	and	a5,a5,a0
    112a:	0857e793          	ori	a5,a5,133
    112e:	e0000737          	lui	a4,0xe0000
    1132:	0ef72a23          	sw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
	return 1;
    1136:	4505                	li	a0,1
    1138:	a801                	j	1148 <putchar+0x62>
		if( timeout-- == 0 )
    113a:	17fd                	addi	a5,a5,-1
    113c:	fbe1                	bnez	a5,110c <putchar+0x26>
			*DMDATA0 |= 0xc0;
    113e:	421c                	lw	a5,0(a2)
    1140:	4501                	li	a0,0
    1142:	0c07e793          	ori	a5,a5,192
    1146:	c21c                	sw	a5,0(a2)
}
    1148:	40a2                	lw	ra,8(sp)
    114a:	4412                	lw	s0,4(sp)
    114c:	0131                	addi	sp,sp,12
    114e:	8082                	ret
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
    1150:	4501                	li	a0,0
}
    1152:	8082                	ret

00001154 <i2c_scan_callback>:
	if (i2c_ping(0x3C) != I2C_OK) return;
	ssd1306_print_str_at(str, line, 0);
}

void i2c_scan_callback(const uint8_t addr) {
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    1154:	c525                	beqz	a0,11bc <i2c_scan_callback+0x68>
    1156:	07f00793          	li	a5,127
    115a:	862a                	mv	a2,a0
    115c:	06f50063          	beq	a0,a5,11bc <i2c_scan_callback+0x68>
void i2c_scan_callback(const uint8_t addr) {
    1160:	1151                	addi	sp,sp,-12
    1162:	c026                	sw	s1,0(sp)
	
	static int line = 1;
	sprintf(str_output, "I2C: 0x%02X", addr);
    1164:	6589                	lui	a1,0x2
    1166:	2a058593          	addi	a1,a1,672 # 22a0 <DMA1_Channel3_IRQHandler+0xb0>
    116a:	3a818513          	addi	a0,gp,936 # 200007a4 <str_output>
void i2c_scan_callback(const uint8_t addr) {
    116e:	c406                	sw	ra,8(sp)
    1170:	c222                	sw	s0,4(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    1172:	35b9                	jal	fc0 <sprintf>
	printf("%s\n", str_output);
    1174:	3a818513          	addi	a0,gp,936 # 200007a4 <str_output>
    1178:	3f3d                	jal	10b6 <puts>
	modI2C_display(str_output, line++);
    117a:	c1818793          	addi	a5,gp,-1000 # 20000014 <line.7>
    117e:	4380                	lw	s0,0(a5)
    1180:	00140713          	addi	a4,s0,1
    1184:	c398                	sw	a4,0(a5)
	if (line != 7) { printf(str); printf("\n"); }
    1186:	0ff47713          	andi	a4,s0,255
    118a:	479d                	li	a5,7
    118c:	00f70763          	beq	a4,a5,119a <i2c_scan_callback+0x46>
    1190:	3a818513          	addi	a0,gp,936 # 200007a4 <str_output>
    1194:	3125                	jal	dbc <printf>
    1196:	4529                	li	a0,10
    1198:	37b9                	jal	10e6 <putchar>
	if (i2c_ping(0x3C) != I2C_OK) return;
    119a:	03c00513          	li	a0,60
    119e:	f8eff0ef          	jal	ra,92c <i2c_ping>
    11a2:	e901                	bnez	a0,11b2 <i2c_scan_callback+0x5e>
	ssd1306_print_str_at(str, line, 0);
    11a4:	0ff47513          	andi	a0,s0,255
}
    11a8:	4412                	lw	s0,4(sp)
    11aa:	40a2                	lw	ra,8(sp)
    11ac:	4482                	lw	s1,0(sp)
    11ae:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    11b0:	bd79                	j	104e <ssd1306_print_str_at.constprop.0>
}
    11b2:	40a2                	lw	ra,8(sp)
    11b4:	4412                	lw	s0,4(sp)
    11b6:	4482                	lw	s1,0(sp)
    11b8:	0131                	addi	sp,sp,12
    11ba:	8082                	ret
    11bc:	8082                	ret

000011be <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    11be:	400227b7          	lui	a5,0x40022
    11c2:	4705                	li	a4,1
    11c4:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    11c6:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    11ca:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    11ce:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    11d2:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.bfb73fe7+0x107605d>
    11d6:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    11d8:	009f0737          	lui	a4,0x9f0
    11dc:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    11de:	020006b7          	lui	a3,0x2000
    11e2:	40021737          	lui	a4,0x40021
    11e6:	431c                	lw	a5,0(a4)
    11e8:	8ff5                	and	a5,a5,a3
    11ea:	dff5                	beqz	a5,11e6 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    11ec:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    11ee:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    11f2:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    11f4:	0027e793          	ori	a5,a5,2
    11f8:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    11fa:	4721                	li	a4,8
    11fc:	42dc                	lw	a5,4(a3)
    11fe:	8bb1                	andi	a5,a5,12
    1200:	fee79ee3          	bne	a5,a4,11fc <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    1204:	e00007b7          	lui	a5,0xe0000
    1208:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    120c:	08000713          	li	a4,128
    1210:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    1214:	8082                	ret

00001216 <main>:

#include "ST7735/modTFT.h"
#include "Storage/modStorage.h"

int main()
{
    1216:	f8c10113          	addi	sp,sp,-116
    121a:	d886                	sw	ra,112(sp)
    121c:	d6a2                	sw	s0,108(sp)
    121e:	d4a6                	sw	s1,104(sp)
    1220:	18c0                	addi	s0,sp,116
	uint32_t time_ref = 0;

	M_Encoder encoder_a = {0, 0, 0};
	M_Button button_a = {0xC0, BUTTON_IDLE, 0, 0, 0, 0, 0, 0};

	SystemInit();
    1222:	3f71                	jal	11be <SystemInit>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    1224:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1228:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    122a:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    122e:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.bfb73fe7+0x1b5b>
    1232:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    1234:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    1238:	c8818713          	addi	a4,gp,-888 # 20000084 <systick_millis>
    123c:	00072023          	sw	zero,0(a4)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    1240:	4398                	lw	a4,0(a5)
	systick_init();			//! required for millis()
	Delay_Ms(100);
    1242:	00494537          	lui	a0,0x494
    1246:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.bfb73fe7+0x489ddc>
    124a:	00776713          	ori	a4,a4,7
    124e:	c398                	sw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1250:	e000e7b7          	lui	a5,0xe000e
    1254:	6705                	lui	a4,0x1
    1256:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>
    125a:	ffbfe0ef          	jal	ra,254 <DelaySysTick>
*/


void modEncoder_setup(M_Encoder *model) {
	//! Enable GPIOC, TIM2, and AFIO *very important!*
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    125e:	40021737          	lui	a4,0x40021
    1262:	4f1c                	lw	a5,24(a4)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	// PD3 is T2CH1_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    1264:	7645                	lui	a2,0xffff1
    1266:	167d                	addi	a2,a2,-1
	RCC->APB2PCENR |= RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC;
    1268:	0317e793          	ori	a5,a5,49
    126c:	cf1c                	sw	a5,24(a4)
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    126e:	4f5c                	lw	a5,28(a4)
    1270:	0017e793          	ori	a5,a5,1
    1274:	cf5c                	sw	a5,28(a4)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
    1276:	400107b7          	lui	a5,0x40010
    127a:	43d4                	lw	a3,4(a5)
    127c:	c3d4                	sw	a3,4(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*3)); 					//clear old values
    127e:	400117b7          	lui	a5,0x40011
    1282:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    1286:	4394                	lw	a3,0(a5)
    1288:	8ef1                	and	a3,a3,a2
    128a:	c394                	sw	a3,0(a5)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*3); 		//set new ones
    128c:	4394                	lw	a3,0(a5)
    128e:	6621                	lui	a2,0x8
    1290:	8ed1                	or	a3,a3,a2
    1292:	c394                	sw	a3,0(a5)
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    1294:	47d4                	lw	a3,12(a5)

	// PD4 is T2CH2_, Input w/ Pullup/down
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    1296:	fff10637          	lui	a2,0xfff10
    129a:	167d                	addi	a2,a2,-1
	GPIOD->OUTDR |= 1<<2;							//1 = pull-up, 0 = pull-down
    129c:	0046e693          	ori	a3,a3,4
    12a0:	c7d4                	sw	a3,12(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*4)); 					//clear values
    12a2:	4394                	lw	a3,0(a5)
    12a4:	8ef1                	and	a3,a3,a2
    12a6:	c394                	sw	a3,0(a5)
	GPIOD->CFGLR |= (GPIO_CNF_IN_PUPD)<<(4*4); 		//set new ones
    12a8:	4394                	lw	a3,0(a5)
    12aa:	00080637          	lui	a2,0x80
    12ae:	8ed1                	or	a3,a3,a2
    12b0:	c394                	sw	a3,0(a5)
	GPIOD->OUTDR |= 1<<4;							//1 = pull-up, 0 = pull-down
    12b2:	47d4                	lw	a3,12(a5)
    12b4:	0106e693          	ori	a3,a3,16
    12b8:	c7d4                	sw	a3,12(a5)
	// //# added
	// GPIOC->CFGLR &= ~(0xf<<(4*0));
	// GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*0);

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    12ba:	4b1c                	lw	a5,16(a4)
    12bc:	0017e793          	ori	a5,a5,1
    12c0:	cb1c                	sw	a5,16(a4)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    12c2:	4b1c                	lw	a5,16(a4)
    12c4:	9bf9                	andi	a5,a5,-2
    12c6:	cb1c                	sw	a5,16(a4)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
    12c8:	400007b7          	lui	a5,0x40000
    12cc:	0087d703          	lhu	a4,8(a5) # 40000008 <_eusrstack+0x1ffff808>
    12d0:	0742                	slli	a4,a4,0x10
    12d2:	8341                	srli	a4,a4,0x10
    12d4:	00376713          	ori	a4,a4,3
    12d8:	00e79423          	sh	a4,8(a5)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
    12dc:	7765                	lui	a4,0xffff9
    12de:	177d                	addi	a4,a4,-1
    12e0:	02e79223          	sh	a4,36(a5)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
    12e4:	0147d703          	lhu	a4,20(a5)
    12e8:	0742                	slli	a4,a4,0x10
    12ea:	8341                	srli	a4,a4,0x10
    12ec:	00176713          	ori	a4,a4,1
    12f0:	00e79a23          	sh	a4,20(a5)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
    12f4:	0007d703          	lhu	a4,0(a5)
    12f8:	0742                	slli	a4,a4,0x10
    12fa:	8341                	srli	a4,a4,0x10
    12fc:	00176713          	ori	a4,a4,1
    1300:	00e79023          	sh	a4,0(a5)

	model->initial_count = TIM2->CNT;
    1304:	0247d703          	lhu	a4,36(a5)
	model->last_count = TIM2->CNT;
    1308:	0247d783          	lhu	a5,36(a5)
	if(dev->regb == 0) dev->regb = 1;
    130c:	c0418793          	addi	a5,gp,-1020 # 20000000 <dev_aht21>
    1310:	00a7c683          	lbu	a3,10(a5)
    1314:	c8818793          	addi	a5,gp,-888 # 20000084 <systick_millis>
    1318:	f8f42e23          	sw	a5,-100(s0)
    131c:	c0418713          	addi	a4,gp,-1020 # 20000000 <dev_aht21>
    1320:	4785                	li	a5,1
    1322:	c681                	beqz	a3,132a <main+0x114>
	if(dev->regb  > 4) dev->regb = 4;
    1324:	4791                	li	a5,4
    1326:	00d7f463          	bgeu	a5,a3,132e <main+0x118>
    132a:	00f70523          	sb	a5,10(a4) # ffff900a <_eusrstack+0xdfff880a>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    132e:	400217b7          	lui	a5,0x40021
    1332:	4b90                	lw	a2,16(a5)
    1334:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1338:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    133c:	8e49                	or	a2,a2,a0
    133e:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1340:	4b90                	lw	a2,16(a5)
    1342:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1344:	6485                	lui	s1,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1346:	8e6d                	and	a2,a2,a1
    1348:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    134a:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    134c:	fbc00637          	lui	a2,0xfbc00
    1350:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1352:	8ec9                	or	a3,a3,a0
    1354:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    1356:	4f94                	lw	a3,24(a5)
    1358:	0116e693          	ori	a3,a3,17
    135c:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    135e:	400107b7          	lui	a5,0x40010
    1362:	43d4                	lw	a3,4(a5)
    1364:	8ef1                	and	a3,a3,a2
    1366:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1368:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    136a:	767d                	lui	a2,0xfffff
    136c:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1370:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    1372:	400117b7          	lui	a5,0x40011
    1376:	4394                	lw	a3,0(a5)
    1378:	f0f6f693          	andi	a3,a3,-241
    137c:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    137e:	4394                	lw	a3,0(a5)
    1380:	0d06e693          	ori	a3,a3,208
    1384:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1386:	4394                	lw	a3,0(a5)
    1388:	8ef1                	and	a3,a3,a2
    138a:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    138c:	4394                	lw	a3,0(a5)
    138e:	d0048613          	addi	a2,s1,-768 # d00 <mini_vpprintf+0xf8>
    1392:	8ed1                	or	a3,a3,a2
    1394:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    1396:	400056b7          	lui	a3,0x40005
    139a:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
    139e:	07c2                	slli	a5,a5,0x10
    13a0:	83c1                	srli	a5,a5,0x10
    13a2:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    13a6:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    13aa:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
    13ae:	431c                	lw	a5,0(a4)
    13b0:	6761                	lui	a4,0x18
    13b2:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.bfb73fe7+0xe67c>
    13b6:	00179593          	slli	a1,a5,0x1
    13ba:	5af76663          	bltu	a4,a5,1966 <main+0x750>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    13be:	02dc7537          	lui	a0,0x2dc7
    13c2:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bfb73fe7+0x2dbcbdc>
    13c6:	ce3fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    13ca:	14fd                	addi	s1,s1,-1
    13cc:	8d65                	and	a0,a0,s1
    13ce:	0542                	slli	a0,a0,0x10
    13d0:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    13d2:	40005737          	lui	a4,0x40005
    13d6:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    13da:	40075783          	lhu	a5,1024(a4)
    13de:	07c2                	slli	a5,a5,0x10
    13e0:	83c1                	srli	a5,a5,0x10
    13e2:	0017e793          	ori	a5,a5,1
    13e6:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    13ea:	cb0ff0ef          	jal	ra,89a <i2c_error>

void modI2C_setup() {
	if(i2c_init(&dev_aht21) != I2C_OK) {
    13ee:	58050a63          	beqz	a0,1982 <main+0x76c>
		printf("Failed to init I2C\n");
    13f2:	6509                	lui	a0,0x2
    13f4:	2ac50513          	addi	a0,a0,684 # 22ac <DMA1_Channel3_IRQHandler+0xbc>
    13f8:	397d                	jal	10b6 <puts>
    RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    13fa:	40021637          	lui	a2,0x40021
    13fe:	4e1c                	lw	a5,24(a2)
    1400:	6705                	lui	a4,0x1
    1402:	0741                	addi	a4,a4,16
    1404:	8fd9                	or	a5,a5,a4
    1406:	ce1c                	sw	a5,24(a2)
    GPIOC->CFGLR &= ~(0xf << (SPI_SCLK << 2));
    1408:	400117b7          	lui	a5,0x40011
    140c:	4398                	lw	a4,0(a5)
    140e:	ff1006b7          	lui	a3,0xff100
    1412:	16fd                	addi	a3,a3,-1
    1414:	8f75                	and	a4,a4,a3
    1416:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_SCLK << 2);
    1418:	4398                	lw	a4,0(a5)
    141a:	00b006b7          	lui	a3,0xb00
    141e:	8f55                	or	a4,a4,a3
    1420:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR &= ~(0xf << (SPI_MOSI << 2));
    1422:	4398                	lw	a4,0(a5)
    1424:	f10006b7          	lui	a3,0xf1000
    1428:	16fd                	addi	a3,a3,-1
    142a:	8f75                	and	a4,a4,a3
    142c:	c398                	sw	a4,0(a5)
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_MOSI << 2);
    142e:	4398                	lw	a4,0(a5)
    1430:	0b0006b7          	lui	a3,0xb000
    DC_PIN2 = dc_pin;
    1434:	c6818493          	addi	s1,gp,-920 # 20000064 <DC_PIN2>
    1438:	8f55                	or	a4,a4,a3
    SPI1->CTLR1 = SPI_CPHA_1Edge             // Bit 0     - Clock PHAse
    143a:	76f1                	lui	a3,0xffffc
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_MOSI << 2);
    143c:	c398                	sw	a4,0(a5)
    SPI1->CTLR1 = SPI_CPHA_1Edge             // Bit 0     - Clock PHAse
    143e:	30468693          	addi	a3,a3,772 # ffffc304 <_eusrstack+0xdfffbb04>
    1442:	40013737          	lui	a4,0x40013
    1446:	00d71023          	sh	a3,0(a4) # 40013000 <_eusrstack+0x20012800>
    SPI1->CRCR = 7;                          // CRC
    144a:	469d                	li	a3,7
    144c:	00d71823          	sh	a3,16(a4)
    SPI1->CTLR2 |= SPI_I2S_DMAReq_Tx;        // Configure SPI DMA Transfer
    1450:	00475683          	lhu	a3,4(a4)
    DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    1454:	0731                	addi	a4,a4,12
    SPI1->CTLR2 |= SPI_I2S_DMAReq_Tx;        // Configure SPI DMA Transfer
    1456:	06c2                	slli	a3,a3,0x10
    1458:	82c1                	srli	a3,a3,0x10
    145a:	0026e693          	ori	a3,a3,2
    145e:	fed71c23          	sh	a3,-8(a4)
    SPI1->CTLR1 |= CTLR1_SPE_Set;            // Bit 6     - Enable SPI
    1462:	ff475683          	lhu	a3,-12(a4)
    1466:	06c2                	slli	a3,a3,0x10
    1468:	82c1                	srli	a3,a3,0x10
    146a:	0406e693          	ori	a3,a3,64
    146e:	fed71a23          	sh	a3,-12(a4)
    RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    1472:	4a54                	lw	a3,20(a2)
    1474:	0016e693          	ori	a3,a3,1
    1478:	ca54                	sw	a3,20(a2)
    DMA1_Channel3->CFGR = DMA_DIR_PeripheralDST          // Bit 4     - Read from memory
    147a:	668d                	lui	a3,0x3
    147c:	40020637          	lui	a2,0x40020
    1480:	0b068693          	addi	a3,a3,176 # 30b0 <_data_lma+0x5bc>
    1484:	da14                	sw	a3,48(a2)
    DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    1486:	de18                	sw	a4,56(a2)
    1488:	02400713          	li	a4,36
    148c:	00e48023          	sb	a4,0(s1)
    funPinMode(rst_pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP);
    1490:	4007a703          	lw	a4,1024(a5) # 40011400 <_eusrstack+0x20010c00>
    1494:	767d                	lui	a2,0xfffff
    1496:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
    149a:	8f71                	and	a4,a4,a2
    149c:	10076713          	ori	a4,a4,256
    14a0:	40e7a023          	sw	a4,1024(a5)
    funPinMode(dc_pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP);
    14a4:	4398                	lw	a4,0(a5)
    14a6:	fff10637          	lui	a2,0xfff10
    14aa:	167d                	addi	a2,a2,-1
    14ac:	8f71                	and	a4,a4,a2
    14ae:	6641                	lui	a2,0x10
    14b0:	8f51                	or	a4,a4,a2
    funPinMode(rst_pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP);
    14b2:	40078693          	addi	a3,a5,1024
    funPinMode(dc_pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP);
    14b6:	c398                	sw	a4,0(a5)
    funDigitalWrite(rst_pin, 0);
    14b8:	00040737          	lui	a4,0x40
    14bc:	ca98                	sw	a4,16(a3)
    Delay_Ms(100);
    14be:	00494737          	lui	a4,0x494
    14c2:	e0070513          	addi	a0,a4,-512 # 493e00 <lib_i2c.c.bfb73fe7+0x489ddc>
    14c6:	d8ffe0ef          	jal	ra,254 <DelaySysTick>
    funDigitalWrite(rst_pin, 1);
    14ca:	400117b7          	lui	a5,0x40011
    14ce:	4611                	li	a2,4
    14d0:	40078693          	addi	a3,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    Delay_Ms(100);
    14d4:	00494737          	lui	a4,0x494
    funDigitalWrite(rst_pin, 1);
    14d8:	ca90                	sw	a2,16(a3)
    Delay_Ms(100);
    14da:	e0070513          	addi	a0,a4,-512 # 493e00 <lib_i2c.c.bfb73fe7+0x489ddc>
    14de:	d77fe0ef          	jal	ra,254 <DelaySysTick>
    write_command_8(DC_PIN2, 0x01);          // Software reset
    14e2:	0004c483          	lbu	s1,0(s1)
    14e6:	4585                	li	a1,1
    14e8:	8526                	mv	a0,s1
    14ea:	e89fe0ef          	jal	ra,372 <write_command_8>
    Delay_Ms(200);
    14ee:	00928537          	lui	a0,0x928
    14f2:	c0050513          	addi	a0,a0,-1024 # 927c00 <lib_i2c.c.bfb73fe7+0x91dbdc>
    14f6:	d5ffe0ef          	jal	ra,254 <DelaySysTick>
    write_command_8(DC_PIN2, ST7735_SLPOUT);
    14fa:	45c5                	li	a1,17
    14fc:	8526                	mv	a0,s1
    14fe:	e75fe0ef          	jal	ra,372 <write_command_8>
    Delay_Ms(100);
    1502:	00494737          	lui	a4,0x494
    1506:	e0070513          	addi	a0,a4,-512 # 493e00 <lib_i2c.c.bfb73fe7+0x489ddc>
    150a:	d4bfe0ef          	jal	ra,254 <DelaySysTick>
    write_command_8(DC_PIN2, ST7735_MADCTL);
    150e:	03600593          	li	a1,54
    1512:	8526                	mv	a0,s1
    1514:	e5ffe0ef          	jal	ra,372 <write_command_8>
    funDigitalWrite(dc_pin, 1);     // Data Mode
    1518:	0044d713          	srli	a4,s1,0x4
    151c:	400117b7          	lui	a5,0x40011
    1520:	072a                	slli	a4,a4,0xa
    1522:	80078793          	addi	a5,a5,-2048 # 40010800 <_eusrstack+0x20010000>
    1526:	00f4f693          	andi	a3,s1,15
    152a:	97ba                	add	a5,a5,a4
    152c:	4705                	li	a4,1
    152e:	00d71733          	sll	a4,a4,a3
    1532:	cb98                	sw	a4,16(a5)
    SPI_send(data);
    1534:	0a800513          	li	a0,168
    funDigitalWrite(dc_pin, 1);     // Data Mode
    1538:	fae42a23          	sw	a4,-76(s0)
    153c:	faf42c23          	sw	a5,-72(s0)
    SPI_send(data);
    1540:	e1dfe0ef          	jal	ra,35c <SPI_send>
    write_command_8(DC_PIN2, ST7735_COLMOD);
    1544:	03a00593          	li	a1,58
    1548:	8526                	mv	a0,s1
    154a:	e29fe0ef          	jal	ra,372 <write_command_8>
    funDigitalWrite(dc_pin, 1);     // Data Mode
    154e:	fb442703          	lw	a4,-76(s0)
    1552:	fb842783          	lw	a5,-72(s0)
    SPI_send(data);
    1556:	4515                	li	a0,5
    funDigitalWrite(dc_pin, 1);     // Data Mode
    1558:	cb98                	sw	a4,16(a5)
    SPI_send(data);
    155a:	e03fe0ef          	jal	ra,35c <SPI_send>
    uint8_t gamma_p[] = {0x09, 0x16, 0x09, 0x20, 0x21, 0x1B, 0x13, 0x19,
    155e:	6589                	lui	a1,0x2
    1560:	4641                	li	a2,16
    1562:	33058593          	addi	a1,a1,816 # 2330 <DMA1_Channel3_IRQHandler+0x140>
    1566:	fbc40513          	addi	a0,s0,-68
    156a:	3c79                	jal	1008 <memcpy>
    write_command_8(DC_PIN2, ST7735_GMCTRP1);
    156c:	0e000593          	li	a1,224
    1570:	8526                	mv	a0,s1
    1572:	e01fe0ef          	jal	ra,372 <write_command_8>
    tft_send_DMA(gamma_p, 16, 1);
    1576:	4605                	li	a2,1
    1578:	45c1                	li	a1,16
    157a:	fbc40513          	addi	a0,s0,-68
    157e:	e4bfe0ef          	jal	ra,3c8 <tft_send_DMA>
    uint8_t gamma_n[] = {0x0B, 0x14, 0x08, 0x1E, 0x22, 0x1D, 0x18, 0x1E,
    1582:	6589                	lui	a1,0x2
    1584:	4641                	li	a2,16
    1586:	34458593          	addi	a1,a1,836 # 2344 <DMA1_Channel3_IRQHandler+0x154>
    158a:	fcc40513          	addi	a0,s0,-52
    158e:	3cad                	jal	1008 <memcpy>
    write_command_8(DC_PIN2, ST7735_GMCTRN1);
    1590:	0e100593          	li	a1,225
    1594:	8526                	mv	a0,s1
    1596:	dddfe0ef          	jal	ra,372 <write_command_8>
    tft_send_DMA(gamma_n, 16, 1);
    159a:	4605                	li	a2,1
    159c:	45c1                	li	a1,16
    159e:	fcc40513          	addi	a0,s0,-52
    15a2:	e27fe0ef          	jal	ra,3c8 <tft_send_DMA>
    Delay_Ms(10);
    15a6:	000757b7          	lui	a5,0x75
    15aa:	30078513          	addi	a0,a5,768 # 75300 <lib_i2c.c.bfb73fe7+0x6b2dc>
    15ae:	ca7fe0ef          	jal	ra,254 <DelaySysTick>
    write_command_8(DC_PIN2, 0x26);  //! Gamma disable
    15b2:	02600593          	li	a1,38
    15b6:	8526                	mv	a0,s1
    15b8:	dbbfe0ef          	jal	ra,372 <write_command_8>
    write_command_8(DC_PIN2, ST7735_INVON);
    15bc:	02100593          	li	a1,33
    15c0:	8526                	mv	a0,s1
    15c2:	db1fe0ef          	jal	ra,372 <write_command_8>
    write_command_8(DC_PIN2, ST7735_NORON);
    15c6:	45cd                	li	a1,19
    15c8:	8526                	mv	a0,s1
    15ca:	da9fe0ef          	jal	ra,372 <write_command_8>
    Delay_Ms(10);
    15ce:	000757b7          	lui	a5,0x75
    15d2:	30078513          	addi	a0,a5,768 # 75300 <lib_i2c.c.bfb73fe7+0x6b2dc>
    15d6:	c7ffe0ef          	jal	ra,254 <DelaySysTick>
    write_command_8(DC_PIN2, ST7735_DISPON);
    15da:	02900593          	li	a1,41
    15de:	8526                	mv	a0,s1
    15e0:	d93fe0ef          	jal	ra,372 <write_command_8>
    Delay_Ms(10);
    15e4:	000757b7          	lui	a5,0x75
    15e8:	30078513          	addi	a0,a5,768 # 75300 <lib_i2c.c.bfb73fe7+0x6b2dc>
    15ec:	c69fe0ef          	jal	ra,254 <DelaySysTick>



void modST7735_setup(uint8_t rst_pin, uint8_t dc_pin) {
    tft_init(rst_pin, dc_pin);
    tft_fill_rect(0, 0, 160, 128, PURPLE);
    15f0:	6721                	lui	a4,0x8
    15f2:	80f70713          	addi	a4,a4,-2033 # 780f <ch32_mess.c.3c7569de+0x3596>
    15f6:	08000693          	li	a3,128
    15fa:	0a000613          	li	a2,160
    15fe:	4581                	li	a1,0
    1600:	4501                	li	a0,0
    1602:	a36ff0ef          	jal	ra,838 <tft_fill_rect>
	uint32_t sec_time = 0;
    1606:	4781                	li	a5,0
		uint32_t now = millis();

		// button_run(&button_a, button_onChanged);
		// modEncoder_task(now, &encoder_a, encoder_onChanged);

		if (now - sec_time > 2000) {
    1608:	7d000713          	li	a4,2000
		uint32_t now = millis();
    160c:	f9c42683          	lw	a3,-100(s0)
    1610:	4294                	lw	a3,0(a3)
    1612:	fad42423          	sw	a3,-88(s0)
		if (now - sec_time > 2000) {
    1616:	8e9d                	sub	a3,a3,a5
    1618:	fed77ae3          	bgeu	a4,a3,160c <main+0x3f6>
	// Increment the milliseconds count
	systick_millis++;
}

uint32_t get_runTime(void *handler(void)) {
	uint32_t now = micros();
    161c:	e000f7b7          	lui	a5,0xe000f
    1620:	4788                	lw	a0,8(a5)
    1622:	03000593          	li	a1,48
    str[position] = '\0';  // End of the string.
    1626:	075bd4b7          	lui	s1,0x75bd
    162a:	a7ffe0ef          	jal	ra,a8 <__hidden___udivsi3>
    162e:	faa42223          	sw	a0,-92(s0)
    _cursor_x = x + ST7735_X_OFFSET;
    1632:	4705                	li	a4,1



void tft_test() {
    tft_set_cursor(0, 0);
    tft_print("Hello World!");
    1634:	6509                	lui	a0,0x2
    1636:	c6e19c23          	sh	a4,-904(gp) # 20000074 <_cursor_x>
    163a:	30850513          	addi	a0,a0,776 # 2308 <DMA1_Channel3_IRQHandler+0x118>
    _cursor_y = y + ST7735_Y_OFFSET;
    163e:	4769                	li	a4,26
    1640:	c6e19d23          	sh	a4,-902(gp) # 20000076 <_cursor_y>
    1644:	924ff0ef          	jal	ra,768 <tft_print>
    str[position] = '\0';  // End of the string.
    1648:	39c18713          	addi	a4,gp,924 # 20000798 <str.2>
    164c:	000705a3          	sb	zero,11(a4)
    1650:	39c18693          	addi	a3,gp,924 # 20000798 <str.2>
    uint8_t     position  = 11;
    1654:	472d                	li	a4,11
    str[position] = '\0';  // End of the string.
    1656:	d1548493          	addi	s1,s1,-747 # 75bcd15 <lib_i2c.c.bfb73fe7+0x75b2cf1>
        str[--position] = num % 10 + '0';
    165a:	177d                	addi	a4,a4,-1
    165c:	0ff77713          	andi	a4,a4,255
    1660:	45a9                	li	a1,10
    1662:	8526                	mv	a0,s1
    1664:	fae42a23          	sw	a4,-76(s0)
    1668:	fad42c23          	sw	a3,-72(s0)
    166c:	a8dfe0ef          	jal	ra,f8 <__modsi3>
    1670:	fb842683          	lw	a3,-72(s0)
    1674:	03050513          	addi	a0,a0,48
        num /= 10;
    1678:	45a9                	li	a1,10
        str[--position] = num % 10 + '0';
    167a:	00a68523          	sb	a0,10(a3)
        num /= 10;
    167e:	8526                	mv	a0,s1
    1680:	a21fe0ef          	jal	ra,a0 <__divsi3>
    while (num) {
    1684:	fb842683          	lw	a3,-72(s0)
    1688:	fb442703          	lw	a4,-76(s0)
    168c:	4609                	li	a2,2
        num /= 10;
    168e:	84aa                	mv	s1,a0
    while (num) {
    1690:	16fd                	addi	a3,a3,-1
    1692:	39c18793          	addi	a5,gp,924 # 20000798 <str.2>
    1696:	fcc712e3          	bne	a4,a2,165a <main+0x444>
    tft_print(&str[position]);
    169a:	00278513          	addi	a0,a5,2 # e000f002 <_eusrstack+0xc000e802>
    169e:	8caff0ef          	jal	ra,768 <tft_print>
}


void tft_line_tests() {
    //! dots test
    tft_draw_pixel(rand8() % 160, rand8() % 80, colors[rand8() % 19]);
    16a2:	c87fe0ef          	jal	ra,328 <rand8>
    16a6:	faa42823          	sw	a0,-80(s0)
    16aa:	c7ffe0ef          	jal	ra,328 <rand8>
    16ae:	faa42c23          	sw	a0,-72(s0)
    16b2:	c77fe0ef          	jal	ra,328 <rand8>
    16b6:	6389                	lui	t2,0x2
    16b8:	45cd                	li	a1,19
    16ba:	59c38493          	addi	s1,t2,1436 # 259c <colors>
    16be:	a17fe0ef          	jal	ra,d4 <__umodsi3>
    16c2:	0ff57793          	andi	a5,a0,255
    16c6:	0786                	slli	a5,a5,0x1
    16c8:	fb842683          	lw	a3,-72(s0)
    16cc:	97a6                	add	a5,a5,s1
    16ce:	0007d603          	lhu	a2,0(a5)
    16d2:	8536                	mv	a0,a3
    16d4:	05000593          	li	a1,80
    16d8:	fac42a23          	sw	a2,-76(s0)
    16dc:	9f9fe0ef          	jal	ra,d4 <__umodsi3>
    16e0:	fb042703          	lw	a4,-80(s0)
    16e4:	0ff57793          	andi	a5,a0,255
    16e8:	0a000593          	li	a1,160
    16ec:	853a                	mv	a0,a4
    16ee:	faf42c23          	sw	a5,-72(s0)
    16f2:	9e3fe0ef          	jal	ra,d4 <__umodsi3>
    16f6:	fb842783          	lw	a5,-72(s0)
    16fa:	fb442603          	lw	a2,-76(s0)
    16fe:	0ff57513          	andi	a0,a0,255
    1702:	85be                	mv	a1,a5
    1704:	d73fe0ef          	jal	ra,476 <tft_draw_pixel>

    // //! draw vertical lines
    static uint8_t x_idx = 0;
    tft_draw_line(x_idx, 0, x_idx, 80, colors[rand8() % 19], 1);
    1708:	c8c18293          	addi	t0,gp,-884 # 20000088 <x_idx.4>
    170c:	0002c303          	lbu	t1,0(t0)
    1710:	01031613          	slli	a2,t1,0x10
    1714:	8641                	srai	a2,a2,0x10
    1716:	fa642a23          	sw	t1,-76(s0)
    171a:	fac42c23          	sw	a2,-72(s0)
    171e:	c0bfe0ef          	jal	ra,328 <rand8>
    1722:	45cd                	li	a1,19
    1724:	9b1fe0ef          	jal	ra,d4 <__umodsi3>
    1728:	0ff57513          	andi	a0,a0,255
    172c:	0506                	slli	a0,a0,0x1
    172e:	fb842603          	lw	a2,-72(s0)
    1732:	9526                	add	a0,a0,s1
    1734:	00055703          	lhu	a4,0(a0)
    1738:	4785                	li	a5,1
    173a:	05000693          	li	a3,80
    173e:	4581                	li	a1,0
    1740:	8532                	mv	a0,a2
    1742:	e2bfe0ef          	jal	ra,56c <tft_draw_line>
    x_idx += 1;
    1746:	fb442303          	lw	t1,-76(s0)
    174a:	6389                	lui	t2,0x2
    174c:	59c38713          	addi	a4,t2,1436 # 259c <colors>
    1750:	0305                	addi	t1,t1,1
    1752:	fae42a23          	sw	a4,-76(s0)
    1756:	0ff37313          	andi	t1,t1,255
    if (x_idx >= 160) x_idx = 0;
    175a:	09f00793          	li	a5,159
    175e:	c8c18293          	addi	t0,gp,-884 # 20000088 <x_idx.4>
    1762:	3467e763          	bltu	a5,t1,1ab0 <main+0x89a>
    x_idx += 1;
    1766:	00628023          	sb	t1,0(t0)

    // //! draw horizontal lines
    static uint8_t y_idx = 0;
    tft_draw_line(0, y_idx, 180, y_idx, colors[rand8() % 19], 1);
    176a:	c8d18313          	addi	t1,gp,-883 # 20000089 <y_idx.3>
    176e:	00034483          	lbu	s1,0(t1) # 40005000 <_eusrstack+0x20004800>
    1772:	01049693          	slli	a3,s1,0x10
    1776:	86c1                	srai	a3,a3,0x10
    1778:	fad42c23          	sw	a3,-72(s0)
    177c:	badfe0ef          	jal	ra,328 <rand8>
    1780:	45cd                	li	a1,19
    1782:	953fe0ef          	jal	ra,d4 <__umodsi3>
    1786:	fb442783          	lw	a5,-76(s0)
    178a:	0ff57513          	andi	a0,a0,255
    178e:	0506                	slli	a0,a0,0x1
    1790:	953e                	add	a0,a0,a5
    1792:	fb842683          	lw	a3,-72(s0)
    1796:	00055703          	lhu	a4,0(a0)
    179a:	4785                	li	a5,1
    179c:	0b400613          	li	a2,180
    17a0:	85b6                	mv	a1,a3
    17a2:	4501                	li	a0,0
    17a4:	dc9fe0ef          	jal	ra,56c <tft_draw_line>
    y_idx += 1;
    17a8:	0485                	addi	s1,s1,1
    17aa:	0ff4f493          	andi	s1,s1,255
    if (y_idx >= 80) y_idx = 0;
    17ae:	04f00793          	li	a5,79
    17b2:	c8d18313          	addi	t1,gp,-883 # 20000089 <y_idx.3>
    17b6:	3097e063          	bltu	a5,s1,1ab6 <main+0x8a0>
    y_idx += 1;
    17ba:	00930023          	sb	s1,0(t1)

    //! draw random lines
    tft_draw_line(0, 0, 70, 70, RED, 5);
    17be:	6741                	lui	a4,0x10
    17c0:	04600613          	li	a2,70
    17c4:	4795                	li	a5,5
    17c6:	80070713          	addi	a4,a4,-2048 # f800 <lib_i2c.c.bfb73fe7+0x57dc>
    17ca:	04600693          	li	a3,70
    17ce:	4581                	li	a1,0
    17d0:	4501                	li	a0,0
    17d2:	d9bfe0ef          	jal	ra,56c <tft_draw_line>

    tft_draw_line(rand8() % 160, rand8() % 80, rand8() % 160, rand8() % 80, colors[rand8() % 19], 1);
    17d6:	b53fe0ef          	jal	ra,328 <rand8>
    17da:	f8a42c23          	sw	a0,-104(s0)
    17de:	b4bfe0ef          	jal	ra,328 <rand8>
    17e2:	84aa                	mv	s1,a0
    17e4:	b45fe0ef          	jal	ra,328 <rand8>
    17e8:	faa42023          	sw	a0,-96(s0)
    17ec:	b3dfe0ef          	jal	ra,328 <rand8>
    17f0:	faa42c23          	sw	a0,-72(s0)
    17f4:	b35fe0ef          	jal	ra,328 <rand8>
    17f8:	45cd                	li	a1,19
    17fa:	8dbfe0ef          	jal	ra,d4 <__umodsi3>
    17fe:	fb442703          	lw	a4,-76(s0)
    1802:	0ff57793          	andi	a5,a0,255
    1806:	0786                	slli	a5,a5,0x1
    1808:	97ba                	add	a5,a5,a4
    180a:	fb842683          	lw	a3,-72(s0)
    180e:	0007d703          	lhu	a4,0(a5)
    1812:	05000593          	li	a1,80
    1816:	8536                	mv	a0,a3
    1818:	fae42623          	sw	a4,-84(s0)
    181c:	8b9fe0ef          	jal	ra,d4 <__umodsi3>
    1820:	fa042603          	lw	a2,-96(s0)
    1824:	0ff57693          	andi	a3,a0,255
    1828:	0a000593          	li	a1,160
    182c:	8532                	mv	a0,a2
    182e:	fad42823          	sw	a3,-80(s0)
    1832:	8a3fe0ef          	jal	ra,d4 <__umodsi3>
    1836:	0ff57613          	andi	a2,a0,255
    183a:	05000593          	li	a1,80
    183e:	8526                	mv	a0,s1
    1840:	fac42c23          	sw	a2,-72(s0)
    1844:	891fe0ef          	jal	ra,d4 <__umodsi3>
    1848:	f9842303          	lw	t1,-104(s0)
    184c:	0ff57493          	andi	s1,a0,255
    1850:	0a000593          	li	a1,160
    1854:	851a                	mv	a0,t1
    1856:	87ffe0ef          	jal	ra,d4 <__umodsi3>
    185a:	fac42703          	lw	a4,-84(s0)
    185e:	fb042683          	lw	a3,-80(s0)
    1862:	fb842603          	lw	a2,-72(s0)
    1866:	4785                	li	a5,1
    1868:	85a6                	mv	a1,s1
    186a:	0ff57513          	andi	a0,a0,255
    186e:	cfffe0ef          	jal	ra,56c <tft_draw_line>

    // int16_t square_x[] = {10, 60, 60, 10};
    // int16_t square_y[] = {10, 10, 60, 60};
    // _draw_poly(square_x, square_y, 4, RED, 3);

    Point16_t triangle[] = {{10, 20}, {40, 60}, {80, 70}};
    1872:	001407b7          	lui	a5,0x140
    1876:	07a9                	addi	a5,a5,10
    1878:	faf42e23          	sw	a5,-68(s0)
    187c:	003c07b7          	lui	a5,0x3c0
    1880:	02878793          	addi	a5,a5,40 # 3c0028 <lib_i2c.c.bfb73fe7+0x3b6004>
    1884:	fcf42023          	sw	a5,-64(s0)
    1888:	004607b7          	lui	a5,0x460
    188c:	05078793          	addi	a5,a5,80 # 460050 <lib_i2c.c.bfb73fe7+0x45602c>
    1890:	fcf42223          	sw	a5,-60(s0)
    // tft_draw_poly2(triangle, 3, RED, 3);

    tft_draw_solid_poly2(triangle, 3, RED, WHITE, 2);
    1894:	fbc40793          	addi	a5,s0,-68
    EdgeInfo edges[num_vertices];
    1898:	fa242023          	sw	sp,-96(s0)
    189c:	faf42c23          	sw	a5,-72(s0)
    18a0:	fdc10113          	addi	sp,sp,-36
    18a4:	84be                	mv	s1,a5
    18a6:	4785                	li	a5,1
    18a8:	fa242623          	sw	sp,-84(s0)
    18ac:	faf42823          	sw	a5,-80(s0)
    uint8_t valid_edges = 0;
    18b0:	4301                	li	t1,0
        const Point16_t* p1 = &vertices[(i + 1) % num_vertices];
    18b2:	fb042503          	lw	a0,-80(s0)
    18b6:	458d                	li	a1,3
    18b8:	f8642c23          	sw	t1,-104(s0)
    18bc:	83dfe0ef          	jal	ra,f8 <__modsi3>
    18c0:	00251593          	slli	a1,a0,0x2
    18c4:	fbc40793          	addi	a5,s0,-68
    18c8:	95be                	add	a1,a1,a5
        if (p0->y == p1->y) continue; // Skip horizontal edges
    18ca:	00249683          	lh	a3,2(s1)
    18ce:	00259703          	lh	a4,2(a1)
    18d2:	f9842303          	lw	t1,-104(s0)
    18d6:	06e68863          	beq	a3,a4,1946 <main+0x730>
    18da:	00049503          	lh	a0,0(s1)
    18de:	00059583          	lh	a1,0(a1)
    18e2:	00131793          	slli	a5,t1,0x1
        if (p0->y < p1->y) {
    18e6:	1ce6db63          	bge	a3,a4,1abc <main+0x8a6>
    18ea:	fac42603          	lw	a2,-84(s0)
    18ee:	979a                	add	a5,a5,t1
    18f0:	078a                	slli	a5,a5,0x2
    18f2:	97b2                	add	a5,a5,a2
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    18f4:	01051613          	slli	a2,a0,0x10
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    18f8:	40a58533          	sub	a0,a1,a0
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    18fc:	c790                	sw	a2,8(a5)
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    18fe:	40d705b3          	sub	a1,a4,a3
    1902:	0542                	slli	a0,a0,0x10
    1904:	f8642623          	sw	t1,-116(s0)
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    1908:	f8f42823          	sw	a5,-112(s0)
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    190c:	f8d42a23          	sw	a3,-108(s0)
    1910:	f8e42c23          	sw	a4,-104(s0)
    1914:	f8cfe0ef          	jal	ra,a0 <__divsi3>
    1918:	f9042783          	lw	a5,-112(s0)
    191c:	f9842703          	lw	a4,-104(s0)
    1920:	f9442683          	lw	a3,-108(s0)
    1924:	f8c42303          	lw	t1,-116(s0)
    1928:	c3c8                	sw	a0,4(a5)
    192a:	00131793          	slli	a5,t1,0x1
    192e:	fac42603          	lw	a2,-84(s0)
    1932:	979a                	add	a5,a5,t1
    1934:	078a                	slli	a5,a5,0x2
    1936:	97b2                	add	a5,a5,a2
        valid_edges++;
    1938:	0305                	addi	t1,t1,1
        edges[valid_edges].y_min = y_min;
    193a:	00d79023          	sh	a3,0(a5)
        edges[valid_edges].y_max = y_max;
    193e:	00e79123          	sh	a4,2(a5)
        valid_edges++;
    1942:	0ff37313          	andi	t1,t1,255
    for (uint16_t i = 0; i < num_vertices; i++) {
    1946:	fb042783          	lw	a5,-80(s0)
    194a:	4711                	li	a4,4
    194c:	0491                	addi	s1,s1,4
    194e:	0785                	addi	a5,a5,1
    1950:	faf42823          	sw	a5,-80(s0)
    1954:	f4e79fe3          	bne	a5,a4,18b2 <main+0x69c>
    1958:	46d1                	li	a3,20
    195a:	fac42783          	lw	a5,-84(s0)
        for (uint8_t i = 0; i < valid_edges; i++) {
    195e:	4701                	li	a4,0
        uint8_t num_intersections = 0;
    1960:	4481                	li	s1,0
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    1962:	65a1                	lui	a1,0x8
    1964:	aae9                	j	1b3e <main+0x928>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    1966:	02dc7537          	lui	a0,0x2dc7
    196a:	95be                	add	a1,a1,a5
    196c:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.bfb73fe7+0x2dbcbdc>
    1970:	f38fe0ef          	jal	ra,a8 <__hidden___udivsi3>
    1974:	14fd                	addi	s1,s1,-1
    1976:	8d65                	and	a0,a0,s1
    1978:	0542                	slli	a0,a0,0x10
    197a:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    197c:	67a1                	lui	a5,0x8
    197e:	8d5d                	or	a0,a0,a5
    1980:	bc89                	j	13d2 <main+0x1bc>
	} else {
		// Scan the I2C Bus, prints any devices that respond
		printf("----Scanning I2C Bus for Devices---\n");
    1982:	6509                	lui	a0,0x2
    1984:	2c050513          	addi	a0,a0,704 # 22c0 <DMA1_Channel3_IRQHandler+0xd0>
    1988:	f2eff0ef          	jal	ra,10b6 <puts>
{
	// If the callback function is null, exit
	if(callback == NULL) return;

	// Scan through every address, getting a ping() response
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    198c:	4481                	li	s1,0
		// If the address responds, call the callback function
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    198e:	8526                	mv	a0,s1
    1990:	f9dfe0ef          	jal	ra,92c <i2c_ping>
    1994:	e501                	bnez	a0,199c <main+0x786>
    1996:	8526                	mv	a0,s1
    1998:	fbcff0ef          	jal	ra,1154 <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    199c:	0485                	addi	s1,s1,1
    199e:	0ff4f493          	andi	s1,s1,255
    19a2:	07f00793          	li	a5,127
    19a6:	fef494e3          	bne	s1,a5,198e <main+0x778>
		i2c_scan(i2c_scan_callback);
		printf("----Done Scanning----\n\n");
    19aa:	6509                	lui	a0,0x2
    19ac:	2e450513          	addi	a0,a0,740 # 22e4 <DMA1_Channel3_IRQHandler+0xf4>
    19b0:	f06ff0ef          	jal	ra,10b6 <puts>
		// modI2C_task();

		if (i2c_ping(0x3C) == I2C_OK) {
    19b4:	03c00513          	li	a0,60
    19b8:	f75fe0ef          	jal	ra,92c <i2c_ping>
    19bc:	a2051fe3          	bnez	a0,13fa <main+0x1e4>
	ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    19c0:	678d                	lui	a5,0x3
    19c2:	c8018223          	sb	zero,-892(gp) # 20000080 <ssd1306_buffer>
    19c6:	ad878793          	addi	a5,a5,-1320 # 2ad8 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    19ca:	0007c503          	lbu	a0,0(a5)
    19ce:	0ff00713          	li	a4,255
    19d2:	02e51e63          	bne	a0,a4,1a0e <main+0x7f8>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    19d6:	02100513          	li	a0,33
    19da:	d9eff0ef          	jal	ra,f78 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    19de:	4501                	li	a0,0
    19e0:	d98ff0ef          	jal	ra,f78 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    19e4:	07f00513          	li	a0,127
    19e8:	d90ff0ef          	jal	ra,f78 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    19ec:	02200513          	li	a0,34
    19f0:	d88ff0ef          	jal	ra,f78 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    19f4:	4501                	li	a0,0
    19f6:	d82ff0ef          	jal	ra,f78 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    19fa:	451d                	li	a0,7
    19fc:	d7cff0ef          	jal	ra,f78 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    1a00:	02000593          	li	a1,32
    1a04:	c8418513          	addi	a0,gp,-892 # 20000080 <ssd1306_buffer>
    1a08:	e1cff0ef          	jal	ra,1024 <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    1a0c:	a809                	j	1a1e <main+0x808>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    1a0e:	0785                	addi	a5,a5,1
    1a10:	faf42c23          	sw	a5,-72(s0)
    1a14:	d64ff0ef          	jal	ra,f78 <ssd1306_cmd>
    1a18:	fb842783          	lw	a5,-72(s0)
    1a1c:	d55d                	beqz	a0,19ca <main+0x7b4>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    1a1e:	f7018513          	addi	a0,gp,-144 # 2000036c <frame_buffer>
    1a22:	40000613          	li	a2,1024
    1a26:	4581                	li	a1,0
    1a28:	dbaff0ef          	jal	ra,fe2 <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1a2c:	02100513          	li	a0,33
    1a30:	d48ff0ef          	jal	ra,f78 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1a34:	4501                	li	a0,0
    1a36:	d42ff0ef          	jal	ra,f78 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1a3a:	07f00513          	li	a0,127
    1a3e:	d3aff0ef          	jal	ra,f78 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1a42:	02200513          	li	a0,34
    1a46:	d32ff0ef          	jal	ra,f78 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1a4a:	4501                	li	a0,0
    1a4c:	d2cff0ef          	jal	ra,f78 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1a50:	451d                	li	a0,7
    1a52:	d26ff0ef          	jal	ra,f78 <ssd1306_cmd>
    1a56:	4481                	li	s1,0
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    1a58:	f7018793          	addi	a5,gp,-144 # 2000036c <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1a5c:	4501                	li	a0,0
    1a5e:	97a6                	add	a5,a5,s1
    1a60:	02050713          	addi	a4,a0,32
    1a64:	01071593          	slli	a1,a4,0x10
    1a68:	81c1                	srli	a1,a1,0x10
    1a6a:	8d89                	sub	a1,a1,a0
    1a6c:	953e                	add	a0,a0,a5
    1a6e:	fae42a23          	sw	a4,-76(s0)
    1a72:	faf42c23          	sw	a5,-72(s0)
    1a76:	daeff0ef          	jal	ra,1024 <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    1a7a:	fb442703          	lw	a4,-76(s0)
    1a7e:	fb842783          	lw	a5,-72(s0)
    1a82:	853a                	mv	a0,a4
    1a84:	08000713          	li	a4,128
    1a88:	fce51ce3          	bne	a0,a4,1a60 <main+0x84a>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    1a8c:	08048493          	addi	s1,s1,128
    1a90:	40000793          	li	a5,1024
    1a94:	fcf492e3          	bne	s1,a5,1a58 <main+0x842>
			ssd1306_setup();

			sprintf(str_output, "Hello Bee!");
    1a98:	6589                	lui	a1,0x2
    1a9a:	2fc58593          	addi	a1,a1,764 # 22fc <DMA1_Channel3_IRQHandler+0x10c>
    1a9e:	3a818513          	addi	a0,gp,936 # 200007a4 <str_output>
    1aa2:	d52ff0ef          	jal	ra,ff4 <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    1aa6:	4501                	li	a0,0
    1aa8:	da6ff0ef          	jal	ra,104e <ssd1306_print_str_at.constprop.0>
    1aac:	94fff06f          	j	13fa <main+0x1e4>
    if (x_idx >= 160) x_idx = 0;
    1ab0:	00028023          	sb	zero,0(t0)
    1ab4:	b95d                	j	176a <main+0x554>
    if (y_idx >= 80) y_idx = 0;
    1ab6:	00030023          	sb	zero,0(t1)
    1aba:	b311                	j	17be <main+0x5a8>
    1abc:	fac42603          	lw	a2,-84(s0)
    1ac0:	979a                	add	a5,a5,t1
    1ac2:	078a                	slli	a5,a5,0x2
    1ac4:	97b2                	add	a5,a5,a2
            edges[valid_edges].x_curr = x_start << 16;
    1ac6:	01059293          	slli	t0,a1,0x10
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    1aca:	8d0d                	sub	a0,a0,a1
            edges[valid_edges].x_curr = x_start << 16;
    1acc:	0057a423          	sw	t0,8(a5)
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    1ad0:	40e685b3          	sub	a1,a3,a4
    1ad4:	0542                	slli	a0,a0,0x10
    1ad6:	f8d42623          	sw	a3,-116(s0)
    1ada:	f8642823          	sw	t1,-112(s0)
            edges[valid_edges].x_curr = x_start << 16;
    1ade:	f8f42a23          	sw	a5,-108(s0)
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    1ae2:	f8e42c23          	sw	a4,-104(s0)
    1ae6:	dbafe0ef          	jal	ra,a0 <__divsi3>
    1aea:	f9842703          	lw	a4,-104(s0)
    1aee:	f9442783          	lw	a5,-108(s0)
    1af2:	f8c42603          	lw	a2,-116(s0)
    1af6:	86ba                	mv	a3,a4
    1af8:	f9042303          	lw	t1,-112(s0)
    1afc:	c3c8                	sw	a0,4(a5)
    1afe:	8732                	mv	a4,a2
    1b00:	b52d                	j	192a <main+0x714>
            if (y >= edges[i].y_min && y < edges[i].y_max) {
    1b02:	00079603          	lh	a2,0(a5)
    1b06:	02c6c863          	blt	a3,a2,1b36 <main+0x920>
    1b0a:	00279603          	lh	a2,2(a5)
    1b0e:	02c6d463          	bge	a3,a2,1b36 <main+0x920>
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    1b12:	0087a283          	lw	t0,8(a5)
    1b16:	00148513          	addi	a0,s1,1
    1b1a:	ff440613          	addi	a2,s0,-12
    1b1e:	0486                	slli	s1,s1,0x1
    1b20:	94b2                	add	s1,s1,a2
    1b22:	00b28633          	add	a2,t0,a1
    1b26:	8641                	srai	a2,a2,0x10
    1b28:	fcc49c23          	sh	a2,-40(s1)
                edges[i].x_curr += edges[i].x_step;
    1b2c:	43d0                	lw	a2,4(a5)
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    1b2e:	0ff57493          	andi	s1,a0,255
                edges[i].x_curr += edges[i].x_step;
    1b32:	9616                	add	a2,a2,t0
    1b34:	c790                	sw	a2,8(a5)
        for (uint8_t i = 0; i < valid_edges; i++) {
    1b36:	0705                	addi	a4,a4,1
    1b38:	0ff77713          	andi	a4,a4,255
    1b3c:	07b1                	addi	a5,a5,12
    1b3e:	fc6712e3          	bne	a4,t1,1b02 <main+0x8ec>
    1b42:	fcc40293          	addi	t0,s0,-52
    1b46:	8616                	mv	a2,t0
        for (uint8_t i = 1; i < num_intersections; i++) {
    1b48:	4705                	li	a4,1
            while (j >= 0 && intersections[j] > key) {
    1b4a:	50fd                	li	ra,-1
        for (uint8_t i = 1; i < num_intersections; i++) {
    1b4c:	1c976763          	bltu	a4,s1,1d1a <main+0xb04>
    1b50:	00148393          	addi	t2,s1,1
    1b54:	0386                	slli	t2,t2,0x1
    1b56:	8085                	srli	s1,s1,0x1
    1b58:	1fc3f393          	andi	t2,t2,508
    1b5c:	048a                	slli	s1,s1,0x2
    1b5e:	9396                	add	t2,t2,t0
    1b60:	9496                	add	s1,s1,t0
        for (uint8_t i = 0; i < num_intersections; i += 2) {
    1b62:	1e539d63          	bne	t2,t0,1d5c <main+0xb46>
    1b66:	0685                	addi	a3,a3,1
    1b68:	01069713          	slli	a4,a3,0x10
    1b6c:	8341                	srli	a4,a4,0x10
    1b6e:	06c2                	slli	a3,a3,0x10
    for (int16_t y = min_y; y <= max_y; y++) {
    1b70:	04700793          	li	a5,71
    1b74:	86c1                	srai	a3,a3,0x10
    1b76:	def712e3          	bne	a4,a5,195a <main+0x744>
        tft_draw_line(p0.x, p0.y, p1.x, p1.y, color, width); // Draw edge with specified width
    1b7a:	64c1                	lui	s1,0x10
    for (int16_t y = min_y; y <= max_y; y++) {
    1b7c:	4305                	li	t1,1
        tft_draw_line(p0.x, p0.y, p1.x, p1.y, color, width); // Draw edge with specified width
    1b7e:	14fd                	addi	s1,s1,-1
        Point16_t p1 = vertices[(i + 1) % num_vertices]; // Wrap around to connect last vertex to first
    1b80:	851a                	mv	a0,t1
    1b82:	458d                	li	a1,3
    1b84:	fa642823          	sw	t1,-80(s0)
    1b88:	d70fe0ef          	jal	ra,f8 <__modsi3>
    1b8c:	fbc40793          	addi	a5,s0,-68
    1b90:	050a                	slli	a0,a0,0x2
    1b92:	953e                	add	a0,a0,a5
        tft_draw_line(p0.x, p0.y, p1.x, p1.y, color, width); // Draw edge with specified width
    1b94:	00251683          	lh	a3,2(a0)
    1b98:	00051603          	lh	a2,0(a0)
    1b9c:	fb842583          	lw	a1,-72(s0)
    1ba0:	fb842503          	lw	a0,-72(s0)
    1ba4:	4789                	li	a5,2
    1ba6:	00259583          	lh	a1,2(a1)
    1baa:	00051503          	lh	a0,0(a0)
    1bae:	8726                	mv	a4,s1
    1bb0:	9bdfe0ef          	jal	ra,56c <tft_draw_line>
    for (uint16_t i = 0; i < num_vertices; i++) {
    1bb4:	fb842783          	lw	a5,-72(s0)
    1bb8:	fb042303          	lw	t1,-80(s0)
    1bbc:	0791                	addi	a5,a5,4
    1bbe:	faf42c23          	sw	a5,-72(s0)
    1bc2:	0305                	addi	t1,t1,1
    1bc4:	4791                	li	a5,4
    1bc6:	faf31de3          	bne	t1,a5,1b80 <main+0x96a>
    tft_line_tests();


    // draw rectangles
    static uint8_t rect_idx = 0;
    tft_draw_rect(rect_idx, rect_idx, 160 - (rect_idx << 1), 80 - (rect_idx << 1), colors[rand8() % 19]);
    1bca:	c8018793          	addi	a5,gp,-896 # 2000007c <rect_idx.1>
    1bce:	0007c483          	lbu	s1,0(a5)
    1bd2:	fa042103          	lw	sp,-96(s0)
    1bd6:	01049313          	slli	t1,s1,0x10
    1bda:	00149713          	slli	a4,s1,0x1
    1bde:	01035313          	srli	t1,t1,0x10
    1be2:	fa642823          	sw	t1,-80(s0)
    1be6:	fae42c23          	sw	a4,-72(s0)
    1bea:	f3efe0ef          	jal	ra,328 <rand8>
    1bee:	45cd                	li	a1,19
    1bf0:	ce4fe0ef          	jal	ra,d4 <__umodsi3>
    1bf4:	fb442783          	lw	a5,-76(s0)
    1bf8:	fb842703          	lw	a4,-72(s0)
    1bfc:	0ff57513          	andi	a0,a0,255
    1c00:	0506                	slli	a0,a0,0x1
    1c02:	953e                	add	a0,a0,a5
    1c04:	fb042303          	lw	t1,-80(s0)
    1c08:	05000693          	li	a3,80
    1c0c:	0a000613          	li	a2,160
    1c10:	8e99                	sub	a3,a3,a4
    1c12:	8e19                	sub	a2,a2,a4
    1c14:	00055703          	lhu	a4,0(a0)
    1c18:	06c2                	slli	a3,a3,0x10
    1c1a:	0642                	slli	a2,a2,0x10
    1c1c:	82c1                	srli	a3,a3,0x10
    1c1e:	8241                	srli	a2,a2,0x10
    1c20:	859a                	mv	a1,t1
    1c22:	851a                	mv	a0,t1
    1c24:	ad5fe0ef          	jal	ra,6f8 <tft_draw_rect>
    rect_idx += 1;
    1c28:	0485                	addi	s1,s1,1
    1c2a:	0ff4f493          	andi	s1,s1,255
    if (rect_idx >= 40) rect_idx = 0;
    1c2e:	02700713          	li	a4,39
    1c32:	c8018793          	addi	a5,gp,-896 # 2000007c <rect_idx.1>
    1c36:	16976463          	bltu	a4,s1,1d9e <main+0xb88>
    rect_idx += 1;
    1c3a:	00978023          	sb	s1,0(a5)

    // draw random rectangles
    tft_draw_rect(rand8() % 140, rand8() % 60, 20, 20, colors[rand8() % 19]);
    1c3e:	eeafe0ef          	jal	ra,328 <rand8>
    1c42:	faa42823          	sw	a0,-80(s0)
    1c46:	ee2fe0ef          	jal	ra,328 <rand8>
    1c4a:	84aa                	mv	s1,a0
    1c4c:	edcfe0ef          	jal	ra,328 <rand8>
    1c50:	45cd                	li	a1,19
    1c52:	c82fe0ef          	jal	ra,d4 <__umodsi3>
    1c56:	fb442703          	lw	a4,-76(s0)
    1c5a:	0ff57793          	andi	a5,a0,255
    1c5e:	0786                	slli	a5,a5,0x1
    1c60:	97ba                	add	a5,a5,a4
    1c62:	0007d703          	lhu	a4,0(a5)
    1c66:	03c00593          	li	a1,60
    1c6a:	8526                	mv	a0,s1
    1c6c:	fae42c23          	sw	a4,-72(s0)
    1c70:	c64fe0ef          	jal	ra,d4 <__umodsi3>
    1c74:	fb042683          	lw	a3,-80(s0)
    1c78:	0ff57493          	andi	s1,a0,255
    1c7c:	08c00593          	li	a1,140
    1c80:	8536                	mv	a0,a3
    1c82:	c52fe0ef          	jal	ra,d4 <__umodsi3>
    1c86:	fb842703          	lw	a4,-72(s0)
    1c8a:	4651                	li	a2,20
    1c8c:	46d1                	li	a3,20
    1c8e:	85a6                	mv	a1,s1
    1c90:	0ff57513          	andi	a0,a0,255
    1c94:	a65fe0ef          	jal	ra,6f8 <tft_draw_rect>

    // draw filled rectangles
    tft_fill_rect(rand8() % 140, rand8() % 60, 20, 20, colors[rand8() % 19]);
    1c98:	e90fe0ef          	jal	ra,328 <rand8>
    1c9c:	faa42823          	sw	a0,-80(s0)
    1ca0:	e88fe0ef          	jal	ra,328 <rand8>
    1ca4:	84aa                	mv	s1,a0
    1ca6:	e82fe0ef          	jal	ra,328 <rand8>
    1caa:	45cd                	li	a1,19
    1cac:	c28fe0ef          	jal	ra,d4 <__umodsi3>
    1cb0:	fb442703          	lw	a4,-76(s0)
    1cb4:	0ff57793          	andi	a5,a0,255
    1cb8:	0786                	slli	a5,a5,0x1
    1cba:	97ba                	add	a5,a5,a4
    1cbc:	0007d703          	lhu	a4,0(a5)
    1cc0:	03c00593          	li	a1,60
    1cc4:	8526                	mv	a0,s1
    1cc6:	fae42c23          	sw	a4,-72(s0)
    1cca:	c0afe0ef          	jal	ra,d4 <__umodsi3>
    1cce:	fb042683          	lw	a3,-80(s0)
    1cd2:	0ff57493          	andi	s1,a0,255
    1cd6:	08c00593          	li	a1,140
    1cda:	8536                	mv	a0,a3
    1cdc:	bf8fe0ef          	jal	ra,d4 <__umodsi3>
    1ce0:	fb842703          	lw	a4,-72(s0)
    1ce4:	46d1                	li	a3,20
    1ce6:	4651                	li	a2,20
    1ce8:	85a6                	mv	a1,s1
    1cea:	0ff57513          	andi	a0,a0,255
    1cee:	b4bfe0ef          	jal	ra,838 <tft_fill_rect>
	handler();
	return micros() - now;
    1cf2:	e000f7b7          	lui	a5,0xe000f
    1cf6:	4788                	lw	a0,8(a5)
    1cf8:	03000593          	li	a1,48
    1cfc:	bacfe0ef          	jal	ra,a8 <__hidden___udivsi3>
			// uint32_t runtime_i2c = get_runTime(modI2C_task);
			// sprintf(str_output, "I2C runtime: %lu us", runtime_i2c);
			// ssd1306_print_str_at(str_output, 0, 0);

			uint32_t runtime_tft = get_runTime(tft_test);
			printf("ST7735 runtime: %lu us\n", runtime_tft);
    1d00:	fa442783          	lw	a5,-92(s0)
    1d04:	40f505b3          	sub	a1,a0,a5
    1d08:	6509                	lui	a0,0x2
    1d0a:	31850513          	addi	a0,a0,792 # 2318 <DMA1_Channel3_IRQHandler+0x128>
    1d0e:	8aeff0ef          	jal	ra,dbc <printf>
		uint32_t now = millis();
    1d12:	fa842783          	lw	a5,-88(s0)
    1d16:	8f3ff06f          	j	1608 <main+0x3f2>
    1d1a:	fff70793          	addi	a5,a4,-1
            int16_t key = intersections[i];
    1d1e:	00261503          	lh	a0,2(a2) # 10002 <lib_i2c.c.bfb73fe7+0x5fde>
    1d22:	07e2                	slli	a5,a5,0x18
    1d24:	87e1                	srai	a5,a5,0x18
    1d26:	85b2                	mv	a1,a2
            while (j >= 0 && intersections[j] > key) {
    1d28:	00059383          	lh	t2,0(a1)
    1d2c:	00755a63          	bge	a0,t2,1d40 <main+0xb2a>
    1d30:	17fd                	addi	a5,a5,-1
    1d32:	07e2                	slli	a5,a5,0x18
                intersections[j + 1] = intersections[j];
    1d34:	00759123          	sh	t2,2(a1)
    1d38:	87e1                	srai	a5,a5,0x18
            while (j >= 0 && intersections[j] > key) {
    1d3a:	15f9                	addi	a1,a1,-2
    1d3c:	fe1796e3          	bne	a5,ra,1d28 <main+0xb12>
            intersections[j + 1] = key;
    1d40:	0785                	addi	a5,a5,1
    1d42:	07e2                	slli	a5,a5,0x18
    1d44:	87e1                	srai	a5,a5,0x18
    1d46:	0786                	slli	a5,a5,0x1
    1d48:	ff440593          	addi	a1,s0,-12
    1d4c:	97ae                	add	a5,a5,a1
        for (uint8_t i = 1; i < num_intersections; i++) {
    1d4e:	0705                	addi	a4,a4,1
            intersections[j + 1] = key;
    1d50:	fca79c23          	sh	a0,-40(a5) # e000efd8 <_eusrstack+0xc000e7d8>
        for (uint8_t i = 1; i < num_intersections; i++) {
    1d54:	0ff77713          	andi	a4,a4,255
    1d58:	0609                	addi	a2,a2,2
    1d5a:	bbcd                	j	1b4c <main+0x936>
            if (i + 1 >= num_intersections) break;
    1d5c:	e05485e3          	beq	s1,t0,1b66 <main+0x950>
            int16_t x0 = intersections[i];
    1d60:	00029503          	lh	a0,0(t0)
            int16_t x1 = intersections[i + 1];
    1d64:	00229603          	lh	a2,2(t0)
            if (x1 > x0) {
    1d68:	02c55963          	bge	a0,a2,1d9a <main+0xb84>
                tft_draw_line(x0, y, x1, y, fill_color, 1);
    1d6c:	6741                	lui	a4,0x10
    1d6e:	85b6                	mv	a1,a3
    1d70:	4785                	li	a5,1
    1d72:	80070713          	addi	a4,a4,-2048 # f800 <lib_i2c.c.bfb73fe7+0x57dc>
    1d76:	f8642823          	sw	t1,-112(s0)
    1d7a:	f8542a23          	sw	t0,-108(s0)
    1d7e:	f8742c23          	sw	t2,-104(s0)
    1d82:	fad42823          	sw	a3,-80(s0)
    1d86:	fe6fe0ef          	jal	ra,56c <tft_draw_line>
    1d8a:	f9042303          	lw	t1,-112(s0)
    1d8e:	f9442283          	lw	t0,-108(s0)
    1d92:	f9842383          	lw	t2,-104(s0)
    1d96:	fb042683          	lw	a3,-80(s0)
    1d9a:	0291                	addi	t0,t0,4
    1d9c:	b3d9                	j	1b62 <main+0x94c>
    if (rect_idx >= 40) rect_idx = 0;
    1d9e:	00078023          	sb	zero,0(a5)
    1da2:	bd71                	j	1c3e <main+0xa28>

00001da4 <SysTick_Handler>:
{
    1da4:	1151                	addi	sp,sp,-12
    1da6:	c03e                	sw	a5,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1da8:	e000f7b7          	lui	a5,0xe000f
{
    1dac:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1dae:	4b98                	lw	a4,16(a5)
{
    1db0:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1db2:	66b1                	lui	a3,0xc
    1db4:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.bfb73fe7+0x1b5c>
    1db8:	9736                	add	a4,a4,a3
    1dba:	cb98                	sw	a4,16(a5)
	SysTick->SR = 0x00000000;
    1dbc:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>
	systick_millis++;
    1dc0:	c8818793          	addi	a5,gp,-888 # 20000084 <systick_millis>
    1dc4:	4398                	lw	a4,0(a5)
}
    1dc6:	46a2                	lw	a3,8(sp)
	systick_millis++;
    1dc8:	0705                	addi	a4,a4,1
    1dca:	c398                	sw	a4,0(a5)
}
    1dcc:	4712                	lw	a4,4(sp)
    1dce:	4782                	lw	a5,0(sp)
    1dd0:	0131                	addi	sp,sp,12
    1dd2:	30200073          	mret

00001dd6 <I2C1_EV_IRQHandler>:
void SetSecondaryI2CSlaveReadOnly(bool read_only) {
    i2c_slave_state.read_only2 = read_only;
}

void I2C1_EV_IRQHandler(void) __attribute__((interrupt));
void I2C1_EV_IRQHandler(void) {
    1dd6:	7179                	addi	sp,sp,-48
    1dd8:	c03e                	sw	a5,0(sp)
    uint16_t STAR1, STAR2 __attribute__((unused));
    STAR1 = I2C1->STAR1;
    1dda:	400057b7          	lui	a5,0x40005
void I2C1_EV_IRQHandler(void) {
    1dde:	c23a                	sw	a4,4(sp)
    STAR1 = I2C1->STAR1;
    1de0:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
    1de4:	40078793          	addi	a5,a5,1024
    STAR2 = I2C1->STAR2;
    1de8:	0187d783          	lhu	a5,24(a5)
void I2C1_EV_IRQHandler(void) {
    1dec:	cc26                	sw	s1,24(sp)
    1dee:	d606                	sw	ra,44(sp)
    STAR1 = I2C1->STAR1;
    1df0:	01071493          	slli	s1,a4,0x10
void I2C1_EV_IRQHandler(void) {
    1df4:	d416                	sw	t0,40(sp)
    1df6:	d21a                	sw	t1,36(sp)
    1df8:	d01e                	sw	t2,32(sp)
    1dfa:	ce22                	sw	s0,28(sp)
    1dfc:	ca2a                	sw	a0,20(sp)
    1dfe:	c82e                	sw	a1,16(sp)
    1e00:	c632                	sw	a2,12(sp)
    1e02:	c436                	sw	a3,8(sp)

    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    1e04:	8b09                	andi	a4,a4,2
    STAR1 = I2C1->STAR1;
    1e06:	80c1                	srli	s1,s1,0x10
    if (STAR1 & I2C_STAR1_ADDR) { // Start event
    1e08:	c305                	beqz	a4,1e28 <I2C1_EV_IRQHandler+0x52>
        i2c_slave_state.first_write = 1; // Next write will be the offset
    1e0a:	37018713          	addi	a4,gp,880 # 2000076c <i2c_slave_state>
    1e0e:	4685                	li	a3,1
    1e10:	07c2                	slli	a5,a5,0x10
    1e12:	83c1                	srli	a5,a5,0x10
    1e14:	00d70023          	sb	a3,0(a4)
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1e18:	00174683          	lbu	a3,1(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1e1c:	839d                	srli	a5,a5,0x7
    1e1e:	8b85                	andi	a5,a5,1
        i2c_slave_state.position = i2c_slave_state.offset; // Reset position
    1e20:	00d70123          	sb	a3,2(a4)
        i2c_slave_state.address2matched = !!(STAR2 & I2C_STAR2_DUALF);
    1e24:	02f70523          	sb	a5,42(a4)
    }

    if (STAR1 & I2C_STAR1_RXNE) { // Write event
    1e28:	0404f793          	andi	a5,s1,64
    1e2c:	c795                	beqz	a5,1e58 <I2C1_EV_IRQHandler+0x82>
        if (i2c_slave_state.first_write) { // First byte written, set the offset
    1e2e:	37018793          	addi	a5,gp,880 # 2000076c <i2c_slave_state>
    1e32:	0007c703          	lbu	a4,0(a5)
    1e36:	c379                	beqz	a4,1efc <I2C1_EV_IRQHandler+0x126>
            i2c_slave_state.offset = I2C1->DATAR;
    1e38:	40005737          	lui	a4,0x40005
    1e3c:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
    1e40:	01075703          	lhu	a4,16(a4)
            i2c_slave_state.position = i2c_slave_state.offset;
            i2c_slave_state.first_write = 0;
    1e44:	00078023          	sb	zero,0(a5)
            i2c_slave_state.writing = false;
    1e48:	020784a3          	sb	zero,41(a5)
            i2c_slave_state.offset = I2C1->DATAR;
    1e4c:	0ff77713          	andi	a4,a4,255
    1e50:	00e780a3          	sb	a4,1(a5)
            i2c_slave_state.position = i2c_slave_state.offset;
    1e54:	00e78123          	sb	a4,2(a5)
                }
            }
        }
    }

    if (STAR1 & I2C_STAR1_TXE) { // Read event
    1e58:	0804f793          	andi	a5,s1,128
    1e5c:	c7a1                	beqz	a5,1ea4 <I2C1_EV_IRQHandler+0xce>
        i2c_slave_state.writing = false;
    1e5e:	37018793          	addi	a5,gp,880 # 2000076c <i2c_slave_state>
        if (i2c_slave_state.address2matched) {
    1e62:	02a7c703          	lbu	a4,42(a5)
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1e66:	0027c503          	lbu	a0,2(a5)
        i2c_slave_state.writing = false;
    1e6a:	020784a3          	sb	zero,41(a5)
        if (i2c_slave_state.address2matched) {
    1e6e:	400057b7          	lui	a5,0x40005
    1e72:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
    1e76:	37018413          	addi	s0,gp,880 # 2000076c <i2c_slave_state>
    1e7a:	cb79                	beqz	a4,1f50 <I2C1_EV_IRQHandler+0x17a>
            if (i2c_slave_state.position < i2c_slave_state.size2) {
    1e7c:	01044703          	lbu	a4,16(s0)
    1e80:	0ee57663          	bgeu	a0,a4,1f6c <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers2[i2c_slave_state.position];
    1e84:	4458                	lw	a4,12(s0)
    1e86:	972a                	add	a4,a4,a0
    1e88:	00074703          	lbu	a4,0(a4)
    1e8c:	0ff77713          	andi	a4,a4,255
    1e90:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback2 != NULL) {
    1e94:	505c                	lw	a5,36(s0)
                I2C1->DATAR = 0x00;
            }
        } else {
            if (i2c_slave_state.position < i2c_slave_state.size1) {
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
                if (i2c_slave_state.read_callback1 != NULL) {
    1e96:	c391                	beqz	a5,1e9a <I2C1_EV_IRQHandler+0xc4>
                    i2c_slave_state.read_callback1(i2c_slave_state.position);
    1e98:	9782                	jalr	a5
                }
                i2c_slave_state.position++;
    1e9a:	00244783          	lbu	a5,2(s0)
    1e9e:	0785                	addi	a5,a5,1
    1ea0:	00f40123          	sb	a5,2(s0)
                I2C1->DATAR = 0x00;
            }
        }
    }

    if (STAR1 & I2C_STAR1_STOPF) { // Stop event
    1ea4:	88c1                	andi	s1,s1,16
    1ea6:	cc85                	beqz	s1,1ede <I2C1_EV_IRQHandler+0x108>
        I2C1->CTLR1 &= ~(I2C_CTLR1_STOP); // Clear stop
    1ea8:	40005737          	lui	a4,0x40005
    1eac:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
    1eb0:	07c2                	slli	a5,a5,0x10
    1eb2:	83c1                	srli	a5,a5,0x10
    1eb4:	dff7f793          	andi	a5,a5,-513
    1eb8:	07c2                	slli	a5,a5,0x10
    1eba:	83c1                	srli	a5,a5,0x10
    1ebc:	40f71023          	sh	a5,1024(a4)
        if (i2c_slave_state.address2matched) {
    1ec0:	37018793          	addi	a5,gp,880 # 2000076c <i2c_slave_state>
    1ec4:	02a7c703          	lbu	a4,42(a5)
    1ec8:	c74d                	beqz	a4,1f72 <I2C1_EV_IRQHandler+0x19c>
            if (i2c_slave_state.write_callback2 != NULL) {
    1eca:	5398                	lw	a4,32(a5)
                i2c_slave_state.write_callback2(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
            }
        } else {
            if (i2c_slave_state.write_callback1 != NULL) {
    1ecc:	cb09                	beqz	a4,1ede <I2C1_EV_IRQHandler+0x108>
                i2c_slave_state.write_callback1(i2c_slave_state.offset, i2c_slave_state.position - i2c_slave_state.offset);
    1ece:	0017c503          	lbu	a0,1(a5)
    1ed2:	0027c583          	lbu	a1,2(a5)
    1ed6:	8d89                	sub	a1,a1,a0
    1ed8:	0ff5f593          	andi	a1,a1,255
    1edc:	9702                	jalr	a4
            }
        }
    }
}
    1ede:	4472                	lw	s0,28(sp)
    1ee0:	50b2                	lw	ra,44(sp)
    1ee2:	52a2                	lw	t0,40(sp)
    1ee4:	5312                	lw	t1,36(sp)
    1ee6:	5382                	lw	t2,32(sp)
    1ee8:	44e2                	lw	s1,24(sp)
    1eea:	4552                	lw	a0,20(sp)
    1eec:	45c2                	lw	a1,16(sp)
    1eee:	4632                	lw	a2,12(sp)
    1ef0:	46a2                	lw	a3,8(sp)
    1ef2:	4712                	lw	a4,4(sp)
    1ef4:	4782                	lw	a5,0(sp)
    1ef6:	6145                	addi	sp,sp,48
    1ef8:	30200073          	mret
            if (i2c_slave_state.address2matched) {
    1efc:	02a7c683          	lbu	a3,42(a5)
            i2c_slave_state.writing = true;
    1f00:	4705                	li	a4,1
    1f02:	02e784a3          	sb	a4,41(a5)
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    1f06:	0027c703          	lbu	a4,2(a5)
            if (i2c_slave_state.address2matched) {
    1f0a:	c695                	beqz	a3,1f36 <I2C1_EV_IRQHandler+0x160>
                if (i2c_slave_state.position < i2c_slave_state.size2 && !i2c_slave_state.read_only2) {
    1f0c:	0107c683          	lbu	a3,16(a5)
    1f10:	f4d774e3          	bgeu	a4,a3,1e58 <I2C1_EV_IRQHandler+0x82>
    1f14:	0287c683          	lbu	a3,40(a5)
    1f18:	f2a1                	bnez	a3,1e58 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers2[i2c_slave_state.position] = I2C1->DATAR;
    1f1a:	400056b7          	lui	a3,0x40005
    1f1e:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1f22:	47d4                	lw	a3,12(a5)
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    1f24:	96ba                	add	a3,a3,a4
    1f26:	0ff67613          	andi	a2,a2,255
    1f2a:	00c68023          	sb	a2,0(a3)
                    i2c_slave_state.position++;
    1f2e:	0705                	addi	a4,a4,1
    1f30:	00e78123          	sb	a4,2(a5)
    1f34:	b715                	j	1e58 <I2C1_EV_IRQHandler+0x82>
                if (i2c_slave_state.position < i2c_slave_state.size1 && !i2c_slave_state.read_only1) {
    1f36:	0087c683          	lbu	a3,8(a5)
    1f3a:	f0d77fe3          	bgeu	a4,a3,1e58 <I2C1_EV_IRQHandler+0x82>
    1f3e:	01c7c683          	lbu	a3,28(a5)
    1f42:	fa99                	bnez	a3,1e58 <I2C1_EV_IRQHandler+0x82>
                    i2c_slave_state.registers1[i2c_slave_state.position] = I2C1->DATAR;
    1f44:	400056b7          	lui	a3,0x40005
    1f48:	4106d603          	lhu	a2,1040(a3) # 40005410 <_eusrstack+0x20004c10>
    1f4c:	43d4                	lw	a3,4(a5)
    1f4e:	bfd9                	j	1f24 <I2C1_EV_IRQHandler+0x14e>
            if (i2c_slave_state.position < i2c_slave_state.size1) {
    1f50:	00844703          	lbu	a4,8(s0)
    1f54:	00e57c63          	bgeu	a0,a4,1f6c <I2C1_EV_IRQHandler+0x196>
                I2C1->DATAR = i2c_slave_state.registers1[i2c_slave_state.position];
    1f58:	4058                	lw	a4,4(s0)
    1f5a:	972a                	add	a4,a4,a0
    1f5c:	00074703          	lbu	a4,0(a4)
    1f60:	0ff77713          	andi	a4,a4,255
    1f64:	00e79823          	sh	a4,16(a5)
                if (i2c_slave_state.read_callback1 != NULL) {
    1f68:	4c1c                	lw	a5,24(s0)
    1f6a:	b735                	j	1e96 <I2C1_EV_IRQHandler+0xc0>
                I2C1->DATAR = 0x00;
    1f6c:	00079823          	sh	zero,16(a5)
    1f70:	bf15                	j	1ea4 <I2C1_EV_IRQHandler+0xce>
            if (i2c_slave_state.write_callback1 != NULL) {
    1f72:	4bd8                	lw	a4,20(a5)
    1f74:	bfa1                	j	1ecc <I2C1_EV_IRQHandler+0xf6>

00001f76 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) __attribute__((interrupt));
void I2C1_ER_IRQHandler(void) {
    1f76:	1151                	addi	sp,sp,-12
    1f78:	c23a                	sw	a4,4(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1f7a:	40005737          	lui	a4,0x40005
void I2C1_ER_IRQHandler(void) {
    1f7e:	c03e                	sw	a5,0(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1f80:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
void I2C1_ER_IRQHandler(void) {
    1f84:	c436                	sw	a3,8(sp)
    uint16_t STAR1 = I2C1->STAR1;
    1f86:	01079693          	slli	a3,a5,0x10

    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1f8a:	1007f793          	andi	a5,a5,256
    uint16_t STAR1 = I2C1->STAR1;
    1f8e:	82c1                	srli	a3,a3,0x10
    if (STAR1 & I2C_STAR1_BERR) { // Bus error
    1f90:	cf89                	beqz	a5,1faa <I2C1_ER_IRQHandler+0x34>
        I2C1->STAR1 &= ~(I2C_STAR1_BERR); // Clear error
    1f92:	41475783          	lhu	a5,1044(a4)
    1f96:	40070713          	addi	a4,a4,1024
    1f9a:	07c2                	slli	a5,a5,0x10
    1f9c:	83c1                	srli	a5,a5,0x10
    1f9e:	eff7f793          	andi	a5,a5,-257
    1fa2:	07c2                	slli	a5,a5,0x10
    1fa4:	83c1                	srli	a5,a5,0x10
    1fa6:	00f71a23          	sh	a5,20(a4)
    }

    if (STAR1 & I2C_STAR1_ARLO) { // Arbitration lost error
    1faa:	2006f793          	andi	a5,a3,512
    1fae:	cf89                	beqz	a5,1fc8 <I2C1_ER_IRQHandler+0x52>
        I2C1->STAR1 &= ~(I2C_STAR1_ARLO); // Clear error
    1fb0:	40005737          	lui	a4,0x40005
    1fb4:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    1fb8:	07c2                	slli	a5,a5,0x10
    1fba:	83c1                	srli	a5,a5,0x10
    1fbc:	dff7f793          	andi	a5,a5,-513
    1fc0:	07c2                	slli	a5,a5,0x10
    1fc2:	83c1                	srli	a5,a5,0x10
    1fc4:	40f71a23          	sh	a5,1044(a4)
    }

    if (STAR1 & I2C_STAR1_AF) { // Acknowledge failure
    1fc8:	4006f693          	andi	a3,a3,1024
    1fcc:	ce89                	beqz	a3,1fe6 <I2C1_ER_IRQHandler+0x70>
        I2C1->STAR1 &= ~(I2C_STAR1_AF); // Clear error
    1fce:	40005737          	lui	a4,0x40005
    1fd2:	41475783          	lhu	a5,1044(a4) # 40005414 <_eusrstack+0x20004c14>
    1fd6:	07c2                	slli	a5,a5,0x10
    1fd8:	83c1                	srli	a5,a5,0x10
    1fda:	bff7f793          	andi	a5,a5,-1025
    1fde:	07c2                	slli	a5,a5,0x10
    1fe0:	83c1                	srli	a5,a5,0x10
    1fe2:	40f71a23          	sh	a5,1044(a4)
    }
}
    1fe6:	46a2                	lw	a3,8(sp)
    1fe8:	4712                	lw	a4,4(sp)
    1fea:	4782                	lw	a5,0(sp)
    1fec:	0131                	addi	sp,sp,12
    1fee:	30200073          	mret

00001ff2 <TweenHexColors>:
	return ret;
*/
}

static uint32_t TweenHexColors( uint32_t hexa, uint32_t hexb, int tween )
{
    1ff2:	fdc10113          	addi	sp,sp,-36
    1ff6:	ce22                	sw	s0,28(sp)
    1ff8:	d006                	sw	ra,32(sp)
    1ffa:	cc26                	sw	s1,24(sp)
    1ffc:	842a                	mv	s0,a0
	if( tween <= 0 ) return hexa;
    1ffe:	0ac05f63          	blez	a2,20bc <TweenHexColors+0xca>
	if( tween >= 255 ) return hexb;
    2002:	0fe00793          	li	a5,254
    2006:	84ae                	mv	s1,a1
    2008:	0cc7c163          	blt	a5,a2,20ca <TweenHexColors+0xd8>
	int32_t aamt = 255-tween;
    200c:	0ff00293          	li	t0,255
    2010:	40c282b3          	sub	t0,t0,a2
	int32_t har = (hexa>>8) & 0xff;
	int32_t hag = (hexa>>16) & 0xff;
	int32_t hbb = hexb & 0xff;
	int32_t hbr = (hexb>>8) & 0xff;
	int32_t hbg = (hexb>>16) & 0xff;
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    2014:	8596                	mv	a1,t0
    2016:	0ff57513          	andi	a0,a0,255
    201a:	c216                	sw	t0,4(sp)
	int32_t aamt = 255-tween;
    201c:	c032                	sw	a2,0(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    201e:	1fffe097          	auipc	ra,0x1fffe
    2022:	002080e7          	jalr	2(ra) # 20000020 <FastMultiply>
    2026:	4602                	lw	a2,0(sp)
    2028:	ca2a                	sw	a0,20(sp)
    202a:	0ff4f513          	andi	a0,s1,255
    202e:	85b2                	mv	a1,a2
    2030:	1fffe097          	auipc	ra,0x1fffe
    2034:	ff0080e7          	jalr	-16(ra) # 20000020 <FastMultiply>
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    2038:	4292                	lw	t0,4(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    203a:	c82a                	sw	a0,16(sp)
	int32_t har = (hexa>>8) & 0xff;
    203c:	00845513          	srli	a0,s0,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    2040:	8596                	mv	a1,t0
    2042:	0ff57513          	andi	a0,a0,255
    2046:	c616                	sw	t0,12(sp)
    2048:	1fffe097          	auipc	ra,0x1fffe
    204c:	fd8080e7          	jalr	-40(ra) # 20000020 <FastMultiply>
    2050:	4602                	lw	a2,0(sp)
    2052:	c42a                	sw	a0,8(sp)
	int32_t hbr = (hexb>>8) & 0xff;
    2054:	0084d513          	srli	a0,s1,0x8
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    2058:	85b2                	mv	a1,a2
    205a:	0ff57513          	andi	a0,a0,255
    205e:	c232                	sw	a2,4(sp)
    2060:	1fffe097          	auipc	ra,0x1fffe
    2064:	fc0080e7          	jalr	-64(ra) # 20000020 <FastMultiply>
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    2068:	42b2                	lw	t0,12(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    206a:	c02a                	sw	a0,0(sp)
	int32_t hag = (hexa>>16) & 0xff;
    206c:	01045513          	srli	a0,s0,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    2070:	8596                	mv	a1,t0
    2072:	0ff57513          	andi	a0,a0,255
    2076:	1fffe097          	auipc	ra,0x1fffe
    207a:	faa080e7          	jalr	-86(ra) # 20000020 <FastMultiply>
    207e:	4612                	lw	a2,4(sp)
    2080:	842a                	mv	s0,a0
	int32_t hbg = (hexb>>16) & 0xff;
    2082:	0104d513          	srli	a0,s1,0x10
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    2086:	85b2                	mv	a1,a2
    2088:	0ff57513          	andi	a0,a0,255
    208c:	1fffe097          	auipc	ra,0x1fffe
    2090:	f94080e7          	jalr	-108(ra) # 20000020 <FastMultiply>
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    2094:	4342                	lw	t1,16(sp)
    2096:	47d2                	lw	a5,20(sp)
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    2098:	4682                	lw	a3,0(sp)
    209a:	4722                	lw	a4,8(sp)
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    209c:	979a                	add	a5,a5,t1
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    209e:	942a                	add	s0,s0,a0
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    20a0:	9736                	add	a4,a4,a3
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    20a2:	08078793          	addi	a5,a5,128
	int32_t r = (FastMultiply( har, aamt ) + FastMultiply( hbr, bamt ) + 128) >> 8;
    20a6:	08070713          	addi	a4,a4,128
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    20aa:	08040413          	addi	s0,s0,128
	int32_t b = (FastMultiply( hab, aamt ) + FastMultiply( hbb, bamt ) + 128) >> 8;
    20ae:	83a1                	srli	a5,a5,0x8
	return b | (r<<8) | (g<<16);
    20b0:	f0077713          	andi	a4,a4,-256
	int32_t g = (FastMultiply( hag, aamt ) + FastMultiply( hbg, bamt ) + 128) >> 8;
    20b4:	8021                	srli	s0,s0,0x8
	return b | (r<<8) | (g<<16);
    20b6:	8fd9                	or	a5,a5,a4
    20b8:	0442                	slli	s0,s0,0x10
    20ba:	8c5d                	or	s0,s0,a5
}
    20bc:	5082                	lw	ra,32(sp)
    20be:	8522                	mv	a0,s0
    20c0:	4472                	lw	s0,28(sp)
    20c2:	44e2                	lw	s1,24(sp)
    20c4:	02410113          	addi	sp,sp,36
    20c8:	8082                	ret
	if( tween >= 255 ) return hexb;
    20ca:	842e                	mv	s0,a1
    20cc:	bfc5                	j	20bc <TweenHexColors+0xca>

000020ce <WS2812FillBuffSec.constprop.0>:
static volatile int WS2812LEDs;
static volatile int WS2812LEDPlace;
static volatile int WS2812BLEDInUse;
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    20ce:	1111                	addi	sp,sp,-28
    20d0:	c826                	sw	s1,16(sp)
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
    20d2:	c741a483          	lw	s1,-908(gp) # 20000070 <WS2812LEDs>
	int place = WS2812LEDPlace;
    20d6:	c7018713          	addi	a4,gp,-912 # 2000006c <WS2812LEDPlace>
    20da:	4318                	lw	a4,0(a4)
    20dc:	c7018613          	addi	a2,gp,-912 # 2000006c <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
    20e0:	ca22                	sw	s0,20(sp)
    20e2:	cc06                	sw	ra,24(sp)
    20e4:	87aa                	mv	a5,a0
    20e6:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
    20e8:	03050693          	addi	a3,a0,48
    20ec:	c032                	sw	a2,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
    20ee:	04074a63          	bltz	a4,2142 <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
    20f2:	04f68a63          	beq	a3,a5,2146 <WS2812FillBuffSec.constprop.0+0x78>
	{
		if( place >= ledcount )
    20f6:	04974f63          	blt	a4,s1,2154 <WS2812FillBuffSec.constprop.0+0x86>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
    20fa:	40f68633          	sub	a2,a3,a5
    20fe:	4581                	li	a1,0
    2100:	853e                	mv	a0,a5
    2102:	c23a                	sw	a4,4(sp)
    2104:	edffe0ef          	jal	ra,fe2 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
    2108:	4712                	lw	a4,4(sp)
    210a:	cc15                	beqz	s0,2146 <WS2812FillBuffSec.constprop.0+0x78>
			{
				if( place == ledcount )
    210c:	00e49a63          	bne	s1,a4,2120 <WS2812FillBuffSec.constprop.0+0x52>
				{
					// Take the DMA out of circular mode and let it expire.
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    2110:	400206b7          	lui	a3,0x40020
    2114:	5a9c                	lw	a5,48(a3)
    2116:	fdf7f793          	andi	a5,a5,-33
    211a:	da9c                	sw	a5,48(a3)
					WS2812BLEDInUse = 0;
    211c:	c601a623          	sw	zero,-916(gp) # 20000068 <WS2812BLEDInUse>
				}
				place++;
    2120:	0705                	addi	a4,a4,1
    2122:	a015                	j	2146 <WS2812FillBuffSec.constprop.0+0x78>
		(*ptr++) = 0;
    2124:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
    2128:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
    212c:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
    2130:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
    2134:	00079423          	sh	zero,8(a5)
		place++;
    2138:	0705                	addi	a4,a4,1
    213a:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
    213c:	fe079f23          	sh	zero,-2(a5)
    2140:	b77d                	j	20ee <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
    2142:	fef691e3          	bne	a3,a5,2124 <WS2812FillBuffSec.constprop.0+0x56>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
    2146:	4782                	lw	a5,0(sp)
}
    2148:	40e2                	lw	ra,24(sp)
    214a:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
    214c:	c398                	sw	a4,0(a5)
}
    214e:	44c2                	lw	s1,16(sp)
    2150:	0171                	addi	sp,sp,28
    2152:	8082                	ret
	uint8_t rs = rsbase>>3;
	uint32_t fire = ((huetable[(rs+190)&0xff]>>1)<<16) | (huetable[(rs+30)&0xff]) | ((huetable[(rs+0)]>>1)<<8);
	uint32_t ice  = 0x7f0000 | ((rsbase>>1)<<8) | ((rsbase>>1));

	// Because this chip doesn't natively support multiplies, we are going to avoid tweening of 1..254.
	return TweenHexColors( fire, ice, ((tween + ledno)>0)?255:0 ); // Where "tween" is a value from 0 ... 255
    2154:	c1c18613          	addi	a2,gp,-996 # 20000018 <tween>
    2158:	4210                	lw	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    215a:	00170293          	addi	t0,a4,1
    215e:	9732                	add	a4,a4,a2
    2160:	0ff00613          	li	a2,255
    2164:	00e04363          	bgtz	a4,216a <WS2812FillBuffSec.constprop.0+0x9c>
    2168:	4601                	li	a2,0
    216a:	007f45b7          	lui	a1,0x7f4
    216e:	650d                	lui	a0,0x3
    2170:	04058593          	addi	a1,a1,64 # 7f4040 <lib_i2c.c.bfb73fe7+0x7ea01c>
    2174:	0ff50513          	addi	a0,a0,255 # 30ff <ch32fun.c.5d7ba795+0xe>
    2178:	c616                	sw	t0,12(sp)
    217a:	c43e                	sw	a5,8(sp)
    217c:	c236                	sw	a3,4(sp)
    217e:	3d95                	jal	1ff2 <TweenHexColors>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    2180:	00b55613          	srli	a2,a0,0xb
    2184:	6709                	lui	a4,0x2
    2186:	57c70713          	addi	a4,a4,1404 # 257c <bitquartets.8>
    218a:	8a79                	andi	a2,a2,30
    218c:	963a                	add	a2,a2,a4
    218e:	47a2                	lw	a5,8(sp)
    2190:	00065603          	lhu	a2,0(a2)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    2194:	42b2                	lw	t0,12(sp)
    2196:	4692                	lw	a3,4(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
    2198:	00c79023          	sh	a2,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    219c:	00755613          	srli	a2,a0,0x7
    21a0:	8a79                	andi	a2,a2,30
    21a2:	963a                	add	a2,a2,a4
    21a4:	00065603          	lhu	a2,0(a2)
		ptr += 6;
    21a8:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
    21aa:	fec79b23          	sh	a2,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
    21ae:	00355613          	srli	a2,a0,0x3
    21b2:	8a79                	andi	a2,a2,30
    21b4:	963a                	add	a2,a2,a4
    21b6:	00065603          	lhu	a2,0(a2)
    21ba:	fec79c23          	sh	a2,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
    21be:	00f57613          	andi	a2,a0,15
    21c2:	0606                	slli	a2,a2,0x1
    21c4:	963a                	add	a2,a2,a4
    21c6:	00065603          	lhu	a2,0(a2)
    21ca:	fec79d23          	sh	a2,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    21ce:	01355613          	srli	a2,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    21d2:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    21d4:	8a79                	andi	a2,a2,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    21d6:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    21d8:	963a                	add	a2,a2,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    21da:	953a                	add	a0,a0,a4
    21dc:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    21e0:	00065603          	lhu	a2,0(a2)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
    21e4:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
    21e8:	fec79e23          	sh	a2,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
    21ec:	8716                	mv	a4,t0
    21ee:	b711                	j	20f2 <WS2812FillBuffSec.constprop.0+0x24>

000021f0 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    21f0:	fcc10113          	addi	sp,sp,-52
    21f4:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    21f6:	400207b7          	lui	a5,0x40020
    21fa:	439c                	lw	a5,0(a5)
{
    21fc:	d022                	sw	s0,32(sp)
    21fe:	ce26                	sw	s1,28(sp)
    2200:	d806                	sw	ra,48(sp)
    2202:	d616                	sw	t0,44(sp)
    2204:	d41a                	sw	t1,40(sp)
    2206:	d21e                	sw	t2,36(sp)
    2208:	cc2a                	sw	a0,24(sp)
    220a:	ca2e                	sw	a1,20(sp)
    220c:	c832                	sw	a2,16(sp)
    220e:	c636                	sw	a3,12(sp)
    2210:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    2212:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    2214:	40020437          	lui	s0,0x40020
    2218:	10000493          	li	s1,256
    221c:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    221e:	4782                	lw	a5,0(sp)
    2220:	4007f793          	andi	a5,a5,1024
    2224:	c789                	beqz	a5,222e <DMA1_Channel3_IRQHandler+0x3e>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    2226:	4585                	li	a1,1
    2228:	c9018513          	addi	a0,gp,-880 # 2000008c <WS2812dmabuff>
    222c:	354d                	jal	20ce <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    222e:	4782                	lw	a5,0(sp)
    2230:	2007f793          	andi	a5,a5,512
    2234:	c789                	beqz	a5,223e <DMA1_Channel3_IRQHandler+0x4e>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    2236:	4581                	li	a1,0
    2238:	cc018513          	addi	a0,gp,-832 # 200000bc <WS2812dmabuff+0x30>
    223c:	3d49                	jal	20ce <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    223e:	401c                	lw	a5,0(s0)
    2240:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    2242:	4782                	lw	a5,0(sp)
    2244:	1007f793          	andi	a5,a5,256
    2248:	fbf1                	bnez	a5,221c <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    224a:	5402                	lw	s0,32(sp)
    224c:	50c2                	lw	ra,48(sp)
    224e:	52b2                	lw	t0,44(sp)
    2250:	5322                	lw	t1,40(sp)
    2252:	5392                	lw	t2,36(sp)
    2254:	44f2                	lw	s1,28(sp)
    2256:	4562                	lw	a0,24(sp)
    2258:	45d2                	lw	a1,20(sp)
    225a:	4642                	lw	a2,16(sp)
    225c:	46b2                	lw	a3,12(sp)
    225e:	4722                	lw	a4,8(sp)
    2260:	4792                	lw	a5,4(sp)
    2262:	03410113          	addi	sp,sp,52
    2266:	30200073          	mret
    226a:	0000                	unimp
    226c:	31647373          	csrrci	t1,0x316,8
    2270:	5f363033          	0x5f363033
    2274:	3269                	jal	1bfe <main+0x9e8>
    2276:	72655f63          	bge	a0,t1,29b4 <font+0x3dc>
    227a:	6f72                	flw	ft10,28(sp)
    227c:	2072                	fld	ft0,280(sp)
    227e:	202d                	jal	22a8 <DMA1_Channel3_IRQHandler+0xb8>
    2280:	6974                	flw	fa3,84(a0)
    2282:	656d                	lui	a0,0x1b
    2284:	2074756f          	jal	a0,49c8a <lib_i2c.c.bfb73fe7+0x3fc66>
    2288:	74696177          	0x74696177
    228c:	6e69                	lui	t3,0x1a
    228e:	6f662067          	0x6f662067
    2292:	2072                	fld	ft0,280(sp)
    2294:	7325                	lui	t1,0xfffe9
    2296:	0d0a                	slli	s10,s10,0x2
    2298:	0000                	unimp
    229a:	0000                	unimp
    229c:	000a                	c.slli	zero,0x2
    229e:	0000                	unimp
    22a0:	3249                	jal	1c22 <main+0xa0c>
    22a2:	30203a43          	fmadd.s	fs4,ft0,ft2,ft6,rup
    22a6:	2578                	fld	fa4,200(a0)
    22a8:	3230                	fld	fa2,96(a2)
    22aa:	0058                	addi	a4,sp,4
    22ac:	6146                	flw	ft2,80(sp)
    22ae:	6c69                	lui	s8,0x1a
    22b0:	6465                	lui	s0,0x19
    22b2:	7420                	flw	fs0,104(s0)
    22b4:	6e69206f          	j	9499a <lib_i2c.c.bfb73fe7+0x8a976>
    22b8:	7469                	lui	s0,0xffffa
    22ba:	4920                	lw	s0,80(a0)
    22bc:	4332                	lw	t1,12(sp)
    22be:	0000                	unimp
    22c0:	2d2d                	jal	28fa <font+0x322>
    22c2:	2d2d                	jal	28fc <font+0x324>
    22c4:	6e616353          	0x6e616353
    22c8:	696e                	flw	fs2,216(sp)
    22ca:	676e                	flw	fa4,216(sp)
    22cc:	4920                	lw	s0,80(a0)
    22ce:	4332                	lw	t1,12(sp)
    22d0:	4220                	lw	s0,64(a2)
    22d2:	7375                	lui	t1,0xffffd
    22d4:	6620                	flw	fs0,72(a2)
    22d6:	4420726f          	jal	tp,9718 <ch32_mess.c.3c7569de+0x549f>
    22da:	7665                	lui	a2,0xffff9
    22dc:	6369                	lui	t1,0x1a
    22de:	7365                	lui	t1,0xffff9
    22e0:	2d2d                	jal	291a <font+0x342>
    22e2:	002d                	c.nop	11
    22e4:	2d2d                	jal	291e <font+0x346>
    22e6:	2d2d                	jal	2920 <font+0x348>
    22e8:	6f44                	flw	fs1,28(a4)
    22ea:	656e                	flw	fa0,216(sp)
    22ec:	5320                	lw	s0,96(a4)
    22ee:	6e6e6163          	bltu	t3,t1,29d0 <font+0x3f8>
    22f2:	6e69                	lui	t3,0x1a
    22f4:	2d2d2d67          	0x2d2d2d67
    22f8:	0a2d                	addi	s4,s4,11
    22fa:	0000                	unimp
    22fc:	6548                	flw	fa0,12(a0)
    22fe:	6c6c                	flw	fa1,92(s0)
    2300:	6542206f          	j	24954 <lib_i2c.c.bfb73fe7+0x1a930>
    2304:	2165                	jal	27ac <font+0x1d4>
    2306:	0000                	unimp
    2308:	6548                	flw	fa0,12(a0)
    230a:	6c6c                	flw	fa1,92(s0)
    230c:	6f57206f          	j	75200 <lib_i2c.c.bfb73fe7+0x6b1dc>
    2310:	6c72                	flw	fs8,28(sp)
    2312:	2164                	fld	fs1,192(a0)
    2314:	0000                	unimp
    2316:	0000                	unimp
    2318:	37375453          	0x37375453
    231c:	72203533          	0x72203533
    2320:	6e75                	lui	t3,0x1d
    2322:	6974                	flw	fa3,84(a0)
    2324:	656d                	lui	a0,0x1b
    2326:	203a                	fld	ft0,392(sp)
    2328:	6c25                	lui	s8,0x9
    232a:	2075                	jal	23d6 <FONT_7x5+0x36>
    232c:	7375                	lui	t1,0xffffd
    232e:	000a                	c.slli	zero,0x2
    2330:	1609                	addi	a2,a2,-30
    2332:	2009                	jal	2334 <DMA1_Channel3_IRQHandler+0x144>
    2334:	1b21                	addi	s6,s6,-24
    2336:	15171913          	0x15171913
    233a:	2b1e                	fld	fs6,448(sp)
    233c:	0504                	addi	s1,sp,640
    233e:	0e02                	c.slli64	t3
    2340:	0000                	unimp
    2342:	0000                	unimp
    2344:	1e08140b          	0x1e08140b
    2348:	1d22                	slli	s10,s10,0x28
    234a:	1e18                	addi	a4,sp,816
    234c:	2b241a1b          	0x2b241a1b
    2350:	0606                	slli	a2,a2,0x1
    2352:	0f02                	c.slli64	t5
    2354:	0000                	unimp
    2356:	0000                	unimp
    2358:	6f6e                	flw	ft10,216(sp)
    235a:	2074                	fld	fa3,192(s0)
    235c:	7562                	flw	fa0,56(sp)
    235e:	00007973          	csrrci	s2,ustatus,0
    2362:	0000                	unimp
    2364:	616d                	addi	sp,sp,240
    2366:	72657473          	csrrci	s0,0x726,10
    236a:	6d20                	flw	fs0,88(a0)
    236c:	0065646f          	jal	s0,58372 <lib_i2c.c.bfb73fe7+0x4e34e>
    2370:	7274                	flw	fa3,100(a2)
    2372:	6e61                	lui	t3,0x18
    2374:	74696d73          	csrrsi	s10,0x746,18
    2378:	6d20                	flw	fs0,88(a0)
    237a:	0065646f          	jal	s0,58380 <lib_i2c.c.bfb73fe7+0x4e35c>
    237e:	0000                	unimp
    2380:	7874                	flw	fa3,116(s0)
    2382:	6520                	flw	fs0,72(a0)
    2384:	706d                	c.lui	zero,0xffffb
    2386:	7974                	flw	fa3,116(a0)
    2388:	0000                	unimp
    238a:	0000                	unimp
    238c:	7274                	flw	fa3,100(a2)
    238e:	6e61                	lui	t3,0x18
    2390:	74696d73          	csrrsi	s10,0x746,18
    2394:	6320                	flw	fs0,64(a4)
    2396:	6c706d6f          	jal	s10,925c <ch32_mess.c.3c7569de+0x4fe3>
    239a:	7465                	lui	s0,0xffff9
    239c:	0065                	c.nop	25
	...

000023a0 <FONT_7x5>:
    23a0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    23b0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    23c0:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    23d0:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    23e0:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    23f0:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    2400:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    2410:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    2420:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    2430:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    2440:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    2450:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    2460:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    2470:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    2480:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    2490:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    24a0:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    24b0:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    24c0:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    24d0:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    24e0:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    24f0:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    2500:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    2510:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    2520:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    2530:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    2540:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    2550:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    2560:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    2570:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

0000257c <bitquartets.8>:
    257c:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    258c:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

0000259c <colors>:
    259c:	0000 000f 03e0 03ef 7800 780f 7be0 c618     .........x.x.{..
    25ac:	7bef 001f 07e0 07ff f800 f81f ffe0 ffff     .{..............
    25bc:	fd20 afe5 fc18 0000                          .......

000025c4 <errstr>:
    25c4:	2358 0000 2364 0000 2370 0000 2380 0000     X#..d#..p#...#..
    25d4:	238c 0000                                   .#..

000025d8 <font>:
    25d8:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
    25e8:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
    25f8:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
    2608:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
    2618:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
    2628:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
    2638:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
    2648:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
    2658:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
    2668:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
    2678:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    2688:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    2698:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
    26a8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
    26b8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
    26c8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
    26d8:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
    26e8:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
    26f8:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
    2708:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
    2718:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
    2728:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
    2738:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
    2748:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    2758:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    2768:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
    2778:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
    2788:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
    2798:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
    27a8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
    27b8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
    27c8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
    27d8:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
    27e8:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
    27f8:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
    2808:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
    2818:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
    2828:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
    2838:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
    2848:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
    2858:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
    2868:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
    2878:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
    2888:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
    2898:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
    28a8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
    28b8:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
    28c8:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
    28d8:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
    28e8:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
    28f8:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
    2908:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
    2918:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
    2928:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
    2938:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
    2948:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
    2958:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
    2968:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
    2978:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
    2988:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
    2998:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
    29a8:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
    29b8:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
    29c8:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
    29d8:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
    29e8:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
    29f8:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
    2a08:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
    2a18:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
    2a28:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
    2a38:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
    2a48:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
    2a58:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
    2a68:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
    2a78:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
    2a88:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
    2a98:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
    2aa8:	6b6b 3608 3612 3624 0600 0909 0006 1800     kk.6.6$6........
    2ab8:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
    2ac8:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

00002ad8 <ssd1306_init_array>:
    2ad8:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    2ae8:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......

Disassembly of section .data:

20000000 <dev_aht21>:
20000000:	1a80 0006 0000 0000 0038 0001 0000 0000     ........8.......

20000010 <lfsr>:
20000010:	0001 0000                                   ....

20000014 <line.7>:
20000014:	0001 0000                                   ....

20000018 <tween>:
20000018:	ff42 ffff 0000 0000                         B.......

20000020 <FastMultiply>:
{
20000020:	87aa                	mv	a5,a0
	uint32_t ret = 0;
20000022:	4501                	li	a0,0
		if( multiplicand & 1 )
20000024:	0015f713          	andi	a4,a1,1
20000028:	c311                	beqz	a4,2000002c <FastMultiply+0xc>
			ret += mutliplicant;
2000002a:	953e                	add	a0,a0,a5
		multiplicand>>=1;
2000002c:	8185                	srli	a1,a1,0x1
		mutliplicant<<=1;
2000002e:	0786                	slli	a5,a5,0x1
	} while( multiplicand );
20000030:	f9f5                	bnez	a1,20000024 <FastMultiply+0x4>
}
20000032:	8082                	ret

20000034 <DMA1_Channel4_IRQHandler>:

// DMA transfer completion interrupt. It will fire when the DMA transfer is
// complete. We use it just to blink the LED
__attribute__((interrupt)) __attribute__((section(".srodata")))
void DMA1_Channel4_IRQHandler(void)
{
20000034:	1151                	addi	sp,sp,-12
20000036:	c23a                	sw	a4,4(sp)
	// Clear flag
	DMA1->INTFCR |= DMA_CTCIF4;
20000038:	40020737          	lui	a4,0x40020
{
2000003c:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000003e:	435c                	lw	a5,4(a4)
{
20000040:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000042:	6689                	lui	a3,0x2
20000044:	8fd5                	or	a5,a5,a3
20000046:	c35c                	sw	a5,4(a4)

	// Blink LED
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000048:	400117b7          	lui	a5,0x40011
2000004c:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
20000050:	47d8                	lw	a4,12(a5)
}
20000052:	46a2                	lw	a3,8(sp)
	GPIOD->OUTDR ^= 1<<LED_PIN;
20000054:	04074713          	xori	a4,a4,64
20000058:	c7d8                	sw	a4,12(a5)
}
2000005a:	4712                	lw	a4,4(sp)
2000005c:	4782                	lw	a5,0(sp)
2000005e:	0131                	addi	sp,sp,12
20000060:	30200073          	mret
