
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	5350006f          	j	d34 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0dfe                	slli	s11,s11,0x1f
   a:	0000                	unimp
   c:	0da6                	slli	s11,s11,0x9
	...
  2e:	0000                	unimp
  30:	1e54                	addi	a3,sp,820
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0da6                	slli	s11,s11,0x9
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0da6                	slli	s11,s11,0x9
  42:	0000                	unimp
  44:	0da6                	slli	s11,s11,0x9
  46:	0000                	unimp
  48:	0da6                	slli	s11,s11,0x9
  4a:	0000                	unimp
  4c:	0da6                	slli	s11,s11,0x9
  4e:	0000                	unimp
  50:	0da6                	slli	s11,s11,0x9
  52:	0000                	unimp
  54:	0da6                	slli	s11,s11,0x9
  56:	0000                	unimp
  58:	0da6                	slli	s11,s11,0x9
  5a:	0000                	unimp
  5c:	0da6                	slli	s11,s11,0x9
  5e:	0000                	unimp
  60:	1e86                	slli	t4,t4,0x21
  62:	0000                	unimp
  64:	0da6                	slli	s11,s11,0x9
  66:	0000                	unimp
  68:	0da6                	slli	s11,s11,0x9
  6a:	0000                	unimp
  6c:	0da6                	slli	s11,s11,0x9
  6e:	0000                	unimp
  70:	0da6                	slli	s11,s11,0x9
  72:	0000                	unimp
  74:	0da6                	slli	s11,s11,0x9
  76:	0000                	unimp
  78:	0da6                	slli	s11,s11,0x9
  7a:	0000                	unimp
  7c:	0da6                	slli	s11,s11,0x9
  7e:	0000                	unimp
  80:	0da6                	slli	s11,s11,0x9
  82:	0000                	unimp
  84:	0da6                	slli	s11,s11,0x9
  86:	0000                	unimp
  88:	0da6                	slli	s11,s11,0x9
  8a:	0000                	unimp
  8c:	0da6                	slli	s11,s11,0x9
  8e:	0000                	unimp
  90:	0da6                	slli	s11,s11,0x9
  92:	0000                	unimp
  94:	0da6                	slli	s11,s11,0x9
  96:	0000                	unimp
  98:	0da6                	slli	s11,s11,0x9
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	andi	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srli	a1,a1,0x1
      ae:	0606                	slli	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	slli	a2,a2,0x1
      d4:	0686                	slli	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srli	a3,a3,0x1
      e6:	8205                	srli	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
{
     136:	1131                	addi	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
	int overflow = 0;
     144:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     146:	cab5                	beqz	a3,1ba <mini_pad+0x84>
	if(len > pad_to) {
     148:	0096d463          	bge	a3,s1,150 <mini_pad+0x1a>
     14c:	84b6                	mv	s1,a3
		overflow = 1;
     14e:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     150:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     154:	00045363          	bgez	s0,15a <mini_pad+0x24>
     158:	4401                	li	s0,0
     15a:	8622                	mv	a2,s0
     15c:	853a                	mv	a0,a4
     15e:	c23e                	sw	a5,4(sp)
     160:	c01a                	sw	t1,0(sp)
     162:	6eb000ef          	jal	ra,104c <memset>
     166:	4302                	lw	t1,0(sp)
     168:	4792                	lw	a5,4(sp)
     16a:	872a                	mv	a4,a0
     16c:	008506b3          	add	a3,a0,s0
     170:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     172:	40c485b3          	sub	a1,s1,a2
     176:	04b04463          	bgtz	a1,1be <mini_pad+0x88>
     17a:	0004d363          	bgez	s1,180 <mini_pad+0x4a>
     17e:	4481                	li	s1,0
     180:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     184:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     188:	02030463          	beqz	t1,1b0 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     18c:	02c77263          	bgeu	a4,a2,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     190:	02a00793          	li	a5,42
     194:	fef60fa3          	sb	a5,-1(a2)
     198:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     19c:	00d77a63          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1a0:	fef60f23          	sb	a5,-2(a2)
     1a4:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     1a8:	00d77463          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1ac:	fef60ea3          	sb	a5,-3(a2)
}
     1b0:	40c2                	lw	ra,16(sp)
     1b2:	4432                	lw	s0,12(sp)
     1b4:	44a2                	lw	s1,8(sp)
     1b6:	0151                	addi	sp,sp,20
     1b8:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1ba:	86a6                	mv	a3,s1
     1bc:	bf51                	j	150 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1be:	00c785b3          	add	a1,a5,a2
     1c2:	0005c503          	lbu	a0,0(a1)
     1c6:	00c685b3          	add	a1,a3,a2
     1ca:	0605                	addi	a2,a2,1
     1cc:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1d0:	b74d                	j	172 <mini_pad+0x3c>

000001d2 <_puts>:
{
     1d2:	832a                	mv	t1,a0
     1d4:	852e                	mv	a0,a1
	if(!buf) return len;
     1d6:	ce01                	beqz	a2,1ee <_puts+0x1c>
	char * p0 = b->buffer;
     1d8:	00062283          	lw	t0,0(a2)
	for (i = 0; i < len; i++) {
     1dc:	4701                	li	a4,0
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1de:	425c                	lw	a5,4(a2)
	for (i = 0; i < len; i++) {
     1e0:	00a74863          	blt	a4,a0,1f0 <_puts+0x1e>
	*(b->pbuffer) = 0;
     1e4:	00078023          	sb	zero,0(a5)
	return b->pbuffer - p0;
     1e8:	4248                	lw	a0,4(a2)
     1ea:	40550533          	sub	a0,a0,t0
}
     1ee:	8082                	ret
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
     1f0:	4614                	lw	a3,8(a2)
     1f2:	fff68593          	addi	a1,a3,-1
     1f6:	4214                	lw	a3,0(a2)
     1f8:	96ae                	add	a3,a3,a1
     1fa:	fed785e3          	beq	a5,a3,1e4 <_puts+0x12>
		*(b->pbuffer ++) = s[i];
     1fe:	00178693          	addi	a3,a5,1
     202:	c254                	sw	a3,4(a2)
     204:	00e306b3          	add	a3,t1,a4
     208:	0006c683          	lbu	a3,0(a3)
	for (i = 0; i < len; i++) {
     20c:	0705                	addi	a4,a4,1
		*(b->pbuffer ++) = s[i];
     20e:	00d78023          	sb	a3,0(a5)
	for (i = 0; i < len; i++) {
     212:	b7f1                	j	1de <_puts+0xc>

00000214 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     214:	e0000737          	lui	a4,0xe0000
     218:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     21c:	0f470693          	addi	a3,a4,244
     220:	0807f793          	andi	a5,a5,128
     224:	fbf5                	bnez	a5,218 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     226:	783027b7          	lui	a5,0x78302
     22a:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     22e:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     230:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     232:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     236:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     238:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     23a:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     23e:	0807f793          	andi	a5,a5,128
     242:	ffe5                	bnez	a5,23a <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     244:	00e557b3          	srl	a5,a0,a4
     248:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     24c:	03000793          	li	a5,48
     250:	00d35463          	bge	t1,a3,258 <PrintHex+0x44>
     254:	05700793          	li	a5,87
     258:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     25a:	07a2                	slli	a5,a5,0x8
     25c:	0857e793          	ori	a5,a5,133
     260:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     264:	1771                	addi	a4,a4,-4
     266:	fcb71ae3          	bne	a4,a1,23a <PrintHex+0x26>
}
     26a:	8082                	ret

0000026c <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     26c:	1101                	addi	sp,sp,-32
     26e:	ce06                	sw	ra,28(sp)
     270:	cc22                	sw	s0,24(sp)
     272:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     274:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     276:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     278:	00055763          	bgez	a0,286 <mini_itoa.part.0+0x1a>
     27c:	e689                	bnez	a3,286 <mini_itoa.part.0+0x1a>
		negative = 1;
     27e:	4785                	li	a5,1
		value = -value;
     280:	40a00333          	neg	t1,a0
		negative = 1;
     284:	c03e                	sw	a5,0(sp)
     286:	06100413          	li	s0,97
     28a:	c219                	beqz	a2,290 <mini_itoa.part.0+0x24>
     28c:	04100413          	li	s0,65
	int	negative = 0;
     290:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     292:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     294:	851a                	mv	a0,t1
     296:	c83a                	sw	a4,16(sp)
     298:	c21a                	sw	t1,4(sp)
     29a:	c62e                	sw	a1,12(sp)
     29c:	c41a                	sw	t1,8(sp)
     29e:	35b9                	jal	ec <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2a0:	47a5                	li	a5,9
     2a2:	4322                	lw	t1,8(sp)
     2a4:	45b2                	lw	a1,12(sp)
     2a6:	4742                	lw	a4,16(sp)
     2a8:	0ff57693          	andi	a3,a0,255
     2ac:	06a7e163          	bltu	a5,a0,30e <mini_itoa.part.0+0xa2>
     2b0:	03068693          	addi	a3,a3,48
     2b4:	0ff6f693          	andi	a3,a3,255
     2b8:	00148793          	addi	a5,s1,1
     2bc:	00d48023          	sb	a3,0(s1)
		value /= radix;
     2c0:	851a                	mv	a0,t1
     2c2:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2c4:	c63e                	sw	a5,12(sp)
		value /= radix;
     2c6:	c42e                	sw	a1,8(sp)
     2c8:	3be5                	jal	c0 <__hidden___udivsi3>
	} while (value > 0);
     2ca:	4692                	lw	a3,4(sp)
     2cc:	45a2                	lw	a1,8(sp)
     2ce:	47b2                	lw	a5,12(sp)
     2d0:	4742                	lw	a4,16(sp)
		value /= radix;
     2d2:	832a                	mv	t1,a0
	} while (value > 0);
     2d4:	02b6fb63          	bgeu	a3,a1,30a <mini_itoa.part.0+0x9e>
	if (negative)
     2d8:	4682                	lw	a3,0(sp)
     2da:	c699                	beqz	a3,2e8 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2dc:	02d00693          	li	a3,45
     2e0:	00d78023          	sb	a3,0(a5)
     2e4:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2e8:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2ec:	01f55693          	srli	a3,a0,0x1f
     2f0:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2f2:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2f6:	8685                	srai	a3,a3,0x1
     2f8:	4601                	li	a2,0
     2fa:	17fd                	addi	a5,a5,-1
     2fc:	00d64b63          	blt	a2,a3,312 <mini_itoa.part.0+0xa6>
}
     300:	40f2                	lw	ra,28(sp)
     302:	4462                	lw	s0,24(sp)
     304:	44d2                	lw	s1,20(sp)
     306:	6105                	addi	sp,sp,32
     308:	8082                	ret
	} while (value > 0);
     30a:	84be                	mv	s1,a5
     30c:	b761                	j	294 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     30e:	96a2                	add	a3,a3,s0
     310:	b755                	j	2b4 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     312:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     316:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     31a:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     31e:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     320:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     324:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     328:	bfc9                	j	2fa <mini_itoa.part.0+0x8e>

0000032a <i2c_error>:
/// the bit flags
/// @param none
/// @return i2c_err_t error value
static inline i2c_err_t i2c_error(void)
{
	if(I2C1->STAR1 & I2C_STAR1_BERR)  {I2C1->STAR1 &= ~I2C_STAR1_BERR;  return I2C_ERR_BERR;}
     32a:	400057b7          	lui	a5,0x40005
     32e:	4147d703          	lhu	a4,1044(a5) # 40005414 <_eusrstack+0x20004c14>
     332:	40078793          	addi	a5,a5,1024
     336:	10077713          	andi	a4,a4,256
     33a:	cf09                	beqz	a4,354 <i2c_error+0x2a>
     33c:	0147d703          	lhu	a4,20(a5)
     340:	4505                	li	a0,1
     342:	0742                	slli	a4,a4,0x10
     344:	8341                	srli	a4,a4,0x10
     346:	eff77713          	andi	a4,a4,-257
     34a:	0742                	slli	a4,a4,0x10
     34c:	8341                	srli	a4,a4,0x10
     34e:	00e79a23          	sh	a4,20(a5)
     352:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_AF)    {I2C1->STAR1 &= ~I2C_STAR1_AF;    return I2C_ERR_NACK;}
     354:	0147d703          	lhu	a4,20(a5)
     358:	40077713          	andi	a4,a4,1024
     35c:	cf09                	beqz	a4,376 <i2c_error+0x4c>
     35e:	0147d703          	lhu	a4,20(a5)
     362:	4509                	li	a0,2
     364:	0742                	slli	a4,a4,0x10
     366:	8341                	srli	a4,a4,0x10
     368:	bff77713          	andi	a4,a4,-1025
     36c:	0742                	slli	a4,a4,0x10
     36e:	8341                	srli	a4,a4,0x10
     370:	00e79a23          	sh	a4,20(a5)
     374:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_ARLO)  {I2C1->STAR1 &= ~I2C_STAR1_ARLO;  return I2C_ERR_ARLO;}
     376:	0147d703          	lhu	a4,20(a5)
     37a:	20077713          	andi	a4,a4,512
     37e:	cf09                	beqz	a4,398 <i2c_error+0x6e>
     380:	0147d703          	lhu	a4,20(a5)
     384:	450d                	li	a0,3
     386:	0742                	slli	a4,a4,0x10
     388:	8341                	srli	a4,a4,0x10
     38a:	dff77713          	andi	a4,a4,-513
     38e:	0742                	slli	a4,a4,0x10
     390:	8341                	srli	a4,a4,0x10
     392:	00e79a23          	sh	a4,20(a5)
     396:	8082                	ret
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     398:	0147d703          	lhu	a4,20(a5)

	return I2C_OK;
     39c:	4501                	li	a0,0
	if(I2C1->STAR1 & I2C_STAR1_OVR)   {I2C1->STAR1 &= ~I2C_STAR1_OVR;   return I2C_ERR_OVR;}
     39e:	832d                	srli	a4,a4,0xb
     3a0:	8b05                	andi	a4,a4,1
     3a2:	cf01                	beqz	a4,3ba <i2c_error+0x90>
     3a4:	0147d703          	lhu	a4,20(a5)
     3a8:	76fd                	lui	a3,0xfffff
     3aa:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
     3ae:	0742                	slli	a4,a4,0x10
     3b0:	8341                	srli	a4,a4,0x10
     3b2:	8f75                	and	a4,a4,a3
     3b4:	00e79a23          	sh	a4,20(a5)
     3b8:	4511                	li	a0,4
}
     3ba:	8082                	ret

000003bc <i2c_send_addr_write>:
/// @return i2c_err_r error status. I2C_OK on success
static inline i2c_err_t i2c_send_addr_write(const i2c_device_t *dev)
{
	i2c_err_t i2c_ret = I2C_OK;
	
	if(dev->type == I2C_ADDR_7BIT)
     3bc:	415c                	lw	a5,4(a0)
     3be:	e7b1                	bnez	a5,40a <i2c_send_addr_write+0x4e>
	{
		// Send the Address and wait for it to finish transmitting
		I2C1->DATAR = (dev->addr << 1) & 0xFE;
     3c0:	00855783          	lhu	a5,8(a0)
     3c4:	40005737          	lui	a4,0x40005
     3c8:	0786                	slli	a5,a5,0x1
     3ca:	0fe7f793          	andi	a5,a5,254
     3ce:	40f71823          	sh	a5,1040(a4) # 40005410 <_eusrstack+0x20004c10>
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3d2:	6789                	lui	a5,0x2
     3d4:	71078793          	addi	a5,a5,1808 # 2710 <_data_lma+0x3bc>
	return (status & status_mask) == status_mask; 
     3d8:	00070637          	lui	a2,0x70
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     3dc:	c6f1ac23          	sw	a5,-904(gp) # 20000074 <_i2c_timeout>
     3e0:	4501                	li	a0,0
     3e2:	c7818693          	addi	a3,gp,-904 # 20000074 <_i2c_timeout>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     3e6:	40005337          	lui	t1,0x40005
	return (status & status_mask) == status_mask; 
     3ea:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.d894f163+0x68e45>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     3ee:	41435703          	lhu	a4,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     3f2:	01071593          	slli	a1,a4,0x10
     3f6:	41835703          	lhu	a4,1048(t1)
     3fa:	81c1                	srli	a1,a1,0x10
     3fc:	0742                	slli	a4,a4,0x10
     3fe:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
     400:	8f71                	and	a4,a4,a2
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     402:	00c71663          	bne	a4,a2,40e <i2c_send_addr_write+0x52>
     406:	c111                	beqz	a0,40a <i2c_send_addr_write+0x4e>
     408:	c29c                	sw	a5,0(a3)
	i2c_err_t i2c_ret = I2C_OK;
     40a:	4501                	li	a0,0
		uint8_t upper = 0xF0 | ((dev->addr & 0x0300) >> 7);
		uint8_t lower = dev->addr & 0xFF;
	}
*/
	return i2c_ret;
}
     40c:	8082                	ret
		I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED), i2c_ret);
     40e:	17fd                	addi	a5,a5,-1
     410:	4505                	li	a0,1
     412:	fff1                	bnez	a5,3ee <i2c_send_addr_write+0x32>
{
     414:	1151                	addi	sp,sp,-12
     416:	c406                	sw	ra,8(sp)
     418:	0006a023          	sw	zero,0(a3)
	i2c_err_t i2c_err = i2c_error();
     41c:	3739                	jal	32a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     41e:	e111                	bnez	a0,422 <i2c_send_addr_write+0x66>
     420:	4515                	li	a0,5
}
     422:	40a2                	lw	ra,8(sp)
     424:	0131                	addi	sp,sp,12
     426:	8082                	ret

00000428 <i2c_ping>:
	return i2c_error();
}


i2c_err_t i2c_ping(const uint8_t addr)
{
     428:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     42a:	6789                	lui	a5,0x2
	// Create a temporary i2c device using passed addr
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     42c:	c402                	sw	zero,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     42e:	71078793          	addi	a5,a5,1808 # 2710 <_data_lma+0x3bc>
     432:	c6f1ac23          	sw	a5,-904(gp) # 20000074 <_i2c_timeout>
{
     436:	ca06                	sw	ra,20(sp)
	i2c_device_t tmp_dev = {.type = I2C_ADDR_7BIT, .addr = addr};
     438:	c002                	sw	zero,0(sp)
     43a:	c202                	sw	zero,4(sp)
     43c:	00a11423          	sh	a0,8(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     440:	4601                	li	a2,0
     442:	c7818713          	addi	a4,gp,-904 # 20000074 <_i2c_timeout>
     446:	400055b7          	lui	a1,0x40005
     44a:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     44e:	8a89                	andi	a3,a3,2
     450:	e689                	bnez	a3,45a <i2c_ping+0x32>
     452:	c211                	beqz	a2,456 <i2c_ping+0x2e>
     454:	c31c                	sw	a5,0(a4)
	i2c_err_t i2c_ret = I2C_OK;
     456:	4501                	li	a0,0
     458:	a809                	j	46a <i2c_ping+0x42>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     45a:	17fd                	addi	a5,a5,-1
     45c:	4605                	li	a2,1
     45e:	f7f5                	bnez	a5,44a <i2c_ping+0x22>
     460:	00072023          	sw	zero,0(a4)
	i2c_err_t i2c_err = i2c_error();
     464:	35d9                	jal	32a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     466:	e111                	bnez	a0,46a <i2c_ping+0x42>
     468:	4515                	li	a0,5
	I2C1->CTLR1 |= I2C_CTLR1_START;
     46a:	40005737          	lui	a4,0x40005
     46e:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     472:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     476:	07c2                	slli	a5,a5,0x10
     478:	83c1                	srli	a5,a5,0x10
     47a:	1007e793          	ori	a5,a5,256
     47e:	40f71023          	sh	a5,1024(a4)
	return (status & status_mask) == status_mask; 
     482:	00030737          	lui	a4,0x30
     486:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     488:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     48c:	01079693          	slli	a3,a5,0x10
     490:	4185d783          	lhu	a5,1048(a1)
     494:	82c1                	srli	a3,a3,0x10
     496:	07c2                	slli	a5,a5,0x10
     498:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     49a:	8ff9                	and	a5,a5,a4
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     49c:	fee796e3          	bne	a5,a4,488 <i2c_ping+0x60>
	// Wait for the bus to become free
	i2c_err_t i2c_ret = i2c_wait();

	// Send the address and get the status
	i2c_start();
	if(i2c_ret == I2C_OK) i2c_ret = i2c_send_addr_write(&tmp_dev);
     4a0:	e119                	bnez	a0,4a6 <i2c_ping+0x7e>
     4a2:	850a                	mv	a0,sp
     4a4:	3f21                	jal	3bc <i2c_send_addr_write>
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     4a6:	40005737          	lui	a4,0x40005
     4aa:	40075783          	lhu	a5,1024(a4) # 40005400 <_eusrstack+0x20004c00>

	// Signal a STOP
	i2c_stop();

	return i2c_ret;
}
     4ae:	40d2                	lw	ra,20(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     4b0:	07c2                	slli	a5,a5,0x10
     4b2:	83c1                	srli	a5,a5,0x10
     4b4:	2007e793          	ori	a5,a5,512
     4b8:	40f71023          	sh	a5,1024(a4)
}
     4bc:	0161                	addi	sp,sp,24
     4be:	8082                	ret

000004c0 <i2c_write_raw.constprop.0>:
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4c0:	6789                	lui	a5,0x2

	return i2c_ret;
}


i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     4c2:	1121                	addi	sp,sp,-24
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4c4:	71078793          	addi	a5,a5,1808 # 2710 <_data_lma+0x3bc>
i2c_err_t i2c_write_raw(const i2c_device_t *dev,    const uint8_t *buf,
     4c8:	c626                	sw	s1,12(sp)
     4ca:	c22e                	sw	a1,4(sp)
     4cc:	ca06                	sw	ra,20(sp)
     4ce:	c822                	sw	s0,16(sp)
     4d0:	c02a                	sw	a0,0(sp)
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     4d2:	c6f1ac23          	sw	a5,-904(gp) # 20000074 <_i2c_timeout>
     4d6:	4601                	li	a2,0
     4d8:	c7818493          	addi	s1,gp,-904 # 20000074 <_i2c_timeout>
     4dc:	400055b7          	lui	a1,0x40005
     4e0:	4185d683          	lhu	a3,1048(a1) # 40005418 <_eusrstack+0x20004c18>
     4e4:	8a89                	andi	a3,a3,2
     4e6:	e6bd                	bnez	a3,554 <i2c_write_raw.constprop.0+0x94>
     4e8:	c211                	beqz	a2,4ec <i2c_write_raw.constprop.0+0x2c>
     4ea:	c09c                	sw	a5,0(s1)
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4ec:	400056b7          	lui	a3,0x40005
     4f0:	4006d783          	lhu	a5,1024(a3) # 40005400 <_eusrstack+0x20004c00>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     4f4:	400055b7          	lui	a1,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     4f8:	07c2                	slli	a5,a5,0x10
     4fa:	83c1                	srli	a5,a5,0x10
     4fc:	1007e793          	ori	a5,a5,256
     500:	40f69023          	sh	a5,1024(a3)
	return (status & status_mask) == status_mask; 
     504:	000306b7          	lui	a3,0x30
     508:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     50a:	4145d783          	lhu	a5,1044(a1) # 40005414 <_eusrstack+0x20004c14>
     50e:	01079613          	slli	a2,a5,0x10
     512:	4185d783          	lhu	a5,1048(a1)
     516:	8241                	srli	a2,a2,0x10
     518:	07c2                	slli	a5,a5,0x10
     51a:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
     51c:	8ff5                	and	a5,a5,a3
	while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     51e:	fed796e3          	bne	a5,a3,50a <i2c_write_raw.constprop.0+0x4a>
{
	// Wait for the I2C Bus the be Available
	i2c_err_t i2c_ret = i2c_wait();

	// Start the I2C Bus and send the Write Address byte
	if(i2c_ret == I2C_OK) { i2c_start(); i2c_ret = i2c_send_addr_write(dev); }
     522:	c2018513          	addi	a0,gp,-992 # 2000001c <dev_ssd1306>
     526:	3d59                	jal	3bc <i2c_send_addr_write>
     528:	842a                	mv	s0,a0

	// Write the data
	if(i2c_ret == I2C_OK)
	{
		uint8_t cbyte = 0;
     52a:	4601                	li	a2,0
	if(i2c_ret == I2C_OK)
     52c:	e91d                	bnez	a0,562 <i2c_write_raw.constprop.0+0xa2>
		while(cbyte < len)
     52e:	4792                	lw	a5,4(sp)
     530:	02f67963          	bgeu	a2,a5,562 <i2c_write_raw.constprop.0+0xa2>
		{
			// Write the byte and wait for it to finish transmitting
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     534:	6689                	lui	a3,0x2
     536:	71068693          	addi	a3,a3,1808 # 2710 <_data_lma+0x3bc>
     53a:	c094                	sw	a3,0(s1)
     53c:	4501                	li	a0,0
     53e:	40005337          	lui	t1,0x40005
     542:	41435583          	lhu	a1,1044(t1) # 40005414 <_eusrstack+0x20004c14>
     546:	0805f593          	andi	a1,a1,128
     54a:	c5b9                	beqz	a1,598 <i2c_write_raw.constprop.0+0xd8>
     54c:	c111                	beqz	a0,550 <i2c_write_raw.constprop.0+0x90>
     54e:	c094                	sw	a3,0(s1)
     550:	4501                	li	a0,0
     552:	a8a9                	j	5ac <i2c_write_raw.constprop.0+0xec>
	I2C_TIMEOUT_WAIT_FOR((I2C1->STAR2 & I2C_STAR2_BUSY), i2c_ret);
     554:	17fd                	addi	a5,a5,-1
     556:	4605                	li	a2,1
     558:	f7c1                	bnez	a5,4e0 <i2c_write_raw.constprop.0+0x20>
	i2c_err_t i2c_err = i2c_error();
     55a:	3bc1                	jal	32a <i2c_error>
     55c:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     55e:	e111                	bnez	a0,562 <i2c_write_raw.constprop.0+0xa2>
     560:	4415                	li	s0,5
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
		}
	}

	// Wait for the bus to finish transmitting
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     562:	6689                	lui	a3,0x2
     564:	71068693          	addi	a3,a3,1808 # 2710 <_data_lma+0x3bc>
	return (status & status_mask) == status_mask; 
     568:	000705b7          	lui	a1,0x70
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     56c:	c094                	sw	a3,0(s1)
     56e:	4301                	li	t1,0
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     570:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     574:	08458593          	addi	a1,a1,132 # 70084 <lib_i2c.c.d894f163+0x68e47>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     578:	4142d603          	lhu	a2,1044(t0) # 40005414 <_eusrstack+0x20004c14>
     57c:	01061513          	slli	a0,a2,0x10
     580:	4182d603          	lhu	a2,1048(t0)
     584:	8141                	srli	a0,a0,0x10
     586:	0642                	slli	a2,a2,0x10
     588:	8e49                	or	a2,a2,a0
	return (status & status_mask) == status_mask; 
     58a:	8e6d                	and	a2,a2,a1
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     58c:	04b61363          	bne	a2,a1,5d2 <i2c_write_raw.constprop.0+0x112>
     590:	04030a63          	beqz	t1,5e4 <i2c_write_raw.constprop.0+0x124>
     594:	c094                	sw	a3,0(s1)
     596:	a0b9                	j	5e4 <i2c_write_raw.constprop.0+0x124>
			I2C_TIMEOUT_WAIT_FOR(!(I2C1->STAR1 & I2C_STAR1_TXE), i2c_ret);
     598:	16fd                	addi	a3,a3,-1
     59a:	4505                	li	a0,1
     59c:	f2dd                	bnez	a3,542 <i2c_write_raw.constprop.0+0x82>
     59e:	c432                	sw	a2,8(sp)
     5a0:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     5a4:	3359                	jal	32a <i2c_error>
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     5a6:	4622                	lw	a2,8(sp)
     5a8:	e111                	bnez	a0,5ac <i2c_write_raw.constprop.0+0xec>
     5aa:	4515                	li	a0,5
			I2C1->DATAR = buf[cbyte];
     5ac:	4782                	lw	a5,0(sp)
     5ae:	00c786b3          	add	a3,a5,a2
     5b2:	0006c583          	lbu	a1,0(a3)
			++cbyte;
     5b6:	0605                	addi	a2,a2,1
			I2C1->DATAR = buf[cbyte];
     5b8:	400056b7          	lui	a3,0x40005
     5bc:	40b69823          	sh	a1,1040(a3) # 40005410 <_eusrstack+0x20004c10>
			++cbyte;
     5c0:	0ff67613          	andi	a2,a2,255
     5c4:	c432                	sw	a2,8(sp)
			if(i2c_ret != I2C_OK || (i2c_ret = i2c_error()) != I2C_OK) break;
     5c6:	e501                	bnez	a0,5ce <i2c_write_raw.constprop.0+0x10e>
     5c8:	338d                	jal	32a <i2c_error>
     5ca:	4622                	lw	a2,8(sp)
     5cc:	d12d                	beqz	a0,52e <i2c_write_raw.constprop.0+0x6e>
     5ce:	842a                	mv	s0,a0
     5d0:	bf49                	j	562 <i2c_write_raw.constprop.0+0xa2>
	I2C_TIMEOUT_WAIT_FOR(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED), i2c_ret);
     5d2:	16fd                	addi	a3,a3,-1
     5d4:	4305                	li	t1,1
     5d6:	f2cd                	bnez	a3,578 <i2c_write_raw.constprop.0+0xb8>
     5d8:	0004a023          	sw	zero,0(s1)
	i2c_err_t i2c_err = i2c_error();
     5dc:	33b9                	jal	32a <i2c_error>
     5de:	842a                	mv	s0,a0
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     5e0:	e111                	bnez	a0,5e4 <i2c_write_raw.constprop.0+0x124>
     5e2:	4415                	li	s0,5
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5e4:	400056b7          	lui	a3,0x40005
     5e8:	4006d703          	lhu	a4,1024(a3) # 40005400 <_eusrstack+0x20004c00>

	return i2c_ret;



}
     5ec:	40d2                	lw	ra,20(sp)
     5ee:	8522                	mv	a0,s0
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5f0:	0742                	slli	a4,a4,0x10
}
     5f2:	4442                	lw	s0,16(sp)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     5f4:	8341                	srli	a4,a4,0x10
     5f6:	20076713          	ori	a4,a4,512
     5fa:	40e69023          	sh	a4,1024(a3)
}
     5fe:	44b2                	lw	s1,12(sp)
     600:	0161                	addi	sp,sp,24
     602:	8082                	ret

00000604 <ssd1306_cmd>:
	.addr = 0x3C,				// Default address for SSD1306
	.regb = 1,
};

/* send OLED command byte */
uint8_t ssd1306_cmd(uint8_t cmd) {
     604:	1141                	addi	sp,sp,-16
	uint8_t pkt[2];
	pkt[0] = 0;
	pkt[1] = cmd;
     606:	00a100a3          	sb	a0,1(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     60a:	4589                	li	a1,2
     60c:	850a                	mv	a0,sp
uint8_t ssd1306_cmd(uint8_t cmd) {
     60e:	c606                	sw	ra,12(sp)
	pkt[0] = 0;
     610:	00010023          	sb	zero,0(sp)
	return i2c_write_raw(&dev_ssd1306, pkt, 2);
     614:	3575                	jal	4c0 <i2c_write_raw.constprop.0>
}
     616:	40b2                	lw	ra,12(sp)
     618:	0ff57513          	andi	a0,a0,255
     61c:	0141                	addi	sp,sp,16
     61e:	8082                	ret

00000620 <Neo_render_colorFlashing.constprop.0>:

    return led_arr[ledIdx].packed;
}

uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
    if (systick_handleTimeout(&fr->ref_time, fr->frame_duration)) {
     620:	c2c18693          	addi	a3,gp,-980 # 20000028 <leds_frame>
	uint32_t now = millis();
     624:	c901a603          	lw	a2,-880(gp) # 2000008c <systick_millis>
	if (now - *ref_time > duration) {
     628:	4a9c                	lw	a5,16(a3)
     62a:	42cc                	lw	a1,4(a3)
uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
     62c:	fc410113          	addi	sp,sp,-60
     630:	dc06                	sw	ra,56(sp)
     632:	da22                	sw	s0,52(sp)
     634:	d826                	sw	s1,48(sp)
     636:	c82a                	sw	a0,16(sp)
	if (now - *ref_time > duration) {
     638:	40f607b3          	sub	a5,a2,a5
     63c:	0cf5fc63          	bgeu	a1,a5,714 <Neo_render_colorFlashing.constprop.0+0xf4>
     640:	c2c18493          	addi	s1,gp,-980 # 20000028 <leds_frame>
    return ani->colors[ani->ref_index];
     644:	c5818593          	addi	a1,gp,-936 # 20000054 <color_ani>
        fr->frame_value += 1;
     648:	0094c783          	lbu	a5,9(s1)
    return ani->colors[ani->ref_index];
     64c:	0055c703          	lbu	a4,5(a1)
		*ref_time = now;
     650:	c890                	sw	a2,16(s1)
    return ani->colors[ani->ref_index];
     652:	4190                	lw	a2,0(a1)
        fr->frame_value += 1;
     654:	0785                	addi	a5,a5,1
     656:	0ff7f793          	andi	a5,a5,255
    return ani->colors[ani->ref_index];
     65a:	00271513          	slli	a0,a4,0x2
        fr->frame_value += 1;
     65e:	00f484a3          	sb	a5,9(s1)
    return ani->colors[ani->ref_index];
     662:	962a                	add	a2,a2,a0
     664:	c43a                	sw	a4,8(sp)
     666:	00064703          	lbu	a4,0(a2)
     66a:	420c                	lw	a1,0(a2)
        RGB_t color = animation_currentColor(ani);

        for (int i=0; i < NR_LEDS; i++) {
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     66c:	00879513          	slli	a0,a5,0x8
    return ani->colors[ani->ref_index];
     670:	c63a                	sw	a4,12(sp)
     672:	00164703          	lbu	a4,1(a2)
     676:	d62e                	sw	a1,44(sp)
     678:	d02e                	sw	a1,32(sp)
     67a:	c23a                	sw	a4,4(sp)
     67c:	00264703          	lbu	a4,2(a2)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     680:	06400593          	li	a1,100
     684:	8d1d                	sub	a0,a0,a5
     686:	ca3e                	sw	a5,20(sp)
    return ani->colors[ani->ref_index];
     688:	c03a                	sw	a4,0(sp)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     68a:	343d                	jal	b8 <__divsi3>
     68c:	0ff57593          	andi	a1,a0,255
     690:	6509                	lui	a0,0x2
     692:	21850513          	addi	a0,a0,536 # 2218 <SIN_LUT2>
     696:	952e                	add	a0,a0,a1
     698:	00054583          	lbu	a1,0(a0)
     69c:	47d2                	lw	a5,20(sp)
     69e:	0f418693          	addi	a3,gp,244 # 200004f0 <led_arr>
     6a2:	c5818413          	addi	s0,gp,-936 # 20000054 <color_ani>
     6a6:	ce3e                	sw	a5,28(sp)
     6a8:	47b2                	lw	a5,12(sp)
     6aa:	cc36                	sw	a3,24(sp)
     6ac:	ca2e                	sw	a1,20(sp)
     6ae:	02f10023          	sb	a5,32(sp)
     6b2:	4792                	lw	a5,4(sp)
     6b4:	02f100a3          	sb	a5,33(sp)
     6b8:	4782                	lw	a5,0(sp)
     6ba:	02f10123          	sb	a5,34(sp)
     6be:	5502                	lw	a0,32(sp)
     6c0:	d22a                	sw	a0,36(sp)
     6c2:	4532                	lw	a0,12(sp)
     6c4:	3af1                	jal	a0 <__mulsi3>
     6c6:	8521                	srai	a0,a0,0x8
     6c8:	45d2                	lw	a1,20(sp)
     6ca:	02a10223          	sb	a0,36(sp)
     6ce:	4512                	lw	a0,4(sp)
     6d0:	3ac1                	jal	a0 <__mulsi3>
     6d2:	8521                	srai	a0,a0,0x8
     6d4:	45d2                	lw	a1,20(sp)
     6d6:	02a102a3          	sb	a0,37(sp)
     6da:	4502                	lw	a0,0(sp)
     6dc:	32d1                	jal	a0 <__mulsi3>
     6de:	8521                	srai	a0,a0,0x8
     6e0:	02a10323          	sb	a0,38(sp)
     6e4:	46e2                	lw	a3,24(sp)
     6e6:	5512                	lw	a0,36(sp)
        for (int i=0; i < NR_LEDS; i++) {
     6e8:	10c18613          	addi	a2,gp,268 # 20000508 <printBuff>
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     6ec:	c288                	sw	a0,0(a3)
        for (int i=0; i < NR_LEDS; i++) {
     6ee:	0691                	addi	a3,a3,4
     6f0:	45d2                	lw	a1,20(sp)
     6f2:	47f2                	lw	a5,28(sp)
     6f4:	fad619e3          	bne	a2,a3,6a6 <Neo_render_colorFlashing.constprop.0+0x86>
        }

        if (fr->frame_value >= 100) {
     6f8:	06300693          	li	a3,99
     6fc:	00f6fc63          	bgeu	a3,a5,714 <Neo_render_colorFlashing.constprop.0+0xf4>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     700:	47a2                	lw	a5,8(sp)
     702:	00444583          	lbu	a1,4(s0)
            fr->frame_value = 0;
     706:	000484a3          	sb	zero,9(s1)
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     70a:	00178513          	addi	a0,a5,1
     70e:	3409                	jal	110 <__modsi3>
     710:	00a402a3          	sb	a0,5(s0)

            animation_step(ani);
        }
    }

    return led_arr[ledIdx].packed;
     714:	47c2                	lw	a5,16(sp)
}
     716:	50e2                	lw	ra,56(sp)
     718:	5452                	lw	s0,52(sp)
    return led_arr[ledIdx].packed;
     71a:	00279513          	slli	a0,a5,0x2
     71e:	0f418793          	addi	a5,gp,244 # 200004f0 <led_arr>
     722:	953e                	add	a0,a0,a5
}
     724:	4108                	lw	a0,0(a0)
     726:	54c2                	lw	s1,48(sp)
     728:	03c10113          	addi	sp,sp,60
     72c:	8082                	ret

0000072e <WS2812FillBuffSec>:
		0b1110100010001000, 0b1110100010001110, 0b1110100011101000, 0b1110100011101110,
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };
#endif

	int i;
	uint16_t * end = ptr + numhalfwords;
     72e:	0586                	slli	a1,a1,0x1
{
     730:	711d                	addi	sp,sp,-96
	uint16_t * end = ptr + numhalfwords;
     732:	00b507b3          	add	a5,a0,a1
     736:	c83e                	sw	a5,16(sp)
	int ledcount = WS2812LEDs;
     738:	c741a783          	lw	a5,-908(gp) # 20000070 <WS2812LEDs>
{
     73c:	caa6                	sw	s1,84(sp)
     73e:	cca2                	sw	s0,88(sp)
	int ledcount = WS2812LEDs;
     740:	ce3e                	sw	a5,28(sp)
	int place = WS2812LEDPlace;
     742:	c7018713          	addi	a4,gp,-912 # 2000006c <WS2812LEDPlace>
     746:	4304                	lw	s1,0(a4)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
     748:	c7018793          	addi	a5,gp,-912 # 2000006c <WS2812LEDPlace>
{
     74c:	ce86                	sw	ra,92(sp)
     74e:	842a                	mv	s0,a0
     750:	d832                	sw	a2,48(sp)
     752:	da3e                	sw	a5,52(sp)
	while( place < 0 && ptr != end )
     754:	0604c363          	bltz	s1,7ba <WS2812FillBuffSec+0x8c>
     758:	c026                	sw	s1,0(sp)
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
     75a:	47c2                	lw	a5,16(sp)
     75c:	4482                	lw	s1,0(sp)
     75e:	06f40163          	beq	s0,a5,7c0 <WS2812FillBuffSec+0x92>
	{
		if( place >= ledcount )
     762:	4782                	lw	a5,0(sp)
     764:	4772                	lw	a4,28(sp)
     766:	06e7c463          	blt	a5,a4,7ce <WS2812FillBuffSec+0xa0>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
     76a:	47c2                	lw	a5,16(sp)
     76c:	4581                	li	a1,0
     76e:	8522                	mv	a0,s0
     770:	40878633          	sub	a2,a5,s0
     774:	0d9000ef          	jal	ra,104c <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
     778:	57c2                	lw	a5,48(sp)
     77a:	c3b9                	beqz	a5,7c0 <WS2812FillBuffSec+0x92>
			{
				if( place == ledcount )
     77c:	4782                	lw	a5,0(sp)
     77e:	4772                	lw	a4,28(sp)
     780:	00e79a63          	bne	a5,a4,794 <WS2812FillBuffSec+0x66>
				{
					// Take the DMA out of circular mode and let it expire.
#if defined(CH57x) || defined(CH58x) || defined(CH59x)
					R8_SPI_INTER_EN &= ~RB_SPI_IE_DMA_END;  // Disable DMA end interrupt
#else
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
     784:	40020737          	lui	a4,0x40020
     788:	5b1c                	lw	a5,48(a4)
     78a:	fdf7f793          	andi	a5,a5,-33
     78e:	db1c                	sw	a5,48(a4)
#endif
					WS2812BLEDInUse = 0;
     790:	c601a623          	sw	zero,-916(gp) # 20000068 <WS2812BLEDInUse>
				}
				place++;
     794:	4782                	lw	a5,0(sp)
     796:	00178493          	addi	s1,a5,1
     79a:	a01d                	j	7c0 <WS2812FillBuffSec+0x92>
		(*ptr++) = 0;
     79c:	00041023          	sh	zero,0(s0)
		(*ptr++) = 0;
     7a0:	00041123          	sh	zero,2(s0)
		(*ptr++) = 0;
     7a4:	00041223          	sh	zero,4(s0)
		(*ptr++) = 0;
     7a8:	00041323          	sh	zero,6(s0)
		(*ptr++) = 0;
     7ac:	00041423          	sh	zero,8(s0)
		place++;
     7b0:	0485                	addi	s1,s1,1
     7b2:	0431                	addi	s0,s0,12
		(*ptr++) = 0;
     7b4:	fe041f23          	sh	zero,-2(s0)
		place++;
     7b8:	bf71                	j	754 <WS2812FillBuffSec+0x26>
	while( place < 0 && ptr != end )
     7ba:	47c2                	lw	a5,16(sp)
     7bc:	fef410e3          	bne	s0,a5,79c <WS2812FillBuffSec+0x6e>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
     7c0:	57d2                	lw	a5,52(sp)
}
     7c2:	40f6                	lw	ra,92(sp)
     7c4:	4466                	lw	s0,88(sp)
	WS2812LEDPlace = place;
     7c6:	c384                	sw	s1,0(a5)
}
     7c8:	44d6                	lw	s1,84(sp)
     7ca:	6125                	addi	sp,sp,96
     7cc:	8082                	ret
    color_ani.ref_index = 0;
    memset(led_arr, 0, sizeof(led_arr));
}

uint32_t WS2812BLEDCallback(int ledIdx){
    leds_frame.frame_duration = 70;
     7ce:	c2c18793          	addi	a5,gp,-980 # 20000028 <leds_frame>
     7d2:	04600713          	li	a4,70
     7d6:	c3d8                	sw	a4,4(a5)

    switch (Neo_LedCmd) {
     7d8:	c541c703          	lbu	a4,-940(gp) # 20000050 <Neo_LedCmd>
     7dc:	4691                	li	a3,4
     7de:	c2c18793          	addi	a5,gp,-980 # 20000028 <leds_frame>
     7e2:	177d                	addi	a4,a4,-1
     7e4:	0ff77713          	andi	a4,a4,255
     7e8:	42e6eb63          	bltu	a3,a4,c1e <WS2812FillBuffSec+0x4f0>
     7ec:	6689                	lui	a3,0x2
     7ee:	070a                	slli	a4,a4,0x2
     7f0:	f0868693          	addi	a3,a3,-248 # 1f08 <DMA1_Channel3_IRQHandler+0x82>
     7f4:	9736                	add	a4,a4,a3
     7f6:	4318                	lw	a4,0(a4)
     7f8:	8702                	jr	a4
	uint32_t now = millis();
     7fa:	c901a683          	lw	a3,-880(gp) # 2000008c <systick_millis>
	if (now - *ref_time > duration) {
     7fe:	4b98                	lw	a4,16(a5)
     800:	04600613          	li	a2,70
     804:	40e68733          	sub	a4,a3,a4
     808:	0f418313          	addi	t1,gp,244 # 200004f0 <led_arr>
     80c:	06e67063          	bgeu	a2,a4,86c <WS2812FillBuffSec+0x13e>
		*ref_time = now;
     810:	cb94                	sw	a3,16(a5)
		return 1;
     812:	0f418493          	addi	s1,gp,244 # 200004f0 <led_arr>
        for (int i=0; i < NR_LEDS; i++) {
     816:	4681                	li	a3,0
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     818:	00e7c703          	lbu	a4,14(a5)
    return ani->colors[(index/steps) % ani->num_colors];
     81c:	4595                	li	a1,5
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     81e:	c436                	sw	a3,8(sp)
     820:	00d70533          	add	a0,a4,a3
    return ani->colors[(index/steps) % ani->num_colors];
     824:	0ff57513          	andi	a0,a0,255
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     828:	c23a                	sw	a4,4(sp)
    return ani->colors[(index/steps) % ani->num_colors];
     82a:	3859                	jal	c0 <__hidden___udivsi3>
     82c:	c5818613          	addi	a2,gp,-936 # 20000054 <color_ani>
     830:	00464583          	lbu	a1,4(a2)
     834:	0ff57513          	andi	a0,a0,255
     838:	38e1                	jal	110 <__modsi3>
     83a:	c5818613          	addi	a2,gp,-936 # 20000054 <color_ani>
     83e:	420c                	lw	a1,0(a2)
     840:	050a                	slli	a0,a0,0x2
        for (int i=0; i < NR_LEDS; i++) {
     842:	46a2                	lw	a3,8(sp)
    return ani->colors[(index/steps) % ani->num_colors];
     844:	952e                	add	a0,a0,a1
     846:	410c                	lw	a1,0(a0)
            led_arr[i] = animation_colorAt(ani, 5, i+fr->ref_index);
     848:	c08c                	sw	a1,0(s1)
    return ani->colors[(index/steps) % ani->num_colors];
     84a:	de2e                	sw	a1,60(sp)
     84c:	c4ae                	sw	a1,72(sp)
        for (int i=0; i < NR_LEDS; i++) {
     84e:	0685                	addi	a3,a3,1
     850:	4299                	li	t0,6
     852:	4712                	lw	a4,4(sp)
     854:	0491                	addi	s1,s1,4
     856:	c2c18793          	addi	a5,gp,-980 # 20000028 <leds_frame>
     85a:	0f418313          	addi	t1,gp,244 # 200004f0 <led_arr>
     85e:	fa569de3          	bne	a3,t0,818 <WS2812FillBuffSec+0xea>
        fr->ref_index += fr->frame_step;
     862:	0087c683          	lbu	a3,8(a5)
     866:	9736                	add	a4,a4,a3
     868:	00e78723          	sb	a4,14(a5)
    return led_arr[ledIdx].packed;
     86c:	4782                	lw	a5,0(sp)
     86e:	078a                	slli	a5,a5,0x2
     870:	933e                	add	t1,t1,a5
     872:	00032503          	lw	a0,0(t1)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     876:	00b55713          	srli	a4,a0,0xb
     87a:	6789                	lui	a5,0x2
     87c:	31878793          	addi	a5,a5,792 # 2318 <bitquartets.5>
     880:	8b79                	andi	a4,a4,30
     882:	973e                	add	a4,a4,a5
     884:	00075703          	lhu	a4,0(a4) # 40020000 <_eusrstack+0x2001f800>
		ptr += 6;
     888:	0431                	addi	s0,s0,12
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     88a:	fee41a23          	sh	a4,-12(s0)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     88e:	00755713          	srli	a4,a0,0x7
     892:	8b79                	andi	a4,a4,30
     894:	973e                	add	a4,a4,a5
     896:	00075703          	lhu	a4,0(a4)
     89a:	fee41b23          	sh	a4,-10(s0)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
     89e:	00355713          	srli	a4,a0,0x3
     8a2:	8b79                	andi	a4,a4,30
     8a4:	973e                	add	a4,a4,a5
     8a6:	00075703          	lhu	a4,0(a4)
     8aa:	fee41c23          	sh	a4,-8(s0)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
     8ae:	00f57713          	andi	a4,a0,15
     8b2:	0706                	slli	a4,a4,0x1
     8b4:	973e                	add	a4,a4,a5
     8b6:	00075703          	lhu	a4,0(a4)
     8ba:	fee41d23          	sh	a4,-6(s0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     8be:	01355713          	srli	a4,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     8c2:	813d                	srli	a0,a0,0xf
     8c4:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     8c6:	8b79                	andi	a4,a4,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     8c8:	953e                	add	a0,a0,a5
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     8ca:	973e                	add	a4,a4,a5
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     8cc:	00055783          	lhu	a5,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     8d0:	00075703          	lhu	a4,0(a4)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     8d4:	fef41f23          	sh	a5,-2(s0)
     8d8:	4782                	lw	a5,0(sp)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     8da:	fee41e23          	sh	a4,-4(s0)
		i += 6;
     8de:	0785                	addi	a5,a5,1
     8e0:	c03e                	sw	a5,0(sp)
     8e2:	bda5                	j	75a <WS2812FillBuffSec+0x2c>
	uint32_t now = millis();
     8e4:	c901a603          	lw	a2,-880(gp) # 2000008c <systick_millis>
	if (now - *ref_time > duration) {
     8e8:	4b98                	lw	a4,16(a5)
     8ea:	04600593          	li	a1,70
     8ee:	40e60733          	sub	a4,a2,a4
     8f2:	0f418693          	addi	a3,gp,244 # 200004f0 <led_arr>
     8f6:	06e5fe63          	bgeu	a1,a4,972 <WS2812FillBuffSec+0x244>
        led_arr[fr->prev_index] = COLOR_BLACK;       // Turn off previous LED
     8fa:	00d7c703          	lbu	a4,13(a5)
		*ref_time = now;
     8fe:	cb90                	sw	a2,16(a5)
    return ani->colors[ani->ref_index];
     900:	c5818613          	addi	a2,gp,-936 # 20000054 <color_ani>
     904:	00564303          	lbu	t1,5(a2)
     908:	420c                	lw	a1,0(a2)
        led_arr[fr->prev_index] = COLOR_BLACK;       // Turn off previous LED
     90a:	070a                	slli	a4,a4,0x2
     90c:	9736                	add	a4,a4,a3
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     90e:	0087c483          	lbu	s1,8(a5)
        led_arr[fr->prev_index] = COLOR_BLACK;       // Turn off previous LED
     912:	00072023          	sw	zero,0(a4)
    return ani->colors[ani->ref_index];
     916:	00231513          	slli	a0,t1,0x2
        led_arr[fr->ref_index] = animation_currentColor(ani);
     91a:	00e7c703          	lbu	a4,14(a5)
    return ani->colors[ani->ref_index];
     91e:	95aa                	add	a1,a1,a0
     920:	4188                	lw	a0,0(a1)
        fr->prev_index = fr->ref_index;
     922:	00e786a3          	sb	a4,13(a5)
        led_arr[fr->ref_index] = animation_currentColor(ani);
     926:	00271593          	slli	a1,a4,0x2
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     92a:	9726                	add	a4,a4,s1
        led_arr[fr->ref_index] = animation_currentColor(ani);
     92c:	95b6                	add	a1,a1,a3
        uint8_t next_idx = fr->ref_index + fr->frame_step;
     92e:	0ff77493          	andi	s1,a4,255
        led_arr[fr->ref_index] = animation_currentColor(ani);
     932:	c188                	sw	a0,0(a1)
    return ani->colors[ani->ref_index];
     934:	c0aa                	sw	a0,64(sp)
     936:	c4aa                	sw	a0,72(sp)
        fr->ref_index = next_idx % NR_LEDS;
     938:	4599                	li	a1,6
     93a:	8526                	mv	a0,s1
    return ani->colors[ani->ref_index];
     93c:	c21a                	sw	t1,4(sp)
        fr->ref_index = next_idx % NR_LEDS;
     93e:	faeff0ef          	jal	ra,ec <__umodsi3>
     942:	c2c18793          	addi	a5,gp,-980 # 20000028 <leds_frame>
     946:	00a78723          	sb	a0,14(a5)
        if (next_idx >= NR_LEDS) animation_step(ani);
     94a:	0f418693          	addi	a3,gp,244 # 200004f0 <led_arr>
     94e:	4795                	li	a5,5
     950:	4312                	lw	t1,4(sp)
     952:	c5818613          	addi	a2,gp,-936 # 20000054 <color_ani>
     956:	0097fe63          	bgeu	a5,s1,972 <WS2812FillBuffSec+0x244>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     95a:	00464583          	lbu	a1,4(a2)
     95e:	00130513          	addi	a0,t1,1
     962:	faeff0ef          	jal	ra,110 <__modsi3>
     966:	c5818613          	addi	a2,gp,-936 # 20000054 <color_ani>
     96a:	00a602a3          	sb	a0,5(a2)
     96e:	0f418693          	addi	a3,gp,244 # 200004f0 <led_arr>
    return led_arr[ledIdx].packed;
     972:	4782                	lw	a5,0(sp)
     974:	078a                	slli	a5,a5,0x2
     976:	96be                	add	a3,a3,a5
     978:	4288                	lw	a0,0(a3)
     97a:	bdf5                	j	876 <WS2812FillBuffSec+0x148>
	uint32_t now = millis();
     97c:	c901a603          	lw	a2,-880(gp) # 2000008c <systick_millis>
	if (now - *ref_time > duration) {
     980:	4b98                	lw	a4,16(a5)
     982:	04600593          	li	a1,70
     986:	40e60733          	sub	a4,a2,a4
     98a:	16e5fd63          	bgeu	a1,a4,b04 <WS2812FillBuffSec+0x3d6>
		*ref_time = now;
     98e:	0f418713          	addi	a4,gp,244 # 200004f0 <led_arr>
     992:	c43a                	sw	a4,8(sp)
    return ani->colors[ani->ref_index];
     994:	c5818713          	addi	a4,gp,-936 # 20000054 <color_ani>
		*ref_time = now;
     998:	cb90                	sw	a2,16(a5)
        for (int i = 0; i < NR_LEDS; i++) {
     99a:	c202                	sw	zero,4(sp)
    return ani->colors[ani->ref_index];
     99c:	c63a                	sw	a4,12(sp)
            uint8_t diff = fr->ref_index - i;
     99e:	00e7c703          	lbu	a4,14(a5)
    return ani->colors[ani->ref_index];
     9a2:	47b2                	lw	a5,12(sp)
            uint8_t diff = fr->ref_index - i;
     9a4:	d03a                	sw	a4,32(sp)
    return ani->colors[ani->ref_index];
     9a6:	0057c783          	lbu	a5,5(a5)
     9aa:	00279693          	slli	a3,a5,0x2
     9ae:	d63e                	sw	a5,44(sp)
     9b0:	47b2                	lw	a5,12(sp)
     9b2:	4398                	lw	a4,0(a5)
     9b4:	9736                	add	a4,a4,a3
     9b6:	00174783          	lbu	a5,1(a4)
     9ba:	00074683          	lbu	a3,0(a4)
     9be:	cc3e                	sw	a5,24(sp)
     9c0:	00274783          	lbu	a5,2(a4)
            uint8_t diff = fr->ref_index - i;
     9c4:	4712                	lw	a4,4(sp)
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     9c6:	8536                	mv	a0,a3
    return ani->colors[ani->ref_index];
     9c8:	ca3e                	sw	a5,20(sp)
            uint8_t diff = fr->ref_index - i;
     9ca:	5782                	lw	a5,32(sp)
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     9cc:	d236                	sw	a3,36(sp)
            uint8_t diff = fr->ref_index - i;
     9ce:	40e784b3          	sub	s1,a5,a4
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     9d2:	0ff4f493          	andi	s1,s1,255
     9d6:	85a6                	mv	a1,s1
     9d8:	ec8ff0ef          	jal	ra,a0 <__mulsi3>
     9dc:	00151713          	slli	a4,a0,0x1
     9e0:	972a                	add	a4,a4,a0
     9e2:	0712                	slli	a4,a4,0x4
     9e4:	972a                	add	a4,a4,a0
     9e6:	f9c00593          	li	a1,-100
     9ea:	853a                	mv	a0,a4
     9ec:	dc3a                	sw	a4,56(sp)
     9ee:	ecaff0ef          	jal	ra,b8 <__divsi3>
     9f2:	5692                	lw	a3,36(sp)
     9f4:	d202                	sw	zero,36(sp)
     9f6:	9536                	add	a0,a0,a3
     9f8:	d436                	sw	a3,40(sp)
     9fa:	00a05d63          	blez	a0,a14 <WS2812FillBuffSec+0x2e6>
     9fe:	5762                	lw	a4,56(sp)
     a00:	06400593          	li	a1,100
     a04:	853a                	mv	a0,a4
     a06:	eb2ff0ef          	jal	ra,b8 <__divsi3>
     a0a:	56a2                	lw	a3,40(sp)
     a0c:	8e89                	sub	a3,a3,a0
     a0e:	0ff6f793          	andi	a5,a3,255
     a12:	d23e                	sw	a5,36(sp)
     a14:	45e2                	lw	a1,24(sp)
     a16:	8526                	mv	a0,s1
     a18:	e88ff0ef          	jal	ra,a0 <__mulsi3>
     a1c:	00151713          	slli	a4,a0,0x1
     a20:	972a                	add	a4,a4,a0
     a22:	0712                	slli	a4,a4,0x4
     a24:	972a                	add	a4,a4,a0
     a26:	f9c00593          	li	a1,-100
     a2a:	853a                	mv	a0,a4
     a2c:	dc3a                	sw	a4,56(sp)
     a2e:	e8aff0ef          	jal	ra,b8 <__divsi3>
     a32:	47e2                	lw	a5,24(sp)
     a34:	d402                	sw	zero,40(sp)
     a36:	953e                	add	a0,a0,a5
     a38:	00a05e63          	blez	a0,a54 <WS2812FillBuffSec+0x326>
     a3c:	5762                	lw	a4,56(sp)
     a3e:	06400593          	li	a1,100
     a42:	853a                	mv	a0,a4
     a44:	e74ff0ef          	jal	ra,b8 <__divsi3>
     a48:	47e2                	lw	a5,24(sp)
     a4a:	40a78533          	sub	a0,a5,a0
     a4e:	0ff57793          	andi	a5,a0,255
     a52:	d43e                	sw	a5,40(sp)
     a54:	45d2                	lw	a1,20(sp)
     a56:	8526                	mv	a0,s1
     a58:	e48ff0ef          	jal	ra,a0 <__mulsi3>
     a5c:	00151493          	slli	s1,a0,0x1
     a60:	94aa                	add	s1,s1,a0
     a62:	0492                	slli	s1,s1,0x4
     a64:	94aa                	add	s1,s1,a0
     a66:	f9c00593          	li	a1,-100
     a6a:	8526                	mv	a0,s1
     a6c:	e4cff0ef          	jal	ra,b8 <__divsi3>
     a70:	47d2                	lw	a5,20(sp)
     a72:	4681                	li	a3,0
     a74:	953e                	add	a0,a0,a5
     a76:	c2c18713          	addi	a4,gp,-980 # 20000028 <leds_frame>
     a7a:	87ba                	mv	a5,a4
     a7c:	00a05e63          	blez	a0,a98 <WS2812FillBuffSec+0x36a>
     a80:	06400593          	li	a1,100
     a84:	8526                	mv	a0,s1
     a86:	e32ff0ef          	jal	ra,b8 <__divsi3>
     a8a:	47d2                	lw	a5,20(sp)
     a8c:	40a78533          	sub	a0,a5,a0
     a90:	0ff57693          	andi	a3,a0,255
     a94:	c2c18793          	addi	a5,gp,-980 # 20000028 <leds_frame>
     a98:	4712                	lw	a4,4(sp)
     a9a:	0f418613          	addi	a2,gp,244 # 200004f0 <led_arr>
     a9e:	070a                	slli	a4,a4,0x2
     aa0:	9732                	add	a4,a4,a2
     aa2:	00072023          	sw	zero,0(a4)
     aa6:	5612                	lw	a2,36(sp)
     aa8:	4722                	lw	a4,8(sp)
     aaa:	00c70023          	sb	a2,0(a4)
     aae:	5622                	lw	a2,40(sp)
     ab0:	00d70123          	sb	a3,2(a4)
        for (int i = 0; i < NR_LEDS; i++) {
     ab4:	4699                	li	a3,6
            led_arr[i] = COLOR_DECREMENT(color, diff*49);       // Triangular diff growth
     ab6:	00c700a3          	sb	a2,1(a4)
        for (int i = 0; i < NR_LEDS; i++) {
     aba:	4712                	lw	a4,4(sp)
     abc:	0705                	addi	a4,a4,1
     abe:	c23a                	sw	a4,4(sp)
     ac0:	4722                	lw	a4,8(sp)
     ac2:	0711                	addi	a4,a4,4
     ac4:	c43a                	sw	a4,8(sp)
     ac6:	4712                	lw	a4,4(sp)
     ac8:	ecd71be3          	bne	a4,a3,99e <WS2812FillBuffSec+0x270>
        uint8_t next_increment = fr->ref_index + fr->frame_step;
     acc:	0087c483          	lbu	s1,8(a5)
     ad0:	5782                	lw	a5,32(sp)
        fr->ref_index = next_increment % NR_LEDS;
     ad2:	4599                	li	a1,6
        uint8_t next_increment = fr->ref_index + fr->frame_step;
     ad4:	94be                	add	s1,s1,a5
     ad6:	0ff4f493          	andi	s1,s1,255
        fr->ref_index = next_increment % NR_LEDS;
     ada:	8526                	mv	a0,s1
     adc:	e10ff0ef          	jal	ra,ec <__umodsi3>
     ae0:	c2c18793          	addi	a5,gp,-980 # 20000028 <leds_frame>
     ae4:	00a78723          	sb	a0,14(a5)
        if (next_increment >= NR_LEDS) {
     ae8:	4795                	li	a5,5
     aea:	0097fd63          	bgeu	a5,s1,b04 <WS2812FillBuffSec+0x3d6>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     aee:	47b2                	lw	a5,12(sp)
     af0:	0047c583          	lbu	a1,4(a5)
     af4:	57b2                	lw	a5,44(sp)
     af6:	00178513          	addi	a0,a5,1
     afa:	e16ff0ef          	jal	ra,110 <__modsi3>
     afe:	47b2                	lw	a5,12(sp)
     b00:	00a782a3          	sb	a0,5(a5)
    return led_arr[ledIdx].packed;
     b04:	4782                	lw	a5,0(sp)
     b06:	0f418713          	addi	a4,gp,244 # 200004f0 <led_arr>
     b0a:	078a                	slli	a5,a5,0x2
    return led_arr[ledIdx].packed;
     b0c:	97ba                	add	a5,a5,a4
     b0e:	4388                	lw	a0,0(a5)
     b10:	b39d                	j	876 <WS2812FillBuffSec+0x148>
	uint32_t now = millis();
     b12:	c901a683          	lw	a3,-880(gp) # 2000008c <systick_millis>
	if (now - *ref_time > duration) {
     b16:	4b98                	lw	a4,16(a5)
            break;
        case NEO_COLOR_FADE:
            return Neo_render_colorFade(&leds_frame, &color_ani, ledIdx);
            break;
        case NEO_SOLO_COLOR_FADE:
            leds_frame.frame_duration = 10;
     b18:	4629                	li	a2,10
     b1a:	0f418593          	addi	a1,gp,244 # 200004f0 <led_arr>
     b1e:	c3d0                	sw	a2,4(a5)
	if (now - *ref_time > duration) {
     b20:	40e68733          	sub	a4,a3,a4
     b24:	c42e                	sw	a1,8(sp)
     b26:	0ee67663          	bgeu	a2,a4,c12 <WS2812FillBuffSec+0x4e4>
        fr->frame_value += 3;
     b2a:	0097c703          	lbu	a4,9(a5)
    return ani->colors[ani->ref_index];
     b2e:	c5818493          	addi	s1,gp,-936 # 20000054 <color_ani>
        fr->frame_value += 3;
     b32:	070d                	addi	a4,a4,3
     b34:	0ff77713          	andi	a4,a4,255
     b38:	00e784a3          	sb	a4,9(a5)
		*ref_time = now;
     b3c:	cb94                	sw	a3,16(a5)
    return ani->colors[ani->ref_index];
     b3e:	0054c783          	lbu	a5,5(s1)
     b42:	4094                	lw	a3,0(s1)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     b44:	00871513          	slli	a0,a4,0x8
    return ani->colors[ani->ref_index];
     b48:	00279593          	slli	a1,a5,0x2
     b4c:	96ae                	add	a3,a3,a1
     b4e:	428c                	lw	a1,0(a3)
     b50:	0016c303          	lbu	t1,1(a3)
     b54:	0006c283          	lbu	t0,0(a3)
     b58:	0026c683          	lbu	a3,2(a3)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     b5c:	8d19                	sub	a0,a0,a4
    return ani->colors[ani->ref_index];
     b5e:	c8ae                	sw	a1,80(sp)
     b60:	c2ae                	sw	a1,68(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     b62:	c4ae                	sw	a1,72(sp)
     b64:	06400593          	li	a1,100
    return ani->colors[ani->ref_index];
     b68:	c23e                	sw	a5,4(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     b6a:	ca3a                	sw	a4,20(sp)
    return ani->colors[ani->ref_index];
     b6c:	cc36                	sw	a3,24(sp)
     b6e:	d01a                	sw	t1,32(sp)
     b70:	d216                	sw	t0,36(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     b72:	d46ff0ef          	jal	ra,b8 <__divsi3>
     b76:	0ff57593          	andi	a1,a0,255
     b7a:	6509                	lui	a0,0x2
     b7c:	21850513          	addi	a0,a0,536 # 2218 <SIN_LUT2>
     b80:	5292                	lw	t0,36(sp)
     b82:	952e                	add	a0,a0,a1
     b84:	00054583          	lbu	a1,0(a0)
     b88:	8516                	mv	a0,t0
     b8a:	c62e                	sw	a1,12(sp)
     b8c:	d14ff0ef          	jal	ra,a0 <__mulsi3>
     b90:	5302                	lw	t1,32(sp)
     b92:	45b2                	lw	a1,12(sp)
     b94:	8521                	srai	a0,a0,0x8
     b96:	04a10423          	sb	a0,72(sp)
     b9a:	851a                	mv	a0,t1
     b9c:	d04ff0ef          	jal	ra,a0 <__mulsi3>
     ba0:	46e2                	lw	a3,24(sp)
     ba2:	45b2                	lw	a1,12(sp)
     ba4:	8521                	srai	a0,a0,0x8
     ba6:	04a104a3          	sb	a0,73(sp)
     baa:	8536                	mv	a0,a3
     bac:	cf4ff0ef          	jal	ra,a0 <__mulsi3>
     bb0:	c2c18713          	addi	a4,gp,-980 # 20000028 <leds_frame>
     bb4:	00e74683          	lbu	a3,14(a4)
     bb8:	8521                	srai	a0,a0,0x8
     bba:	87ba                	mv	a5,a4
     bbc:	4722                	lw	a4,8(sp)
     bbe:	04a10523          	sb	a0,74(sp)
     bc2:	4526                	lw	a0,72(sp)
     bc4:	00269593          	slli	a1,a3,0x2
     bc8:	95ba                	add	a1,a1,a4
        if (fr->frame_value >= 100) {
     bca:	4752                	lw	a4,20(sp)
        led_arr[fr->ref_index] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     bcc:	c188                	sw	a0,0(a1)
     bce:	c6aa                	sw	a0,76(sp)
        if (fr->frame_value >= 100) {
     bd0:	06300593          	li	a1,99
     bd4:	02e5ff63          	bgeu	a1,a4,c12 <WS2812FillBuffSec+0x4e4>
            uint8_t next_idx = fr->ref_index + fr->frame_step;
     bd8:	0087c703          	lbu	a4,8(a5)
            fr->frame_value = 0;
     bdc:	000784a3          	sb	zero,9(a5)
            fr->ref_index = next_idx % NR_LEDS;
     be0:	4599                	li	a1,6
            uint8_t next_idx = fr->ref_index + fr->frame_step;
     be2:	9736                	add	a4,a4,a3
     be4:	0ff77713          	andi	a4,a4,255
            fr->ref_index = next_idx % NR_LEDS;
     be8:	853a                	mv	a0,a4
     bea:	c63a                	sw	a4,12(sp)
     bec:	d00ff0ef          	jal	ra,ec <__umodsi3>
            if (next_idx >= NR_LEDS) {
     bf0:	4732                	lw	a4,12(sp)
            fr->ref_index = next_idx % NR_LEDS;
     bf2:	c2c18793          	addi	a5,gp,-980 # 20000028 <leds_frame>
     bf6:	00a78723          	sb	a0,14(a5)
            if (next_idx >= NR_LEDS) {
     bfa:	4795                	li	a5,5
     bfc:	00e7fb63          	bgeu	a5,a4,c12 <WS2812FillBuffSec+0x4e4>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     c00:	4792                	lw	a5,4(sp)
     c02:	0044c583          	lbu	a1,4(s1)
     c06:	00178513          	addi	a0,a5,1
     c0a:	d06ff0ef          	jal	ra,110 <__modsi3>
     c0e:	00a482a3          	sb	a0,5(s1)
    return led_arr[ledIdx].packed;
     c12:	4782                	lw	a5,0(sp)
     c14:	4722                	lw	a4,8(sp)
     c16:	078a                	slli	a5,a5,0x2
     c18:	bdd5                	j	b0c <WS2812FillBuffSec+0x3de>
            return Neo_render_soloColorFade(&leds_frame, &color_ani, ledIdx);
            break;
        case NEO_COLOR_FLASHING:
            leds_frame.frame_duration = 10;
     c1a:	4729                	li	a4,10
     c1c:	c3d8                	sw	a4,4(a5)
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
            break;
        default:
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
     c1e:	4502                	lw	a0,0(sp)
     c20:	3401                	jal	620 <Neo_render_colorFlashing.constprop.0>
     c22:	b991                	j	876 <WS2812FillBuffSec+0x148>

00000c24 <internal_handle_input.constprop.0>:
void handle_debug_input( int numbytes, uint8_t * data ) __attribute__((weak));
void handle_debug_input( int numbytes, uint8_t * data ) { (void)numbytes; (void)data; }

static void internal_handle_input( volatile uint32_t * dmdata0 )
{
	uint32_t dmd0 = *dmdata0;
     c24:	e00007b7          	lui	a5,0xe0000
     c28:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 && bytes < 16 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
     c2c:	8082                	ret

00000c2e <_write.constprop.0>:
//     status word = 0xcx = timed out.
// declare as weak to allow overriding.
WEAK int _write(int fd, const char *buf, int size)
{
	(void)fd;
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c2e:	e0000737          	lui	a4,0xe0000
     c32:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     c36:	1111                	addi	sp,sp,-28
     c38:	cc06                	sw	ra,24(sp)
     c3a:	ca22                	sw	s0,20(sp)
     c3c:	c826                	sw	s1,16(sp)
     c3e:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     c40:	0c07f793          	andi	a5,a5,192
     c44:	0c000693          	li	a3,192
     c48:	0cd78863          	beq	a5,a3,d18 <_write.constprop.0+0xea>

	char buffer[4] = { 0 };
     c4c:	c602                	sw	zero,12(sp)
     c4e:	842e                	mv	s0,a1
	int place = 0;
	uint32_t lastdmd;
	uint32_t timeout = FUNCONF_DEBUGPRINTF_TIMEOUT; // Give up after ~120ms

	if( size == 0 )
     c50:	e5f1                	bnez	a1,d1c <_write.constprop.0+0xee>
	{
		lastdmd = (*DMDATA0);
     c52:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     c56:	c789                	beqz	a5,c60 <_write.constprop.0+0x32>
     c58:	0807f793          	andi	a5,a5,128
     c5c:	e391                	bnez	a5,c60 <_write.constprop.0+0x32>
     c5e:	37d9                	jal	c24 <internal_handle_input.constprop.0>

		//buf += tosend;
		place += tosend;
	}
	return size;
}
     c60:	40e2                	lw	ra,24(sp)
     c62:	8522                	mv	a0,s0
     c64:	4452                	lw	s0,20(sp)
     c66:	44c2                	lw	s1,16(sp)
     c68:	0171                	addi	sp,sp,28
     c6a:	8082                	ret
		int tosend = size - place;
     c6c:	409405b3          	sub	a1,s0,s1
     c70:	469d                	li	a3,7
     c72:	872e                	mv	a4,a1
     c74:	00b6d363          	bge	a3,a1,c7a <_write.constprop.0+0x4c>
     c78:	471d                	li	a4,7
     c7a:	001006b7          	lui	a3,0x100
     c7e:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     c80:	e0000537          	lui	a0,0xe0000
     c84:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     c88:	0f450313          	addi	t1,a0,244
     c8c:	08067293          	andi	t0,a2,128
     c90:	06029c63          	bnez	t0,d08 <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     c94:	c611                	beqz	a2,ca0 <_write.constprop.0+0x72>
     c96:	c43a                	sw	a4,8(sp)
     c98:	c22e                	sw	a1,4(sp)
     c9a:	3769                	jal	c24 <internal_handle_input.constprop.0>
     c9c:	4722                	lw	a4,8(sp)
     c9e:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     ca0:	4689                	li	a3,2
     ca2:	4601                	li	a2,0
     ca4:	00b6d463          	bge	a3,a1,cac <_write.constprop.0+0x7e>
     ca8:	ffd70613          	addi	a2,a4,-3
     cac:	4782                	lw	a5,0(sp)
     cae:	00348593          	addi	a1,s1,3
     cb2:	0068                	addi	a0,sp,12
     cb4:	95be                	add	a1,a1,a5
     cb6:	c23a                	sw	a4,4(sp)
     cb8:	2105                	jal	10d8 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     cba:	4632                	lw	a2,12(sp)
     cbc:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     cbe:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     cc0:	e00006b7          	lui	a3,0xe0000
     cc4:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     cc8:	458d                	li	a1,3
     cca:	00978633          	add	a2,a5,s1
		t = 0;
     cce:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     cd0:	00064303          	lbu	t1,0(a2)
     cd4:	0685                	addi	a3,a3,1
     cd6:	007c                	addi	a5,sp,12
     cd8:	00d78533          	add	a0,a5,a3
     cdc:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     ce0:	00d70563          	beq	a4,a3,cea <_write.constprop.0+0xbc>
     ce4:	0605                	addi	a2,a2,1
     ce6:	feb695e3          	bne	a3,a1,cd0 <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     cea:	00470693          	addi	a3,a4,4
     cee:	f806e693          	ori	a3,a3,-128
     cf2:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     cf6:	4632                	lw	a2,12(sp)
     cf8:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     cfc:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     cfe:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     d02:	f684c5e3          	blt	s1,s0,c6c <_write.constprop.0+0x3e>
     d06:	bfa9                	j	c60 <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     d08:	16fd                	addi	a3,a3,-1
     d0a:	fead                	bnez	a3,c84 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     d0c:	00032783          	lw	a5,0(t1)
     d10:	0c07e793          	ori	a5,a5,192
     d14:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     d18:	4401                	li	s0,0
     d1a:	b799                	j	c60 <_write.constprop.0+0x32>
	if( size == 0 )
     d1c:	4481                	li	s1,0
     d1e:	b7d5                	j	d02 <_write.constprop.0+0xd4>

00000d20 <__puts_uart>:
{
     d20:	1151                	addi	sp,sp,-12
     d22:	c222                	sw	s0,4(sp)
     d24:	c406                	sw	ra,8(sp)
     d26:	842e                	mv	s0,a1
	_write( 0, s, len );
     d28:	3719                	jal	c2e <_write.constprop.0>
}
     d2a:	40a2                	lw	ra,8(sp)
     d2c:	8522                	mv	a0,s0
     d2e:	4412                	lw	s0,4(sp)
     d30:	0131                	addi	sp,sp,12
     d32:	8082                	ret

00000d34 <handle_reset>:
	asm volatile( "\n\
     d34:	1ffff197          	auipc	gp,0x1ffff
     d38:	6c818193          	addi	gp,gp,1736 # 200003fc <__global_pointer$>
     d3c:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     d40:	6509                	lui	a0,0x2
     d42:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x610>
     d46:	30051073          	csrw	mstatus,a0
     d4a:	468d                	li	a3,3
     d4c:	fffff517          	auipc	a0,0xfffff
     d50:	2b450513          	addi	a0,a0,692 # 0 <InterruptVector>
     d54:	8d55                	or	a0,a0,a3
     d56:	30551073          	csrw	mtvec,a0
asm volatile(
     d5a:	c6c18513          	addi	a0,gp,-916 # 20000068 <WS2812BLEDInUse>
     d5e:	15c18593          	addi	a1,gp,348 # 20000558 <_ebss>
     d62:	4601                	li	a2,0
     d64:	00b55663          	bge	a0,a1,d70 <handle_reset+0x3c>
     d68:	c110                	sw	a2,0(a0)
     d6a:	0511                	addi	a0,a0,4
     d6c:	feb54ee3          	blt	a0,a1,d68 <handle_reset+0x34>
     d70:	00001517          	auipc	a0,0x1
     d74:	5e450513          	addi	a0,a0,1508 # 2354 <_data_lma>
     d78:	c0418593          	addi	a1,gp,-1020 # 20000000 <button1.1>
     d7c:	c6c18613          	addi	a2,gp,-916 # 20000068 <WS2812BLEDInUse>
     d80:	00c58863          	beq	a1,a2,d90 <handle_reset+0x5c>
     d84:	4114                	lw	a3,0(a0)
     d86:	c194                	sw	a3,0(a1)
     d88:	0511                	addi	a0,a0,4
     d8a:	0591                	addi	a1,a1,4
     d8c:	fec59ae3          	bne	a1,a2,d80 <handle_reset+0x4c>
	SysTick->CTLR = 5;
     d90:	e000f7b7          	lui	a5,0xe000f
     d94:	4715                	li	a4,5
     d96:	c398                	sw	a4,0(a5)
asm volatile(
     d98:	6785                	lui	a5,0x1
     d9a:	27078793          	addi	a5,a5,624 # 1270 <main>
     d9e:	34179073          	csrw	mepc,a5
     da2:	30200073          	mret

00000da6 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     da6:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     daa:	c6aff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     dae:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     db2:	c62ff0ef          	jal	ra,214 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     db6:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     dba:	c5aff0ef          	jal	ra,214 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     dbe:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     dc2:	c52ff0ef          	jal	ra,214 <PrintHex>
	while( (*DMDATA0) & 0x80 );
     dc6:	e0000737          	lui	a4,0xe0000
     dca:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     dce:	0f470693          	addi	a3,a4,244
     dd2:	0807f793          	andi	a5,a5,128
     dd6:	fbf5                	bnez	a5,dca <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     dd8:	6785                	lui	a5,0x1
     dda:	a8578793          	addi	a5,a5,-1403 # a85 <WS2812FillBuffSec+0x357>
     dde:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     de0:	e0000737          	lui	a4,0xe0000
     de4:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     de8:	0f470693          	addi	a3,a4,244
     dec:	0807f793          	andi	a5,a5,128
     df0:	fbf5                	bnez	a5,de4 <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     df2:	aaaab7b7          	lui	a5,0xaaaab
     df6:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     dfa:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     dfc:	a001                	j	dfc <ADC1_2_IRQHandler+0x56>

00000dfe <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     dfe:	40021737          	lui	a4,0x40021
     e02:	471c                	lw	a5,8(a4)
     e04:	008006b7          	lui	a3,0x800
     e08:	8fd5                	or	a5,a5,a3
     e0a:	c71c                	sw	a5,8(a4)

00000e0c <strlen>:
{
     e0c:	87aa                	mv	a5,a0
	for (; *s; s++);
     e0e:	0007c703          	lbu	a4,0(a5)
     e12:	e701                	bnez	a4,e1a <strlen+0xe>
}
     e14:	40a78533          	sub	a0,a5,a0
     e18:	8082                	ret
	for (; *s; s++);
     e1a:	0785                	addi	a5,a5,1
     e1c:	bfcd                	j	e0e <strlen+0x2>

00000e1e <mini_vpprintf>:
{
     e1e:	fa410113          	addi	sp,sp,-92
     e22:	c8a6                	sw	s1,80(sp)
     e24:	cc86                	sw	ra,88(sp)
     e26:	caa2                	sw	s0,84(sp)
     e28:	c02a                	sw	a0,0(sp)
     e2a:	c22e                	sw	a1,4(sp)
     e2c:	84b2                	mv	s1,a2
     e2e:	87b6                	mv	a5,a3
	int n = 0;
     e30:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     e32:	0004c703          	lbu	a4,0(s1)
     e36:	00148413          	addi	s0,s1,1
     e3a:	00e10fa3          	sb	a4,31(sp)
     e3e:	eb01                	bnez	a4,e4e <mini_vpprintf+0x30>
}
     e40:	40e6                	lw	ra,88(sp)
     e42:	4456                	lw	s0,84(sp)
     e44:	4542                	lw	a0,16(sp)
     e46:	44c6                	lw	s1,80(sp)
     e48:	05c10113          	addi	sp,sp,92
     e4c:	8082                	ret
		if (ch!='%') {
     e4e:	02500693          	li	a3,37
     e52:	00d70f63          	beq	a4,a3,e70 <mini_vpprintf+0x52>
     e56:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     e58:	4612                	lw	a2,4(sp)
     e5a:	4782                	lw	a5,0(sp)
     e5c:	4585                	li	a1,1
     e5e:	01f10513          	addi	a0,sp,31
     e62:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     e64:	84a2                	mv	s1,s0
		n = n + len;
     e66:	47c2                	lw	a5,16(sp)
     e68:	97aa                	add	a5,a5,a0
     e6a:	c83e                	sw	a5,16(sp)
     e6c:	47a2                	lw	a5,8(sp)
     e6e:	b7d1                	j	e32 <mini_vpprintf+0x14>
			ch=*(fmt++);
     e70:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     e74:	03000613          	li	a2,48
			ch=*(fmt++);
     e78:	00248713          	addi	a4,s1,2
     e7c:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     e80:	03000413          	li	s0,48
     e84:	08c69063          	bne	a3,a2,f04 <mini_vpprintf+0xe6>
				ch=*(fmt++);
     e88:	84ba                	mv	s1,a4
     e8a:	4601                	li	a2,0
     e8c:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     e8e:	4525                	li	a0,9
     e90:	a811                	j	ea4 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     e92:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     e96:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     e98:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     e9a:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     e9e:	0706                	slli	a4,a4,0x1
     ea0:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     ea2:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     ea4:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f8d93>
     ea8:	0ff5f313          	andi	t1,a1,255
     eac:	fe6573e3          	bgeu	a0,t1,e92 <mini_vpprintf+0x74>
     eb0:	c219                	beqz	a2,eb6 <mini_vpprintf+0x98>
     eb2:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     eb6:	c63a                	sw	a4,12(sp)
     eb8:	4661                	li	a2,24
     eba:	00e65363          	bge	a2,a4,ec0 <mini_vpprintf+0xa2>
     ebe:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     ec0:	06c00593          	li	a1,108
			char l = 0;
     ec4:	4601                	li	a2,0
			if (ch == 'l') {
     ec6:	00b69863          	bne	a3,a1,ed6 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     eca:	0004c683          	lbu	a3,0(s1)
				l = 1;
     ece:	4605                	li	a2,1
				ch=*(fmt++);
     ed0:	0485                	addi	s1,s1,1
     ed2:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     ed6:	01f14683          	lbu	a3,31(sp)
     eda:	06400593          	li	a1,100
     ede:	06b68363          	beq	a3,a1,f44 <mini_vpprintf+0x126>
     ee2:	02d5e463          	bltu	a1,a3,f0a <mini_vpprintf+0xec>
     ee6:	05800713          	li	a4,88
     eea:	0ae68263          	beq	a3,a4,f8e <mini_vpprintf+0x170>
     eee:	06300713          	li	a4,99
     ef2:	0ce68063          	beq	a3,a4,fb2 <mini_vpprintf+0x194>
     ef6:	d6a9                	beqz	a3,e40 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     ef8:	4612                	lw	a2,4(sp)
     efa:	c43e                	sw	a5,8(sp)
     efc:	4585                	li	a1,1
     efe:	01f10513          	addi	a0,sp,31
     f02:	a88d                	j	f74 <mini_vpprintf+0x156>
			char pad_char = ' ';
     f04:	02000413          	li	s0,32
     f08:	b741                	j	e88 <mini_vpprintf+0x6a>
			switch (ch) {
     f0a:	07500593          	li	a1,117
     f0e:	02b68b63          	beq	a3,a1,f44 <mini_vpprintf+0x126>
     f12:	07800613          	li	a2,120
     f16:	06c68c63          	beq	a3,a2,f8e <mini_vpprintf+0x170>
     f1a:	07300613          	li	a2,115
     f1e:	fcc69de3          	bne	a3,a2,ef8 <mini_vpprintf+0xda>
     f22:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     f24:	00478713          	addi	a4,a5,4
     f28:	439c                	lw	a5,0(a5)
     f2a:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     f2c:	853e                	mv	a0,a5
     f2e:	ca3e                	sw	a5,20(sp)
     f30:	3df1                	jal	e0c <strlen>
					if (pad_to > 0) {
     f32:	4762                	lw	a4,24(sp)
     f34:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     f36:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     f38:	cb51                	beqz	a4,fcc <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     f3a:	46b2                	lw	a3,12(sp)
     f3c:	1838                	addi	a4,sp,56
     f3e:	8622                	mv	a2,s0
     f40:	853e                	mv	a0,a5
     f42:	a025                	j	f6a <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f44:	00478713          	addi	a4,a5,4
     f48:	c43a                	sw	a4,8(sp)
					if(l) {
     f4a:	ca05                	beqz	a2,f7a <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f4c:	f8b68693          	addi	a3,a3,-117
     f50:	1018                	addi	a4,sp,32
     f52:	0016b693          	seqz	a3,a3
     f56:	4388                	lw	a0,0(a5)
     f58:	4601                	li	a2,0
     f5a:	45a9                	li	a1,10
     f5c:	b10ff0ef          	jal	ra,26c <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     f60:	46b2                	lw	a3,12(sp)
     f62:	1838                	addi	a4,sp,56
     f64:	8622                	mv	a2,s0
     f66:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     f68:	1008                	addi	a0,sp,32
     f6a:	9ccff0ef          	jal	ra,136 <mini_pad>
					len = puts(bf, len, buf);
     f6e:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     f70:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     f72:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     f74:	4782                	lw	a5,0(sp)
     f76:	9782                	jalr	a5
					break;
     f78:	b5fd                	j	e66 <mini_vpprintf+0x48>
						if(ch == 'u') {
     f7a:	07500713          	li	a4,117
     f7e:	00e69563          	bne	a3,a4,f88 <mini_vpprintf+0x16a>
	if (radix > 16)
     f82:	1018                	addi	a4,sp,32
     f84:	4685                	li	a3,1
     f86:	bfc1                	j	f56 <mini_vpprintf+0x138>
     f88:	1018                	addi	a4,sp,32
     f8a:	4681                	li	a3,0
     f8c:	b7e9                	j	f56 <mini_vpprintf+0x138>
					if(l) {
     f8e:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f90:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     f94:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     f98:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     f9a:	4685                	li	a3,1
     f9c:	1018                	addi	a4,sp,32
     f9e:	00163613          	seqz	a2,a2
     fa2:	45c1                	li	a1,16
     fa4:	ac8ff0ef          	jal	ra,26c <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     fa8:	46b2                	lw	a3,12(sp)
     faa:	85aa                	mv	a1,a0
     fac:	1838                	addi	a4,sp,56
     fae:	8622                	mv	a2,s0
     fb0:	bf65                	j	f68 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     fb2:	00478713          	addi	a4,a5,4
     fb6:	439c                	lw	a5,0(a5)
     fb8:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     fba:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     fbc:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     fc0:	1838                	addi	a4,sp,56
     fc2:	8622                	mv	a2,s0
     fc4:	4585                	li	a1,1
     fc6:	01f10513          	addi	a0,sp,31
     fca:	b745                	j	f6a <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     fcc:	4612                	lw	a2,4(sp)
     fce:	853e                	mv	a0,a5
     fd0:	b755                	j	f74 <mini_vpprintf+0x156>

00000fd2 <printf>:
{
     fd2:	fdc10113          	addi	sp,sp,-36
     fd6:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     fd8:	862a                	mv	a2,a0
     fda:	6505                	lui	a0,0x1
{
     fdc:	c82e                	sw	a1,16(sp)
     fde:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     fe0:	4581                	li	a1,0
	va_start( args, format );
     fe2:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     fe4:	d2050513          	addi	a0,a0,-736 # d20 <__puts_uart>
{
     fe8:	c606                	sw	ra,12(sp)
     fea:	ce3a                	sw	a4,28(sp)
     fec:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     fee:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     ff0:	353d                	jal	e1e <mini_vpprintf>
}
     ff2:	40b2                	lw	ra,12(sp)
     ff4:	02410113          	addi	sp,sp,36
     ff8:	8082                	ret

00000ffa <mini_vsnprintf>:
{
     ffa:	1121                	addi	sp,sp,-24
     ffc:	ca06                	sw	ra,20(sp)
     ffe:	c822                	sw	s0,16(sp)
	b.buffer = buffer;
    1000:	c02a                	sw	a0,0(sp)
	b.pbuffer = buffer;
    1002:	c22a                	sw	a0,4(sp)
	b.buffer_len = buffer_len;
    1004:	c42e                	sw	a1,8(sp)
	if(buffer_len == 0) buffer = (void*) 0;
    1006:	c185                	beqz	a1,1026 <mini_vsnprintf+0x2c>
    1008:	842a                	mv	s0,a0
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
    100a:	858a                	mv	a1,sp
    100c:	e111                	bnez	a0,1010 <mini_vsnprintf+0x16>
    100e:	4581                	li	a1,0
    1010:	1d200513          	li	a0,466
    1014:	3529                	jal	e1e <mini_vpprintf>
	if(buffer == (void*) 0) {
    1016:	c401                	beqz	s0,101e <mini_vsnprintf+0x24>
	return b.pbuffer - b.buffer;
    1018:	4512                	lw	a0,4(sp)
    101a:	4782                	lw	a5,0(sp)
    101c:	8d1d                	sub	a0,a0,a5
}
    101e:	40d2                	lw	ra,20(sp)
    1020:	4442                	lw	s0,16(sp)
    1022:	0161                	addi	sp,sp,24
    1024:	8082                	ret
	if(buffer_len == 0) buffer = (void*) 0;
    1026:	4401                	li	s0,0
    1028:	b7dd                	j	100e <mini_vsnprintf+0x14>

0000102a <sprintf>:
{
    102a:	1101                	addi	sp,sp,-32
    102c:	c832                	sw	a2,16(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    102e:	862e                	mv	a2,a1
    1030:	800005b7          	lui	a1,0x80000
{
    1034:	ca36                	sw	a3,20(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1036:	fff5c593          	not	a1,a1
	va_start( args, format );
    103a:	0814                	addi	a3,sp,16
{
    103c:	c606                	sw	ra,12(sp)
    103e:	cc3a                	sw	a4,24(sp)
    1040:	ce3e                	sw	a5,28(sp)
	va_start( args, format );
    1042:	c036                	sw	a3,0(sp)
	int ret = mini_vsnprintf( buffer, INT_MAX, format, args );
    1044:	3f5d                	jal	ffa <mini_vsnprintf>
}
    1046:	40b2                	lw	ra,12(sp)
    1048:	6105                	addi	sp,sp,32
    104a:	8082                	ret

0000104c <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
    104c:	962a                	add	a2,a2,a0
    104e:	87aa                	mv	a5,a0
    1050:	00c79363          	bne	a5,a2,1056 <memset+0xa>
    1054:	8082                	ret
    1056:	00b78023          	sb	a1,0(a5)
    105a:	0785                	addi	a5,a5,1
    105c:	bfd5                	j	1050 <memset+0x4>

0000105e <strcpy>:
{
    105e:	87aa                	mv	a5,a0
	for (; (*d=*s); s++, d++);
    1060:	0005c703          	lbu	a4,0(a1) # 80000000 <_eusrstack+0x5ffff800>
    1064:	00e78023          	sb	a4,0(a5)
    1068:	e311                	bnez	a4,106c <strcpy+0xe>
}
    106a:	8082                	ret
	for (; (*d=*s); s++, d++);
    106c:	0585                	addi	a1,a1,1
    106e:	0785                	addi	a5,a5,1
    1070:	bfc5                	j	1060 <strcpy+0x2>

00001072 <strncpy>:
{
    1072:	4781                	li	a5,0
	for (; n && (*d=*s); n--, s++, d++);
    1074:	00f60c63          	beq	a2,a5,108c <strncpy+0x1a>
    1078:	00f58733          	add	a4,a1,a5
    107c:	00074703          	lbu	a4,0(a4) # 40021000 <_eusrstack+0x20020800>
    1080:	00f506b3          	add	a3,a0,a5
    1084:	0785                	addi	a5,a5,1
    1086:	00e68023          	sb	a4,0(a3)
    108a:	f76d                	bnez	a4,1074 <strncpy+0x2>
}
    108c:	8082                	ret

0000108e <mngI2c_load_printBuff.constprop.0>:
uint32_t lock_printTime = 0;
uint8_t printBuff_idx = 0;
PrintBuff_t printBuff[PRINT_BUFF_SIZE] = { 0 };
uint8_t flag_printBuff_data = 1;					// set to 1 to allow initial print

void mngI2c_load_printBuff(const char *str, uint8_t line_idx) {
    108e:	1151                	addi	sp,sp,-12
    1090:	c026                	sw	s1,0(sp)
	flag_printBuff_data = 1;
	PrintBuff_t *buff = &printBuff[printBuff_idx];
    1092:	c8818493          	addi	s1,gp,-888 # 20000084 <printBuff_idx>
void mngI2c_load_printBuff(const char *str, uint8_t line_idx) {
    1096:	c222                	sw	s0,4(sp)
	PrintBuff_t *buff = &printBuff[printBuff_idx];
    1098:	0004c403          	lbu	s0,0(s1)
	flag_printBuff_data = 1;
    109c:	4705                	li	a4,1
    109e:	c6e18023          	sb	a4,-928(gp) # 2000005c <flag_printBuff_data>
	buff->line_num = line_idx + 1;
    10a2:	00141793          	slli	a5,s0,0x1
    10a6:	97a2                	add	a5,a5,s0
    10a8:	078a                	slli	a5,a5,0x2
    10aa:	97a2                	add	a5,a5,s0
    10ac:	10c18713          	addi	a4,gp,268 # 20000508 <printBuff>
    10b0:	0786                	slli	a5,a5,0x1
void mngI2c_load_printBuff(const char *str, uint8_t line_idx) {
    10b2:	c406                	sw	ra,8(sp)
	buff->line_num = line_idx + 1;
    10b4:	97ba                	add	a5,a5,a4
    10b6:	0505                	addi	a0,a0,1
    10b8:	00a78ca3          	sb	a0,25(a5)
	strncpy(buff->str, str, SSD1306_STR_SIZE);
    10bc:	4665                	li	a2,25
    10be:	14018593          	addi	a1,gp,320 # 2000053c <str_output>
    10c2:	853e                	mv	a0,a5
	// buff->str[24] = '\0';
	printBuff_idx = (printBuff_idx + 1) % PRINT_BUFF_SIZE;
    10c4:	0405                	addi	s0,s0,1
	strncpy(buff->str, str, SSD1306_STR_SIZE);
    10c6:	3775                	jal	1072 <strncpy>
	printBuff_idx = (printBuff_idx + 1) % PRINT_BUFF_SIZE;
    10c8:	8805                	andi	s0,s0,1
    10ca:	00848023          	sb	s0,0(s1)
}
    10ce:	40a2                	lw	ra,8(sp)
    10d0:	4412                	lw	s0,4(sp)
    10d2:	4482                	lw	s1,0(sp)
    10d4:	0131                	addi	sp,sp,12
    10d6:	8082                	ret

000010d8 <memcpy>:
{
    10d8:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
    10da:	00f61363          	bne	a2,a5,10e0 <memcpy+0x8>
}
    10de:	8082                	ret
	for (; n; n--) *d++ = *s++;
    10e0:	00f58733          	add	a4,a1,a5
    10e4:	00074683          	lbu	a3,0(a4)
    10e8:	00f50733          	add	a4,a0,a5
    10ec:	0785                	addi	a5,a5,1
    10ee:	00d70023          	sb	a3,0(a4)
    10f2:	b7e5                	j	10da <memcpy+0x2>

000010f4 <ssd1306_data.isra.0>:
uint8_t ssd1306_data(uint8_t *data, int sz) {
    10f4:	7179                	addi	sp,sp,-48
    10f6:	d422                	sw	s0,40(sp)
	pkt[0] = 0x40;
    10f8:	04000793          	li	a5,64
uint8_t ssd1306_data(uint8_t *data, int sz) {
    10fc:	842e                	mv	s0,a1
	memcpy(&pkt[1], data, sz);
    10fe:	862e                	mv	a2,a1
    1100:	85aa                	mv	a1,a0
    1102:	00110513          	addi	a0,sp,1
uint8_t ssd1306_data(uint8_t *data, int sz) {
    1106:	d606                	sw	ra,44(sp)
	pkt[0] = 0x40;
    1108:	00f10023          	sb	a5,0(sp)
	memcpy(&pkt[1], data, sz);
    110c:	37f1                	jal	10d8 <memcpy>
	return i2c_write_raw(&dev_ssd1306, pkt, sz+1);
    110e:	00140593          	addi	a1,s0,1
    1112:	850a                	mv	a0,sp
    1114:	bacff0ef          	jal	ra,4c0 <i2c_write_raw.constprop.0>
}
    1118:	50b2                	lw	ra,44(sp)
    111a:	5422                	lw	s0,40(sp)
    111c:	6145                	addi	sp,sp,48
    111e:	8082                	ret

00001120 <ssd1306_print_str_at.constprop.0>:

void ssd1306_setWindow_pages(uint8_t start_page, uint8_t end_page) {
	ssd1306_setwindow(start_page, end_page, 0, SSD1306_W_LIMIT); // Set the window to the current page
}

void ssd1306_print_str_at(
    1120:	1151                	addi	sp,sp,-12
    1122:	c222                	sw	s0,4(sp)
    1124:	842a                	mv	s0,a0
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1126:	02100513          	li	a0,33
void ssd1306_print_str_at(
    112a:	c406                	sw	ra,8(sp)
    112c:	c026                	sw	s1,0(sp)
    112e:	84ae                	mv	s1,a1
	ssd1306_cmd(SSD1306_COLUMNADDR);
    1130:	cd4ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1134:	4501                	li	a0,0
    1136:	cceff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    113a:	07f00513          	li	a0,127
    113e:	cc6ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    1142:	02200513          	li	a0,34
    1146:	cbeff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    114a:	8526                	mv	a0,s1
    114c:	cb8ff0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    1150:	8526                	mv	a0,s1
    1152:	cb2ff0ef          	jal	ra,604 <ssd1306_cmd>
    1156:	44e5                	li	s1,25
  const char *str, uint8_t page, uint8_t column
) {
	ssd1306_setWindow_pages(page, page); // Set the window to the current page

	for (int i=0; i < SSD1306_STR_SIZE; i++) {
		if (*str) {
    1158:	00044783          	lbu	a5,0(s0)
    115c:	c78d                	beqz	a5,1186 <ssd1306_print_str_at.constprop.0+0x66>
			uint8_t char_index = *str - 32; // Adjust for ASCII offset
    115e:	1781                	addi	a5,a5,-32
			ssd1306_data((uint8_t *)FONT_7x5[char_index], 5); // Send font data
    1160:	0ff7f793          	andi	a5,a5,255
    1164:	6709                	lui	a4,0x2
    1166:	00279693          	slli	a3,a5,0x2
    116a:	03c70513          	addi	a0,a4,60 # 203c <FONT_7x5>
    116e:	97b6                	add	a5,a5,a3
    1170:	4595                	li	a1,5
    1172:	953e                	add	a0,a0,a5
    1174:	3741                	jal	10f4 <ssd1306_data.isra.0>
			str++;
    1176:	0405                	addi	s0,s0,1
	for (int i=0; i < SSD1306_STR_SIZE; i++) {
    1178:	14fd                	addi	s1,s1,-1
    117a:	fcf9                	bnez	s1,1158 <ssd1306_print_str_at.constprop.0+0x38>
		} else {
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
		}
	}
}
    117c:	40a2                	lw	ra,8(sp)
    117e:	4412                	lw	s0,4(sp)
    1180:	4482                	lw	s1,0(sp)
    1182:	0131                	addi	sp,sp,12
    1184:	8082                	ret
			ssd1306_data((uint8_t *)FONT_7x5[0], 5); // Send space character if no more characters
    1186:	6789                	lui	a5,0x2
    1188:	4595                	li	a1,5
    118a:	03c78513          	addi	a0,a5,60 # 203c <FONT_7x5>
    118e:	379d                	jal	10f4 <ssd1306_data.isra.0>
    1190:	b7e5                	j	1178 <ssd1306_print_str_at.constprop.0+0x58>

00001192 <puts>:
{
    1192:	1151                	addi	sp,sp,-12
    1194:	c406                	sw	ra,8(sp)
    1196:	c222                	sw	s0,4(sp)
    1198:	c026                	sw	s1,0(sp)
    119a:	84aa                	mv	s1,a0
	int sl = strlen( s );
    119c:	3985                	jal	e0c <strlen>
    119e:	842a                	mv	s0,a0
	_write(0, s, sl );
    11a0:	85aa                	mv	a1,a0
    11a2:	8526                	mv	a0,s1
    11a4:	3469                	jal	c2e <_write.constprop.0>
	_write(0, "\n", 1 );
    11a6:	6509                	lui	a0,0x2
    11a8:	4585                	li	a1,1
    11aa:	f1c50513          	addi	a0,a0,-228 # 1f1c <DMA1_Channel3_IRQHandler+0x96>
    11ae:	3441                	jal	c2e <_write.constprop.0>
}
    11b0:	40a2                	lw	ra,8(sp)
    11b2:	00140513          	addi	a0,s0,1
    11b6:	4412                	lw	s0,4(sp)
    11b8:	4482                	lw	s1,0(sp)
    11ba:	0131                	addi	sp,sp,12
    11bc:	8082                	ret

000011be <i2c_scan_callback>:
	if (addr == 0x00 || addr == 0x7F) return; // Skip reserved addresses
    11be:	cd21                	beqz	a0,1216 <i2c_scan_callback+0x58>
    11c0:	07f00793          	li	a5,127
    11c4:	862a                	mv	a2,a0
    11c6:	04f50863          	beq	a0,a5,1216 <i2c_scan_callback+0x58>
void i2c_scan_callback(const uint8_t addr) {
    11ca:	1151                	addi	sp,sp,-12
    11cc:	c222                	sw	s0,4(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    11ce:	6589                	lui	a1,0x2
    11d0:	f2058593          	addi	a1,a1,-224 # 1f20 <DMA1_Channel3_IRQHandler+0x9a>
    11d4:	14018513          	addi	a0,gp,320 # 2000053c <str_output>
void i2c_scan_callback(const uint8_t addr) {
    11d8:	c406                	sw	ra,8(sp)
    11da:	c026                	sw	s1,0(sp)
	sprintf(str_output, "I2C: 0x%02X", addr);
    11dc:	35b9                	jal	102a <sprintf>
	printf("%s\n", str_output);
    11de:	14018513          	addi	a0,gp,320 # 2000053c <str_output>
    11e2:	3f45                	jal	1192 <puts>
	modI2C_display(str_output, line++);
    11e4:	c6418793          	addi	a5,gp,-924 # 20000060 <line.2>
    11e8:	4384                	lw	s1,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    11ea:	03c00513          	li	a0,60
	modI2C_display(str_output, line++);
    11ee:	00148713          	addi	a4,s1,1
    11f2:	c398                	sw	a4,0(a5)
	if (i2c_ping(0x3C) != I2C_OK) return;
    11f4:	a34ff0ef          	jal	ra,428 <i2c_ping>
    11f8:	e911                	bnez	a0,120c <i2c_scan_callback+0x4e>
	ssd1306_print_str_at(str, line, 0);
    11fa:	14018513          	addi	a0,gp,320 # 2000053c <str_output>
}
    11fe:	4412                	lw	s0,4(sp)
    1200:	40a2                	lw	ra,8(sp)
	ssd1306_print_str_at(str, line, 0);
    1202:	0ff4f593          	andi	a1,s1,255
}
    1206:	4482                	lw	s1,0(sp)
    1208:	0131                	addi	sp,sp,12
	ssd1306_print_str_at(str, line, 0);
    120a:	bf19                	j	1120 <ssd1306_print_str_at.constprop.0>
}
    120c:	40a2                	lw	ra,8(sp)
    120e:	4412                	lw	s0,4(sp)
    1210:	4482                	lw	s1,0(sp)
    1212:	0131                	addi	sp,sp,12
    1214:	8082                	ret
    1216:	8082                	ret

00001218 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
    1218:	400227b7          	lui	a5,0x40022
    121c:	4705                	li	a4,1
    121e:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
    1220:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    1224:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
    1228:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
    122c:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x1078e44>
    1230:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
    1232:	009f0737          	lui	a4,0x9f0
    1236:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
    1238:	020006b7          	lui	a3,0x2000
    123c:	40021737          	lui	a4,0x40021
    1240:	431c                	lw	a5,0(a4)
    1242:	8ff5                	and	a5,a5,a3
    1244:	dff5                	beqz	a5,1240 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    1246:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1248:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
    124c:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
    124e:	0027e793          	ori	a5,a5,2
    1252:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
    1254:	4721                	li	a4,8
    1256:	42dc                	lw	a5,4(a3)
    1258:	8bb1                	andi	a5,a5,12
    125a:	fee79ee3          	bne	a5,a4,1256 <SystemInit+0x3e>
	*DMDATA1 = 0x00;
    125e:	e00007b7          	lui	a5,0xe0000
    1262:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
    1266:	08000713          	li	a4,128
    126a:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
    126e:	8082                	ret

00001270 <main>:
//# 	*BTN*		PC0 - [ 				] - PC1		*SDA*


volatile uint8_t i2c_registers[32] = {0xaa};

int main() {
    1270:	715d                	addi	sp,sp,-80
    1272:	c686                	sw	ra,76(sp)
    1274:	c4a2                	sw	s0,72(sp)
    1276:	c2a6                	sw	s1,68(sp)
	SystemInit();
    1278:	3745                	jal	1218 <SystemInit>
	return;
}


uint16_t fun_optionByte_getValue() {
    uint8_t data0 = OB->Data0;
    127a:	200006b7          	lui	a3,0x20000
    127e:	8046d583          	lhu	a1,-2044(a3) # 1ffff804 <lib_i2c.c.d894f163+0x1fff85c7>
    uint8_t data1 = OB->Data1;
    1282:	8066d783          	lhu	a5,-2042(a3)
    uint8_t data0 = OB->Data0;
    1286:	80068713          	addi	a4,a3,-2048
    return data0 + (data1 << 8);
    128a:	0ff5f593          	andi	a1,a1,255
    uint8_t data1 = OB->Data1;
    128e:	07c2                	slli	a5,a5,0x10
    1290:	83c1                	srli	a5,a5,0x10
    return data0 + (data1 << 8);
    1292:	07a2                	slli	a5,a5,0x8
    1294:	8ddd                	or	a1,a1,a5

	uint16_t bootCnt = fun_optionByte_getValue();
	bootCnt++;
    1296:	0585                	addi	a1,a1,1
	hold32p[0]=ob32p[0]; 			// Copy RDPR and USER
    1298:	8006a783          	lw	a5,-2048(a3)
    129c:	05c2                	slli	a1,a1,0x10
    129e:	81c1                	srli	a1,a1,0x10
    12a0:	dc3e                	sw	a5,56(sp)
	hold32p[1]=(uint32_t)data;	    // Copy in the two Data values to be written
    12a2:	de2e                	sw	a1,60(sp)
	hold32p[2]=ob32p[2];			// Copy WRPR0 and WEPR1
    12a4:	471c                	lw	a5,8(a4)
	FLASH->KEYR = FLASH_KEY1;
    12a6:	456706b7          	lui	a3,0x45670
    12aa:	12368693          	addi	a3,a3,291 # 45670123 <_eusrstack+0x2566f923>
	hold32p[2]=ob32p[2];			// Copy WRPR0 and WEPR1
    12ae:	c0be                	sw	a5,64(sp)
	FLASH->KEYR = FLASH_KEY2;
    12b0:	cdef9737          	lui	a4,0xcdef9
	FLASH->KEYR = FLASH_KEY1;
    12b4:	400227b7          	lui	a5,0x40022
    12b8:	c3d4                	sw	a3,4(a5)
	FLASH->KEYR = FLASH_KEY2;
    12ba:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef81ab>
    12be:	c3d8                	sw	a4,4(a5)
	FLASH->OBKEYR = FLASH_KEY1;
    12c0:	c794                	sw	a3,8(a5)
	FLASH->OBKEYR = FLASH_KEY2;
    12c2:	c798                	sw	a4,8(a5)
	FLASH->CTLR |= CR_OPTER_Set;			// OBER RW Perform user-selected word erasure	
    12c4:	4b98                	lw	a4,16(a5)
    12c6:	02076713          	ori	a4,a4,32
    12ca:	cb98                	sw	a4,16(a5)
	FLASH->CTLR |= CR_STRT_Set;    			// STRT RW1 Start. Set 1 to start an erase action,hw automatically clears to 0
    12cc:	4b98                	lw	a4,16(a5)
    12ce:	04076713          	ori	a4,a4,64
    12d2:	cb98                	sw	a4,16(a5)
	while (FLASH->STATR & FLASH_BUSY);		// Wait for flash operation to be done
    12d4:	47d8                	lw	a4,12(a5)
    12d6:	8b05                	andi	a4,a4,1
    12d8:	ff75                	bnez	a4,12d4 <main+0x64>
	FLASH->CTLR &= CR_OPTER_Reset; 			// Disable erasure mode	
    12da:	4b98                	lw	a4,16(a5)
		ob16p[i]=hold[i];
    12dc:	20000537          	lui	a0,0x20000
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
    12e0:	4619                	li	a2,6
	FLASH->CTLR &= CR_OPTER_Reset; 			// Disable erasure mode	
    12e2:	fdf77713          	andi	a4,a4,-33
    12e6:	cb98                	sw	a4,16(a5)
	FLASH->CTLR |= CR_OPTPG_Set;   			// OBG  RW Perform user-selected word programming
    12e8:	4b98                	lw	a4,16(a5)
    12ea:	01076713          	ori	a4,a4,16
    12ee:	cb98                	sw	a4,16(a5)
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
    12f0:	4701                	li	a4,0
		while (FLASH->STATR & FLASH_BUSY);	// Wait for flash operation to be done
    12f2:	400227b7          	lui	a5,0x40022
		ob16p[i]=hold[i];
    12f6:	00171693          	slli	a3,a4,0x1
    12fa:	00c0                	addi	s0,sp,68
    12fc:	00d40333          	add	t1,s0,a3
    1300:	ff435303          	lhu	t1,-12(t1)
    1304:	96aa                	add	a3,a3,a0
    1306:	80669023          	sh	t1,-2048(a3)
		while (FLASH->STATR & FLASH_BUSY);	// Wait for flash operation to be done
    130a:	47d4                	lw	a3,12(a5)
    130c:	8a85                	andi	a3,a3,1
    130e:	fef5                	bnez	a3,130a <main+0x9a>
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
    1310:	0705                	addi	a4,a4,1
    1312:	fec712e3          	bne	a4,a2,12f6 <main+0x86>
	FLASH->CTLR &= CR_OPTPG_Reset;			// Disable programming mode
    1316:	4b98                	lw	a4,16(a5)
	fun_optionByte_store(bootCnt);
	printf("Boot Count: %d\n", bootCnt);
    1318:	6509                	lui	a0,0x2
    131a:	f3450513          	addi	a0,a0,-204 # 1f34 <DMA1_Channel3_IRQHandler+0xae>
    131e:	9b3d                	andi	a4,a4,-17
    1320:	cb98                	sw	a4,16(a5)
	FLASH->CTLR|=CR_LOCK_Set;				// Lock flash memories again
    1322:	4b98                	lw	a4,16(a5)
    1324:	08076713          	ori	a4,a4,128
    1328:	cb98                	sw	a4,16(a5)
    132a:	3165                	jal	fd2 <printf>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
    132c:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1330:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
    1332:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
    1336:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x4942>
    133a:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
    133c:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
    1340:	c9018713          	addi	a4,gp,-880 # 2000008c <systick_millis>
    1344:	00072023          	sw	zero,0(a4)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
    1348:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    134a:	6605                	lui	a2,0x1
    134c:	00776713          	ori	a4,a4,7
    1350:	c398                	sw	a4,0(a5)
    1352:	e000e737          	lui	a4,0xe000e
    1356:	10c72023          	sw	a2,256(a4) # e000e100 <_eusrstack+0xc000d900>

	systick_init();			//! required for millis()
	funGpioInitAll();
    135a:	40021637          	lui	a2,0x40021
    135e:	4e18                	lw	a4,24(a2)
    1360:	03576713          	ori	a4,a4,53
    1364:	ce18                	sw	a4,24(a2)
	uint32_t targend = SysTick->CNT + n;
    1366:	4798                	lw	a4,8(a5)
    1368:	000757b7          	lui	a5,0x75
    136c:	30078793          	addi	a5,a5,768 # 75300 <lib_i2c.c.d894f163+0x6e0c3>
    1370:	973e                	add	a4,a4,a5
    1372:	c9018793          	addi	a5,gp,-880 # 2000008c <systick_millis>
    1376:	c23e                	sw	a5,4(sp)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
    1378:	e000f6b7          	lui	a3,0xe000f
    137c:	469c                	lw	a5,8(a3)
    137e:	8f99                	sub	a5,a5,a4
    1380:	fe07cee3          	bltz	a5,137c <main+0x10c>
    model->debounce_time = millis();
    model->release_time = millis();
}

void fun_button_setup(Button_t *model) {
    if (model->pin == 0xFF) return; 
    1384:	c041c683          	lbu	a3,-1020(gp) # 20000000 <button1.1>
    1388:	c0418793          	addi	a5,gp,-1020 # 20000000 <button1.1>
    138c:	0ff00713          	li	a4,255
    1390:	c03e                	sw	a5,0(sp)
    1392:	04e68a63          	beq	a3,a4,13e6 <main+0x176>

    model->btn_state = BUTTON_IDLE;
    model->debounce_time = 0;
    model->release_time = 0;
    model->press_time = 0;
    1396:	0007a623          	sw	zero,12(a5)

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
    139a:	0046d713          	srli	a4,a3,0x4
    139e:	400117b7          	lui	a5,0x40011
    13a2:	80078793          	addi	a5,a5,-2048 # 40010800 <_eusrstack+0x20010000>
    13a6:	072a                	slli	a4,a4,0xa
    13a8:	973e                	add	a4,a4,a5
    13aa:	00f6f613          	andi	a2,a3,15
    13ae:	4308                	lw	a0,0(a4)
    13b0:	00261593          	slli	a1,a2,0x2
    13b4:	47bd                	li	a5,15
    13b6:	00b797b3          	sll	a5,a5,a1
    13ba:	fff7c793          	not	a5,a5
    13be:	46a1                	li	a3,8
    13c0:	8fe9                	and	a5,a5,a0
    13c2:	00b696b3          	sll	a3,a3,a1
    13c6:	8fd5                	or	a5,a5,a3
    13c8:	c31c                	sw	a5,0(a4)
    funDigitalWrite(model->pin, 1);
    13ca:	4785                	li	a5,1
    13cc:	00c797b3          	sll	a5,a5,a2
    13d0:	cb1c                	sw	a5,16(a4)
    model->btn_state = newState;
    13d2:	4702                	lw	a4,0(sp)
    13d4:	478d                	li	a5,3
    13d6:	00f700a3          	sb	a5,1(a4)
    model->debounce_time = millis();
    13da:	4792                	lw	a5,4(sp)
    13dc:	439c                	lw	a5,0(a5)
    13de:	c35c                	sw	a5,4(a4)
    model->release_time = millis();
    13e0:	4792                	lw	a5,4(sp)
    13e2:	439c                	lw	a5,0(a5)
    13e4:	c71c                	sw	a5,8(a4)
	//# Button: uses PC0
	static Button_t button1 = { .pin = BUTTON_PIN };
	fun_button_setup(&button1);

	//# Hold BUTTON_PIN low to enter slave mode
	uint8_t i2cMaster_mode = funDigitalRead(BUTTON_PIN);
    13e6:	400117b7          	lui	a5,0x40011
    13ea:	479c                	lw	a5,8(a5)
    13ec:	8b85                	andi	a5,a5,1
    13ee:	d43e                	sw	a5,40(sp)
	if(dev->regb == 0) dev->regb = 1;
    13f0:	c2018793          	addi	a5,gp,-992 # 2000001c <dev_ssd1306>
    13f4:	00a7c683          	lbu	a3,10(a5) # 4001100a <_eusrstack+0x2001080a>
    13f8:	c2018713          	addi	a4,gp,-992 # 2000001c <dev_ssd1306>
    13fc:	4785                	li	a5,1
    13fe:	c681                	beqz	a3,1406 <main+0x196>
	if(dev->regb  > 4) dev->regb = 4;
    1400:	4791                	li	a5,4
    1402:	00d7f463          	bgeu	a5,a3,140a <main+0x19a>
    1406:	00f70523          	sb	a5,10(a4)
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    140a:	400217b7          	lui	a5,0x40021
    140e:	4b90                	lw	a2,16(a5)
    1410:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1414:	ffe005b7          	lui	a1,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
    1418:	8e49                	or	a2,a2,a0
    141a:	cb90                	sw	a2,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    141c:	4b90                	lw	a2,16(a5)
    141e:	15fd                	addi	a1,a1,-1
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1420:	6405                	lui	s0,0x1
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
    1422:	8e6d                	and	a2,a2,a1
    1424:	cb90                	sw	a2,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    1426:	4fd4                	lw	a3,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    1428:	fbc00637          	lui	a2,0xfbc00
    142c:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
    142e:	8ec9                	or	a3,a3,a0
    1430:	cfd4                	sw	a3,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
    1432:	4f94                	lw	a3,24(a5)
    1434:	0116e693          	ori	a3,a3,17
    1438:	cf94                	sw	a3,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
    143a:	400107b7          	lui	a5,0x40010
    143e:	43d4                	lw	a3,4(a5)
    1440:	8ef1                	and	a3,a3,a2
    1442:	c3d4                	sw	a3,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
    1444:	43d4                	lw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1446:	767d                	lui	a2,0xfffff
    1448:	0ff60613          	addi	a2,a2,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
    144c:	c3d4                	sw	a3,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
    144e:	400117b7          	lui	a5,0x40011
    1452:	4394                	lw	a3,0(a5)
    1454:	f0f6f693          	andi	a3,a3,-241
    1458:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
    145a:	4394                	lw	a3,0(a5)
    145c:	0d06e693          	ori	a3,a3,208
    1460:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
    1462:	4394                	lw	a3,0(a5)
    1464:	8ef1                	and	a3,a3,a2
    1466:	c394                	sw	a3,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
    1468:	4394                	lw	a3,0(a5)
    146a:	d0040613          	addi	a2,s0,-768 # d00 <_write.constprop.0+0xd2>
    146e:	8ed1                	or	a3,a3,a2
    1470:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
    1472:	400056b7          	lui	a3,0x40005
    1476:	4046d783          	lhu	a5,1028(a3) # 40005404 <_eusrstack+0x20004c04>
    147a:	07c2                	slli	a5,a5,0x10
    147c:	83c1                	srli	a5,a5,0x10
    147e:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
    1482:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = i2c_conf;
    1486:	40f69223          	sh	a5,1028(a3)
	if(dev->clkr <= 100000)
    148a:	431c                	lw	a5,0(a4)
    148c:	6761                	lui	a4,0x18
    148e:	6a070713          	addi	a4,a4,1696 # 186a0 <lib_i2c.c.d894f163+0x11463>
    1492:	00179593          	slli	a1,a5,0x1
    1496:	3cf76b63          	bltu	a4,a5,186c <main+0x5fc>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (2 * dev->clkr)) & I2C_CKCFGR_CCR;
    149a:	02dc7537          	lui	a0,0x2dc7
    149e:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbf9c3>
    14a2:	c1ffe0ef          	jal	ra,c0 <__hidden___udivsi3>
    14a6:	147d                	addi	s0,s0,-1
    14a8:	8d61                	and	a0,a0,s0
    14aa:	0542                	slli	a0,a0,0x10
    14ac:	8141                	srli	a0,a0,0x10
	I2C1->CKCFGR = i2c_conf;
    14ae:	40005737          	lui	a4,0x40005
    14b2:	40a71e23          	sh	a0,1052(a4) # 4000541c <_eusrstack+0x20004c1c>
	I2C1->CTLR1 |= I2C_CTLR1_PE;
    14b6:	40075783          	lhu	a5,1024(a4)
    14ba:	07c2                	slli	a5,a5,0x10
    14bc:	83c1                	srli	a5,a5,0x10
    14be:	0017e793          	ori	a5,a5,1
    14c2:	40f71023          	sh	a5,1024(a4)
	return i2c_error();
    14c6:	e65fe0ef          	jal	ra,32a <i2c_error>
	if(i2c_init(&dev_ssd1306) != I2C_OK) {
    14ca:	3a050f63          	beqz	a0,1888 <main+0x618>
		printf("Failed to init I2C\n");
    14ce:	6509                	lui	a0,0x2
    14d0:	f4450513          	addi	a0,a0,-188 # 1f44 <DMA1_Channel3_IRQHandler+0xbe>
		printf("----Done Scanning----\n\n");
    14d4:	397d                	jal	1192 <puts>
} TIM_PWM_t;

//! Expected funGpioInitAll() before init
void fun_timPWM_init(TIM_PWM_t* model) {	
	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM1_REMAP_NOREMAP;
    14d6:	400107b7          	lui	a5,0x40010
    14da:	43d8                	lw	a4,4(a5)
    14dc:	c3d8                	sw	a4,4(a5)
	
	TIM_TypeDef* timer = model->TIM;
    14de:	c4018793          	addi	a5,gp,-960 # 2000003c <pwm_CH1c.0>
    14e2:	43dc                	lw	a5,4(a5)
	
	if (timer == TIM1) {
    14e4:	40013737          	lui	a4,0x40013
    14e8:	c4018693          	addi	a3,gp,-960 # 2000003c <pwm_CH1c.0>
    14ec:	c0070713          	addi	a4,a4,-1024 # 40012c00 <_eusrstack+0x20012400>
    14f0:	c436                	sw	a3,8(sp)
    14f2:	4ae79863          	bne	a5,a4,19a2 <main+0x732>
		RCC->APB2PCENR |= RCC_APB2Periph_TIM1;
    14f6:	40021737          	lui	a4,0x40021
    14fa:	4f10                	lw	a2,24(a4)
    14fc:	6685                	lui	a3,0x1
    14fe:	80068693          	addi	a3,a3,-2048 # 800 <WS2812FillBuffSec+0xd2>
    1502:	8e55                	or	a2,a2,a3
    1504:	cf10                	sw	a2,24(a4)

		// Reset TIM1 to init all regs
		RCC->APB2PRSTR |= RCC_APB2Periph_TIM1;
    1506:	4750                	lw	a2,12(a4)
    1508:	8ed1                	or	a3,a3,a2
    150a:	c754                	sw	a3,12(a4)
		RCC->APB2PRSTR &= ~RCC_APB2Periph_TIM1;
    150c:	4754                	lw	a3,12(a4)
    150e:	767d                	lui	a2,0xfffff
    1510:	7ff60613          	addi	a2,a2,2047 # fffff7ff <_eusrstack+0xdfffefff>
    1514:	8ef1                	and	a3,a3,a2
    1516:	c754                	sw	a3,12(a4)
		
		timer->BDTR |= TIM_MOE;			// Enable TIM1 outputs
    1518:	0447d703          	lhu	a4,68(a5) # 40010044 <_eusrstack+0x2000f844>
    151c:	66a1                	lui	a3,0x8
    151e:	0742                	slli	a4,a4,0x10
    1520:	8341                	srli	a4,a4,0x10
    1522:	8f55                	or	a4,a4,a3
    1524:	04e79223          	sh	a4,68(a5)
		RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
	}

	// CTLR1: default is up, events generated, edge align
	// SMCFGR: default clk input is CK_INT
	timer->PSC = 0x0000;			// Prescaler 
    1528:	02079423          	sh	zero,40(a5)
	timer->ATRLR = 255;				// Auto Reload - sets period
    152c:	0ff00593          	li	a1,255
    1530:	02b79623          	sh	a1,44(a5)

	timer->SWEVGR |= TIM_UG;		// Reload immediately
    1534:	0147d703          	lhu	a4,20(a5)
    1538:	0742                	slli	a4,a4,0x10
    153a:	8341                	srli	a4,a4,0x10
    153c:	00176713          	ori	a4,a4,1
    1540:	00e79a23          	sh	a4,20(a5)
	timer->CTLR1 |= TIM_CEN;		// Enable timer
    1544:	0007d703          	lhu	a4,0(a5)
    1548:	0742                	slli	a4,a4,0x10
    154a:	8341                	srli	a4,a4,0x10
    154c:	00176713          	ori	a4,a4,1
    1550:	00e79023          	sh	a4,0(a5)
}

void fun_timPWM_reload(TIM_PWM_t* model) {
	model->counter = 0;
    1554:	4722                	lw	a4,8(sp)
	model->timeRef = 0;
	funPinMode(model->pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF);
    1556:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
	model->counter = 0;
    155a:	00072423          	sw	zero,8(a4)
	model->timeRef = 0;
    155e:	00072623          	sw	zero,12(a4)
	funPinMode(model->pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF);
    1562:	0046d613          	srli	a2,a3,0x4
    1566:	40011737          	lui	a4,0x40011
    156a:	80070713          	addi	a4,a4,-2048 # 40010800 <_eusrstack+0x20010000>
    156e:	062a                	slli	a2,a2,0xa
    1570:	963a                	add	a2,a2,a4
    1572:	8abd                	andi	a3,a3,15
    1574:	4208                	lw	a0,0(a2)
    1576:	068a                	slli	a3,a3,0x2
    1578:	473d                	li	a4,15
    157a:	00d71733          	sll	a4,a4,a3
    157e:	fff74713          	not	a4,a4
    1582:	8f69                	and	a4,a4,a0
    1584:	4525                	li	a0,9
    1586:	00d516b3          	sll	a3,a0,a3
    158a:	8f55                	or	a4,a4,a3
    158c:	c218                	sw	a4,0(a2)
	timer->CH1CVR = 255;
	timer->CH2CVR = 255;
	timer->CH3CVR = 255;
	timer->CH4CVR = 255;

	switch (model->CCER) {
    158e:	4722                	lw	a4,8(sp)
	timer->CH1CVR = 255;
    1590:	dbcc                	sw	a1,52(a5)
	timer->CH2CVR = 255;
    1592:	df8c                	sw	a1,56(a5)
	switch (model->CCER) {
    1594:	00275703          	lhu	a4,2(a4)
	timer->CH3CVR = 255;
    1598:	dfcc                	sw	a1,60(a5)
	timer->CH4CVR = 255;
    159a:	c3ac                	sw	a1,64(a5)
	switch (model->CCER) {
    159c:	04000693          	li	a3,64
    15a0:	4cd70f63          	beq	a4,a3,1a7e <main+0x80e>
    15a4:	42e6e163          	bltu	a3,a4,19c6 <main+0x756>
    15a8:	4691                	li	a3,4
    15aa:	46d70f63          	beq	a4,a3,1a28 <main+0x7b8>
    15ae:	46c1                	li	a3,16
    15b0:	4ad70163          	beq	a4,a3,1a52 <main+0x7e2>
    15b4:	4685                	li	a3,1
    15b6:	44d70563          	beq	a4,a3,1a00 <main+0x790>
		D5		T2CH4_		//! UART_RX
*/

//! Expected funGpioInitAll() before init
void fun_encoder_setup(Encoder_t *model) {
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    15ba:	400217b7          	lui	a5,0x40021
    15be:	4fd8                	lw	a4,28(a5)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	funPinMode(PD3, GPIO_CFGLR_IN_PUPD);
    15c0:	75c5                	lui	a1,0xffff1
    15c2:	15fd                	addi	a1,a1,-1
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    15c4:	00176713          	ori	a4,a4,1
    15c8:	cfd8                	sw	a4,28(a5)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
    15ca:	40010737          	lui	a4,0x40010
    15ce:	4354                	lw	a3,4(a4)
    15d0:	c354                	sw	a3,4(a4)
	funPinMode(PD3, GPIO_CFGLR_IN_PUPD);
    15d2:	40011737          	lui	a4,0x40011
    15d6:	40070693          	addi	a3,a4,1024 # 40011400 <_eusrstack+0x20010c00>
    15da:	4290                	lw	a2,0(a3)
	// GPIOA->CFGLR &= ~(0xf<<(4*0));	// PA1 Analog input Chan1
	// GPIOA->CFGLR &= ~(0xf<<(4*1));	// PA2 Analog input Chan0

    int chanA = 0;
    int chanB = 1;
    GPIOA->CFGLR &= ~(0xf<<(4*0));
    15dc:	80070713          	addi	a4,a4,-2048
    15e0:	8e6d                	and	a2,a2,a1
    15e2:	65a1                	lui	a1,0x8
    15e4:	8e4d                	or	a2,a2,a1
    15e6:	c290                	sw	a2,0(a3)
	funPinMode(PD4, GPIO_CFGLR_IN_PUPD);
    15e8:	4290                	lw	a2,0(a3)
    15ea:	fff105b7          	lui	a1,0xfff10
    15ee:	15fd                	addi	a1,a1,-1
    15f0:	8e6d                	and	a2,a2,a1
    15f2:	000805b7          	lui	a1,0x80
    15f6:	8e4d                	or	a2,a2,a1
    15f8:	c290                	sw	a2,0(a3)
	funDigitalWrite(PD3, 1);
    15fa:	4621                	li	a2,8
    15fc:	ca90                	sw	a2,16(a3)
	funDigitalWrite(PD4, 1);
    15fe:	4641                	li	a2,16
    1600:	ca90                	sw	a2,16(a3)

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    1602:	4b94                	lw	a3,16(a5)
    1604:	0016e693          	ori	a3,a3,1
    1608:	cb94                	sw	a3,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    160a:	4b94                	lw	a3,16(a5)
    160c:	9af9                	andi	a3,a3,-2
    160e:	cb94                	sw	a3,16(a5)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
    1610:	400006b7          	lui	a3,0x40000
    1614:	0086d603          	lhu	a2,8(a3) # 40000008 <_eusrstack+0x1ffff808>
    1618:	0642                	slli	a2,a2,0x10
    161a:	8241                	srli	a2,a2,0x10
    161c:	00366613          	ori	a2,a2,3
    1620:	00c69423          	sh	a2,8(a3)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
    1624:	7665                	lui	a2,0xffff9
    1626:	167d                	addi	a2,a2,-1
    1628:	02c69223          	sh	a2,36(a3)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
    162c:	0146d603          	lhu	a2,20(a3)
    1630:	0642                	slli	a2,a2,0x10
    1632:	8241                	srli	a2,a2,0x10
    1634:	00166613          	ori	a2,a2,1
    1638:	00c69a23          	sh	a2,20(a3)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
    163c:	0006d603          	lhu	a2,0(a3)
    1640:	0642                	slli	a2,a2,0x10
    1642:	8241                	srli	a2,a2,0x10
    1644:	00166613          	ori	a2,a2,1
    1648:	00c69023          	sh	a2,0(a3)

	model->initial_count = TIM2->CNT;
    164c:	0246d603          	lhu	a2,36(a3)
	model->last_count = TIM2->CNT;
    1650:	0246d683          	lhu	a3,36(a3)
	model->initial_count = TIM2->CNT;
    1654:	0642                	slli	a2,a2,0x10
	model->last_count = TIM2->CNT;
    1656:	06c2                	slli	a3,a3,0x10
    1658:	82c1                	srli	a3,a3,0x10
    165a:	ca36                	sw	a3,20(sp)
	model->initial_count = TIM2->CNT;
    165c:	8241                	srli	a2,a2,0x10
	RCC->CFGR0 &= ~(0x1F<<11);
    165e:	43d4                	lw	a3,4(a5)
    1660:	d632                	sw	a2,44(sp)
    1662:	7641                	lui	a2,0xffff0
    1664:	7ff60613          	addi	a2,a2,2047 # ffff07ff <_eusrstack+0xdffeffff>
    1668:	8ef1                	and	a3,a3,a2
    166a:	c3d4                	sw	a3,4(a5)
	RCC->APB2PCENR |= RCC_APB2Periph_ADC1;
    166c:	4f94                	lw	a3,24(a5)
    166e:	2006e693          	ori	a3,a3,512
    1672:	cf94                	sw	a3,24(a5)
    GPIOA->CFGLR &= ~(0xf<<(4*0));
    1674:	4314                	lw	a3,0(a4)
    1676:	9ac1                	andi	a3,a3,-16
    1678:	c314                	sw	a3,0(a4)
    GPIOA->CFGLR &= ~(0xf<<(4*1));
    167a:	4314                	lw	a3,0(a4)
    167c:	f0f6f693          	andi	a3,a3,-241
    1680:	c314                	sw	a3,0(a4)
	
	// Reset the ADC to init all regs
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    1682:	47d8                	lw	a4,12(a5)
    // turn on ADC
	ADC1->CTLR2 |= ADC_ADON;
	
	// Reset and calibrate
	ADC1->CTLR2 |= ADC_RSTCAL;
	while(ADC1->CTLR2 & ADC_RSTCAL);
    1684:	400126b7          	lui	a3,0x40012
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    1688:	20076713          	ori	a4,a4,512
    168c:	c7d8                	sw	a4,12(a5)
	RCC->APB2PRSTR &= ~RCC_APB2Periph_ADC1;
    168e:	47d8                	lw	a4,12(a5)
    1690:	dff77713          	andi	a4,a4,-513
    1694:	c7d8                	sw	a4,12(a5)
	ADC1->RSQR1 = (ADC_NUMCHLS-1) << 20;	// four chls in the sequence
    1696:	400127b7          	lui	a5,0x40012
    169a:	40078793          	addi	a5,a5,1024 # 40012400 <_eusrstack+0x20011c00>
    169e:	00100737          	lui	a4,0x100
    16a2:	d7d8                	sw	a4,44(a5)
	ADC1->RSQR2 = 0;
    16a4:	0207a823          	sw	zero,48(a5)
    ADC1->RSQR3 = (chanA<<(5*0)) | (chanB<<(5*1));
    16a8:	02000713          	li	a4,32
    16ac:	dbd8                	sw	a4,52(a5)
    ADC1->SAMPTR2 = (7<<(3*chanA)) | (7<<(3*chanB));
    16ae:	03f00713          	li	a4,63
    16b2:	cb98                	sw	a4,16(a5)
	ADC1->CTLR2 |= ADC_ADON;
    16b4:	4798                	lw	a4,8(a5)
    16b6:	00176713          	ori	a4,a4,1
    16ba:	c798                	sw	a4,8(a5)
	ADC1->CTLR2 |= ADC_RSTCAL;
    16bc:	4798                	lw	a4,8(a5)
    16be:	00876713          	ori	a4,a4,8
    16c2:	c798                	sw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_RSTCAL);
    16c4:	40068793          	addi	a5,a3,1024 # 40012400 <_eusrstack+0x20011c00>
    16c8:	4798                	lw	a4,8(a5)
    16ca:	8b21                	andi	a4,a4,8
    16cc:	ff65                	bnez	a4,16c4 <main+0x454>
	ADC1->CTLR2 |= ADC_CAL;
    16ce:	4798                	lw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    16d0:	40012637          	lui	a2,0x40012
	ADC1->CTLR2 |= ADC_CAL;
    16d4:	00476713          	ori	a4,a4,4
    16d8:	c798                	sw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    16da:	40060793          	addi	a5,a2,1024 # 40012400 <_eusrstack+0x20011c00>
    16de:	4798                	lw	a4,8(a5)
    16e0:	8b11                	andi	a4,a4,4
    16e2:	ff65                	bnez	a4,16da <main+0x46a>
	
	// Turn on DMA
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    16e4:	400216b7          	lui	a3,0x40021
    16e8:	4ad8                	lw	a4,20(a3)
	
	//DMA1_Channel1 is for ADC
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    16ea:	44c60613          	addi	a2,a2,1100
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    16ee:	00176713          	ori	a4,a4,1
    16f2:	cad8                	sw	a4,20(a3)
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    16f4:	40020737          	lui	a4,0x40020
    16f8:	cb10                	sw	a2,16(a4)
	DMA1_Channel1->MADDR = (uint32_t)adc_buffer;
    16fa:	c7c18613          	addi	a2,gp,-900 # 20000078 <adc_buffer>
    16fe:	cb50                	sw	a2,20(a4)
	DMA1_Channel1->CNTR  = ADC_NUMCHLS;
    1700:	4589                	li	a1,2
	DMA1_Channel1->CFGR  =
    1702:	6605                	lui	a2,0x1
	DMA1_Channel1->CNTR  = ADC_NUMCHLS;
    1704:	c74c                	sw	a1,12(a4)
	DMA1_Channel1->CFGR  =
    1706:	5a060513          	addi	a0,a2,1440 # 15a0 <main+0x330>
    170a:	c708                	sw	a0,8(a4)
		DMA_PeripheralDataSize_HalfWord |
		DMA_MemoryInc_Enable |
		DMA_Mode_Circular |
		DMA_DIR_PeripheralSRC;
	
	DMA1_Channel1->CFGR |= DMA_CFGR1_EN;    // Turn on DMA channel 1
    170c:	4708                	lw	a0,8(a4)
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
	
	// Enable continuous conversion and DMA
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    170e:	000e02b7          	lui	t0,0xe0
    1712:	10228293          	addi	t0,t0,258 # e0102 <lib_i2c.c.d894f163+0xd8ec5>
	DMA1_Channel1->CFGR |= DMA_CFGR1_EN;    // Turn on DMA channel 1
    1716:	00156513          	ori	a0,a0,1
    171a:	c708                	sw	a0,8(a4)
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
    171c:	43c8                	lw	a0,4(a5)
	R8_SPI_CTRL_CFG |= RB_SPI_BIT_ORDER;

	NVIC_EnableIRQ( SPI0_IRQn );
#else
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    171e:	0641                	addi	a2,a2,16
		SPI_NSS_Soft | SPI_CPHA_1Edge | SPI_CPOL_Low | SPI_DataSize_16b |
		SPI_Mode_Master | SPI_Direction_1Line_Tx |
		3<<3; // Divisior = 16 (48/16 = 3MHz)

	SPI1->CTLR2 = SPI_CTLR2_TXDMAEN;  // Enable Tx buffer DMA
	SPI1->HSCR = 1; // Enable high-speed read mode
    1720:	4405                	li	s0,1
    1722:	10056513          	ori	a0,a0,256
    1726:	c3c8                	sw	a0,4(a5)
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    1728:	4788                	lw	a0,8(a5)
    172a:	00556533          	or	a0,a0,t0
    172e:	c788                	sw	a0,8(a5)
	ADC1->CTLR2 |= ADC_SWSTART;             // start conversion
    1730:	4788                	lw	a0,8(a5)
    1732:	004002b7          	lui	t0,0x400
    1736:	00556533          	or	a0,a0,t0
    173a:	c788                	sw	a0,8(a5)
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    173c:	4adc                	lw	a5,20(a3)
    printf("Neo_loadCommand: %02X\n", cmd);
    173e:	6509                	lui	a0,0x2
    1740:	fa050513          	addi	a0,a0,-96 # 1fa0 <DMA1_Channel3_IRQHandler+0x11a>
    1744:	0017e793          	ori	a5,a5,1
    1748:	cadc                	sw	a5,20(a3)
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    174a:	4e9c                	lw	a5,24(a3)
    174c:	8e5d                	or	a2,a2,a5
    174e:	ce90                	sw	a2,24(a3)
	GPIOC->CFGLR &= ~(0xf<<(4*6));
    1750:	400117b7          	lui	a5,0x40011
    1754:	4394                	lw	a3,0(a5)
    1756:	f1000637          	lui	a2,0xf1000
    175a:	167d                	addi	a2,a2,-1
    175c:	8ef1                	and	a3,a3,a2
    175e:	c394                	sw	a3,0(a5)
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*6);
    1760:	4394                	lw	a3,0(a5)
    1762:	09000637          	lui	a2,0x9000
    1766:	8ed1                	or	a3,a3,a2
    1768:	c394                	sw	a3,0(a5)
	SPI1->CTLR1 = 
    176a:	76f5                	lui	a3,0xffffd
    176c:	400137b7          	lui	a5,0x40013
    1770:	b1c68693          	addi	a3,a3,-1252 # ffffcb1c <_eusrstack+0xdfffc31c>
    1774:	00d79023          	sh	a3,0(a5) # 40013000 <_eusrstack+0x20012800>
	SPI1->CTLR2 = SPI_CTLR2_TXDMAEN;  // Enable Tx buffer DMA
    1778:	00b79223          	sh	a1,4(a5)
	SPI1->HSCR = 1; // Enable high-speed read mode
    177c:	02879223          	sh	s0,36(a5)

	SPI1->CTLR1 |= CTLR1_SPE_Set; // Enable SPI
    1780:	0007d683          	lhu	a3,0(a5)

	SPI1->DATAR = 0; // Set SPI line Low.

	//DMA1_Channel3 is for SPI1TX
	DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    1784:	07b1                	addi	a5,a5,12
    1786:	4585                	li	a1,1
	SPI1->CTLR1 |= CTLR1_SPE_Set; // Enable SPI
    1788:	06c2                	slli	a3,a3,0x10
    178a:	82c1                	srli	a3,a3,0x10
    178c:	0406e693          	ori	a3,a3,64
    1790:	fed79a23          	sh	a3,-12(a5)
	SPI1->DATAR = 0; // Set SPI line Low.
    1794:	00079023          	sh	zero,0(a5)
	DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    1798:	df1c                	sw	a5,56(a4)
	DMA1_Channel3->MADDR = (uint32_t)WS2812dmabuff;
    179a:	c9418793          	addi	a5,gp,-876 # 20000090 <WS2812dmabuff>
    179e:	d03e                	sw	a5,32(sp)
    17a0:	df5c                	sw	a5,60(a4)
	DMA1_Channel3->CNTR  = 0;// sizeof( bufferset )/2; // Number of unique copies.  (Don't start, yet!)
	DMA1_Channel3->CFGR  =
    17a2:	678d                	lui	a5,0x3
	DMA1_Channel3->CNTR  = 0;// sizeof( bufferset )/2; // Number of unique copies.  (Don't start, yet!)
    17a4:	02072a23          	sw	zero,52(a4) # 40020034 <_eusrstack+0x2001f834>
	DMA1_Channel3->CFGR  =
    17a8:	59678793          	addi	a5,a5,1430 # 3596 <ch32fun.c.963ac852+0xab6>
    17ac:	db1c                	sw	a5,48(a4)
    17ae:	010006b7          	lui	a3,0x1000
    17b2:	e000e7b7          	lui	a5,0xe000e
    17b6:	10d7a023          	sw	a3,256(a5) # e000e100 <_eusrstack+0xc000d900>
		DMA_DIR_PeripheralDST |
		DMA_IT_TC | DMA_IT_HT; // Transmission Complete + Half Empty Interrupts. 

//	NVIC_SetPriority( DMA1_Channel3_IRQn, 0<<4 ); //We don't need to tweak priority.
	NVIC_EnableIRQ( DMA1_Channel3_IRQn );
	DMA1_Channel3->CFGR |= DMA_CFGR1_EN;
    17ba:	5b1c                	lw	a5,48(a4)
    17bc:	0017e793          	ori	a5,a5,1
    17c0:	db1c                	sw	a5,48(a4)
    17c2:	811ff0ef          	jal	ra,fd2 <printf>
    leds_frame.ref_time = millis();
    17c6:	4712                	lw	a4,4(sp)
    Neo_LedCmd = cmd;
    17c8:	c4818a23          	sb	s0,-940(gp) # 20000050 <Neo_LedCmd>
    leds_frame.ref_time = millis();
    17cc:	4314                	lw	a3,0(a4)
    leds_frame.is_enabled = 1;
    17ce:	c2c18793          	addi	a5,gp,-980 # 20000028 <leds_frame>
    17d2:	008785a3          	sb	s0,11(a5)
    leds_frame.ref_index = 0;
    17d6:	00078723          	sb	zero,14(a5)
    leds_frame.ref_time = millis();
    17da:	cb94                	sw	a3,16(a5)
    memset(led_arr, 0, sizeof(led_arr));
    17dc:	4661                	li	a2,24
    17de:	4581                	li	a1,0
    17e0:	0f418513          	addi	a0,gp,244 # 200004f0 <led_arr>
    color_ani.ref_index = 0;
    17e4:	c4018ea3          	sb	zero,-931(gp) # 20000059 <color_ani+0x5>
    memset(led_arr, 0, sizeof(led_arr));
    17e8:	865ff0ef          	jal	ra,104c <memset>
	#endif

	WS2812BDMAInit();
	Neo_loadCommand(NEO_COLOR_CHASE);

	uint32_t now = millis();
    17ec:	4792                	lw	a5,4(sp)
	Session_t session = { 0, 0, now };
    17ee:	ce02                	sw	zero,28(sp)
	uint32_t now = millis();
    17f0:	4380                	lw	s0,0(a5)
	Session_t session = { 0, 0, now };
    17f2:	c7c18793          	addi	a5,gp,-900 # 20000078 <adc_buffer>
    17f6:	d23e                	sw	a5,36(sp)
    17f8:	c2c18793          	addi	a5,gp,-980 # 20000028 <leds_frame>
    17fc:	cc02                	sw	zero,24(sp)
    17fe:	c802                	sw	zero,16(sp)
    1800:	c602                	sw	zero,12(sp)
    1802:	d83e                	sw	a5,48(sp)

	while(1) {
		now = millis();
    1804:	4792                	lw	a5,4(sp)
    1806:	4384                	lw	s1,0(a5)
		session.cycle_count++;
    1808:	47b2                	lw	a5,12(sp)
    180a:	0785                	addi	a5,a5,1
    180c:	c63e                	sw	a5,12(sp)
    _reset_timers(BUTTON_IDLE, model);
}

void fun_button_task(uint32_t time, Button_t *model, void (*handler)(int, uint32_t)) {
    if (model->pin == 0xFF) return;
    180e:	4782                	lw	a5,0(sp)
    1810:	0007c703          	lbu	a4,0(a5)
    1814:	0ff00793          	li	a5,255
    1818:	30f70163          	beq	a4,a5,1b1a <main+0x8aa>
    uint8_t read = funDigitalRead(model->pin);
    181c:	00475793          	srli	a5,a4,0x4
    1820:	400116b7          	lui	a3,0x40011
    1824:	80068693          	addi	a3,a3,-2048 # 40010800 <_eusrstack+0x20010000>
    1828:	07aa                	slli	a5,a5,0xa
    182a:	97b6                	add	a5,a5,a3

    // Debounce check
    if (time - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    182c:	4682                	lw	a3,0(sp)
    uint8_t read = funDigitalRead(model->pin);
    182e:	479c                	lw	a5,8(a5)
    if (time - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    1830:	464d                	li	a2,19
    1832:	42d4                	lw	a3,4(a3)
    1834:	40d486b3          	sub	a3,s1,a3
    1838:	2ed67163          	bgeu	a2,a3,1b1a <main+0x8aa>
    uint8_t read = funDigitalRead(model->pin);
    183c:	8b3d                	andi	a4,a4,15
    183e:	00e7d7b3          	srl	a5,a5,a4
    model->debounce_time = time;
    1842:	4702                	lw	a4,0(sp)

    switch (model->btn_state) {
    1844:	4689                	li	a3,2
    uint8_t read = funDigitalRead(model->pin);
    1846:	8b85                	andi	a5,a5,1
    model->debounce_time = time;
    1848:	c344                	sw	s1,4(a4)
    switch (model->btn_state) {
    184a:	00174703          	lbu	a4,1(a4)
    184e:	42d70b63          	beq	a4,a3,1c84 <main+0xa14>
    1852:	26e6e763          	bltu	a3,a4,1ac0 <main+0x850>
    1856:	3e071063          	bnez	a4,1c36 <main+0x9c6>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
    185a:	28078363          	beqz	a5,1ae0 <main+0x870>
    model->btn_state = newState;
    185e:	4785                	li	a5,1
    1860:	4702                	lw	a4,0(sp)
    1862:	00f700a3          	sb	a5,1(a4)
    model->debounce_time = millis();
    1866:	4792                	lw	a5,4(sp)
    1868:	439c                	lw	a5,0(a5)
    186a:	a4b5                	j	1ad6 <main+0x866>
		i2c_conf = (FUNCONF_SYSTEM_CORE_CLOCK / (3 * dev->clkr)) & I2C_CKCFGR_CCR;
    186c:	02dc7537          	lui	a0,0x2dc7
    1870:	95be                	add	a1,a1,a5
    1872:	c0050513          	addi	a0,a0,-1024 # 2dc6c00 <lib_i2c.c.d894f163+0x2dbf9c3>
    1876:	84bfe0ef          	jal	ra,c0 <__hidden___udivsi3>
    187a:	147d                	addi	s0,s0,-1
    187c:	8d61                	and	a0,a0,s0
    187e:	0542                	slli	a0,a0,0x10
    1880:	8141                	srli	a0,a0,0x10
		i2c_conf |= I2C_CKCFGR_FS;
    1882:	67a1                	lui	a5,0x8
    1884:	8d5d                	or	a0,a0,a5
    1886:	b125                	j	14ae <main+0x23e>
		if (i2c_ping(0x3C) == I2C_OK) {
    1888:	03c00513          	li	a0,60
    188c:	b9dfe0ef          	jal	ra,428 <i2c_ping>
    1890:	0e051163          	bnez	a0,1972 <main+0x702>
	// ssd1306_rst();
	ssd1306_setbuf(0);
	
	// initialize OLED
	#if !defined(SSD1306_CUSTOM_INIT_ARRAY) || !SSD1306_CUSTOM_INIT_ARRAY
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    1894:	6489                	lui	s1,0x2
    1896:	c8018623          	sb	zero,-884(gp) # 20000088 <ssd1306_buffer>
    189a:	33848493          	addi	s1,s1,824 # 2338 <ssd1306_init_array>

		while(*cmd_list != SSD1306_TERMINATE_CMDS) {
    189e:	0004c503          	lbu	a0,0(s1)
    18a2:	0ff00793          	li	a5,255
    18a6:	02f51e63          	bne	a0,a5,18e2 <main+0x672>
		ssd1306_cmd(SSD1306_COLUMNADDR);
    18aa:	02100513          	li	a0,33
    18ae:	d57fe0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
    18b2:	4501                	li	a0,0
    18b4:	d51fe0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
    18b8:	07f00513          	li	a0,127
    18bc:	d49fe0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(SSD1306_PAGEADDR);
    18c0:	02200513          	li	a0,34
    18c4:	d41fe0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(0); // Page start address (0 = reset)
    18c8:	4501                	li	a0,0
    18ca:	d3bfe0ef          	jal	ra,604 <ssd1306_cmd>
		ssd1306_cmd(7); // Page end address
    18ce:	451d                	li	a0,7
    18d0:	d35fe0ef          	jal	ra,604 <ssd1306_cmd>
				ssd1306_data(&ssd1306_buffer[i], SSD1306_PSZ);
    18d4:	02000593          	li	a1,32
    18d8:	c8c18513          	addi	a0,gp,-884 # 20000088 <ssd1306_buffer>
    18dc:	819ff0ef          	jal	ra,10f4 <ssd1306_data.isra.0>
			for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ) {
    18e0:	a029                	j	18ea <main+0x67a>
			if(ssd1306_cmd(*cmd_list++)) return 1;
    18e2:	0485                	addi	s1,s1,1
    18e4:	d21fe0ef          	jal	ra,604 <ssd1306_cmd>
    18e8:	d95d                	beqz	a0,189e <main+0x62e>
	// 	ssd1306_init();
	// 	printf("SSD1306 init.\n\r");
	// }
	
	//# Clear the frame buffer
	memset(frame_buffer, 0, sizeof(frame_buffer));
    18ea:	40000613          	li	a2,1024
    18ee:	4581                	li	a1,0
    18f0:	cf418513          	addi	a0,gp,-780 # 200000f0 <frame_buffer>
    18f4:	f58ff0ef          	jal	ra,104c <memset>
	ssd1306_cmd(SSD1306_COLUMNADDR);
    18f8:	02100513          	li	a0,33
    18fc:	d09fe0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_column);   				// Column start address (0 = reset)
    1900:	4501                	li	a0,0
    1902:	d03fe0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_column); 	// Column end address (127 = reset)
    1906:	07f00513          	li	a0,127
    190a:	cfbfe0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
    190e:	02200513          	li	a0,34
    1912:	cf3fe0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(start_page); 	// Page start address (0 = reset)
    1916:	4501                	li	a0,0
    1918:	cedfe0ef          	jal	ra,604 <ssd1306_cmd>
	ssd1306_cmd(end_page); 		// Page end address
    191c:	451d                	li	a0,7
    191e:	ce7fe0ef          	jal	ra,604 <ssd1306_cmd>
    1922:	4401                	li	s0,0
    1924:	8726                	mv	a4,s1
            ssd1306_data(&frame_buffer[page][chunk], chunk_end - chunk);
    1926:	cf418493          	addi	s1,gp,-780 # 200000f0 <frame_buffer>
		uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
    192a:	4501                	li	a0,0
    192c:	94a2                	add	s1,s1,s0
    192e:	02050793          	addi	a5,a0,32
    1932:	01079593          	slli	a1,a5,0x10
    1936:	81c1                	srli	a1,a1,0x10
    1938:	8d89                	sub	a1,a1,a0
    193a:	9526                	add	a0,a0,s1
    193c:	c43e                	sw	a5,8(sp)
    193e:	fb6ff0ef          	jal	ra,10f4 <ssd1306_data.isra.0>
        for (uint16_t chunk = 0; chunk < col_end; chunk += CHUNK_SIZE) {
    1942:	47a2                	lw	a5,8(sp)
    1944:	853e                	mv	a0,a5
    1946:	08000793          	li	a5,128
    194a:	fef512e3          	bne	a0,a5,192e <main+0x6be>
    for (uint8_t page = 0; page < SSD1306_PAGES; page++) {
    194e:	08040413          	addi	s0,s0,128
    1952:	40000793          	li	a5,1024
    1956:	fcf418e3          	bne	s0,a5,1926 <main+0x6b6>
			sprintf(str_output, "Hello Bee!");
    195a:	6589                	lui	a1,0x2
    195c:	f5858593          	addi	a1,a1,-168 # 1f58 <DMA1_Channel3_IRQHandler+0xd2>
    1960:	14018513          	addi	a0,gp,320 # 2000053c <str_output>
    1964:	efaff0ef          	jal	ra,105e <strcpy>
			ssd1306_print_str_at(str_output, 0, 0);
    1968:	4581                	li	a1,0
    196a:	14018513          	addi	a0,gp,320 # 2000053c <str_output>
    196e:	fb2ff0ef          	jal	ra,1120 <ssd1306_print_str_at.constprop.0>
		printf("----Scanning I2C Bus for Devices---\n");
    1972:	6509                	lui	a0,0x2
    1974:	f6450513          	addi	a0,a0,-156 # 1f64 <DMA1_Channel3_IRQHandler+0xde>
    1978:	81bff0ef          	jal	ra,1192 <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    197c:	4401                	li	s0,0
		if(i2c_ping(addr) == I2C_OK) callback(addr);
    197e:	8522                	mv	a0,s0
    1980:	aa9fe0ef          	jal	ra,428 <i2c_ping>
    1984:	e501                	bnez	a0,198c <main+0x71c>
    1986:	8522                	mv	a0,s0
    1988:	837ff0ef          	jal	ra,11be <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
    198c:	0405                	addi	s0,s0,1
    198e:	0ff47413          	andi	s0,s0,255
    1992:	07f00793          	li	a5,127
    1996:	fef414e3          	bne	s0,a5,197e <main+0x70e>
		printf("----Done Scanning----\n\n");
    199a:	6509                	lui	a0,0x2
    199c:	f8850513          	addi	a0,a0,-120 # 1f88 <DMA1_Channel3_IRQHandler+0x102>
    19a0:	be15                	j	14d4 <main+0x264>
	} else if (timer == TIM2) {
    19a2:	40000737          	lui	a4,0x40000
    19a6:	b8e791e3          	bne	a5,a4,1528 <main+0x2b8>
		RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    19aa:	40021737          	lui	a4,0x40021
    19ae:	4f54                	lw	a3,28(a4)
    19b0:	0016e693          	ori	a3,a3,1
    19b4:	cf54                	sw	a3,28(a4)
		RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    19b6:	4b14                	lw	a3,16(a4)
    19b8:	0016e693          	ori	a3,a3,1
    19bc:	cb14                	sw	a3,16(a4)
		RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    19be:	4b14                	lw	a3,16(a4)
    19c0:	9af9                	andi	a3,a3,-2
    19c2:	cb14                	sw	a3,16(a4)
    19c4:	b695                	j	1528 <main+0x2b8>
	switch (model->CCER) {
    19c6:	10000693          	li	a3,256
    19ca:	0cd70963          	beq	a4,a3,1a9c <main+0x82c>
    19ce:	6685                	lui	a3,0x1
    19d0:	bed715e3          	bne	a4,a3,15ba <main+0x34a>
			timer->CCER |= TIM_CC3E | TIM_CC3P;
			model->channel = 3;
			break;
		// case TIM_CC3NE: TIM1->CCER |= TIM_CC3E | TIM_CC3NP; break;	//! Prevent overwrite SWDIO
		case TIM_CC4E:
			timer->CHCTLR2 |= TIM_OC4M_2 | TIM_OC4M_1 | TIM_OC4PE;		// TIM_OC4PE is used by TIM2 only
    19d4:	01c7d703          	lhu	a4,28(a5) # 801c <lib_i2c.c.d894f163+0xddf>
    19d8:	669d                	lui	a3,0x7
    19da:	80068693          	addi	a3,a3,-2048 # 6800 <ch32_mess.c.4e1015f0+0x2b98>
    19de:	0742                	slli	a4,a4,0x10
    19e0:	8341                	srli	a4,a4,0x10
    19e2:	8f55                	or	a4,a4,a3
    19e4:	0742                	slli	a4,a4,0x10
    19e6:	8341                	srli	a4,a4,0x10
    19e8:	00e79e23          	sh	a4,28(a5)
			timer->CCER |= TIM_CC4E | TIM_CC4P;
    19ec:	0207d703          	lhu	a4,32(a5)
    19f0:	668d                	lui	a3,0x3
    19f2:	0742                	slli	a4,a4,0x10
    19f4:	8341                	srli	a4,a4,0x10
    19f6:	8f55                	or	a4,a4,a3
    19f8:	02e79023          	sh	a4,32(a5)
			model->channel = 4;
    19fc:	4791                	li	a5,4
    19fe:	a0b1                	j	1a4a <main+0x7da>
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1 | TIM_OC1PE;		// TIM_OC1PE is used by TIM2 only
    1a00:	0187d683          	lhu	a3,24(a5)
    1a04:	06c2                	slli	a3,a3,0x10
    1a06:	82c1                	srli	a3,a3,0x10
    1a08:	0686e693          	ori	a3,a3,104
    1a0c:	00d79c23          	sh	a3,24(a5)
			timer->CCER |= TIM_CC1E | TIM_CC1P;
    1a10:	0207d683          	lhu	a3,32(a5)
    1a14:	06c2                	slli	a3,a3,0x10
    1a16:	82c1                	srli	a3,a3,0x10
    1a18:	0036e693          	ori	a3,a3,3
    1a1c:	02d79023          	sh	a3,32(a5)
			model->channel = 1;
    1a20:	47a2                	lw	a5,8(sp)
    1a22:	00e780a3          	sb	a4,1(a5)
    1a26:	be51                	j	15ba <main+0x34a>
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1;
    1a28:	0187d703          	lhu	a4,24(a5)
    1a2c:	0742                	slli	a4,a4,0x10
    1a2e:	8341                	srli	a4,a4,0x10
    1a30:	06076713          	ori	a4,a4,96
    1a34:	00e79c23          	sh	a4,24(a5)
			timer->CCER |= TIM_CC1NE | TIM_CC1NP;
    1a38:	0207d703          	lhu	a4,32(a5)
    1a3c:	0742                	slli	a4,a4,0x10
    1a3e:	8341                	srli	a4,a4,0x10
    1a40:	00c76713          	ori	a4,a4,12
    1a44:	02e79023          	sh	a4,32(a5)
			model->channel = 1;
    1a48:	4785                	li	a5,1
			model->channel = 4;
    1a4a:	4722                	lw	a4,8(sp)
    1a4c:	00f700a3          	sb	a5,1(a4) # 40021001 <_eusrstack+0x20020801>
    1a50:	b6ad                	j	15ba <main+0x34a>
			timer->CHCTLR1 |= TIM_OC2M_2 | TIM_OC2M_1 | TIM_OC2PE;		// TIM_OC2PE is used by TIM2 only
    1a52:	0187d703          	lhu	a4,24(a5)
    1a56:	669d                	lui	a3,0x7
    1a58:	80068693          	addi	a3,a3,-2048 # 6800 <ch32_mess.c.4e1015f0+0x2b98>
    1a5c:	0742                	slli	a4,a4,0x10
    1a5e:	8341                	srli	a4,a4,0x10
    1a60:	8f55                	or	a4,a4,a3
    1a62:	0742                	slli	a4,a4,0x10
    1a64:	8341                	srli	a4,a4,0x10
    1a66:	00e79c23          	sh	a4,24(a5)
			timer->CCER |= TIM_CC2E | TIM_CC2P;
    1a6a:	0207d703          	lhu	a4,32(a5)
    1a6e:	0742                	slli	a4,a4,0x10
    1a70:	8341                	srli	a4,a4,0x10
    1a72:	03076713          	ori	a4,a4,48
			timer->CCER |= TIM_CC2NE | TIM_CC2NP;
    1a76:	02e79023          	sh	a4,32(a5)
			model->channel = 2;
    1a7a:	4789                	li	a5,2
    1a7c:	b7f9                	j	1a4a <main+0x7da>
			timer->CHCTLR1 |= TIM_OC2M_2 | TIM_OC2M_1;
    1a7e:	0187d703          	lhu	a4,24(a5)
    1a82:	6699                	lui	a3,0x6
    1a84:	0742                	slli	a4,a4,0x10
    1a86:	8341                	srli	a4,a4,0x10
    1a88:	8f55                	or	a4,a4,a3
    1a8a:	00e79c23          	sh	a4,24(a5)
			timer->CCER |= TIM_CC2NE | TIM_CC2NP;
    1a8e:	0207d703          	lhu	a4,32(a5)
    1a92:	0742                	slli	a4,a4,0x10
    1a94:	8341                	srli	a4,a4,0x10
    1a96:	0c076713          	ori	a4,a4,192
    1a9a:	bff1                	j	1a76 <main+0x806>
			timer->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;		// TIM_OC3PE is used by TIM2 only
    1a9c:	01c7d703          	lhu	a4,28(a5)
    1aa0:	0742                	slli	a4,a4,0x10
    1aa2:	8341                	srli	a4,a4,0x10
    1aa4:	06876713          	ori	a4,a4,104
    1aa8:	00e79e23          	sh	a4,28(a5)
			timer->CCER |= TIM_CC3E | TIM_CC3P;
    1aac:	0207d703          	lhu	a4,32(a5)
    1ab0:	0742                	slli	a4,a4,0x10
    1ab2:	8341                	srli	a4,a4,0x10
    1ab4:	30076713          	ori	a4,a4,768
    1ab8:	02e79023          	sh	a4,32(a5)
			model->channel = 3;
    1abc:	478d                	li	a5,3
    1abe:	b771                	j	1a4a <main+0x7da>
    switch (model->btn_state) {
    1ac0:	468d                	li	a3,3
    1ac2:	04d71c63          	bne	a4,a3,1b1a <main+0x8aa>
        if (read == 0) {
    1ac6:	ebb1                	bnez	a5,1b1a <main+0x8aa>
            model->press_time = time;
    1ac8:	4782                	lw	a5,0(sp)
    1aca:	c7c4                	sw	s1,12(a5)
    model->btn_state = newState;
    1acc:	000780a3          	sb	zero,1(a5)
    model->debounce_time = millis();
    1ad0:	4792                	lw	a5,4(sp)
    1ad2:	4702                	lw	a4,0(sp)
    1ad4:	439c                	lw	a5,0(a5)
    1ad6:	c35c                	sw	a5,4(a4)
    model->release_time = millis();
    1ad8:	4792                	lw	a5,4(sp)
    1ada:	439c                	lw	a5,0(a5)
    1adc:	c71c                	sw	a5,8(a4)
    1ade:	a835                	j	1b1a <main+0x8aa>
            _reset_timers(BTN_UP, model);        // First Release

        } else {
            // Long press detection
            uint32_t press_duration = time - model->press_time;
    1ae0:	4782                	lw	a5,0(sp)
    1ae2:	47d8                	lw	a4,12(a5)
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1ae4:	6785                	lui	a5,0x1
    1ae6:	fa078793          	addi	a5,a5,-96 # fa0 <mini_vpprintf+0x182>
            uint32_t press_duration = time - model->press_time;
    1aea:	40e48733          	sub	a4,s1,a4
            if (press_duration > TICK_LONG_PRESS_DUR) {
    1aee:	02e7f663          	bgeu	a5,a4,1b1a <main+0x8aa>
			printf("Long Press\n"); break;
    1af2:	6509                	lui	a0,0x2
    1af4:	fb850513          	addi	a0,a0,-72 # 1fb8 <DMA1_Channel3_IRQHandler+0x132>
    1af8:	e9aff0ef          	jal	ra,1192 <puts>
	mngI2c_load_buttonState(millis(), event);
    1afc:	4792                	lw	a5,4(sp)
}

void mngI2c_load_buttonState(uint32_t time, uint8_t state) {
	line6_preserve_time = time;

	sprintf(str_output, "button: %d", state);
    1afe:	6589                	lui	a1,0x2
    1b00:	4398                	lw	a4,0(a5)
    1b02:	460d                	li	a2,3
    1b04:	fc458593          	addi	a1,a1,-60 # 1fc4 <DMA1_Channel3_IRQHandler+0x13e>
    1b08:	14018513          	addi	a0,gp,320 # 2000053c <str_output>
	line6_preserve_time = time;
    1b0c:	c8e1a023          	sw	a4,-896(gp) # 2000007c <line6_preserve_time>
	sprintf(str_output, "button: %d", state);
    1b10:	d1aff0ef          	jal	ra,102a <sprintf>
	mngI2c_load_printBuff(str_output, 6);
    1b14:	4519                	li	a0,6
    1b16:	d78ff0ef          	jal	ra,108e <mngI2c_load_printBuff.constprop.0>
	}
}


void fun_timPWM_task(uint32_t time, TIM_PWM_t* model) {
	if (time - model->timeRef < 5) { return; }
    1b1a:	47a2                	lw	a5,8(sp)
    1b1c:	4611                	li	a2,4
    1b1e:	47dc                	lw	a5,12(a5)
    1b20:	40f487b3          	sub	a5,s1,a5
    1b24:	02f67963          	bgeu	a2,a5,1b56 <main+0x8e6>
	TIM_TypeDef* timer = model->TIM;
    1b28:	4722                	lw	a4,8(sp)
	model->timeRef = time;
    1b2a:	47a2                	lw	a5,8(sp)
	switch(model->channel) {
    1b2c:	458d                	li	a1,3
	TIM_TypeDef* timer = model->TIM;
    1b2e:	4354                	lw	a3,4(a4)
	switch(model->channel) {
    1b30:	00174703          	lbu	a4,1(a4)
	model->timeRef = time;
    1b34:	c7c4                	sw	s1,12(a5)

	fun_timPWM_setpw(model, model->counter);
    1b36:	479c                	lw	a5,8(a5)
	switch(model->channel) {
    1b38:	18b70463          	beq	a4,a1,1cc0 <main+0xa50>
    1b3c:	16e5e163          	bltu	a1,a4,1c9e <main+0xa2e>
    1b40:	4605                	li	a2,1
    1b42:	16c70563          	beq	a4,a2,1cac <main+0xa3c>
    1b46:	4609                	li	a2,2
    1b48:	16c70763          	beq	a4,a2,1cb6 <main+0xa46>
	model->counter++;
	model->counter &= 255;
    1b4c:	4722                	lw	a4,8(sp)
	model->counter++;
    1b4e:	0785                	addi	a5,a5,1
	model->counter &= 255;
    1b50:	0ff7f793          	andi	a5,a5,255
    1b54:	c71c                	sw	a5,8(a4)
}

uint32_t neo_timeRef = 0;

void Neo_task(uint32_t time) {
    if (time - neo_timeRef < 10) return;
    1b56:	c8418793          	addi	a5,gp,-892 # 20000080 <neo_timeRef>
    1b5a:	4398                	lw	a4,0(a5)
    1b5c:	46a5                	li	a3,9
    1b5e:	40e48733          	sub	a4,s1,a4
    1b62:	06e6fb63          	bgeu	a3,a4,1bd8 <main+0x968>
    neo_timeRef = time;
    1b66:	c384                	sw	s1,0(a5)
    
    if (WS2812BLEDInUse || leds_frame.is_enabled == 0) return;
    1b68:	c6c18793          	addi	a5,gp,-916 # 20000068 <WS2812BLEDInUse>
    1b6c:	4398                	lw	a4,0(a5)
    1b6e:	e72d                	bnez	a4,1bd8 <main+0x968>
    1b70:	5742                	lw	a4,48(sp)
    1b72:	00b74703          	lbu	a4,11(a4)
    1b76:	c32d                	beqz	a4,1bd8 <main+0x968>
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
    1b78:	30002773          	csrr	a4,mstatus
	result &= ~0x88; __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
    1b7c:	f7777713          	andi	a4,a4,-137
    1b80:	30071073          	csrw	mstatus,a4
	WS2812BLEDInUse = 1;
    1b84:	4705                	li	a4,1
    1b86:	c398                	sw	a4,0(a5)
	DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
    1b88:	400207b7          	lui	a5,0x40020
    1b8c:	5b98                	lw	a4,48(a5)
    1b8e:	03078693          	addi	a3,a5,48 # 40020030 <_eusrstack+0x2001f830>
    1b92:	fdf77713          	andi	a4,a4,-33
    1b96:	db98                	sw	a4,48(a5)
	DMA1_Channel3->CNTR  = 0;
    1b98:	0207aa23          	sw	zero,52(a5)
	DMA1_Channel3->MADDR = (uint32_t)WS2812dmabuff;
    1b9c:	5782                	lw	a5,32(sp)
    1b9e:	c6dc                	sw	a5,12(a3)
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
    1ba0:	30002773          	csrr	a4,mstatus
	result |= 0x88;  __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
    1ba4:	08876713          	ori	a4,a4,136
    1ba8:	30071073          	csrw	mstatus,a4
	WS2812LEDs = leds;
    1bac:	4619                	li	a2,6
    1bae:	c6c1aa23          	sw	a2,-908(gp) # 20000070 <WS2812LEDs>
	WS2812LEDPlace = -WS2812B_RESET_PERIOD;
    1bb2:	5679                	li	a2,-2
    1bb4:	c6c1a823          	sw	a2,-912(gp) # 2000006c <WS2812LEDPlace>
	WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN, 0 );
    1bb8:	03000593          	li	a1,48
    1bbc:	4601                	li	a2,0
    1bbe:	c9418513          	addi	a0,gp,-876 # 20000090 <WS2812dmabuff>
    1bc2:	b6dfe0ef          	jal	ra,72e <WS2812FillBuffSec>
	DMA1_Channel3->CNTR = DMA_BUFFER_LEN; // Number of unique uint16_t entries.
    1bc6:	400207b7          	lui	a5,0x40020
    1bca:	03000713          	li	a4,48
    1bce:	dbd8                	sw	a4,52(a5)
	DMA1_Channel3->CFGR |= DMA_Mode_Circular;
    1bd0:	5b98                	lw	a4,48(a5)
    1bd2:	02076713          	ori	a4,a4,32
    1bd6:	db98                	sw	a4,48(a5)
		//# prioritize tasks
		fun_button_task(now, &button1, button_onChanged);
		fun_timPWM_task(now, &pwm_CH1c);
		Neo_task(now);

		if (now - session.timeRef_1sec > 1000) {
    1bd8:	47c2                	lw	a5,16(sp)
    1bda:	3e800713          	li	a4,1000
    1bde:	40f487b3          	sub	a5,s1,a5
    1be2:	10f77c63          	bgeu	a4,a5,1cfa <main+0xa8a>
			session.timeRef_1sec = now;

			if (i2cMaster_mode) {
    1be6:	57a2                	lw	a5,40(sp)
    1be8:	c3a9                	beqz	a5,1c2a <main+0x9ba>
        case '-':	strcpy(loading_char, "\\"); break;
    }
}

void mngI2c_loadCounter(uint32_t counter, uint32_t runTime) {
	sprintf(str_output, "%s cyc/s %lu ~ %lums", loading_char, counter, runTime);
    1bea:	46b2                	lw	a3,12(sp)
    1bec:	6589                	lui	a1,0x2
    1bee:	8722                	mv	a4,s0
    1bf0:	c6818613          	addi	a2,gp,-920 # 20000064 <loading_char>
    1bf4:	ff058593          	addi	a1,a1,-16 # 1ff0 <DMA1_Channel3_IRQHandler+0x16a>
    1bf8:	14018513          	addi	a0,gp,320 # 2000053c <str_output>
    1bfc:	c2eff0ef          	jal	ra,102a <sprintf>
	mngI2c_load_printBuff(str_output, 7);
    1c00:	451d                	li	a0,7
    1c02:	c8cff0ef          	jal	ra,108e <mngI2c_load_printBuff.constprop.0>
    switch(loading_char[0]) {
    1c06:	c6818313          	addi	t1,gp,-920 # 20000064 <loading_char>
    1c0a:	00034703          	lbu	a4,0(t1)
    1c0e:	05c00693          	li	a3,92
    1c12:	0cd70463          	beq	a4,a3,1cda <main+0xa6a>
    1c16:	0ae6ea63          	bltu	a3,a4,1cca <main+0xa5a>
    1c1a:	02d00693          	li	a3,45
    1c1e:	0cd70a63          	beq	a4,a3,1cf2 <main+0xa82>
    1c22:	02f00693          	li	a3,47
    1c26:	0cd70263          	beq	a4,a3,1cea <main+0xa7a>
			session.timeRef_1sec = now;
    1c2a:	c826                	sw	s1,16(sp)
				mngI2c_loadCounter(session.cycle_count, session.fullCycle_time);
			}
			session.cycle_count = 0;
    1c2c:	c602                	sw	zero,12(sp)

			fun_encoder_task(&encoder_a, encoder_onChanged);
			fun_joystick_task(joystick_onChanged);
		}

		session.fullCycle_time = millis() - now;
    1c2e:	4792                	lw	a5,4(sp)
    1c30:	4380                	lw	s0,0(a5)
    1c32:	8c05                	sub	s0,s0,s1
	while(1) {
    1c34:	bec1                	j	1804 <main+0x594>
            }
        }
        break;

    case BTN_UP: {
        uint32_t release_duration = time - model->release_time;
    1c36:	4702                	lw	a4,0(sp)
    1c38:	4718                	lw	a4,8(a4)
    1c3a:	40e48733          	sub	a4,s1,a4

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    1c3e:	eb89                	bnez	a5,1c50 <main+0x9e0>
    1c40:	09f00793          	li	a5,159
    1c44:	00e7e663          	bltu	a5,a4,1c50 <main+0x9e0>
    model->btn_state = newState;
    1c48:	4782                	lw	a5,0(sp)
    1c4a:	00d780a3          	sb	a3,1(a5) # 40020001 <_eusrstack+0x2001f801>
    1c4e:	b549                	j	1ad0 <main+0x860>
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    1c50:	0a000793          	li	a5,160
    1c54:	ece7f3e3          	bgeu	a5,a4,1b1a <main+0x8aa>
			printf("Single Click\n");
    1c58:	6509                	lui	a0,0x2
    1c5a:	fd050513          	addi	a0,a0,-48 # 1fd0 <DMA1_Channel3_IRQHandler+0x14a>
    1c5e:	d34ff0ef          	jal	ra,1192 <puts>
	mngI2c_load_buttonState(millis(), event);
    1c62:	4792                	lw	a5,4(sp)
	sprintf(str_output, "button: %d", state);
    1c64:	4605                	li	a2,1
    1c66:	4398                	lw	a4,0(a5)
	line6_preserve_time = time;
    1c68:	c8e1a023          	sw	a4,-896(gp) # 2000007c <line6_preserve_time>
	sprintf(str_output, "button: %d", state);
    1c6c:	6589                	lui	a1,0x2
    1c6e:	fc458593          	addi	a1,a1,-60 # 1fc4 <DMA1_Channel3_IRQHandler+0x13e>
    1c72:	14018513          	addi	a0,gp,320 # 2000053c <str_output>
    1c76:	bb4ff0ef          	jal	ra,102a <sprintf>
	mngI2c_load_printBuff(str_output, 6);
    1c7a:	4519                	li	a0,6
    1c7c:	c12ff0ef          	jal	ra,108e <mngI2c_load_printBuff.constprop.0>
    model->btn_state = newState;
    1c80:	478d                	li	a5,3
    1c82:	bef9                	j	1860 <main+0x5f0>
        break;
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
    1c84:	e8078be3          	beqz	a5,1b1a <main+0x8aa>
			printf("Double Click\n");
    1c88:	6789                	lui	a5,0x2
    1c8a:	fe078513          	addi	a0,a5,-32 # 1fe0 <DMA1_Channel3_IRQHandler+0x15a>
    1c8e:	d04ff0ef          	jal	ra,1192 <puts>
	mngI2c_load_buttonState(millis(), event);
    1c92:	4792                	lw	a5,4(sp)
	sprintf(str_output, "button: %d", state);
    1c94:	4609                	li	a2,2
    1c96:	4398                	lw	a4,0(a5)
	line6_preserve_time = time;
    1c98:	c8e1a023          	sw	a4,-896(gp) # 2000007c <line6_preserve_time>
	sprintf(str_output, "button: %d", state);
    1c9c:	bfc1                	j	1c6c <main+0x9fc>
	switch(model->channel) {
    1c9e:	eac717e3          	bne	a4,a2,1b4c <main+0x8dc>
    1ca2:	01079713          	slli	a4,a5,0x10
    1ca6:	8341                	srli	a4,a4,0x10
		case 4: timer->CH4CVR = width; break;
    1ca8:	c2b8                	sw	a4,64(a3)
    1caa:	b54d                	j	1b4c <main+0x8dc>
    1cac:	01079713          	slli	a4,a5,0x10
    1cb0:	8341                	srli	a4,a4,0x10
		case 1: timer->CH1CVR = width; break;
    1cb2:	dad8                	sw	a4,52(a3)
    1cb4:	bd61                	j	1b4c <main+0x8dc>
    1cb6:	01079713          	slli	a4,a5,0x10
    1cba:	8341                	srli	a4,a4,0x10
		case 2: timer->CH2CVR = width; break;
    1cbc:	de98                	sw	a4,56(a3)
    1cbe:	b579                	j	1b4c <main+0x8dc>
    1cc0:	01079713          	slli	a4,a5,0x10
    1cc4:	8341                	srli	a4,a4,0x10
		case 3: timer->CH3CVR = width; break;
    1cc6:	ded8                	sw	a4,60(a3)
    1cc8:	b551                	j	1b4c <main+0x8dc>
    switch(loading_char[0]) {
    1cca:	07c00693          	li	a3,124
    1cce:	f4d71ee3          	bne	a4,a3,1c2a <main+0x9ba>
        case '|':	strcpy(loading_char, "/"); break;
    1cd2:	6589                	lui	a1,0x2
    1cd4:	00c58593          	addi	a1,a1,12 # 200c <DMA1_Channel3_IRQHandler+0x186>
    1cd8:	a021                	j	1ce0 <main+0xa70>
        case '\\':	strcpy(loading_char, "|"); break;
    1cda:	6589                	lui	a1,0x2
    1cdc:	00858593          	addi	a1,a1,8 # 2008 <DMA1_Channel3_IRQHandler+0x182>
        case '-':	strcpy(loading_char, "\\"); break;
    1ce0:	c6818513          	addi	a0,gp,-920 # 20000064 <loading_char>
    1ce4:	b7aff0ef          	jal	ra,105e <strcpy>
    1ce8:	b789                	j	1c2a <main+0x9ba>
        case '/':	strcpy(loading_char, "-"); break;
    1cea:	6589                	lui	a1,0x2
    1cec:	01058593          	addi	a1,a1,16 # 2010 <DMA1_Channel3_IRQHandler+0x18a>
    1cf0:	bfc5                	j	1ce0 <main+0xa70>
        case '-':	strcpy(loading_char, "\\"); break;
    1cf2:	6589                	lui	a1,0x2
    1cf4:	01458593          	addi	a1,a1,20 # 2014 <DMA1_Channel3_IRQHandler+0x18e>
    1cf8:	b7e5                	j	1ce0 <main+0xa70>
		else if (now - session.timeRef_100ms > 100) {
    1cfa:	47f2                	lw	a5,28(sp)
    1cfc:	06400713          	li	a4,100
    1d00:	40f487b3          	sub	a5,s1,a5
    1d04:	06f77e63          	bgeu	a4,a5,1d80 <main+0xb10>
	cycle_loading_char();
}

void mngI2c_printBuff_task() {
	if (!flag_printBuff_data) return;
    1d08:	c601c703          	lbu	a4,-928(gp) # 2000005c <flag_printBuff_data>
    1d0c:	c6018793          	addi	a5,gp,-928 # 2000005c <flag_printBuff_data>
    1d10:	da3e                	sw	a5,52(sp)
			session.timeRef_100ms = now;
    1d12:	ce26                	sw	s1,28(sp)
    1d14:	f0070de3          	beqz	a4,1c2e <main+0x9be>

	for (int i = 0; i < PRINT_BUFF_SIZE; i++) {
		if (printBuff[i].line_num == 0) continue;
    1d18:	10c18793          	addi	a5,gp,268 # 20000508 <printBuff>
    1d1c:	0197c583          	lbu	a1,25(a5)
    1d20:	ce2e                	sw	a1,28(sp)
    1d22:	cd91                	beqz	a1,1d3e <main+0xace>
	if (i2c_ping(0x3C) != I2C_OK) return;
    1d24:	03c00513          	li	a0,60
    1d28:	f00fe0ef          	jal	ra,428 <i2c_ping>
    1d2c:	e909                	bnez	a0,1d3e <main+0xace>
		modI2C_display(printBuff[i].str, printBuff[i].line_num-1);
    1d2e:	45f2                	lw	a1,28(sp)
	ssd1306_print_str_at(str, line, 0);
    1d30:	10c18513          	addi	a0,gp,268 # 20000508 <printBuff>
		modI2C_display(printBuff[i].str, printBuff[i].line_num-1);
    1d34:	15fd                	addi	a1,a1,-1
	ssd1306_print_str_at(str, line, 0);
    1d36:	0ff5f593          	andi	a1,a1,255
    1d3a:	be6ff0ef          	jal	ra,1120 <ssd1306_print_str_at.constprop.0>
		if (printBuff[i].line_num == 0) continue;
    1d3e:	10c18713          	addi	a4,gp,268 # 20000508 <printBuff>
    1d42:	03374583          	lbu	a1,51(a4)
    1d46:	ce2e                	sw	a1,28(sp)
    1d48:	c185                	beqz	a1,1d68 <main+0xaf8>
	if (i2c_ping(0x3C) != I2C_OK) return;
    1d4a:	03c00513          	li	a0,60
    1d4e:	edafe0ef          	jal	ra,428 <i2c_ping>
    1d52:	e919                	bnez	a0,1d68 <main+0xaf8>
		modI2C_display(printBuff[i].str, printBuff[i].line_num-1);
    1d54:	45f2                	lw	a1,28(sp)
	ssd1306_print_str_at(str, line, 0);
    1d56:	10c18793          	addi	a5,gp,268 # 20000508 <printBuff>
		modI2C_display(printBuff[i].str, printBuff[i].line_num-1);
    1d5a:	15fd                	addi	a1,a1,-1
	ssd1306_print_str_at(str, line, 0);
    1d5c:	0ff5f593          	andi	a1,a1,255
    1d60:	01a78513          	addi	a0,a5,26
    1d64:	bbcff0ef          	jal	ra,1120 <ssd1306_print_str_at.constprop.0>
	}

	//! Clear printBuff
	memset(printBuff, 0, sizeof(printBuff));
    1d68:	03400613          	li	a2,52
    1d6c:	4581                	li	a1,0
    1d6e:	10c18513          	addi	a0,gp,268 # 20000508 <printBuff>
    1d72:	adaff0ef          	jal	ra,104c <memset>
	flag_printBuff_data = 0;
    1d76:	57d2                	lw	a5,52(sp)
    1d78:	ce26                	sw	s1,28(sp)
    1d7a:	00078023          	sb	zero,0(a5)
    1d7e:	bd45                	j	1c2e <main+0x9be>
		else if (now - session.timeRef_50ms > 50) {
    1d80:	47e2                	lw	a5,24(sp)
    1d82:	03200713          	li	a4,50
    1d86:	40f487b3          	sub	a5,s1,a5
    1d8a:	eaf772e3          	bgeu	a4,a5,1c2e <main+0x9be>
};

static uint32_t encoder_debounceTime = 0;

void fun_encoder_task(Encoder_t *model, void (*handler)(uint8_t, uint8_t)) {
	uint16_t count = TIM2->CNT;
    1d8e:	400007b7          	lui	a5,0x40000
    1d92:	0247d403          	lhu	s0,36(a5) # 40000024 <_eusrstack+0x1ffff824>

	if (count != model->last_count) {
    1d96:	4752                	lw	a4,20(sp)
	uint16_t count = TIM2->CNT;
    1d98:	0442                	slli	s0,s0,0x10
    1d9a:	8041                	srli	s0,s0,0x10
    1d9c:	c8018793          	addi	a5,gp,-896 # 2000007c <line6_preserve_time>
	if (count != model->last_count) {
    1da0:	02870d63          	beq	a4,s0,1dda <main+0xb6a>
	mngI2c_load_encoder(millis(), position, direction);
    1da4:	4712                	lw	a4,4(sp)
		model->relative_pos = 255 - count - model->initial_count;
    1da6:	fff44613          	not	a2,s0
    1daa:	4318                	lw	a4,0(a4)
	line6_preserve_time = time;
    1dac:	c398                	sw	a4,0(a5)
    1dae:	5732                	lw	a4,44(sp)
    1db0:	8e19                	sub	a2,a2,a4
	sprintf(str_output, "pos: %d, dir: %s", pos, dir ? "CW" : "CCW");
    1db2:	4752                	lw	a4,20(sp)
    1db4:	0ff67613          	andi	a2,a2,255
    1db8:	08e46a63          	bltu	s0,a4,1e4c <main+0xbdc>
    1dbc:	6689                	lui	a3,0x2
    1dbe:	f3068693          	addi	a3,a3,-208 # 1f30 <DMA1_Channel3_IRQHandler+0xaa>
    1dc2:	6589                	lui	a1,0x2
    1dc4:	01858593          	addi	a1,a1,24 # 2018 <DMA1_Channel3_IRQHandler+0x192>
    1dc8:	14018513          	addi	a0,gp,320 # 2000053c <str_output>
    1dcc:	a5eff0ef          	jal	ra,102a <sprintf>
	mngI2c_load_printBuff(str_output, 6);
    1dd0:	4519                	li	a0,6
    1dd2:	abcff0ef          	jal	ra,108e <mngI2c_load_printBuff.constprop.0>
    1dd6:	c8018793          	addi	a5,gp,-896 # 2000007c <line6_preserve_time>
}

uint32_t joystick_timeRef = 0;

void fun_joystick_task(void (*handler)(uint16_t, uint16_t)) {
	uint16_t x = 10 * ((adc_buffer[0] + 5) / 10);		// round to nearest 10
    1dda:	5712                	lw	a4,36(sp)
	if (time - line6_preserve_time < 1000) return;
    1ddc:	439c                	lw	a5,0(a5)
    1dde:	00075703          	lhu	a4,0(a4)
    1de2:	0742                	slli	a4,a4,0x10
    1de4:	8341                	srli	a4,a4,0x10
    1de6:	cc3a                	sw	a4,24(sp)
	uint16_t y = 10 * ((adc_buffer[1] + 5) / 10);		// round to nearest 10
    1de8:	5712                	lw	a4,36(sp)
    1dea:	00275503          	lhu	a0,2(a4)
	mngI2c_load_joystick(millis(), x, y);
    1dee:	4712                	lw	a4,4(sp)
    1df0:	0542                	slli	a0,a0,0x10
    1df2:	4314                	lw	a3,0(a4)
    1df4:	8141                	srli	a0,a0,0x10
    1df6:	40f687b3          	sub	a5,a3,a5
    1dfa:	3e700693          	li	a3,999
    1dfe:	04f6f463          	bgeu	a3,a5,1e46 <main+0xbd6>
    1e02:	45a9                	li	a1,10
    1e04:	0515                	addi	a0,a0,5
    1e06:	ab2fe0ef          	jal	ra,b8 <__divsi3>
    1e0a:	00251693          	slli	a3,a0,0x2
	uint16_t x = 10 * ((adc_buffer[0] + 5) / 10);		// round to nearest 10
    1e0e:	4762                	lw	a4,24(sp)
	uint16_t y = 10 * ((adc_buffer[1] + 5) / 10);		// round to nearest 10
    1e10:	96aa                	add	a3,a3,a0
    1e12:	0686                	slli	a3,a3,0x1
	sprintf(str_output, "jx: %d, jy: %d", x, y);
    1e14:	06c2                	slli	a3,a3,0x10
    1e16:	82c1                	srli	a3,a3,0x10
	uint16_t x = 10 * ((adc_buffer[0] + 5) / 10);		// round to nearest 10
    1e18:	45a9                	li	a1,10
    1e1a:	00570513          	addi	a0,a4,5
    1e1e:	ca36                	sw	a3,20(sp)
    1e20:	a98fe0ef          	jal	ra,b8 <__divsi3>
    1e24:	00251613          	slli	a2,a0,0x2
    1e28:	962a                	add	a2,a2,a0
    1e2a:	46d2                	lw	a3,20(sp)
    1e2c:	0606                	slli	a2,a2,0x1
    1e2e:	0642                	slli	a2,a2,0x10
    1e30:	6589                	lui	a1,0x2
    1e32:	8241                	srli	a2,a2,0x10
    1e34:	02c58593          	addi	a1,a1,44 # 202c <DMA1_Channel3_IRQHandler+0x1a6>
    1e38:	14018513          	addi	a0,gp,320 # 2000053c <str_output>
    1e3c:	9eeff0ef          	jal	ra,102a <sprintf>
	mngI2c_load_printBuff(str_output, 6);
    1e40:	4519                	li	a0,6
    1e42:	a4cff0ef          	jal	ra,108e <mngI2c_load_printBuff.constprop.0>
	uint16_t count = TIM2->CNT;
    1e46:	ca22                	sw	s0,20(sp)
			session.timeRef_50ms = now;
    1e48:	cc26                	sw	s1,24(sp)
    1e4a:	b3d5                	j	1c2e <main+0x9be>
	sprintf(str_output, "pos: %d, dir: %s", pos, dir ? "CW" : "CCW");
    1e4c:	6689                	lui	a3,0x2
    1e4e:	f2c68693          	addi	a3,a3,-212 # 1f2c <DMA1_Channel3_IRQHandler+0xa6>
    1e52:	bf85                	j	1dc2 <main+0xb52>

00001e54 <SysTick_Handler>:
* Increments Compare Register and systick_millis when triggered (every 1ms)
* NOTE: the `__attribute__((interrupt))` attribute is very important
*/
void SysTick_Handler(void) __attribute__((interrupt));
void SysTick_Handler(void)
{
    1e54:	1151                	addi	sp,sp,-12
    1e56:	c03e                	sw	a5,0(sp)
	// Increment the Compare Register for the next trigger
	// If more than this number of ticks elapse before the trigger is reset,
	// you may miss your next interrupt trigger
	// (Make sure the IQR is lightweight and CMP value is reasonable)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1e58:	e000f7b7          	lui	a5,0xe000f
{
    1e5c:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1e5e:	4b98                	lw	a4,16(a5)
{
    1e60:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1e62:	66b1                	lui	a3,0xc
    1e64:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x4943>
    1e68:	9736                	add	a4,a4,a3
    1e6a:	cb98                	sw	a4,16(a5)

	// Clear the trigger state for the next IRQ
	SysTick->SR = 0x00000000;
    1e6c:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>

	// Increment the milliseconds count
	systick_millis++;
    1e70:	c9018793          	addi	a5,gp,-880 # 2000008c <systick_millis>
    1e74:	4398                	lw	a4,0(a5)
}
    1e76:	46a2                	lw	a3,8(sp)
	systick_millis++;
    1e78:	0705                	addi	a4,a4,1
    1e7a:	c398                	sw	a4,0(a5)
}
    1e7c:	4712                	lw	a4,4(sp)
    1e7e:	4782                	lw	a5,0(sp)
    1e80:	0131                	addi	sp,sp,12
    1e82:	30200073          	mret

00001e86 <DMA1_Channel3_IRQHandler>:
{
    1e86:	fcc10113          	addi	sp,sp,-52
    1e8a:	c23e                	sw	a5,4(sp)
	volatile int intfr = DMA1->INTFR;
    1e8c:	400207b7          	lui	a5,0x40020
    1e90:	439c                	lw	a5,0(a5)
{
    1e92:	d022                	sw	s0,32(sp)
    1e94:	ce26                	sw	s1,28(sp)
    1e96:	d806                	sw	ra,48(sp)
    1e98:	d616                	sw	t0,44(sp)
    1e9a:	d41a                	sw	t1,40(sp)
    1e9c:	d21e                	sw	t2,36(sp)
    1e9e:	cc2a                	sw	a0,24(sp)
    1ea0:	ca2e                	sw	a1,20(sp)
    1ea2:	c832                	sw	a2,16(sp)
    1ea4:	c636                	sw	a3,12(sp)
    1ea6:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    1ea8:	c03e                	sw	a5,0(sp)
		DMA1->INTFCR = DMA1_IT_GL3;
    1eaa:	40020437          	lui	s0,0x40020
    1eae:	10000493          	li	s1,256
    1eb2:	c044                	sw	s1,4(s0)
		if( intfr & DMA1_IT_HT3 )
    1eb4:	4782                	lw	a5,0(sp)
    1eb6:	4007f793          	andi	a5,a5,1024
    1eba:	c799                	beqz	a5,1ec8 <DMA1_Channel3_IRQHandler+0x42>
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    1ebc:	4605                	li	a2,1
    1ebe:	45e1                	li	a1,24
    1ec0:	c9418513          	addi	a0,gp,-876 # 20000090 <WS2812dmabuff>
    1ec4:	86bfe0ef          	jal	ra,72e <WS2812FillBuffSec>
		if( intfr & DMA1_IT_TC3 )
    1ec8:	4782                	lw	a5,0(sp)
    1eca:	2007f793          	andi	a5,a5,512
    1ece:	c799                	beqz	a5,1edc <DMA1_Channel3_IRQHandler+0x56>
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    1ed0:	4601                	li	a2,0
    1ed2:	45e1                	li	a1,24
    1ed4:	cc418513          	addi	a0,gp,-828 # 200000c0 <WS2812dmabuff+0x30>
    1ed8:	857fe0ef          	jal	ra,72e <WS2812FillBuffSec>
		intfr = DMA1->INTFR;
    1edc:	401c                	lw	a5,0(s0)
    1ede:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    1ee0:	4782                	lw	a5,0(sp)
    1ee2:	1007f793          	andi	a5,a5,256
    1ee6:	f7f1                	bnez	a5,1eb2 <DMA1_Channel3_IRQHandler+0x2c>
}
    1ee8:	5402                	lw	s0,32(sp)
    1eea:	50c2                	lw	ra,48(sp)
    1eec:	52b2                	lw	t0,44(sp)
    1eee:	5322                	lw	t1,40(sp)
    1ef0:	5392                	lw	t2,36(sp)
    1ef2:	44f2                	lw	s1,28(sp)
    1ef4:	4562                	lw	a0,24(sp)
    1ef6:	45d2                	lw	a1,20(sp)
    1ef8:	4642                	lw	a2,16(sp)
    1efa:	46b2                	lw	a3,12(sp)
    1efc:	4722                	lw	a4,8(sp)
    1efe:	4792                	lw	a5,4(sp)
    1f00:	03410113          	addi	sp,sp,52
    1f04:	30200073          	mret
    1f08:	07fa                	slli	a5,a5,0x1e
    1f0a:	0000                	unimp
    1f0c:	08e4                	addi	s1,sp,92
    1f0e:	0000                	unimp
    1f10:	097c                	addi	a5,sp,156
    1f12:	0000                	unimp
    1f14:	0b12                	slli	s6,s6,0x4
    1f16:	0000                	unimp
    1f18:	0c1a                	slli	s8,s8,0x6
    1f1a:	0000                	unimp
    1f1c:	000a                	c.slli	zero,0x2
    1f1e:	0000                	unimp
    1f20:	3249                	jal	18a2 <main+0x632>
    1f22:	30203a43          	fmadd.s	fs4,ft0,ft2,ft6,rup
    1f26:	2578                	fld	fa4,200(a0)
    1f28:	3230                	fld	fa2,96(a2)
    1f2a:	0058                	addi	a4,sp,4
    1f2c:	00005743          	fmadd.s	fa4,ft0,ft0,ft0,unknown
    1f30:	00574343          	fmadd.s	ft6,fa4,ft5,ft0,rmm
    1f34:	6f42                	flw	ft10,16(sp)
    1f36:	4320746f          	jal	s0,9368 <lib_i2c.c.d894f163+0x212b>
    1f3a:	746e756f          	jal	a0,e9680 <lib_i2c.c.d894f163+0xe2443>
    1f3e:	203a                	fld	ft0,392(sp)
    1f40:	6425                	lui	s0,0x9
    1f42:	000a                	c.slli	zero,0x2
    1f44:	6146                	flw	ft2,80(sp)
    1f46:	6c69                	lui	s8,0x1a
    1f48:	6465                	lui	s0,0x19
    1f4a:	7420                	flw	fs0,104(s0)
    1f4c:	6e69206f          	j	94632 <lib_i2c.c.d894f163+0x8d3f5>
    1f50:	7469                	lui	s0,0xffffa
    1f52:	4920                	lw	s0,80(a0)
    1f54:	4332                	lw	t1,12(sp)
    1f56:	0000                	unimp
    1f58:	6548                	flw	fa0,12(a0)
    1f5a:	6c6c                	flw	fa1,92(s0)
    1f5c:	6542206f          	j	245b0 <lib_i2c.c.d894f163+0x1d373>
    1f60:	2165                	jal	2408 <_data_lma+0xb4>
    1f62:	0000                	unimp
    1f64:	2d2d                	jal	259e <_data_lma+0x24a>
    1f66:	2d2d                	jal	25a0 <_data_lma+0x24c>
    1f68:	6e616353          	0x6e616353
    1f6c:	696e                	flw	fs2,216(sp)
    1f6e:	676e                	flw	fa4,216(sp)
    1f70:	4920                	lw	s0,80(a0)
    1f72:	4332                	lw	t1,12(sp)
    1f74:	4220                	lw	s0,64(a2)
    1f76:	7375                	lui	t1,0xffffd
    1f78:	6620                	flw	fs0,72(a2)
    1f7a:	4420726f          	jal	tp,93bc <lib_i2c.c.d894f163+0x217f>
    1f7e:	7665                	lui	a2,0xffff9
    1f80:	6369                	lui	t1,0x1a
    1f82:	7365                	lui	t1,0xffff9
    1f84:	2d2d                	jal	25be <_data_lma+0x26a>
    1f86:	002d                	c.nop	11
    1f88:	2d2d                	jal	25c2 <_data_lma+0x26e>
    1f8a:	2d2d                	jal	25c4 <_data_lma+0x270>
    1f8c:	6f44                	flw	fs1,28(a4)
    1f8e:	656e                	flw	fa0,216(sp)
    1f90:	5320                	lw	s0,96(a4)
    1f92:	6e6e6163          	bltu	t3,t1,2674 <_data_lma+0x320>
    1f96:	6e69                	lui	t3,0x1a
    1f98:	2d2d2d67          	0x2d2d2d67
    1f9c:	0a2d                	addi	s4,s4,11
    1f9e:	0000                	unimp
    1fa0:	654e                	flw	fa0,208(sp)
    1fa2:	6f6c5f6f          	jal	t5,c7698 <lib_i2c.c.d894f163+0xc045b>
    1fa6:	6461                	lui	s0,0x18
    1fa8:	6d6d6f43          	0x6d6d6f43
    1fac:	6e61                	lui	t3,0x18
    1fae:	3a64                	fld	fs1,240(a2)
    1fb0:	2520                	fld	fs0,72(a0)
    1fb2:	3230                	fld	fa2,96(a2)
    1fb4:	0a58                	addi	a4,sp,276
    1fb6:	0000                	unimp
    1fb8:	6f4c                	flw	fa1,28(a4)
    1fba:	676e                	flw	fa4,216(sp)
    1fbc:	5020                	lw	s0,96(s0)
    1fbe:	6572                	flw	fa0,28(sp)
    1fc0:	00007373          	csrrci	t1,ustatus,0
    1fc4:	7562                	flw	fa0,56(sp)
    1fc6:	7474                	flw	fa3,108(s0)
    1fc8:	203a6e6f          	jal	t3,a89ca <lib_i2c.c.d894f163+0xa178d>
    1fcc:	6425                	lui	s0,0x9
    1fce:	0000                	unimp
    1fd0:	676e6953          	0x676e6953
    1fd4:	656c                	flw	fa1,76(a0)
    1fd6:	4320                	lw	s0,64(a4)
    1fd8:	696c                	flw	fa1,84(a0)
    1fda:	00006b63          	bltu	zero,zero,1ff0 <DMA1_Channel3_IRQHandler+0x16a>
    1fde:	0000                	unimp
    1fe0:	6f44                	flw	fs1,28(a4)
    1fe2:	6275                	lui	tp,0x1d
    1fe4:	656c                	flw	fa1,76(a0)
    1fe6:	4320                	lw	s0,64(a4)
    1fe8:	696c                	flw	fa1,84(a0)
    1fea:	00006b63          	bltu	zero,zero,2000 <DMA1_Channel3_IRQHandler+0x17a>
    1fee:	0000                	unimp
    1ff0:	7325                	lui	t1,0xfffe9
    1ff2:	6320                	flw	fs0,64(a4)
    1ff4:	6379                	lui	t1,0x1e
    1ff6:	2520732f          	0x2520732f
    1ffa:	756c                	flw	fa1,108(a0)
    1ffc:	7e20                	flw	fs0,120(a2)
    1ffe:	2520                	fld	fs0,72(a0)
    2000:	756c                	flw	fa1,108(a0)
    2002:	736d                	lui	t1,0xffffb
    2004:	0000                	unimp
    2006:	0000                	unimp
    2008:	007c                	addi	a5,sp,12
    200a:	0000                	unimp
    200c:	0000002f          	0x2f
    2010:	002d                	c.nop	11
    2012:	0000                	unimp
    2014:	005c                	addi	a5,sp,4
    2016:	0000                	unimp
    2018:	6f70                	flw	fa2,92(a4)
    201a:	25203a73          	csrrc	s4,0x252,zero
    201e:	2c64                	fld	fs1,216(s0)
    2020:	6420                	flw	fs0,72(s0)
    2022:	7269                	lui	tp,0xffffa
    2024:	203a                	fld	ft0,392(sp)
    2026:	7325                	lui	t1,0xfffe9
    2028:	0000                	unimp
    202a:	0000                	unimp
    202c:	786a                	flw	fa6,184(sp)
    202e:	203a                	fld	ft0,392(sp)
    2030:	6425                	lui	s0,0x9
    2032:	202c                	fld	fa1,64(s0)
    2034:	796a                	flw	fs2,184(sp)
    2036:	203a                	fld	ft0,392(sp)
    2038:	6425                	lui	s0,0x9
	...

0000203c <FONT_7x5>:
    203c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    204c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    205c:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
    206c:	001c 2a08 2a1c 0808 3e08 0808 5000 0030     ...*.*...>...P0.
    207c:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
    208c:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
    209c:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
    20ac:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
    20bc:	1e29 3600 0036 0000 3656 0000 0800 2214     )..66...V6....."
    20cc:	1441 1414 1414 2241 0814 0200 5101 0609     A.....A".....Q..
    20dc:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
    20ec:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
    20fc:	0109 3e01 4141 3251 087f 0808 007f 7f41     ...>AAQ2......A.
    210c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    211c:	7f40 0402 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    212c:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
    213c:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
    214c:	2040 7f1f 1820 7f20 1463 1408 0363 7804     @ .. . .c...c..x
    215c:	0304 5161 4549 0043 7f00 4141 0402 1008     ..aQIEC...AA....
    216c:	4120 7f41 0000 0204 0201 4004 4040 4040      AA........@@@@@
    217c:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
    218c:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
    219c:	0109 0802 5414 3c54 087f 0404 0078 7d44     .....TT<....x.D}
    21ac:	0040 4020 3d44 0000 107f 4428 4100 407f     @. @D=....(D.A.@
    21bc:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
    21cc:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
    21dc:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
    21ec:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
    21fc:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
    220c:	0000 3641 0008 0808 1c2a 0008               ..A6....*...

00002218 <SIN_LUT2>:
    2218:	0100 0101 0101 0202 0403 0504 0706 0908     ................
    2228:	0b0a 0e0d 1110 1413 1816 1b1a 1f1d 2421     ..............!$
    2238:	2826 2d2a 312f 3634 3c39 413e 4744 4c49     &(*-/1469<>ADGIL
    2248:	524f 5855 5e5b 6461 6a67 706d 7673 7d79     ORUX[^adgjmpsvy}
    2258:	8380 8986 8f8c 9592 9c99 a29f a8a5 adab     ................
    2268:	b3b0 b9b6 bebc c4c1 c9c6 cecb d3d0 d7d5     ................
    2278:	dcda e0de e4e2 e8e6 ebe9 eeed f1f0 f4f3     ................
    2288:	f6f5 f8f7 faf9 fcfb fdfc fefe fffe ffff     ................
    2298:	ffff ffff fefe fdfe fcfc fafb f8f9 f6f7     ................
    22a8:	f4f5 f1f3 eef0 ebed e8e9 e4e6 e0e2 dcde     ................
    22b8:	d7da d3d5 ced0 c9cb c4c6 bec1 b9bc b3b6     ................
    22c8:	adb0 a8ab a2a5 9c9f 9599 8f92 898c 8386     ................
    22d8:	7d80 7679 7073 6a6d 6467 5e61 585b 5255     .}yvspmjgda^[XUR
    22e8:	4c4f 4749 4144 3c3e 3639 3134 2d2f 282a     OLIGDA><9641/-*(
    22f8:	2426 1f21 1b1d 181a 1416 1113 0e10 0b0d     &$!.............
    2308:	090a 0708 0506 0404 0203 0102 0101 0101     ................

00002318 <bitquartets.5>:
    2318:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    2328:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

00002338 <ssd1306_init_array>:
    2338:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    2348:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......
