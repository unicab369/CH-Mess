
ch32-mess.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	3990006f          	j	b98 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0c66                	slli	s8,s8,0x19
   a:	0000                	unimp
   c:	0c0e                	slli	s8,s8,0x3
	...
  2e:	0000                	unimp
  30:	1c92                	slli	s9,s9,0x24
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0c0e                	slli	s8,s8,0x3
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0c0e                	slli	s8,s8,0x3
  42:	0000                	unimp
  44:	0c0e                	slli	s8,s8,0x3
  46:	0000                	unimp
  48:	0c0e                	slli	s8,s8,0x3
  4a:	0000                	unimp
  4c:	0c0e                	slli	s8,s8,0x3
  4e:	0000                	unimp
  50:	0c0e                	slli	s8,s8,0x3
  52:	0000                	unimp
  54:	0c0e                	slli	s8,s8,0x3
  56:	0000                	unimp
  58:	0c0e                	slli	s8,s8,0x3
  5a:	0000                	unimp
  5c:	0c0e                	slli	s8,s8,0x3
  5e:	0000                	unimp
  60:	1cc4                	addi	s1,sp,628
  62:	0000                	unimp
  64:	0030                	addi	a2,sp,8
  66:	2000                	fld	fs0,0(s0)
  68:	0c0e                	slli	s8,s8,0x3
  6a:	0000                	unimp
  6c:	0c0e                	slli	s8,s8,0x3
  6e:	0000                	unimp
  70:	0c0e                	slli	s8,s8,0x3
  72:	0000                	unimp
  74:	0c0e                	slli	s8,s8,0x3
  76:	0000                	unimp
  78:	0c0e                	slli	s8,s8,0x3
  7a:	0000                	unimp
  7c:	0c0e                	slli	s8,s8,0x3
  7e:	0000                	unimp
  80:	0c0e                	slli	s8,s8,0x3
  82:	0000                	unimp
  84:	0c0e                	slli	s8,s8,0x3
  86:	0000                	unimp
  88:	0c0e                	slli	s8,s8,0x3
  8a:	0000                	unimp
  8c:	0c0e                	slli	s8,s8,0x3
  8e:	0000                	unimp
  90:	0c0e                	slli	s8,s8,0x3
  92:	0000                	unimp
  94:	0c0e                	slli	s8,s8,0x3
  96:	0000                	unimp
  98:	0c0e                	slli	s8,s8,0x3
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	andi	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srli	a1,a1,0x1
      ae:	0606                	slli	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	slli	a2,a2,0x1
      d4:	0686                	slli	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srli	a3,a3,0x1
      e6:	8205                	srli	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
{
     136:	1131                	addi	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
	int overflow = 0;
     144:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     146:	cab5                	beqz	a3,1ba <mini_pad+0x84>
	if(len > pad_to) {
     148:	0096d463          	bge	a3,s1,150 <mini_pad+0x1a>
     14c:	84b6                	mv	s1,a3
		overflow = 1;
     14e:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     150:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     154:	00045363          	bgez	s0,15a <mini_pad+0x24>
     158:	4401                	li	s0,0
     15a:	8622                	mv	a2,s0
     15c:	853a                	mv	a0,a4
     15e:	c23e                	sw	a5,4(sp)
     160:	c01a                	sw	t1,0(sp)
     162:	501000ef          	jal	ra,e62 <memset>
     166:	4302                	lw	t1,0(sp)
     168:	4792                	lw	a5,4(sp)
     16a:	872a                	mv	a4,a0
     16c:	008506b3          	add	a3,a0,s0
     170:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     172:	40c485b3          	sub	a1,s1,a2
     176:	04b04463          	bgtz	a1,1be <mini_pad+0x88>
     17a:	0004d363          	bgez	s1,180 <mini_pad+0x4a>
     17e:	4481                	li	s1,0
     180:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     184:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     188:	02030463          	beqz	t1,1b0 <mini_pad+0x7a>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     18c:	02c77263          	bgeu	a4,a2,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     190:	02a00793          	li	a5,42
     194:	fef60fa3          	sb	a5,-1(a2)
     198:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     19c:	00d77a63          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1a0:	fef60f23          	sb	a5,-2(a2)
     1a4:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     1a8:	00d77463          	bgeu	a4,a3,1b0 <mini_pad+0x7a>
			*(pbuffer-- - 1) = '*';
     1ac:	fef60ea3          	sb	a5,-3(a2)
}
     1b0:	40c2                	lw	ra,16(sp)
     1b2:	4432                	lw	s0,12(sp)
     1b4:	44a2                	lw	s1,8(sp)
     1b6:	0151                	addi	sp,sp,20
     1b8:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1ba:	86a6                	mv	a3,s1
     1bc:	bf51                	j	150 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1be:	00c785b3          	add	a1,a5,a2
     1c2:	0005c503          	lbu	a0,0(a1)
     1c6:	00c685b3          	add	a1,a3,a2
     1ca:	0605                	addi	a2,a2,1
     1cc:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1d0:	b74d                	j	172 <mini_pad+0x3c>

000001d2 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
     1d2:	e0000737          	lui	a4,0xe0000
     1d6:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     1da:	0f470693          	addi	a3,a4,244
     1de:	0807f793          	andi	a5,a5,128
     1e2:	fbf5                	bnez	a5,1d6 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     1e4:	783027b7          	lui	a5,0x78302
     1e8:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
     1ec:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
     1ee:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
     1f0:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
     1f4:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     1f6:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     1f8:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
     1fc:	0807f793          	andi	a5,a5,128
     200:	ffe5                	bnez	a5,1f8 <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
     202:	00e557b3          	srl	a5,a0,a4
     206:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     20a:	03000793          	li	a5,48
     20e:	00d35463          	bge	t1,a3,216 <PrintHex+0x44>
     212:	05700793          	li	a5,87
     216:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     218:	07a2                	slli	a5,a5,0x8
     21a:	0857e793          	ori	a5,a5,133
     21e:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     222:	1771                	addi	a4,a4,-4
     224:	fcb71ae3          	bne	a4,a1,1f8 <PrintHex+0x26>
}
     228:	8082                	ret

0000022a <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#if defined(CH32V003) || defined(CH32V00x)
	uint32_t targend = SysTick->CNT + n;
     22a:	e000f7b7          	lui	a5,0xe000f
     22e:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     230:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     234:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     236:	471c                	lw	a5,8(a4)
     238:	8f89                	sub	a5,a5,a0
     23a:	fe07cee3          	bltz	a5,236 <DelaySysTick+0xc>
	uint64_t targend = SysTick->CNT - n;
	while( ((int64_t)( SysTick->CNT - targend )) > 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     23e:	8082                	ret

00000240 <mini_itoa.part.0>:
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     240:	1101                	addi	sp,sp,-32
     242:	ce06                	sw	ra,28(sp)
     244:	cc22                	sw	s0,24(sp)
     246:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     248:	c002                	sw	zero,0(sp)
int mini_itoa(long value, unsigned int radix, int uppercase, int unsig, char *buffer)
     24a:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     24c:	00055763          	bgez	a0,25a <mini_itoa.part.0+0x1a>
     250:	e689                	bnez	a3,25a <mini_itoa.part.0+0x1a>
		negative = 1;
     252:	4785                	li	a5,1
		value = -value;
     254:	40a00333          	neg	t1,a0
		negative = 1;
     258:	c03e                	sw	a5,0(sp)
     25a:	06100413          	li	s0,97
     25e:	c219                	beqz	a2,264 <mini_itoa.part.0+0x24>
     260:	04100413          	li	s0,65
	int	negative = 0;
     264:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     266:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     268:	851a                	mv	a0,t1
     26a:	c83a                	sw	a4,16(sp)
     26c:	c21a                	sw	t1,4(sp)
     26e:	c62e                	sw	a1,12(sp)
     270:	c41a                	sw	t1,8(sp)
     272:	3dad                	jal	ec <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     274:	47a5                	li	a5,9
     276:	4322                	lw	t1,8(sp)
     278:	45b2                	lw	a1,12(sp)
     27a:	4742                	lw	a4,16(sp)
     27c:	0ff57693          	andi	a3,a0,255
     280:	06a7e163          	bltu	a5,a0,2e2 <mini_itoa.part.0+0xa2>
     284:	03068693          	addi	a3,a3,48
     288:	0ff6f693          	andi	a3,a3,255
     28c:	00148793          	addi	a5,s1,1
     290:	00d48023          	sb	a3,0(s1)
		value /= radix;
     294:	851a                	mv	a0,t1
     296:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     298:	c63e                	sw	a5,12(sp)
		value /= radix;
     29a:	c42e                	sw	a1,8(sp)
     29c:	3515                	jal	c0 <__hidden___udivsi3>
	} while (value > 0);
     29e:	4692                	lw	a3,4(sp)
     2a0:	45a2                	lw	a1,8(sp)
     2a2:	47b2                	lw	a5,12(sp)
     2a4:	4742                	lw	a4,16(sp)
		value /= radix;
     2a6:	832a                	mv	t1,a0
	} while (value > 0);
     2a8:	02b6fb63          	bgeu	a3,a1,2de <mini_itoa.part.0+0x9e>
	if (negative)
     2ac:	4682                	lw	a3,0(sp)
     2ae:	c699                	beqz	a3,2bc <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     2b0:	02d00693          	li	a3,45
     2b4:	00d78023          	sb	a3,0(a5) # e000f000 <_eusrstack+0xc000e800>
     2b8:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     2bc:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     2c0:	01f55693          	srli	a3,a0,0x1f
     2c4:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     2c6:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     2ca:	8685                	srai	a3,a3,0x1
     2cc:	4601                	li	a2,0
     2ce:	17fd                	addi	a5,a5,-1
     2d0:	00d64b63          	blt	a2,a3,2e6 <mini_itoa.part.0+0xa6>
}
     2d4:	40f2                	lw	ra,28(sp)
     2d6:	4462                	lw	s0,24(sp)
     2d8:	44d2                	lw	s1,20(sp)
     2da:	6105                	addi	sp,sp,32
     2dc:	8082                	ret
	} while (value > 0);
     2de:	84be                	mv	s1,a5
     2e0:	b761                	j	268 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     2e2:	96a2                	add	a3,a3,s0
     2e4:	b755                	j	288 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     2e6:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     2ea:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     2ee:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     2f2:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     2f4:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     2f8:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     2fc:	bfc9                	j	2ce <mini_itoa.part.0+0x8e>

000002fe <SPI_send>:
    DMA1_Channel3->CFGR &= ~DMA_CFGR1_EN;  // Turn off channel
}

static void SPI_send(uint8_t data) {
    // Send byte
    SPI1->DATAR = data;
     2fe:	400137b7          	lui	a5,0x40013
     302:	00a79623          	sh	a0,12(a5) # 4001300c <_eusrstack+0x2001280c>

    // Waiting for transmission complete
    while (!(SPI1->STATR & SPI_STATR_TXE)) ;
     306:	40013737          	lui	a4,0x40013
     30a:	00875783          	lhu	a5,8(a4) # 40013008 <_eusrstack+0x20012808>
     30e:	8b89                	andi	a5,a5,2
     310:	dfed                	beqz	a5,30a <SPI_send+0xc>
}
     312:	8082                	ret

00000314 <write_cmd_8>:
#define ST7735_MADCTL_MY  0x80  // Bit 7 - Y-Mirror


static uint8_t DC_PIN;

void INTF_SPI_DC_LOW()  { funDigitalWrite(DC_PIN, 0); }
     314:	c541c783          	lbu	a5,-940(gp) # 20000050 <DC_PIN>
     318:	400116b7          	lui	a3,0x40011
     31c:	80068693          	addi	a3,a3,-2048 # 40010800 <_eusrstack+0x20010000>
     320:	0047d713          	srli	a4,a5,0x4
     324:	072a                	slli	a4,a4,0xa
     326:	8bbd                	andi	a5,a5,15
     328:	9736                	add	a4,a4,a3
     32a:	07c1                	addi	a5,a5,16
     32c:	4685                	li	a3,1
     32e:	00f697b3          	sll	a5,a3,a5
     332:	cb1c                	sw	a5,16(a4)
void INTF_SPI_DC_LOW();
void INTF_SPI_DC_HIGH();

static void write_cmd_8(uint8_t cmd) {
    INTF_SPI_DC_LOW();      // Command Mode
    SPI_send(cmd);
     334:	b7e9                	j	2fe <SPI_send>

00000336 <INTF_SPI_DC_HIGH>:
void INTF_SPI_DC_HIGH() { funDigitalWrite(DC_PIN, 1); }
     336:	c541c703          	lbu	a4,-940(gp) # 20000050 <DC_PIN>
     33a:	400116b7          	lui	a3,0x40011
     33e:	80068693          	addi	a3,a3,-2048 # 40010800 <_eusrstack+0x20010000>
     342:	00475793          	srli	a5,a4,0x4
     346:	07aa                	slli	a5,a5,0xa
     348:	97b6                	add	a5,a5,a3
     34a:	8b3d                	andi	a4,a4,15
     34c:	4685                	li	a3,1
     34e:	00e69733          	sll	a4,a3,a4
     352:	cb98                	sw	a4,16(a5)
     354:	8082                	ret

00000356 <write_data_16>:
static void write_data_8(uint8_t data) {
    INTF_SPI_DC_HIGH();     // Data Mode
    SPI_send(data);
}

static void write_data_16(uint16_t data) {
     356:	1151                	addi	sp,sp,-12
     358:	c406                	sw	ra,8(sp)
     35a:	c222                	sw	s0,4(sp)
     35c:	842a                	mv	s0,a0
    INTF_SPI_DC_HIGH();     // Data Mode
     35e:	3fe1                	jal	336 <INTF_SPI_DC_HIGH>
    SPI_send(data >> 8);
     360:	00845513          	srli	a0,s0,0x8
     364:	3f69                	jal	2fe <SPI_send>
    SPI_send(data);
     366:	0ff47513          	andi	a0,s0,255
}
     36a:	4412                	lw	s0,4(sp)
     36c:	40a2                	lw	ra,8(sp)
     36e:	0131                	addi	sp,sp,12
    SPI_send(data);
     370:	b779                	j	2fe <SPI_send>

00000372 <INTF_TFT_SET_WINDOW>:

void INTF_TFT_SET_WINDOW(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     372:	1131                	addi	sp,sp,-20
     374:	c22a                	sw	a0,4(sp)
    INTF_TFT_START_WRITE();

    write_cmd_8(ST7735_CASET);
     376:	02a00513          	li	a0,42
void INTF_TFT_SET_WINDOW(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     37a:	c806                	sw	ra,16(sp)
     37c:	c622                	sw	s0,12(sp)
     37e:	c426                	sw	s1,8(sp)
     380:	8436                	mv	s0,a3
     382:	84ae                	mv	s1,a1
     384:	c032                	sw	a2,0(sp)
    write_cmd_8(ST7735_CASET);
     386:	3779                	jal	314 <write_cmd_8>
    write_data_16(x0);
     388:	4792                	lw	a5,4(sp)
     38a:	853e                	mv	a0,a5
     38c:	37e9                	jal	356 <write_data_16>
    write_data_16(x1);
     38e:	4602                	lw	a2,0(sp)
     390:	8532                	mv	a0,a2
     392:	37d1                	jal	356 <write_data_16>
    write_cmd_8(ST7735_RASET);
     394:	02b00513          	li	a0,43
     398:	3fb5                	jal	314 <write_cmd_8>
    write_data_16(y0);
     39a:	8526                	mv	a0,s1
     39c:	3f6d                	jal	356 <write_data_16>
    write_data_16(y1);
     39e:	8522                	mv	a0,s0
     3a0:	3f5d                	jal	356 <write_data_16>
    write_cmd_8(ST7735_RAMWR);
}
     3a2:	4432                	lw	s0,12(sp)
     3a4:	40c2                	lw	ra,16(sp)
     3a6:	44a2                	lw	s1,8(sp)
    write_cmd_8(ST7735_RAMWR);
     3a8:	02c00513          	li	a0,44
}
     3ac:	0151                	addi	sp,sp,20
    write_cmd_8(ST7735_RAMWR);
     3ae:	b79d                	j	314 <write_cmd_8>

000003b0 <tft_draw_pixel>:
                            }

//! draw pixel
void tft_draw_pixel(
    uint16_t x, uint16_t y, uint16_t color
) {
     3b0:	1151                	addi	sp,sp,-12
    x += TFT_X_OFFSET;
     3b2:	0505                	addi	a0,a0,1
    y += TFT_Y_OFFSET;
     3b4:	05e9                	addi	a1,a1,26
) {
     3b6:	c222                	sw	s0,4(sp)
    y += TFT_Y_OFFSET;
     3b8:	01059693          	slli	a3,a1,0x10
) {
     3bc:	8432                	mv	s0,a2
    x += TFT_X_OFFSET;
     3be:	01051613          	slli	a2,a0,0x10
     3c2:	8241                	srli	a2,a2,0x10
    y += TFT_Y_OFFSET;
     3c4:	82c1                	srli	a3,a3,0x10

    INTF_TFT_SET_WINDOW(x, y, x, y);
     3c6:	8532                	mv	a0,a2
     3c8:	85b6                	mv	a1,a3
) {
     3ca:	c406                	sw	ra,8(sp)
    INTF_TFT_SET_WINDOW(x, y, x, y);
     3cc:	375d                	jal	372 <INTF_TFT_SET_WINDOW>

    INTF_TFT_END_WRITE();
}

void INTF_TFT_SEND_COLOR(uint16_t color) {
    write_data_16(color);
     3ce:	8522                	mv	a0,s0
    INTF_TFT_SEND_COLOR(color);
}
     3d0:	4412                	lw	s0,4(sp)
     3d2:	40a2                	lw	ra,8(sp)
     3d4:	0131                	addi	sp,sp,12
     3d6:	b741                	j	356 <write_data_16>

000003d8 <INTF_TFT_SEND_BUFF>:
void INTF_TFT_SEND_BUFF(const uint8_t* buffer, uint16_t size, uint16_t repeat) {
     3d8:	1141                	addi	sp,sp,-16
     3da:	c422                	sw	s0,8(sp)
     3dc:	c226                	sw	s1,4(sp)
     3de:	c02a                	sw	a0,0(sp)
     3e0:	84ae                	mv	s1,a1
     3e2:	8432                	mv	s0,a2
     3e4:	c606                	sw	ra,12(sp)
    INTF_SPI_DC_HIGH();
     3e6:	3f81                	jal	336 <INTF_SPI_DC_HIGH>
    DMA1_Channel3->MADDR = (uint32_t)buffer;
     3e8:	4502                	lw	a0,0(sp)
     3ea:	400207b7          	lui	a5,0x40020
        DMA1->INTFCR = DMA1_FLAG_TC3;
     3ee:	400206b7          	lui	a3,0x40020
    DMA1_Channel3->MADDR = (uint32_t)buffer;
     3f2:	dfc8                	sw	a0,60(a5)
    DMA1_Channel3->CNTR  = size;
     3f4:	dbc4                	sw	s1,52(a5)
    DMA1_Channel3->CFGR |= DMA_CFGR1_EN;  // Turn on channel
     3f6:	5b98                	lw	a4,48(a5)
        DMA1->INTFCR = DMA1_FLAG_TC3;
     3f8:	20000613          	li	a2,512
    DMA1_Channel3->CFGR |= DMA_CFGR1_EN;  // Turn on channel
     3fc:	00176713          	ori	a4,a4,1
     400:	db98                	sw	a4,48(a5)
    while (repeat--) {
     402:	67c1                	lui	a5,0x10
     404:	17fd                	addi	a5,a5,-1
     406:	147d                	addi	s0,s0,-1
     408:	0442                	slli	s0,s0,0x10
     40a:	8041                	srli	s0,s0,0x10
     40c:	00f41c63          	bne	s0,a5,424 <INTF_TFT_SEND_BUFF+0x4c>
    DMA1_Channel3->CFGR &= ~DMA_CFGR1_EN;  // Turn off channel
     410:	40020737          	lui	a4,0x40020
     414:	5b1c                	lw	a5,48(a4)
}
     416:	40b2                	lw	ra,12(sp)
     418:	4422                	lw	s0,8(sp)
     41a:	9bf9                	andi	a5,a5,-2
     41c:	db1c                	sw	a5,48(a4)
     41e:	4492                	lw	s1,4(sp)
     420:	0141                	addi	sp,sp,16
     422:	8082                	ret
        DMA1->INTFCR = DMA1_FLAG_TC3;
     424:	c2d0                	sw	a2,4(a3)
        while (!(DMA1->INTFR & DMA1_FLAG_TC3))
     426:	4298                	lw	a4,0(a3)
     428:	20077713          	andi	a4,a4,512
     42c:	df6d                	beqz	a4,426 <INTF_TFT_SEND_BUFF+0x4e>
     42e:	bfe1                	j	406 <INTF_TFT_SEND_BUFF+0x2e>

00000430 <tft_print>:
void tft_print(const char* str) {
     430:	1131                	addi	sp,sp,-20
     432:	c622                	sw	s0,12(sp)
     434:	c806                	sw	ra,16(sp)
     436:	c426                	sw	s1,8(sp)
     438:	842a                	mv	s0,a0
    while (*str) {
     43a:	00044783          	lbu	a5,0(s0)
     43e:	e791                	bnez	a5,44a <tft_print+0x1a>
}
     440:	40c2                	lw	ra,16(sp)
     442:	4432                	lw	s0,12(sp)
     444:	44a2                	lw	s1,8(sp)
     446:	0151                	addi	sp,sp,20
     448:	8082                	ret
    const unsigned char* start = &font[c + (c << 2)];
     44a:	00279713          	slli	a4,a5,0x2
     44e:	97ba                	add	a5,a5,a4
        tft_print_char(*str++, 7, font_width, 0xFFFF, 0x0000); // 7x5 font size
     450:	0405                	addi	s0,s0,1
    const unsigned char* start = &font[c + (c << 2)];
     452:	c03e                	sw	a5,0(sp)
     454:	4301                	li	t1,0
    uint16_t sz = 0;
     456:	4681                	li	a3,0
     458:	e1818513          	addi	a0,gp,-488 # 20000214 <_frame_buffer>
                _frame_buffer[sz++] = color >> 8;
     45c:	53fd                	li	t2,-1
     45e:	4785                	li	a5,1
     460:	006797b3          	sll	a5,a5,t1
     464:	c23e                	sw	a5,4(sp)
            if ((*(start + j)) & (0x01 << i)) {
     466:	8636                	mv	a2,a3
     468:	4581                	li	a1,0
     46a:	4282                	lw	t0,0(sp)
     46c:	6089                	lui	ra,0x2
     46e:	f0408093          	addi	ra,ra,-252 # 1f04 <font>
     472:	92ae                	add	t0,t0,a1
     474:	9286                	add	t0,t0,ra
     476:	0002c283          	lbu	t0,0(t0)
     47a:	4092                	lw	ra,4(sp)
     47c:	00160793          	addi	a5,a2,1
                _frame_buffer[sz++] = color >> 8;
     480:	8732                	mv	a4,a2
                _frame_buffer[sz++] = color;
     482:	0609                	addi	a2,a2,2
     484:	07c2                	slli	a5,a5,0x10
     486:	0642                	slli	a2,a2,0x10
            if ((*(start + j)) & (0x01 << i)) {
     488:	0012f2b3          	and	t0,t0,ra
     48c:	83c1                	srli	a5,a5,0x10
                _frame_buffer[sz++] = color;
     48e:	8241                	srli	a2,a2,0x10
                _frame_buffer[sz++] = color >> 8;
     490:	972a                	add	a4,a4,a0
            if ((*(start + j)) & (0x01 << i)) {
     492:	06028163          	beqz	t0,4f4 <tft_print+0xc4>
                _frame_buffer[sz++] = color >> 8;
     496:	00770023          	sb	t2,0(a4) # 40020000 <_eusrstack+0x2001f800>
                _frame_buffer[sz++] = color;
     49a:	97aa                	add	a5,a5,a0
     49c:	00778023          	sb	t2,0(a5) # 10000 <lib_i2c.c.d894f163+0x8ef2>
        for (uint8_t j = 0; j < width; j++) {
     4a0:	0585                	addi	a1,a1,1
     4a2:	4795                	li	a5,5
     4a4:	fcf593e3          	bne	a1,a5,46a <tft_print+0x3a>
                _frame_buffer[sz++] = color;
     4a8:	06a9                	addi	a3,a3,10
     4aa:	06c2                	slli	a3,a3,0x10
     4ac:	82c1                	srli	a3,a3,0x10
    for (uint8_t i = 0; i < height; i++) {
     4ae:	04600793          	li	a5,70
     4b2:	0305                	addi	t1,t1,1
     4b4:	faf695e3          	bne	a3,a5,45e <tft_print+0x2e>
    INTF_TFT_SET_WINDOW(_cursor_x, _cursor_y, _cursor_x + width - 1, _cursor_y + height - 1);
     4b8:	c6418713          	addi	a4,gp,-924 # 20000060 <_cursor_x>
     4bc:	00075783          	lhu	a5,0(a4)
     4c0:	c661d583          	lhu	a1,-922(gp) # 20000062 <_cursor_y>
     4c4:	00478613          	addi	a2,a5,4
     4c8:	00658693          	addi	a3,a1,6
     4cc:	06c2                	slli	a3,a3,0x10
     4ce:	0642                	slli	a2,a2,0x10
     4d0:	853e                	mv	a0,a5
     4d2:	82c1                	srli	a3,a3,0x10
     4d4:	8241                	srli	a2,a2,0x10
     4d6:	c03e                	sw	a5,0(sp)
     4d8:	3d69                	jal	372 <INTF_TFT_SET_WINDOW>
    INTF_TFT_SEND_BUFF(_frame_buffer, sz, 1);
     4da:	4605                	li	a2,1
     4dc:	04600593          	li	a1,70
     4e0:	e1818513          	addi	a0,gp,-488 # 20000214 <_frame_buffer>
     4e4:	3dd5                	jal	3d8 <INTF_TFT_SEND_BUFF>
        _cursor_x += font_width + 1;
     4e6:	4782                	lw	a5,0(sp)
     4e8:	c6418713          	addi	a4,gp,-924 # 20000060 <_cursor_x>
     4ec:	0799                	addi	a5,a5,6
     4ee:	00f71023          	sh	a5,0(a4)
     4f2:	b7a1                	j	43a <tft_print+0xa>
                _frame_buffer[sz++] = bg_color >> 8;
     4f4:	00070023          	sb	zero,0(a4)
                _frame_buffer[sz++] = bg_color;
     4f8:	97aa                	add	a5,a5,a0
     4fa:	00078023          	sb	zero,0(a5)
     4fe:	b74d                	j	4a0 <tft_print+0x70>

00000500 <tft_fill_rect>:
    x += TFT_X_OFFSET;
     500:	0505                	addi	a0,a0,1
    y += TFT_Y_OFFSET;
     502:	05e9                	addi	a1,a1,26
) {
     504:	1151                	addi	sp,sp,-12
    x += TFT_X_OFFSET;
     506:	0542                	slli	a0,a0,0x10
    y += TFT_Y_OFFSET;
     508:	05c2                	slli	a1,a1,0x10
) {
     50a:	c222                	sw	s0,4(sp)
     50c:	c026                	sw	s1,0(sp)
     50e:	c406                	sw	ra,8(sp)
     510:	84b6                	mv	s1,a3
     512:	8432                	mv	s0,a2
    x += TFT_X_OFFSET;
     514:	8141                	srli	a0,a0,0x10
    y += TFT_Y_OFFSET;
     516:	81c1                	srli	a1,a1,0x10
        _buffer[sz++] = color >> 8;
     518:	00875293          	srli	t0,a4,0x8
     51c:	cd818313          	addi	t1,gp,-808 # 200000d4 <_buffer>
    for (uint16_t x = 0; x < width; x++) {
     520:	4681                	li	a3,0
        _buffer[sz++] = color >> 8;
     522:	8636                	mv	a2,a3
    for (uint16_t x = 0; x < width; x++) {
     524:	0685                	addi	a3,a3,1
     526:	06c2                	slli	a3,a3,0x10
        _buffer[sz++] = color >> 8;
     528:	00530023          	sb	t0,0(t1)
        _buffer[sz++] = color;
     52c:	00e300a3          	sb	a4,1(t1)
    for (uint16_t x = 0; x < width; x++) {
     530:	82c1                	srli	a3,a3,0x10
     532:	0309                	addi	t1,t1,2
     534:	fed417e3          	bne	s0,a3,522 <tft_fill_rect+0x22>
    INTF_TFT_SET_WINDOW(x, y, x + width - 1, y + height - 1);
     538:	fff48693          	addi	a3,s1,-1
     53c:	96ae                	add	a3,a3,a1
     53e:	962a                	add	a2,a2,a0
     540:	06c2                	slli	a3,a3,0x10
     542:	0642                	slli	a2,a2,0x10
     544:	8241                	srli	a2,a2,0x10
     546:	82c1                	srli	a3,a3,0x10
     548:	352d                	jal	372 <INTF_TFT_SET_WINDOW>
        _buffer[sz++] = color;
     54a:	00141593          	slli	a1,s0,0x1
}
     54e:	4412                	lw	s0,4(sp)
     550:	40a2                	lw	ra,8(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, height);
     552:	8626                	mv	a2,s1
}
     554:	4482                	lw	s1,0(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, height);
     556:	05c2                	slli	a1,a1,0x10
     558:	81c1                	srli	a1,a1,0x10
     55a:	cd818513          	addi	a0,gp,-808 # 200000d4 <_buffer>
}
     55e:	0131                	addi	sp,sp,12
    INTF_TFT_SEND_BUFF(_buffer, sz, height);
     560:	bda5                	j	3d8 <INTF_TFT_SEND_BUFF>

00000562 <_draw_fast_vLine>:

//! private
static void _draw_fast_vLine(
    int16_t x, int16_t y, int16_t h, uint16_t color
) {
     562:	1151                	addi	sp,sp,-12
     564:	c222                	sw	s0,4(sp)
    x += TFT_X_OFFSET;
    y += TFT_Y_OFFSET;
     566:	05e9                	addi	a1,a1,26
) {
     568:	8432                	mv	s0,a2
    x += TFT_X_OFFSET;
     56a:	00150613          	addi	a2,a0,1
) {
     56e:	c026                	sw	s1,0(sp)
    x += TFT_X_OFFSET;
     570:	0642                	slli	a2,a2,0x10
    y += TFT_Y_OFFSET;
     572:	05c2                	slli	a1,a1,0x10
) {
     574:	c406                	sw	ra,8(sp)
    x += TFT_X_OFFSET;
     576:	8241                	srli	a2,a2,0x10
    y += TFT_Y_OFFSET;
     578:	81c1                	srli	a1,a1,0x10

    uint16_t sz = 0;
    for (int16_t j = 0; j < h; j++) {
        _buffer[sz++] = color >> 8;
     57a:	0086d513          	srli	a0,a3,0x8
     57e:	cd818713          	addi	a4,gp,-808 # 200000d4 <_buffer>
    for (int16_t j = 0; j < h; j++) {
     582:	4781                	li	a5,0
     584:	0287c863          	blt	a5,s0,5b4 <_draw_fast_vLine+0x52>
        _buffer[sz++] = color;
    }

    INTF_TFT_SET_WINDOW(x, y, x, y + h - 1);
     588:	fff40693          	addi	a3,s0,-1
     58c:	96ae                	add	a3,a3,a1
     58e:	06c2                	slli	a3,a3,0x10
     590:	82c1                	srli	a3,a3,0x10
     592:	8532                	mv	a0,a2
     594:	3bf9                	jal	372 <INTF_TFT_SET_WINDOW>
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     596:	85a2                	mv	a1,s0
     598:	00045363          	bgez	s0,59e <_draw_fast_vLine+0x3c>
     59c:	4581                	li	a1,0
}
     59e:	4412                	lw	s0,4(sp)
     5a0:	40a2                	lw	ra,8(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5a2:	0586                	slli	a1,a1,0x1
     5a4:	cd818513          	addi	a0,gp,-808 # 200000d4 <_buffer>
}
     5a8:	4482                	lw	s1,0(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5aa:	05c2                	slli	a1,a1,0x10
     5ac:	81c1                	srli	a1,a1,0x10
     5ae:	4605                	li	a2,1
}
     5b0:	0131                	addi	sp,sp,12
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5b2:	b51d                	j	3d8 <INTF_TFT_SEND_BUFF>
        _buffer[sz++] = color >> 8;
     5b4:	0785                	addi	a5,a5,1
     5b6:	07c2                	slli	a5,a5,0x10
     5b8:	00a70023          	sb	a0,0(a4)
        _buffer[sz++] = color;
     5bc:	00d700a3          	sb	a3,1(a4)
    for (int16_t j = 0; j < h; j++) {
     5c0:	87c1                	srai	a5,a5,0x10
     5c2:	0709                	addi	a4,a4,2
     5c4:	b7c1                	j	584 <_draw_fast_vLine+0x22>

000005c6 <_draw_fast_hLine>:


//! private
static void _draw_fast_hLine(
    int16_t x, int16_t y, int16_t w, uint16_t color
) {
     5c6:	1151                	addi	sp,sp,-12
    x += TFT_X_OFFSET;
    y += TFT_Y_OFFSET;
     5c8:	05e9                	addi	a1,a1,26
    x += TFT_X_OFFSET;
     5ca:	0505                	addi	a0,a0,1
) {
     5cc:	c222                	sw	s0,4(sp)
     5ce:	c026                	sw	s1,0(sp)
     5d0:	8432                	mv	s0,a2
    x += TFT_X_OFFSET;
     5d2:	0542                	slli	a0,a0,0x10
) {
     5d4:	8636                	mv	a2,a3
    y += TFT_Y_OFFSET;
     5d6:	01059693          	slli	a3,a1,0x10
) {
     5da:	c406                	sw	ra,8(sp)
    x += TFT_X_OFFSET;
     5dc:	8141                	srli	a0,a0,0x10
    y += TFT_Y_OFFSET;
     5de:	82c1                	srli	a3,a3,0x10

    uint16_t sz = 0;
    for (int16_t j = 0; j < w; j++) {
        _buffer[sz++] = color >> 8;
     5e0:	00865593          	srli	a1,a2,0x8
     5e4:	cd818713          	addi	a4,gp,-808 # 200000d4 <_buffer>
    for (int16_t j = 0; j < w; j++) {
     5e8:	4781                	li	a5,0
     5ea:	0287c863          	blt	a5,s0,61a <_draw_fast_hLine+0x54>
        _buffer[sz++] = color;
    }

    INTF_TFT_SET_WINDOW(x, y, x + w - 1, y);
     5ee:	fff40613          	addi	a2,s0,-1
     5f2:	962a                	add	a2,a2,a0
     5f4:	0642                	slli	a2,a2,0x10
     5f6:	85b6                	mv	a1,a3
     5f8:	8241                	srli	a2,a2,0x10
     5fa:	3ba5                	jal	372 <INTF_TFT_SET_WINDOW>
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     5fc:	85a2                	mv	a1,s0
     5fe:	00045363          	bgez	s0,604 <_draw_fast_hLine+0x3e>
     602:	4581                	li	a1,0
}
     604:	4412                	lw	s0,4(sp)
     606:	40a2                	lw	ra,8(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     608:	0586                	slli	a1,a1,0x1
     60a:	cd818513          	addi	a0,gp,-808 # 200000d4 <_buffer>
}
     60e:	4482                	lw	s1,0(sp)
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     610:	05c2                	slli	a1,a1,0x10
     612:	81c1                	srli	a1,a1,0x10
     614:	4605                	li	a2,1
}
     616:	0131                	addi	sp,sp,12
    INTF_TFT_SEND_BUFF(_buffer, sz, 1);
     618:	b3c1                	j	3d8 <INTF_TFT_SEND_BUFF>
        _buffer[sz++] = color >> 8;
     61a:	0785                	addi	a5,a5,1
     61c:	07c2                	slli	a5,a5,0x10
     61e:	00b70023          	sb	a1,0(a4)
        _buffer[sz++] = color;
     622:	00c700a3          	sb	a2,1(a4)
    for (int16_t j = 0; j < w; j++) {
     626:	87c1                	srai	a5,a5,0x10
     628:	0709                	addi	a4,a4,2
     62a:	b7c1                	j	5ea <_draw_fast_hLine+0x24>

0000062c <tft_draw_line>:

//! draw line
void tft_draw_line(
    int16_t x0, int16_t y0,
    int16_t x1, int16_t y1, uint16_t color, uint8_t width
) {
     62c:	82b2                	mv	t0,a2
     62e:	832a                	mv	t1,a0
     630:	8636                	mv	a2,a3
     632:	86ba                	mv	a3,a4
    if (x0 == x1) {
     634:	00551d63          	bne	a0,t0,64e <tft_draw_line+0x22>
        if (y0 > y1) _swap_int16(y0, y1);
     638:	00b65563          	bge	a2,a1,642 <tft_draw_line+0x16>
     63c:	87ae                	mv	a5,a1
     63e:	85b2                	mv	a1,a2
     640:	863e                	mv	a2,a5
        _draw_fast_vLine(x0, y0, y1 - y0 + 1, color);
     642:	0605                	addi	a2,a2,1
     644:	8e0d                	sub	a2,a2,a1
     646:	0642                	slli	a2,a2,0x10
     648:	8641                	srai	a2,a2,0x10
     64a:	851a                	mv	a0,t1
     64c:	bf19                	j	562 <_draw_fast_vLine>
    }
    else if (y0 == y1) {
     64e:	00c59e63          	bne	a1,a2,66a <tft_draw_line+0x3e>
        if (x0 > x1) _swap_int16(x0, x1);
     652:	00a2d463          	bge	t0,a0,65a <tft_draw_line+0x2e>
     656:	8316                	mv	t1,t0
     658:	82aa                	mv	t0,a0
        _draw_fast_hLine(x0, y0, x1 - x0 + 1, color);
     65a:	00128613          	addi	a2,t0,1
     65e:	40660633          	sub	a2,a2,t1
     662:	0642                	slli	a2,a2,0x10
     664:	8641                	srai	a2,a2,0x10
     666:	851a                	mv	a0,t1
     668:	bfb9                	j	5c6 <_draw_fast_hLine>
) {
     66a:	fc410113          	addi	sp,sp,-60
     66e:	dc06                	sw	ra,56(sp)
     670:	da22                	sw	s0,52(sp)
     672:	d826                	sw	s1,48(sp)
     674:	853e                	mv	a0,a5
    uint8_t steep = _diff(y1, y0) > _diff(x1, x0);
     676:	40c587b3          	sub	a5,a1,a2
     67a:	00c5d463          	bge	a1,a2,682 <tft_draw_line+0x56>
     67e:	40b607b3          	sub	a5,a2,a1
     682:	06535763          	bge	t1,t0,6f0 <tft_draw_line+0xc4>
     686:	40628733          	sub	a4,t0,t1
    if (steep) {
     68a:	06f74d63          	blt	a4,a5,704 <tft_draw_line+0xd8>
     68e:	83ae                	mv	t2,a1
     690:	859a                	mv	a1,t1
     692:	831e                	mv	t1,t2
    int16_t dx   = x1 - x0;
     694:	40b283b3          	sub	t2,t0,a1
     698:	01039413          	slli	s0,t2,0x10
     69c:	8041                	srli	s0,s0,0x10
     69e:	c622                	sw	s0,12(sp)
     6a0:	03c2                	slli	t2,t2,0x10
    int16_t dy   = _diff(y1, y0);
     6a2:	01031413          	slli	s0,t1,0x10
     6a6:	01061493          	slli	s1,a2,0x10
    int16_t dx   = x1 - x0;
     6aa:	4103d393          	srai	t2,t2,0x10
    int16_t dy   = _diff(y1, y0);
     6ae:	8041                	srli	s0,s0,0x10
     6b0:	80c1                	srli	s1,s1,0x10
     6b2:	06c35563          	bge	t1,a2,71c <tft_draw_line+0xf0>
     6b6:	40848433          	sub	s0,s1,s0
     6ba:	0442                	slli	s0,s0,0x10
     6bc:	8441                	srai	s0,s0,0x10
     6be:	c222                	sw	s0,4(sp)
    int16_t step = (y0 < y1) ? 1 : -1;
     6c0:	4405                	li	s0,1
     6c2:	c422                	sw	s0,8(sp)
    int16_t err  = dx >> 1;
     6c4:	4013d393          	srai	t2,t2,0x1
    int16_t step = (y0 < y1) ? 1 : -1;
     6c8:	00c34463          	blt	t1,a2,6d0 <tft_draw_line+0xa4>
     6cc:	567d                	li	a2,-1
     6ce:	c432                	sw	a2,8(sp)
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     6d0:	00155613          	srli	a2,a0,0x1
     6d4:	c032                	sw	a2,0(sp)
     6d6:	40c00633          	neg	a2,a2
     6da:	0642                	slli	a2,a2,0x10
     6dc:	8641                	srai	a2,a2,0x10
     6de:	c832                	sw	a2,16(sp)
    for (; x0 <= x1; x0++) {
     6e0:	04b2d063          	bge	t0,a1,720 <tft_draw_line+0xf4>
    }
    else {
        _draw_line_bresenham(x0, y0, x1, y1, color, width);
    }
}
     6e4:	50e2                	lw	ra,56(sp)
     6e6:	5452                	lw	s0,52(sp)
     6e8:	54c2                	lw	s1,48(sp)
     6ea:	03c10113          	addi	sp,sp,60
     6ee:	8082                	ret
    uint8_t steep = _diff(y1, y0) > _diff(x1, x0);
     6f0:	40530733          	sub	a4,t1,t0
    if (steep) {
     6f4:	00f74863          	blt	a4,a5,704 <tft_draw_line+0xd8>
     6f8:	83b2                	mv	t2,a2
     6fa:	8616                	mv	a2,t0
     6fc:	829e                	mv	t0,t2
     6fe:	83ae                	mv	t2,a1
     700:	859a                	mv	a1,t1
     702:	831e                	mv	t1,t2
    if (x0 > x1) {
     704:	00b65863          	bge	a2,a1,714 <tft_draw_line+0xe8>
     708:	83ae                	mv	t2,a1
     70a:	85b2                	mv	a1,a2
     70c:	861a                	mv	a2,t1
     70e:	8316                	mv	t1,t0
     710:	829e                	mv	t0,t2
     712:	b749                	j	694 <tft_draw_line+0x68>
     714:	8396                	mv	t2,t0
     716:	82b2                	mv	t0,a2
     718:	861e                	mv	a2,t2
     71a:	bfad                	j	694 <tft_draw_line+0x68>
    int16_t dy   = _diff(y1, y0);
     71c:	8c05                	sub	s0,s0,s1
     71e:	bf71                	j	6ba <tft_draw_line+0x8e>
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     720:	44c2                	lw	s1,16(sp)
     722:	01059413          	slli	s0,a1,0x10
     726:	8041                	srli	s0,s0,0x10
                tft_draw_pixel(y0 + w, x0, color); // Draw perpendicular pixels for width
     728:	01031613          	slli	a2,t1,0x10
     72c:	04c2                	slli	s1,s1,0x10
     72e:	8241                	srli	a2,a2,0x10
     730:	80c1                	srli	s1,s1,0x10
     732:	00960533          	add	a0,a2,s1
     736:	ca32                	sw	a2,20(sp)
     738:	0542                	slli	a0,a0,0x10
     73a:	d616                	sw	t0,44(sp)
     73c:	d41a                	sw	t1,40(sp)
     73e:	d21e                	sw	t2,36(sp)
     740:	d03e                	sw	a5,32(sp)
     742:	ce3a                	sw	a4,28(sp)
     744:	cc36                	sw	a3,24(sp)
     746:	8141                	srli	a0,a0,0x10
     748:	8636                	mv	a2,a3
            if (steep) {
     74a:	04f75d63          	bge	a4,a5,7a4 <tft_draw_line+0x178>
                tft_draw_pixel(y0 + w, x0, color); // Draw perpendicular pixels for width
     74e:	85a2                	mv	a1,s0
     750:	3185                	jal	3b0 <tft_draw_pixel>
     752:	46e2                	lw	a3,24(sp)
     754:	4772                	lw	a4,28(sp)
     756:	5782                	lw	a5,32(sp)
     758:	5392                	lw	t2,36(sp)
     75a:	5322                	lw	t1,40(sp)
     75c:	52b2                	lw	t0,44(sp)
        for (int16_t w = -(width / 2); w <= width / 2; w++) {
     75e:	0485                	addi	s1,s1,1
     760:	4602                	lw	a2,0(sp)
     762:	04c2                	slli	s1,s1,0x10
     764:	84c1                	srai	s1,s1,0x10
     766:	fc9651e3          	bge	a2,s1,728 <tft_draw_line+0xfc>
        err -= dy;
     76a:	4612                	lw	a2,4(sp)
     76c:	40c383b3          	sub	t2,t2,a2
     770:	01039613          	slli	a2,t2,0x10
     774:	03c2                	slli	t2,t2,0x10
     776:	4103d393          	srai	t2,t2,0x10
     77a:	8241                	srli	a2,a2,0x10
        if (err < 0) {
     77c:	0003df63          	bgez	t2,79a <tft_draw_line+0x16e>
            err += dx;
     780:	45b2                	lw	a1,12(sp)
     782:	00c583b3          	add	t2,a1,a2
            y0 += step;
     786:	4652                	lw	a2,20(sp)
     788:	45a2                	lw	a1,8(sp)
            err += dx;
     78a:	03c2                	slli	t2,t2,0x10
     78c:	4103d393          	srai	t2,t2,0x10
            y0 += step;
     790:	00b60333          	add	t1,a2,a1
     794:	0342                	slli	t1,t1,0x10
     796:	41035313          	srai	t1,t1,0x10
    for (; x0 <= x1; x0++) {
     79a:	0405                	addi	s0,s0,1
     79c:	01041593          	slli	a1,s0,0x10
     7a0:	85c1                	srai	a1,a1,0x10
     7a2:	bf3d                	j	6e0 <tft_draw_line+0xb4>
                tft_draw_pixel(x0, y0 + w, color); // Draw perpendicular pixels for width
     7a4:	85aa                	mv	a1,a0
     7a6:	8522                	mv	a0,s0
     7a8:	3121                	jal	3b0 <tft_draw_pixel>
     7aa:	52b2                	lw	t0,44(sp)
     7ac:	5322                	lw	t1,40(sp)
     7ae:	5392                	lw	t2,36(sp)
     7b0:	5782                	lw	a5,32(sp)
     7b2:	4772                	lw	a4,28(sp)
     7b4:	46e2                	lw	a3,24(sp)
     7b6:	b765                	j	75e <tft_draw_line+0x132>

000007b8 <tft_draw_rect>:

//! draw rectangle
void tft_draw_rect(
    uint16_t x, uint16_t y,
    uint16_t width, uint16_t height, uint16_t color
) {
     7b8:	fdc10113          	addi	sp,sp,-36
     7bc:	ce22                	sw	s0,28(sp)
    _draw_fast_hLine(x, y, width, color);
     7be:	01059413          	slli	s0,a1,0x10
) {
     7c2:	cc26                	sw	s1,24(sp)
     7c4:	87b2                	mv	a5,a2
    _draw_fast_hLine(x, y, width, color);
     7c6:	8441                	srai	s0,s0,0x10
) {
     7c8:	84aa                	mv	s1,a0
    _draw_fast_hLine(x, y, width, color);
     7ca:	0642                	slli	a2,a2,0x10
     7cc:	0542                	slli	a0,a0,0x10
) {
     7ce:	c036                	sw	a3,0(sp)
    _draw_fast_hLine(x, y, width, color);
     7d0:	8541                	srai	a0,a0,0x10
) {
     7d2:	86ba                	mv	a3,a4
    _draw_fast_hLine(x, y, width, color);
     7d4:	ca2e                	sw	a1,20(sp)
     7d6:	8641                	srai	a2,a2,0x10
     7d8:	85a2                	mv	a1,s0
) {
     7da:	d006                	sw	ra,32(sp)
    _draw_fast_hLine(x, y, width, color);
     7dc:	c23a                	sw	a4,4(sp)
     7de:	c83e                	sw	a5,16(sp)
     7e0:	c632                	sw	a2,12(sp)
     7e2:	c42a                	sw	a0,8(sp)
     7e4:	33cd                	jal	5c6 <_draw_fast_hLine>
    _draw_fast_hLine(x, y + height - 1, width, color);
     7e6:	4782                	lw	a5,0(sp)
     7e8:	4352                	lw	t1,20(sp)
     7ea:	4692                	lw	a3,4(sp)
     7ec:	fff78593          	addi	a1,a5,-1
     7f0:	4632                	lw	a2,12(sp)
     7f2:	4522                	lw	a0,8(sp)
     7f4:	959a                	add	a1,a1,t1
     7f6:	05c2                	slli	a1,a1,0x10
     7f8:	85c1                	srai	a1,a1,0x10
     7fa:	33f1                	jal	5c6 <_draw_fast_hLine>
    _draw_fast_vLine(x, y, height, color);
     7fc:	00011603          	lh	a2,0(sp)
     800:	4692                	lw	a3,4(sp)
     802:	4522                	lw	a0,8(sp)
     804:	85a2                	mv	a1,s0
     806:	c032                	sw	a2,0(sp)
     808:	3ba9                	jal	562 <_draw_fast_vLine>
    _draw_fast_vLine(x + width - 1, y, height, color);
     80a:	47c2                	lw	a5,16(sp)
     80c:	85a2                	mv	a1,s0
}
     80e:	4472                	lw	s0,28(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     810:	fff78513          	addi	a0,a5,-1
     814:	4692                	lw	a3,4(sp)
     816:	4602                	lw	a2,0(sp)
}
     818:	5082                	lw	ra,32(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     81a:	9526                	add	a0,a0,s1
}
     81c:	44e2                	lw	s1,24(sp)
    _draw_fast_vLine(x + width - 1, y, height, color);
     81e:	0542                	slli	a0,a0,0x10
     820:	8541                	srai	a0,a0,0x10
}
     822:	02410113          	addi	sp,sp,36
    _draw_fast_vLine(x + width - 1, y, height, color);
     826:	bb35                	j	562 <_draw_fast_vLine>

00000828 <rand8>:
 */
uint8_t rand8(void) {
    uint8_t bit;
    uint32_t new_data;

    for(bit=0;bit<NOISE_BITS;bit++) {
     828:	c2c1a503          	lw	a0,-980(gp) # 20000028 <lfsr>
uint8_t rand8(void) {
     82c:	46a1                	li	a3,8
     82e:	c2c18713          	addi	a4,gp,-980 # 20000028 <lfsr>
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
                                (lfsr>>NOISE_POLY_TAP1) ^
     832:	01555613          	srli	a2,a0,0x15
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
     836:	01f55793          	srli	a5,a0,0x1f
     83a:	8fb1                	xor	a5,a5,a2
     83c:	8fa9                	xor	a5,a5,a0
                                (lfsr>>NOISE_POLY_TAP2) ^
     83e:	00155613          	srli	a2,a0,0x1
        new_data = ((lfsr>>NOISE_POLY_TAP0) ^
     842:	8fb1                	xor	a5,a5,a2
                                (lfsr>>NOISE_POLY_TAP3));
        lfsr = (lfsr<<1) | (new_data&1);
     844:	8b85                	andi	a5,a5,1
     846:	0506                	slli	a0,a0,0x1
     848:	8d5d                	or	a0,a0,a5
    for(bit=0;bit<NOISE_BITS;bit++) {
     84a:	fff68793          	addi	a5,a3,-1 # 4001ffff <_eusrstack+0x2001f7ff>
     84e:	0ff7f693          	andi	a3,a5,255
     852:	f2e5                	bnez	a3,832 <rand8+0xa>
     854:	c308                	sw	a0,0(a4)
    }

    return lfsr&NOISE_MASK;
}
     856:	0ff57513          	andi	a0,a0,255
     85a:	8082                	ret

0000085c <Neo_render_colorFlashing.constprop.0>:

    return led_arr[ledIdx].packed;
}

uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
    if (systick_handleTimeout(&fr->ref_time, fr->frame_duration)) {
     85c:	c1018693          	addi	a3,gp,-1008 # 2000000c <leds_frame>
	uint32_t now = millis();
     860:	c701a603          	lw	a2,-912(gp) # 2000006c <systick_millis>
	if (now - *ref_time > duration) {
     864:	4a9c                	lw	a5,16(a3)
     866:	42cc                	lw	a1,4(a3)
uint32_t Neo_render_colorFlashing(WS2812_frame_t* fr, animation_color_t* ani, int ledIdx) {
     868:	fc410113          	addi	sp,sp,-60
     86c:	dc06                	sw	ra,56(sp)
     86e:	da22                	sw	s0,52(sp)
     870:	d826                	sw	s1,48(sp)
     872:	c82a                	sw	a0,16(sp)
	if (now - *ref_time > duration) {
     874:	40f607b3          	sub	a5,a2,a5
     878:	0ef5f163          	bgeu	a1,a5,95a <Neo_render_colorFlashing.constprop.0+0xfe>
     87c:	c1018493          	addi	s1,gp,-1008 # 2000000c <leds_frame>
    return ani->colors[ani->ref_index];
     880:	c2418593          	addi	a1,gp,-988 # 20000020 <color_ani>
        fr->frame_value += 1;
     884:	0094c783          	lbu	a5,9(s1)
    return ani->colors[ani->ref_index];
     888:	0055c703          	lbu	a4,5(a1)
		*ref_time = now;
     88c:	c890                	sw	a2,16(s1)
    return ani->colors[ani->ref_index];
     88e:	4190                	lw	a2,0(a1)
        fr->frame_value += 1;
     890:	0785                	addi	a5,a5,1
     892:	0ff7f793          	andi	a5,a5,255
    return ani->colors[ani->ref_index];
     896:	00271513          	slli	a0,a4,0x2
        fr->frame_value += 1;
     89a:	00f484a3          	sb	a5,9(s1)
    return ani->colors[ani->ref_index];
     89e:	962a                	add	a2,a2,a0
     8a0:	c43a                	sw	a4,8(sp)
     8a2:	00064703          	lbu	a4,0(a2)
     8a6:	420c                	lw	a1,0(a2)
        RGB_t color = animation_currentColor(ani);

        for (int i=0; i < NR_LEDS; i++) {
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     8a8:	00879513          	slli	a0,a5,0x8
    return ani->colors[ani->ref_index];
     8ac:	c63a                	sw	a4,12(sp)
     8ae:	00164703          	lbu	a4,1(a2)
     8b2:	d62e                	sw	a1,44(sp)
     8b4:	d02e                	sw	a1,32(sp)
     8b6:	c23a                	sw	a4,4(sp)
     8b8:	00264703          	lbu	a4,2(a2)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     8bc:	06400593          	li	a1,100
     8c0:	8d1d                	sub	a0,a0,a5
     8c2:	ca3e                	sw	a5,20(sp)
    return ani->colors[ani->ref_index];
     8c4:	c03a                	sw	a4,0(sp)
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     8c6:	ff2ff0ef          	jal	ra,b8 <__divsi3>
     8ca:	0ff57593          	andi	a1,a0,255
     8ce:	6509                	lui	a0,0x2
     8d0:	dbc50513          	addi	a0,a0,-580 # 1dbc <SIN_LUT2>
     8d4:	952e                	add	a0,a0,a1
     8d6:	00054583          	lbu	a1,0(a0)
     8da:	47d2                	lw	a5,20(sp)
     8dc:	f5818693          	addi	a3,gp,-168 # 20000354 <led_arr>
     8e0:	c2418413          	addi	s0,gp,-988 # 20000020 <color_ani>
     8e4:	ce3e                	sw	a5,28(sp)
     8e6:	47b2                	lw	a5,12(sp)
     8e8:	cc36                	sw	a3,24(sp)
     8ea:	ca2e                	sw	a1,20(sp)
     8ec:	02f10023          	sb	a5,32(sp)
     8f0:	4792                	lw	a5,4(sp)
     8f2:	02f100a3          	sb	a5,33(sp)
     8f6:	4782                	lw	a5,0(sp)
     8f8:	02f10123          	sb	a5,34(sp)
     8fc:	5502                	lw	a0,32(sp)
     8fe:	d22a                	sw	a0,36(sp)
     900:	4532                	lw	a0,12(sp)
     902:	f9eff0ef          	jal	ra,a0 <__mulsi3>
     906:	8521                	srai	a0,a0,0x8
     908:	45d2                	lw	a1,20(sp)
     90a:	02a10223          	sb	a0,36(sp)
     90e:	4512                	lw	a0,4(sp)
     910:	f90ff0ef          	jal	ra,a0 <__mulsi3>
     914:	8521                	srai	a0,a0,0x8
     916:	45d2                	lw	a1,20(sp)
     918:	02a102a3          	sb	a0,37(sp)
     91c:	4502                	lw	a0,0(sp)
     91e:	f82ff0ef          	jal	ra,a0 <__mulsi3>
     922:	8521                	srai	a0,a0,0x8
     924:	02a10323          	sb	a0,38(sp)
     928:	46e2                	lw	a3,24(sp)
     92a:	5512                	lw	a0,36(sp)
        for (int i=0; i < NR_LEDS; i++) {
     92c:	f7018613          	addi	a2,gp,-144 # 2000036c <str.6>
            led_arr[i] = COLOR_SET_BRIGHTNESS(color, fr->frame_value);
     930:	c288                	sw	a0,0(a3)
        for (int i=0; i < NR_LEDS; i++) {
     932:	0691                	addi	a3,a3,4
     934:	45d2                	lw	a1,20(sp)
     936:	47f2                	lw	a5,28(sp)
     938:	fad616e3          	bne	a2,a3,8e4 <Neo_render_colorFlashing.constprop.0+0x88>
        }

        if (fr->frame_value >= 100) {
     93c:	06300693          	li	a3,99
     940:	00f6fd63          	bgeu	a3,a5,95a <Neo_render_colorFlashing.constprop.0+0xfe>
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     944:	47a2                	lw	a5,8(sp)
     946:	00444583          	lbu	a1,4(s0)
            fr->frame_value = 0;
     94a:	000484a3          	sb	zero,9(s1)
    ani->ref_index = (ani->ref_index + 1) % ani->num_colors;
     94e:	00178513          	addi	a0,a5,1
     952:	fbeff0ef          	jal	ra,110 <__modsi3>
     956:	00a402a3          	sb	a0,5(s0)

            animation_step(ani);
        }
    }

    return led_arr[ledIdx].packed;
     95a:	47c2                	lw	a5,16(sp)
}
     95c:	50e2                	lw	ra,56(sp)
     95e:	5452                	lw	s0,52(sp)
    return led_arr[ledIdx].packed;
     960:	00279513          	slli	a0,a5,0x2
     964:	f5818793          	addi	a5,gp,-168 # 20000354 <led_arr>
     968:	953e                	add	a0,a0,a5
}
     96a:	4108                	lw	a0,0(a0)
     96c:	54c2                	lw	s1,48(sp)
     96e:	03c10113          	addi	sp,sp,60
     972:	8082                	ret

00000974 <WS2812FillBuffSec.constprop.0>:
#define R16_SPI_TOTAL_CNT R16_SPI0_TOTAL_CNT
#define R8_SPI_INT_FLAG R8_SPI0_INT_FLAG
#endif
// This is the code that updates a portion of the WS2812dmabuff with new data.
// This effectively creates the bitstream that outputs to the LEDs.
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     974:	1111                	addi	sp,sp,-28
     976:	c826                	sw	s1,16(sp)
		0b1110111010001000, 0b1110111010001110, 0b1110111011101000, 0b1110111011101110, };
#endif

	int i;
	uint16_t * end = ptr + numhalfwords;
	int ledcount = WS2812LEDs;
     978:	c601a483          	lw	s1,-928(gp) # 2000005c <WS2812LEDs>
	int place = WS2812LEDPlace;
     97c:	c5c18713          	addi	a4,gp,-932 # 20000058 <WS2812LEDPlace>
     980:	4318                	lw	a4,0(a4)
     982:	c5c18693          	addi	a3,gp,-932 # 20000058 <WS2812LEDPlace>
static void WS2812FillBuffSec( uint16_t * ptr, int numhalfwords, int tce )
     986:	ca22                	sw	s0,20(sp)
     988:	cc06                	sw	ra,24(sp)
     98a:	87aa                	mv	a5,a0
     98c:	842e                	mv	s0,a1
	uint16_t * end = ptr + numhalfwords;
     98e:	03050613          	addi	a2,a0,48
     992:	c036                	sw	a3,0(sp)
		ptr += 8;
		place++;
	}

#else
	while( place < 0 && ptr != end )
     994:	04074863          	bltz	a4,9e4 <WS2812FillBuffSec.constprop.0+0x70>
		(*ptr++) = 0;
		place++;
	}
#endif

	while( ptr != end )
     998:	04f60863          	beq	a2,a5,9e8 <WS2812FillBuffSec.constprop.0+0x74>
	{
		if( place >= ledcount )
     99c:	04974d63          	blt	a4,s1,9f6 <WS2812FillBuffSec.constprop.0+0x82>
		{
			// Optionally, leave line high.
			while( ptr != end )
				(*ptr++) = 0;//0xffff;
     9a0:	8e1d                	sub	a2,a2,a5
     9a2:	4581                	li	a1,0
     9a4:	853e                	mv	a0,a5
     9a6:	c23a                	sw	a4,4(sp)
     9a8:	296d                	jal	e62 <memset>

			// Only safe to do this when we're on the second leg.
			if( tce )
     9aa:	4712                	lw	a4,4(sp)
     9ac:	cc15                	beqz	s0,9e8 <WS2812FillBuffSec.constprop.0+0x74>
			{
				if( place == ledcount )
     9ae:	00e49a63          	bne	s1,a4,9c2 <WS2812FillBuffSec.constprop.0+0x4e>
				{
					// Take the DMA out of circular mode and let it expire.
#if defined(CH57x) || defined(CH58x) || defined(CH59x)
					R8_SPI_INTER_EN &= ~RB_SPI_IE_DMA_END;  // Disable DMA end interrupt
#else
					DMA1_Channel3->CFGR &= ~DMA_Mode_Circular;
     9b2:	400206b7          	lui	a3,0x40020
     9b6:	5a9c                	lw	a5,48(a3)
     9b8:	fdf7f793          	andi	a5,a5,-33
     9bc:	da9c                	sw	a5,48(a3)
#endif
					WS2812BLEDInUse = 0;
     9be:	c401ac23          	sw	zero,-936(gp) # 20000054 <WS2812BLEDInUse>
				}
				place++;
     9c2:	0705                	addi	a4,a4,1
     9c4:	a015                	j	9e8 <WS2812FillBuffSec.constprop.0+0x74>
		(*ptr++) = 0;
     9c6:	00079023          	sh	zero,0(a5)
		(*ptr++) = 0;
     9ca:	00079123          	sh	zero,2(a5)
		(*ptr++) = 0;
     9ce:	00079223          	sh	zero,4(a5)
		(*ptr++) = 0;
     9d2:	00079323          	sh	zero,6(a5)
		(*ptr++) = 0;
     9d6:	00079423          	sh	zero,8(a5)
		place++;
     9da:	0705                	addi	a4,a4,1
     9dc:	07b1                	addi	a5,a5,12
		(*ptr++) = 0;
     9de:	fe079f23          	sh	zero,-2(a5)
     9e2:	bf4d                	j	994 <WS2812FillBuffSec.constprop.0+0x20>
	while( place < 0 && ptr != end )
     9e4:	fef611e3          	bne	a2,a5,9c6 <WS2812FillBuffSec.constprop.0+0x52>
		ptr += 6;
		i += 6;
#endif

	}
	WS2812LEDPlace = place;
     9e8:	4782                	lw	a5,0(sp)
}
     9ea:	40e2                	lw	ra,24(sp)
     9ec:	4452                	lw	s0,20(sp)
	WS2812LEDPlace = place;
     9ee:	c398                	sw	a4,0(a5)
}
     9f0:	44c2                	lw	s1,16(sp)
     9f2:	0171                	addi	sp,sp,28
     9f4:	8082                	ret
    color_ani.ref_index = 0;
    memset(led_arr, 0, sizeof(led_arr));
}

uint32_t WS2812BLEDCallback(int ledIdx){
    leds_frame.frame_duration = 70;
     9f6:	c1018513          	addi	a0,gp,-1008 # 2000000c <leds_frame>
     9fa:	04600313          	li	t1,70
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     9fe:	00170593          	addi	a1,a4,1
     a02:	00652223          	sw	t1,4(a0)
        case NEO_COLOR_FLASHING:
            leds_frame.frame_duration = 10;
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
            break;
        default:
            return Neo_render_colorFlashing(&leds_frame, &color_ani, ledIdx);
     a06:	853a                	mv	a0,a4
     a08:	c63e                	sw	a5,12(sp)
     a0a:	c432                	sw	a2,8(sp)
     a0c:	c22e                	sw	a1,4(sp)
     a0e:	35b9                	jal	85c <Neo_render_colorFlashing.constprop.0>
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     a10:	00b55313          	srli	t1,a0,0xb
     a14:	6709                	lui	a4,0x2
     a16:	ebc70713          	addi	a4,a4,-324 # 1ebc <bitquartets.7>
     a1a:	01e37313          	andi	t1,t1,30
     a1e:	933a                	add	t1,t1,a4
     a20:	47b2                	lw	a5,12(sp)
     a22:	00035303          	lhu	t1,0(t1)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     a26:	4592                	lw	a1,4(sp)
     a28:	4622                	lw	a2,8(sp)
		ptr[0] = bitquartets[(ledval24bit>>12)&0xf];
     a2a:	00679023          	sh	t1,0(a5)
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     a2e:	00755313          	srli	t1,a0,0x7
     a32:	01e37313          	andi	t1,t1,30
     a36:	933a                	add	t1,t1,a4
     a38:	00035303          	lhu	t1,0(t1)
		ptr += 6;
     a3c:	07b1                	addi	a5,a5,12
		ptr[1] = bitquartets[(ledval24bit>>8)&0xf];
     a3e:	fe679b23          	sh	t1,-10(a5)
		ptr[2] = bitquartets[(ledval24bit>>4)&0xf];
     a42:	00355313          	srli	t1,a0,0x3
     a46:	01e37313          	andi	t1,t1,30
     a4a:	933a                	add	t1,t1,a4
     a4c:	00035303          	lhu	t1,0(t1)
     a50:	fe679c23          	sh	t1,-8(a5)
		ptr[3] = bitquartets[(ledval24bit>>0)&0xf];
     a54:	00f57313          	andi	t1,a0,15
     a58:	0306                	slli	t1,t1,0x1
     a5a:	933a                	add	t1,t1,a4
     a5c:	00035303          	lhu	t1,0(t1)
     a60:	fe679d23          	sh	t1,-6(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     a64:	01355313          	srli	t1,a0,0x13
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     a68:	813d                	srli	a0,a0,0xf
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     a6a:	01e37313          	andi	t1,t1,30
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     a6e:	8979                	andi	a0,a0,30
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     a70:	933a                	add	t1,t1,a4
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     a72:	953a                	add	a0,a0,a4
     a74:	00055703          	lhu	a4,0(a0)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     a78:	00035303          	lhu	t1,0(t1)
		ptr[5] = bitquartets[(ledval24bit>>16)&0xf];
     a7c:	fee79f23          	sh	a4,-2(a5)
		ptr[4] = bitquartets[(ledval24bit>>20)&0xf];
     a80:	fe679e23          	sh	t1,-4(a5)
		uint32_t ledval24bit = WS2812BLEDCallback( place++ );
     a84:	872e                	mv	a4,a1
     a86:	bf09                	j	998 <WS2812FillBuffSec.constprop.0+0x24>

00000a88 <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     a88:	e00007b7          	lui	a5,0xe0000
     a8c:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
}
     a90:	8082                	ret

00000a92 <_write.constprop.0>:
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     a92:	e0000737          	lui	a4,0xe0000
     a96:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     a9a:	1111                	addi	sp,sp,-28
     a9c:	cc06                	sw	ra,24(sp)
     a9e:	ca22                	sw	s0,20(sp)
     aa0:	c826                	sw	s1,16(sp)
     aa2:	c02a                	sw	a0,0(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     aa4:	0c07f793          	andi	a5,a5,192
     aa8:	0c000693          	li	a3,192
     aac:	0cd78863          	beq	a5,a3,b7c <_write.constprop.0+0xea>
	char buffer[4] = { 0 };
     ab0:	c602                	sw	zero,12(sp)
     ab2:	842e                	mv	s0,a1
	if( size == 0 )
     ab4:	e5f1                	bnez	a1,b80 <_write.constprop.0+0xee>
		lastdmd = (*DMDATA0);
     ab6:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     aba:	c789                	beqz	a5,ac4 <_write.constprop.0+0x32>
     abc:	0807f793          	andi	a5,a5,128
     ac0:	e391                	bnez	a5,ac4 <_write.constprop.0+0x32>
     ac2:	37d9                	jal	a88 <internal_handle_input.constprop.0>
}
     ac4:	40e2                	lw	ra,24(sp)
     ac6:	8522                	mv	a0,s0
     ac8:	4452                	lw	s0,20(sp)
     aca:	44c2                	lw	s1,16(sp)
     acc:	0171                	addi	sp,sp,28
     ace:	8082                	ret
		int tosend = size - place;
     ad0:	409405b3          	sub	a1,s0,s1
     ad4:	469d                	li	a3,7
     ad6:	872e                	mv	a4,a1
     ad8:	00b6d363          	bge	a3,a1,ade <_write.constprop.0+0x4c>
     adc:	471d                	li	a4,7
     ade:	001006b7          	lui	a3,0x100
     ae2:	0685                	addi	a3,a3,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     ae4:	e0000537          	lui	a0,0xe0000
     ae8:	0f452603          	lw	a2,244(a0) # e00000f4 <_eusrstack+0xbffff8f4>
     aec:	0f450313          	addi	t1,a0,244
     af0:	08067293          	andi	t0,a2,128
     af4:	06029c63          	bnez	t0,b6c <_write.constprop.0+0xda>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     af8:	c611                	beqz	a2,b04 <_write.constprop.0+0x72>
     afa:	c43a                	sw	a4,8(sp)
     afc:	c22e                	sw	a1,4(sp)
     afe:	3769                	jal	a88 <internal_handle_input.constprop.0>
     b00:	4722                	lw	a4,8(sp)
     b02:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     b04:	4689                	li	a3,2
     b06:	4601                	li	a2,0
     b08:	00b6d463          	bge	a3,a1,b10 <_write.constprop.0+0x7e>
     b0c:	ffd70613          	addi	a2,a4,-3
     b10:	4782                	lw	a5,0(sp)
     b12:	00348593          	addi	a1,s1,3
     b16:	0068                	addi	a0,sp,12
     b18:	95be                	add	a1,a1,a5
     b1a:	c23a                	sw	a4,4(sp)
     b1c:	2ea1                	jal	e74 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     b1e:	4632                	lw	a2,12(sp)
     b20:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     b22:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     b24:	e00006b7          	lui	a3,0xe0000
     b28:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <_eusrstack+0xbffff8f8>
		while( t < tosend && t < 3 )
     b2c:	458d                	li	a1,3
     b2e:	00978633          	add	a2,a5,s1
		t = 0;
     b32:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     b34:	00064303          	lbu	t1,0(a2)
     b38:	0685                	addi	a3,a3,1
     b3a:	007c                	addi	a5,sp,12
     b3c:	00d78533          	add	a0,a5,a3
     b40:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     b44:	00d70563          	beq	a4,a3,b4e <_write.constprop.0+0xbc>
     b48:	0605                	addi	a2,a2,1
     b4a:	feb695e3          	bne	a3,a1,b34 <_write.constprop.0+0xa2>
		buffer[0] = 0x80 | (tosend + 4);
     b4e:	00470693          	addi	a3,a4,4
     b52:	f806e693          	ori	a3,a3,-128
     b56:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     b5a:	4632                	lw	a2,12(sp)
     b5c:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     b60:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     b62:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
     b66:	f684c5e3          	blt	s1,s0,ad0 <_write.constprop.0+0x3e>
     b6a:	bfa9                	j	ac4 <_write.constprop.0+0x32>
			if( timeout-- == 0 )
     b6c:	16fd                	addi	a3,a3,-1
     b6e:	fead                	bnez	a3,ae8 <_write.constprop.0+0x56>
				*DMDATA0 |= 0xc0;
     b70:	00032783          	lw	a5,0(t1)
     b74:	0c07e793          	ori	a5,a5,192
     b78:	00f32023          	sw	a5,0(t1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     b7c:	4401                	li	s0,0
     b7e:	b799                	j	ac4 <_write.constprop.0+0x32>
	if( size == 0 )
     b80:	4481                	li	s1,0
     b82:	b7d5                	j	b66 <_write.constprop.0+0xd4>

00000b84 <__puts_uart>:
{
     b84:	1151                	addi	sp,sp,-12
     b86:	c222                	sw	s0,4(sp)
     b88:	c406                	sw	ra,8(sp)
     b8a:	842e                	mv	s0,a1
	_write( 0, s, len );
     b8c:	3719                	jal	a92 <_write.constprop.0>
}
     b8e:	40a2                	lw	ra,8(sp)
     b90:	8522                	mv	a0,s0
     b92:	4412                	lw	s0,4(sp)
     b94:	0131                	addi	sp,sp,12
     b96:	8082                	ret

00000b98 <handle_reset>:
	asm volatile( "\n\
     b98:	20000197          	auipc	gp,0x20000
     b9c:	86418193          	addi	gp,gp,-1948 # 200003fc <__global_pointer$>
     ba0:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
     ba4:	6509                	lui	a0,0x2
     ba6:	88050513          	addi	a0,a0,-1920 # 1880 <main+0x96c>
     baa:	30051073          	csrw	mstatus,a0
     bae:	468d                	li	a3,3
     bb0:	fffff517          	auipc	a0,0xfffff
     bb4:	45050513          	addi	a0,a0,1104 # 0 <InterruptVector>
     bb8:	8d55                	or	a0,a0,a3
     bba:	30551073          	csrw	mtvec,a0
asm volatile(
     bbe:	c5418513          	addi	a0,gp,-940 # 20000050 <DC_PIN>
     bc2:	f7c18593          	addi	a1,gp,-132 # 20000378 <_ebss>
     bc6:	4601                	li	a2,0
     bc8:	00b55663          	bge	a0,a1,bd4 <handle_reset+0x3c>
     bcc:	c110                	sw	a2,0(a0)
     bce:	0511                	addi	a0,a0,4
     bd0:	feb54ee3          	blt	a0,a1,bcc <handle_reset+0x34>
     bd4:	00002517          	auipc	a0,0x2
     bd8:	84050513          	addi	a0,a0,-1984 # 2414 <_data_lma>
     bdc:	c0418593          	addi	a1,gp,-1020 # 20000000 <color_arr>
     be0:	1ffff617          	auipc	a2,0x1ffff
     be4:	47060613          	addi	a2,a2,1136 # 20000050 <DC_PIN>
     be8:	00c58863          	beq	a1,a2,bf8 <handle_reset+0x60>
     bec:	4114                	lw	a3,0(a0)
     bee:	c194                	sw	a3,0(a1)
     bf0:	0511                	addi	a0,a0,4
     bf2:	0591                	addi	a1,a1,4
     bf4:	fec59ae3          	bne	a1,a2,be8 <handle_reset+0x50>
	SysTick->CTLR = 5;
     bf8:	e000f7b7          	lui	a5,0xe000f
     bfc:	4715                	li	a4,5
     bfe:	c398                	sw	a4,0(a5)
asm volatile(
     c00:	6785                	lui	a5,0x1
     c02:	f1478793          	addi	a5,a5,-236 # f14 <main>
     c06:	34179073          	csrw	mepc,a5
     c0a:	30200073          	mret

00000c0e <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     c0e:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     c12:	dc0ff0ef          	jal	ra,1d2 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     c16:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
     c1a:	db8ff0ef          	jal	ra,1d2 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     c1e:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
     c22:	db0ff0ef          	jal	ra,1d2 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     c26:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
     c2a:	da8ff0ef          	jal	ra,1d2 <PrintHex>
	while( (*DMDATA0) & 0x80 );
     c2e:	e0000737          	lui	a4,0xe0000
     c32:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     c36:	0f470693          	addi	a3,a4,244
     c3a:	0807f793          	andi	a5,a5,128
     c3e:	fbf5                	bnez	a5,c32 <ADC1_2_IRQHandler+0x24>
	*DMDATA0 = 0x0a85;
     c40:	6785                	lui	a5,0x1
     c42:	a8578793          	addi	a5,a5,-1403 # a85 <WS2812FillBuffSec.constprop.0+0x111>
     c46:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
     c48:	e0000737          	lui	a4,0xe0000
     c4c:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
     c50:	0f470693          	addi	a3,a4,244
     c54:	0807f793          	andi	a5,a5,128
     c58:	fbf5                	bnez	a5,c4c <ADC1_2_IRQHandler+0x3e>
	*DMDATA0 = 0xaaaaaa83;
     c5a:	aaaab7b7          	lui	a5,0xaaaab
     c5e:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
     c62:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
     c64:	a001                	j	c64 <ADC1_2_IRQHandler+0x56>

00000c66 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     c66:	40021737          	lui	a4,0x40021
     c6a:	471c                	lw	a5,8(a4)
     c6c:	008006b7          	lui	a3,0x800
     c70:	8fd5                	or	a5,a5,a3
     c72:	c71c                	sw	a5,8(a4)

00000c74 <strlen>:
{
     c74:	87aa                	mv	a5,a0
	for (; *s; s++);
     c76:	0007c703          	lbu	a4,0(a5)
     c7a:	e701                	bnez	a4,c82 <strlen+0xe>
}
     c7c:	40a78533          	sub	a0,a5,a0
     c80:	8082                	ret
	for (; *s; s++);
     c82:	0785                	addi	a5,a5,1
     c84:	bfcd                	j	c76 <strlen+0x2>

00000c86 <mini_vpprintf>:
{
     c86:	fa410113          	addi	sp,sp,-92
     c8a:	c8a6                	sw	s1,80(sp)
     c8c:	cc86                	sw	ra,88(sp)
     c8e:	caa2                	sw	s0,84(sp)
     c90:	c02a                	sw	a0,0(sp)
     c92:	c22e                	sw	a1,4(sp)
     c94:	84b2                	mv	s1,a2
     c96:	87b6                	mv	a5,a3
	int n = 0;
     c98:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     c9a:	0004c703          	lbu	a4,0(s1)
     c9e:	00148413          	addi	s0,s1,1
     ca2:	00e10fa3          	sb	a4,31(sp)
     ca6:	eb01                	bnez	a4,cb6 <mini_vpprintf+0x30>
}
     ca8:	40e6                	lw	ra,88(sp)
     caa:	4456                	lw	s0,84(sp)
     cac:	4542                	lw	a0,16(sp)
     cae:	44c6                	lw	s1,80(sp)
     cb0:	05c10113          	addi	sp,sp,92
     cb4:	8082                	ret
		if (ch!='%') {
     cb6:	02500693          	li	a3,37
     cba:	00d70f63          	beq	a4,a3,cd8 <mini_vpprintf+0x52>
     cbe:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     cc0:	4612                	lw	a2,4(sp)
     cc2:	4782                	lw	a5,0(sp)
     cc4:	4585                	li	a1,1
     cc6:	01f10513          	addi	a0,sp,31
     cca:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     ccc:	84a2                	mv	s1,s0
		n = n + len;
     cce:	47c2                	lw	a5,16(sp)
     cd0:	97aa                	add	a5,a5,a0
     cd2:	c83e                	sw	a5,16(sp)
     cd4:	47a2                	lw	a5,8(sp)
     cd6:	b7d1                	j	c9a <mini_vpprintf+0x14>
			ch=*(fmt++);
     cd8:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     cdc:	03000613          	li	a2,48
			ch=*(fmt++);
     ce0:	00248713          	addi	a4,s1,2
     ce4:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     ce8:	03000413          	li	s0,48
     cec:	08c69063          	bne	a3,a2,d6c <mini_vpprintf+0xe6>
				ch=*(fmt++);
     cf0:	84ba                	mv	s1,a4
     cf2:	4601                	li	a2,0
     cf4:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     cf6:	4525                	li	a0,9
     cf8:	a811                	j	d0c <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     cfa:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     cfe:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     d00:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     d02:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     d06:	0706                	slli	a4,a4,0x1
     d08:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     d0a:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     d0c:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.d894f163+0x7f8ec2>
     d10:	0ff5f313          	andi	t1,a1,255
     d14:	fe6573e3          	bgeu	a0,t1,cfa <mini_vpprintf+0x74>
     d18:	c219                	beqz	a2,d1e <mini_vpprintf+0x98>
     d1a:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     d1e:	c63a                	sw	a4,12(sp)
     d20:	4661                	li	a2,24
     d22:	00e65363          	bge	a2,a4,d28 <mini_vpprintf+0xa2>
     d26:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     d28:	06c00593          	li	a1,108
			char l = 0;
     d2c:	4601                	li	a2,0
			if (ch == 'l') {
     d2e:	00b69863          	bne	a3,a1,d3e <mini_vpprintf+0xb8>
				ch=*(fmt++);
     d32:	0004c683          	lbu	a3,0(s1)
				l = 1;
     d36:	4605                	li	a2,1
				ch=*(fmt++);
     d38:	0485                	addi	s1,s1,1
     d3a:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     d3e:	01f14683          	lbu	a3,31(sp)
     d42:	06400593          	li	a1,100
     d46:	06b68363          	beq	a3,a1,dac <mini_vpprintf+0x126>
     d4a:	02d5e463          	bltu	a1,a3,d72 <mini_vpprintf+0xec>
     d4e:	05800713          	li	a4,88
     d52:	0ae68263          	beq	a3,a4,df6 <mini_vpprintf+0x170>
     d56:	06300713          	li	a4,99
     d5a:	0ce68063          	beq	a3,a4,e1a <mini_vpprintf+0x194>
     d5e:	d6a9                	beqz	a3,ca8 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     d60:	4612                	lw	a2,4(sp)
     d62:	c43e                	sw	a5,8(sp)
     d64:	4585                	li	a1,1
     d66:	01f10513          	addi	a0,sp,31
     d6a:	a88d                	j	ddc <mini_vpprintf+0x156>
			char pad_char = ' ';
     d6c:	02000413          	li	s0,32
     d70:	b741                	j	cf0 <mini_vpprintf+0x6a>
			switch (ch) {
     d72:	07500593          	li	a1,117
     d76:	02b68b63          	beq	a3,a1,dac <mini_vpprintf+0x126>
     d7a:	07800613          	li	a2,120
     d7e:	06c68c63          	beq	a3,a2,df6 <mini_vpprintf+0x170>
     d82:	07300613          	li	a2,115
     d86:	fcc69de3          	bne	a3,a2,d60 <mini_vpprintf+0xda>
     d8a:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     d8c:	00478713          	addi	a4,a5,4
     d90:	439c                	lw	a5,0(a5)
     d92:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     d94:	853e                	mv	a0,a5
     d96:	ca3e                	sw	a5,20(sp)
     d98:	3df1                	jal	c74 <strlen>
					if (pad_to > 0) {
     d9a:	4762                	lw	a4,24(sp)
     d9c:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     d9e:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     da0:	cb51                	beqz	a4,e34 <mini_vpprintf+0x1ae>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     da2:	46b2                	lw	a3,12(sp)
     da4:	1838                	addi	a4,sp,56
     da6:	8622                	mv	a2,s0
     da8:	853e                	mv	a0,a5
     daa:	a025                	j	dd2 <mini_vpprintf+0x14c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     dac:	00478713          	addi	a4,a5,4
     db0:	c43a                	sw	a4,8(sp)
					if(l) {
     db2:	ca05                	beqz	a2,de2 <mini_vpprintf+0x15c>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     db4:	f8b68693          	addi	a3,a3,-117
     db8:	1018                	addi	a4,sp,32
     dba:	0016b693          	seqz	a3,a3
     dbe:	4388                	lw	a0,0(a5)
     dc0:	4601                	li	a2,0
     dc2:	45a9                	li	a1,10
     dc4:	c7cff0ef          	jal	ra,240 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     dc8:	46b2                	lw	a3,12(sp)
     dca:	1838                	addi	a4,sp,56
     dcc:	8622                	mv	a2,s0
     dce:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     dd0:	1008                	addi	a0,sp,32
     dd2:	b64ff0ef          	jal	ra,136 <mini_pad>
					len = puts(bf, len, buf);
     dd6:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     dd8:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     dda:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     ddc:	4782                	lw	a5,0(sp)
     dde:	9782                	jalr	a5
					break;
     de0:	b5fd                	j	cce <mini_vpprintf+0x48>
						if(ch == 'u') {
     de2:	07500713          	li	a4,117
     de6:	00e69563          	bne	a3,a4,df0 <mini_vpprintf+0x16a>
	if (radix > 16)
     dea:	1018                	addi	a4,sp,32
     dec:	4685                	li	a3,1
     dee:	bfc1                	j	dbe <mini_vpprintf+0x138>
     df0:	1018                	addi	a4,sp,32
     df2:	4681                	li	a3,0
     df4:	b7e9                	j	dbe <mini_vpprintf+0x138>
					if(l) {
     df6:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     df8:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     dfc:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     e00:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     e02:	4685                	li	a3,1
     e04:	1018                	addi	a4,sp,32
     e06:	00163613          	seqz	a2,a2
     e0a:	45c1                	li	a1,16
     e0c:	c34ff0ef          	jal	ra,240 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     e10:	46b2                	lw	a3,12(sp)
     e12:	85aa                	mv	a1,a0
     e14:	1838                	addi	a4,sp,56
     e16:	8622                	mv	a2,s0
     e18:	bf65                	j	dd0 <mini_vpprintf+0x14a>
					ch = (char)(va_arg(va, int));
     e1a:	00478713          	addi	a4,a5,4
     e1e:	439c                	lw	a5,0(a5)
     e20:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     e22:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     e24:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     e28:	1838                	addi	a4,sp,56
     e2a:	8622                	mv	a2,s0
     e2c:	4585                	li	a1,1
     e2e:	01f10513          	addi	a0,sp,31
     e32:	b745                	j	dd2 <mini_vpprintf+0x14c>
						len = puts(ptr, len, buf);
     e34:	4612                	lw	a2,4(sp)
     e36:	853e                	mv	a0,a5
     e38:	b755                	j	ddc <mini_vpprintf+0x156>

00000e3a <printf>:
{
     e3a:	fdc10113          	addi	sp,sp,-36
     e3e:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     e40:	862a                	mv	a2,a0
     e42:	6505                	lui	a0,0x1
{
     e44:	c82e                	sw	a1,16(sp)
     e46:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     e48:	4581                	li	a1,0
	va_start( args, format );
     e4a:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     e4c:	b8450513          	addi	a0,a0,-1148 # b84 <__puts_uart>
{
     e50:	c606                	sw	ra,12(sp)
     e52:	ce3a                	sw	a4,28(sp)
     e54:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     e56:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     e58:	353d                	jal	c86 <mini_vpprintf>
}
     e5a:	40b2                	lw	ra,12(sp)
     e5c:	02410113          	addi	sp,sp,36
     e60:	8082                	ret

00000e62 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     e62:	962a                	add	a2,a2,a0
     e64:	87aa                	mv	a5,a0
     e66:	00c79363          	bne	a5,a2,e6c <memset+0xa>
     e6a:	8082                	ret
     e6c:	00b78023          	sb	a1,0(a5)
     e70:	0785                	addi	a5,a5,1
     e72:	bfd5                	j	e66 <memset+0x4>

00000e74 <memcpy>:
{
     e74:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     e76:	00f61363          	bne	a2,a5,e7c <memcpy+0x8>
}
     e7a:	8082                	ret
	for (; n; n--) *d++ = *s++;
     e7c:	00f58733          	add	a4,a1,a5
     e80:	00074683          	lbu	a3,0(a4) # 40021000 <_eusrstack+0x20020800>
     e84:	00f50733          	add	a4,a0,a5
     e88:	0785                	addi	a5,a5,1
     e8a:	00d70023          	sb	a3,0(a4)
     e8e:	b7e5                	j	e76 <memcpy+0x2>

00000e90 <puts>:
{
     e90:	1151                	addi	sp,sp,-12
     e92:	c406                	sw	ra,8(sp)
     e94:	c222                	sw	s0,4(sp)
     e96:	c026                	sw	s1,0(sp)
     e98:	84aa                	mv	s1,a0
	int sl = strlen( s );
     e9a:	3be9                	jal	c74 <strlen>
     e9c:	842a                	mv	s0,a0
	_write(0, s, sl );
     e9e:	85aa                	mv	a1,a0
     ea0:	8526                	mv	a0,s1
     ea2:	3ec5                	jal	a92 <_write.constprop.0>
	_write(0, "\n", 1 );
     ea4:	6509                	lui	a0,0x2
     ea6:	4585                	li	a1,1
     ea8:	d4450513          	addi	a0,a0,-700 # 1d44 <DMA1_Channel3_IRQHandler+0x80>
     eac:	36dd                	jal	a92 <_write.constprop.0>
}
     eae:	40a2                	lw	ra,8(sp)
     eb0:	00140513          	addi	a0,s0,1
     eb4:	4412                	lw	s0,4(sp)
     eb6:	4482                	lw	s1,0(sp)
     eb8:	0131                	addi	sp,sp,12
     eba:	8082                	ret

00000ebc <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
     ebc:	400227b7          	lui	a5,0x40022
     ec0:	4705                	li	a4,1
     ec2:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
     ec4:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     ec8:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
     ecc:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     ed0:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.d894f163+0x1078f73>
     ed4:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
     ed6:	009f0737          	lui	a4,0x9f0
     eda:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
     edc:	020006b7          	lui	a3,0x2000
     ee0:	40021737          	lui	a4,0x40021
     ee4:	431c                	lw	a5,0(a4)
     ee6:	8ff5                	and	a5,a5,a3
     ee8:	dff5                	beqz	a5,ee4 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     eea:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     eec:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     ef0:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
     ef2:	0027e793          	ori	a5,a5,2
     ef6:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     ef8:	4721                	li	a4,8
     efa:	42dc                	lw	a5,4(a3)
     efc:	8bb1                	andi	a5,a5,12
     efe:	fee79ee3          	bne	a5,a4,efa <SystemInit+0x3e>
	*DMDATA1 = 0x00;
     f02:	e00007b7          	lui	a5,0xe0000
     f06:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
     f0a:	08000713          	li	a4,128
     f0e:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     f12:	8082                	ret

00000f14 <main>:
//# 	*BTN*		PC0 - [ 				] - PC1		*SDA*


volatile uint8_t i2c_registers[32] = {0xaa};

int main() {
     f14:	f5c10113          	addi	sp,sp,-164
     f18:	cf22                	sw	s0,156(sp)
     f1a:	d106                	sw	ra,160(sp)
     f1c:	1140                	addi	s0,sp,164
     f1e:	cd26                	sw	s1,152(sp)
	SystemInit();
     f20:	3f71                	jal	ebc <SystemInit>
	return;
}


uint16_t fun_optionByte_getValue() {
    uint8_t data0 = OB->Data0;
     f22:	200006b7          	lui	a3,0x20000
     f26:	8046d583          	lhu	a1,-2044(a3) # 1ffff804 <lib_i2c.c.d894f163+0x1fff86f6>
    uint8_t data1 = OB->Data1;
     f2a:	8066d783          	lhu	a5,-2042(a3)
    uint8_t data0 = OB->Data0;
     f2e:	80068713          	addi	a4,a3,-2048
    return data0 + (data1 << 8);
     f32:	0ff5f593          	andi	a1,a1,255
    uint8_t data1 = OB->Data1;
     f36:	07c2                	slli	a5,a5,0x10
     f38:	83c1                	srli	a5,a5,0x10
    return data0 + (data1 << 8);
     f3a:	07a2                	slli	a5,a5,0x8
     f3c:	8ddd                	or	a1,a1,a5

	uint16_t bootCnt = fun_optionByte_getValue();
	bootCnt++;
     f3e:	0585                	addi	a1,a1,1
	hold32p[0]=ob32p[0]; 			// Copy RDPR and USER
     f40:	8006a783          	lw	a5,-2048(a3)
     f44:	05c2                	slli	a1,a1,0x10
     f46:	81c1                	srli	a1,a1,0x10
     f48:	faf42823          	sw	a5,-80(s0)
	hold32p[1]=(uint32_t)data;	    // Copy in the two Data values to be written
     f4c:	fab42a23          	sw	a1,-76(s0)
	hold32p[2]=ob32p[2];			// Copy WRPR0 and WEPR1
     f50:	471c                	lw	a5,8(a4)
	FLASH->KEYR = FLASH_KEY1;
     f52:	456706b7          	lui	a3,0x45670
     f56:	12368693          	addi	a3,a3,291 # 45670123 <_eusrstack+0x2566f923>
	hold32p[2]=ob32p[2];			// Copy WRPR0 and WEPR1
     f5a:	faf42c23          	sw	a5,-72(s0)
	FLASH->KEYR = FLASH_KEY2;
     f5e:	cdef9737          	lui	a4,0xcdef9
	FLASH->KEYR = FLASH_KEY1;
     f62:	400227b7          	lui	a5,0x40022
     f66:	c3d4                	sw	a3,4(a5)
	FLASH->KEYR = FLASH_KEY2;
     f68:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef81ab>
     f6c:	c3d8                	sw	a4,4(a5)
	FLASH->OBKEYR = FLASH_KEY1;
     f6e:	c794                	sw	a3,8(a5)
	FLASH->OBKEYR = FLASH_KEY2;
     f70:	c798                	sw	a4,8(a5)
	FLASH->CTLR |= CR_OPTER_Set;			// OBER RW Perform user-selected word erasure	
     f72:	4b98                	lw	a4,16(a5)
     f74:	02076713          	ori	a4,a4,32
     f78:	cb98                	sw	a4,16(a5)
	FLASH->CTLR |= CR_STRT_Set;    			// STRT RW1 Start. Set 1 to start an erase action,hw automatically clears to 0
     f7a:	4b98                	lw	a4,16(a5)
     f7c:	04076713          	ori	a4,a4,64
     f80:	cb98                	sw	a4,16(a5)
	while (FLASH->STATR & FLASH_BUSY);		// Wait for flash operation to be done
     f82:	47d8                	lw	a4,12(a5)
     f84:	8b05                	andi	a4,a4,1
     f86:	ff75                	bnez	a4,f82 <main+0x6e>
	FLASH->CTLR &= CR_OPTER_Reset; 			// Disable erasure mode	
     f88:	4b98                	lw	a4,16(a5)
		ob16p[i]=hold[i];
     f8a:	20000537          	lui	a0,0x20000
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
     f8e:	4619                	li	a2,6
	FLASH->CTLR &= CR_OPTER_Reset; 			// Disable erasure mode	
     f90:	fdf77713          	andi	a4,a4,-33
     f94:	cb98                	sw	a4,16(a5)
	FLASH->CTLR |= CR_OPTPG_Set;   			// OBG  RW Perform user-selected word programming
     f96:	4b98                	lw	a4,16(a5)
     f98:	01076713          	ori	a4,a4,16
     f9c:	cb98                	sw	a4,16(a5)
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
     f9e:	4701                	li	a4,0
		while (FLASH->STATR & FLASH_BUSY);	// Wait for flash operation to be done
     fa0:	400227b7          	lui	a5,0x40022
		ob16p[i]=hold[i];
     fa4:	00171693          	slli	a3,a4,0x1
     fa8:	ff440493          	addi	s1,s0,-12
     fac:	00d48333          	add	t1,s1,a3
     fb0:	fbc35303          	lhu	t1,-68(t1)
     fb4:	96aa                	add	a3,a3,a0
     fb6:	80669023          	sh	t1,-2048(a3)
		while (FLASH->STATR & FLASH_BUSY);	// Wait for flash operation to be done
     fba:	47d4                	lw	a3,12(a5)
     fbc:	8a85                	andi	a3,a3,1
     fbe:	fef5                	bnez	a3,fba <main+0xa6>
	for (int i=0;i<sizeof(hold)/sizeof(hold[0]); i++) {
     fc0:	0705                	addi	a4,a4,1
     fc2:	fec711e3          	bne	a4,a2,fa4 <main+0x90>
	FLASH->CTLR &= CR_OPTPG_Reset;			// Disable programming mode
     fc6:	4b98                	lw	a4,16(a5)
	fun_optionByte_store(bootCnt);
	printf("Boot Count: %d\n", bootCnt);
     fc8:	6509                	lui	a0,0x2
     fca:	d4850513          	addi	a0,a0,-696 # 1d48 <DMA1_Channel3_IRQHandler+0x84>
     fce:	9b3d                	andi	a4,a4,-17
     fd0:	cb98                	sw	a4,16(a5)
	FLASH->CTLR|=CR_LOCK_Set;				// Lock flash memories again
     fd2:	4b98                	lw	a4,16(a5)

	systick_init();			//! required for millis()
	funGpioInitAll();
     fd4:	400214b7          	lui	s1,0x40021
     fd8:	08076713          	ori	a4,a4,128
     fdc:	cb98                	sw	a4,16(a5)
	printf("Boot Count: %d\n", bootCnt);
     fde:	3db1                	jal	e3a <printf>
* its clock source
*/
void systick_init(void)
{
	// Reset any pre-existing configuration
	SysTick->CTLR = 0x0000;
     fe0:	e000f7b7          	lui	a5,0xe000f
	
	// Set the compare register to trigger once per millisecond
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     fe4:	6731                	lui	a4,0xc
	SysTick->CTLR = 0x0000;
     fe6:	0007a023          	sw	zero,0(a5) # e000f000 <_eusrstack+0xc000e800>
	SysTick->CMP = SYSTICK_ONE_MILLISECOND - 1;
     fea:	b7f70713          	addi	a4,a4,-1153 # bb7f <lib_i2c.c.d894f163+0x4a71>
     fee:	cb98                	sw	a4,16(a5)

	// Reset the Count Register, and the global millis counter to 0
	SysTick->CNT = 0x00000000;
     ff0:	0007a423          	sw	zero,8(a5)
	systick_millis = 0x00000000;
     ff4:	c7018693          	addi	a3,gp,-912 # 2000006c <systick_millis>
     ff8:	0006a023          	sw	zero,0(a3)
	
	// Set the SysTick Configuration
	// NOTE: By not setting SYSTICK_CTLR_STRE, we maintain compatibility with
	// busywait delay funtions used by ch32v003_fun.
	SysTick->CTLR |= SYSTICK_CTLR_STE   |  // Enable Counter
     ffc:	4398                	lw	a4,0(a5)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
     ffe:	e000e2b7          	lui	t0,0xe000e
    1002:	6605                	lui	a2,0x1
    1004:	00776713          	ori	a4,a4,7
    1008:	c398                	sw	a4,0(a5)
    100a:	10c2a023          	sw	a2,256(t0) # e000e100 <_eusrstack+0xc000d900>
	funGpioInitAll();
    100e:	4c9c                	lw	a5,24(s1)
	Delay_Ms(10);
    1010:	00075537          	lui	a0,0x75
    1014:	30050513          	addi	a0,a0,768 # 75300 <lib_i2c.c.d894f163+0x6e1f2>
	funGpioInitAll();
    1018:	0357e793          	ori	a5,a5,53
    101c:	cc9c                	sw	a5,24(s1)
	Delay_Ms(10);
    101e:	a0cff0ef          	jal	ra,22a <DelaySysTick>
    model->btn_state = BUTTON_IDLE;
    model->debounce_time = 0;
    model->release_time = 0;
    model->press_time = 0;

    funPinMode(model->pin, GPIO_CFGLR_IN_PUPD);
    1022:	400117b7          	lui	a5,0x40011
    1026:	4398                	lw	a4,0(a5)
{
	// Enable UART and GPIOD
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_USART1;

	// Push-Pull, 10MHz Output on D5, with AutoFunction
	GPIOD->CFGLR = (GPIOD->CFGLR & ~(0xF<<(4*5))) |
    1028:	ff1005b7          	lui	a1,0xff100
    102c:	15fd                	addi	a1,a1,-1
    102e:	9b41                	andi	a4,a4,-16
    1030:	00876713          	ori	a4,a4,8
    1034:	c398                	sw	a4,0(a5)
    funDigitalWrite(model->pin, 1);
    1036:	4705                	li	a4,1
    1038:	cb98                	sw	a4,16(a5)
    model->debounce_time = millis();
    103a:	c7018693          	addi	a3,gp,-912 # 2000006c <systick_millis>
    103e:	4298                	lw	a4,0(a3)
			((GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF)<<(4*5));

	// Setup UART for Tx 8n1
	USART1->CTLR1 = USART_WordLength_8b | USART_Parity_No | USART_Mode_Tx;
    1040:	43a1                	li	t2,8
	USART1->CTLR2 = USART_StopBits_1;
	// Enable Tx DMA event
	USART1->CTLR3 = USART_DMAReq_Tx;
    1042:	08000513          	li	a0,128
    1046:	fae42223          	sw	a4,-92(s0)
    model->release_time = millis();
    104a:	4298                	lw	a4,0(a3)
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_USART1;
    104c:	6691                	lui	a3,0x4
    104e:	02068693          	addi	a3,a3,32 # 4020 <ch32_mess.c.c30defdd+0x61e>
    1052:	f8e42e23          	sw	a4,-100(s0)
	//# Button: uses PC0
	Button_t button1 = { .pin = BUTTON_PIN };
	fun_button_setup(&button1);

	//# Hold BUTTON_PIN low to enter slave mode
	uint8_t i2cMaster_mode = funDigitalRead(BUTTON_PIN);
    1056:	4798                	lw	a4,8(a5)
    1058:	4c98                	lw	a4,24(s1)

	// Set baud rate and enable UART
	USART1->BRR = ((FUNCONF_SYSTEM_CORE_CLOCK) + (UART_BR)/2) / (UART_BR);
	USART1->CTLR1 |= CTLR1_UE_Set;
    105a:	6089                	lui	ra,0x2
    105c:	e000e2b7          	lui	t0,0xe000e
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_USART1;
    1060:	8f55                	or	a4,a4,a3
    1062:	cc98                	sw	a4,24(s1)
	GPIOD->CFGLR = (GPIOD->CFGLR & ~(0xF<<(4*5))) |
    1064:	40078713          	addi	a4,a5,1024 # 40011400 <_eusrstack+0x20010c00>
    1068:	4314                	lw	a3,0(a4)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM1_REMAP_NOREMAP;
	
	TIM_TypeDef* timer = model->TIM;
	
	if (timer == TIM1) {
		RCC->APB2PCENR |= RCC_APB2Periph_TIM1;
    106a:	6605                	lui	a2,0x1
    106c:	80060613          	addi	a2,a2,-2048 # 800 <tft_draw_rect+0x48>
    1070:	8eed                	and	a3,a3,a1
    1072:	009005b7          	lui	a1,0x900
    1076:	8ecd                	or	a3,a3,a1
	USART1->CTLR1 = USART_WordLength_8b | USART_Parity_No | USART_Mode_Tx;
    1078:	400145b7          	lui	a1,0x40014
	GPIOD->CFGLR = (GPIOD->CFGLR & ~(0xF<<(4*5))) |
    107c:	c314                	sw	a3,0(a4)
	USART1->CTLR1 = USART_WordLength_8b | USART_Parity_No | USART_Mode_Tx;
    107e:	80058693          	addi	a3,a1,-2048 # 40013800 <_eusrstack+0x20013000>
    1082:	0076a623          	sw	t2,12(a3)
	USART1->CTLR2 = USART_StopBits_1;
    1086:	0006a823          	sw	zero,16(a3)
	USART1->CTLR3 = USART_DMAReq_Tx;
    108a:	cac8                	sw	a0,20(a3)
	USART1->BRR = ((FUNCONF_SYSTEM_CORE_CLOCK) + (UART_BR)/2) / (UART_BR);
    108c:	1a100513          	li	a0,417
    1090:	c688                	sw	a0,8(a3)
	USART1->CTLR1 |= CTLR1_UE_Set;
    1092:	46c8                	lw	a0,12(a3)

	// Disable channel just in case there is a transfer in progress
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;

	// USART1 TX uses DMA channel 4
	DMA1_Channel4->PADDR = (uint32_t)&USART1->DATAR;
    1094:	80458593          	addi	a1,a1,-2044
	// GPIOA->CFGLR &= ~(0xf<<(4*0));	// PA1 Analog input Chan1
	// GPIOA->CFGLR &= ~(0xf<<(4*1));	// PA2 Analog input Chan0

    int chanA = 0;
    int chanB = 1;
    GPIOA->CFGLR &= ~(0xf<<(4*0));
    1098:	80078793          	addi	a5,a5,-2048
	USART1->CTLR1 |= CTLR1_UE_Set;
    109c:	00156533          	or	a0,a0,ra
    10a0:	c6c8                	sw	a0,12(a3)
	RCC->AHBPCENR = RCC_AHBPeriph_SRAM | RCC_AHBPeriph_DMA1;
    10a2:	4695                	li	a3,5
    10a4:	c8d4                	sw	a3,20(s1)
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
    10a6:	400206b7          	lui	a3,0x40020
    10aa:	42e8                	lw	a0,68(a3)
    10ac:	9979                	andi	a0,a0,-2
    10ae:	c2e8                	sw	a0,68(a3)
	DMA1_Channel4->PADDR = (uint32_t)&USART1->DATAR;
    10b0:	c6ec                	sw	a1,76(a3)
	// DIR: 1 (read from memory)
	// TEIE: 0 (no tx error interrupt)
	// HTIE: 0 (no half tx interrupt)
	// TCIE: 1 (transmission complete interrupt enable)
	// EN: 0 (do not enable DMA yet)
	DMA1_Channel4->CFGR = DMA_CFGR1_MINC | DMA_CFGR1_DIR | DMA_CFGR1_TCIE;
    10b2:	09200593          	li	a1,146
    10b6:	c2ec                	sw	a1,68(a3)
    10b8:	020006b7          	lui	a3,0x2000
    10bc:	10d2a023          	sw	a3,256(t0) # e000e100 <_eusrstack+0xc000d900>
	AFIO->PCFR1 |= AFIO_PCFR1_TIM1_REMAP_NOREMAP;
    10c0:	400105b7          	lui	a1,0x40010
    10c4:	41d4                	lw	a3,4(a1)

		// Reset TIM1 to init all regs
		RCC->APB2PRSTR |= RCC_APB2Periph_TIM1;
		RCC->APB2PRSTR &= ~RCC_APB2Periph_TIM1;
		
		timer->BDTR |= TIM_MOE;			// Enable TIM1 outputs
    10c6:	400132b7          	lui	t0,0x40013
    10ca:	6521                	lui	a0,0x8
	AFIO->PCFR1 |= AFIO_PCFR1_TIM1_REMAP_NOREMAP;
    10cc:	c1d4                	sw	a3,4(a1)
		RCC->APB2PCENR |= RCC_APB2Periph_TIM1;
    10ce:	4c94                	lw	a3,24(s1)
    10d0:	8ed1                	or	a3,a3,a2
    10d2:	cc94                	sw	a3,24(s1)
		RCC->APB2PRSTR |= RCC_APB2Periph_TIM1;
    10d4:	44d4                	lw	a3,12(s1)
    10d6:	8e55                	or	a2,a2,a3
    10d8:	c4d0                	sw	a2,12(s1)
		RCC->APB2PRSTR &= ~RCC_APB2Periph_TIM1;
    10da:	44d4                	lw	a3,12(s1)
    10dc:	767d                	lui	a2,0xfffff
    10de:	7ff60613          	addi	a2,a2,2047 # fffff7ff <_eusrstack+0xdfffefff>
    10e2:	8ef1                	and	a3,a3,a2
    10e4:	c4d4                	sw	a3,12(s1)
		timer->BDTR |= TIM_MOE;			// Enable TIM1 outputs
    10e6:	c442d603          	lhu	a2,-956(t0) # 40012c44 <_eusrstack+0x20012444>
    10ea:	c0028693          	addi	a3,t0,-1024
    10ee:	0642                	slli	a2,a2,0x10
    10f0:	8241                	srli	a2,a2,0x10
    10f2:	8e49                	or	a2,a2,a0
    10f4:	c4c29223          	sh	a2,-956(t0)
		RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
	}

	// CTLR1: default is up, events generated, edge align
	// SMCFGR: default clk input is CK_INT
	timer->PSC = 0x0000;			// Prescaler 
    10f8:	c2029423          	sh	zero,-984(t0)
	timer->ATRLR = 255;				// Auto Reload - sets period
    10fc:	0ff00613          	li	a2,255
    1100:	c2c29623          	sh	a2,-980(t0)

	timer->SWEVGR |= TIM_UG;		// Reload immediately
    1104:	c142d503          	lhu	a0,-1004(t0)
    1108:	0542                	slli	a0,a0,0x10
    110a:	8141                	srli	a0,a0,0x10
    110c:	00156513          	ori	a0,a0,1
    1110:	c0a29a23          	sh	a0,-1004(t0)
	timer->CTLR1 |= TIM_CEN;		// Enable timer
    1114:	c002d503          	lhu	a0,-1024(t0)
    1118:	0542                	slli	a0,a0,0x10
    111a:	8141                	srli	a0,a0,0x10
    111c:	00156513          	ori	a0,a0,1
    1120:	c0a29023          	sh	a0,-1024(t0)
}

void fun_timPWM_reload(TIM_PWM_t* model) {
	model->counter = 0;
	model->timeRef = 0;
	funPinMode(model->pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF);
    1124:	4308                	lw	a0,0(a4)
    1126:	9941                	andi	a0,a0,-16
    1128:	00956513          	ori	a0,a0,9
    112c:	c308                	sw	a0,0(a4)
	TIM_TypeDef* timer = model->TIM;

	// default value
	timer->CH1CVR = 255;
    112e:	dad0                	sw	a2,52(a3)
	timer->CH2CVR = 255;
    1130:	de90                	sw	a2,56(a3)
	timer->CH3CVR = 255;
    1132:	ded0                	sw	a2,60(a3)
	timer->CH4CVR = 255;
    1134:	c2b0                	sw	a2,64(a3)
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1 | TIM_OC1PE;		// TIM_OC1PE is used by TIM2 only
			timer->CCER |= TIM_CC1E | TIM_CC1P;
			model->channel = 1;
			break;
		case TIM_CC1NE:
			timer->CHCTLR1 |= TIM_OC1M_2 | TIM_OC1M_1;
    1136:	c182d603          	lhu	a2,-1000(t0)
    113a:	0642                	slli	a2,a2,0x10
    113c:	8241                	srli	a2,a2,0x10
    113e:	06066613          	ori	a2,a2,96
    1142:	c0c29c23          	sh	a2,-1000(t0)
			timer->CCER |= TIM_CC1NE | TIM_CC1NP;
    1146:	c202d603          	lhu	a2,-992(t0)
    114a:	0642                	slli	a2,a2,0x10
    114c:	8241                	srli	a2,a2,0x10
    114e:	00c66613          	ori	a2,a2,12
    1152:	c2c29023          	sh	a2,-992(t0)
		D5		T2CH4_		//! UART_RX
*/

//! Expected funGpioInitAll() before init
void fun_encoder_setup(Encoder_t *model) {
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    1156:	4cd4                	lw	a3,28(s1)

	//! TIM2 remap mode
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;

	funPinMode(PD3, GPIO_CFGLR_IN_PUPD);
    1158:	7645                	lui	a2,0xffff1
    115a:	167d                	addi	a2,a2,-1
	RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
    115c:	0016e693          	ori	a3,a3,1
    1160:	ccd4                	sw	a3,28(s1)
	AFIO->PCFR1 |= AFIO_PCFR1_TIM2_REMAP_NOREMAP;
    1162:	41d4                	lw	a3,4(a1)
    1164:	c1d4                	sw	a3,4(a1)
	funPinMode(PD3, GPIO_CFGLR_IN_PUPD);
    1166:	4314                	lw	a3,0(a4)
    1168:	8ef1                	and	a3,a3,a2
    116a:	6621                	lui	a2,0x8
    116c:	8ed1                	or	a3,a3,a2
    116e:	c314                	sw	a3,0(a4)
	funPinMode(PD4, GPIO_CFGLR_IN_PUPD);
    1170:	4314                	lw	a3,0(a4)
    1172:	fff10637          	lui	a2,0xfff10
    1176:	167d                	addi	a2,a2,-1
    1178:	8ef1                	and	a3,a3,a2
    117a:	00080637          	lui	a2,0x80
    117e:	8ed1                	or	a3,a3,a2
    1180:	c314                	sw	a3,0(a4)
	funDigitalWrite(PD3, 1);
    1182:	00772823          	sw	t2,16(a4)
	funDigitalWrite(PD4, 1);
    1186:	46c1                	li	a3,16
    1188:	cb14                	sw	a3,16(a4)

	//! Reset TIM2 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
    118a:	4898                	lw	a4,16(s1)
    118c:	00176713          	ori	a4,a4,1
    1190:	c898                	sw	a4,16(s1)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
    1192:	4898                	lw	a4,16(s1)
    1194:	9b79                	andi	a4,a4,-2
    1196:	c898                	sw	a4,16(s1)
	// //# added
	// #define TIM2_DEFAULT 0xff
	// TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3PE;	// CH3

	// SMCFGR: set encoder mode SMS=011b
	TIM2->SMCFGR |= TIM_EncoderMode_TI12;
    1198:	40000737          	lui	a4,0x40000
    119c:	00875683          	lhu	a3,8(a4) # 40000008 <_eusrstack+0x1ffff808>
    11a0:	06c2                	slli	a3,a3,0x10
    11a2:	82c1                	srli	a3,a3,0x10
    11a4:	0036e693          	ori	a3,a3,3
    11a8:	00d71423          	sh	a3,8(a4)

	// set count to about mid-scale to avoid wrap-around
	TIM2->CNT = 0x8fff;
    11ac:	76e5                	lui	a3,0xffff9
    11ae:	16fd                	addi	a3,a3,-1
    11b0:	02d71223          	sh	a3,36(a4)

	// //# added
	// TIM2->CTLR1 |= TIM_ARPE;								// enable auto-reload of preload
	// TIM2->CCER |= TIM_CC3E | (TIM_CC3P & TIM2_DEFAULT);		// CH3

	TIM2->SWEVGR |= TIM_UG;			// initialize timer
    11b4:	01475683          	lhu	a3,20(a4)
    11b8:	06c2                	slli	a3,a3,0x10
    11ba:	82c1                	srli	a3,a3,0x10
    11bc:	0016e693          	ori	a3,a3,1
    11c0:	00d71a23          	sh	a3,20(a4)
	TIM2->CTLR1 |= TIM_CEN;			// TIM2 Counter Enable
    11c4:	00075683          	lhu	a3,0(a4)
    11c8:	06c2                	slli	a3,a3,0x10
    11ca:	82c1                	srli	a3,a3,0x10
    11cc:	0016e693          	ori	a3,a3,1
    11d0:	00d71023          	sh	a3,0(a4)

	model->initial_count = TIM2->CNT;
    11d4:	02475683          	lhu	a3,36(a4)
	model->last_count = TIM2->CNT;
    11d8:	02475703          	lhu	a4,36(a4)
	RCC->CFGR0 &= ~(0x1F<<11);
    11dc:	76c1                	lui	a3,0xffff0
    11de:	7ff68693          	addi	a3,a3,2047 # ffff07ff <_eusrstack+0xdffeffff>
    11e2:	0742                	slli	a4,a4,0x10
    11e4:	8341                	srli	a4,a4,0x10
    11e6:	f6e42a23          	sw	a4,-140(s0)
    11ea:	40d8                	lw	a4,4(s1)
    11ec:	8f75                	and	a4,a4,a3
    11ee:	c0d8                	sw	a4,4(s1)
	RCC->APB2PCENR |= RCC_APB2Periph_ADC1;
    11f0:	4c98                	lw	a4,24(s1)
    // turn on ADC
	ADC1->CTLR2 |= ADC_ADON;
	
	// Reset and calibrate
	ADC1->CTLR2 |= ADC_RSTCAL;
	while(ADC1->CTLR2 & ADC_RSTCAL);
    11f2:	400126b7          	lui	a3,0x40012
	RCC->APB2PCENR |= RCC_APB2Periph_ADC1;
    11f6:	20076713          	ori	a4,a4,512
    11fa:	cc98                	sw	a4,24(s1)
    GPIOA->CFGLR &= ~(0xf<<(4*0));
    11fc:	4398                	lw	a4,0(a5)
    11fe:	9b41                	andi	a4,a4,-16
    1200:	c398                	sw	a4,0(a5)
    GPIOA->CFGLR &= ~(0xf<<(4*1));
    1202:	4398                	lw	a4,0(a5)
    1204:	f0f77713          	andi	a4,a4,-241
    1208:	c398                	sw	a4,0(a5)
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    120a:	44dc                	lw	a5,12(s1)
	ADC1->RSQR1 = (ADC_NUMCHLS-1) << 20;	// four chls in the sequence
    120c:	00100737          	lui	a4,0x100
	RCC->APB2PRSTR |= RCC_APB2Periph_ADC1;
    1210:	2007e793          	ori	a5,a5,512
    1214:	c4dc                	sw	a5,12(s1)
	RCC->APB2PRSTR &= ~RCC_APB2Periph_ADC1;
    1216:	44dc                	lw	a5,12(s1)
    1218:	dff7f793          	andi	a5,a5,-513
    121c:	c4dc                	sw	a5,12(s1)
	ADC1->RSQR1 = (ADC_NUMCHLS-1) << 20;	// four chls in the sequence
    121e:	400127b7          	lui	a5,0x40012
    1222:	40078793          	addi	a5,a5,1024 # 40012400 <_eusrstack+0x20011c00>
    1226:	d7d8                	sw	a4,44(a5)
	ADC1->RSQR2 = 0;
    1228:	0207a823          	sw	zero,48(a5)
    ADC1->RSQR3 = (chanA<<(5*0)) | (chanB<<(5*1));
    122c:	02000713          	li	a4,32
    1230:	dbd8                	sw	a4,52(a5)
    ADC1->SAMPTR2 = (7<<(3*chanA)) | (7<<(3*chanB));
    1232:	03f00713          	li	a4,63
    1236:	cb98                	sw	a4,16(a5)
	ADC1->CTLR2 |= ADC_ADON;
    1238:	4798                	lw	a4,8(a5)
    123a:	00176713          	ori	a4,a4,1
    123e:	c798                	sw	a4,8(a5)
	ADC1->CTLR2 |= ADC_RSTCAL;
    1240:	4798                	lw	a4,8(a5)
    1242:	00876713          	ori	a4,a4,8
    1246:	c798                	sw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_RSTCAL);
    1248:	c7018793          	addi	a5,gp,-912 # 2000006c <systick_millis>
    124c:	faf42623          	sw	a5,-84(s0)
    1250:	40068793          	addi	a5,a3,1024 # 40012400 <_eusrstack+0x20011c00>
    1254:	4798                	lw	a4,8(a5)
    1256:	8b21                	andi	a4,a4,8
    1258:	ff65                	bnez	a4,1250 <main+0x33c>
	ADC1->CTLR2 |= ADC_CAL;
    125a:	4798                	lw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    125c:	40012637          	lui	a2,0x40012
	ADC1->CTLR2 |= ADC_CAL;
    1260:	00476713          	ori	a4,a4,4
    1264:	c798                	sw	a4,8(a5)
	while(ADC1->CTLR2 & ADC_CAL);
    1266:	40060793          	addi	a5,a2,1024 # 40012400 <_eusrstack+0x20011c00>
    126a:	4798                	lw	a4,8(a5)
    126c:	8b11                	andi	a4,a4,4
    126e:	f8e42423          	sw	a4,-120(s0)
    1272:	fb75                	bnez	a4,1266 <main+0x352>
	
	// Turn on DMA
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    1274:	400216b7          	lui	a3,0x40021
    1278:	4ad8                	lw	a4,20(a3)
	
	//DMA1_Channel1 is for ADC
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    127a:	44c60613          	addi	a2,a2,1100
	RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    127e:	00176713          	ori	a4,a4,1
    1282:	cad8                	sw	a4,20(a3)
	DMA1_Channel1->PADDR = (uint32_t)&ADC1->RDATAR;
    1284:	40020737          	lui	a4,0x40020
    1288:	cb10                	sw	a2,16(a4)
	DMA1_Channel1->MADDR = (uint32_t)adc_buffer;
    128a:	c6818613          	addi	a2,gp,-920 # 20000064 <adc_buffer>
    128e:	cb50                	sw	a2,20(a4)
	DMA1_Channel1->CNTR  = ADC_NUMCHLS;
    1290:	4609                	li	a2,2
    1292:	c750                	sw	a2,12(a4)
	DMA1_Channel1->CFGR  =
    1294:	6605                	lui	a2,0x1
    1296:	5a060593          	addi	a1,a2,1440 # 15a0 <main+0x68c>
    129a:	c70c                	sw	a1,8(a4)
		DMA_PeripheralDataSize_HalfWord |
		DMA_MemoryInc_Enable |
		DMA_Mode_Circular |
		DMA_DIR_PeripheralSRC;
	
	DMA1_Channel1->CFGR |= DMA_CFGR1_EN;    // Turn on DMA channel 1
    129c:	470c                	lw	a1,8(a4)
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
	
	// Enable continuous conversion and DMA
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    129e:	000e0537          	lui	a0,0xe0
    12a2:	10250513          	addi	a0,a0,258 # e0102 <lib_i2c.c.d894f163+0xd8ff4>
	DMA1_Channel1->CFGR |= DMA_CFGR1_EN;    // Turn on DMA channel 1
    12a6:	0015e593          	ori	a1,a1,1
    12aa:	c70c                	sw	a1,8(a4)
	ADC1->CTLR1 |= ADC_SCAN;                // enable scanning
    12ac:	43cc                	lw	a1,4(a5)
    GPIOC->CFGLR &= ~(0xf << (SPI_SCLK << 2));
    12ae:	400114b7          	lui	s1,0x40011
    12b2:	1005e593          	ori	a1,a1,256
    12b6:	c3cc                	sw	a1,4(a5)
	ADC1->CTLR2 |= ADC_CONT | ADC_DMA | ADC_EXTSEL;
    12b8:	478c                	lw	a1,8(a5)
    12ba:	8dc9                	or	a1,a1,a0
    12bc:	c78c                	sw	a1,8(a5)
	ADC1->CTLR2 |= ADC_SWSTART;             // start conversion
    12be:	478c                	lw	a1,8(a5)
    12c0:	00400537          	lui	a0,0x400
    12c4:	8dc9                	or	a1,a1,a0
    12c6:	c78c                	sw	a1,8(a5)
    RCC->APB2PCENR |= RCC_APB2Periph_GPIOC | RCC_APB2Periph_SPI1;
    12c8:	4e9c                	lw	a5,24(a3)
    12ca:	01060593          	addi	a1,a2,16
    12ce:	8fcd                	or	a5,a5,a1
    12d0:	ce9c                	sw	a5,24(a3)
    GPIOC->CFGLR &= ~(0xf << (SPI_SCLK << 2));
    12d2:	409c                	lw	a5,0(s1)
    12d4:	ff1005b7          	lui	a1,0xff100
    12d8:	15fd                	addi	a1,a1,-1
    12da:	8fed                	and	a5,a5,a1
    12dc:	c09c                	sw	a5,0(s1)
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_SCLK << 2);
    12de:	409c                	lw	a5,0(s1)
    12e0:	00b005b7          	lui	a1,0xb00
    12e4:	8fcd                	or	a5,a5,a1
    12e6:	c09c                	sw	a5,0(s1)
    GPIOC->CFGLR &= ~(0xf << (SPI_MOSI << 2));
    12e8:	409c                	lw	a5,0(s1)
    12ea:	f10005b7          	lui	a1,0xf1000
    12ee:	15fd                	addi	a1,a1,-1
    12f0:	8fed                	and	a5,a5,a1
    12f2:	c09c                	sw	a5,0(s1)
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_MOSI << 2);
    12f4:	409c                	lw	a5,0(s1)
    12f6:	0b0005b7          	lui	a1,0xb000
    12fa:	8fcd                	or	a5,a5,a1
    SPI1->CTLR1 = SPI_CPHA_1Edge             // Bit 0     - Clock PHAse
    12fc:	75f1                	lui	a1,0xffffc
    GPIOC->CFGLR |= (GPIO_CNF_OUT_PP_AF | GPIO_Speed_50MHz) << (SPI_MOSI << 2);
    12fe:	c09c                	sw	a5,0(s1)
    SPI1->CTLR1 = SPI_CPHA_1Edge             // Bit 0     - Clock PHAse
    1300:	30458593          	addi	a1,a1,772 # ffffc304 <_eusrstack+0xdfffbb04>
    1304:	400137b7          	lui	a5,0x40013
    1308:	00b79023          	sh	a1,0(a5) # 40013000 <_eusrstack+0x20012800>
    SPI1->CRCR = 7;                          // CRC
    130c:	459d                	li	a1,7
    130e:	00b79823          	sh	a1,16(a5)
    SPI1->CTLR2 |= SPI_I2S_DMAReq_Tx;        // Configure SPI DMA Transfer
    1312:	0047d583          	lhu	a1,4(a5)
    DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    1316:	07b1                	addi	a5,a5,12
    SPI1->CTLR2 |= SPI_I2S_DMAReq_Tx;        // Configure SPI DMA Transfer
    1318:	05c2                	slli	a1,a1,0x10
    131a:	81c1                	srli	a1,a1,0x10
    131c:	0025e593          	ori	a1,a1,2
    1320:	feb79c23          	sh	a1,-8(a5)
    SPI1->CTLR1 |= CTLR1_SPE_Set;            // Bit 6     - Enable SPI
    1324:	ff47d583          	lhu	a1,-12(a5)
    1328:	05c2                	slli	a1,a1,0x10
    132a:	81c1                	srli	a1,a1,0x10
    132c:	0405e593          	ori	a1,a1,64
    1330:	feb79a23          	sh	a1,-12(a5)
    RCC->AHBPCENR |= RCC_AHBPeriph_DMA1;
    1334:	4acc                	lw	a1,20(a3)
    1336:	0015e593          	ori	a1,a1,1
    133a:	cacc                	sw	a1,20(a3)
    DMA1_Channel3->CFGR = DMA_DIR_PeripheralDST          // Bit 4     - Read from memory
    133c:	668d                	lui	a3,0x3
    133e:	0b068693          	addi	a3,a3,176 # 30b0 <ch32fun.c.963ac852+0x836>
    1342:	db14                	sw	a3,48(a4)
    DMA1_Channel3->PADDR = (uint32_t)&SPI1->DATAR;
    1344:	df1c                	sw	a5,56(a4)
    DC_PIN = dc_pin;
    1346:	02300713          	li	a4,35
    134a:	c4e18a23          	sb	a4,-940(gp) # 20000050 <DC_PIN>
    funPinMode(rst_pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP);
    134e:	409c                	lw	a5,0(s1)
    1350:	fff10737          	lui	a4,0xfff10
    1354:	177d                	addi	a4,a4,-1
    1356:	8ff9                	and	a5,a5,a4
    1358:	6741                	lui	a4,0x10
    135a:	8fd9                	or	a5,a5,a4
    135c:	c09c                	sw	a5,0(s1)
    funPinMode(dc_pin, GPIO_Speed_10MHz | GPIO_CNF_OUT_PP);
    135e:	409c                	lw	a5,0(s1)
    1360:	7745                	lui	a4,0xffff1
    1362:	177d                	addi	a4,a4,-1
    1364:	8ff9                	and	a5,a5,a4
    1366:	8fd1                	or	a5,a5,a2
    1368:	c09c                	sw	a5,0(s1)
    funDigitalWrite(rst_pin, 0);
    136a:	001007b7          	lui	a5,0x100
    136e:	c89c                	sw	a5,16(s1)
    Delay_Ms(100);
    1370:	004947b7          	lui	a5,0x494
    1374:	e0078513          	addi	a0,a5,-512 # 493e00 <lib_i2c.c.d894f163+0x48ccf2>
    1378:	eb3fe0ef          	jal	ra,22a <DelaySysTick>
    funDigitalWrite(rst_pin, 1);
    137c:	4741                	li	a4,16
    Delay_Ms(100);
    137e:	004947b7          	lui	a5,0x494
    funDigitalWrite(rst_pin, 1);
    1382:	c898                	sw	a4,16(s1)
    Delay_Ms(100);
    1384:	e0078513          	addi	a0,a5,-512 # 493e00 <lib_i2c.c.d894f163+0x48ccf2>
    1388:	ea3fe0ef          	jal	ra,22a <DelaySysTick>
    write_cmd_8(0x01);              //# Software reset
    138c:	4505                	li	a0,1
    138e:	f87fe0ef          	jal	ra,314 <write_cmd_8>
    Delay_Ms(200);
    1392:	00928537          	lui	a0,0x928
    1396:	c0050513          	addi	a0,a0,-1024 # 927c00 <lib_i2c.c.d894f163+0x920af2>
    139a:	e91fe0ef          	jal	ra,22a <DelaySysTick>
    write_cmd_8(0x11);              //# SLPOUT - Sleep Out; SLPIN 0x10
    139e:	4545                	li	a0,17
    13a0:	f75fe0ef          	jal	ra,314 <write_cmd_8>
    Delay_Ms(100);
    13a4:	004947b7          	lui	a5,0x494
    13a8:	e0078513          	addi	a0,a5,-512 # 493e00 <lib_i2c.c.d894f163+0x48ccf2>
    13ac:	e7ffe0ef          	jal	ra,22a <DelaySysTick>
    write_cmd_8(0x36);              //# MADCTL - Memory Access Control
    13b0:	03600513          	li	a0,54
    13b4:	f61fe0ef          	jal	ra,314 <write_cmd_8>
    INTF_SPI_DC_HIGH();     // Data Mode
    13b8:	f7ffe0ef          	jal	ra,336 <INTF_SPI_DC_HIGH>
    SPI_send(data);
    13bc:	0a800513          	li	a0,168
    13c0:	f3ffe0ef          	jal	ra,2fe <SPI_send>
    write_cmd_8(0x3A);              //# COLMOD - Color Mode
    13c4:	03a00513          	li	a0,58
    13c8:	f4dfe0ef          	jal	ra,314 <write_cmd_8>
    INTF_SPI_DC_HIGH();     // Data Mode
    13cc:	f6bfe0ef          	jal	ra,336 <INTF_SPI_DC_HIGH>
    SPI_send(data);
    13d0:	4515                	li	a0,5
    13d2:	f2dfe0ef          	jal	ra,2fe <SPI_send>
    uint8_t gamma_p[] = {0x09, 0x16, 0x09, 0x20, 0x21, 0x1B, 0x13, 0x19,
    13d6:	6589                	lui	a1,0x2
    13d8:	4641                	li	a2,16
    13da:	d9458593          	addi	a1,a1,-620 # 1d94 <DMA1_Channel3_IRQHandler+0xd0>
    13de:	fbc40513          	addi	a0,s0,-68
    13e2:	3c49                	jal	e74 <memcpy>
    write_cmd_8(0xE0);              //# GMCTRP1 - Gamama Control + Positive Polarity
    13e4:	0e000513          	li	a0,224
    13e8:	f2dfe0ef          	jal	ra,314 <write_cmd_8>
    INTF_TFT_SEND_BUFF(gamma_p, 16, 1);
    13ec:	4605                	li	a2,1
    13ee:	45c1                	li	a1,16
    13f0:	fbc40513          	addi	a0,s0,-68
    13f4:	fe5fe0ef          	jal	ra,3d8 <INTF_TFT_SEND_BUFF>
    uint8_t gamma_n[] = {0x0B, 0x14, 0x08, 0x1E, 0x22, 0x1D, 0x18, 0x1E,
    13f8:	6589                	lui	a1,0x2
    13fa:	4641                	li	a2,16
    13fc:	da858593          	addi	a1,a1,-600 # 1da8 <DMA1_Channel3_IRQHandler+0xe4>
    1400:	fcc40513          	addi	a0,s0,-52
    1404:	3c85                	jal	e74 <memcpy>
    write_cmd_8(0xE1);              //# GMCTRN1 - Gamma Control - Negative Polarity
    1406:	0e100513          	li	a0,225
    140a:	f0bfe0ef          	jal	ra,314 <write_cmd_8>
    INTF_TFT_SEND_BUFF(gamma_n, 16, 1);
    140e:	4605                	li	a2,1
    1410:	45c1                	li	a1,16
    1412:	fcc40513          	addi	a0,s0,-52
    1416:	fc3fe0ef          	jal	ra,3d8 <INTF_TFT_SEND_BUFF>
    Delay_Ms(10);
    141a:	000754b7          	lui	s1,0x75
    141e:	30048513          	addi	a0,s1,768 # 75300 <lib_i2c.c.d894f163+0x6e1f2>
    1422:	e09fe0ef          	jal	ra,22a <DelaySysTick>
    write_cmd_8(0x21);              //# INVON - Inversion On
    1426:	02100513          	li	a0,33
    142a:	eebfe0ef          	jal	ra,314 <write_cmd_8>
    write_cmd_8(0x13);              //# NORON - Normal Display On
    142e:	454d                	li	a0,19
    1430:	ee5fe0ef          	jal	ra,314 <write_cmd_8>
    Delay_Ms(10);
    1434:	30048513          	addi	a0,s1,768
    1438:	df3fe0ef          	jal	ra,22a <DelaySysTick>
    write_cmd_8(0x29);              //# DISPON - Display On; DISPOFF 0x28
    143c:	02900513          	li	a0,41
    1440:	ed5fe0ef          	jal	ra,314 <write_cmd_8>
    Delay_Ms(10);
    1444:	30048513          	addi	a0,s1,768
    1448:	de3fe0ef          	jal	ra,22a <DelaySysTick>
    tft_fill_rect(0, 0, 160, 128, PURPLE);
    144c:	6721                	lui	a4,0x8
    144e:	80f70713          	addi	a4,a4,-2033 # 780f <lib_i2c.c.d894f163+0x701>
    1452:	08000693          	li	a3,128
    1456:	0a000613          	li	a2,160
    145a:	4581                	li	a1,0
    145c:	4501                	li	a0,0
    145e:	8a2ff0ef          	jal	ra,500 <tft_fill_rect>
	#endif

	// WS2812BDMAInit();
	// Neo_loadCommand(NEO_COLOR_CHASE);

	uint32_t now = millis();
    1462:	fac42783          	lw	a5,-84(s0)
	model->timeRef = 0;
    1466:	f6042c23          	sw	zero,-136(s0)
    146a:	439c                	lw	a5,0(a5)
	model->counter = 0;
    146c:	f8042223          	sw	zero,-124(s0)
    model->btn_state = newState;
    1470:	478d                	li	a5,3
    1472:	faf42023          	sw	a5,-96(s0)
    1476:	c6818793          	addi	a5,gp,-920 # 20000064 <adc_buffer>
	Session_t session = { 0, 0, now };
    147a:	f6042e23          	sw	zero,-132(s0)
    147e:	f8042023          	sw	zero,-128(s0)
    1482:	4481                	li	s1,0
    1484:	f6f42823          	sw	a5,-144(s0)

	while(1) {
		now = millis();
    1488:	fac42783          	lw	a5,-84(s0)
void fun_button_task(uint32_t time, Button_t *model, void (*handler)(int, uint32_t)) {
    if (model->pin == 0xFF) return;
    uint8_t read = funDigitalRead(model->pin);

    // Debounce check
    if (time - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    148c:	fa442683          	lw	a3,-92(s0)
    1490:	439c                	lw	a5,0(a5)
    1492:	faf42423          	sw	a5,-88(s0)
    1496:	fa842703          	lw	a4,-88(s0)
    uint8_t read = funDigitalRead(model->pin);
    149a:	400117b7          	lui	a5,0x40011
    149e:	479c                	lw	a5,8(a5)
    if (time - model->debounce_time < TICK_DEBOUNCE_DUR) return;
    14a0:	40d706b3          	sub	a3,a4,a3
    14a4:	474d                	li	a4,19
    14a6:	04d77f63          	bgeu	a4,a3,1504 <main+0x5f0>
    model->debounce_time = time;

    switch (model->btn_state) {
    14aa:	fa042683          	lw	a3,-96(s0)
    14ae:	4709                	li	a4,2
    uint8_t read = funDigitalRead(model->pin);
    14b0:	8b85                	andi	a5,a5,1
    switch (model->btn_state) {
    14b2:	46e68f63          	beq	a3,a4,1930 <main+0xa1c>
    14b6:	470d                	li	a4,3
    14b8:	02e68363          	beq	a3,a4,14de <main+0x5ca>
    14bc:	40069c63          	bnez	a3,18d4 <main+0x9c0>
            _reset_timers(BTN_DOWN, model);      // First Press  
        }
        break;

    case BTN_DOWN:
        if (read > 0) {
    14c0:	3e078263          	beqz	a5,18a4 <main+0x990>
    model->debounce_time = millis();
    14c4:	fac42703          	lw	a4,-84(s0)
    14c8:	4318                	lw	a4,0(a4)
    14ca:	fae42223          	sw	a4,-92(s0)
    model->release_time = millis();
    14ce:	fac42703          	lw	a4,-84(s0)
    14d2:	4318                	lw	a4,0(a4)
    14d4:	f8e42e23          	sw	a4,-100(s0)

        if (read == 0 && release_duration < TICK_CLICK_DUR) {
            // Second Press in less than TICK_CLICK_DUR
            _reset_timers(BTN_DOWN2, model);

        } else if (release_duration > TICK_CLICK_DUR) {
    14d8:	faf42023          	sw	a5,-96(s0)
    14dc:	a025                	j	1504 <main+0x5f0>
    model->debounce_time = time;
    14de:	fa842703          	lw	a4,-88(s0)
    14e2:	fae42223          	sw	a4,-92(s0)
        if (read == 0) {
    14e6:	ef99                	bnez	a5,1504 <main+0x5f0>
    model->debounce_time = millis();
    14e8:	fac42783          	lw	a5,-84(s0)
            model->press_time = time;
    14ec:	f8e42423          	sw	a4,-120(s0)
    model->btn_state = newState;
    14f0:	fa042023          	sw	zero,-96(s0)
    model->debounce_time = millis();
    14f4:	439c                	lw	a5,0(a5)
    14f6:	faf42223          	sw	a5,-92(s0)
    model->release_time = millis();
    14fa:	fac42783          	lw	a5,-84(s0)
    14fe:	439c                	lw	a5,0(a5)
    1500:	f8f42e23          	sw	a5,-100(s0)
	}
}


void fun_timPWM_task(uint32_t time, TIM_PWM_t* model) {
	if (time - model->timeRef < 5) { return; }
    1504:	f7842703          	lw	a4,-136(s0)
    1508:	fa842783          	lw	a5,-88(s0)
    150c:	8f99                	sub	a5,a5,a4
    150e:	4711                	li	a4,4
    1510:	02f77463          	bgeu	a4,a5,1538 <main+0x624>
		case 1: timer->CH1CVR = width; break;
    1514:	f8442703          	lw	a4,-124(s0)
    1518:	400137b7          	lui	a5,0x40013
    151c:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x20012400>
    1520:	dbd8                	sw	a4,52(a5)
	model->timeRef = time;

	fun_timPWM_setpw(model, model->counter);
	model->counter++;
    1522:	f8442783          	lw	a5,-124(s0)
    1526:	0785                	addi	a5,a5,1
	model->counter &= 255;
    1528:	0ff7f793          	andi	a5,a5,255
    152c:	f8f42223          	sw	a5,-124(s0)
	model->timeRef = time;
    1530:	fa842783          	lw	a5,-88(s0)
    1534:	f6f42c23          	sw	a5,-136(s0)
		//# prioritize tasks
		fun_button_task(now, &button1, button_onChanged);
		fun_timPWM_task(now, &pwm_CH1c);
		// Neo_task(now);

		if (now - session.timeRef_1sec > 1000) {
    1538:	fa842783          	lw	a5,-88(s0)
    153c:	3e800713          	li	a4,1000
    1540:	8f85                	sub	a5,a5,s1
    1542:	6ef77263          	bgeu	a4,a5,1c26 <main+0xd12>
}

static void dma_uart_tx(const void *data, uint32_t len)
{
	// Disable DMA channel (just in case a transfer is pending)
	DMA1_Channel4->CFGR &= ~DMA_CFGR1_EN;
    1546:	400207b7          	lui	a5,0x40020
    154a:	43f8                	lw	a4,68(a5)
}


void mod_st7735_test2() {
    tft_set_cursor(0, 0);
    tft_print("Hello World!");
    154c:	6509                	lui	a0,0x2
    154e:	d8450513          	addi	a0,a0,-636 # 1d84 <DMA1_Channel3_IRQHandler+0xc0>
    1552:	9b79                	andi	a4,a4,-2
    1554:	c3f8                	sw	a4,68(a5)
	// Set transfer length and source address
	DMA1_Channel4->CNTR = len;
    1556:	4739                	li	a4,14
    1558:	c7b8                	sw	a4,72(a5)
	DMA1_Channel4->MADDR = (uint32_t)data;
    155a:	6709                	lui	a4,0x2
    155c:	40470713          	addi	a4,a4,1028 # 2404 <message.0>
    1560:	cbb8                	sw	a4,80(a5)
	// Enable DMA channel to start the transfer
	DMA1_Channel4->CFGR |= DMA_CFGR1_EN;
    1562:	43f8                	lw	a4,68(a5)
    str[position] = '\0';  // End of the string.
    1564:	075bd4b7          	lui	s1,0x75bd
    1568:	d1548493          	addi	s1,s1,-747 # 75bcd15 <lib_i2c.c.d894f163+0x75b5c07>
    156c:	00176713          	ori	a4,a4,1
    1570:	c3f8                	sw	a4,68(a5)
	// Increment the milliseconds count
	systick_millis++;
}

uint32_t SysTick_getRunTime(void *handler(void)) {
	uint32_t now = micros();
    1572:	e000f7b7          	lui	a5,0xe000f
    1576:	479c                	lw	a5,8(a5)
    _cursor_x = x + TFT_X_OFFSET;
    1578:	4705                	li	a4,1
    157a:	c6e19223          	sh	a4,-924(gp) # 20000060 <_cursor_x>
    _cursor_y = y + TFT_Y_OFFSET;
    157e:	4769                	li	a4,26
    1580:	c6e19323          	sh	a4,-922(gp) # 20000062 <_cursor_y>
    1584:	eadfe0ef          	jal	ra,430 <tft_print>
    str[position] = '\0';  // End of the string.
    1588:	f7018713          	addi	a4,gp,-144 # 2000036c <str.6>
    158c:	000705a3          	sb	zero,11(a4)
    1590:	f7018693          	addi	a3,gp,-144 # 2000036c <str.6>
    uint8_t     position  = 11;
    1594:	472d                	li	a4,11
        str[--position] = num % 10 + '0';
    1596:	177d                	addi	a4,a4,-1
    1598:	0ff77713          	andi	a4,a4,255
    159c:	45a9                	li	a1,10
    159e:	8526                	mv	a0,s1
    15a0:	f8e42a23          	sw	a4,-108(s0)
    15a4:	f8d42c23          	sw	a3,-104(s0)
    15a8:	b69fe0ef          	jal	ra,110 <__modsi3>
    15ac:	f9842683          	lw	a3,-104(s0)
    15b0:	03050513          	addi	a0,a0,48
        num /= 10;
    15b4:	45a9                	li	a1,10
        str[--position] = num % 10 + '0';
    15b6:	00a68523          	sb	a0,10(a3)
        num /= 10;
    15ba:	8526                	mv	a0,s1
    15bc:	afdfe0ef          	jal	ra,b8 <__divsi3>
    while (num) {
    15c0:	f9842683          	lw	a3,-104(s0)
    15c4:	f9442703          	lw	a4,-108(s0)
    15c8:	4609                	li	a2,2
        num /= 10;
    15ca:	84aa                	mv	s1,a0
    while (num) {
    15cc:	16fd                	addi	a3,a3,-1
    15ce:	f7018793          	addi	a5,gp,-144 # 2000036c <str.6>
    15d2:	fcc712e3          	bne	a4,a2,1596 <main+0x682>
    tft_print(&str[position]);
    15d6:	00278513          	addi	a0,a5,2 # e000f002 <_eusrstack+0xc000e802>
    15da:	e57fe0ef          	jal	ra,430 <tft_print>
    tft_print_number(123456789, 0);
    
    //! dots test
    tft_draw_pixel(rand8() % 160, rand8() % 80, colors[rand8() % 19]);
    15de:	a4aff0ef          	jal	ra,828 <rand8>
    15e2:	f8a42823          	sw	a0,-112(s0)
    15e6:	a42ff0ef          	jal	ra,828 <rand8>
    15ea:	f8a42c23          	sw	a0,-104(s0)
    15ee:	a3aff0ef          	jal	ra,828 <rand8>
    15f2:	6289                	lui	t0,0x2
    15f4:	45cd                	li	a1,19
    15f6:	edc28493          	addi	s1,t0,-292 # 1edc <colors>
    15fa:	af3fe0ef          	jal	ra,ec <__umodsi3>
    15fe:	0ff57793          	andi	a5,a0,255
    1602:	0786                	slli	a5,a5,0x1
    1604:	f9842683          	lw	a3,-104(s0)
    1608:	97a6                	add	a5,a5,s1
    160a:	0007d603          	lhu	a2,0(a5)
    160e:	8536                	mv	a0,a3
    1610:	05000593          	li	a1,80
    1614:	f8c42a23          	sw	a2,-108(s0)
    1618:	ad5fe0ef          	jal	ra,ec <__umodsi3>
    161c:	f9042703          	lw	a4,-112(s0)
    1620:	0ff57793          	andi	a5,a0,255
    1624:	0a000593          	li	a1,160
    1628:	853a                	mv	a0,a4
    162a:	f8f42c23          	sw	a5,-104(s0)
    162e:	abffe0ef          	jal	ra,ec <__umodsi3>
    1632:	f9842783          	lw	a5,-104(s0)
    1636:	f9442603          	lw	a2,-108(s0)
    163a:	0ff57513          	andi	a0,a0,255
    163e:	85be                	mv	a1,a5
    1640:	d71fe0ef          	jal	ra,3b0 <tft_draw_pixel>

    // //! draw vertical lines
    static uint8_t x_idx = 0;
    tft_draw_line(x_idx, 0, x_idx, 80, colors[rand8() % 19], 1);
    1644:	c7418313          	addi	t1,gp,-908 # 20000070 <x_idx.5>
    1648:	00034383          	lbu	t2,0(t1)
    164c:	01039613          	slli	a2,t2,0x10
    1650:	8641                	srai	a2,a2,0x10
    1652:	f8742a23          	sw	t2,-108(s0)
    1656:	f8c42c23          	sw	a2,-104(s0)
    165a:	9ceff0ef          	jal	ra,828 <rand8>
    165e:	45cd                	li	a1,19
    1660:	a8dfe0ef          	jal	ra,ec <__umodsi3>
    1664:	0ff57513          	andi	a0,a0,255
    1668:	0506                	slli	a0,a0,0x1
    166a:	f9842603          	lw	a2,-104(s0)
    166e:	9526                	add	a0,a0,s1
    1670:	00055703          	lhu	a4,0(a0)
    1674:	4785                	li	a5,1
    1676:	05000693          	li	a3,80
    167a:	4581                	li	a1,0
    167c:	8532                	mv	a0,a2
    167e:	faffe0ef          	jal	ra,62c <tft_draw_line>
    x_idx += 1;
    1682:	f9442383          	lw	t2,-108(s0)
    1686:	6289                	lui	t0,0x2
    1688:	edc28693          	addi	a3,t0,-292 # 1edc <colors>
    168c:	00138793          	addi	a5,t2,1
    1690:	f8d42a23          	sw	a3,-108(s0)
    1694:	0ff7f793          	andi	a5,a5,255
    if (x_idx >= 160) x_idx = 0;
    1698:	09f00713          	li	a4,159
    169c:	c7418313          	addi	t1,gp,-908 # 20000070 <x_idx.5>
    16a0:	2af76863          	bltu	a4,a5,1950 <main+0xa3c>
    x_idx += 1;
    16a4:	00f30023          	sb	a5,0(t1)

    // //! draw horizontal lines
    static uint8_t y_idx = 0;
    tft_draw_line(0, y_idx, 180, y_idx, colors[rand8() % 19], 1);
    16a8:	c7518313          	addi	t1,gp,-907 # 20000071 <y_idx.4>
    16ac:	00034483          	lbu	s1,0(t1)
    16b0:	01049693          	slli	a3,s1,0x10
    16b4:	86c1                	srai	a3,a3,0x10
    16b6:	f8d42c23          	sw	a3,-104(s0)
    16ba:	96eff0ef          	jal	ra,828 <rand8>
    16be:	45cd                	li	a1,19
    16c0:	a2dfe0ef          	jal	ra,ec <__umodsi3>
    16c4:	f9442783          	lw	a5,-108(s0)
    16c8:	0ff57513          	andi	a0,a0,255
    16cc:	0506                	slli	a0,a0,0x1
    16ce:	953e                	add	a0,a0,a5
    16d0:	f9842683          	lw	a3,-104(s0)
    16d4:	00055703          	lhu	a4,0(a0)
    16d8:	4785                	li	a5,1
    16da:	0b400613          	li	a2,180
    16de:	85b6                	mv	a1,a3
    16e0:	4501                	li	a0,0
    16e2:	f4bfe0ef          	jal	ra,62c <tft_draw_line>
    y_idx += 1;
    16e6:	0485                	addi	s1,s1,1
    16e8:	0ff4f493          	andi	s1,s1,255
    if (y_idx >= 80) y_idx = 0;
    16ec:	04f00793          	li	a5,79
    16f0:	c7518313          	addi	t1,gp,-907 # 20000071 <y_idx.4>
    16f4:	2697e163          	bltu	a5,s1,1956 <main+0xa42>
    y_idx += 1;
    16f8:	00930023          	sb	s1,0(t1)

    //! draw random lines
    tft_draw_line(0, 0, 70, 70, RED, 5);
    16fc:	6741                	lui	a4,0x10
    16fe:	04600613          	li	a2,70
    1702:	4795                	li	a5,5
    1704:	80070713          	addi	a4,a4,-2048 # f800 <lib_i2c.c.d894f163+0x86f2>
    1708:	04600693          	li	a3,70
    170c:	4581                	li	a1,0
    170e:	4501                	li	a0,0
    1710:	f1dfe0ef          	jal	ra,62c <tft_draw_line>

    tft_draw_line(rand8() % 160, rand8() % 80, rand8() % 160, rand8() % 80, colors[rand8() % 19], 1);
    1714:	914ff0ef          	jal	ra,828 <rand8>
    1718:	f6a42423          	sw	a0,-152(s0)
    171c:	90cff0ef          	jal	ra,828 <rand8>
    1720:	84aa                	mv	s1,a0
    1722:	906ff0ef          	jal	ra,828 <rand8>
    1726:	f6a42623          	sw	a0,-148(s0)
    172a:	8feff0ef          	jal	ra,828 <rand8>
    172e:	f8a42c23          	sw	a0,-104(s0)
    1732:	8f6ff0ef          	jal	ra,828 <rand8>
    1736:	45cd                	li	a1,19
    1738:	9b5fe0ef          	jal	ra,ec <__umodsi3>
    173c:	f9442703          	lw	a4,-108(s0)
    1740:	0ff57793          	andi	a5,a0,255
    1744:	0786                	slli	a5,a5,0x1
    1746:	97ba                	add	a5,a5,a4
    1748:	f9842683          	lw	a3,-104(s0)
    174c:	0007d703          	lhu	a4,0(a5)
    1750:	05000593          	li	a1,80
    1754:	8536                	mv	a0,a3
    1756:	f8e42623          	sw	a4,-116(s0)
    175a:	993fe0ef          	jal	ra,ec <__umodsi3>
    175e:	f6c42603          	lw	a2,-148(s0)
    1762:	0ff57693          	andi	a3,a0,255
    1766:	0a000593          	li	a1,160
    176a:	8532                	mv	a0,a2
    176c:	f8d42823          	sw	a3,-112(s0)
    1770:	97dfe0ef          	jal	ra,ec <__umodsi3>
    1774:	0ff57613          	andi	a2,a0,255
    1778:	05000593          	li	a1,80
    177c:	8526                	mv	a0,s1
    177e:	f8c42c23          	sw	a2,-104(s0)
    1782:	96bfe0ef          	jal	ra,ec <__umodsi3>
    1786:	f6842303          	lw	t1,-152(s0)
    178a:	0ff57493          	andi	s1,a0,255
    178e:	0a000593          	li	a1,160
    1792:	851a                	mv	a0,t1
    1794:	959fe0ef          	jal	ra,ec <__umodsi3>
    1798:	f8c42703          	lw	a4,-116(s0)
    179c:	f9042683          	lw	a3,-112(s0)
    17a0:	f9842603          	lw	a2,-104(s0)
    17a4:	4785                	li	a5,1
    17a6:	85a6                	mv	a1,s1
    17a8:	0ff57513          	andi	a0,a0,255
    17ac:	e81fe0ef          	jal	ra,62c <tft_draw_line>

    // int16_t square_x[] = {10, 60, 60, 10};
    // int16_t square_y[] = {10, 10, 60, 60};
    // _draw_poly(square_x, square_y, 4, RED, 3);

    Point16_t triangle[] = {{10, 20}, {40, 60}, {80, 70}};
    17b0:	001407b7          	lui	a5,0x140
    17b4:	07a9                	addi	a5,a5,10
    17b6:	faf42e23          	sw	a5,-68(s0)
    17ba:	003c07b7          	lui	a5,0x3c0
    17be:	02878793          	addi	a5,a5,40 # 3c0028 <lib_i2c.c.d894f163+0x3b8f1a>
    17c2:	fcf42023          	sw	a5,-64(s0)
    17c6:	004607b7          	lui	a5,0x460
    17ca:	05078793          	addi	a5,a5,80 # 460050 <lib_i2c.c.d894f163+0x458f42>
    17ce:	fcf42223          	sw	a5,-60(s0)
    // tft_draw_poly2(triangle, 3, RED, 3);

    tft_draw_solid_poly2(triangle, 3, RED, WHITE, 2);
    17d2:	fbc40793          	addi	a5,s0,-68
        int16_t y_min, y_max;
        int32_t x_step;  // Fixed-point slope (dx/dy)
        int32_t x_curr;  // Fixed-point current x
    } EdgeInfo;
    
    EdgeInfo edges[num_vertices];
    17d6:	f6242623          	sw	sp,-148(s0)
    17da:	f8f42c23          	sw	a5,-104(s0)
    17de:	fdc10113          	addi	sp,sp,-36
    17e2:	84be                	mv	s1,a5
    17e4:	4785                	li	a5,1
    17e6:	f8242823          	sw	sp,-112(s0)
    17ea:	f8f42623          	sw	a5,-116(s0)
    uint8_t valid_edges = 0;
    17ee:	4301                	li	t1,0
    
    for (uint16_t i = 0; i < num_vertices; i++) {
        const Point16_t* p0 = &vertices[i];
        const Point16_t* p1 = &vertices[(i + 1) % num_vertices];
    17f0:	f8c42503          	lw	a0,-116(s0)
    17f4:	458d                	li	a1,3
    17f6:	f6642423          	sw	t1,-152(s0)
    17fa:	917fe0ef          	jal	ra,110 <__modsi3>
    17fe:	00251593          	slli	a1,a0,0x2
    1802:	fbc40793          	addi	a5,s0,-68
    1806:	95be                	add	a1,a1,a5
        
        if (p0->y == p1->y) continue; // Skip horizontal edges
    1808:	00249683          	lh	a3,2(s1)
    180c:	00259703          	lh	a4,2(a1)
    1810:	f6842303          	lw	t1,-152(s0)
    1814:	06e68863          	beq	a3,a4,1884 <main+0x970>
    1818:	00049503          	lh	a0,0(s1)
    181c:	00059583          	lh	a1,0(a1)
    1820:	00131793          	slli	a5,t1,0x1
        
        // Order vertices top to bottom
        int16_t y_min, y_max, x_start;
        if (p0->y < p1->y) {
    1824:	12e6dc63          	bge	a3,a4,195c <main+0xa48>
    1828:	f9042603          	lw	a2,-112(s0)
    182c:	979a                	add	a5,a5,t1
    182e:	078a                	slli	a5,a5,0x2
    1830:	97b2                	add	a5,a5,a2
            y_min = p0->y;
            y_max = p1->y;
            x_start = p0->x;
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    1832:	01051613          	slli	a2,a0,0x10
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    1836:	40a58533          	sub	a0,a1,a0
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    183a:	c790                	sw	a2,8(a5)
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    183c:	40d705b3          	sub	a1,a4,a3
    1840:	0542                	slli	a0,a0,0x10
    1842:	f4642e23          	sw	t1,-164(s0)
            edges[valid_edges].x_curr = x_start << 16; // Fixed-point init
    1846:	f6f42023          	sw	a5,-160(s0)
            edges[valid_edges].x_step = ((int32_t)(p1->x - p0->x) << 16) / (p1->y - p0->y);
    184a:	f6d42223          	sw	a3,-156(s0)
    184e:	f6e42423          	sw	a4,-152(s0)
    1852:	867fe0ef          	jal	ra,b8 <__divsi3>
    1856:	f6042783          	lw	a5,-160(s0)
    185a:	f6842703          	lw	a4,-152(s0)
    185e:	f6442683          	lw	a3,-156(s0)
    1862:	f5c42303          	lw	t1,-164(s0)
    1866:	c3c8                	sw	a0,4(a5)
    1868:	00131793          	slli	a5,t1,0x1
    186c:	f9042603          	lw	a2,-112(s0)
    1870:	979a                	add	a5,a5,t1
    1872:	078a                	slli	a5,a5,0x2
    1874:	97b2                	add	a5,a5,a2
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
        }
        
        edges[valid_edges].y_min = y_min;
        edges[valid_edges].y_max = y_max;
        valid_edges++;
    1876:	0305                	addi	t1,t1,1
        edges[valid_edges].y_min = y_min;
    1878:	00d79023          	sh	a3,0(a5)
        edges[valid_edges].y_max = y_max;
    187c:	00e79123          	sh	a4,2(a5)
        valid_edges++;
    1880:	0ff37313          	andi	t1,t1,255
    for (uint16_t i = 0; i < num_vertices; i++) {
    1884:	f8c42783          	lw	a5,-116(s0)
    1888:	4711                	li	a4,4
    188a:	0491                	addi	s1,s1,4
    188c:	0785                	addi	a5,a5,1
    188e:	f8f42623          	sw	a5,-116(s0)
    1892:	f4e79fe3          	bne	a5,a4,17f0 <main+0x8dc>
    1896:	46d1                	li	a3,20
    1898:	f9042783          	lw	a5,-112(s0)
    for (int16_t y = min_y; y <= max_y; y++) {
        int16_t intersections[20];
        uint8_t num_intersections = 0;

        // Find active edges
        for (uint8_t i = 0; i < valid_edges; i++) {
    189c:	4701                	li	a4,0
        uint8_t num_intersections = 0;
    189e:	4481                	li	s1,0
            if (y >= edges[i].y_min && y < edges[i].y_max) {
                // Calculate x intersection (with rounding)
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    18a0:	65a1                	lui	a1,0x8
    18a2:	aa35                	j	19de <main+0xaca>
            uint32_t press_duration = time - model->press_time;
    18a4:	fa842783          	lw	a5,-88(s0)
    18a8:	f8842703          	lw	a4,-120(s0)
    model->debounce_time = time;
    18ac:	fa842683          	lw	a3,-88(s0)
            uint32_t press_duration = time - model->press_time;
    18b0:	40e78733          	sub	a4,a5,a4
            if (press_duration > TICK_LONG_PRESS_DUR) {
    18b4:	6785                	lui	a5,0x1
    18b6:	fa078793          	addi	a5,a5,-96 # fa0 <main+0x8c>
    model->debounce_time = time;
    18ba:	fad42223          	sw	a3,-92(s0)
            if (press_duration > TICK_LONG_PRESS_DUR) {
    18be:	c4e7f3e3          	bgeu	a5,a4,1504 <main+0x5f0>
			printf("Long Press\n"); break;
    18c2:	6509                	lui	a0,0x2
    18c4:	d5850513          	addi	a0,a0,-680 # 1d58 <DMA1_Channel3_IRQHandler+0x94>
    18c8:	dc8ff0ef          	jal	ra,e90 <puts>
	mngI2c_load_buttonState(millis(), event);
    18cc:	fac42783          	lw	a5,-84(s0)
    18d0:	439c                	lw	a5,0(a5)
	void mngI2c_load_buttonState(uint32_t time, uint8_t state) {}
    18d2:	b90d                	j	1504 <main+0x5f0>
        uint32_t release_duration = time - model->release_time;
    18d4:	fa842703          	lw	a4,-88(s0)
    18d8:	f9c42683          	lw	a3,-100(s0)
    18dc:	8f15                	sub	a4,a4,a3
        if (read == 0 && release_duration < TICK_CLICK_DUR) {
    18de:	e38d                	bnez	a5,1900 <main+0x9ec>
    18e0:	09f00793          	li	a5,159
    18e4:	00e7ee63          	bltu	a5,a4,1900 <main+0x9ec>
    model->debounce_time = millis();
    18e8:	fac42783          	lw	a5,-84(s0)
    18ec:	439c                	lw	a5,0(a5)
    18ee:	faf42223          	sw	a5,-92(s0)
    model->release_time = millis();
    18f2:	fac42783          	lw	a5,-84(s0)
    18f6:	439c                	lw	a5,0(a5)
    18f8:	f8f42e23          	sw	a5,-100(s0)
    model->btn_state = newState;
    18fc:	4789                	li	a5,2
    18fe:	bee9                	j	14d8 <main+0x5c4>
        } else if (release_duration > TICK_CLICK_DUR) {
    1900:	0a000793          	li	a5,160
    1904:	04e7f063          	bgeu	a5,a4,1944 <main+0xa30>
			printf("Single Click\n");
    1908:	6509                	lui	a0,0x2
    190a:	d6450513          	addi	a0,a0,-668 # 1d64 <DMA1_Channel3_IRQHandler+0xa0>
			printf("Double Click\n");
    190e:	d82ff0ef          	jal	ra,e90 <puts>
	mngI2c_load_buttonState(millis(), event);
    1912:	fac42783          	lw	a5,-84(s0)
    1916:	439c                	lw	a5,0(a5)
    model->debounce_time = millis();
    1918:	fac42783          	lw	a5,-84(s0)
    191c:	439c                	lw	a5,0(a5)
    191e:	faf42223          	sw	a5,-92(s0)
    model->release_time = millis();
    1922:	fac42783          	lw	a5,-84(s0)
    1926:	439c                	lw	a5,0(a5)
    1928:	f8f42e23          	sw	a5,-100(s0)
    model->btn_state = newState;
    192c:	478d                	li	a5,3
    192e:	b66d                	j	14d8 <main+0x5c4>
    model->debounce_time = time;
    1930:	fa842703          	lw	a4,-88(s0)
    1934:	fae42223          	sw	a4,-92(s0)
        break;
    }

    case BTN_DOWN2:
        // Second release
        if (read > 0) {
    1938:	bc0786e3          	beqz	a5,1504 <main+0x5f0>
			printf("Double Click\n");
    193c:	6789                	lui	a5,0x2
    193e:	d7478513          	addi	a0,a5,-652 # 1d74 <DMA1_Channel3_IRQHandler+0xb0>
    1942:	b7f1                	j	190e <main+0x9fa>
    model->debounce_time = time;
    1944:	fa842783          	lw	a5,-88(s0)
    1948:	faf42223          	sw	a5,-92(s0)
        } else if (release_duration > TICK_CLICK_DUR) {
    194c:	4785                	li	a5,1
    194e:	b669                	j	14d8 <main+0x5c4>
    if (x_idx >= 160) x_idx = 0;
    1950:	00030023          	sb	zero,0(t1)
    1954:	bb91                	j	16a8 <main+0x794>
    if (y_idx >= 80) y_idx = 0;
    1956:	00030023          	sb	zero,0(t1)
    195a:	b34d                	j	16fc <main+0x7e8>
    195c:	f9042603          	lw	a2,-112(s0)
    1960:	979a                	add	a5,a5,t1
    1962:	078a                	slli	a5,a5,0x2
    1964:	97b2                	add	a5,a5,a2
            edges[valid_edges].x_curr = x_start << 16;
    1966:	01059293          	slli	t0,a1,0x10
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    196a:	8d0d                	sub	a0,a0,a1
            edges[valid_edges].x_curr = x_start << 16;
    196c:	0057a423          	sw	t0,8(a5)
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    1970:	40e685b3          	sub	a1,a3,a4
    1974:	0542                	slli	a0,a0,0x10
    1976:	f4d42e23          	sw	a3,-164(s0)
    197a:	f6642023          	sw	t1,-160(s0)
            edges[valid_edges].x_curr = x_start << 16;
    197e:	f6f42223          	sw	a5,-156(s0)
            edges[valid_edges].x_step = ((int32_t)(p0->x - p1->x) << 16) / (p0->y - p1->y);
    1982:	f6e42423          	sw	a4,-152(s0)
    1986:	f32fe0ef          	jal	ra,b8 <__divsi3>
    198a:	f6842703          	lw	a4,-152(s0)
    198e:	f6442783          	lw	a5,-156(s0)
    1992:	f5c42603          	lw	a2,-164(s0)
    1996:	86ba                	mv	a3,a4
    1998:	f6042303          	lw	t1,-160(s0)
    199c:	c3c8                	sw	a0,4(a5)
    199e:	8732                	mv	a4,a2
    19a0:	b5e1                	j	1868 <main+0x954>
            if (y >= edges[i].y_min && y < edges[i].y_max) {
    19a2:	00079603          	lh	a2,0(a5)
    19a6:	02c6c863          	blt	a3,a2,19d6 <main+0xac2>
    19aa:	00279603          	lh	a2,2(a5)
    19ae:	02c6d463          	bge	a3,a2,19d6 <main+0xac2>
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    19b2:	0087a283          	lw	t0,8(a5)
    19b6:	00148513          	addi	a0,s1,1
    19ba:	ff440613          	addi	a2,s0,-12
    19be:	0486                	slli	s1,s1,0x1
    19c0:	94b2                	add	s1,s1,a2
    19c2:	00b28633          	add	a2,t0,a1
    19c6:	8641                	srai	a2,a2,0x10
    19c8:	fcc49c23          	sh	a2,-40(s1)
                // Update x for next scanline
                edges[i].x_curr += edges[i].x_step;
    19cc:	43d0                	lw	a2,4(a5)
                intersections[num_intersections++] = (edges[i].x_curr + (1 << 15)) >> 16;
    19ce:	0ff57493          	andi	s1,a0,255
                edges[i].x_curr += edges[i].x_step;
    19d2:	9616                	add	a2,a2,t0
    19d4:	c790                	sw	a2,8(a5)
        for (uint8_t i = 0; i < valid_edges; i++) {
    19d6:	0705                	addi	a4,a4,1
    19d8:	0ff77713          	andi	a4,a4,255
    19dc:	07b1                	addi	a5,a5,12
    19de:	fc6712e3          	bne	a4,t1,19a2 <main+0xa8e>
    19e2:	fcc40293          	addi	t0,s0,-52
    19e6:	8616                	mv	a2,t0
            }
        }

        // Insertion sort (from previous optimization)
        for (uint8_t i = 1; i < num_intersections; i++) {
    19e8:	4705                	li	a4,1
            int16_t key = intersections[i];
            int8_t j = i - 1;
            while (j >= 0 && intersections[j] > key) {
    19ea:	50fd                	li	ra,-1
        for (uint8_t i = 1; i < num_intersections; i++) {
    19ec:	1a976863          	bltu	a4,s1,1b9c <main+0xc88>
    19f0:	00148393          	addi	t2,s1,1
    19f4:	0386                	slli	t2,t2,0x1
    19f6:	8085                	srli	s1,s1,0x1
    19f8:	1fc3f393          	andi	t2,t2,508
    19fc:	048a                	slli	s1,s1,0x2
    19fe:	9396                	add	t2,t2,t0
    1a00:	9496                	add	s1,s1,t0
            }
            intersections[j + 1] = key;
        }

        // Fill between pairs
        for (uint8_t i = 0; i < num_intersections; i += 2) {
    1a02:	1c729e63          	bne	t0,t2,1bde <main+0xcca>
    1a06:	0685                	addi	a3,a3,1
    1a08:	01069713          	slli	a4,a3,0x10
    1a0c:	8341                	srli	a4,a4,0x10
    1a0e:	06c2                	slli	a3,a3,0x10
    for (int16_t y = min_y; y <= max_y; y++) {
    1a10:	04700793          	li	a5,71
    1a14:	86c1                	srai	a3,a3,0x10
    1a16:	e8f711e3          	bne	a4,a5,1898 <main+0x984>
    1a1a:	4485                	li	s1,1
        Point16_t p1 = vertices[(i + 1) % num_vertices]; // Wrap around to connect last vertex to first
    1a1c:	458d                	li	a1,3
    1a1e:	8526                	mv	a0,s1
    1a20:	ef0fe0ef          	jal	ra,110 <__modsi3>
    1a24:	fbc40793          	addi	a5,s0,-68
    1a28:	050a                	slli	a0,a0,0x2
    1a2a:	953e                	add	a0,a0,a5
        tft_draw_line(p0.x, p0.y, p1.x, p1.y, color, width); // Draw edge with specified width
    1a2c:	00251683          	lh	a3,2(a0)
    1a30:	00051603          	lh	a2,0(a0)
    1a34:	f9842583          	lw	a1,-104(s0)
    1a38:	f9842503          	lw	a0,-104(s0)
    1a3c:	6741                	lui	a4,0x10
    1a3e:	00259583          	lh	a1,2(a1) # 8002 <lib_i2c.c.d894f163+0xef4>
    1a42:	00051503          	lh	a0,0(a0)
    1a46:	4789                	li	a5,2
    1a48:	177d                	addi	a4,a4,-1
    1a4a:	be3fe0ef          	jal	ra,62c <tft_draw_line>
    for (uint16_t i = 0; i < num_vertices; i++) {
    1a4e:	f9842783          	lw	a5,-104(s0)
    1a52:	0485                	addi	s1,s1,1
    1a54:	0791                	addi	a5,a5,4
    1a56:	f8f42c23          	sw	a5,-104(s0)
    1a5a:	4791                	li	a5,4
    1a5c:	fcf490e3          	bne	s1,a5,1a1c <main+0xb08>
    // tft_draw_ring((Point16_t){ 50, 50 }, 20, 0x07E0, 5); // Green ring with radius = 30 and width = 5


    // draw rectangles
    static uint8_t rect_idx = 0;
    tft_draw_rect(rect_idx, rect_idx, 160 - (rect_idx << 1), 80 - (rect_idx << 1), colors[rand8() % 19]);
    1a60:	c6c18313          	addi	t1,gp,-916 # 20000068 <rect_idx.3>
    1a64:	00034483          	lbu	s1,0(t1)
    1a68:	f6c42103          	lw	sp,-148(s0)
    1a6c:	01049793          	slli	a5,s1,0x10
    1a70:	83c1                	srli	a5,a5,0x10
    1a72:	00149713          	slli	a4,s1,0x1
    1a76:	f8f42823          	sw	a5,-112(s0)
    1a7a:	f8e42c23          	sw	a4,-104(s0)
    1a7e:	dabfe0ef          	jal	ra,828 <rand8>
    1a82:	45cd                	li	a1,19
    1a84:	e68fe0ef          	jal	ra,ec <__umodsi3>
    1a88:	f9442783          	lw	a5,-108(s0)
    1a8c:	f9842703          	lw	a4,-104(s0)
    1a90:	0ff57513          	andi	a0,a0,255
    1a94:	0506                	slli	a0,a0,0x1
    1a96:	953e                	add	a0,a0,a5
    1a98:	05000693          	li	a3,80
    1a9c:	f9042783          	lw	a5,-112(s0)
    1aa0:	0a000613          	li	a2,160
    1aa4:	8e99                	sub	a3,a3,a4
    1aa6:	8e19                	sub	a2,a2,a4
    1aa8:	00055703          	lhu	a4,0(a0)
    1aac:	06c2                	slli	a3,a3,0x10
    1aae:	0642                	slli	a2,a2,0x10
    1ab0:	82c1                	srli	a3,a3,0x10
    1ab2:	85be                	mv	a1,a5
    1ab4:	853e                	mv	a0,a5
    1ab6:	8241                	srli	a2,a2,0x10
    1ab8:	d01fe0ef          	jal	ra,7b8 <tft_draw_rect>
    rect_idx += 1;
    1abc:	00148793          	addi	a5,s1,1
    1ac0:	0ff7f793          	andi	a5,a5,255
    if (rect_idx >= 40) rect_idx = 0;
    1ac4:	02700713          	li	a4,39
    1ac8:	c6c18313          	addi	t1,gp,-916 # 20000068 <rect_idx.3>
    1acc:	14f76a63          	bltu	a4,a5,1c20 <main+0xd0c>
    rect_idx += 1;
    1ad0:	00f30023          	sb	a5,0(t1)

    // draw random rectangles
    tft_draw_rect(rand8() % 140, rand8() % 60, 20, 20, colors[rand8() % 19]);
    1ad4:	d55fe0ef          	jal	ra,828 <rand8>
    1ad8:	f8a42823          	sw	a0,-112(s0)
    1adc:	d4dfe0ef          	jal	ra,828 <rand8>
    1ae0:	84aa                	mv	s1,a0
    1ae2:	d47fe0ef          	jal	ra,828 <rand8>
    1ae6:	45cd                	li	a1,19
    1ae8:	e04fe0ef          	jal	ra,ec <__umodsi3>
    1aec:	f9442703          	lw	a4,-108(s0)
    1af0:	0ff57793          	andi	a5,a0,255
    1af4:	0786                	slli	a5,a5,0x1
    1af6:	97ba                	add	a5,a5,a4
    1af8:	0007d703          	lhu	a4,0(a5)
    1afc:	03c00593          	li	a1,60
    1b00:	8526                	mv	a0,s1
    1b02:	f8e42c23          	sw	a4,-104(s0)
    1b06:	de6fe0ef          	jal	ra,ec <__umodsi3>
    1b0a:	f9042683          	lw	a3,-112(s0)
    1b0e:	0ff57493          	andi	s1,a0,255
    1b12:	08c00593          	li	a1,140
    1b16:	8536                	mv	a0,a3
    1b18:	dd4fe0ef          	jal	ra,ec <__umodsi3>
    1b1c:	f9842703          	lw	a4,-104(s0)
    1b20:	4651                	li	a2,20
    1b22:	46d1                	li	a3,20
    1b24:	85a6                	mv	a1,s1
    1b26:	0ff57513          	andi	a0,a0,255
    1b2a:	c8ffe0ef          	jal	ra,7b8 <tft_draw_rect>

    // draw filled rectangles
    tft_fill_rect(rand8() % 140, rand8() % 60, 20, 20, colors[rand8() % 19]);
    1b2e:	cfbfe0ef          	jal	ra,828 <rand8>
    1b32:	f8a42823          	sw	a0,-112(s0)
    1b36:	cf3fe0ef          	jal	ra,828 <rand8>
    1b3a:	84aa                	mv	s1,a0
    1b3c:	cedfe0ef          	jal	ra,828 <rand8>
    1b40:	45cd                	li	a1,19
    1b42:	daafe0ef          	jal	ra,ec <__umodsi3>
    1b46:	f9442703          	lw	a4,-108(s0)
    1b4a:	0ff57793          	andi	a5,a0,255
    1b4e:	0786                	slli	a5,a5,0x1
    1b50:	97ba                	add	a5,a5,a4
    1b52:	0007d703          	lhu	a4,0(a5)
    1b56:	03c00593          	li	a1,60
    1b5a:	8526                	mv	a0,s1
    1b5c:	f8e42c23          	sw	a4,-104(s0)
    1b60:	d8cfe0ef          	jal	ra,ec <__umodsi3>
    1b64:	f9042683          	lw	a3,-112(s0)
    1b68:	0ff57493          	andi	s1,a0,255
    1b6c:	08c00593          	li	a1,140
    1b70:	8536                	mv	a0,a3
    1b72:	d7afe0ef          	jal	ra,ec <__umodsi3>
    1b76:	f9842703          	lw	a4,-104(s0)
    1b7a:	85a6                	mv	a1,s1
    1b7c:	46d1                	li	a3,20
    1b7e:	4651                	li	a2,20
    1b80:	0ff57513          	andi	a0,a0,255
    1b84:	97dfe0ef          	jal	ra,500 <tft_fill_rect>
	handler();
	return micros() - now;
    1b88:	e000f7b7          	lui	a5,0xe000f
    1b8c:	479c                	lw	a5,8(a5)
			session.timeRef_1sec = now;
    1b8e:	fa842483          	lw	s1,-88(s0)

			fun_encoder_task(&encoder_a, encoder_onChanged);
			fun_joystick_task(joystick_onChanged);
		}

		session.fullCycle_time = millis() - now;
    1b92:	fac42783          	lw	a5,-84(s0)
    1b96:	439c                	lw	a5,0(a5)
	while(1) {
    1b98:	8f1ff06f          	j	1488 <main+0x574>
    1b9c:	fff70793          	addi	a5,a4,-1 # ffff <lib_i2c.c.d894f163+0x8ef1>
            int16_t key = intersections[i];
    1ba0:	00261503          	lh	a0,2(a2)
    1ba4:	07e2                	slli	a5,a5,0x18
    1ba6:	87e1                	srai	a5,a5,0x18
    1ba8:	85b2                	mv	a1,a2
            while (j >= 0 && intersections[j] > key) {
    1baa:	00059383          	lh	t2,0(a1)
    1bae:	00755a63          	bge	a0,t2,1bc2 <main+0xcae>
    1bb2:	17fd                	addi	a5,a5,-1
    1bb4:	07e2                	slli	a5,a5,0x18
                intersections[j + 1] = intersections[j];
    1bb6:	00759123          	sh	t2,2(a1)
    1bba:	87e1                	srai	a5,a5,0x18
            while (j >= 0 && intersections[j] > key) {
    1bbc:	15f9                	addi	a1,a1,-2
    1bbe:	fe1796e3          	bne	a5,ra,1baa <main+0xc96>
            intersections[j + 1] = key;
    1bc2:	0785                	addi	a5,a5,1
    1bc4:	07e2                	slli	a5,a5,0x18
    1bc6:	87e1                	srai	a5,a5,0x18
    1bc8:	0786                	slli	a5,a5,0x1
    1bca:	ff440593          	addi	a1,s0,-12
    1bce:	97ae                	add	a5,a5,a1
        for (uint8_t i = 1; i < num_intersections; i++) {
    1bd0:	0705                	addi	a4,a4,1
            intersections[j + 1] = key;
    1bd2:	fca79c23          	sh	a0,-40(a5) # e000efd8 <_eusrstack+0xc000e7d8>
        for (uint8_t i = 1; i < num_intersections; i++) {
    1bd6:	0ff77713          	andi	a4,a4,255
    1bda:	0609                	addi	a2,a2,2
    1bdc:	bd01                	j	19ec <main+0xad8>
            if (i + 1 >= num_intersections) break;
    1bde:	e29284e3          	beq	t0,s1,1a06 <main+0xaf2>
            int16_t x0 = intersections[i];
    1be2:	00029503          	lh	a0,0(t0)
            int16_t x1 = intersections[i + 1];
    1be6:	00229603          	lh	a2,2(t0)
            if (x1 > x0) {
    1bea:	02c55963          	bge	a0,a2,1c1c <main+0xd08>
                tft_draw_line(x0, y, x1, y, fill_color, 1);
    1bee:	6741                	lui	a4,0x10
    1bf0:	85b6                	mv	a1,a3
    1bf2:	4785                	li	a5,1
    1bf4:	80070713          	addi	a4,a4,-2048 # f800 <lib_i2c.c.d894f163+0x86f2>
    1bf8:	f6642023          	sw	t1,-160(s0)
    1bfc:	f6742223          	sw	t2,-156(s0)
    1c00:	f6542423          	sw	t0,-152(s0)
    1c04:	f8d42623          	sw	a3,-116(s0)
    1c08:	a25fe0ef          	jal	ra,62c <tft_draw_line>
    1c0c:	f6042303          	lw	t1,-160(s0)
    1c10:	f6442383          	lw	t2,-156(s0)
    1c14:	f6842283          	lw	t0,-152(s0)
    1c18:	f8c42683          	lw	a3,-116(s0)
    1c1c:	0291                	addi	t0,t0,4
    1c1e:	b3d5                	j	1a02 <main+0xaee>
    if (rect_idx >= 40) rect_idx = 0;
    1c20:	00030023          	sb	zero,0(t1)
    1c24:	bd45                	j	1ad4 <main+0xbc0>
		else if (now - session.timeRef_100ms > 100) {
    1c26:	f7c42703          	lw	a4,-132(s0)
    1c2a:	fa842783          	lw	a5,-88(s0)
    1c2e:	8f99                	sub	a5,a5,a4
    1c30:	06400713          	li	a4,100
    1c34:	04f76a63          	bltu	a4,a5,1c88 <main+0xd74>
		else if (now - session.timeRef_50ms > 50) {
    1c38:	f8042703          	lw	a4,-128(s0)
    1c3c:	fa842783          	lw	a5,-88(s0)
    1c40:	8f99                	sub	a5,a5,a4
    1c42:	03200713          	li	a4,50
    1c46:	f4f776e3          	bgeu	a4,a5,1b92 <main+0xc7e>
};

static uint32_t encoder_debounceTime = 0;

void fun_encoder_task(Encoder_t *model, void (*handler)(uint8_t, uint8_t)) {
	uint16_t count = TIM2->CNT;
    1c4a:	400007b7          	lui	a5,0x40000
    1c4e:	0247d783          	lhu	a5,36(a5) # 40000024 <_eusrstack+0x1ffff824>

	if (count != model->last_count) {
    1c52:	f7442703          	lw	a4,-140(s0)
	uint16_t count = TIM2->CNT;
    1c56:	07c2                	slli	a5,a5,0x10
    1c58:	83c1                	srli	a5,a5,0x10
	if (count != model->last_count) {
    1c5a:	00e78563          	beq	a5,a4,1c64 <main+0xd50>
	mngI2c_load_encoder(millis(), position, direction);
    1c5e:	fac42703          	lw	a4,-84(s0)
    1c62:	4318                	lw	a4,0(a4)
}

uint32_t joystick_timeRef = 0;

void fun_joystick_task(void (*handler)(uint16_t, uint16_t)) {
	uint16_t x = 10 * ((adc_buffer[0] + 5) / 10);		// round to nearest 10
    1c64:	f7042703          	lw	a4,-144(s0)
	uint16_t count = TIM2->CNT;
    1c68:	f6f42a23          	sw	a5,-140(s0)
			session.timeRef_50ms = now;
    1c6c:	fa842783          	lw	a5,-88(s0)
    1c70:	00075703          	lhu	a4,0(a4)
	uint16_t y = 10 * ((adc_buffer[1] + 5) / 10);		// round to nearest 10
    1c74:	f7042703          	lw	a4,-144(s0)
    1c78:	f8f42023          	sw	a5,-128(s0)
    1c7c:	00275703          	lhu	a4,2(a4)
	mngI2c_load_joystick(millis(), x, y);
    1c80:	fac42703          	lw	a4,-84(s0)
    1c84:	4318                	lw	a4,0(a4)
	void mngI2c_load_joystick(uint32_t time, uint16_t x, uint16_t y) {}
    1c86:	b731                	j	1b92 <main+0xc7e>
			session.timeRef_100ms = now;
    1c88:	fa842783          	lw	a5,-88(s0)
    1c8c:	f6f42e23          	sw	a5,-132(s0)
    1c90:	b709                	j	1b92 <main+0xc7e>

00001c92 <SysTick_Handler>:
{
    1c92:	1151                	addi	sp,sp,-12
    1c94:	c03e                	sw	a5,0(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1c96:	e000f7b7          	lui	a5,0xe000f
{
    1c9a:	c23a                	sw	a4,4(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1c9c:	4b98                	lw	a4,16(a5)
{
    1c9e:	c436                	sw	a3,8(sp)
	SysTick->CMP += SYSTICK_ONE_MILLISECOND;
    1ca0:	66b1                	lui	a3,0xc
    1ca2:	b8068693          	addi	a3,a3,-1152 # bb80 <lib_i2c.c.d894f163+0x4a72>
    1ca6:	9736                	add	a4,a4,a3
    1ca8:	cb98                	sw	a4,16(a5)
	SysTick->SR = 0x00000000;
    1caa:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000e804>
	systick_millis++;
    1cae:	c7018793          	addi	a5,gp,-912 # 2000006c <systick_millis>
    1cb2:	4398                	lw	a4,0(a5)
}
    1cb4:	46a2                	lw	a3,8(sp)
	systick_millis++;
    1cb6:	0705                	addi	a4,a4,1
    1cb8:	c398                	sw	a4,0(a5)
}
    1cba:	4712                	lw	a4,4(sp)
    1cbc:	4782                	lw	a5,0(sp)
    1cbe:	0131                	addi	sp,sp,12
    1cc0:	30200073          	mret

00001cc4 <DMA1_Channel3_IRQHandler>:
	}
}
#else
void DMA1_Channel3_IRQHandler( void ) __attribute__((interrupt));
void DMA1_Channel3_IRQHandler( void ) 
{
    1cc4:	fcc10113          	addi	sp,sp,-52
    1cc8:	c23e                	sw	a5,4(sp)
	//GPIOD->BSHR = 1;	 // Turn on GPIOD0 for profiling

	// Backup flags.
	volatile int intfr = DMA1->INTFR;
    1cca:	400207b7          	lui	a5,0x40020
    1cce:	439c                	lw	a5,0(a5)
{
    1cd0:	d022                	sw	s0,32(sp)
    1cd2:	ce26                	sw	s1,28(sp)
    1cd4:	d806                	sw	ra,48(sp)
    1cd6:	d616                	sw	t0,44(sp)
    1cd8:	d41a                	sw	t1,40(sp)
    1cda:	d21e                	sw	t2,36(sp)
    1cdc:	cc2a                	sw	a0,24(sp)
    1cde:	ca2e                	sw	a1,20(sp)
    1ce0:	c832                	sw	a2,16(sp)
    1ce2:	c636                	sw	a3,12(sp)
    1ce4:	c43a                	sw	a4,8(sp)
	volatile int intfr = DMA1->INTFR;
    1ce6:	c03e                	sw	a5,0(sp)
	do
	{
		// Clear all possible flags.
		DMA1->INTFCR = DMA1_IT_GL3;
    1ce8:	40020437          	lui	s0,0x40020
    1cec:	10000493          	li	s1,256
    1cf0:	c044                	sw	s1,4(s0)

		// Strange note: These are backwards.  DMA1_IT_HT3 should be HALF and
		// DMA1_IT_TC3 should be COMPLETE.  But for some reason, doing this causes
		// LED jitter.  I am henseforth flipping the order.

		if( intfr & DMA1_IT_HT3 )
    1cf2:	4782                	lw	a5,0(sp)
    1cf4:	4007f793          	andi	a5,a5,1024
    1cf8:	c791                	beqz	a5,1d04 <DMA1_Channel3_IRQHandler+0x40>
		{
			// Halfwaay (Fill in first part)
			WS2812FillBuffSec( WS2812dmabuff, DMA_BUFFER_LEN / 2, 1 );
    1cfa:	4585                	li	a1,1
    1cfc:	c7818513          	addi	a0,gp,-904 # 20000074 <WS2812dmabuff>
    1d00:	c75fe0ef          	jal	ra,974 <WS2812FillBuffSec.constprop.0>
		}
		if( intfr & DMA1_IT_TC3 )
    1d04:	4782                	lw	a5,0(sp)
    1d06:	2007f793          	andi	a5,a5,512
    1d0a:	c791                	beqz	a5,1d16 <DMA1_Channel3_IRQHandler+0x52>
		{
			// Complete (Fill in second part)
			WS2812FillBuffSec( WS2812dmabuff + DMA_BUFFER_LEN / 2, DMA_BUFFER_LEN / 2, 0 );
    1d0c:	4581                	li	a1,0
    1d0e:	ca818513          	addi	a0,gp,-856 # 200000a4 <WS2812dmabuff+0x30>
    1d12:	c63fe0ef          	jal	ra,974 <WS2812FillBuffSec.constprop.0>
		}
		intfr = DMA1->INTFR;
    1d16:	401c                	lw	a5,0(s0)
    1d18:	c03e                	sw	a5,0(sp)
	} while( intfr & DMA1_IT_GL3 );
    1d1a:	4782                	lw	a5,0(sp)
    1d1c:	1007f793          	andi	a5,a5,256
    1d20:	fbe1                	bnez	a5,1cf0 <DMA1_Channel3_IRQHandler+0x2c>

	//GPIOD->BSHR = 1<<16; // Turn off GPIOD0 for profiling
}
    1d22:	5402                	lw	s0,32(sp)
    1d24:	50c2                	lw	ra,48(sp)
    1d26:	52b2                	lw	t0,44(sp)
    1d28:	5322                	lw	t1,40(sp)
    1d2a:	5392                	lw	t2,36(sp)
    1d2c:	44f2                	lw	s1,28(sp)
    1d2e:	4562                	lw	a0,24(sp)
    1d30:	45d2                	lw	a1,20(sp)
    1d32:	4642                	lw	a2,16(sp)
    1d34:	46b2                	lw	a3,12(sp)
    1d36:	4722                	lw	a4,8(sp)
    1d38:	4792                	lw	a5,4(sp)
    1d3a:	03410113          	addi	sp,sp,52
    1d3e:	30200073          	mret
    1d42:	0000                	unimp
    1d44:	000a                	c.slli	zero,0x2
    1d46:	0000                	unimp
    1d48:	6f42                	flw	ft10,16(sp)
    1d4a:	4320746f          	jal	s0,917c <lib_i2c.c.d894f163+0x206e>
    1d4e:	746e756f          	jal	a0,e9494 <lib_i2c.c.d894f163+0xe2386>
    1d52:	203a                	fld	ft0,392(sp)
    1d54:	6425                	lui	s0,0x9
    1d56:	000a                	c.slli	zero,0x2
    1d58:	6f4c                	flw	fa1,28(a4)
    1d5a:	676e                	flw	fa4,216(sp)
    1d5c:	5020                	lw	s0,96(s0)
    1d5e:	6572                	flw	fa0,28(sp)
    1d60:	00007373          	csrrci	t1,ustatus,0
    1d64:	676e6953          	0x676e6953
    1d68:	656c                	flw	fa1,76(a0)
    1d6a:	4320                	lw	s0,64(a4)
    1d6c:	696c                	flw	fa1,84(a0)
    1d6e:	00006b63          	bltu	zero,zero,1d84 <DMA1_Channel3_IRQHandler+0xc0>
    1d72:	0000                	unimp
    1d74:	6f44                	flw	fs1,28(a4)
    1d76:	6275                	lui	tp,0x1d
    1d78:	656c                	flw	fa1,76(a0)
    1d7a:	4320                	lw	s0,64(a4)
    1d7c:	696c                	flw	fa1,84(a0)
    1d7e:	00006b63          	bltu	zero,zero,1d94 <DMA1_Channel3_IRQHandler+0xd0>
    1d82:	0000                	unimp
    1d84:	6548                	flw	fa0,12(a0)
    1d86:	6c6c                	flw	fa1,92(s0)
    1d88:	6f57206f          	j	74c7c <lib_i2c.c.d894f163+0x6db6e>
    1d8c:	6c72                	flw	fs8,28(sp)
    1d8e:	2164                	fld	fs1,192(a0)
    1d90:	0000                	unimp
    1d92:	0000                	unimp
    1d94:	1609                	addi	a2,a2,-30
    1d96:	2009                	jal	1d98 <DMA1_Channel3_IRQHandler+0xd4>
    1d98:	1b21                	addi	s6,s6,-24
    1d9a:	15171913          	0x15171913
    1d9e:	2b1e                	fld	fs6,448(sp)
    1da0:	0504                	addi	s1,sp,640
    1da2:	0e02                	c.slli64	t3
    1da4:	0000                	unimp
    1da6:	0000                	unimp
    1da8:	1e08140b          	0x1e08140b
    1dac:	1d22                	slli	s10,s10,0x28
    1dae:	1e18                	addi	a4,sp,816
    1db0:	2b241a1b          	0x2b241a1b
    1db4:	0606                	slli	a2,a2,0x1
    1db6:	0f02                	c.slli64	t5
    1db8:	0000                	unimp
	...

00001dbc <SIN_LUT2>:
    1dbc:	0100 0101 0101 0202 0403 0504 0706 0908     ................
    1dcc:	0b0a 0e0d 1110 1413 1816 1b1a 1f1d 2421     ..............!$
    1ddc:	2826 2d2a 312f 3634 3c39 413e 4744 4c49     &(*-/1469<>ADGIL
    1dec:	524f 5855 5e5b 6461 6a67 706d 7673 7d79     ORUX[^adgjmpsvy}
    1dfc:	8380 8986 8f8c 9592 9c99 a29f a8a5 adab     ................
    1e0c:	b3b0 b9b6 bebc c4c1 c9c6 cecb d3d0 d7d5     ................
    1e1c:	dcda e0de e4e2 e8e6 ebe9 eeed f1f0 f4f3     ................
    1e2c:	f6f5 f8f7 faf9 fcfb fdfc fefe fffe ffff     ................
    1e3c:	ffff ffff fefe fdfe fcfc fafb f8f9 f6f7     ................
    1e4c:	f4f5 f1f3 eef0 ebed e8e9 e4e6 e0e2 dcde     ................
    1e5c:	d7da d3d5 ced0 c9cb c4c6 bec1 b9bc b3b6     ................
    1e6c:	adb0 a8ab a2a5 9c9f 9599 8f92 898c 8386     ................
    1e7c:	7d80 7679 7073 6a6d 6467 5e61 585b 5255     .}yvspmjgda^[XUR
    1e8c:	4c4f 4749 4144 3c3e 3639 3134 2d2f 282a     OLIGDA><9641/-*(
    1e9c:	2426 1f21 1b1d 181a 1416 1113 0e10 0b0d     &$!.............
    1eac:	090a 0708 0506 0404 0203 0102 0101 0101     ................

00001ebc <bitquartets.7>:
    1ebc:	8888 888e 88e8 88ee 8e88 8e8e 8ee8 8eee     ................
    1ecc:	e888 e88e e8e8 e8ee ee88 ee8e eee8 eeee     ................

00001edc <colors>:
    1edc:	0000 000f 03e0 03ef 7800 780f 7be0 c618     .........x.x.{..
    1eec:	7bef 001f 07e0 07ff f800 f81f ffe0 ffff     .{..............
    1efc:	fd20 afe5 fc18 0000                          .......

00001f04 <font>:
    1f04:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
    1f14:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
    1f24:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
    1f34:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
    1f44:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
    1f54:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
    1f64:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
    1f74:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
    1f84:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
    1f94:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
    1fa4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
    1fb4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
    1fc4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
    1fd4:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
    1fe4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
    1ff4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
    2004:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
    2014:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
    2024:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
    2034:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
    2044:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
    2054:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
    2064:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
    2074:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
    2084:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
    2094:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
    20a4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
    20b4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
    20c4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
    20d4:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
    20e4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
    20f4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
    2104:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
    2114:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
    2124:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
    2134:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
    2144:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
    2154:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
    2164:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
    2174:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
    2184:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
    2194:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
    21a4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
    21b4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
    21c4:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
    21d4:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
    21e4:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
    21f4:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
    2204:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
    2214:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
    2224:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
    2234:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
    2244:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
    2254:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
    2264:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
    2274:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
    2284:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
    2294:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
    22a4:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
    22b4:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
    22c4:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
    22d4:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
    22e4:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
    22f4:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
    2304:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
    2314:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
    2324:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
    2334:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
    2344:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
    2354:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
    2364:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
    2374:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
    2384:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
    2394:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
    23a4:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
    23b4:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
    23c4:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
    23d4:	6b6b 3608 3612 3624 0600 0909 0006 1800     kk.6.6$6........
    23e4:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
    23f4:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

00002404 <message.0>:
    2404:	6548 6c6c 206f 6f57 6c72 2164 0a0d 0000     Hello World!....

Disassembly of section .data:

20000000 <color_arr>:
20000000:	0033 0000 3300 0000 0000 0033               3....3....3.

2000000c <leds_frame>:
2000000c:	0000 0000 0046 0000 0001 0000 0000 0000     ....F...........
2000001c:	0000 0000                                   ....

20000020 <color_ani>:
20000020:	0000 2000 0003 0000                         ... ....

20000028 <lfsr>:
20000028:	0001 0000 0000 0000                         ........

20000030 <DMA1_Channel4_IRQHandler>:
{
20000030:	1151                	addi	sp,sp,-12
20000032:	c23a                	sw	a4,4(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
20000034:	40020737          	lui	a4,0x40020
{
20000038:	c03e                	sw	a5,0(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000003a:	435c                	lw	a5,4(a4)
{
2000003c:	c436                	sw	a3,8(sp)
	DMA1->INTFCR |= DMA_CTCIF4;
2000003e:	6689                	lui	a3,0x2
20000040:	8fd5                	or	a5,a5,a3
20000042:	c35c                	sw	a5,4(a4)
}
20000044:	46a2                	lw	a3,8(sp)
20000046:	4712                	lw	a4,4(sp)
20000048:	4782                	lw	a5,0(sp)
2000004a:	0131                	addi	sp,sp,12
2000004c:	30200073          	mret
