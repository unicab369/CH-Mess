
example.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
	void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault"))) __attribute((naked));
	void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init"))) __attribute((naked));
	void InterruptVectorDefault( void )
	{
		#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
			asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	0f80006f          	j	f8 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	01b8                	addi	a4,sp,200
   a:	0000                	unimp
   c:	0168                	addi	a0,sp,140
	...
  2e:	0000                	unimp
  30:	0168                	addi	a0,sp,140
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0168                	addi	a0,sp,140
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0168                	addi	a0,sp,140
  42:	0000                	unimp
  44:	0168                	addi	a0,sp,140
  46:	0000                	unimp
  48:	0168                	addi	a0,sp,140
  4a:	0000                	unimp
  4c:	0168                	addi	a0,sp,140
  4e:	0000                	unimp
  50:	04c0                	addi	s0,sp,580
  52:	0000                	unimp
  54:	0168                	addi	a0,sp,140
  56:	0000                	unimp
  58:	0168                	addi	a0,sp,140
  5a:	0000                	unimp
  5c:	0168                	addi	a0,sp,140
  5e:	0000                	unimp
  60:	0168                	addi	a0,sp,140
  62:	0000                	unimp
  64:	0168                	addi	a0,sp,140
  66:	0000                	unimp
  68:	0168                	addi	a0,sp,140
  6a:	0000                	unimp
  6c:	0168                	addi	a0,sp,140
  6e:	0000                	unimp
  70:	0168                	addi	a0,sp,140
  72:	0000                	unimp
  74:	0168                	addi	a0,sp,140
  76:	0000                	unimp
  78:	0168                	addi	a0,sp,140
  7a:	0000                	unimp
  7c:	0168                	addi	a0,sp,140
  7e:	0000                	unimp
  80:	0168                	addi	a0,sp,140
  82:	0000                	unimp
  84:	0168                	addi	a0,sp,140
  86:	0000                	unimp
  88:	0168                	addi	a0,sp,140
  8a:	0000                	unimp
  8c:	0168                	addi	a0,sp,140
  8e:	0000                	unimp
  90:	0168                	addi	a0,sp,140
  92:	0000                	unimp
  94:	0168                	addi	a0,sp,140
  96:	0000                	unimp
  98:	0168                	addi	a0,sp,140
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <PrintHex>:
	while( (*DMDATA0) & 0x80 );
  a0:	e0000737          	lui	a4,0xe0000
  a4:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
  a8:	0f470693          	addi	a3,a4,244
  ac:	0807f793          	andi	a5,a5,128
  b0:	fbf5                	bnez	a5,a4 <PrintHex+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
  b2:	783027b7          	lui	a5,0x78302
  b6:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
  ba:	c29c                	sw	a5,0(a3)
	for( shift = 28; shift >= 0; shift -= 4 )
  bc:	4771                	li	a4,28
		while( (*DMDATA0) & 0x80 );
  be:	e0000637          	lui	a2,0xe0000
		s += ( s < 10 ) ? '0' : ('a' - 10);
  c2:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
  c4:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
  c6:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
  ca:	0807f793          	andi	a5,a5,128
  ce:	ffe5                	bnez	a5,c6 <PrintHex+0x26>
		int s = (n>>shift) & 0xf;
  d0:	00e557b3          	srl	a5,a0,a4
  d4:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
  d8:	03000793          	li	a5,48
  dc:	00d35463          	bge	t1,a3,e4 <PrintHex+0x44>
  e0:	05700793          	li	a5,87
  e4:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
  e6:	07a2                	slli	a5,a5,0x8
  e8:	0857e793          	ori	a5,a5,133
  ec:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
  f0:	1771                	addi	a4,a4,-4
  f2:	fcb71ae3          	bne	a4,a1,c6 <PrintHex+0x26>
}
  f6:	8082                	ret

000000f8 <handle_reset>:

#if defined( CH32V003 ) || defined( CH32X03x ) || defined(CH32V00x)

void handle_reset( void )
{
	asm volatile( "\n\
  f8:	20000197          	auipc	gp,0x20000
  fc:	30418193          	addi	gp,gp,772 # 200003fc <__global_pointer$>
 100:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
 104:	6509                	lui	a0,0x2
 106:	88050513          	addi	a0,a0,-1920 # 1880 <ch32fun.c.b0d4c355+0x5fe>
 10a:	30051073          	csrw	mstatus,a0
 10e:	468d                	li	a3,3
 110:	00000517          	auipc	a0,0x0
 114:	ef050513          	addi	a0,a0,-272 # 0 <InterruptVector>
 118:	8d55                	or	a0,a0,a3
 11a:	30551073          	csrw	mtvec,a0
	csrw mtvec, a0\n" 
	: : : "a0", "a3", "memory");

	// Careful: Use registers to prevent overwriting of self-data.
	// This clears out BSS.
asm volatile(
 11e:	c0418513          	addi	a0,gp,-1020 # 20000000 <i.0>
 122:	c9418593          	addi	a1,gp,-876 # 20000090 <_ebss>
 126:	4601                	li	a2,0
 128:	00b55663          	bge	a0,a1,134 <handle_reset+0x3c>
 12c:	c110                	sw	a2,0(a0)
 12e:	0511                	addi	a0,a0,4
 130:	feb54ee3          	blt	a0,a1,12c <handle_reset+0x34>
 134:	00001517          	auipc	a0,0x1
 138:	8e050513          	addi	a0,a0,-1824 # a14 <_data_lma>
 13c:	c0418593          	addi	a1,gp,-1020 # 20000000 <i.0>
 140:	c0418613          	addi	a2,gp,-1020 # 20000000 <i.0>
 144:	00c58863          	beq	a1,a2,154 <handle_reset+0x5c>
 148:	4114                	lw	a3,0(a0)
 14a:	c194                	sw	a3,0(a1)
 14c:	0511                	addi	a0,a0,4
 14e:	0591                	addi	a1,a1,4
 150:	fec59ae3          	bne	a1,a2,144 <handle_reset+0x4c>
: : : "a0", "a1", "a2", "a3", "memory"
#endif
);

#if defined( FUNCONF_SYSTICK_USE_HCLK ) && FUNCONF_SYSTICK_USE_HCLK
	SysTick->CTLR = 5;
 154:	e000f7b7          	lui	a5,0xe000f
 158:	4715                	li	a4,5
 15a:	c398                	sw	a4,0(a5)
#else
	SysTick->CTLR = 1;
#endif

	// set mepc to be main as the root app.
asm volatile(
 15c:	21e00793          	li	a5,542
 160:	34179073          	csrw	mepc,a5
 164:	30200073          	mret

00000168 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
 168:	34102573          	csrr	a0,mepc
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
 16c:	3f15                	jal	a0 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
 16e:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
 172:	373d                	jal	a0 <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
 174:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
 178:	3725                	jal	a0 <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
 17a:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
 17e:	370d                	jal	a0 <PrintHex>
	while( (*DMDATA0) & 0x80 );
 180:	e0000737          	lui	a4,0xe0000
 184:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
 188:	0f470693          	addi	a3,a4,244
 18c:	0807f793          	andi	a5,a5,128
 190:	fbf5                	bnez	a5,184 <ADC1_2_IRQHandler+0x1c>
	*DMDATA0 = 0x0a85;
 192:	6785                	lui	a5,0x1
 194:	a8578793          	addi	a5,a5,-1403 # a85 <_data_lma+0x71>
 198:	c29c                	sw	a5,0(a3)
	while( (*DMDATA0) & 0x80 );
 19a:	e0000737          	lui	a4,0xe0000
 19e:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
 1a2:	0f470693          	addi	a3,a4,244
 1a6:	0807f793          	andi	a5,a5,128
 1aa:	fbf5                	bnez	a5,19e <ADC1_2_IRQHandler+0x36>
	*DMDATA0 = 0xaaaaaa83;
 1ac:	aaaab7b7          	lui	a5,0xaaaab
 1b0:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
 1b4:	c29c                	sw	a5,0(a3)
	asm volatile( "1: j 1b" );
 1b6:	a001                	j	1b6 <ADC1_2_IRQHandler+0x4e>

000001b8 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
 1b8:	40021737          	lui	a4,0x40021
 1bc:	471c                	lw	a5,8(a4)
 1be:	008006b7          	lui	a3,0x800
 1c2:	8fd5                	or	a5,a5,a3
 1c4:	c71c                	sw	a5,8(a4)

000001c6 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
 1c6:	400227b7          	lui	a5,0x40022
 1ca:	4705                	li	a4,1
 1cc:	c398                	sw	a4,0(a5)
#elif defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
 1ce:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
 1d2:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
 1d6:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
 1da:	08170713          	addi	a4,a4,129 # 1080081 <rv003usb.c.a1412ea1+0x107d95d>
 1de:	c398                	sw	a4,0(a5)
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

#if !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
 1e0:	009f0737          	lui	a4,0x9f0
 1e4:	c798                	sw	a4,8(a5)
#endif

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL && !defined(CH57x) && !defined(CH58x) && !defined(CH59x)
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
 1e6:	020006b7          	lui	a3,0x2000
 1ea:	40021737          	lui	a4,0x40021
 1ee:	431c                	lw	a5,0(a4)
 1f0:	8ff5                	and	a5,a5,a3
 1f2:	dff5                	beqz	a5,1ee <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
 1f4:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
 1f6:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
 1fa:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
 1fc:	0027e793          	ori	a5,a5,2
 200:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
 202:	4721                	li	a4,8
 204:	42dc                	lw	a5,4(a3)
 206:	8bb1                	andi	a5,a5,12
 208:	fee79ee3          	bne	a5,a4,204 <SystemInit+0x3e>
	*DMDATA1 = 0x00;
 20c:	e00007b7          	lui	a5,0xe0000
 210:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
 214:	08000713          	li	a4,128
 218:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
 21c:	8082                	ret

0000021e <main>:
#include <stdio.h>
#include <string.h>
#include "rv003usb.h"

int main()
{
 21e:	1151                	addi	sp,sp,-12
 220:	c406                	sw	ra,8(sp)
	SystemInit();
 222:	3755                	jal	1c6 <SystemInit>
	uint32_t targend = SysTick->CNT + n;
 224:	e000f7b7          	lui	a5,0xe000f
 228:	4798                	lw	a4,8(a5)
 22a:	67b1                	lui	a5,0xc
 22c:	b8078793          	addi	a5,a5,-1152 # bb80 <rv003usb.c.a1412ea1+0x945c>
 230:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
 232:	e000f6b7          	lui	a3,0xe000f
 236:	469c                	lw	a5,8(a3)
 238:	8f99                	sub	a5,a5,a4
 23a:	fe07cee3          	bltz	a5,236 <main+0x18>
#define LOCAL_CONCAT(A, B) A##B
#define LOCAL_EXP(A, B) LOCAL_CONCAT(A,B)

void usb_setup()
{
	rv003usb_internal_data.se0_windup = 0;
 23e:	c201a823          	sw	zero,-976(gp) # 2000002c <rv003usb_internal_data+0x18>

	// Enable GPIOs, TIMERs
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
 242:	40021737          	lui	a4,0x40021
 246:	4f1c                	lw	a5,24(a4)
	}
#endif

	// GPIO Setup
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
 248:	ff0016b7          	lui	a3,0xff001
 24c:	16fd                	addi	a3,a3,-1
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
 24e:	0217e793          	ori	a5,a5,33
 252:	cf1c                	sw	a5,24(a4)
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
 254:	40011737          	lui	a4,0x40011
 258:	40072783          	lw	a5,1024(a4) # 40011400 <_eusrstack+0x20010c00>
 25c:	40070613          	addi	a2,a4,1024
 260:	8ff5                	and	a5,a5,a3
			) )) )
		 |
#ifdef USB_PIN_DPU
		(GPIO_Speed_50MHz | GPIO_CNF_OUT_PP)<<(4*USB_PIN_DPU) |
#endif
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DP) | 
 262:	003886b7          	lui	a3,0x388
 266:	8fd5                	or	a5,a5,a3
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
 268:	40f72023          	sw	a5,1024(a4)
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DM);

	// Configure USB_PIN_DM (D-) as an interrupt on falling edge.
	AFIO->EXTICR = LOCAL_EXP(GPIO_PortSourceGPIO,USB_PORT)<<(USB_PIN_DM*2); // Configure EXTI interrupt for USB_PIN_DM
 26c:	400107b7          	lui	a5,0x40010
 270:	30000713          	li	a4,768
 274:	c798                	sw	a4,8(a5)
	EXTI->INTENR = 1<<USB_PIN_DM; // Enable EXTI interrupt
 276:	4741                	li	a4,16
 278:	40e7a023          	sw	a4,1024(a5) # 40010400 <_eusrstack+0x2000fc00>
 27c:	40078693          	addi	a3,a5,1024
	EXTI->FTENR = 1<<USB_PIN_DM;  // Enable falling edge trigger for USB_PIN_DM (D-)
 280:	c6d8                	sw	a4,12(a3)

#ifdef USB_PIN_DPU
	// This drives USB_PIN_DPU (D- Pull-Up) high, which will tell the host that we are going on-bus.
	LOCAL_EXP(GPIO,USB_PORT)->BSHR = 1<<USB_PIN_DPU;
 282:	02000793          	li	a5,32
 286:	ca1c                	sw	a5,16(a2)
	NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 288:	00100737          	lui	a4,0x100
 28c:	e000e7b7          	lui	a5,0xe000e
 290:	10e7a023          	sw	a4,256(a5) # e000e100 <_eusrstack+0xc000d900>
	Delay_Ms(1); // Ensures USB re-enumeration after bootloader or reset; Spec demand >2.5µs ( TDDIS )
	usb_setup();
	while(1)
 294:	a001                	j	294 <main+0x76>

00000296 <usb_pid_handle_in>:
	NVIC_EnableIRQ( EXTI7_0_IRQn );
}


void usb_pid_handle_in( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )
{
 296:	1131                	addi	sp,sp,-20
 298:	c622                	sw	s0,12(sp)
 29a:	c426                	sw	s1,8(sp)
 29c:	c806                	sw	ra,16(sp)
	ist->current_endpoint = endp;
	struct usb_endpoint * e = &ist->eps[endp];

	int tosend = 0;
	uint8_t * sendnow;
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 29e:	00561793          	slli	a5,a2,0x5
{
 2a2:	84ba                	mv	s1,a4
	ist->current_endpoint = endp;
 2a4:	c310                	sw	a2,0(a4)
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 2a6:	973e                	add	a4,a4,a5
 2a8:	5318                	lw	a4,32(a4)
{
 2aa:	8432                	mv	s0,a2
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 2ac:	0c300693          	li	a3,195
 2b0:	c319                	beqz	a4,2b6 <usb_pid_handle_in+0x20>
 2b2:	04b00693          	li	a3,75



#if RV003USB_USE_REBOOT_FEATURE_REPORT
	if( ist->reboot_armed == 2 )
 2b6:	44d0                	lw	a2,12(s1)
 2b8:	4709                	li	a4,2
 2ba:	04e61663          	bne	a2,a4,306 <usb_pid_handle_in+0x70>
	{
		usb_send_empty( sendtok );
 2be:	8536                	mv	a0,a3
 2c0:	c23e                	sw	a5,4(sp)
 2c2:	c036                	sw	a3,0(sp)
 2c4:	2945                	jal	774 <usb_send_empty>

		// Initiate boot into bootloader
		FLASH->BOOT_MODEKEYR = FLASH_KEY1;
 2c6:	45670637          	lui	a2,0x45670
 2ca:	40022737          	lui	a4,0x40022
 2ce:	12360613          	addi	a2,a2,291 # 45670123 <_eusrstack+0x2566f923>
 2d2:	d710                	sw	a2,40(a4)
		FLASH->BOOT_MODEKEYR = FLASH_KEY2;
 2d4:	cdef9637          	lui	a2,0xcdef9
 2d8:	9ab60613          	addi	a2,a2,-1621 # cdef89ab <_eusrstack+0xadef81ab>
 2dc:	d710                	sw	a2,40(a4)
		FLASH->STATR = 1<<14; // 1<<14 is zero, so, boot bootloader code. Unset for user code.
 2de:	6611                	lui	a2,0x4
 2e0:	c750                	sw	a2,12(a4)
		FLASH->CTLR = CR_LOCK_Set;
 2e2:	08000613          	li	a2,128
 2e6:	cb10                	sw	a2,16(a4)
		RCC->RSTSCKR |= 0x1000000;
 2e8:	40021637          	lui	a2,0x40021
 2ec:	5258                	lw	a4,36(a2)
 2ee:	010005b7          	lui	a1,0x1000
		PFIC->SCTLR = 1<<31;
 2f2:	4792                	lw	a5,4(sp)
		RCC->RSTSCKR |= 0x1000000;
 2f4:	8f4d                	or	a4,a4,a1
		PFIC->SCTLR = 1<<31;
 2f6:	4682                	lw	a3,0(sp)
		RCC->RSTSCKR |= 0x1000000;
 2f8:	d258                	sw	a4,36(a2)
		PFIC->SCTLR = 1<<31;
 2fa:	e000f737          	lui	a4,0xe000f
 2fe:	80000637          	lui	a2,0x80000
 302:	d0c72823          	sw	a2,-752(a4) # e000ed10 <_eusrstack+0xc000e510>
	}
#endif

#if RV003USB_HANDLE_IN_REQUEST
	if( e->custom || endp )
 306:	97a6                	add	a5,a5,s1
 308:	579c                	lw	a5,40(a5)
 30a:	8fc1                	or	a5,a5,s0
 30c:	cfd1                	beqz	a5,3a8 <usb_pid_handle_in+0x112>
	}
}

void usb_handle_user_in_request( struct usb_endpoint * e, uint8_t * scratchpad, int endp, uint32_t sendtok, struct rv003usb_internal * ist )
{
	if( endp == 1 )
 30e:	4785                	li	a5,1
 310:	04f41f63          	bne	s0,a5,36e <usb_pid_handle_in+0xd8>
	{
		// Mouse (4 bytes)
		static int i;
		static uint8_t tsajoystick[4] = { 0x00, 0x00, 0x00, 0x00 };
		i++;
 314:	c0818713          	addi	a4,gp,-1016 # 20000004 <i.3>
 318:	431c                	lw	a5,0(a4)
		int mode = i >> 5;

		// Move the mouse right, down, left and up in a square.
		switch( mode & 3 )
 31a:	4609                	li	a2,2
		i++;
 31c:	0785                	addi	a5,a5,1
 31e:	c31c                	sw	a5,0(a4)
		int mode = i >> 5;
 320:	8795                	srai	a5,a5,0x5
		switch( mode & 3 )
 322:	8b8d                	andi	a5,a5,3
 324:	c1418713          	addi	a4,gp,-1004 # 20000010 <tsajoystick.2>
 328:	02c78963          	beq	a5,a2,35a <usb_pid_handle_in+0xc4>
 32c:	460d                	li	a2,3
 32e:	02c78a63          	beq	a5,a2,362 <usb_pid_handle_in+0xcc>
 332:	00878763          	beq	a5,s0,340 <usb_pid_handle_in+0xaa>
		{
		case 0: tsajoystick[1] =  1; tsajoystick[2] = 0; break;
 336:	008700a3          	sb	s0,1(a4)
		case 1: tsajoystick[1] =  0; tsajoystick[2] = 1; break;
		case 2: tsajoystick[1] = -1; tsajoystick[2] = 0; break;
 33a:	00070123          	sb	zero,2(a4)
 33e:	a029                	j	348 <usb_pid_handle_in+0xb2>
		case 1: tsajoystick[1] =  0; tsajoystick[2] = 1; break;
 340:	000700a3          	sb	zero,1(a4)
 344:	00870123          	sb	s0,2(a4)
		case 3: tsajoystick[1] =  0; tsajoystick[2] =-1; break;
		}
		usb_send_data( tsajoystick, 4, 0, sendtok );
 348:	4601                	li	a2,0
 34a:	4591                	li	a1,4
 34c:	c1418513          	addi	a0,gp,-1004 # 20000010 <tsajoystick.2>
	}
	else
	{
		usb_send_data( sendnow, tosend, 0, sendtok );
	}
}
 350:	4432                	lw	s0,12(sp)
 352:	40c2                	lw	ra,16(sp)
 354:	44a2                	lw	s1,8(sp)
 356:	0151                	addi	sp,sp,20
		usb_send_data( sendnow, tosend, 0, sendtok );
 358:	a12d                	j	782 <usb_send_data>
		case 2: tsajoystick[1] = -1; tsajoystick[2] = 0; break;
 35a:	57fd                	li	a5,-1
 35c:	00f700a3          	sb	a5,1(a4)
 360:	bfe9                	j	33a <usb_pid_handle_in+0xa4>
		case 3: tsajoystick[1] =  0; tsajoystick[2] =-1; break;
 362:	57fd                	li	a5,-1
 364:	000700a3          	sb	zero,1(a4)
 368:	00f70123          	sb	a5,2(a4)
 36c:	bff1                	j	348 <usb_pid_handle_in+0xb2>
	}
	else if( endp == 2 )
 36e:	4789                	li	a5,2
 370:	04f41763          	bne	s0,a5,3be <usb_pid_handle_in+0x128>
	{
		// Keyboard (8 bytes)
		static int i;
		static uint8_t tsajoystick[8] = { 0x00 };
		usb_send_data( tsajoystick, 8, 0, sendtok );
 374:	c0c18413          	addi	s0,gp,-1012 # 20000008 <tsajoystick.1>
 378:	4601                	li	a2,0
 37a:	45a1                	li	a1,8
 37c:	c0c18513          	addi	a0,gp,-1012 # 20000008 <tsajoystick.1>
 380:	2109                	jal	782 <usb_send_data>

		i++;
 382:	c0418713          	addi	a4,gp,-1020 # 20000000 <i.0>
 386:	431c                	lw	a5,0(a4)
 388:	0785                	addi	a5,a5,1
 38a:	c31c                	sw	a5,0(a4)

		// Press a Key every second or so.
		if( (i & 0x7f) == 0 )
 38c:	07f7f793          	andi	a5,a5,127
 390:	eb89                	bnez	a5,3a2 <usb_pid_handle_in+0x10c>
		{
			tsajoystick[4] = 0x05; // 0x05 = "b"; 0x53 = NUMLOCK; 0x39 = CAPSLOCK;
 392:	4795                	li	a5,5
 394:	00f40223          	sb	a5,4(s0)
}
 398:	40c2                	lw	ra,16(sp)
 39a:	4432                	lw	s0,12(sp)
 39c:	44a2                	lw	s1,8(sp)
 39e:	0151                	addi	sp,sp,20
 3a0:	8082                	ret
		}
		else
		{
			tsajoystick[4] = 0;
 3a2:	00040223          	sb	zero,4(s0)
 3a6:	bfcd                	j	398 <usb_pid_handle_in+0x102>
	int offset = (e->count)<<3;
 3a8:	4cc8                	lw	a0,28(s1)
	sendnow = tsend + offset;
 3aa:	5c9c                	lw	a5,56(s1)
	tosend = (int)e->max_len - offset;
 3ac:	54cc                	lw	a1,44(s1)
	int offset = (e->count)<<3;
 3ae:	050e                	slli	a0,a0,0x3
	tosend = (int)e->max_len - offset;
 3b0:	8d89                	sub	a1,a1,a0
	sendnow = tsend + offset;
 3b2:	953e                	add	a0,a0,a5
	if( tosend > ENDPOINT0_SIZE ) tosend = ENDPOINT0_SIZE;
 3b4:	47a1                	li	a5,8
 3b6:	00b7ca63          	blt	a5,a1,3ca <usb_pid_handle_in+0x134>
	if( tosend <= 0 )
 3ba:	00b04963          	bgtz	a1,3cc <usb_pid_handle_in+0x136>
}
 3be:	4432                	lw	s0,12(sp)
 3c0:	40c2                	lw	ra,16(sp)
 3c2:	44a2                	lw	s1,8(sp)
		usb_send_empty( sendtok );
 3c4:	8536                	mv	a0,a3
}
 3c6:	0151                	addi	sp,sp,20
		usb_send_empty( sendtok );
 3c8:	a675                	j	774 <usb_send_empty>
	if( tosend > ENDPOINT0_SIZE ) tosend = ENDPOINT0_SIZE;
 3ca:	45a1                	li	a1,8
		usb_send_data( sendnow, tosend, 0, sendtok );
 3cc:	4601                	li	a2,0
 3ce:	b749                	j	350 <usb_pid_handle_in+0xba>

000003d0 <usb_pid_handle_data>:
}

void usb_pid_handle_data( uint32_t this_token, uint8_t * data, uint32_t which_data, uint32_t length, struct rv003usb_internal * ist )
{
	//Received data from host.
	int epno = ist->current_endpoint;
 3d0:	00072303          	lw	t1,0(a4)

	length -= 3;
	uint8_t * data_in = __builtin_assume_aligned( data, 4 );

	// Already received this packet.
	if( e->toggle_out != which_data )
 3d4:	00531793          	slli	a5,t1,0x5
 3d8:	97ba                	add	a5,a5,a4
 3da:	53c8                	lw	a0,36(a5)
 3dc:	04c51863          	bne	a0,a2,42c <usb_pid_handle_data+0x5c>
	{
		goto just_ack;
	}

	e->toggle_out = !e->toggle_out;
 3e0:	00153513          	seqz	a0,a0
 3e4:	d3c8                	sw	a0,36(a5)


#if RV003USB_HANDLE_USER_DATA || RV003USB_USE_REBOOT_FEATURE_REPORT || RV003USB_USB_TERMINAL
	if( epno || ( !ist->setup_request && length > 3 )  )
 3e6:	00031863          	bnez	t1,3f6 <usb_pid_handle_data+0x26>
 3ea:	471c                	lw	a5,8(a4)
 3ec:	e7b1                	bnez	a5,438 <usb_pid_handle_data+0x68>
	length -= 3;
 3ee:	16f5                	addi	a3,a3,-3
	if( epno || ( !ist->setup_request && length > 3 )  )
 3f0:	478d                	li	a5,3
 3f2:	02d7fd63          	bgeu	a5,a3,42c <usb_pid_handle_data+0x5c>
	{
#if RV003USB_USE_REBOOT_FEATURE_REPORT
		if( ist->reboot_armed )
 3f6:	475c                	lw	a5,12(a4)
 3f8:	cb95                	beqz	a5,42c <usb_pid_handle_data+0x5c>
		{
			uint32_t * base = __builtin_assume_aligned( data_in, 4 );
			if( epno == 0 && base[0] == 0xaa3412fd && (base[1] & 0x00ffffff) == 0x00ddccbb )
 3fa:	02031763          	bnez	t1,428 <usb_pid_handle_data+0x58>
 3fe:	4194                	lw	a3,0(a1)
 400:	aa3417b7          	lui	a5,0xaa341
 404:	2fd78793          	addi	a5,a5,765 # aa3412fd <_eusrstack+0x8a340afd>
 408:	02f69063          	bne	a3,a5,428 <usb_pid_handle_data+0x58>
 40c:	41dc                	lw	a5,4(a1)
 40e:	00ddd6b7          	lui	a3,0xddd
 412:	cbb68693          	addi	a3,a3,-837 # ddccbb <rv003usb.c.a1412ea1+0xdda597>
 416:	07a2                	slli	a5,a5,0x8
 418:	83a1                	srli	a5,a5,0x8
 41a:	00d79763          	bne	a5,a3,428 <usb_pid_handle_data+0x58>
			{
				e->count = 7;
 41e:	479d                	li	a5,7
 420:	cf5c                	sw	a5,28(a4)
				ist->reboot_armed = 2;
 422:	4789                	li	a5,2

		if( reqShl == (0x0921>>1) )
		{
			// Class request (Will be writing)  This is hid_send_feature_report
#if RV003USB_USE_REBOOT_FEATURE_REPORT
			if( wvi == 0x000003fd ) ist->reboot_armed = 1;
 424:	c75c                	sw	a5,12(a4)
 426:	a019                	j	42c <usb_pid_handle_data+0x5c>
				ist->reboot_armed = 0;
 428:	00072623          	sw	zero,12(a4)
		}
	}
just_ack:
	{
		//Got the right data.  Acknowledge.
		usb_send_data( 0, 0, 2, 0xD2 ); // Send ACK
 42c:	0d200693          	li	a3,210
 430:	4609                	li	a2,2
 432:	4581                	li	a1,0
 434:	4501                	li	a0,0
 436:	a6b1                	j	782 <usb_send_data>
		uint32_t wvi = s->lValueLSBIndexMSB;
 438:	0045d683          	lhu	a3,4(a1) # 1000004 <rv003usb.c.a1412ea1+0xffd8e0>
 43c:	0025d783          	lhu	a5,2(a1)
		uint32_t wLength = s->wLength;
 440:	0065d503          	lhu	a0,6(a1)
		uint32_t wvi = s->lValueLSBIndexMSB;
 444:	06c2                	slli	a3,a3,0x10
 446:	8edd                	or	a3,a3,a5
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
 448:	0005d783          	lhu	a5,0(a1)
		e->count = 0;
 44c:	00072e23          	sw	zero,28(a4)
		e->opaque = 0;
 450:	02072c23          	sw	zero,56(a4)
		e->custom = 0;
 454:	02072423          	sw	zero,40(a4)
		e->max_len = 0;
 458:	02072623          	sw	zero,44(a4)
		ist->setup_request = 0;
 45c:	00072423          	sw	zero,8(a4)
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
 460:	8385                	srli	a5,a5,0x1
		if( reqShl == (0x0921>>1) )
 462:	49000613          	li	a2,1168
 466:	00c79863          	bne	a5,a2,476 <usb_pid_handle_data+0xa6>
			if( wvi == 0x000003fd ) ist->reboot_armed = 1;
 46a:	3fd00793          	li	a5,1021
 46e:	faf69fe3          	bne	a3,a5,42c <usb_pid_handle_data+0x5c>
 472:	4785                	li	a5,1
 474:	bf45                	j	424 <usb_pid_handle_data+0x54>
		if( reqShl == (0x0680>>1) ) // GET_DESCRIPTOR = 6 (msb)
 476:	34000613          	li	a2,832
 47a:	02c79d63          	bne	a5,a2,4b4 <usb_pid_handle_data+0xe4>
 47e:	6785                	lui	a5,0x1
 480:	92478793          	addi	a5,a5,-1756 # 924 <descriptor_list>
 484:	06078593          	addi	a1,a5,96
					e->max_len = (swLen < elLen)?swLen:elLen;
 488:	832a                	mv	t1,a0
				if( dl->lIndexValue == wvi )
 48a:	4390                	lw	a2,0(a5)
 48c:	02d61063          	bne	a2,a3,4ac <usb_pid_handle_data+0xdc>
					e->opaque = (uint8_t*)dl->addr;
 490:	43d0                	lw	a2,4(a5)
 492:	df10                	sw	a2,56(a4)
					uint16_t elLen = dl->length;
 494:	0087c603          	lbu	a2,8(a5)
					e->max_len = (swLen < elLen)?swLen:elLen;
 498:	01061293          	slli	t0,a2,0x10
 49c:	0102d293          	srli	t0,t0,0x10
 4a0:	00557363          	bgeu	a0,t0,4a6 <usb_pid_handle_data+0xd6>
 4a4:	861a                	mv	a2,t1
 4a6:	0642                	slli	a2,a2,0x10
 4a8:	8241                	srli	a2,a2,0x10
 4aa:	d750                	sw	a2,44(a4)
			for( i = 0; i < DESCRIPTOR_LIST_ENTRIES; i++ )
 4ac:	07b1                	addi	a5,a5,12
 4ae:	fcf59ee3          	bne	a1,a5,48a <usb_pid_handle_data+0xba>
 4b2:	bfad                	j	42c <usb_pid_handle_data+0x5c>
		else if( reqShl == (0x0500>>1) ) // SET_ADDRESS = 0x05
 4b4:	28000613          	li	a2,640
 4b8:	f6c79ae3          	bne	a5,a2,42c <usb_pid_handle_data+0x5c>
			ist->my_address = wvi;
 4bc:	c354                	sw	a3,4(a4)
 4be:	b7bd                	j	42c <usb_pid_handle_data+0x5c>

000004c0 <EXTI7_0_IRQHandler>:
.section .text.vector_handler
.global EXTI7_0_IRQHandler

.balign 4
EXTI7_0_IRQHandler:
	addi	sp,sp,-80
 4c0:	715d                	addi	sp,sp,-80
	sw	a0, 0(sp)
 4c2:	c02a                	sw	a0,0(sp)
	sw	a5, 20(sp)
 4c4:	ca3e                	sw	a5,20(sp)
	la a5, USB_GPIO_BASE
 4c6:	400117b7          	lui	a5,0x40011
 4ca:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>
	c.lw a0, INDR_OFFSET(a5) // MUST check SE0 immediately.
 4ce:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK
 4d0:	8961                	andi	a0,a0,24

	sw	a1, 4(sp)
 4d2:	c22e                	sw	a1,4(sp)
	sw	a2, 8(sp)
 4d4:	c432                	sw	a2,8(sp)
	sw	a3, 12(sp)
 4d6:	c636                	sw	a3,12(sp)
	sw	a4, 16(sp)
 4d8:	c83a                	sw	a4,16(sp)
	sw	s1, 28(sp)
 4da:	ce26                	sw	s1,28(sp)
	c.lw a2, 0(a1)
	c.andi a2, USB_DMASK
	c.beqz a2, another_interrupt_check
#endif

	SAVE_DEBUG_MARKER( 48 );
 4dc:	d812                	sw	tp,48(sp)
	DEBUG_TICK_SETUP
 4de:	40013237          	lui	tp,0x40013
 4e2:	c5820213          	addi	tp,tp,-936 # 40012c58 <_eusrstack+0x20012458>
	c.lw a1, INDR_OFFSET(a5)
 4e6:	478c                	lw	a1,8(a5)
	c.andi a1, USB_DMASK;
 4e8:	89e1                	andi	a1,a1,24

	// Finish jump to se0
	c.beqz a0, handle_se0_keepalive
 4ea:	22050763          	beqz	a0,718 <handle_se0_keepalive>

	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 4ee:	4788                	lw	a0,8(a5)
 4f0:	8961                	andi	a0,a0,24
 4f2:	02b51b63          	bne	a0,a1,528 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 4f6:	4788                	lw	a0,8(a5)
 4f8:	8961                	andi	a0,a0,24
 4fa:	02b51763          	bne	a0,a1,528 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 4fe:	4788                	lw	a0,8(a5)
 500:	8961                	andi	a0,a0,24
 502:	02b51363          	bne	a0,a1,528 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 506:	4788                	lw	a0,8(a5)
 508:	8961                	andi	a0,a0,24
 50a:	00b51f63          	bne	a0,a1,528 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 50e:	4788                	lw	a0,8(a5)
 510:	8961                	andi	a0,a0,24
 512:	00b51b63          	bne	a0,a1,528 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 516:	4788                	lw	a0,8(a5)
 518:	8961                	andi	a0,a0,24
 51a:	00b51763          	bne	a0,a1,528 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 51e:	4788                	lw	a0,8(a5)
 520:	8961                	andi	a0,a0,24
 522:	00b51363          	bne	a0,a1,528 <syncout>
	c.j syncout
 526:	a009                	j	528 <syncout>

00000528 <syncout>:
syncout:
	sw	s0, 24(sp)
 528:	cc22                	sw	s0,24(sp)
	li a2, 0
 52a:	4601                	li	a2,0
	sw	t0, 32(sp)  // XXX NOTE: This is actually unused register - remove some day?
 52c:	d016                	sw	t0,32(sp)
	sw	t1, 36(sp)
 52e:	d21a                	sw	t1,36(sp)

00000530 <preamble_loop>:
	
	// This is actually somewhat late.
	// The preamble loop should try to make it earlier.
.balign 4
preamble_loop:
	DEBUG_TICK_MARK
 530:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 534:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 536:	8961                	andi	a0,a0,24
	c.beqz a0, done_usb_message // SE0 here?
 538:	16050f63          	beqz	a0,6b6 <done_usb_message>
	c.xor a0, a1;
 53c:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1.
 53e:	8da9                	xor	a1,a1,a0
	j 1f; 1: // 4 cycles?
 540:	a009                	j	542 <preamble_loop+0x12>
	c.beqz a0, done_preamble
 542:	c909                	beqz	a0,554 <done_preamble>
	j 1f; 1: // 4 cycles?
 544:	a009                	j	546 <preamble_loop+0x16>
	c.lw s0, INDR_OFFSET(a5);
 546:	4780                	lw	s0,8(a5)
	c.andi s0, USB_DMASK;
 548:	8861                	andi	s0,s0,24
	c.xor s0, a1
 54a:	8c2d                	xor	s0,s0,a1

	// TRICKY: This helps retime the USB sync.
	// If s0 is nonzero, then it's changed (we're going too slow)
	c.bnez s0, 2f;  // This code takes 6 cycles or 8 cycles, depending.
 54c:	e011                	bnez	s0,550 <preamble_loop+0x20>
	c.j 1f; 1:
 54e:	a009                	j	550 <preamble_loop+0x20>
	2:
	j preamble_loop // 4 cycles
 550:	b7c5                	j	530 <preamble_loop>
 552:	0001                	nop

00000554 <done_preamble>:
.balign 4
done_preamble:
	sw  t2, 40(sp)
 554:	d41e                	sw	t2,40(sp)
	sw  ra, 52(sp)
 556:	da06                	sw	ra,52(sp)
	// 16-byte temporary buffer at 56+sp

	// XXX TODO: Do one byte here to determine the header byte and from that set the CRC.
	c.li s1, 8
 558:	44a1                	li	s1,8

	// This is the first bit that matters.
	c.li s0, 6 // 1 runs.
 55a:	4419                	li	s0,6

	c.nop; 
 55c:	0001                	nop
 55e:	0001                	nop

00000560 <packet_type_loop>:
packet_type_loop:
	// Up here to delay loop a tad, and we need to execute them anyway.
	// TODO: Maybe we could further sync bits here instead of take up time?
	// I.e. can we do what we're doing above, here, and take less time, but sync
	// up when possible.
	li a3, 0xffff // Starting CRC of 0.   Because USB doesn't respect reverse CRCing.
 560:	66c1                	lui	a3,0x10
 562:	16fd                	addi	a3,a3,-1
	li a4, 0xa001
 564:	6729                	lui	a4,0xa
 566:	0705                	addi	a4,a4,1
	addi  t2, sp, DATA_PTR_OFFSET //rv003usb_internal_data
 568:	03f10393          	addi	t2,sp,63
	la  t0, 0x80
 56c:	08000293          	li	t0,128
	c.nop
 570:	0001                	nop
 572:	0001                	nop

	DEBUG_TICK_MARK
 574:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 578:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 57a:	8961                	andi	a0,a0,24
	c.beqz a0, done_usb_message // Not se0 complete, that can't happen here and be valid.
 57c:	12050d63          	beqz	a0,6b6 <done_usb_message>
	c.xor a0, a1;
 580:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle
 582:	8da9                	xor	a1,a1,a0

	// No CRC for the header.
	//c.srli a0, USB_PIN_DP
	//c.addi a0, 1 // 00 -> 1, 11 -> 100
	//c.andi a0, 1 // If 1, 1 if 0, 0
        c.nop
 584:	0001                	nop
        seqz a0, a0
 586:	00153513          	seqz	a0,a0

	// Write header into byte in reverse order, because we can.
	c.slli a2, 1
 58a:	0606                	slli	a2,a2,0x1
	c.or a2, a0
 58c:	8e49                	or	a2,a2,a0

	// Handle bit stuffing rules.
	c.addi a0, -1 // 0->0xffffffff 1->0
 58e:	157d                	addi	a0,a0,-1
	c.or s0, a0
 590:	8c49                	or	s0,s0,a0
	c.andi s0, 7
 592:	881d                	andi	s0,s0,7
	c.addi s0, -1
 594:	147d                	addi	s0,s0,-1
	c.addi s1, -1
 596:	14fd                	addi	s1,s1,-1
	c.bnez s1, packet_type_loop
 598:	f4e1                	bnez	s1,560 <packet_type_loop>
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	

	// XXX Here, figure out CRC polynomial.

	li s1, (USB_BUFFER_SIZE*8) // # of bits we culd read.
 59a:	06000493          	li	s1,96
	//
	// When we get here, packet type is loaded in A2.
	// If packet type is 0xXX01 or 0xXX11
	// the LSBs are the inverted packet type.
	// we can branch off of bit 2.
	andi a0, a2, 0x0c
 59e:	00c67513          	andi	a0,a2,12

	// if a0 is 1 then it's DATA (full CRC) otherwise,
	// (0) for setup or PARTIAL CRC.
	// Careful:  This has to take a constant amount of time either way the branch goes.
	c.beqz a0, data_crc
 5a2:	c509                	beqz	a0,5ac <data_crc>
	c.li a4, 0x14	
 5a4:	4751                	li	a4,20
	c.li a3, 0x1e
 5a6:	46f9                	li	a3,30
 5a8:	00000013          	nop

000005ac <data_crc>:

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	
.balign 4
is_end_of_byte:
	HANDLE_EOB_YES
 5ac:	00c38023          	sb	a2,0(t2)
 5b0:	00138393          	addi	t2,t2,1

000005b4 <bit_process>:
	// end-of-byte.
.balign 4
bit_process:
	// Debug blip
//	c.lw a4, INDR_OFFSET(a5);
	DEBUG_TICK_MARK
 5b4:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 5b8:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 5ba:	8961                	andi	a0,a0,24
	c.xor a0, a1;
 5bc:	8d2d                	xor	a0,a0,a1
#define HANDLE_NEXT_BYTE(is_end_of_byte, jumptype)  \
	c.addi s1, -1; \
	andi a0, s1, 7; /* s1 could be really really big */ \
	c.jumptype a0, is_end_of_byte /* 4 cycles for this section. (Checked) (Sometimes 5)? */ 

	c.beqz a0, handle_one_bit
 5be:	c50d                	beqz	a0,5e8 <handle_one_bit>

000005c0 <handle_zero_bit>:
handle_zero_bit:
	c.xor a1, a0; // Recover a1, for next cycle
 5c0:	8da9                	xor	a1,a1,a0
	// TODO: Do we have time to do time fixup here?
	// Can we resync time here?
	// If they are different, we need to sloowwww dowwwnnn
	// There is some free time.  Could do something interesting here!!!
	// I was thinking we could put the resync code here.
	c.j 1f; 1:  //Delay 4 cycles.
 5c2:	a009                	j	5c4 <handle_zero_bit+0x4>

	c.li s0, 6      // reset runs-of-one.
 5c4:	4419                	li	s0,6
	c.beqz a1, se0_complete
 5c6:	c9bd                	beqz	a1,63c <se0_complete>

	// Handle CRC (0 bit)  (From @Domkeykong)
	slli a0,a3,31 // Put a3s LSB into a0s MSB
 5c8:	01f69513          	slli	a0,a3,0x1f
	c.srai a0,31    // Copy MSB into all other bits
 5cc:	857d                	srai	a0,a0,0x1f
	c.srli a3,1
 5ce:	8285                	srli	a3,a3,0x1
	c.and  a0, a4
 5d0:	8d79                	and	a0,a0,a4
	c.xor  a3, a0
 5d2:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
 5d4:	8205                	srli	a2,a2,0x1
	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
 5d6:	14fd                	addi	s1,s1,-1
 5d8:	0074f513          	andi	a0,s1,7
 5dc:	d961                	beqz	a0,5ac <data_crc>
	c.nop
 5de:	0001                	nop
	c.nop
 5e0:	0001                	nop
	c.nop
 5e2:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
 5e4:	f8e1                	bnez	s1,5b4 <bit_process>
	c.j done_usb_message
 5e6:	a8c1                	j	6b6 <done_usb_message>

000005e8 <handle_one_bit>:


.balign 4
handle_one_bit:
	c.addi s0, -1; // Count # of runs of 1 (subtract 1)
 5e8:	147d                	addi	s0,s0,-1
	//HANDLE_CRC (1 bit)
	andi a0, a3, 1
 5ea:	0016f513          	andi	a0,a3,1
	c.addi a0, -1
 5ee:	157d                	addi	a0,a0,-1
	c.and a0, a4
 5f0:	8d79                	and	a0,a0,a4
	c.srli a3, 1
 5f2:	8285                	srli	a3,a3,0x1
	c.xor a3, a0
 5f4:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
 5f6:	8205                	srli	a2,a2,0x1
	ori a2, a2, 0x80
 5f8:	08066613          	ori	a2,a2,128
	c.beqz s0, handle_bit_stuff;
 5fc:	c811                	beqz	s0,610 <handle_bit_stuff>

	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
 5fe:	14fd                	addi	s1,s1,-1
 600:	0074f513          	andi	a0,s1,7
 604:	d545                	beqz	a0,5ac <data_crc>
	c.nop // Need extra delay here because we need more time if it's end-of-byte.
 606:	0001                	nop
	c.nop
 608:	0001                	nop
	c.nop
 60a:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
 60c:	f4c5                	bnez	s1,5b4 <bit_process>
	c.j done_usb_message
 60e:	a065                	j	6b6 <done_usb_message>

00000610 <handle_bit_stuff>:

handle_bit_stuff:
	// We want to wait a little bit, then read another byte, and make
	// sure everything is well, before heading back into the main loop
	// Debug blip
	HANDLE_NEXT_BYTE(not_is_end_of_byte_and_bit_stuffed, bnez)
 610:	14fd                	addi	s1,s1,-1
 612:	0074f513          	andi	a0,s1,7
 616:	e509                	bnez	a0,620 <not_is_end_of_byte_and_bit_stuffed>
	HANDLE_EOB_YES
 618:	00c38023          	sb	a2,0(t2)
 61c:	00138393          	addi	t2,t2,1

00000620 <not_is_end_of_byte_and_bit_stuffed>:

not_is_end_of_byte_and_bit_stuffed:
        DEBUG_TICK_MARK
 620:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 624:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 626:	8961                	andi	a0,a0,24
	c.beqz a0, se0_complete
 628:	c911                	beqz	a0,63c <se0_complete>
	c.xor a0, a1;
 62a:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle.
 62c:	8da9                	xor	a1,a1,a0

	// If A0 is a 0 then that's bad, we just did a bit stuff
        //   and A0 == 0 means there was no signal transition
	c.beqz a0, done_usb_message
 62e:	c541                	beqz	a0,6b6 <done_usb_message>

        // Reset bit stuff, delay, then continue onto the next actual bit
	c.li s0, 6;
 630:	4419                	li	s0,6

        c.nop;
 632:	0001                	nop
	nx6p3delay( 2, a0 )
 634:	450d                	li	a0,3
 636:	157d                	addi	a0,a0,-1
 638:	fd7d                	bnez	a0,636 <not_is_end_of_byte_and_bit_stuffed+0x16>

	c.bnez s1, bit_process // + 4 cycles
 63a:	fcad                	bnez	s1,5b4 <bit_process>

0000063c <se0_complete>:

.balign 4
se0_complete:
	// This is triggered when we finished getting a packet.
	andi a0, s1, 7; // Make sure we received an even number of bytes.
 63c:	0074f513          	andi	a0,s1,7
	c.bnez a0, done_usb_message
 640:	e93d                	bnez	a0,6b6 <done_usb_message>


	// Special: handle ACKs?
	// Now we have to decide what we're doing based on the
	// packet type.
	addi  a1, sp, DATA_PTR_OFFSET
 642:	03f10593          	addi	a1,sp,63
 646:	2188                	fld	fa0,0(a1)
	XW_C_LBU(a0, a1, 0);	//lbu  a0, 0(a1)
	c.addi a1, 1
 648:	0585                	addi	a1,a1,1
	// 1001 => 10010110 => PID IN
	// 0001 => 10000111 => PID_OUT
	// 1101 => 10110100 => SETUP    (OK)

	// a0 contains first 4 bytes.
	la ra, done_usb_message_in // Common return address for all function calls.
 64a:	00000097          	auipc	ra,0x0
 64e:	06c08093          	addi	ra,ra,108 # 6b6 <done_usb_message>

	// For ACK don't worry about CRC.
	addi a5, a0, -0b01001011
 652:	fb550793          	addi	a5,a0,-75

	RESTORE_DEBUG_MARKER(48) // restore x4 for whatever in C land.
 656:	5242                	lw	tp,48(sp)

	la a4, rv003usb_internal_data
 658:	c1818713          	addi	a4,gp,-1000 # 20000014 <rv003usb_internal_data>

	// ACK doesn't need good CRC.
	c.beqz a5, usb_pid_handle_ack
 65c:	c7c9                	beqz	a5,6e6 <usb_pid_handle_ack>

	// Next, check for tokens.
	c.bnez a3, crc_for_tokens_would_be_bad_maybe_data
 65e:	ea85                	bnez	a3,68e <crc_for_tokens_would_be_bad_maybe_data>

00000660 <may_be_a_token>:
 660:	2192                	fld	ft3,256(sp)
may_be_a_token:
	// Our CRC is 0, so we might be a token.

	// Do token-y things.
	XW_C_LHU( a2, a1, 0 )
	andi a0, a2, 0x7f // addr
 662:	07f67513          	andi	a0,a2,127
	c.srli a2, 7
 666:	821d                	srli	a2,a2,0x7
	c.andi a2, 0xf    // endp
 668:	8a3d                	andi	a2,a2,15
	li s0, ENDPOINTS
 66a:	440d                	li	s0,3
	bgeu a2, s0, done_usb_message // Make sure < ENDPOINTS
 66c:	04867563          	bgeu	a2,s0,6b6 <done_usb_message>
	c.beqz a0,  yes_check_tokens
 670:	c501                	beqz	a0,678 <yes_check_tokens>
 672:	2340                	fld	fs0,128(a4)
	// Otherwise, we might have our assigned address.
	XW_C_LBU(s0, a4, MY_ADDRESS_OFFSET_BYTES);	//	lbu s0, MY_ADDRESS_OFFSET_BYTES(a4)
	bne s0, a0, done_usb_message // addr != 0 && addr != ours.
 674:	04a41163          	bne	s0,a0,6b6 <done_usb_message>

00000678 <yes_check_tokens>:
yes_check_tokens:
	addi a5, a5, (0b01001011-0b10000111)
 678:	fc478793          	addi	a5,a5,-60
	c.beqz a5, usb_pid_handle_out
 67c:	cfc1                	beqz	a5,714 <usb_pid_handle_out>
	c.addi a5, (0b10000111-0b10010110)
 67e:	17c5                	addi	a5,a5,-15
	c.beqz a5, usb_pid_handle_in
 680:	00079463          	bnez	a5,688 <yes_check_tokens+0x10>
 684:	c13ff06f          	j	296 <usb_pid_handle_in>
	c.addi a5, (0b10010110-0b10110100)
 688:	1789                	addi	a5,a5,-30
	c.beqz a5, usb_pid_handle_setup
 68a:	cbb5                	beqz	a5,6fe <usb_pid_handle_setup>

	c.j done_usb_message_in
 68c:	a02d                	j	6b6 <done_usb_message>

0000068e <crc_for_tokens_would_be_bad_maybe_data>:

	// CRC is nonzero. (Good for Data packets)
crc_for_tokens_would_be_bad_maybe_data:
	li s0, 0xb001  // UGH: You can't use the CRC16 in reverse :(
 68e:	642d                	lui	s0,0xb
 690:	0405                	addi	s0,s0,1
	c.sub a3, s0
 692:	8e81                	sub	a3,a3,s0
	c.bnez a3, done_usb_message_in
 694:	e28d                	bnez	a3,6b6 <done_usb_message>
	// Good CRC!!
	sub a3, t2, a1 //a3 = # of bytes read..
 696:	40b386b3          	sub	a3,t2,a1
	c.addi a3, 1
 69a:	0685                	addi	a3,a3,1
	addi a5, a5, (0b01001011-0b11000011)
 69c:	f8878793          	addi	a5,a5,-120
	c.li a2, 0
 6a0:	4601                	li	a2,0
	c.beqz a5, usb_pid_handle_data
 6a2:	00079463          	bnez	a5,6aa <crc_for_tokens_would_be_bad_maybe_data+0x1c>
 6a6:	d2bff06f          	j	3d0 <usb_pid_handle_data>
	c.addi a5, (0b11000011-0b11010010)
 6aa:	17c5                	addi	a5,a5,-15
	c.li a2, 1
 6ac:	4605                	li	a2,1
	c.beqz a5, usb_pid_handle_data
 6ae:	00079463          	bnez	a5,6b6 <done_usb_message>
 6b2:	d1fff06f          	j	3d0 <usb_pid_handle_data>

000006b6 <done_usb_message>:

done_usb_message:
done_usb_message_in:
	lw	s0, 24(sp)
 6b6:	4462                	lw	s0,24(sp)
	lw	s1, 28(sp)
 6b8:	44f2                	lw	s1,28(sp)
	lw	t0, 32(sp)
 6ba:	5282                	lw	t0,32(sp)
	lw	t1, 36(sp)
 6bc:	5312                	lw	t1,36(sp)
	lw	t2, 40(sp)
 6be:	53a2                	lw	t2,40(sp)
	lw  ra, 52(sp)
 6c0:	50d2                	lw	ra,52(sp)

000006c2 <ret_from_se0>:
another_interrupt_handler:
	RV003_ADD_EXTI_HANDLER
#endif

ret_from_se0:
	lw	s1, 28(sp)
 6c2:	44f2                	lw	s1,28(sp)
	RESTORE_DEBUG_MARKER(48)
 6c4:	5242                	lw	tp,48(sp)
	lw	a2, 8(sp)
 6c6:	4622                	lw	a2,8(sp)
	lw	a3, 12(sp)
 6c8:	46b2                	lw	a3,12(sp)
	lw	a4, 16(sp)
 6ca:	4742                	lw	a4,16(sp)
	lw	a1, 4(sp)
 6cc:	4592                	lw	a1,4(sp)

000006ce <interrupt_complete>:

interrupt_complete:
	// Acknowledge interrupt.
	// EXTI->INTFR = 1<<4
	c.j 1f; 1: // Extra little bit of delay to make sure we don't accidentally false fire.
 6ce:	a009                	j	6d0 <interrupt_complete+0x2>

	la a5, EXTI_BASE + 20
 6d0:	400107b7          	lui	a5,0x40010
 6d4:	41478793          	addi	a5,a5,1044 # 40010414 <_eusrstack+0x2000fc14>
#ifdef RV003_ADD_EXTI_MASK
	li a0, (RV003_ADD_EXTI_MASK|(1<<USB_PIN_DM))
#else
	li a0, (1<<USB_PIN_DM)
 6d8:	4541                	li	a0,16
#endif
	sw a0, 0(a5)
 6da:	c388                	sw	a0,0(a5)
	
	// Restore stack.
	lw	a0, 0(sp)
 6dc:	4502                	lw	a0,0(sp)
	lw	a5, 20(sp)
 6de:	47d2                	lw	a5,20(sp)
	addi	sp,sp,80
 6e0:	6161                	addi	sp,sp,80
	mret
 6e2:	30200073          	mret

000006e6 <usb_pid_handle_ack>:
	return;
}
*/

usb_pid_handle_ack:
	c.lw a2, 0(a4) //ist->current_endpoint -> endp;
 6e6:	4310                	lw	a2,0(a4)
	c.slli a2, 5
 6e8:	0616                	slli	a2,a2,0x5
	c.add a2, a4
 6ea:	963a                	add	a2,a2,a4
	c.addi a2, ENDP_OFFSET // usb_endpoint eps[ENDPOINTS];
 6ec:	0671                	addi	a2,a2,28

	c.lw a0, (EP_TOGGLE_IN_OFFSET)(a2) // toggle_in=!toggle_in
 6ee:	4248                	lw	a0,4(a2)
	c.li a1, 1
 6f0:	4585                	li	a1,1
	c.xor a0, a1
 6f2:	8d2d                	xor	a0,a0,a1
	c.sw a0, (EP_TOGGLE_IN_OFFSET)(a2)
 6f4:	c248                	sw	a0,4(a2)

	c.lw a0, (EP_COUNT_OFFSET)(a2) // count_in
 6f6:	4208                	lw	a0,0(a2)
	c.addi a0, 1
 6f8:	0505                	addi	a0,a0,1
	c.sw a0, (EP_COUNT_OFFSET)(a2)
 6fa:	c208                	sw	a0,0(a2)

	c.j done_usb_message_in
 6fc:	bf6d                	j	6b6 <done_usb_message>

000006fe <usb_pid_handle_setup>:
	e->count = 0;
	e->toggle_in = 1;
	ist->setup_request = 1;
}*/
usb_pid_handle_setup:
	c.sw a2, 0(a4) // ist->current_endpoint = endp
 6fe:	c310                	sw	a2,0(a4)
	c.li a1, 1
 700:	4585                	li	a1,1
	c.sw a1, SETUP_REQUEST_OFFSET(a4) //ist->setup_request = 1;
 702:	c70c                	sw	a1,8(a4)
	c.slli a2, 3+2
 704:	0616                	slli	a2,a2,0x5
	c.add a2, a4
 706:	963a                	add	a2,a2,a4
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_IN_OFFSET)(a2) //e->toggle_in = 1;
 708:	d20c                	sw	a1,32(a2)
	c.li a1, 0
 70a:	4581                	li	a1,0
	c.sw a1, (ENDP_OFFSET+EP_COUNT_OFFSET)(a2)  //e->count = 0;
 70c:	ce4c                	sw	a1,28(a2)
	c.sw a1, (ENDP_OFFSET+EP_OPAQUE_OFFSET)(a2)  //e->opaque = 0;
 70e:	de0c                	sw	a1,56(a2)
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_OUT_OFFSET)(a2) //e->toggle_out = 0;
 710:	d24c                	sw	a1,36(a2)
	c.j done_usb_message_in	
 712:	b755                	j	6b6 <done_usb_message>

00000714 <usb_pid_handle_out>:
 714:	a310                	fsd	fa2,0(a4)
//This will correctly swap back the endpoint.
usb_pid_handle_out:
	//void usb_pid_handle_out( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )	
	//sb a2, 0(a4) //ist->current_endpoint = endp;
	XW_C_SB( a2, a4, 0 ); // current_endpoint = endp
	c.j done_usb_message_in
 716:	b745                	j	6b6 <done_usb_message>

00000718 <handle_se0_keepalive>:

handle_se0_keepalive:
	// In here, we want to do smart stuff with the
	// 1ms tick.

	la  a0, SYSTICK_CNT
 718:	e000f537          	lui	a0,0xe000f
 71c:	0521                	addi	a0,a0,8
	la a4, rv003usb_internal_data
 71e:	c1818713          	addi	a4,gp,-1000 # 20000014 <rv003usb_internal_data>
	c.lw a1, LAST_SE0_OFFSET(a4) //last cycle count   last_se0_cyccount
 722:	4b0c                	lw	a1,16(a4)
	c.lw a2, 0(a0) //this cycle count
 724:	4110                	lw	a2,0(a0)
	c.sw a2, LAST_SE0_OFFSET(a4) //store it back to last_se0_cyccount
 726:	cb10                	sw	a2,16(a4)
	c.sub a2, a1
 728:	8e0d                	sub	a2,a2,a1
	c.sw a2, DELTA_SE0_OFFSET(a4) //record delta_se0_cyccount
 72a:	cb50                	sw	a2,20(a4)

	li a1, 48000
 72c:	65b1                	lui	a1,0xc
 72e:	b8058593          	addi	a1,a1,-1152 # bb80 <rv003usb.c.a1412ea1+0x945c>
	c.sub a2, a1
 732:	8e0d                	sub	a2,a2,a1
	// This is our deviance from 48MHz.

	// Make sure we aren't in left field.
	li a5, 4000
 734:	6785                	lui	a5,0x1
 736:	fa078793          	addi	a5,a5,-96 # fa0 <_data_lma+0x58c>
	bge a2, a5, ret_from_se0
 73a:	f8f654e3          	bge	a2,a5,6c2 <ret_from_se0>
	li a5, -4000
 73e:	77fd                	lui	a5,0xfffff
 740:	06078793          	addi	a5,a5,96 # fffff060 <_eusrstack+0xdfffe860>
	blt a2, a5, ret_from_se0
 744:	f6f64fe3          	blt	a2,a5,6c2 <ret_from_se0>

	c.lw a1, SE0_WINDUP_OFFSET(a4) // load windup se0_windup
 748:	4f0c                	lw	a1,24(a4)
	c.add a1, a2
 74a:	95b2                	add	a1,a1,a2
	c.sw a1, SE0_WINDUP_OFFSET(a4) // save windup
 74c:	cf0c                	sw	a1,24(a4)

	// No further adjustments
	beqz a1, ret_from_se0
 74e:	d9b5                	beqz	a1,6c2 <ret_from_se0>

	// 0x40021000 = RCC.CTLR
	la a4, 0x40021000
 750:	40021737          	lui	a4,0x40021
	lw a0, 0(a4)
 754:	4308                	lw	a0,0(a4)
	srli a2, a0, 3 // Extract HSI Trim.
 756:	00355613          	srli	a2,a0,0x3
	andi a2, a2, 0b11111
 75a:	8a7d                	andi	a2,a2,31
	li a5, 0xffffff07  
 75c:	f0700793          	li	a5,-249
	and a0, a0, a5	// Mask off non-HSI
 760:	8d7d                	and	a0,a0,a5

	// Decimate windup - use as HSIrim.
	neg a1, a1
 762:	40b005b3          	neg	a1,a1
	srai a2, a1, 9
 766:	4095d613          	srai	a2,a1,0x9
	addi a2, a2, 16  // add HSI offset.
 76a:	0641                	addi	a2,a2,16

	// Put trim in place in register.
	slli a2, a2, 3
 76c:	060e                	slli	a2,a2,0x3
	or a0, a0, a2
 76e:	8d51                	or	a0,a0,a2
	sw a0, 0(a4)
 770:	c308                	sw	a0,0(a4)

	j ret_from_se0
 772:	bf81                	j	6c2 <ret_from_se0>

00000774 <usb_send_empty>:


.balign 4
//void usb_send_empty( uint32_t token );
usb_send_empty:
	c.mv a3, a0
 774:	86aa                	mv	a3,a0
	la a0, always0
 776:	00000517          	auipc	a0,0x0
 77a:	13a50513          	addi	a0,a0,314 # 8b0 <always0>
	li a1, 2
 77e:	4589                	li	a1,2
	c.mv a2, a1
 780:	862e                	mv	a2,a1

00000782 <usb_send_data>:
//void usb_send_data( uint8_t * data, uint32_t length, uint32_t poly_function, uint32_t token );
usb_send_data:
	addi	sp,sp,-16
 782:	1141                	addi	sp,sp,-16
	sw	s0, 0(sp)
 784:	c022                	sw	s0,0(sp)
	sw	s1, 4(sp)
 786:	c226                	sw	s1,4(sp)

	la a5, USB_GPIO_BASE
 788:	400117b7          	lui	a5,0x40011
 78c:	40078793          	addi	a5,a5,1024 # 40011400 <_eusrstack+0x20010c00>

	// ASAP: Turn the bus around and send our preamble + token.
	c.lw a4, CFGLR_OFFSET(a5)
 790:	4398                	lw	a4,0(a5)

	li s1, ~((0b1111<<(USB_PIN_DP*4)) | (0b1111<<(USB_PIN_DM*4)))
 792:	fff014b7          	lui	s1,0xfff01
 796:	14fd                	addi	s1,s1,-1
	and a4, s1, a4
 798:	8f65                	and	a4,a4,s1

	// Convert D+/D- into 2MHz outputs
	li s1, ((0b0010<<(USB_PIN_DP*4)) | (0b0010<<(USB_PIN_DM*4)))
 79a:	000224b7          	lui	s1,0x22
	or a4, s1, a4
 79e:	8f45                	or	a4,a4,s1

	li s1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16))
 7a0:	001004b7          	lui	s1,0x100
 7a4:	04a1                	addi	s1,s1,8
	c.sw s1, BSHR_OFFSET(a5)
 7a6:	cb84                	sw	s1,16(a5)

	//00: Universal push-pull output mode
	c.sw a4, CFGLR_OFFSET(a5)
 7a8:	c398                	sw	a4,0(a5)

	li t1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16)) | (1<<USB_PIN_DM) | (1<<(USB_PIN_DP+16));
 7aa:	00180337          	lui	t1,0x180
 7ae:	0361                	addi	t1,t1,24

	SAVE_DEBUG_MARKER( 8 )
 7b0:	c412                	sw	tp,8(sp)

	// Save off our preamble and token.
	c.slli a3, 7     //Put token further up so it gets sent later.
 7b2:	069e                	slli	a3,a3,0x7
	ori s0, a3, 0x40  
 7b4:	0406e413          	ori	s0,a3,64

	li t0, 0x0000
 7b8:	4281                	li	t0,0
	c.bnez a2, done_poly_check
 7ba:	e609                	bnez	a2,7c4 <done_poly_check>
	li t0, 0xa001
 7bc:	62a9                	lui	t0,0xa
 7be:	0285                	addi	t0,t0,1
	li a2, 0xffff
 7c0:	6641                	lui	a2,0x10
 7c2:	167d                	addi	a2,a2,-1

000007c4 <done_poly_check>:
done_poly_check:

	c.slli a1, 3 // bump up one extra to be # of bits
 7c4:	058e                	slli	a1,a1,0x3
	mv t2, a1
 7c6:	83ae                	mv	t2,a1

	// t0 is our polynomial
	// a2 is our running CRC.
	// a3 is our token.
	DEBUG_TICK_SETUP
 7c8:	40013237          	lui	tp,0x40013
 7cc:	c5820213          	addi	tp,tp,-936 # 40012c58 <_eusrstack+0x20012458>

	c.li a4, 6 // reset bit stuffing.
 7d0:	4719                	li	a4,6
	c.li a1, 15 // 15 bits.
 7d2:	45bd                	li	a1,15

	//c.nop; c.nop; c.nop;
	c.j pre_and_tok_send_inner_loop
 7d4:	a011                	j	7d8 <pre_and_tok_send_inner_loop>
 7d6:	0001                	nop

000007d8 <pre_and_tok_send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
 7d8:	86a2                	mv	a3,s0
	c.srli s0, 1 // Shift down into the next bit.
 7da:	8005                	srli	s0,s0,0x1
	c.andi a3, 1
 7dc:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.

	c.addi a4, -1
 7de:	177d                	addi	a4,a4,-1
	c.bnez a3, pre_and_tok_send_one_bit
 7e0:	e681                	bnez	a3,7e8 <pre_and_tok_send_one_bit>
//Send 0 bit. (Flip)
	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
 7e2:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
 7e6:	4719                	li	a4,6

000007e8 <pre_and_tok_send_one_bit>:
	// DO NOT flip.  Allow a4 to increment.
// Deliberately unaligned for timing purposes.
.balign 4
pre_and_tok_send_one_bit:
	sw s1, BSHR_OFFSET(a5)
 7e8:	cb84                	sw	s1,16(a5)
	//Bit stuffing doesn't happen.
	c.addi a1, -1
 7ea:	15fd                	addi	a1,a1,-1
	c.beqz a1, pre_and_tok_done_sending_data
 7ec:	c591                	beqz	a1,7f8 <pre_and_tok_done_sending_data>
	nx6p3delay( 2, a3 );	c.nop;             // Free time!
 7ee:	468d                	li	a3,3
 7f0:	16fd                	addi	a3,a3,-1
 7f2:	fefd                	bnez	a3,7f0 <pre_and_tok_send_one_bit+0x8>
 7f4:	0001                	nop
	c.j pre_and_tok_send_inner_loop
 7f6:	b7cd                	j	7d8 <pre_and_tok_send_inner_loop>

000007f8 <pre_and_tok_done_sending_data>:
////////////////////////////////////////////////////////////////////////////

	// We have very little time here.  Just enough to do this.

	//Restore size.
	mv a1, t2//lw  a1, 12(sp)
 7f8:	859e                	mv	a1,t2
	c.beqz a1, no_really_done_sending_data  //No actual payload?  Bail!
 7fa:	c5ad                	beqz	a1,864 <no_really_done_sending_data>
	c.addi a1, -1
 7fc:	15fd                	addi	a1,a1,-1
//	beqz t2, no_really_done_sending_data 

	bnez t0, done_poly_check2
 7fe:	00029463          	bnez	t0,806 <done_poly_check2>
	li a2, 0xffff
 802:	6641                	lui	a2,0x10
 804:	167d                	addi	a2,a2,-1

00000806 <done_poly_check2>:
 806:	0001                	nop

00000808 <load_next_byte>:
 808:	2100                	fld	fs0,0(a0)
	// CH32v003 has the XW extension.
	// this replaces: lb s0, 0(a0)
	XW_C_LBU(s0, a0, 0);
	//lb s0, 0(a0)
	//	.long 0x00150513 // addi a0, a0, 1  (For alignment's sake)
	c.addi a0, 1
 80a:	0505                	addi	a0,a0,1

0000080c <send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
 80c:	86a2                	mv	a3,s0
	c.andi a3, 1
 80e:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.
	c.beqz a3, send_zero_bit
 810:	ce81                	beqz	a3,828 <send_zero_bit>
	c.srli s0, 1 // Shift down into the next bit.
 812:	8005                	srli	s0,s0,0x1
//send_one_bit:
	//HANDLE_CRC (1 bit)
	andi a3, a2, 1
 814:	00167693          	andi	a3,a2,1
	c.addi a3, -1
 818:	16fd                	addi	a3,a3,-1
	and a3, a3, t0
 81a:	0056f6b3          	and	a3,a3,t0
	c.srli a2, 1
 81e:	8205                	srli	a2,a2,0x1
	c.xor a2, a3
 820:	8e35                	xor	a2,a2,a3

	c.addi a4, -1
 822:	177d                	addi	a4,a4,-1
	c.beqz a4, insert_stuffed_bit
 824:	cf25                	beqz	a4,89c <insert_stuffed_bit>
	c.j cont_after_jump
 826:	a829                	j	840 <cont_after_jump>

00000828 <send_zero_bit>:
//Send 0 bit. (Flip)
.balign 4
send_zero_bit:
	c.srli s0, 1 // Shift down into the next bit.
 828:	8005                	srli	s0,s0,0x1
	// a3 is temp
	// t0 is polynomial.

	// XXX WARNING: this was by https://github.com/cnlohr/rv003usb/issues/7 
	// TODO Check me!
	slli a3,a2,31 // Put a3s LSB into a0s MSB
 82a:	01f61693          	slli	a3,a2,0x1f
	c.srai a3,31    // Copy MSB into all other bits
 82e:	86fd                	srai	a3,a3,0x1f

	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
 830:	0064c4b3          	xor	s1,s1,t1
	sw s1, BSHR_OFFSET(a5)
 834:	cb84                	sw	s1,16(a5)

	c.li a4, 6 // reset bit stuffing.
 836:	4719                	li	a4,6

	// XXX XXX CRC down here to make bit stuffing timings line up.
	c.srli a2,1
 838:	8205                	srli	a2,a2,0x1
	and a3,a3,t0
 83a:	0056f6b3          	and	a3,a3,t0
	c.xor  a2,a3 
 83e:	8e35                	xor	a2,a2,a3

00000840 <cont_after_jump>:

.balign 4
cont_after_jump:
send_end_bit_complete:
	c.beqz a1, done_sending_data
 840:	c981                	beqz	a1,850 <done_sending_data>
	andi a3, a1, 7
 842:	0075f693          	andi	a3,a1,7
	c.addi a1, -1
 846:	15fd                	addi	a1,a1,-1
	c.beqz a3, load_next_byte
 848:	d2e1                	beqz	a3,808 <load_next_byte>
	// Wait an extra few cycles.
	c.j 1f; 1:
 84a:	a009                	j	84c <cont_after_jump+0xc>
	c.j send_inner_loop
 84c:	b7c1                	j	80c <send_inner_loop>
 84e:	0001                	nop

00000850 <done_sending_data>:

.balign 4
done_sending_data:
	// BUT WAIT!! MAYBE WE NEED TO CRC!
	beqz t0, no_really_done_sending_data
 850:	00028a63          	beqz	t0,864 <no_really_done_sending_data>
	srli t0, t0, 8 // reset poly - we don't want it anymore.
 854:	0082d293          	srli	t0,t0,0x8
	li a1, 7 // Load 8 more bits out
 858:	459d                	li	a1,7
	beqz t0, send_inner_loop  //Second CRC byte
 85a:	fa0289e3          	beqz	t0,80c <send_inner_loop>
	// First CRC byte
	not s0, a2 // get read to send out the CRC.
 85e:	fff64413          	not	s0,a2
	c.j send_inner_loop
 862:	b76d                	j	80c <send_inner_loop>

00000864 <no_really_done_sending_data>:
.balign 4
no_really_done_sending_data:

//	c.bnez a2, poly_function  TODO: Uncomment me!

	nx6p3delay( 2, a3 );
 864:	468d                	li	a3,3
 866:	16fd                	addi	a3,a3,-1
 868:	fefd                	bnez	a3,866 <no_really_done_sending_data+0x2>

	// Need to perform an SE0.
	li s1, (1<<(USB_PIN_DM+16)) | (1<<(USB_PIN_DP+16))
 86a:	001804b7          	lui	s1,0x180
	c.sw s1, BSHR_OFFSET(a5)
 86e:	cb84                	sw	s1,16(a5)

	nx6p3delay( 7, a3 );
 870:	46a1                	li	a3,8
 872:	16fd                	addi	a3,a3,-1
 874:	fefd                	bnez	a3,872 <no_really_done_sending_data+0xe>

	li s1, (1<<(USB_PIN_DM)) | (1<<(USB_PIN_DP+16))
 876:	000804b7          	lui	s1,0x80
 87a:	04c1                	addi	s1,s1,16
	c.sw s1, BSHR_OFFSET(a5)
 87c:	cb84                	sw	s1,16(a5)

	lw s1, CFGLR_OFFSET(a5)
 87e:	4384                	lw	s1,0(a5)
	// Convert D+/D- into inputs.
	li a3, ~((0b11<<(USB_PIN_DP*4)) | (0b11<<(USB_PIN_DM*4)))
 880:	fffcd6b7          	lui	a3,0xfffcd
 884:	16fd                	addi	a3,a3,-1
	and s1, a3, s1
 886:	8cf5                	and	s1,s1,a3
	// 01: Floating input mode.
	li a3, ((0b01<<(USB_PIN_DP*4+2)) | (0b01<<(USB_PIN_DM*4+2)))
 888:	000446b7          	lui	a3,0x44
	or s1, a3, s1
 88c:	8cd5                	or	s1,s1,a3
	sw s1, CFGLR_OFFSET(a5)
 88e:	c384                	sw	s1,0(a5)

	lw	s0, 0(sp)
 890:	4402                	lw	s0,0(sp)
	lw	s1, 4(sp)
 892:	4492                	lw	s1,4(sp)
	RESTORE_DEBUG_MARKER( 8 )
 894:	4222                	lw	tp,8(sp)
	addi	sp,sp,16
 896:	0141                	addi	sp,sp,16
	ret
 898:	8082                	ret
 89a:	0001                	nop

0000089c <insert_stuffed_bit>:

.balign 4
// TODO: This seems to be either 222 or 226 (not 224) in cases.
// It's off by 2 clock cycles.  Probably OK, but, hmm.
insert_stuffed_bit:
	nx6p3delay(3, a3)
 89c:	4691                	li	a3,4
 89e:	16fd                	addi	a3,a3,-1
 8a0:	fefd                	bnez	a3,89e <insert_stuffed_bit+0x2>
	xor s1, s1, t1
 8a2:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
 8a6:	4719                	li	a4,6
	c.nop
 8a8:	0001                	nop
	c.nop
 8aa:	0001                	nop
	sw s1, BSHR_OFFSET(a5)
 8ac:	cb84                	sw	s1,16(a5)
	c.j send_end_bit_complete
 8ae:	bf49                	j	840 <cont_after_jump>

000008b0 <always0>:
 8b0:	0000                	unimp
	...

000008b4 <string3>:
 8b4:	0308 0030 0030 0030 0000 0000               ..0.0.0.....

000008c0 <string2>:
 8c0:	0312 0052 0056 0030 0030 0033 0055 0053     ..R.V.0.0.3.U.S.
 8d0:	0042 0000                                   B...

000008d4 <string1>:
 8d4:	030e 0043 004e 004c 006f 0068 0072 0000     ..C.N.L.o.h.r...

000008e4 <string0>:
 8e4:	0304 0409                                   ....

000008e8 <config_descriptor>:
 8e8:	0209 003b 0102 8000 0964 0004 0100 0103     ..;.....d.......
 8f8:	0002 2109 0110 0100 3422 0700 8105 0403     ...!...."4......
 908:	0a00 0409 0001 0301 0101 0900 1021 0001     ............!...
 918:	2201 0045 0507 0382 0008 000a               ."E.........

00000924 <descriptor_list>:
 924:	0100 0000 0984 0000 0012 0000 0200 0000     ................
 934:	08e8 0000 003b 0000 2200 0000 09e0 0000     ....;...."......
 944:	0034 0000 2200 0001 0998 0000 0045 0000     4...."......E...
 954:	0300 0000 08e4 0000 0004 0000 0301 0409     ................
 964:	08d4 0000 000e 0000 0302 0409 08c0 0000     ................
 974:	0012 0000 0303 0409 08b4 0000 0008 0000     ................

00000984 <device_descriptor>:
 984:	0112 0110 0000 0800 1209 c003 0002 0201     ................
 994:	0103 0000                                   ....

00000998 <keyboard_hid_desc>:
 998:	0105 0609 01a1 0175 0895 0705 e019 e729     ......u.......).
 9a8:	0015 0125 0281 0195 0875 0381 0595 0175     ..%.....u.....u.
 9b8:	0805 0119 0529 0291 0195 0375 0391 0795     ....).....u.....
 9c8:	0875 0391 0695 0875 0015 a725 0705 0019     u.....u...%.....
 9d8:	a729 0081 00c0 0000                         ).......

000009e0 <mouse_hid_desc>:
 9e0:	0105 0209 01a1 0109 00a1 0905 0119 0329     ..............).
 9f0:	0015 0125 0395 0175 0281 0195 0575 0381     ..%...u.....u...
 a00:	0105 3009 3109 3809 8115 7f25 0875 0395     ...0.1.8..%.u...
 a10:	0681 c0c0                                   ....
